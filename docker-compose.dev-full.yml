#
# docker-compose file used ONLY for local development.
# This file is the same as `docker-compose.dev.yml` except it boots the services in containers instead of you running them locally
# For more info, see:
# https://posthog.com/handbook/engineering/developing-locally
#
# PostHog has sunset support for self-hosted K8s deployments.
# See: https://posthog.com/blog/sunsetting-helm-support-posthog
#

services:
    proxy:
        extends:
            file: docker-compose.base.yml
            service: proxy
        ports:
            - 8010:8000
        depends_on:
            - replay-capture
            - capture
            - web
    db:
        extends:
            file: docker-compose.base.yml
            service: db
        ports:
            - '5432:5432'
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U posthog']
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 10s

    redis:
        extends:
            file: docker-compose.base.yml
            service: redis
        ports:
            - '6379:6379'

    redis7:
        extends:
            file: docker-compose.base.yml
            service: redis7
        ports:
            - '6479:6379'

    flower:
        extends:
            file: docker-compose.base.yml
            service: flower
        ports:
            - '5555:5555'

    clickhouse:
        extends:
            file: docker-compose.base.yml
            service: clickhouse
        ports:
            - '8123:8123'
            - '8443:8443'
            - '9000:9000'
            - '9440:9440'
            - '9009:9009'
        volumes:
            # this new entrypoint file is to fix a bug detailed here https://github.com/ClickHouse/ClickHouse/pull/59991
            # revert this when we upgrade clickhouse
            - ./docker/clickhouse/entrypoint.sh:/entrypoint.sh
            - ./posthog/idl:/idl
            - ./docker/clickhouse/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
            - ./docker/clickhouse/config.xml:/etc/clickhouse-server/config.xml
            - ./docker/clickhouse/users-dev.xml:/etc/clickhouse-server/users.xml
            - ./docker/clickhouse/user_defined_function.xml:/etc/clickhouse-server/user_defined_function.xml
            - ./posthog/user_scripts:/var/lib/clickhouse/user_scripts
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        depends_on:
            - kafka
            - zookeeper
        healthcheck:
            test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:8123/ping']
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 10s

    zookeeper:
        extends:
            file: docker-compose.base.yml
            service: zookeeper

    kafka:
        extends:
            file: docker-compose.base.yml
            service: kafka
        ports:
            - '9092:9092'
        depends_on:
            - zookeeper

    kafka_ui:
        extends:
            file: docker-compose.base.yml
            service: kafka_ui
        ports:
            - '9093:8080'
        depends_on:
            - kafka

    objectstorage:
        extends:
            file: docker-compose.base.yml
            service: objectstorage
        ports:
            - '19000:19000'
            - '19001:19001'

    maildev:
        extends:
            file: docker-compose.base.yml
            service: maildev
        ports:
            - '1080:1080'
            - '1025:1025'

    webhook-tester:
        image: tarampampam/webhook-tester:1.1.0
        restart: on-failure
        ports:
            - '2080:2080'
        environment:
            - PORT=2080

    # capture-rs
    capture:
        extends:
            file: docker-compose.base.yml
            service: capture
        environment:
            - DEBUG=1
        depends_on:
            - redis
            - kafka

    # vector replay capture
    replay-capture:
        extends:
            file: docker-compose.base.yml
            service: replay-capture
        depends_on:
            - redis
            - kafka

    property-defs-rs:
        extends:
            file: docker-compose.base.yml
            service: property-defs-rs
        depends_on:
            - kafka

    livestream:
        extends:
            file: docker-compose.base.yml
            service: livestream
        environment:
            - JWT.TOKEN=${SECRET_KEY}
        ports:
            - '8666:8080'
        volumes:
            - ./docker/livestream/configs-dev.yml:/configs/configs.yml

    migrate:
        build: .
        command: >
            bash -c "
            python -m pip install -r /local/requirements-dev.txt &&
            python /local/manage.py create_max_migration_files &&
            ./bin/migrate &&
            python /local/manage.py generate_demo_data"
        volumes:
            - ./posthog:/code/posthog
            - .:/local
        environment:
            DISABLE_SECURE_SSL_REDIRECT: 'true'
            IS_BEHIND_PROXY: 'true'
            DATABASE_URL: 'postgres://posthog:posthog@db:5432/posthog'
            CLICKHOUSE_HOST: 'clickhouse'
            CLICKHOUSE_DATABASE: 'posthog'
            CLICKHOUSE_SECURE: 'false'
            CLICKHOUSE_VERIFY: 'false'
            KAFKA_HOSTS: 'kafka'
            REDIS_URL: 'redis://redis:6379/'
            PGHOST: db
            PGUSER: posthog
            PGPASSWORD: posthog
            DEPLOYMENT: hobby
            DEBUG: 1
        depends_on:
            redis:
                condition: service_started
            db:
                condition: service_healthy
            clickhouse:
                condition: service_healthy

    worker:
        extends:
            file: docker-compose.base.yml
            service: worker
        build: .
        command: >
            bash -c "
            python -m pip install -r /local/requirements-dev.txt &&
            ./bin/start-worker"
        volumes:
            - ./posthog:/code/posthog
            - .:/local
        environment:
            - DEBUG=1
            - PLUGIN_SERVER_IDLE=1
        depends_on:
            migrate:
                condition: service_completed_successfully
            db:
                condition: service_healthy
            redis:
                condition: service_started
            clickhouse:
                condition: service_healthy
            kafka:
                condition: service_started

    frontend:
        image: node:18.19.1-bullseye-slim
        restart: on-failure
        command: >
            bash -c "
            cd /code &&
            npm install -g pnpm &&
            ./bin/start-frontend"
        volumes:
            - .:/code

    web:
        extends:
            file: docker-compose.base.yml
            service: web
        ports:
            - 8000:8000
        build: .
        command: >
            bash -c "
            python -m pip install -r /local/requirements-dev.txt &&
            ./bin/start-backend"
        volumes:
            - ./posthog:/code/posthog
            - .:/local
        environment:
            - DEBUG=1
            - OBJECT_STORAGE_ENDPOINT=http://objectstorage:19000
            - POSTHOG_SKIP_MIGRATION_CHECKS=true
            - JS_URL=http://localhost:8000
            - BILLING_SERVICE_URL=${BILLING_SERVICE_URL:-https://billing.dev.posthog.dev}
        depends_on:
            migrate:
                condition: service_completed_successfully
            db:
                condition: service_healthy
            redis:
                condition: service_started
            clickhouse:
                condition: service_healthy
            kafka:
                condition: service_started

    plugins:
        extends:
            file: docker-compose.base.yml
            service: plugins
        build:
            context: .
            dockerfile: docker/Dockerfile.dev-plugin
        command: >
            bash -c "
            cd /local &&
            ./bin/plugin-server"
        volumes:
            - .:/local
        environment:
            - DOCKER=1
            - DEBUG=1
        depends_on:
            migrate:
                condition: service_completed_successfully
            db:
                condition: service_healthy
            redis:
                condition: service_started
            clickhouse:
                condition: service_healthy
            kafka:
                condition: service_started
            objectstorage:
                condition: service_started

    # Temporal containers
    elasticsearch:
        extends:
            file: docker-compose.base.yml
            service: elasticsearch
        expose:
            - 9200
    temporal:
        extends:
            file: docker-compose.base.yml
            service: temporal
        ports:
            - 7233:7233
    temporal-admin-tools:
        extends:
            file: docker-compose.base.yml
            service: temporal-admin-tools
        depends_on:
            - temporal
    temporal-ui:
        extends:
            file: docker-compose.base.yml
            service: temporal-ui
        ports:
            - 8081:8080
        depends_on:
            temporal:
                condition: service_started
            db:
                condition: service_healthy
    temporal-django-worker:
        extends:
            file: docker-compose.base.yml
            service: temporal-django-worker
        build: .
        command: >
            bash -c "
            python -m pip install -r /local/requirements-dev.txt &&
            ./bin/temporal-django-worker"
        volumes:
            - .:/local
            - ./posthog:/code/posthog
        depends_on:
            - db
            - redis
            - clickhouse
            - kafka
            - objectstorage
            - temporal
