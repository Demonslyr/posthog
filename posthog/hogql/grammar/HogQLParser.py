# Generated from HogQLParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,164,1346,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,1,0,5,
        0,184,8,0,10,0,12,0,187,9,0,1,0,1,0,1,1,1,1,3,1,193,8,1,1,2,1,2,
        1,3,1,3,1,3,1,3,1,3,3,3,202,8,3,1,4,1,4,1,4,5,4,207,8,4,10,4,12,
        4,210,9,4,1,4,3,4,213,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,3,5,227,8,5,1,6,1,6,3,6,231,8,6,1,6,3,6,234,8,6,1,7,1,
        7,3,7,238,8,7,1,7,3,7,241,8,7,1,8,1,8,1,8,1,8,1,8,3,8,248,8,8,1,
        8,1,8,3,8,252,8,8,1,8,1,8,1,9,1,9,1,9,5,9,259,8,9,10,9,12,9,262,
        9,9,1,9,1,9,3,9,266,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,
        275,8,10,1,11,1,11,1,11,1,11,1,11,1,11,3,11,283,8,11,1,12,1,12,1,
        12,1,12,1,12,3,12,290,8,12,1,12,1,12,3,12,294,8,12,1,12,1,12,1,12,
        1,12,3,12,300,8,12,1,12,1,12,1,12,3,12,305,8,12,1,13,1,13,1,13,1,
        13,1,13,1,13,3,13,313,8,13,1,13,1,13,1,13,1,13,1,13,3,13,320,8,13,
        1,14,1,14,1,14,1,14,3,14,326,8,14,1,14,1,14,1,14,1,15,1,15,1,15,
        1,15,1,15,1,16,1,16,3,16,338,8,16,1,17,1,17,1,18,1,18,5,18,344,8,
        18,10,18,12,18,347,9,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,
        1,20,5,20,358,8,20,10,20,12,20,361,9,20,1,20,3,20,364,8,20,1,21,
        1,21,1,21,3,21,369,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,23,1,23,1,23,1,23,1,23,1,23,3,23,385,8,23,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,3,24,396,8,24,1,24,1,24,1,25,1,25,5,25,
        402,8,25,10,25,12,25,405,9,25,1,26,3,26,408,8,26,1,26,1,26,3,26,
        412,8,26,1,26,3,26,415,8,26,1,26,1,26,3,26,419,8,26,1,26,3,26,422,
        8,26,1,26,3,26,425,8,26,1,26,3,26,428,8,26,1,26,3,26,431,8,26,1,
        26,1,26,3,26,435,8,26,1,26,1,26,3,26,439,8,26,1,26,3,26,442,8,26,
        1,26,3,26,445,8,26,1,26,3,26,448,8,26,1,26,3,26,451,8,26,1,26,1,
        26,3,26,455,8,26,1,26,3,26,458,8,26,1,27,1,27,1,27,1,28,1,28,1,28,
        1,28,3,28,467,8,28,1,29,1,29,1,29,1,30,3,30,473,8,30,1,30,1,30,1,
        30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,5,31,492,8,31,10,31,12,31,495,9,31,1,32,1,32,1,32,1,33,1,
        33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,511,8,34,1,
        35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,
        38,1,38,1,38,1,39,1,39,1,39,1,39,3,39,533,8,39,1,39,1,39,3,39,537,
        8,39,1,39,1,39,1,39,1,39,3,39,543,8,39,1,39,1,39,1,39,3,39,548,8,
        39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,3,42,559,8,42,1,
        42,3,42,562,8,42,1,42,1,42,1,42,1,42,3,42,568,8,42,1,42,1,42,1,42,
        1,42,1,42,1,42,3,42,576,8,42,1,42,1,42,1,42,1,42,5,42,582,8,42,10,
        42,12,42,585,9,42,1,43,3,43,588,8,43,1,43,1,43,1,43,3,43,593,8,43,
        1,43,3,43,596,8,43,1,43,3,43,599,8,43,1,43,1,43,3,43,603,8,43,1,
        43,1,43,3,43,607,8,43,1,43,3,43,610,8,43,3,43,612,8,43,1,43,3,43,
        615,8,43,1,43,1,43,3,43,619,8,43,1,43,1,43,3,43,623,8,43,1,43,3,
        43,626,8,43,3,43,628,8,43,3,43,630,8,43,1,44,1,44,1,44,3,44,635,
        8,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,646,8,45,
        1,46,1,46,1,46,1,46,3,46,652,8,46,1,47,1,47,1,47,3,47,657,8,47,1,
        48,1,48,1,48,5,48,662,8,48,10,48,12,48,665,9,48,1,49,1,49,3,49,669,
        8,49,1,49,1,49,3,49,673,8,49,1,49,1,49,3,49,677,8,49,1,50,1,50,1,
        50,1,50,3,50,683,8,50,3,50,685,8,50,1,51,1,51,1,51,5,51,690,8,51,
        10,51,12,51,693,9,51,1,52,1,52,1,52,1,52,1,53,3,53,700,8,53,1,53,
        3,53,703,8,53,1,53,3,53,706,8,53,1,54,1,54,1,54,1,54,1,55,1,55,1,
        55,1,55,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,3,57,725,8,
        57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,
        58,739,8,58,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,
        60,1,60,5,60,753,8,60,10,60,12,60,756,9,60,1,60,3,60,759,8,60,1,
        60,1,60,1,60,1,60,1,60,1,60,1,60,5,60,768,8,60,10,60,12,60,771,9,
        60,1,60,3,60,774,8,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,5,60,783,
        8,60,10,60,12,60,786,9,60,1,60,3,60,789,8,60,1,60,1,60,1,60,1,60,
        1,60,3,60,796,8,60,1,60,1,60,3,60,800,8,60,1,61,1,61,1,61,5,61,805,
        8,61,10,61,12,61,808,9,61,1,61,3,61,811,8,61,1,62,1,62,1,62,3,62,
        816,8,62,1,62,1,62,1,62,1,62,1,62,4,62,823,8,62,11,62,12,62,824,
        1,62,1,62,3,62,829,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,3,62,855,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,872,8,62,1,62,1,62,
        1,62,1,62,3,62,878,8,62,1,62,3,62,881,8,62,1,62,3,62,884,8,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,894,8,62,1,62,1,62,1,
        62,1,62,3,62,900,8,62,1,62,3,62,903,8,62,1,62,3,62,906,8,62,1,62,
        1,62,1,62,1,62,1,62,1,62,3,62,914,8,62,1,62,3,62,917,8,62,1,62,1,
        62,3,62,921,8,62,1,62,3,62,924,8,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,3,62,938,8,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,955,
        8,62,1,62,1,62,1,62,3,62,960,8,62,1,62,1,62,1,62,3,62,965,8,62,1,
        62,1,62,1,62,1,62,3,62,971,8,62,1,62,1,62,1,62,1,62,1,62,3,62,978,
        8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,990,
        8,62,1,62,1,62,3,62,994,8,62,1,62,3,62,997,8,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,3,62,1006,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,3,62,1020,8,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,3,62,1041,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,3,62,1070,8,62,1,62,1,62,1,62,1,62,1,
        62,1,62,3,62,1078,8,62,5,62,1080,8,62,10,62,12,62,1083,9,62,1,63,
        1,63,1,63,1,63,5,63,1089,8,63,10,63,12,63,1092,9,63,1,63,3,63,1095,
        8,63,1,63,1,63,1,63,1,63,1,63,5,63,1102,8,63,10,63,12,63,1105,9,
        63,1,63,3,63,1108,8,63,1,63,1,63,3,63,1112,8,63,1,63,1,63,1,63,3,
        63,1117,8,63,1,64,1,64,1,64,1,64,1,64,3,64,1124,8,64,1,65,1,65,1,
        65,5,65,1129,8,65,10,65,12,65,1132,9,65,1,65,1,65,1,65,1,65,1,65,
        1,65,5,65,1140,8,65,10,65,12,65,1143,9,65,1,65,1,65,5,65,1147,8,
        65,10,65,12,65,1150,9,65,1,65,1,65,1,65,1,65,1,65,3,65,1157,8,65,
        1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,1170,
        8,66,1,67,1,67,1,67,5,67,1175,8,67,10,67,12,67,1178,9,67,1,67,3,
        67,1181,8,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,
        68,1193,8,68,1,69,1,69,1,69,1,69,3,69,1199,8,69,1,69,3,69,1202,8,
        69,1,70,1,70,1,70,5,70,1207,8,70,10,70,12,70,1210,9,70,1,71,1,71,
        1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1221,8,71,1,71,1,71,1,71,
        1,71,3,71,1227,8,71,5,71,1229,8,71,10,71,12,71,1232,9,71,1,72,1,
        72,1,72,3,72,1237,8,72,1,72,1,72,1,73,1,73,1,73,3,73,1244,8,73,1,
        73,1,73,1,74,1,74,1,74,5,74,1251,8,74,10,74,12,74,1254,9,74,1,74,
        3,74,1257,8,74,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,3,76,1267,
        8,76,3,76,1269,8,76,1,77,3,77,1272,8,77,1,77,1,77,1,77,1,77,1,77,
        1,77,3,77,1280,8,77,1,78,1,78,1,78,3,78,1285,8,78,1,79,1,79,1,80,
        1,80,1,81,1,81,1,82,1,82,3,82,1295,8,82,1,83,1,83,1,83,3,83,1300,
        8,83,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,86,1,86,3,86,1312,
        8,86,1,87,1,87,5,87,1316,8,87,10,87,12,87,1319,9,87,1,87,1,87,1,
        88,1,88,1,88,1,88,1,88,3,88,1328,8,88,1,89,1,89,5,89,1332,8,89,10,
        89,12,89,1335,9,89,1,89,1,89,1,90,1,90,1,90,1,90,1,90,3,90,1344,
        8,90,1,90,0,3,84,124,142,91,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
        28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
        72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
        112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
        144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,
        176,178,180,0,18,2,0,33,33,38,38,2,0,19,19,78,78,2,0,47,47,55,55,
        3,0,1,1,4,4,8,8,4,0,1,1,3,4,8,8,84,84,2,0,55,55,77,77,2,0,1,1,4,
        4,2,0,65,65,121,121,2,0,7,7,23,24,2,0,32,32,53,53,2,0,75,75,80,80,
        3,0,10,10,54,54,95,95,2,0,44,44,57,57,1,0,112,113,2,0,123,123,144,
        144,7,0,22,22,41,41,59,60,74,74,82,82,102,102,108,108,19,0,1,13,
        15,21,23,27,29,30,32,32,34,37,39,40,42,45,47,47,49,55,57,58,62,62,
        64,73,75,81,83,88,90,97,99,101,103,104,106,107,4,0,21,21,32,32,42,
        42,52,52,1519,0,185,1,0,0,0,2,192,1,0,0,0,4,194,1,0,0,0,6,196,1,
        0,0,0,8,203,1,0,0,0,10,226,1,0,0,0,12,228,1,0,0,0,14,235,1,0,0,0,
        16,242,1,0,0,0,18,255,1,0,0,0,20,267,1,0,0,0,22,276,1,0,0,0,24,284,
        1,0,0,0,26,306,1,0,0,0,28,321,1,0,0,0,30,330,1,0,0,0,32,335,1,0,
        0,0,34,339,1,0,0,0,36,341,1,0,0,0,38,350,1,0,0,0,40,354,1,0,0,0,
        42,368,1,0,0,0,44,370,1,0,0,0,46,384,1,0,0,0,48,395,1,0,0,0,50,399,
        1,0,0,0,52,407,1,0,0,0,54,459,1,0,0,0,56,462,1,0,0,0,58,468,1,0,
        0,0,60,472,1,0,0,0,62,478,1,0,0,0,64,496,1,0,0,0,66,499,1,0,0,0,
        68,502,1,0,0,0,70,512,1,0,0,0,72,515,1,0,0,0,74,519,1,0,0,0,76,523,
        1,0,0,0,78,547,1,0,0,0,80,549,1,0,0,0,82,552,1,0,0,0,84,567,1,0,
        0,0,86,629,1,0,0,0,88,634,1,0,0,0,90,645,1,0,0,0,92,647,1,0,0,0,
        94,653,1,0,0,0,96,658,1,0,0,0,98,666,1,0,0,0,100,684,1,0,0,0,102,
        686,1,0,0,0,104,694,1,0,0,0,106,699,1,0,0,0,108,707,1,0,0,0,110,
        711,1,0,0,0,112,715,1,0,0,0,114,724,1,0,0,0,116,738,1,0,0,0,118,
        740,1,0,0,0,120,799,1,0,0,0,122,801,1,0,0,0,124,964,1,0,0,0,126,
        1111,1,0,0,0,128,1123,1,0,0,0,130,1156,1,0,0,0,132,1169,1,0,0,0,
        134,1171,1,0,0,0,136,1192,1,0,0,0,138,1201,1,0,0,0,140,1203,1,0,
        0,0,142,1220,1,0,0,0,144,1233,1,0,0,0,146,1243,1,0,0,0,148,1247,
        1,0,0,0,150,1258,1,0,0,0,152,1268,1,0,0,0,154,1271,1,0,0,0,156,1284,
        1,0,0,0,158,1286,1,0,0,0,160,1288,1,0,0,0,162,1290,1,0,0,0,164,1294,
        1,0,0,0,166,1299,1,0,0,0,168,1301,1,0,0,0,170,1305,1,0,0,0,172,1311,
        1,0,0,0,174,1313,1,0,0,0,176,1327,1,0,0,0,178,1329,1,0,0,0,180,1343,
        1,0,0,0,182,184,3,2,1,0,183,182,1,0,0,0,184,187,1,0,0,0,185,183,
        1,0,0,0,185,186,1,0,0,0,186,188,1,0,0,0,187,185,1,0,0,0,188,189,
        5,0,0,1,189,1,1,0,0,0,190,193,3,6,3,0,191,193,3,10,5,0,192,190,1,
        0,0,0,192,191,1,0,0,0,193,3,1,0,0,0,194,195,3,124,62,0,195,5,1,0,
        0,0,196,197,5,56,0,0,197,201,3,166,83,0,198,199,5,120,0,0,199,200,
        5,127,0,0,200,202,3,4,2,0,201,198,1,0,0,0,201,202,1,0,0,0,202,7,
        1,0,0,0,203,208,3,166,83,0,204,205,5,121,0,0,205,207,3,166,83,0,
        206,204,1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,
        209,212,1,0,0,0,210,208,1,0,0,0,211,213,5,121,0,0,212,211,1,0,0,
        0,212,213,1,0,0,0,213,9,1,0,0,0,214,227,3,12,6,0,215,227,3,14,7,
        0,216,227,3,18,9,0,217,227,3,20,10,0,218,227,3,22,11,0,219,227,3,
        26,13,0,220,227,3,24,12,0,221,227,3,28,14,0,222,227,3,30,15,0,223,
        227,3,36,18,0,224,227,3,32,16,0,225,227,3,34,17,0,226,214,1,0,0,
        0,226,215,1,0,0,0,226,216,1,0,0,0,226,217,1,0,0,0,226,218,1,0,0,
        0,226,219,1,0,0,0,226,220,1,0,0,0,226,221,1,0,0,0,226,222,1,0,0,
        0,226,223,1,0,0,0,226,224,1,0,0,0,226,225,1,0,0,0,227,11,1,0,0,0,
        228,230,5,76,0,0,229,231,3,4,2,0,230,229,1,0,0,0,230,231,1,0,0,0,
        231,233,1,0,0,0,232,234,5,155,0,0,233,232,1,0,0,0,233,234,1,0,0,
        0,234,13,1,0,0,0,235,237,5,89,0,0,236,238,3,4,2,0,237,236,1,0,0,
        0,237,238,1,0,0,0,238,240,1,0,0,0,239,241,5,155,0,0,240,239,1,0,
        0,0,240,241,1,0,0,0,241,15,1,0,0,0,242,251,5,14,0,0,243,244,5,135,
        0,0,244,247,3,166,83,0,245,246,5,120,0,0,246,248,3,166,83,0,247,
        245,1,0,0,0,247,248,1,0,0,0,248,249,1,0,0,0,249,250,5,154,0,0,250,
        252,1,0,0,0,251,243,1,0,0,0,251,252,1,0,0,0,252,253,1,0,0,0,253,
        254,3,36,18,0,254,17,1,0,0,0,255,256,5,98,0,0,256,260,3,36,18,0,
        257,259,3,16,8,0,258,257,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,
        260,261,1,0,0,0,261,265,1,0,0,0,262,260,1,0,0,0,263,264,5,31,0,0,
        264,266,3,36,18,0,265,263,1,0,0,0,265,266,1,0,0,0,266,19,1,0,0,0,
        267,268,5,43,0,0,268,269,5,135,0,0,269,270,3,4,2,0,270,271,5,154,
        0,0,271,274,3,10,5,0,272,273,5,26,0,0,273,275,3,10,5,0,274,272,1,
        0,0,0,274,275,1,0,0,0,275,21,1,0,0,0,276,277,5,105,0,0,277,278,5,
        135,0,0,278,279,3,4,2,0,279,280,5,154,0,0,280,282,3,10,5,0,281,283,
        5,155,0,0,282,281,1,0,0,0,282,283,1,0,0,0,283,23,1,0,0,0,284,285,
        5,35,0,0,285,289,5,135,0,0,286,290,3,6,3,0,287,290,3,30,15,0,288,
        290,3,4,2,0,289,286,1,0,0,0,289,287,1,0,0,0,289,288,1,0,0,0,289,
        290,1,0,0,0,290,291,1,0,0,0,291,293,5,155,0,0,292,294,3,4,2,0,293,
        292,1,0,0,0,293,294,1,0,0,0,294,295,1,0,0,0,295,299,5,155,0,0,296,
        300,3,6,3,0,297,300,3,30,15,0,298,300,3,4,2,0,299,296,1,0,0,0,299,
        297,1,0,0,0,299,298,1,0,0,0,299,300,1,0,0,0,300,301,1,0,0,0,301,
        302,5,154,0,0,302,304,3,10,5,0,303,305,5,155,0,0,304,303,1,0,0,0,
        304,305,1,0,0,0,305,25,1,0,0,0,306,307,5,35,0,0,307,308,5,135,0,
        0,308,309,5,56,0,0,309,312,3,166,83,0,310,311,5,121,0,0,311,313,
        3,166,83,0,312,310,1,0,0,0,312,313,1,0,0,0,313,314,1,0,0,0,314,315,
        5,45,0,0,315,316,3,4,2,0,316,317,5,154,0,0,317,319,3,10,5,0,318,
        320,5,155,0,0,319,318,1,0,0,0,319,320,1,0,0,0,320,27,1,0,0,0,321,
        322,7,0,0,0,322,323,3,166,83,0,323,325,5,135,0,0,324,326,3,8,4,0,
        325,324,1,0,0,0,325,326,1,0,0,0,326,327,1,0,0,0,327,328,5,154,0,
        0,328,329,3,36,18,0,329,29,1,0,0,0,330,331,3,4,2,0,331,332,5,120,
        0,0,332,333,5,127,0,0,333,334,3,4,2,0,334,31,1,0,0,0,335,337,3,4,
        2,0,336,338,5,155,0,0,337,336,1,0,0,0,337,338,1,0,0,0,338,33,1,0,
        0,0,339,340,5,155,0,0,340,35,1,0,0,0,341,345,5,133,0,0,342,344,3,
        2,1,0,343,342,1,0,0,0,344,347,1,0,0,0,345,343,1,0,0,0,345,346,1,
        0,0,0,346,348,1,0,0,0,347,345,1,0,0,0,348,349,5,152,0,0,349,37,1,
        0,0,0,350,351,3,4,2,0,351,352,5,120,0,0,352,353,3,4,2,0,353,39,1,
        0,0,0,354,359,3,38,19,0,355,356,5,121,0,0,356,358,3,38,19,0,357,
        355,1,0,0,0,358,361,1,0,0,0,359,357,1,0,0,0,359,360,1,0,0,0,360,
        363,1,0,0,0,361,359,1,0,0,0,362,364,5,121,0,0,363,362,1,0,0,0,363,
        364,1,0,0,0,364,41,1,0,0,0,365,369,3,50,25,0,366,369,3,52,26,0,367,
        369,3,130,65,0,368,365,1,0,0,0,368,366,1,0,0,0,368,367,1,0,0,0,369,
        43,1,0,0,0,370,371,5,17,0,0,371,372,5,87,0,0,372,373,3,146,73,0,
        373,374,5,6,0,0,374,375,5,135,0,0,375,376,3,42,21,0,376,377,5,154,
        0,0,377,45,1,0,0,0,378,385,3,52,26,0,379,380,5,135,0,0,380,381,3,
        50,25,0,381,382,5,154,0,0,382,385,1,0,0,0,383,385,3,170,85,0,384,
        378,1,0,0,0,384,379,1,0,0,0,384,383,1,0,0,0,385,47,1,0,0,0,386,396,
        5,28,0,0,387,388,5,100,0,0,388,396,5,1,0,0,389,390,5,100,0,0,390,
        396,5,25,0,0,391,396,5,100,0,0,392,396,5,48,0,0,393,394,5,48,0,0,
        394,396,5,25,0,0,395,386,1,0,0,0,395,387,1,0,0,0,395,389,1,0,0,0,
        395,391,1,0,0,0,395,392,1,0,0,0,395,393,1,0,0,0,396,397,1,0,0,0,
        397,398,3,46,23,0,398,49,1,0,0,0,399,403,3,46,23,0,400,402,3,48,
        24,0,401,400,1,0,0,0,402,405,1,0,0,0,403,401,1,0,0,0,403,404,1,0,
        0,0,404,51,1,0,0,0,405,403,1,0,0,0,406,408,3,54,27,0,407,406,1,0,
        0,0,407,408,1,0,0,0,408,409,1,0,0,0,409,411,5,83,0,0,410,412,5,25,
        0,0,411,410,1,0,0,0,411,412,1,0,0,0,412,414,1,0,0,0,413,415,3,56,
        28,0,414,413,1,0,0,0,414,415,1,0,0,0,415,416,1,0,0,0,416,418,3,122,
        61,0,417,419,3,58,29,0,418,417,1,0,0,0,418,419,1,0,0,0,419,421,1,
        0,0,0,420,422,3,60,30,0,421,420,1,0,0,0,421,422,1,0,0,0,422,424,
        1,0,0,0,423,425,3,64,32,0,424,423,1,0,0,0,424,425,1,0,0,0,425,427,
        1,0,0,0,426,428,3,66,33,0,427,426,1,0,0,0,427,428,1,0,0,0,428,430,
        1,0,0,0,429,431,3,68,34,0,430,429,1,0,0,0,430,431,1,0,0,0,431,434,
        1,0,0,0,432,433,5,107,0,0,433,435,7,1,0,0,434,432,1,0,0,0,434,435,
        1,0,0,0,435,438,1,0,0,0,436,437,5,107,0,0,437,439,5,94,0,0,438,436,
        1,0,0,0,438,439,1,0,0,0,439,441,1,0,0,0,440,442,3,70,35,0,441,440,
        1,0,0,0,441,442,1,0,0,0,442,444,1,0,0,0,443,445,3,62,31,0,444,443,
        1,0,0,0,444,445,1,0,0,0,445,447,1,0,0,0,446,448,3,72,36,0,447,446,
        1,0,0,0,447,448,1,0,0,0,448,450,1,0,0,0,449,451,3,76,38,0,450,449,
        1,0,0,0,450,451,1,0,0,0,451,454,1,0,0,0,452,455,3,78,39,0,453,455,
        3,80,40,0,454,452,1,0,0,0,454,453,1,0,0,0,454,455,1,0,0,0,455,457,
        1,0,0,0,456,458,3,82,41,0,457,456,1,0,0,0,457,458,1,0,0,0,458,53,
        1,0,0,0,459,460,5,107,0,0,460,461,3,134,67,0,461,55,1,0,0,0,462,
        463,5,93,0,0,463,466,5,113,0,0,464,465,5,107,0,0,465,467,5,90,0,
        0,466,464,1,0,0,0,466,467,1,0,0,0,467,57,1,0,0,0,468,469,5,36,0,
        0,469,470,3,84,42,0,470,59,1,0,0,0,471,473,7,2,0,0,472,471,1,0,0,
        0,472,473,1,0,0,0,473,474,1,0,0,0,474,475,5,5,0,0,475,476,5,51,0,
        0,476,477,3,122,61,0,477,61,1,0,0,0,478,479,5,106,0,0,479,480,3,
        166,83,0,480,481,5,6,0,0,481,482,5,135,0,0,482,483,3,106,53,0,483,
        493,5,154,0,0,484,485,5,121,0,0,485,486,3,166,83,0,486,487,5,6,0,
        0,487,488,5,135,0,0,488,489,3,106,53,0,489,490,5,154,0,0,490,492,
        1,0,0,0,491,484,1,0,0,0,492,495,1,0,0,0,493,491,1,0,0,0,493,494,
        1,0,0,0,494,63,1,0,0,0,495,493,1,0,0,0,496,497,5,73,0,0,497,498,
        3,124,62,0,498,65,1,0,0,0,499,500,5,104,0,0,500,501,3,124,62,0,501,
        67,1,0,0,0,502,503,5,39,0,0,503,510,5,11,0,0,504,505,7,1,0,0,505,
        506,5,135,0,0,506,507,3,122,61,0,507,508,5,154,0,0,508,511,1,0,0,
        0,509,511,3,122,61,0,510,504,1,0,0,0,510,509,1,0,0,0,511,69,1,0,
        0,0,512,513,5,40,0,0,513,514,3,124,62,0,514,71,1,0,0,0,515,516,5,
        68,0,0,516,517,5,11,0,0,517,518,3,96,48,0,518,73,1,0,0,0,519,520,
        5,68,0,0,520,521,5,11,0,0,521,522,3,122,61,0,522,75,1,0,0,0,523,
        524,5,58,0,0,524,525,3,94,47,0,525,526,5,11,0,0,526,527,3,122,61,
        0,527,77,1,0,0,0,528,529,5,58,0,0,529,532,3,124,62,0,530,531,5,121,
        0,0,531,533,3,124,62,0,532,530,1,0,0,0,532,533,1,0,0,0,533,536,1,
        0,0,0,534,535,5,107,0,0,535,537,5,90,0,0,536,534,1,0,0,0,536,537,
        1,0,0,0,537,548,1,0,0,0,538,539,5,58,0,0,539,542,3,124,62,0,540,
        541,5,107,0,0,541,543,5,90,0,0,542,540,1,0,0,0,542,543,1,0,0,0,543,
        544,1,0,0,0,544,545,5,65,0,0,545,546,3,124,62,0,546,548,1,0,0,0,
        547,528,1,0,0,0,547,538,1,0,0,0,548,79,1,0,0,0,549,550,5,65,0,0,
        550,551,3,124,62,0,551,81,1,0,0,0,552,553,5,85,0,0,553,554,3,102,
        51,0,554,83,1,0,0,0,555,556,6,42,-1,0,556,558,3,142,71,0,557,559,
        5,30,0,0,558,557,1,0,0,0,558,559,1,0,0,0,559,561,1,0,0,0,560,562,
        3,92,46,0,561,560,1,0,0,0,561,562,1,0,0,0,562,568,1,0,0,0,563,564,
        5,135,0,0,564,565,3,84,42,0,565,566,5,154,0,0,566,568,1,0,0,0,567,
        555,1,0,0,0,567,563,1,0,0,0,568,583,1,0,0,0,569,570,10,3,0,0,570,
        571,3,88,44,0,571,572,3,84,42,4,572,582,1,0,0,0,573,575,10,4,0,0,
        574,576,3,86,43,0,575,574,1,0,0,0,575,576,1,0,0,0,576,577,1,0,0,
        0,577,578,5,51,0,0,578,579,3,84,42,0,579,580,3,90,45,0,580,582,1,
        0,0,0,581,569,1,0,0,0,581,573,1,0,0,0,582,585,1,0,0,0,583,581,1,
        0,0,0,583,584,1,0,0,0,584,85,1,0,0,0,585,583,1,0,0,0,586,588,7,3,
        0,0,587,586,1,0,0,0,587,588,1,0,0,0,588,589,1,0,0,0,589,596,5,47,
        0,0,590,592,5,47,0,0,591,593,7,3,0,0,592,591,1,0,0,0,592,593,1,0,
        0,0,593,596,1,0,0,0,594,596,7,3,0,0,595,587,1,0,0,0,595,590,1,0,
        0,0,595,594,1,0,0,0,596,630,1,0,0,0,597,599,7,4,0,0,598,597,1,0,
        0,0,598,599,1,0,0,0,599,600,1,0,0,0,600,602,7,5,0,0,601,603,5,69,
        0,0,602,601,1,0,0,0,602,603,1,0,0,0,603,612,1,0,0,0,604,606,7,5,
        0,0,605,607,5,69,0,0,606,605,1,0,0,0,606,607,1,0,0,0,607,609,1,0,
        0,0,608,610,7,4,0,0,609,608,1,0,0,0,609,610,1,0,0,0,610,612,1,0,
        0,0,611,598,1,0,0,0,611,604,1,0,0,0,612,630,1,0,0,0,613,615,7,6,
        0,0,614,613,1,0,0,0,614,615,1,0,0,0,615,616,1,0,0,0,616,618,5,37,
        0,0,617,619,5,69,0,0,618,617,1,0,0,0,618,619,1,0,0,0,619,628,1,0,
        0,0,620,622,5,37,0,0,621,623,5,69,0,0,622,621,1,0,0,0,622,623,1,
        0,0,0,623,625,1,0,0,0,624,626,7,6,0,0,625,624,1,0,0,0,625,626,1,
        0,0,0,626,628,1,0,0,0,627,614,1,0,0,0,627,620,1,0,0,0,628,630,1,
        0,0,0,629,595,1,0,0,0,629,611,1,0,0,0,629,627,1,0,0,0,630,87,1,0,
        0,0,631,632,5,18,0,0,632,635,5,51,0,0,633,635,5,121,0,0,634,631,
        1,0,0,0,634,633,1,0,0,0,635,89,1,0,0,0,636,637,5,66,0,0,637,646,
        3,122,61,0,638,639,5,101,0,0,639,640,5,135,0,0,640,641,3,122,61,
        0,641,642,5,154,0,0,642,646,1,0,0,0,643,644,5,101,0,0,644,646,3,
        122,61,0,645,636,1,0,0,0,645,638,1,0,0,0,645,643,1,0,0,0,646,91,
        1,0,0,0,647,648,5,81,0,0,648,651,3,100,50,0,649,650,5,65,0,0,650,
        652,3,100,50,0,651,649,1,0,0,0,651,652,1,0,0,0,652,93,1,0,0,0,653,
        656,3,124,62,0,654,655,7,7,0,0,655,657,3,124,62,0,656,654,1,0,0,
        0,656,657,1,0,0,0,657,95,1,0,0,0,658,663,3,98,49,0,659,660,5,121,
        0,0,660,662,3,98,49,0,661,659,1,0,0,0,662,665,1,0,0,0,663,661,1,
        0,0,0,663,664,1,0,0,0,664,97,1,0,0,0,665,663,1,0,0,0,666,668,3,124,
        62,0,667,669,7,8,0,0,668,667,1,0,0,0,668,669,1,0,0,0,669,672,1,0,
        0,0,670,671,5,64,0,0,671,673,7,9,0,0,672,670,1,0,0,0,672,673,1,0,
        0,0,673,676,1,0,0,0,674,675,5,16,0,0,675,677,5,115,0,0,676,674,1,
        0,0,0,676,677,1,0,0,0,677,99,1,0,0,0,678,685,3,170,85,0,679,682,
        3,154,77,0,680,681,5,156,0,0,681,683,3,154,77,0,682,680,1,0,0,0,
        682,683,1,0,0,0,683,685,1,0,0,0,684,678,1,0,0,0,684,679,1,0,0,0,
        685,101,1,0,0,0,686,691,3,104,52,0,687,688,5,121,0,0,688,690,3,104,
        52,0,689,687,1,0,0,0,690,693,1,0,0,0,691,689,1,0,0,0,691,692,1,0,
        0,0,692,103,1,0,0,0,693,691,1,0,0,0,694,695,3,166,83,0,695,696,5,
        127,0,0,696,697,3,156,78,0,697,105,1,0,0,0,698,700,3,108,54,0,699,
        698,1,0,0,0,699,700,1,0,0,0,700,702,1,0,0,0,701,703,3,110,55,0,702,
        701,1,0,0,0,702,703,1,0,0,0,703,705,1,0,0,0,704,706,3,112,56,0,705,
        704,1,0,0,0,705,706,1,0,0,0,706,107,1,0,0,0,707,708,5,71,0,0,708,
        709,5,11,0,0,709,710,3,122,61,0,710,109,1,0,0,0,711,712,5,68,0,0,
        712,713,5,11,0,0,713,714,3,96,48,0,714,111,1,0,0,0,715,716,7,10,
        0,0,716,717,3,114,57,0,717,113,1,0,0,0,718,725,3,116,58,0,719,720,
        5,9,0,0,720,721,3,116,58,0,721,722,5,2,0,0,722,723,3,116,58,0,723,
        725,1,0,0,0,724,718,1,0,0,0,724,719,1,0,0,0,725,115,1,0,0,0,726,
        727,5,20,0,0,727,739,5,79,0,0,728,729,5,99,0,0,729,739,5,72,0,0,
        730,731,5,99,0,0,731,739,5,34,0,0,732,733,3,154,77,0,733,734,5,72,
        0,0,734,739,1,0,0,0,735,736,3,154,77,0,736,737,5,34,0,0,737,739,
        1,0,0,0,738,726,1,0,0,0,738,728,1,0,0,0,738,730,1,0,0,0,738,732,
        1,0,0,0,738,735,1,0,0,0,739,117,1,0,0,0,740,741,3,124,62,0,741,742,
        5,0,0,1,742,119,1,0,0,0,743,800,3,166,83,0,744,745,3,166,83,0,745,
        746,5,135,0,0,746,747,3,166,83,0,747,754,3,120,60,0,748,749,5,121,
        0,0,749,750,3,166,83,0,750,751,3,120,60,0,751,753,1,0,0,0,752,748,
        1,0,0,0,753,756,1,0,0,0,754,752,1,0,0,0,754,755,1,0,0,0,755,758,
        1,0,0,0,756,754,1,0,0,0,757,759,5,121,0,0,758,757,1,0,0,0,758,759,
        1,0,0,0,759,760,1,0,0,0,760,761,5,154,0,0,761,800,1,0,0,0,762,763,
        3,166,83,0,763,764,5,135,0,0,764,769,3,168,84,0,765,766,5,121,0,
        0,766,768,3,168,84,0,767,765,1,0,0,0,768,771,1,0,0,0,769,767,1,0,
        0,0,769,770,1,0,0,0,770,773,1,0,0,0,771,769,1,0,0,0,772,774,5,121,
        0,0,773,772,1,0,0,0,773,774,1,0,0,0,774,775,1,0,0,0,775,776,5,154,
        0,0,776,800,1,0,0,0,777,778,3,166,83,0,778,779,5,135,0,0,779,784,
        3,120,60,0,780,781,5,121,0,0,781,783,3,120,60,0,782,780,1,0,0,0,
        783,786,1,0,0,0,784,782,1,0,0,0,784,785,1,0,0,0,785,788,1,0,0,0,
        786,784,1,0,0,0,787,789,5,121,0,0,788,787,1,0,0,0,788,789,1,0,0,
        0,789,790,1,0,0,0,790,791,5,154,0,0,791,800,1,0,0,0,792,793,3,166,
        83,0,793,795,5,135,0,0,794,796,3,122,61,0,795,794,1,0,0,0,795,796,
        1,0,0,0,796,797,1,0,0,0,797,798,5,154,0,0,798,800,1,0,0,0,799,743,
        1,0,0,0,799,744,1,0,0,0,799,762,1,0,0,0,799,777,1,0,0,0,799,792,
        1,0,0,0,800,121,1,0,0,0,801,806,3,124,62,0,802,803,5,121,0,0,803,
        805,3,124,62,0,804,802,1,0,0,0,805,808,1,0,0,0,806,804,1,0,0,0,806,
        807,1,0,0,0,807,810,1,0,0,0,808,806,1,0,0,0,809,811,5,121,0,0,810,
        809,1,0,0,0,810,811,1,0,0,0,811,123,1,0,0,0,812,813,6,62,-1,0,813,
        815,5,12,0,0,814,816,3,124,62,0,815,814,1,0,0,0,815,816,1,0,0,0,
        816,822,1,0,0,0,817,818,5,103,0,0,818,819,3,124,62,0,819,820,5,88,
        0,0,820,821,3,124,62,0,821,823,1,0,0,0,822,817,1,0,0,0,823,824,1,
        0,0,0,824,822,1,0,0,0,824,825,1,0,0,0,825,828,1,0,0,0,826,827,5,
        26,0,0,827,829,3,124,62,0,828,826,1,0,0,0,828,829,1,0,0,0,829,830,
        1,0,0,0,830,831,5,27,0,0,831,965,1,0,0,0,832,833,5,13,0,0,833,834,
        5,135,0,0,834,835,3,124,62,0,835,836,5,6,0,0,836,837,3,120,60,0,
        837,838,5,154,0,0,838,965,1,0,0,0,839,840,5,21,0,0,840,965,5,115,
        0,0,841,842,5,49,0,0,842,965,5,115,0,0,843,844,5,49,0,0,844,845,
        3,124,62,0,845,846,3,158,79,0,846,965,1,0,0,0,847,848,5,86,0,0,848,
        849,5,135,0,0,849,850,3,124,62,0,850,851,5,36,0,0,851,854,3,124,
        62,0,852,853,5,35,0,0,853,855,3,124,62,0,854,852,1,0,0,0,854,855,
        1,0,0,0,855,856,1,0,0,0,856,857,5,154,0,0,857,965,1,0,0,0,858,859,
        5,91,0,0,859,965,5,115,0,0,860,861,5,96,0,0,861,862,5,135,0,0,862,
        863,7,11,0,0,863,864,3,172,86,0,864,865,5,36,0,0,865,866,3,124,62,
        0,866,867,5,154,0,0,867,965,1,0,0,0,868,869,3,166,83,0,869,871,5,
        135,0,0,870,872,3,122,61,0,871,870,1,0,0,0,871,872,1,0,0,0,872,873,
        1,0,0,0,873,874,5,154,0,0,874,883,1,0,0,0,875,877,5,135,0,0,876,
        878,5,25,0,0,877,876,1,0,0,0,877,878,1,0,0,0,878,880,1,0,0,0,879,
        881,3,122,61,0,880,879,1,0,0,0,880,881,1,0,0,0,881,882,1,0,0,0,882,
        884,5,154,0,0,883,875,1,0,0,0,883,884,1,0,0,0,884,885,1,0,0,0,885,
        886,5,70,0,0,886,887,5,135,0,0,887,888,3,106,53,0,888,889,5,154,
        0,0,889,965,1,0,0,0,890,891,3,166,83,0,891,893,5,135,0,0,892,894,
        3,122,61,0,893,892,1,0,0,0,893,894,1,0,0,0,894,895,1,0,0,0,895,896,
        5,154,0,0,896,905,1,0,0,0,897,899,5,135,0,0,898,900,5,25,0,0,899,
        898,1,0,0,0,899,900,1,0,0,0,900,902,1,0,0,0,901,903,3,122,61,0,902,
        901,1,0,0,0,902,903,1,0,0,0,903,904,1,0,0,0,904,906,5,154,0,0,905,
        897,1,0,0,0,905,906,1,0,0,0,906,907,1,0,0,0,907,908,5,70,0,0,908,
        909,3,166,83,0,909,965,1,0,0,0,910,916,3,166,83,0,911,913,5,135,
        0,0,912,914,3,122,61,0,913,912,1,0,0,0,913,914,1,0,0,0,914,915,1,
        0,0,0,915,917,5,154,0,0,916,911,1,0,0,0,916,917,1,0,0,0,917,918,
        1,0,0,0,918,920,5,135,0,0,919,921,5,25,0,0,920,919,1,0,0,0,920,921,
        1,0,0,0,921,923,1,0,0,0,922,924,3,122,61,0,923,922,1,0,0,0,923,924,
        1,0,0,0,924,925,1,0,0,0,925,926,5,154,0,0,926,965,1,0,0,0,927,965,
        3,130,65,0,928,965,3,174,87,0,929,965,3,156,78,0,930,931,5,123,0,
        0,931,965,3,124,62,20,932,933,5,62,0,0,933,965,3,124,62,14,934,935,
        3,146,73,0,935,936,5,125,0,0,936,938,1,0,0,0,937,934,1,0,0,0,937,
        938,1,0,0,0,938,939,1,0,0,0,939,965,5,117,0,0,940,941,5,135,0,0,
        941,942,3,50,25,0,942,943,5,154,0,0,943,965,1,0,0,0,944,945,5,135,
        0,0,945,946,3,124,62,0,946,947,5,154,0,0,947,965,1,0,0,0,948,949,
        5,135,0,0,949,950,3,122,61,0,950,951,5,154,0,0,951,965,1,0,0,0,952,
        954,5,134,0,0,953,955,3,122,61,0,954,953,1,0,0,0,954,955,1,0,0,0,
        955,956,1,0,0,0,956,965,5,153,0,0,957,959,5,133,0,0,958,960,3,40,
        20,0,959,958,1,0,0,0,959,960,1,0,0,0,960,961,1,0,0,0,961,965,5,152,
        0,0,962,965,3,126,63,0,963,965,3,138,69,0,964,812,1,0,0,0,964,832,
        1,0,0,0,964,839,1,0,0,0,964,841,1,0,0,0,964,843,1,0,0,0,964,847,
        1,0,0,0,964,858,1,0,0,0,964,860,1,0,0,0,964,868,1,0,0,0,964,890,
        1,0,0,0,964,910,1,0,0,0,964,927,1,0,0,0,964,928,1,0,0,0,964,929,
        1,0,0,0,964,930,1,0,0,0,964,932,1,0,0,0,964,937,1,0,0,0,964,940,
        1,0,0,0,964,944,1,0,0,0,964,948,1,0,0,0,964,952,1,0,0,0,964,957,
        1,0,0,0,964,962,1,0,0,0,964,963,1,0,0,0,965,1081,1,0,0,0,966,970,
        10,19,0,0,967,971,5,117,0,0,968,971,5,156,0,0,969,971,5,143,0,0,
        970,967,1,0,0,0,970,968,1,0,0,0,970,969,1,0,0,0,971,972,1,0,0,0,
        972,1080,3,124,62,20,973,977,10,18,0,0,974,978,5,144,0,0,975,978,
        5,123,0,0,976,978,5,122,0,0,977,974,1,0,0,0,977,975,1,0,0,0,977,
        976,1,0,0,0,978,979,1,0,0,0,979,1080,3,124,62,19,980,1005,10,17,
        0,0,981,1006,5,126,0,0,982,1006,5,127,0,0,983,1006,5,138,0,0,984,
        1006,5,136,0,0,985,1006,5,137,0,0,986,1006,5,128,0,0,987,1006,5,
        129,0,0,988,990,5,62,0,0,989,988,1,0,0,0,989,990,1,0,0,0,990,991,
        1,0,0,0,991,993,5,45,0,0,992,994,5,15,0,0,993,992,1,0,0,0,993,994,
        1,0,0,0,994,1006,1,0,0,0,995,997,5,62,0,0,996,995,1,0,0,0,996,997,
        1,0,0,0,997,998,1,0,0,0,998,1006,7,12,0,0,999,1006,5,150,0,0,1000,
        1006,5,151,0,0,1001,1006,5,140,0,0,1002,1006,5,131,0,0,1003,1006,
        5,132,0,0,1004,1006,5,139,0,0,1005,981,1,0,0,0,1005,982,1,0,0,0,
        1005,983,1,0,0,0,1005,984,1,0,0,0,1005,985,1,0,0,0,1005,986,1,0,
        0,0,1005,987,1,0,0,0,1005,989,1,0,0,0,1005,996,1,0,0,0,1005,999,
        1,0,0,0,1005,1000,1,0,0,0,1005,1001,1,0,0,0,1005,1002,1,0,0,0,1005,
        1003,1,0,0,0,1005,1004,1,0,0,0,1006,1007,1,0,0,0,1007,1080,3,124,
        62,18,1008,1009,10,15,0,0,1009,1010,5,142,0,0,1010,1080,3,124,62,
        16,1011,1012,10,13,0,0,1012,1013,5,2,0,0,1013,1080,3,124,62,14,1014,
        1015,10,12,0,0,1015,1016,5,67,0,0,1016,1080,3,124,62,13,1017,1019,
        10,11,0,0,1018,1020,5,62,0,0,1019,1018,1,0,0,0,1019,1020,1,0,0,0,
        1020,1021,1,0,0,0,1021,1022,5,9,0,0,1022,1023,3,124,62,0,1023,1024,
        5,2,0,0,1024,1025,3,124,62,12,1025,1080,1,0,0,0,1026,1027,10,10,
        0,0,1027,1028,5,145,0,0,1028,1029,3,124,62,0,1029,1030,5,120,0,0,
        1030,1031,3,124,62,10,1031,1080,1,0,0,0,1032,1033,10,31,0,0,1033,
        1034,5,135,0,0,1034,1035,3,50,25,0,1035,1036,5,154,0,0,1036,1080,
        1,0,0,0,1037,1038,10,30,0,0,1038,1040,5,135,0,0,1039,1041,3,122,
        61,0,1040,1039,1,0,0,0,1040,1041,1,0,0,0,1041,1042,1,0,0,0,1042,
        1080,5,154,0,0,1043,1044,10,26,0,0,1044,1045,5,134,0,0,1045,1046,
        3,124,62,0,1046,1047,5,153,0,0,1047,1080,1,0,0,0,1048,1049,10,25,
        0,0,1049,1050,5,125,0,0,1050,1080,5,113,0,0,1051,1052,10,24,0,0,
        1052,1053,5,125,0,0,1053,1080,3,166,83,0,1054,1055,10,23,0,0,1055,
        1056,5,141,0,0,1056,1057,5,134,0,0,1057,1058,3,124,62,0,1058,1059,
        5,153,0,0,1059,1080,1,0,0,0,1060,1061,10,22,0,0,1061,1062,5,141,
        0,0,1062,1080,5,113,0,0,1063,1064,10,21,0,0,1064,1065,5,141,0,0,
        1065,1080,3,166,83,0,1066,1067,10,16,0,0,1067,1069,5,50,0,0,1068,
        1070,5,62,0,0,1069,1068,1,0,0,0,1069,1070,1,0,0,0,1070,1071,1,0,
        0,0,1071,1080,5,63,0,0,1072,1077,10,9,0,0,1073,1074,5,6,0,0,1074,
        1078,3,166,83,0,1075,1076,5,6,0,0,1076,1078,5,115,0,0,1077,1073,
        1,0,0,0,1077,1075,1,0,0,0,1078,1080,1,0,0,0,1079,966,1,0,0,0,1079,
        973,1,0,0,0,1079,980,1,0,0,0,1079,1008,1,0,0,0,1079,1011,1,0,0,0,
        1079,1014,1,0,0,0,1079,1017,1,0,0,0,1079,1026,1,0,0,0,1079,1032,
        1,0,0,0,1079,1037,1,0,0,0,1079,1043,1,0,0,0,1079,1048,1,0,0,0,1079,
        1051,1,0,0,0,1079,1054,1,0,0,0,1079,1060,1,0,0,0,1079,1063,1,0,0,
        0,1079,1066,1,0,0,0,1079,1072,1,0,0,0,1080,1083,1,0,0,0,1081,1079,
        1,0,0,0,1081,1082,1,0,0,0,1082,125,1,0,0,0,1083,1081,1,0,0,0,1084,
        1085,5,135,0,0,1085,1090,3,166,83,0,1086,1087,5,121,0,0,1087,1089,
        3,166,83,0,1088,1086,1,0,0,0,1089,1092,1,0,0,0,1090,1088,1,0,0,0,
        1090,1091,1,0,0,0,1091,1094,1,0,0,0,1092,1090,1,0,0,0,1093,1095,
        5,121,0,0,1094,1093,1,0,0,0,1094,1095,1,0,0,0,1095,1096,1,0,0,0,
        1096,1097,5,154,0,0,1097,1112,1,0,0,0,1098,1103,3,166,83,0,1099,
        1100,5,121,0,0,1100,1102,3,166,83,0,1101,1099,1,0,0,0,1102,1105,
        1,0,0,0,1103,1101,1,0,0,0,1103,1104,1,0,0,0,1104,1107,1,0,0,0,1105,
        1103,1,0,0,0,1106,1108,5,121,0,0,1107,1106,1,0,0,0,1107,1108,1,0,
        0,0,1108,1112,1,0,0,0,1109,1110,5,135,0,0,1110,1112,5,154,0,0,1111,
        1084,1,0,0,0,1111,1098,1,0,0,0,1111,1109,1,0,0,0,1112,1113,1,0,0,
        0,1113,1116,5,116,0,0,1114,1117,3,124,62,0,1115,1117,3,36,18,0,1116,
        1114,1,0,0,0,1116,1115,1,0,0,0,1117,127,1,0,0,0,1118,1124,3,130,
        65,0,1119,1120,5,133,0,0,1120,1121,3,124,62,0,1121,1122,5,152,0,
        0,1122,1124,1,0,0,0,1123,1118,1,0,0,0,1123,1119,1,0,0,0,1124,129,
        1,0,0,0,1125,1126,5,137,0,0,1126,1130,3,166,83,0,1127,1129,3,132,
        66,0,1128,1127,1,0,0,0,1129,1132,1,0,0,0,1130,1128,1,0,0,0,1130,
        1131,1,0,0,0,1131,1133,1,0,0,0,1132,1130,1,0,0,0,1133,1134,5,156,
        0,0,1134,1135,5,129,0,0,1135,1157,1,0,0,0,1136,1137,5,137,0,0,1137,
        1141,3,166,83,0,1138,1140,3,132,66,0,1139,1138,1,0,0,0,1140,1143,
        1,0,0,0,1141,1139,1,0,0,0,1141,1142,1,0,0,0,1142,1144,1,0,0,0,1143,
        1141,1,0,0,0,1144,1148,5,129,0,0,1145,1147,3,128,64,0,1146,1145,
        1,0,0,0,1147,1150,1,0,0,0,1148,1146,1,0,0,0,1148,1149,1,0,0,0,1149,
        1151,1,0,0,0,1150,1148,1,0,0,0,1151,1152,5,137,0,0,1152,1153,5,156,
        0,0,1153,1154,3,166,83,0,1154,1155,5,129,0,0,1155,1157,1,0,0,0,1156,
        1125,1,0,0,0,1156,1136,1,0,0,0,1157,131,1,0,0,0,1158,1159,3,166,
        83,0,1159,1160,5,127,0,0,1160,1161,3,172,86,0,1161,1170,1,0,0,0,
        1162,1163,3,166,83,0,1163,1164,5,127,0,0,1164,1165,5,133,0,0,1165,
        1166,3,124,62,0,1166,1167,5,152,0,0,1167,1170,1,0,0,0,1168,1170,
        3,166,83,0,1169,1158,1,0,0,0,1169,1162,1,0,0,0,1169,1168,1,0,0,0,
        1170,133,1,0,0,0,1171,1176,3,136,68,0,1172,1173,5,121,0,0,1173,1175,
        3,136,68,0,1174,1172,1,0,0,0,1175,1178,1,0,0,0,1176,1174,1,0,0,0,
        1176,1177,1,0,0,0,1177,1180,1,0,0,0,1178,1176,1,0,0,0,1179,1181,
        5,121,0,0,1180,1179,1,0,0,0,1180,1181,1,0,0,0,1181,135,1,0,0,0,1182,
        1183,3,166,83,0,1183,1184,5,6,0,0,1184,1185,5,135,0,0,1185,1186,
        3,50,25,0,1186,1187,5,154,0,0,1187,1193,1,0,0,0,1188,1189,3,124,
        62,0,1189,1190,5,6,0,0,1190,1191,3,166,83,0,1191,1193,1,0,0,0,1192,
        1182,1,0,0,0,1192,1188,1,0,0,0,1193,137,1,0,0,0,1194,1202,3,170,
        85,0,1195,1196,3,146,73,0,1196,1197,5,125,0,0,1197,1199,1,0,0,0,
        1198,1195,1,0,0,0,1198,1199,1,0,0,0,1199,1200,1,0,0,0,1200,1202,
        3,140,70,0,1201,1194,1,0,0,0,1201,1198,1,0,0,0,1202,139,1,0,0,0,
        1203,1208,3,166,83,0,1204,1205,5,125,0,0,1205,1207,3,166,83,0,1206,
        1204,1,0,0,0,1207,1210,1,0,0,0,1208,1206,1,0,0,0,1208,1209,1,0,0,
        0,1209,141,1,0,0,0,1210,1208,1,0,0,0,1211,1212,6,71,-1,0,1212,1221,
        3,146,73,0,1213,1221,3,144,72,0,1214,1215,5,135,0,0,1215,1216,3,
        50,25,0,1216,1217,5,154,0,0,1217,1221,1,0,0,0,1218,1221,3,130,65,
        0,1219,1221,3,170,85,0,1220,1211,1,0,0,0,1220,1213,1,0,0,0,1220,
        1214,1,0,0,0,1220,1218,1,0,0,0,1220,1219,1,0,0,0,1221,1230,1,0,0,
        0,1222,1226,10,3,0,0,1223,1227,3,164,82,0,1224,1225,5,6,0,0,1225,
        1227,3,166,83,0,1226,1223,1,0,0,0,1226,1224,1,0,0,0,1227,1229,1,
        0,0,0,1228,1222,1,0,0,0,1229,1232,1,0,0,0,1230,1228,1,0,0,0,1230,
        1231,1,0,0,0,1231,143,1,0,0,0,1232,1230,1,0,0,0,1233,1234,3,166,
        83,0,1234,1236,5,135,0,0,1235,1237,3,148,74,0,1236,1235,1,0,0,0,
        1236,1237,1,0,0,0,1237,1238,1,0,0,0,1238,1239,5,154,0,0,1239,145,
        1,0,0,0,1240,1241,3,150,75,0,1241,1242,5,125,0,0,1242,1244,1,0,0,
        0,1243,1240,1,0,0,0,1243,1244,1,0,0,0,1244,1245,1,0,0,0,1245,1246,
        3,140,70,0,1246,147,1,0,0,0,1247,1252,3,124,62,0,1248,1249,5,121,
        0,0,1249,1251,3,124,62,0,1250,1248,1,0,0,0,1251,1254,1,0,0,0,1252,
        1250,1,0,0,0,1252,1253,1,0,0,0,1253,1256,1,0,0,0,1254,1252,1,0,0,
        0,1255,1257,5,121,0,0,1256,1255,1,0,0,0,1256,1257,1,0,0,0,1257,149,
        1,0,0,0,1258,1259,3,166,83,0,1259,151,1,0,0,0,1260,1269,5,111,0,
        0,1261,1262,5,125,0,0,1262,1269,7,13,0,0,1263,1264,5,113,0,0,1264,
        1266,5,125,0,0,1265,1267,7,13,0,0,1266,1265,1,0,0,0,1266,1267,1,
        0,0,0,1267,1269,1,0,0,0,1268,1260,1,0,0,0,1268,1261,1,0,0,0,1268,
        1263,1,0,0,0,1269,153,1,0,0,0,1270,1272,7,14,0,0,1271,1270,1,0,0,
        0,1271,1272,1,0,0,0,1272,1279,1,0,0,0,1273,1280,3,152,76,0,1274,
        1280,5,112,0,0,1275,1280,5,113,0,0,1276,1280,5,114,0,0,1277,1280,
        5,46,0,0,1278,1280,5,61,0,0,1279,1273,1,0,0,0,1279,1274,1,0,0,0,
        1279,1275,1,0,0,0,1279,1276,1,0,0,0,1279,1277,1,0,0,0,1279,1278,
        1,0,0,0,1280,155,1,0,0,0,1281,1285,3,154,77,0,1282,1285,5,115,0,
        0,1283,1285,5,63,0,0,1284,1281,1,0,0,0,1284,1282,1,0,0,0,1284,1283,
        1,0,0,0,1285,157,1,0,0,0,1286,1287,7,15,0,0,1287,159,1,0,0,0,1288,
        1289,7,16,0,0,1289,161,1,0,0,0,1290,1291,7,17,0,0,1291,163,1,0,0,
        0,1292,1295,5,110,0,0,1293,1295,3,162,81,0,1294,1292,1,0,0,0,1294,
        1293,1,0,0,0,1295,165,1,0,0,0,1296,1300,5,110,0,0,1297,1300,3,158,
        79,0,1298,1300,3,160,80,0,1299,1296,1,0,0,0,1299,1297,1,0,0,0,1299,
        1298,1,0,0,0,1300,167,1,0,0,0,1301,1302,3,172,86,0,1302,1303,5,127,
        0,0,1303,1304,3,154,77,0,1304,169,1,0,0,0,1305,1306,5,133,0,0,1306,
        1307,3,124,62,0,1307,1308,5,152,0,0,1308,171,1,0,0,0,1309,1312,5,
        115,0,0,1310,1312,3,174,87,0,1311,1309,1,0,0,0,1311,1310,1,0,0,0,
        1312,173,1,0,0,0,1313,1317,5,147,0,0,1314,1316,3,176,88,0,1315,1314,
        1,0,0,0,1316,1319,1,0,0,0,1317,1315,1,0,0,0,1317,1318,1,0,0,0,1318,
        1320,1,0,0,0,1319,1317,1,0,0,0,1320,1321,5,149,0,0,1321,175,1,0,
        0,0,1322,1323,5,162,0,0,1323,1324,3,124,62,0,1324,1325,5,152,0,0,
        1325,1328,1,0,0,0,1326,1328,5,161,0,0,1327,1322,1,0,0,0,1327,1326,
        1,0,0,0,1328,177,1,0,0,0,1329,1333,5,148,0,0,1330,1332,3,180,90,
        0,1331,1330,1,0,0,0,1332,1335,1,0,0,0,1333,1331,1,0,0,0,1333,1334,
        1,0,0,0,1334,1336,1,0,0,0,1335,1333,1,0,0,0,1336,1337,5,0,0,1,1337,
        179,1,0,0,0,1338,1339,5,164,0,0,1339,1340,3,124,62,0,1340,1341,5,
        152,0,0,1341,1344,1,0,0,0,1342,1344,5,163,0,0,1343,1338,1,0,0,0,
        1343,1342,1,0,0,0,1344,181,1,0,0,0,170,185,192,201,208,212,226,230,
        233,237,240,247,251,260,265,274,282,289,293,299,304,312,319,325,
        337,345,359,363,368,384,395,403,407,411,414,418,421,424,427,430,
        434,438,441,444,447,450,454,457,466,472,493,510,532,536,542,547,
        558,561,567,575,581,583,587,592,595,598,602,606,609,611,614,618,
        622,625,627,629,634,645,651,656,663,668,672,676,682,684,691,699,
        702,705,724,738,754,758,769,773,784,788,795,799,806,810,815,824,
        828,854,871,877,880,883,893,899,902,905,913,916,920,923,937,954,
        959,964,970,977,989,993,996,1005,1019,1040,1069,1077,1079,1081,1090,
        1094,1103,1107,1111,1116,1123,1130,1141,1148,1156,1169,1176,1180,
        1192,1198,1201,1208,1220,1226,1230,1236,1243,1252,1256,1266,1268,
        1271,1279,1284,1294,1299,1311,1317,1327,1333,1343
    ]

class HogQLParser ( Parser ):

    grammarFileName = "HogQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'->'", "'*'", "'`'", "'\\'", "':'", "','", "'||'", 
                     "'-'", "'$'", "'.'", "'=='", "'='", "'>='", "'>'", 
                     "'#'", "'~*'", "'=~*'", "'{'", "'['", "'('", "'<='", 
                     "'<'", "<INVALID>", "'!~*'", "'!~'", "'?.'", "'??'", 
                     "'%'", "'+'", "'?'", "'\"'", "'f''", "'F''", "'''", 
                     "'~'", "'=~'", "'}'", "']'", "')'", "';'", "'/'", "'_'" ]

    symbolicNames = [ "<INVALID>", "ALL", "AND", "ANTI", "ANY", "ARRAY", 
                      "AS", "ASCENDING", "ASOF", "BETWEEN", "BOTH", "BY", 
                      "CASE", "CAST", "CATCH", "COHORT", "COLLATE", "CREATE", 
                      "CROSS", "CUBE", "CURRENT", "DATE", "DAY", "DESC", 
                      "DESCENDING", "DISTINCT", "ELSE", "END", "EXCEPT", 
                      "EXTRACT", "FINAL", "FINALLY", "FIRST", "FN", "FOLLOWING", 
                      "FOR", "FROM", "FULL", "FUN", "GROUP", "HAVING", "HOUR", 
                      "ID", "IF", "ILIKE", "IN", "INF", "INNER", "INTERSECT", 
                      "INTERVAL", "IS", "JOIN", "KEY", "LAST", "LEADING", 
                      "LEFT", "LET", "LIKE", "LIMIT", "MINUTE", "MONTH", 
                      "NAN_SQL", "NOT", "NULL_SQL", "NULLS", "OFFSET", "ON", 
                      "OR", "ORDER", "OUTER", "OVER", "PARTITION", "PRECEDING", 
                      "PREWHERE", "QUARTER", "RANGE", "RETURN", "RIGHT", 
                      "ROLLUP", "ROW", "ROWS", "SAMPLE", "SECOND", "SELECT", 
                      "SEMI", "SETTINGS", "SUBSTRING", "TABLE", "THEN", 
                      "THROW", "TIES", "TIMESTAMP", "TO", "TOP", "TOTALS", 
                      "TRAILING", "TRIM", "TRUNCATE", "TRY", "UNBOUNDED", 
                      "UNION", "USING", "WEEK", "WHEN", "WHERE", "WHILE", 
                      "WINDOW", "WITH", "YEAR", "ESCAPE_CHAR_COMMON", "IDENTIFIER", 
                      "FLOATING_LITERAL", "OCTAL_LITERAL", "DECIMAL_LITERAL", 
                      "HEXADECIMAL_LITERAL", "STRING_LITERAL", "ARROW", 
                      "ASTERISK", "BACKQUOTE", "BACKSLASH", "COLON", "COMMA", 
                      "CONCAT", "DASH", "DOLLAR", "DOT", "EQ_DOUBLE", "EQ_SINGLE", 
                      "GT_EQ", "GT", "HASH", "IREGEX_SINGLE", "IREGEX_DOUBLE", 
                      "LBRACE", "LBRACKET", "LPAREN", "LT_EQ", "LT", "NOT_EQ", 
                      "NOT_IREGEX", "NOT_REGEX", "NULL_PROPERTY", "NULLISH", 
                      "PERCENT", "PLUS", "QUERY", "QUOTE_DOUBLE", "QUOTE_SINGLE_TEMPLATE", 
                      "QUOTE_SINGLE_TEMPLATE_FULL", "QUOTE_SINGLE", "REGEX_SINGLE", 
                      "REGEX_DOUBLE", "RBRACE", "RBRACKET", "RPAREN", "SEMICOLON", 
                      "SLASH", "UNDERSCORE", "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", 
                      "WHITESPACE", "STRING_TEXT", "STRING_ESCAPE_TRIGGER", 
                      "FULL_STRING_TEXT", "FULL_STRING_ESCAPE_TRIGGER" ]

    RULE_program = 0
    RULE_declaration = 1
    RULE_expression = 2
    RULE_varDecl = 3
    RULE_identifierList = 4
    RULE_statement = 5
    RULE_returnStmt = 6
    RULE_throwStmt = 7
    RULE_catchBlock = 8
    RULE_tryCatchStmt = 9
    RULE_ifStmt = 10
    RULE_whileStmt = 11
    RULE_forStmt = 12
    RULE_forInStmt = 13
    RULE_funcStmt = 14
    RULE_varAssignment = 15
    RULE_exprStmt = 16
    RULE_emptyStmt = 17
    RULE_block = 18
    RULE_kvPair = 19
    RULE_kvPairList = 20
    RULE_select = 21
    RULE_create = 22
    RULE_selectStmtWithParens = 23
    RULE_subsequentSelectSetClause = 24
    RULE_selectSetStmt = 25
    RULE_selectStmt = 26
    RULE_withClause = 27
    RULE_topClause = 28
    RULE_fromClause = 29
    RULE_arrayJoinClause = 30
    RULE_windowClause = 31
    RULE_prewhereClause = 32
    RULE_whereClause = 33
    RULE_groupByClause = 34
    RULE_havingClause = 35
    RULE_orderByClause = 36
    RULE_projectionOrderByClause = 37
    RULE_limitByClause = 38
    RULE_limitAndOffsetClause = 39
    RULE_offsetOnlyClause = 40
    RULE_settingsClause = 41
    RULE_joinExpr = 42
    RULE_joinOp = 43
    RULE_joinOpCross = 44
    RULE_joinConstraintClause = 45
    RULE_sampleClause = 46
    RULE_limitExpr = 47
    RULE_orderExprList = 48
    RULE_orderExpr = 49
    RULE_ratioExpr = 50
    RULE_settingExprList = 51
    RULE_settingExpr = 52
    RULE_windowExpr = 53
    RULE_winPartitionByClause = 54
    RULE_winOrderByClause = 55
    RULE_winFrameClause = 56
    RULE_winFrameExtend = 57
    RULE_winFrameBound = 58
    RULE_expr = 59
    RULE_columnTypeExpr = 60
    RULE_columnExprList = 61
    RULE_columnExpr = 62
    RULE_columnLambdaExpr = 63
    RULE_hogqlxChildElement = 64
    RULE_hogqlxTagElement = 65
    RULE_hogqlxTagAttribute = 66
    RULE_withExprList = 67
    RULE_withExpr = 68
    RULE_columnIdentifier = 69
    RULE_nestedIdentifier = 70
    RULE_tableExpr = 71
    RULE_tableFunctionExpr = 72
    RULE_tableIdentifier = 73
    RULE_tableArgList = 74
    RULE_databaseIdentifier = 75
    RULE_floatingLiteral = 76
    RULE_numberLiteral = 77
    RULE_literal = 78
    RULE_interval = 79
    RULE_keyword = 80
    RULE_keywordForAlias = 81
    RULE_alias = 82
    RULE_identifier = 83
    RULE_enumValue = 84
    RULE_placeholder = 85
    RULE_string = 86
    RULE_templateString = 87
    RULE_stringContents = 88
    RULE_fullTemplateString = 89
    RULE_stringContentsFull = 90

    ruleNames =  [ "program", "declaration", "expression", "varDecl", "identifierList", 
                   "statement", "returnStmt", "throwStmt", "catchBlock", 
                   "tryCatchStmt", "ifStmt", "whileStmt", "forStmt", "forInStmt", 
                   "funcStmt", "varAssignment", "exprStmt", "emptyStmt", 
                   "block", "kvPair", "kvPairList", "select", "create", 
                   "selectStmtWithParens", "subsequentSelectSetClause", 
                   "selectSetStmt", "selectStmt", "withClause", "topClause", 
                   "fromClause", "arrayJoinClause", "windowClause", "prewhereClause", 
                   "whereClause", "groupByClause", "havingClause", "orderByClause", 
                   "projectionOrderByClause", "limitByClause", "limitAndOffsetClause", 
                   "offsetOnlyClause", "settingsClause", "joinExpr", "joinOp", 
                   "joinOpCross", "joinConstraintClause", "sampleClause", 
                   "limitExpr", "orderExprList", "orderExpr", "ratioExpr", 
                   "settingExprList", "settingExpr", "windowExpr", "winPartitionByClause", 
                   "winOrderByClause", "winFrameClause", "winFrameExtend", 
                   "winFrameBound", "expr", "columnTypeExpr", "columnExprList", 
                   "columnExpr", "columnLambdaExpr", "hogqlxChildElement", 
                   "hogqlxTagElement", "hogqlxTagAttribute", "withExprList", 
                   "withExpr", "columnIdentifier", "nestedIdentifier", "tableExpr", 
                   "tableFunctionExpr", "tableIdentifier", "tableArgList", 
                   "databaseIdentifier", "floatingLiteral", "numberLiteral", 
                   "literal", "interval", "keyword", "keywordForAlias", 
                   "alias", "identifier", "enumValue", "placeholder", "string", 
                   "templateString", "stringContents", "fullTemplateString", 
                   "stringContentsFull" ]

    EOF = Token.EOF
    ALL=1
    AND=2
    ANTI=3
    ANY=4
    ARRAY=5
    AS=6
    ASCENDING=7
    ASOF=8
    BETWEEN=9
    BOTH=10
    BY=11
    CASE=12
    CAST=13
    CATCH=14
    COHORT=15
    COLLATE=16
    CREATE=17
    CROSS=18
    CUBE=19
    CURRENT=20
    DATE=21
    DAY=22
    DESC=23
    DESCENDING=24
    DISTINCT=25
    ELSE=26
    END=27
    EXCEPT=28
    EXTRACT=29
    FINAL=30
    FINALLY=31
    FIRST=32
    FN=33
    FOLLOWING=34
    FOR=35
    FROM=36
    FULL=37
    FUN=38
    GROUP=39
    HAVING=40
    HOUR=41
    ID=42
    IF=43
    ILIKE=44
    IN=45
    INF=46
    INNER=47
    INTERSECT=48
    INTERVAL=49
    IS=50
    JOIN=51
    KEY=52
    LAST=53
    LEADING=54
    LEFT=55
    LET=56
    LIKE=57
    LIMIT=58
    MINUTE=59
    MONTH=60
    NAN_SQL=61
    NOT=62
    NULL_SQL=63
    NULLS=64
    OFFSET=65
    ON=66
    OR=67
    ORDER=68
    OUTER=69
    OVER=70
    PARTITION=71
    PRECEDING=72
    PREWHERE=73
    QUARTER=74
    RANGE=75
    RETURN=76
    RIGHT=77
    ROLLUP=78
    ROW=79
    ROWS=80
    SAMPLE=81
    SECOND=82
    SELECT=83
    SEMI=84
    SETTINGS=85
    SUBSTRING=86
    TABLE=87
    THEN=88
    THROW=89
    TIES=90
    TIMESTAMP=91
    TO=92
    TOP=93
    TOTALS=94
    TRAILING=95
    TRIM=96
    TRUNCATE=97
    TRY=98
    UNBOUNDED=99
    UNION=100
    USING=101
    WEEK=102
    WHEN=103
    WHERE=104
    WHILE=105
    WINDOW=106
    WITH=107
    YEAR=108
    ESCAPE_CHAR_COMMON=109
    IDENTIFIER=110
    FLOATING_LITERAL=111
    OCTAL_LITERAL=112
    DECIMAL_LITERAL=113
    HEXADECIMAL_LITERAL=114
    STRING_LITERAL=115
    ARROW=116
    ASTERISK=117
    BACKQUOTE=118
    BACKSLASH=119
    COLON=120
    COMMA=121
    CONCAT=122
    DASH=123
    DOLLAR=124
    DOT=125
    EQ_DOUBLE=126
    EQ_SINGLE=127
    GT_EQ=128
    GT=129
    HASH=130
    IREGEX_SINGLE=131
    IREGEX_DOUBLE=132
    LBRACE=133
    LBRACKET=134
    LPAREN=135
    LT_EQ=136
    LT=137
    NOT_EQ=138
    NOT_IREGEX=139
    NOT_REGEX=140
    NULL_PROPERTY=141
    NULLISH=142
    PERCENT=143
    PLUS=144
    QUERY=145
    QUOTE_DOUBLE=146
    QUOTE_SINGLE_TEMPLATE=147
    QUOTE_SINGLE_TEMPLATE_FULL=148
    QUOTE_SINGLE=149
    REGEX_SINGLE=150
    REGEX_DOUBLE=151
    RBRACE=152
    RBRACKET=153
    RPAREN=154
    SEMICOLON=155
    SLASH=156
    UNDERSCORE=157
    MULTI_LINE_COMMENT=158
    SINGLE_LINE_COMMENT=159
    WHITESPACE=160
    STRING_TEXT=161
    STRING_ESCAPE_TRIGGER=162
    FULL_STRING_TEXT=163
    FULL_STRING_ESCAPE_TRIGGER=164

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(HogQLParser.DeclarationContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_program

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = HogQLParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -281477392646146) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2895779376027140095) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 4212759) != 0):
                self.state = 182
                self.declaration()
                self.state = 187
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 188
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDecl(self):
            return self.getTypedRuleContext(HogQLParser.VarDeclContext,0)


        def statement(self):
            return self.getTypedRuleContext(HogQLParser.StatementContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = HogQLParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_declaration)
        try:
            self.state = 192
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [56]:
                self.enterOuterAlt(localctx, 1)
                self.state = 190
                self.varDecl()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 123, 125, 133, 134, 135, 137, 144, 147, 155]:
                self.enterOuterAlt(localctx, 2)
                self.state = 191
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = HogQLParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 194
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LET(self):
            return self.getToken(HogQLParser.LET, 0)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_varDecl

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDecl" ):
                return visitor.visitVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def varDecl(self):

        localctx = HogQLParser.VarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_varDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 196
            self.match(HogQLParser.LET)
            self.state = 197
            self.identifier()
            self.state = 201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 198
                self.match(HogQLParser.COLON)
                self.state = 199
                self.match(HogQLParser.EQ_SINGLE)
                self.state = 200
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_identifierList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = HogQLParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 203
            self.identifier()
            self.state = 208
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 204
                    self.match(HogQLParser.COMMA)
                    self.state = 205
                    self.identifier() 
                self.state = 210
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 211
                self.match(HogQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def returnStmt(self):
            return self.getTypedRuleContext(HogQLParser.ReturnStmtContext,0)


        def throwStmt(self):
            return self.getTypedRuleContext(HogQLParser.ThrowStmtContext,0)


        def tryCatchStmt(self):
            return self.getTypedRuleContext(HogQLParser.TryCatchStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(HogQLParser.IfStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(HogQLParser.WhileStmtContext,0)


        def forInStmt(self):
            return self.getTypedRuleContext(HogQLParser.ForInStmtContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(HogQLParser.ForStmtContext,0)


        def funcStmt(self):
            return self.getTypedRuleContext(HogQLParser.FuncStmtContext,0)


        def varAssignment(self):
            return self.getTypedRuleContext(HogQLParser.VarAssignmentContext,0)


        def block(self):
            return self.getTypedRuleContext(HogQLParser.BlockContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(HogQLParser.ExprStmtContext,0)


        def emptyStmt(self):
            return self.getTypedRuleContext(HogQLParser.EmptyStmtContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = HogQLParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_statement)
        try:
            self.state = 226
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 214
                self.returnStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 215
                self.throwStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 216
                self.tryCatchStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 217
                self.ifStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 218
                self.whileStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 219
                self.forInStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 220
                self.forStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 221
                self.funcStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 222
                self.varAssignment()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 223
                self.block()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 224
                self.exprStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 225
                self.emptyStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(HogQLParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_returnStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = HogQLParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            self.match(HogQLParser.RETURN)
            self.state = 230
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 229
                self.expression()


            self.state = 233
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 232
                self.match(HogQLParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(HogQLParser.THROW, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_throwStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrowStmt" ):
                return visitor.visitThrowStmt(self)
            else:
                return visitor.visitChildren(self)




    def throwStmt(self):

        localctx = HogQLParser.ThrowStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_throwStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            self.match(HogQLParser.THROW)
            self.state = 237
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 236
                self.expression()


            self.state = 240
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 239
                self.match(HogQLParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.catchVar = None # IdentifierContext
            self.catchType = None # IdentifierContext
            self.catchStmt = None # BlockContext

        def CATCH(self):
            return self.getToken(HogQLParser.CATCH, 0)

        def block(self):
            return self.getTypedRuleContext(HogQLParser.BlockContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_catchBlock

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchBlock" ):
                return visitor.visitCatchBlock(self)
            else:
                return visitor.visitChildren(self)




    def catchBlock(self):

        localctx = HogQLParser.CatchBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_catchBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            self.match(HogQLParser.CATCH)
            self.state = 251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 243
                self.match(HogQLParser.LPAREN)
                self.state = 244
                localctx.catchVar = self.identifier()
                self.state = 247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==120:
                    self.state = 245
                    self.match(HogQLParser.COLON)
                    self.state = 246
                    localctx.catchType = self.identifier()


                self.state = 249
                self.match(HogQLParser.RPAREN)


            self.state = 253
            localctx.catchStmt = self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryCatchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tryStmt = None # BlockContext
            self.finallyStmt = None # BlockContext

        def TRY(self):
            return self.getToken(HogQLParser.TRY, 0)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.BlockContext)
            else:
                return self.getTypedRuleContext(HogQLParser.BlockContext,i)


        def catchBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.CatchBlockContext)
            else:
                return self.getTypedRuleContext(HogQLParser.CatchBlockContext,i)


        def FINALLY(self):
            return self.getToken(HogQLParser.FINALLY, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_tryCatchStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryCatchStmt" ):
                return visitor.visitTryCatchStmt(self)
            else:
                return visitor.visitChildren(self)




    def tryCatchStmt(self):

        localctx = HogQLParser.TryCatchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_tryCatchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            self.match(HogQLParser.TRY)
            self.state = 256
            localctx.tryStmt = self.block()
            self.state = 260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==14:
                self.state = 257
                self.catchBlock()
                self.state = 262
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 263
                self.match(HogQLParser.FINALLY)
                self.state = 264
                localctx.finallyStmt = self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(HogQLParser.IF, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.StatementContext)
            else:
                return self.getTypedRuleContext(HogQLParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_ifStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = HogQLParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_ifStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.match(HogQLParser.IF)
            self.state = 268
            self.match(HogQLParser.LPAREN)
            self.state = 269
            self.expression()
            self.state = 270
            self.match(HogQLParser.RPAREN)
            self.state = 271
            self.statement()
            self.state = 274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 272
                self.match(HogQLParser.ELSE)
                self.state = 273
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(HogQLParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(HogQLParser.StatementContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_whileStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = HogQLParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276
            self.match(HogQLParser.WHILE)
            self.state = 277
            self.match(HogQLParser.LPAREN)
            self.state = 278
            self.expression()
            self.state = 279
            self.match(HogQLParser.RPAREN)
            self.state = 280
            self.statement()
            self.state = 282
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 281
                self.match(HogQLParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.initializerVarDeclr = None # VarDeclContext
            self.initializerVarAssignment = None # VarAssignmentContext
            self.initializerExpression = None # ExpressionContext
            self.condition = None # ExpressionContext
            self.incrementVarDeclr = None # VarDeclContext
            self.incrementVarAssignment = None # VarAssignmentContext
            self.incrementExpression = None # ExpressionContext

        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.SEMICOLON)
            else:
                return self.getToken(HogQLParser.SEMICOLON, i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(HogQLParser.StatementContext,0)


        def varDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.VarDeclContext)
            else:
                return self.getTypedRuleContext(HogQLParser.VarDeclContext,i)


        def varAssignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.VarAssignmentContext)
            else:
                return self.getTypedRuleContext(HogQLParser.VarAssignmentContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ExpressionContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_forStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = HogQLParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_forStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            self.match(HogQLParser.FOR)
            self.state = 285
            self.match(HogQLParser.LPAREN)
            self.state = 289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 286
                localctx.initializerVarDeclr = self.varDecl()

            elif la_ == 2:
                self.state = 287
                localctx.initializerVarAssignment = self.varAssignment()

            elif la_ == 3:
                self.state = 288
                localctx.initializerExpression = self.expression()


            self.state = 291
            self.match(HogQLParser.SEMICOLON)
            self.state = 293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -72339354898415618) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2895777159790460927) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 18455) != 0):
                self.state = 292
                localctx.condition = self.expression()


            self.state = 295
            self.match(HogQLParser.SEMICOLON)
            self.state = 299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 296
                localctx.incrementVarDeclr = self.varDecl()

            elif la_ == 2:
                self.state = 297
                localctx.incrementVarAssignment = self.varAssignment()

            elif la_ == 3:
                self.state = 298
                localctx.incrementExpression = self.expression()


            self.state = 301
            self.match(HogQLParser.RPAREN)
            self.state = 302
            self.statement()
            self.state = 304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.state = 303
                self.match(HogQLParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def LET(self):
            return self.getToken(HogQLParser.LET, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def IN(self):
            return self.getToken(HogQLParser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(HogQLParser.StatementContext,0)


        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_forInStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForInStmt" ):
                return visitor.visitForInStmt(self)
            else:
                return visitor.visitChildren(self)




    def forInStmt(self):

        localctx = HogQLParser.ForInStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_forInStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self.match(HogQLParser.FOR)
            self.state = 307
            self.match(HogQLParser.LPAREN)
            self.state = 308
            self.match(HogQLParser.LET)
            self.state = 309
            self.identifier()
            self.state = 312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 310
                self.match(HogQLParser.COMMA)
                self.state = 311
                self.identifier()


            self.state = 314
            self.match(HogQLParser.IN)
            self.state = 315
            self.expression()
            self.state = 316
            self.match(HogQLParser.RPAREN)
            self.state = 317
            self.statement()
            self.state = 319
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 318
                self.match(HogQLParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(HogQLParser.BlockContext,0)


        def FN(self):
            return self.getToken(HogQLParser.FN, 0)

        def FUN(self):
            return self.getToken(HogQLParser.FUN, 0)

        def identifierList(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_funcStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncStmt" ):
                return visitor.visitFuncStmt(self)
            else:
                return visitor.visitChildren(self)




    def funcStmt(self):

        localctx = HogQLParser.FuncStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_funcStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            _la = self._input.LA(1)
            if not(_la==33 or _la==38):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 322
            self.identifier()
            self.state = 323
            self.match(HogQLParser.LPAREN)
            self.state = 325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6845119303998488574) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 103336879587327) != 0):
                self.state = 324
                self.identifierList()


            self.state = 327
            self.match(HogQLParser.RPAREN)
            self.state = 328
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_varAssignment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarAssignment" ):
                return visitor.visitVarAssignment(self)
            else:
                return visitor.visitChildren(self)




    def varAssignment(self):

        localctx = HogQLParser.VarAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_varAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.expression()
            self.state = 331
            self.match(HogQLParser.COLON)
            self.state = 332
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 333
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_exprStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = HogQLParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.expression()
            self.state = 337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 336
                self.match(HogQLParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_emptyStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyStmt" ):
                return visitor.visitEmptyStmt(self)
            else:
                return visitor.visitChildren(self)




    def emptyStmt(self):

        localctx = HogQLParser.EmptyStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_emptyStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self.match(HogQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(HogQLParser.DeclarationContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = HogQLParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.match(HogQLParser.LBRACE)
            self.state = 345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -281477392646146) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2895779376027140095) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 4212759) != 0):
                self.state = 342
                self.declaration()
                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 348
            self.match(HogQLParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KvPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_kvPair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKvPair" ):
                return visitor.visitKvPair(self)
            else:
                return visitor.visitChildren(self)




    def kvPair(self):

        localctx = HogQLParser.KvPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_kvPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 350
            self.expression()
            self.state = 351
            self.match(HogQLParser.COLON)
            self.state = 352
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KvPairListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def kvPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.KvPairContext)
            else:
                return self.getTypedRuleContext(HogQLParser.KvPairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_kvPairList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKvPairList" ):
                return visitor.visitKvPairList(self)
            else:
                return visitor.visitChildren(self)




    def kvPairList(self):

        localctx = HogQLParser.KvPairListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_kvPairList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.kvPair()
            self.state = 359
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 355
                    self.match(HogQLParser.COMMA)
                    self.state = 356
                    self.kvPair() 
                self.state = 361
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

            self.state = 363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 362
                self.match(HogQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectSetStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectSetStmtContext,0)


        def selectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtContext,0)


        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_select

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect" ):
                return visitor.visitSelect(self)
            else:
                return visitor.visitChildren(self)




    def select(self):

        localctx = HogQLParser.SelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_select)
        try:
            self.state = 368
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 365
                self.selectSetStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 366
                self.selectStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 367
                self.hogqlxTagElement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(HogQLParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(HogQLParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)


        def AS(self):
            return self.getToken(HogQLParser.AS, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def select(self):
            return self.getTypedRuleContext(HogQLParser.SelectContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_create

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate" ):
                return visitor.visitCreate(self)
            else:
                return visitor.visitChildren(self)




    def create(self):

        localctx = HogQLParser.CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_create)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self.match(HogQLParser.CREATE)
            self.state = 371
            self.match(HogQLParser.TABLE)
            self.state = 372
            self.tableIdentifier()
            self.state = 373
            self.match(HogQLParser.AS)
            self.state = 374
            self.match(HogQLParser.LPAREN)
            self.state = 375
            self.select()
            self.state = 376
            self.match(HogQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtWithParensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def selectSetStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectSetStmtContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_selectStmtWithParens

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmtWithParens" ):
                return visitor.visitSelectStmtWithParens(self)
            else:
                return visitor.visitChildren(self)




    def selectStmtWithParens(self):

        localctx = HogQLParser.SelectStmtWithParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_selectStmtWithParens)
        try:
            self.state = 384
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83, 107]:
                self.enterOuterAlt(localctx, 1)
                self.state = 378
                self.selectStmt()
                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 2)
                self.state = 379
                self.match(HogQLParser.LPAREN)
                self.state = 380
                self.selectSetStmt()
                self.state = 381
                self.match(HogQLParser.RPAREN)
                pass
            elif token in [133]:
                self.enterOuterAlt(localctx, 3)
                self.state = 383
                self.placeholder()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubsequentSelectSetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmtWithParens(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtWithParensContext,0)


        def EXCEPT(self):
            return self.getToken(HogQLParser.EXCEPT, 0)

        def UNION(self):
            return self.getToken(HogQLParser.UNION, 0)

        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def INTERSECT(self):
            return self.getToken(HogQLParser.INTERSECT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_subsequentSelectSetClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubsequentSelectSetClause" ):
                return visitor.visitSubsequentSelectSetClause(self)
            else:
                return visitor.visitChildren(self)




    def subsequentSelectSetClause(self):

        localctx = HogQLParser.SubsequentSelectSetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_subsequentSelectSetClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 386
                self.match(HogQLParser.EXCEPT)
                pass

            elif la_ == 2:
                self.state = 387
                self.match(HogQLParser.UNION)
                self.state = 388
                self.match(HogQLParser.ALL)
                pass

            elif la_ == 3:
                self.state = 389
                self.match(HogQLParser.UNION)
                self.state = 390
                self.match(HogQLParser.DISTINCT)
                pass

            elif la_ == 4:
                self.state = 391
                self.match(HogQLParser.UNION)
                pass

            elif la_ == 5:
                self.state = 392
                self.match(HogQLParser.INTERSECT)
                pass

            elif la_ == 6:
                self.state = 393
                self.match(HogQLParser.INTERSECT)
                self.state = 394
                self.match(HogQLParser.DISTINCT)
                pass


            self.state = 397
            self.selectStmtWithParens()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectSetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmtWithParens(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtWithParensContext,0)


        def subsequentSelectSetClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SubsequentSelectSetClauseContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SubsequentSelectSetClauseContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_selectSetStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectSetStmt" ):
                return visitor.visitSelectSetStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectSetStmt(self):

        localctx = HogQLParser.SelectSetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_selectSetStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.selectStmtWithParens()
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==28 or _la==48 or _la==100:
                self.state = 400
                self.subsequentSelectSetClause()
                self.state = 405
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.with_ = None # WithClauseContext
            self.columns = None # ColumnExprListContext
            self.from_ = None # FromClauseContext
            self.where = None # WhereClauseContext

        def SELECT(self):
            return self.getToken(HogQLParser.SELECT, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def topClause(self):
            return self.getTypedRuleContext(HogQLParser.TopClauseContext,0)


        def arrayJoinClause(self):
            return self.getTypedRuleContext(HogQLParser.ArrayJoinClauseContext,0)


        def prewhereClause(self):
            return self.getTypedRuleContext(HogQLParser.PrewhereClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(HogQLParser.GroupByClauseContext,0)


        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.WITH)
            else:
                return self.getToken(HogQLParser.WITH, i)

        def TOTALS(self):
            return self.getToken(HogQLParser.TOTALS, 0)

        def havingClause(self):
            return self.getTypedRuleContext(HogQLParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(HogQLParser.WindowClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(HogQLParser.OrderByClauseContext,0)


        def limitByClause(self):
            return self.getTypedRuleContext(HogQLParser.LimitByClauseContext,0)


        def limitAndOffsetClause(self):
            return self.getTypedRuleContext(HogQLParser.LimitAndOffsetClauseContext,0)


        def offsetOnlyClause(self):
            return self.getTypedRuleContext(HogQLParser.OffsetOnlyClauseContext,0)


        def settingsClause(self):
            return self.getTypedRuleContext(HogQLParser.SettingsClauseContext,0)


        def withClause(self):
            return self.getTypedRuleContext(HogQLParser.WithClauseContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(HogQLParser.FromClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(HogQLParser.WhereClauseContext,0)


        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmt" ):
                return visitor.visitSelectStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectStmt(self):

        localctx = HogQLParser.SelectStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_selectStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 406
                localctx.with_ = self.withClause()


            self.state = 409
            self.match(HogQLParser.SELECT)
            self.state = 411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 410
                self.match(HogQLParser.DISTINCT)


            self.state = 414
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 413
                self.topClause()


            self.state = 416
            localctx.columns = self.columnExprList()
            self.state = 418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 417
                localctx.from_ = self.fromClause()


            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 36169534507319328) != 0):
                self.state = 420
                self.arrayJoinClause()


            self.state = 424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 423
                self.prewhereClause()


            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104:
                self.state = 426
                localctx.where = self.whereClause()


            self.state = 430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 429
                self.groupByClause()


            self.state = 434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 432
                self.match(HogQLParser.WITH)
                self.state = 433
                _la = self._input.LA(1)
                if not(_la==19 or _la==78):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 436
                self.match(HogQLParser.WITH)
                self.state = 437
                self.match(HogQLParser.TOTALS)


            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 440
                self.havingClause()


            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 443
                self.windowClause()


            self.state = 447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 446
                self.orderByClause()


            self.state = 450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 449
                self.limitByClause()


            self.state = 454
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58]:
                self.state = 452
                self.limitAndOffsetClause()
                pass
            elif token in [65]:
                self.state = 453
                self.offsetOnlyClause()
                pass
            elif token in [28, 48, 85, 100, 154]:
                pass
            else:
                pass
            self.state = 457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 456
                self.settingsClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def withExprList(self):
            return self.getTypedRuleContext(HogQLParser.WithExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_withClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithClause" ):
                return visitor.visitWithClause(self)
            else:
                return visitor.visitChildren(self)




    def withClause(self):

        localctx = HogQLParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_withClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 459
            self.match(HogQLParser.WITH)
            self.state = 460
            self.withExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(HogQLParser.TOP, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_topClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopClause" ):
                return visitor.visitTopClause(self)
            else:
                return visitor.visitChildren(self)




    def topClause(self):

        localctx = HogQLParser.TopClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_topClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(HogQLParser.TOP)
            self.state = 463
            self.match(HogQLParser.DECIMAL_LITERAL)
            self.state = 466
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 464
                self.match(HogQLParser.WITH)
                self.state = 465
                self.match(HogQLParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def joinExpr(self):
            return self.getTypedRuleContext(HogQLParser.JoinExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_fromClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = HogQLParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.match(HogQLParser.FROM)
            self.state = 469
            self.joinExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayJoinClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(HogQLParser.ARRAY, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_arrayJoinClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayJoinClause" ):
                return visitor.visitArrayJoinClause(self)
            else:
                return visitor.visitChildren(self)




    def arrayJoinClause(self):

        localctx = HogQLParser.ArrayJoinClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_arrayJoinClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47 or _la==55:
                self.state = 471
                _la = self._input.LA(1)
                if not(_la==47 or _la==55):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 474
            self.match(HogQLParser.ARRAY)
            self.state = 475
            self.match(HogQLParser.JOIN)
            self.state = 476
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(HogQLParser.WINDOW, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.AS)
            else:
                return self.getToken(HogQLParser.AS, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)

        def windowExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WindowExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WindowExprContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_windowClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowClause" ):
                return visitor.visitWindowClause(self)
            else:
                return visitor.visitChildren(self)




    def windowClause(self):

        localctx = HogQLParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_windowClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.match(HogQLParser.WINDOW)
            self.state = 479
            self.identifier()
            self.state = 480
            self.match(HogQLParser.AS)
            self.state = 481
            self.match(HogQLParser.LPAREN)
            self.state = 482
            self.windowExpr()
            self.state = 483
            self.match(HogQLParser.RPAREN)
            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==121:
                self.state = 484
                self.match(HogQLParser.COMMA)
                self.state = 485
                self.identifier()
                self.state = 486
                self.match(HogQLParser.AS)
                self.state = 487
                self.match(HogQLParser.LPAREN)
                self.state = 488
                self.windowExpr()
                self.state = 489
                self.match(HogQLParser.RPAREN)
                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrewhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREWHERE(self):
            return self.getToken(HogQLParser.PREWHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_prewhereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrewhereClause" ):
                return visitor.visitPrewhereClause(self)
            else:
                return visitor.visitChildren(self)




    def prewhereClause(self):

        localctx = HogQLParser.PrewhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_prewhereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.match(HogQLParser.PREWHERE)
            self.state = 497
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(HogQLParser.WHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_whereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereClause" ):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def whereClause(self):

        localctx = HogQLParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self.match(HogQLParser.WHERE)
            self.state = 500
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(HogQLParser.GROUP, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_groupByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByClause" ):
                return visitor.visitGroupByClause(self)
            else:
                return visitor.visitChildren(self)




    def groupByClause(self):

        localctx = HogQLParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_groupByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.match(HogQLParser.GROUP)
            self.state = 503
            self.match(HogQLParser.BY)
            self.state = 510
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 504
                _la = self._input.LA(1)
                if not(_la==19 or _la==78):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 505
                self.match(HogQLParser.LPAREN)
                self.state = 506
                self.columnExprList()
                self.state = 507
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.state = 509
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(HogQLParser.HAVING, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_havingClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHavingClause" ):
                return visitor.visitHavingClause(self)
            else:
                return visitor.visitChildren(self)




    def havingClause(self):

        localctx = HogQLParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            self.match(HogQLParser.HAVING)
            self.state = 513
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(HogQLParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_orderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderByClause" ):
                return visitor.visitOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def orderByClause(self):

        localctx = HogQLParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_orderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.match(HogQLParser.ORDER)
            self.state = 516
            self.match(HogQLParser.BY)
            self.state = 517
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectionOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_projectionOrderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectionOrderByClause" ):
                return visitor.visitProjectionOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def projectionOrderByClause(self):

        localctx = HogQLParser.ProjectionOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_projectionOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self.match(HogQLParser.ORDER)
            self.state = 520
            self.match(HogQLParser.BY)
            self.state = 521
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def limitExpr(self):
            return self.getTypedRuleContext(HogQLParser.LimitExprContext,0)


        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_limitByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitByClause" ):
                return visitor.visitLimitByClause(self)
            else:
                return visitor.visitChildren(self)




    def limitByClause(self):

        localctx = HogQLParser.LimitByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_limitByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(HogQLParser.LIMIT)
            self.state = 524
            self.limitExpr()
            self.state = 525
            self.match(HogQLParser.BY)
            self.state = 526
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitAndOffsetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_limitAndOffsetClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitAndOffsetClause" ):
                return visitor.visitLimitAndOffsetClause(self)
            else:
                return visitor.visitChildren(self)




    def limitAndOffsetClause(self):

        localctx = HogQLParser.LimitAndOffsetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_limitAndOffsetClause)
        self._la = 0 # Token type
        try:
            self.state = 547
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 528
                self.match(HogQLParser.LIMIT)
                self.state = 529
                self.columnExpr(0)
                self.state = 532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121:
                    self.state = 530
                    self.match(HogQLParser.COMMA)
                    self.state = 531
                    self.columnExpr(0)


                self.state = 536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 534
                    self.match(HogQLParser.WITH)
                    self.state = 535
                    self.match(HogQLParser.TIES)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 538
                self.match(HogQLParser.LIMIT)
                self.state = 539
                self.columnExpr(0)
                self.state = 542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 540
                    self.match(HogQLParser.WITH)
                    self.state = 541
                    self.match(HogQLParser.TIES)


                self.state = 544
                self.match(HogQLParser.OFFSET)
                self.state = 545
                self.columnExpr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetOnlyClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_offsetOnlyClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOffsetOnlyClause" ):
                return visitor.visitOffsetOnlyClause(self)
            else:
                return visitor.visitChildren(self)




    def offsetOnlyClause(self):

        localctx = HogQLParser.OffsetOnlyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_offsetOnlyClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self.match(HogQLParser.OFFSET)
            self.state = 550
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTINGS(self):
            return self.getToken(HogQLParser.SETTINGS, 0)

        def settingExprList(self):
            return self.getTypedRuleContext(HogQLParser.SettingExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_settingsClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingsClause" ):
                return visitor.visitSettingsClause(self)
            else:
                return visitor.visitChildren(self)




    def settingsClause(self):

        localctx = HogQLParser.SettingsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_settingsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self.match(HogQLParser.SETTINGS)
            self.state = 553
            self.settingExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_joinExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JoinExprOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.JoinExprContext,i)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)
        def joinConstraintClause(self):
            return self.getTypedRuleContext(HogQLParser.JoinConstraintClauseContext,0)

        def joinOp(self):
            return self.getTypedRuleContext(HogQLParser.JoinOpContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprOp" ):
                return visitor.visitJoinExprOp(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprTableContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableExprContext,0)

        def FINAL(self):
            return self.getToken(HogQLParser.FINAL, 0)
        def sampleClause(self):
            return self.getTypedRuleContext(HogQLParser.SampleClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprTable" ):
                return visitor.visitJoinExprTable(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprParensContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def joinExpr(self):
            return self.getTypedRuleContext(HogQLParser.JoinExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprParens" ):
                return visitor.visitJoinExprParens(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprCrossOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.JoinExprContext,i)

        def joinOpCross(self):
            return self.getTypedRuleContext(HogQLParser.JoinOpCrossContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprCrossOp" ):
                return visitor.visitJoinExprCrossOp(self)
            else:
                return visitor.visitChildren(self)



    def joinExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.JoinExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 84
        self.enterRecursionRule(localctx, 84, self.RULE_joinExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.JoinExprTableContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 556
                self.tableExpr(0)
                self.state = 558
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 557
                    self.match(HogQLParser.FINAL)


                self.state = 561
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 560
                    self.sampleClause()


                pass

            elif la_ == 2:
                localctx = HogQLParser.JoinExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 563
                self.match(HogQLParser.LPAREN)
                self.state = 564
                self.joinExpr(0)
                self.state = 565
                self.match(HogQLParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 583
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 581
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                    if la_ == 1:
                        localctx = HogQLParser.JoinExprCrossOpContext(self, HogQLParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 569
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 570
                        self.joinOpCross()
                        self.state = 571
                        self.joinExpr(4)
                        pass

                    elif la_ == 2:
                        localctx = HogQLParser.JoinExprOpContext(self, HogQLParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 573
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 575
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 36169671946273050) != 0) or _la==77 or _la==84:
                            self.state = 574
                            self.joinOp()


                        self.state = 577
                        self.match(HogQLParser.JOIN)
                        self.state = 578
                        self.joinExpr(0)
                        self.state = 579
                        self.joinConstraintClause()
                        pass

             
                self.state = 585
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JoinOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_joinOp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JoinOpFullContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FULL(self):
            return self.getToken(HogQLParser.FULL, 0)
        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpFull" ):
                return visitor.visitJoinOpFull(self)
            else:
                return visitor.visitChildren(self)


    class JoinOpInnerContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)
        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpInner" ):
                return visitor.visitJoinOpInner(self)
            else:
                return visitor.visitChildren(self)


    class JoinOpLeftRightContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(HogQLParser.RIGHT, 0)
        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)
        def SEMI(self):
            return self.getToken(HogQLParser.SEMI, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANTI(self):
            return self.getToken(HogQLParser.ANTI, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)
        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpLeftRight" ):
                return visitor.visitJoinOpLeftRight(self)
            else:
                return visitor.visitChildren(self)



    def joinOp(self):

        localctx = HogQLParser.JoinOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_joinOp)
        self._la = 0 # Token type
        try:
            self.state = 629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.JoinOpInnerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 595
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 587
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0):
                        self.state = 586
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 589
                    self.match(HogQLParser.INNER)
                    pass

                elif la_ == 2:
                    self.state = 590
                    self.match(HogQLParser.INNER)
                    self.state = 592
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0):
                        self.state = 591
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass

                elif la_ == 3:
                    self.state = 594
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 274) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass


                pass

            elif la_ == 2:
                localctx = HogQLParser.JoinOpLeftRightContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 611
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 598
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==84:
                        self.state = 597
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==84):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 600
                    _la = self._input.LA(1)
                    if not(_la==55 or _la==77):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 602
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==69:
                        self.state = 601
                        self.match(HogQLParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 604
                    _la = self._input.LA(1)
                    if not(_la==55 or _la==77):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 606
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==69:
                        self.state = 605
                        self.match(HogQLParser.OUTER)


                    self.state = 609
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==84:
                        self.state = 608
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 282) != 0) or _la==84):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass

            elif la_ == 3:
                localctx = HogQLParser.JoinOpFullContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 627
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                if la_ == 1:
                    self.state = 614
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1 or _la==4:
                        self.state = 613
                        _la = self._input.LA(1)
                        if not(_la==1 or _la==4):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 616
                    self.match(HogQLParser.FULL)
                    self.state = 618
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==69:
                        self.state = 617
                        self.match(HogQLParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 620
                    self.match(HogQLParser.FULL)
                    self.state = 622
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==69:
                        self.state = 621
                        self.match(HogQLParser.OUTER)


                    self.state = 625
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1 or _la==4:
                        self.state = 624
                        _la = self._input.LA(1)
                        if not(_la==1 or _la==4):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinOpCrossContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CROSS(self):
            return self.getToken(HogQLParser.CROSS, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_joinOpCross

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpCross" ):
                return visitor.visitJoinOpCross(self)
            else:
                return visitor.visitChildren(self)




    def joinOpCross(self):

        localctx = HogQLParser.JoinOpCrossContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_joinOpCross)
        try:
            self.state = 634
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 631
                self.match(HogQLParser.CROSS)
                self.state = 632
                self.match(HogQLParser.JOIN)
                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 2)
                self.state = 633
                self.match(HogQLParser.COMMA)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinConstraintClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(HogQLParser.ON, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def USING(self):
            return self.getToken(HogQLParser.USING, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_joinConstraintClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinConstraintClause" ):
                return visitor.visitJoinConstraintClause(self)
            else:
                return visitor.visitChildren(self)




    def joinConstraintClause(self):

        localctx = HogQLParser.JoinConstraintClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_joinConstraintClause)
        try:
            self.state = 645
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 636
                self.match(HogQLParser.ON)
                self.state = 637
                self.columnExprList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 638
                self.match(HogQLParser.USING)
                self.state = 639
                self.match(HogQLParser.LPAREN)
                self.state = 640
                self.columnExprList()
                self.state = 641
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 643
                self.match(HogQLParser.USING)
                self.state = 644
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(HogQLParser.SAMPLE, 0)

        def ratioExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.RatioExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.RatioExprContext,i)


        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_sampleClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleClause" ):
                return visitor.visitSampleClause(self)
            else:
                return visitor.visitChildren(self)




    def sampleClause(self):

        localctx = HogQLParser.SampleClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_sampleClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(HogQLParser.SAMPLE)
            self.state = 648
            self.ratioExpr()
            self.state = 651
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 649
                self.match(HogQLParser.OFFSET)
                self.state = 650
                self.ratioExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_limitExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitExpr" ):
                return visitor.visitLimitExpr(self)
            else:
                return visitor.visitChildren(self)




    def limitExpr(self):

        localctx = HogQLParser.LimitExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_limitExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.columnExpr(0)
            self.state = 656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65 or _la==121:
                self.state = 654
                _la = self._input.LA(1)
                if not(_la==65 or _la==121):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 655
                self.columnExpr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.OrderExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.OrderExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExprList" ):
                return visitor.visitOrderExprList(self)
            else:
                return visitor.visitChildren(self)




    def orderExprList(self):

        localctx = HogQLParser.OrderExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_orderExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self.orderExpr()
            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==121:
                self.state = 659
                self.match(HogQLParser.COMMA)
                self.state = 660
                self.orderExpr()
                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def NULLS(self):
            return self.getToken(HogQLParser.NULLS, 0)

        def COLLATE(self):
            return self.getToken(HogQLParser.COLLATE, 0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def ASCENDING(self):
            return self.getToken(HogQLParser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(HogQLParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(HogQLParser.DESC, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def LAST(self):
            return self.getToken(HogQLParser.LAST, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExpr" ):
                return visitor.visitOrderExpr(self)
            else:
                return visitor.visitChildren(self)




    def orderExpr(self):

        localctx = HogQLParser.OrderExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_orderExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self.columnExpr(0)
            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 25165952) != 0):
                self.state = 667
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 25165952) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 670
                self.match(HogQLParser.NULLS)
                self.state = 671
                _la = self._input.LA(1)
                if not(_la==32 or _la==53):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 674
                self.match(HogQLParser.COLLATE)
                self.state = 675
                self.match(HogQLParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RatioExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def numberLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.NumberLiteralContext)
            else:
                return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,i)


        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_ratioExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRatioExpr" ):
                return visitor.visitRatioExpr(self)
            else:
                return visitor.visitChildren(self)




    def ratioExpr(self):

        localctx = HogQLParser.RatioExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_ratioExpr)
        try:
            self.state = 684
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [133]:
                self.enterOuterAlt(localctx, 1)
                self.state = 678
                self.placeholder()
                pass
            elif token in [46, 61, 111, 112, 113, 114, 123, 125, 144]:
                self.enterOuterAlt(localctx, 2)
                self.state = 679
                self.numberLiteral()
                self.state = 682
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 680
                    self.match(HogQLParser.SLASH)
                    self.state = 681
                    self.numberLiteral()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def settingExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SettingExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SettingExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_settingExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingExprList" ):
                return visitor.visitSettingExprList(self)
            else:
                return visitor.visitChildren(self)




    def settingExprList(self):

        localctx = HogQLParser.SettingExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_settingExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self.settingExpr()
            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==121:
                self.state = 687
                self.match(HogQLParser.COMMA)
                self.state = 688
                self.settingExpr()
                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_settingExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingExpr" ):
                return visitor.visitSettingExpr(self)
            else:
                return visitor.visitChildren(self)




    def settingExpr(self):

        localctx = HogQLParser.SettingExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_settingExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 694
            self.identifier()
            self.state = 695
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 696
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winPartitionByClause(self):
            return self.getTypedRuleContext(HogQLParser.WinPartitionByClauseContext,0)


        def winOrderByClause(self):
            return self.getTypedRuleContext(HogQLParser.WinOrderByClauseContext,0)


        def winFrameClause(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameClauseContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_windowExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowExpr" ):
                return visitor.visitWindowExpr(self)
            else:
                return visitor.visitChildren(self)




    def windowExpr(self):

        localctx = HogQLParser.WindowExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_windowExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 698
                self.winPartitionByClause()


            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 701
                self.winOrderByClause()


            self.state = 705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75 or _la==80:
                self.state = 704
                self.winFrameClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinPartitionByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(HogQLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winPartitionByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinPartitionByClause" ):
                return visitor.visitWinPartitionByClause(self)
            else:
                return visitor.visitChildren(self)




    def winPartitionByClause(self):

        localctx = HogQLParser.WinPartitionByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_winPartitionByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(HogQLParser.PARTITION)
            self.state = 708
            self.match(HogQLParser.BY)
            self.state = 709
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(HogQLParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winOrderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinOrderByClause" ):
                return visitor.visitWinOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def winOrderByClause(self):

        localctx = HogQLParser.WinOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_winOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.match(HogQLParser.ORDER)
            self.state = 712
            self.match(HogQLParser.BY)
            self.state = 713
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winFrameExtend(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameExtendContext,0)


        def ROWS(self):
            return self.getToken(HogQLParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(HogQLParser.RANGE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinFrameClause" ):
                return visitor.visitWinFrameClause(self)
            else:
                return visitor.visitChildren(self)




    def winFrameClause(self):

        localctx = HogQLParser.WinFrameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_winFrameClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            _la = self._input.LA(1)
            if not(_la==75 or _la==80):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 716
            self.winFrameExtend()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameExtendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameExtend

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FrameStartContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def winFrameBound(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameBoundContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameStart" ):
                return visitor.visitFrameStart(self)
            else:
                return visitor.visitChildren(self)


    class FrameBetweenContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)
        def winFrameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WinFrameBoundContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WinFrameBoundContext,i)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameBetween" ):
                return visitor.visitFrameBetween(self)
            else:
                return visitor.visitChildren(self)



    def winFrameExtend(self):

        localctx = HogQLParser.WinFrameExtendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_winFrameExtend)
        try:
            self.state = 724
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 46, 61, 99, 111, 112, 113, 114, 123, 125, 144]:
                localctx = HogQLParser.FrameStartContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 718
                self.winFrameBound()
                pass
            elif token in [9]:
                localctx = HogQLParser.FrameBetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 719
                self.match(HogQLParser.BETWEEN)
                self.state = 720
                self.winFrameBound()
                self.state = 721
                self.match(HogQLParser.AND)
                self.state = 722
                self.winFrameBound()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(HogQLParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(HogQLParser.ROW, 0)

        def UNBOUNDED(self):
            return self.getToken(HogQLParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(HogQLParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(HogQLParser.FOLLOWING, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameBound

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinFrameBound" ):
                return visitor.visitWinFrameBound(self)
            else:
                return visitor.visitChildren(self)




    def winFrameBound(self):

        localctx = HogQLParser.WinFrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_winFrameBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 726
                self.match(HogQLParser.CURRENT)
                self.state = 727
                self.match(HogQLParser.ROW)
                pass

            elif la_ == 2:
                self.state = 728
                self.match(HogQLParser.UNBOUNDED)
                self.state = 729
                self.match(HogQLParser.PRECEDING)
                pass

            elif la_ == 3:
                self.state = 730
                self.match(HogQLParser.UNBOUNDED)
                self.state = 731
                self.match(HogQLParser.FOLLOWING)
                pass

            elif la_ == 4:
                self.state = 732
                self.numberLiteral()
                self.state = 733
                self.match(HogQLParser.PRECEDING)
                pass

            elif la_ == 5:
                self.state = 735
                self.numberLiteral()
                self.state = 736
                self.match(HogQLParser.FOLLOWING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = HogQLParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self.columnExpr(0)
            self.state = 741
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_columnTypeExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnTypeExprNestedContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprNested" ):
                return visitor.visitColumnTypeExprNested(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprParamContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprParam" ):
                return visitor.visitColumnTypeExprParam(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprSimpleContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprSimple" ):
                return visitor.visitColumnTypeExprSimple(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprComplexContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprComplex" ):
                return visitor.visitColumnTypeExprComplex(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprEnumContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(HogQLParser.EnumValueContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprEnum" ):
                return visitor.visitColumnTypeExprEnum(self)
            else:
                return visitor.visitChildren(self)



    def columnTypeExpr(self):

        localctx = HogQLParser.ColumnTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_columnTypeExpr)
        self._la = 0 # Token type
        try:
            self.state = 799
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnTypeExprSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 743
                self.identifier()
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnTypeExprNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 744
                self.identifier()
                self.state = 745
                self.match(HogQLParser.LPAREN)
                self.state = 746
                self.identifier()
                self.state = 747
                self.columnTypeExpr()
                self.state = 754
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 748
                        self.match(HogQLParser.COMMA)
                        self.state = 749
                        self.identifier()
                        self.state = 750
                        self.columnTypeExpr() 
                    self.state = 756
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

                self.state = 758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121:
                    self.state = 757
                    self.match(HogQLParser.COMMA)


                self.state = 760
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnTypeExprEnumContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 762
                self.identifier()
                self.state = 763
                self.match(HogQLParser.LPAREN)
                self.state = 764
                self.enumValue()
                self.state = 769
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 765
                        self.match(HogQLParser.COMMA)
                        self.state = 766
                        self.enumValue() 
                    self.state = 771
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121:
                    self.state = 772
                    self.match(HogQLParser.COMMA)


                self.state = 775
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = HogQLParser.ColumnTypeExprComplexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 777
                self.identifier()
                self.state = 778
                self.match(HogQLParser.LPAREN)
                self.state = 779
                self.columnTypeExpr()
                self.state = 784
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 780
                        self.match(HogQLParser.COMMA)
                        self.state = 781
                        self.columnTypeExpr() 
                    self.state = 786
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

                self.state = 788
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121:
                    self.state = 787
                    self.match(HogQLParser.COMMA)


                self.state = 790
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = HogQLParser.ColumnTypeExprParamContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 792
                self.identifier()
                self.state = 793
                self.match(HogQLParser.LPAREN)
                self.state = 795
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -72339354898415618) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2895777159790460927) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 18455) != 0):
                    self.state = 794
                    self.columnExprList()


                self.state = 797
                self.match(HogQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprList" ):
                return visitor.visitColumnExprList(self)
            else:
                return visitor.visitChildren(self)




    def columnExprList(self):

        localctx = HogQLParser.ColumnExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_columnExprList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.columnExpr(0)
            self.state = 806
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 802
                    self.match(HogQLParser.COMMA)
                    self.state = 803
                    self.columnExpr(0) 
                self.state = 808
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

            self.state = 810
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 809
                self.match(HogQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_columnExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ColumnExprTernaryOpContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def QUERY(self):
            return self.getToken(HogQLParser.QUERY, 0)
        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTernaryOp" ):
                return visitor.visitColumnExprTernaryOp(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAliasContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAlias" ):
                return visitor.visitColumnExprAlias(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNegateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNegate" ):
                return visitor.visitColumnExprNegate(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprDictContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)
        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)
        def kvPairList(self):
            return self.getTypedRuleContext(HogQLParser.KvPairListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprDict" ):
                return visitor.visitColumnExprDict(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprSubqueryContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectSetStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectSetStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprSubquery" ):
                return visitor.visitColumnExprSubquery(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprLiteralContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprLiteral" ):
                return visitor.visitColumnExprLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprArrayContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprArray" ):
                return visitor.visitColumnExprArray(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprSubstringContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSTRING(self):
            return self.getToken(HogQLParser.SUBSTRING, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprSubstring" ):
                return visitor.visitColumnExprSubstring(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCastContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(HogQLParser.CAST, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def columnTypeExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCast" ):
                return visitor.visitColumnExprCast(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprOrContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def OR(self):
            return self.getToken(HogQLParser.OR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprOr" ):
                return visitor.visitColumnExprOr(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNullTupleAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def NULL_PROPERTY(self):
            return self.getToken(HogQLParser.NULL_PROPERTY, 0)
        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNullTupleAccess" ):
                return visitor.visitColumnExprNullTupleAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence1Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(HogQLParser.PERCENT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence1" ):
                return visitor.visitColumnExprPrecedence1(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence2Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def PLUS(self):
            return self.getToken(HogQLParser.PLUS, 0)
        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)
        def CONCAT(self):
            return self.getToken(HogQLParser.CONCAT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence2" ):
                return visitor.visitColumnExprPrecedence2(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence3Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def IN(self):
            return self.getToken(HogQLParser.IN, 0)
        def EQ_DOUBLE(self):
            return self.getToken(HogQLParser.EQ_DOUBLE, 0)
        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)
        def NOT_EQ(self):
            return self.getToken(HogQLParser.NOT_EQ, 0)
        def LT_EQ(self):
            return self.getToken(HogQLParser.LT_EQ, 0)
        def LT(self):
            return self.getToken(HogQLParser.LT, 0)
        def GT_EQ(self):
            return self.getToken(HogQLParser.GT_EQ, 0)
        def GT(self):
            return self.getToken(HogQLParser.GT, 0)
        def LIKE(self):
            return self.getToken(HogQLParser.LIKE, 0)
        def ILIKE(self):
            return self.getToken(HogQLParser.ILIKE, 0)
        def REGEX_SINGLE(self):
            return self.getToken(HogQLParser.REGEX_SINGLE, 0)
        def REGEX_DOUBLE(self):
            return self.getToken(HogQLParser.REGEX_DOUBLE, 0)
        def NOT_REGEX(self):
            return self.getToken(HogQLParser.NOT_REGEX, 0)
        def IREGEX_SINGLE(self):
            return self.getToken(HogQLParser.IREGEX_SINGLE, 0)
        def IREGEX_DOUBLE(self):
            return self.getToken(HogQLParser.IREGEX_DOUBLE, 0)
        def NOT_IREGEX(self):
            return self.getToken(HogQLParser.NOT_IREGEX, 0)
        def COHORT(self):
            return self.getToken(HogQLParser.COHORT, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence3" ):
                return visitor.visitColumnExprPrecedence3(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIntervalContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprInterval" ):
                return visitor.visitColumnExprInterval(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCallSelectContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectSetStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectSetStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCallSelect" ):
                return visitor.visitColumnExprCallSelect(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIsNullContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def IS(self):
            return self.getToken(HogQLParser.IS, 0)
        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIsNull" ):
                return visitor.visitColumnExprIsNull(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprWinFunctionTargetContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.columnExprs = None # ColumnExprListContext
            self.columnArgList = None # ColumnExprListContext
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def columnExprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprListContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,i)

        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWinFunctionTarget" ):
                return visitor.visitColumnExprWinFunctionTarget(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNullPropertyAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def NULL_PROPERTY(self):
            return self.getToken(HogQLParser.NULL_PROPERTY, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNullPropertyAccess" ):
                return visitor.visitColumnExprNullPropertyAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIntervalStringContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIntervalString" ):
                return visitor.visitColumnExprIntervalString(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTrimContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(HogQLParser.TRIM, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def string(self):
            return self.getTypedRuleContext(HogQLParser.StringContext,0)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def BOTH(self):
            return self.getToken(HogQLParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(HogQLParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(HogQLParser.TRAILING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTrim" ):
                return visitor.visitColumnExprTrim(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTagElementContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTagElement" ):
                return visitor.visitColumnExprTagElement(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTemplateStringContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def templateString(self):
            return self.getTypedRuleContext(HogQLParser.TemplateStringContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTemplateString" ):
                return visitor.visitColumnExprTemplateString(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTupleContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTuple" ):
                return visitor.visitColumnExprTuple(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCallContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCall" ):
                return visitor.visitColumnExprCall(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprArrayAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprArrayAccess" ):
                return visitor.visitColumnExprArrayAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprBetweenContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(HogQLParser.AND, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprBetween" ):
                return visitor.visitColumnExprBetween(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPropertyAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPropertyAccess" ):
                return visitor.visitColumnExprPropertyAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprParensContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprParens" ):
                return visitor.visitColumnExprParens(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNullArrayAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def NULL_PROPERTY(self):
            return self.getToken(HogQLParser.NULL_PROPERTY, 0)
        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNullArrayAccess" ):
                return visitor.visitColumnExprNullArrayAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTimestampContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIMESTAMP(self):
            return self.getToken(HogQLParser.TIMESTAMP, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTimestamp" ):
                return visitor.visitColumnExprTimestamp(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNullishContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def NULLISH(self):
            return self.getToken(HogQLParser.NULLISH, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNullish" ):
                return visitor.visitColumnExprNullish(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAndContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAnd" ):
                return visitor.visitColumnExprAnd(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTupleAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)
        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTupleAccess" ):
                return visitor.visitColumnExprTupleAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCaseContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.caseExpr = None # ColumnExprContext
            self.whenExpr = None # ColumnExprContext
            self.thenExpr = None # ColumnExprContext
            self.elseExpr = None # ColumnExprContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(HogQLParser.CASE, 0)
        def END(self):
            return self.getToken(HogQLParser.END, 0)
        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.WHEN)
            else:
                return self.getToken(HogQLParser.WHEN, i)
        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.THEN)
            else:
                return self.getToken(HogQLParser.THEN, i)
        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCase" ):
                return visitor.visitColumnExprCase(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprDateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprDate" ):
                return visitor.visitColumnExprDate(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNotContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNot" ):
                return visitor.visitColumnExprNot(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprWinFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.columnExprs = None # ColumnExprListContext
            self.columnArgList = None # ColumnExprListContext
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def windowExpr(self):
            return self.getTypedRuleContext(HogQLParser.WindowExprContext,0)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def columnExprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprListContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,i)

        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWinFunction" ):
                return visitor.visitColumnExprWinFunction(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprLambdaContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnLambdaExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnLambdaExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprLambda" ):
                return visitor.visitColumnExprLambda(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIdentifierContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.ColumnIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIdentifier" ):
                return visitor.visitColumnExprIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.columnExprs = None # ColumnExprListContext
            self.columnArgList = None # ColumnExprListContext
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)
        def columnExprList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprListContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprFunction" ):
                return visitor.visitColumnExprFunction(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAsteriskContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAsterisk" ):
                return visitor.visitColumnExprAsterisk(self)
            else:
                return visitor.visitChildren(self)



    def columnExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.ColumnExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 124
        self.enterRecursionRule(localctx, 124, self.RULE_columnExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnExprCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 813
                self.match(HogQLParser.CASE)
                self.state = 815
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 814
                    localctx.caseExpr = self.columnExpr(0)


                self.state = 822 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 817
                    self.match(HogQLParser.WHEN)
                    self.state = 818
                    localctx.whenExpr = self.columnExpr(0)
                    self.state = 819
                    self.match(HogQLParser.THEN)
                    self.state = 820
                    localctx.thenExpr = self.columnExpr(0)
                    self.state = 824 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==103):
                        break

                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==26:
                    self.state = 826
                    self.match(HogQLParser.ELSE)
                    self.state = 827
                    localctx.elseExpr = self.columnExpr(0)


                self.state = 830
                self.match(HogQLParser.END)
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnExprCastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 832
                self.match(HogQLParser.CAST)
                self.state = 833
                self.match(HogQLParser.LPAREN)
                self.state = 834
                self.columnExpr(0)
                self.state = 835
                self.match(HogQLParser.AS)
                self.state = 836
                self.columnTypeExpr()
                self.state = 837
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnExprDateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 839
                self.match(HogQLParser.DATE)
                self.state = 840
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 4:
                localctx = HogQLParser.ColumnExprIntervalStringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 841
                self.match(HogQLParser.INTERVAL)
                self.state = 842
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 5:
                localctx = HogQLParser.ColumnExprIntervalContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 843
                self.match(HogQLParser.INTERVAL)
                self.state = 844
                self.columnExpr(0)
                self.state = 845
                self.interval()
                pass

            elif la_ == 6:
                localctx = HogQLParser.ColumnExprSubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 847
                self.match(HogQLParser.SUBSTRING)
                self.state = 848
                self.match(HogQLParser.LPAREN)
                self.state = 849
                self.columnExpr(0)
                self.state = 850
                self.match(HogQLParser.FROM)
                self.state = 851
                self.columnExpr(0)
                self.state = 854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 852
                    self.match(HogQLParser.FOR)
                    self.state = 853
                    self.columnExpr(0)


                self.state = 856
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 7:
                localctx = HogQLParser.ColumnExprTimestampContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 858
                self.match(HogQLParser.TIMESTAMP)
                self.state = 859
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 8:
                localctx = HogQLParser.ColumnExprTrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 860
                self.match(HogQLParser.TRIM)
                self.state = 861
                self.match(HogQLParser.LPAREN)
                self.state = 862
                _la = self._input.LA(1)
                if not(_la==10 or _la==54 or _la==95):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 863
                self.string()
                self.state = 864
                self.match(HogQLParser.FROM)
                self.state = 865
                self.columnExpr(0)
                self.state = 866
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 9:
                localctx = HogQLParser.ColumnExprWinFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 868
                self.identifier()

                self.state = 869
                self.match(HogQLParser.LPAREN)
                self.state = 871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -72339354898415618) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2895777159790460927) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 18455) != 0):
                    self.state = 870
                    localctx.columnExprs = self.columnExprList()


                self.state = 873
                self.match(HogQLParser.RPAREN)
                self.state = 883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 875
                    self.match(HogQLParser.LPAREN)
                    self.state = 877
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                    if la_ == 1:
                        self.state = 876
                        self.match(HogQLParser.DISTINCT)


                    self.state = 880
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -72339354898415618) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2895777159790460927) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 18455) != 0):
                        self.state = 879
                        localctx.columnArgList = self.columnExprList()


                    self.state = 882
                    self.match(HogQLParser.RPAREN)


                self.state = 885
                self.match(HogQLParser.OVER)
                self.state = 886
                self.match(HogQLParser.LPAREN)
                self.state = 887
                self.windowExpr()
                self.state = 888
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 10:
                localctx = HogQLParser.ColumnExprWinFunctionTargetContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 890
                self.identifier()

                self.state = 891
                self.match(HogQLParser.LPAREN)
                self.state = 893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -72339354898415618) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2895777159790460927) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 18455) != 0):
                    self.state = 892
                    localctx.columnExprs = self.columnExprList()


                self.state = 895
                self.match(HogQLParser.RPAREN)
                self.state = 905
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==135:
                    self.state = 897
                    self.match(HogQLParser.LPAREN)
                    self.state = 899
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                    if la_ == 1:
                        self.state = 898
                        self.match(HogQLParser.DISTINCT)


                    self.state = 902
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -72339354898415618) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2895777159790460927) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 18455) != 0):
                        self.state = 901
                        localctx.columnArgList = self.columnExprList()


                    self.state = 904
                    self.match(HogQLParser.RPAREN)


                self.state = 907
                self.match(HogQLParser.OVER)
                self.state = 908
                self.identifier()
                pass

            elif la_ == 11:
                localctx = HogQLParser.ColumnExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 910
                self.identifier()
                self.state = 916
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                if la_ == 1:
                    self.state = 911
                    self.match(HogQLParser.LPAREN)
                    self.state = 913
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -72339354898415618) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2895777159790460927) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 18455) != 0):
                        self.state = 912
                        localctx.columnExprs = self.columnExprList()


                    self.state = 915
                    self.match(HogQLParser.RPAREN)


                self.state = 918
                self.match(HogQLParser.LPAREN)
                self.state = 920
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                if la_ == 1:
                    self.state = 919
                    self.match(HogQLParser.DISTINCT)


                self.state = 923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -72339354898415618) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2895777159790460927) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 18455) != 0):
                    self.state = 922
                    localctx.columnArgList = self.columnExprList()


                self.state = 925
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 12:
                localctx = HogQLParser.ColumnExprTagElementContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 927
                self.hogqlxTagElement()
                pass

            elif la_ == 13:
                localctx = HogQLParser.ColumnExprTemplateStringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 928
                self.templateString()
                pass

            elif la_ == 14:
                localctx = HogQLParser.ColumnExprLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 929
                self.literal()
                pass

            elif la_ == 15:
                localctx = HogQLParser.ColumnExprNegateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 930
                self.match(HogQLParser.DASH)
                self.state = 931
                self.columnExpr(20)
                pass

            elif la_ == 16:
                localctx = HogQLParser.ColumnExprNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 932
                self.match(HogQLParser.NOT)
                self.state = 933
                self.columnExpr(14)
                pass

            elif la_ == 17:
                localctx = HogQLParser.ColumnExprAsteriskContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 937
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6845119303998488574) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 103336879587327) != 0):
                    self.state = 934
                    self.tableIdentifier()
                    self.state = 935
                    self.match(HogQLParser.DOT)


                self.state = 939
                self.match(HogQLParser.ASTERISK)
                pass

            elif la_ == 18:
                localctx = HogQLParser.ColumnExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 940
                self.match(HogQLParser.LPAREN)
                self.state = 941
                self.selectSetStmt()
                self.state = 942
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 19:
                localctx = HogQLParser.ColumnExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 944
                self.match(HogQLParser.LPAREN)
                self.state = 945
                self.columnExpr(0)
                self.state = 946
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 20:
                localctx = HogQLParser.ColumnExprTupleContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 948
                self.match(HogQLParser.LPAREN)
                self.state = 949
                self.columnExprList()
                self.state = 950
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 21:
                localctx = HogQLParser.ColumnExprArrayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 952
                self.match(HogQLParser.LBRACKET)
                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -72339354898415618) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2895777159790460927) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 18455) != 0):
                    self.state = 953
                    self.columnExprList()


                self.state = 956
                self.match(HogQLParser.RBRACKET)
                pass

            elif la_ == 22:
                localctx = HogQLParser.ColumnExprDictContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 957
                self.match(HogQLParser.LBRACE)
                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -72339354898415618) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2895777159790460927) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 18455) != 0):
                    self.state = 958
                    self.kvPairList()


                self.state = 961
                self.match(HogQLParser.RBRACE)
                pass

            elif la_ == 23:
                localctx = HogQLParser.ColumnExprLambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 962
                self.columnLambdaExpr()
                pass

            elif la_ == 24:
                localctx = HogQLParser.ColumnExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 963
                self.columnIdentifier()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1081
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,132,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1079
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                    if la_ == 1:
                        localctx = HogQLParser.ColumnExprPrecedence1Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 966
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 970
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [117]:
                            self.state = 967
                            localctx.operator = self.match(HogQLParser.ASTERISK)
                            pass
                        elif token in [156]:
                            self.state = 968
                            localctx.operator = self.match(HogQLParser.SLASH)
                            pass
                        elif token in [143]:
                            self.state = 969
                            localctx.operator = self.match(HogQLParser.PERCENT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 972
                        localctx.right = self.columnExpr(20)
                        pass

                    elif la_ == 2:
                        localctx = HogQLParser.ColumnExprPrecedence2Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 973
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 977
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [144]:
                            self.state = 974
                            localctx.operator = self.match(HogQLParser.PLUS)
                            pass
                        elif token in [123]:
                            self.state = 975
                            localctx.operator = self.match(HogQLParser.DASH)
                            pass
                        elif token in [122]:
                            self.state = 976
                            localctx.operator = self.match(HogQLParser.CONCAT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 979
                        localctx.right = self.columnExpr(19)
                        pass

                    elif la_ == 3:
                        localctx = HogQLParser.ColumnExprPrecedence3Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 980
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1005
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                        if la_ == 1:
                            self.state = 981
                            localctx.operator = self.match(HogQLParser.EQ_DOUBLE)
                            pass

                        elif la_ == 2:
                            self.state = 982
                            localctx.operator = self.match(HogQLParser.EQ_SINGLE)
                            pass

                        elif la_ == 3:
                            self.state = 983
                            localctx.operator = self.match(HogQLParser.NOT_EQ)
                            pass

                        elif la_ == 4:
                            self.state = 984
                            localctx.operator = self.match(HogQLParser.LT_EQ)
                            pass

                        elif la_ == 5:
                            self.state = 985
                            localctx.operator = self.match(HogQLParser.LT)
                            pass

                        elif la_ == 6:
                            self.state = 986
                            localctx.operator = self.match(HogQLParser.GT_EQ)
                            pass

                        elif la_ == 7:
                            self.state = 987
                            localctx.operator = self.match(HogQLParser.GT)
                            pass

                        elif la_ == 8:
                            self.state = 989
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==62:
                                self.state = 988
                                localctx.operator = self.match(HogQLParser.NOT)


                            self.state = 991
                            self.match(HogQLParser.IN)
                            self.state = 993
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
                            if la_ == 1:
                                self.state = 992
                                self.match(HogQLParser.COHORT)


                            pass

                        elif la_ == 9:
                            self.state = 996
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==62:
                                self.state = 995
                                localctx.operator = self.match(HogQLParser.NOT)


                            self.state = 998
                            _la = self._input.LA(1)
                            if not(_la==44 or _la==57):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 10:
                            self.state = 999
                            localctx.operator = self.match(HogQLParser.REGEX_SINGLE)
                            pass

                        elif la_ == 11:
                            self.state = 1000
                            localctx.operator = self.match(HogQLParser.REGEX_DOUBLE)
                            pass

                        elif la_ == 12:
                            self.state = 1001
                            localctx.operator = self.match(HogQLParser.NOT_REGEX)
                            pass

                        elif la_ == 13:
                            self.state = 1002
                            localctx.operator = self.match(HogQLParser.IREGEX_SINGLE)
                            pass

                        elif la_ == 14:
                            self.state = 1003
                            localctx.operator = self.match(HogQLParser.IREGEX_DOUBLE)
                            pass

                        elif la_ == 15:
                            self.state = 1004
                            localctx.operator = self.match(HogQLParser.NOT_IREGEX)
                            pass


                        self.state = 1007
                        localctx.right = self.columnExpr(18)
                        pass

                    elif la_ == 4:
                        localctx = HogQLParser.ColumnExprNullishContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1008
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1009
                        self.match(HogQLParser.NULLISH)
                        self.state = 1010
                        self.columnExpr(16)
                        pass

                    elif la_ == 5:
                        localctx = HogQLParser.ColumnExprAndContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1011
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1012
                        self.match(HogQLParser.AND)
                        self.state = 1013
                        self.columnExpr(14)
                        pass

                    elif la_ == 6:
                        localctx = HogQLParser.ColumnExprOrContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1014
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1015
                        self.match(HogQLParser.OR)
                        self.state = 1016
                        self.columnExpr(13)
                        pass

                    elif la_ == 7:
                        localctx = HogQLParser.ColumnExprBetweenContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1017
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1019
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==62:
                            self.state = 1018
                            self.match(HogQLParser.NOT)


                        self.state = 1021
                        self.match(HogQLParser.BETWEEN)
                        self.state = 1022
                        self.columnExpr(0)
                        self.state = 1023
                        self.match(HogQLParser.AND)
                        self.state = 1024
                        self.columnExpr(12)
                        pass

                    elif la_ == 8:
                        localctx = HogQLParser.ColumnExprTernaryOpContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1026
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1027
                        self.match(HogQLParser.QUERY)
                        self.state = 1028
                        self.columnExpr(0)
                        self.state = 1029
                        self.match(HogQLParser.COLON)
                        self.state = 1030
                        self.columnExpr(10)
                        pass

                    elif la_ == 9:
                        localctx = HogQLParser.ColumnExprCallSelectContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1032
                        if not self.precpred(self._ctx, 31):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 31)")
                        self.state = 1033
                        self.match(HogQLParser.LPAREN)
                        self.state = 1034
                        self.selectSetStmt()
                        self.state = 1035
                        self.match(HogQLParser.RPAREN)
                        pass

                    elif la_ == 10:
                        localctx = HogQLParser.ColumnExprCallContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1037
                        if not self.precpred(self._ctx, 30):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 30)")
                        self.state = 1038
                        self.match(HogQLParser.LPAREN)
                        self.state = 1040
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -72339354898415618) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2895777159790460927) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 18455) != 0):
                            self.state = 1039
                            self.columnExprList()


                        self.state = 1042
                        self.match(HogQLParser.RPAREN)
                        pass

                    elif la_ == 11:
                        localctx = HogQLParser.ColumnExprArrayAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1043
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 1044
                        self.match(HogQLParser.LBRACKET)
                        self.state = 1045
                        self.columnExpr(0)
                        self.state = 1046
                        self.match(HogQLParser.RBRACKET)
                        pass

                    elif la_ == 12:
                        localctx = HogQLParser.ColumnExprTupleAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1048
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1049
                        self.match(HogQLParser.DOT)
                        self.state = 1050
                        self.match(HogQLParser.DECIMAL_LITERAL)
                        pass

                    elif la_ == 13:
                        localctx = HogQLParser.ColumnExprPropertyAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1051
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1052
                        self.match(HogQLParser.DOT)
                        self.state = 1053
                        self.identifier()
                        pass

                    elif la_ == 14:
                        localctx = HogQLParser.ColumnExprNullArrayAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1054
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 1055
                        self.match(HogQLParser.NULL_PROPERTY)
                        self.state = 1056
                        self.match(HogQLParser.LBRACKET)
                        self.state = 1057
                        self.columnExpr(0)
                        self.state = 1058
                        self.match(HogQLParser.RBRACKET)
                        pass

                    elif la_ == 15:
                        localctx = HogQLParser.ColumnExprNullTupleAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1060
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1061
                        self.match(HogQLParser.NULL_PROPERTY)
                        self.state = 1062
                        self.match(HogQLParser.DECIMAL_LITERAL)
                        pass

                    elif la_ == 16:
                        localctx = HogQLParser.ColumnExprNullPropertyAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1063
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1064
                        self.match(HogQLParser.NULL_PROPERTY)
                        self.state = 1065
                        self.identifier()
                        pass

                    elif la_ == 17:
                        localctx = HogQLParser.ColumnExprIsNullContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1066
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1067
                        self.match(HogQLParser.IS)
                        self.state = 1069
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==62:
                            self.state = 1068
                            self.match(HogQLParser.NOT)


                        self.state = 1071
                        self.match(HogQLParser.NULL_SQL)
                        pass

                    elif la_ == 18:
                        localctx = HogQLParser.ColumnExprAliasContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1072
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1077
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                        if la_ == 1:
                            self.state = 1073
                            self.match(HogQLParser.AS)
                            self.state = 1074
                            self.identifier()
                            pass

                        elif la_ == 2:
                            self.state = 1075
                            self.match(HogQLParser.AS)
                            self.state = 1076
                            self.match(HogQLParser.STRING_LITERAL)
                            pass


                        pass

             
                self.state = 1083
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,132,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ColumnLambdaExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROW(self):
            return self.getToken(HogQLParser.ARROW, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def block(self):
            return self.getTypedRuleContext(HogQLParser.BlockContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnLambdaExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnLambdaExpr" ):
                return visitor.visitColumnLambdaExpr(self)
            else:
                return visitor.visitChildren(self)




    def columnLambdaExpr(self):

        localctx = HogQLParser.ColumnLambdaExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_columnLambdaExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1111
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 1084
                self.match(HogQLParser.LPAREN)
                self.state = 1085
                self.identifier()
                self.state = 1090
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,133,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1086
                        self.match(HogQLParser.COMMA)
                        self.state = 1087
                        self.identifier() 
                    self.state = 1092
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

                self.state = 1094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121:
                    self.state = 1093
                    self.match(HogQLParser.COMMA)


                self.state = 1096
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.state = 1098
                self.identifier()
                self.state = 1103
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1099
                        self.match(HogQLParser.COMMA)
                        self.state = 1100
                        self.identifier() 
                    self.state = 1105
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

                self.state = 1107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121:
                    self.state = 1106
                    self.match(HogQLParser.COMMA)


                pass

            elif la_ == 3:
                self.state = 1109
                self.match(HogQLParser.LPAREN)
                self.state = 1110
                self.match(HogQLParser.RPAREN)
                pass


            self.state = 1113
            self.match(HogQLParser.ARROW)
            self.state = 1116
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.state = 1114
                self.columnExpr(0)
                pass

            elif la_ == 2:
                self.state = 1115
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HogqlxChildElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_hogqlxChildElement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHogqlxChildElement" ):
                return visitor.visitHogqlxChildElement(self)
            else:
                return visitor.visitChildren(self)




    def hogqlxChildElement(self):

        localctx = HogQLParser.HogqlxChildElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_hogqlxChildElement)
        try:
            self.state = 1123
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [137]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1118
                self.hogqlxTagElement()
                pass
            elif token in [133]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1119
                self.match(HogQLParser.LBRACE)
                self.state = 1120
                self.columnExpr(0)
                self.state = 1121
                self.match(HogQLParser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HogqlxTagElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_hogqlxTagElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class HogqlxTagElementClosedContext(HogqlxTagElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.HogqlxTagElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(HogQLParser.LT, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def GT(self):
            return self.getToken(HogQLParser.GT, 0)
        def hogqlxTagAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.HogqlxTagAttributeContext)
            else:
                return self.getTypedRuleContext(HogQLParser.HogqlxTagAttributeContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHogqlxTagElementClosed" ):
                return visitor.visitHogqlxTagElementClosed(self)
            else:
                return visitor.visitChildren(self)


    class HogqlxTagElementNestedContext(HogqlxTagElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.HogqlxTagElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LT)
            else:
                return self.getToken(HogQLParser.LT, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.GT)
            else:
                return self.getToken(HogQLParser.GT, i)
        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def hogqlxTagAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.HogqlxTagAttributeContext)
            else:
                return self.getTypedRuleContext(HogQLParser.HogqlxTagAttributeContext,i)

        def hogqlxChildElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.HogqlxChildElementContext)
            else:
                return self.getTypedRuleContext(HogQLParser.HogqlxChildElementContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHogqlxTagElementNested" ):
                return visitor.visitHogqlxTagElementNested(self)
            else:
                return visitor.visitChildren(self)



    def hogqlxTagElement(self):

        localctx = HogQLParser.HogqlxTagElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_hogqlxTagElement)
        self._la = 0 # Token type
        try:
            self.state = 1156
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.HogqlxTagElementClosedContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1125
                self.match(HogQLParser.LT)
                self.state = 1126
                self.identifier()
                self.state = 1130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 6845119303998488574) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 103336879587327) != 0):
                    self.state = 1127
                    self.hogqlxTagAttribute()
                    self.state = 1132
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1133
                self.match(HogQLParser.SLASH)
                self.state = 1134
                self.match(HogQLParser.GT)
                pass

            elif la_ == 2:
                localctx = HogQLParser.HogqlxTagElementNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1136
                self.match(HogQLParser.LT)
                self.state = 1137
                self.identifier()
                self.state = 1141
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 6845119303998488574) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 103336879587327) != 0):
                    self.state = 1138
                    self.hogqlxTagAttribute()
                    self.state = 1143
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1144
                self.match(HogQLParser.GT)
                self.state = 1148
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,142,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1145
                        self.hogqlxChildElement() 
                    self.state = 1150
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,142,self._ctx)

                self.state = 1151
                self.match(HogQLParser.LT)
                self.state = 1152
                self.match(HogQLParser.SLASH)
                self.state = 1153
                self.identifier()
                self.state = 1154
                self.match(HogQLParser.GT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HogqlxTagAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def string(self):
            return self.getTypedRuleContext(HogQLParser.StringContext,0)


        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_hogqlxTagAttribute

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHogqlxTagAttribute" ):
                return visitor.visitHogqlxTagAttribute(self)
            else:
                return visitor.visitChildren(self)




    def hogqlxTagAttribute(self):

        localctx = HogQLParser.HogqlxTagAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_hogqlxTagAttribute)
        try:
            self.state = 1169
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1158
                self.identifier()
                self.state = 1159
                self.match(HogQLParser.EQ_SINGLE)
                self.state = 1160
                self.string()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1162
                self.identifier()
                self.state = 1163
                self.match(HogQLParser.EQ_SINGLE)
                self.state = 1164
                self.match(HogQLParser.LBRACE)
                self.state = 1165
                self.columnExpr(0)
                self.state = 1166
                self.match(HogQLParser.RBRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1168
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WithExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WithExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_withExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprList" ):
                return visitor.visitWithExprList(self)
            else:
                return visitor.visitChildren(self)




    def withExprList(self):

        localctx = HogQLParser.WithExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_withExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1171
            self.withExpr()
            self.state = 1176
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1172
                    self.match(HogQLParser.COMMA)
                    self.state = 1173
                    self.withExpr() 
                self.state = 1178
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

            self.state = 1180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 1179
                self.match(HogQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_withExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WithExprColumnContext(WithExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WithExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprColumn" ):
                return visitor.visitWithExprColumn(self)
            else:
                return visitor.visitChildren(self)


    class WithExprSubqueryContext(WithExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WithExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectSetStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectSetStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprSubquery" ):
                return visitor.visitWithExprSubquery(self)
            else:
                return visitor.visitChildren(self)



    def withExpr(self):

        localctx = HogQLParser.WithExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_withExpr)
        try:
            self.state = 1192
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.WithExprSubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1182
                self.identifier()
                self.state = 1183
                self.match(HogQLParser.AS)
                self.state = 1184
                self.match(HogQLParser.LPAREN)
                self.state = 1185
                self.selectSetStmt()
                self.state = 1186
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = HogQLParser.WithExprColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1188
                self.columnExpr(0)
                self.state = 1189
                self.match(HogQLParser.AS)
                self.state = 1190
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def nestedIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.NestedIdentifierContext,0)


        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)


        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnIdentifier" ):
                return visitor.visitColumnIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def columnIdentifier(self):

        localctx = HogQLParser.ColumnIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_columnIdentifier)
        try:
            self.state = 1201
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [133]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1194
                self.placeholder()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1198
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                if la_ == 1:
                    self.state = 1195
                    self.tableIdentifier()
                    self.state = 1196
                    self.match(HogQLParser.DOT)


                self.state = 1200
                self.nestedIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.DOT)
            else:
                return self.getToken(HogQLParser.DOT, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_nestedIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedIdentifier" ):
                return visitor.visitNestedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def nestedIdentifier(self):

        localctx = HogQLParser.NestedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_nestedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            self.identifier()
            self.state = 1208
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1204
                    self.match(HogQLParser.DOT)
                    self.state = 1205
                    self.identifier() 
                self.state = 1210
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_tableExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class TableExprTagContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def hogqlxTagElement(self):
            return self.getTypedRuleContext(HogQLParser.HogqlxTagElementContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprTag" ):
                return visitor.visitTableExprTag(self)
            else:
                return visitor.visitChildren(self)


    class TableExprIdentifierContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprIdentifier" ):
                return visitor.visitTableExprIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class TableExprPlaceholderContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def placeholder(self):
            return self.getTypedRuleContext(HogQLParser.PlaceholderContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprPlaceholder" ):
                return visitor.visitTableExprPlaceholder(self)
            else:
                return visitor.visitChildren(self)


    class TableExprSubqueryContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectSetStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectSetStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprSubquery" ):
                return visitor.visitTableExprSubquery(self)
            else:
                return visitor.visitChildren(self)


    class TableExprAliasContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableExprContext,0)

        def alias(self):
            return self.getTypedRuleContext(HogQLParser.AliasContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprAlias" ):
                return visitor.visitTableExprAlias(self)
            else:
                return visitor.visitChildren(self)


    class TableExprFunctionContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableFunctionExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableFunctionExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprFunction" ):
                return visitor.visitTableExprFunction(self)
            else:
                return visitor.visitChildren(self)



    def tableExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.TableExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 142
        self.enterRecursionRule(localctx, 142, self.RULE_tableExpr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.TableExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1212
                self.tableIdentifier()
                pass

            elif la_ == 2:
                localctx = HogQLParser.TableExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1213
                self.tableFunctionExpr()
                pass

            elif la_ == 3:
                localctx = HogQLParser.TableExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1214
                self.match(HogQLParser.LPAREN)
                self.state = 1215
                self.selectSetStmt()
                self.state = 1216
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = HogQLParser.TableExprTagContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1218
                self.hogqlxTagElement()
                pass

            elif la_ == 5:
                localctx = HogQLParser.TableExprPlaceholderContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1219
                self.placeholder()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1230
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = HogQLParser.TableExprAliasContext(self, HogQLParser.TableExprContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_tableExpr)
                    self.state = 1222
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 1226
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [21, 32, 42, 52, 110]:
                        self.state = 1223
                        self.alias()
                        pass
                    elif token in [6]:
                        self.state = 1224
                        self.match(HogQLParser.AS)
                        self.state = 1225
                        self.identifier()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1232
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TableFunctionExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def tableArgList(self):
            return self.getTypedRuleContext(HogQLParser.TableArgListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_tableFunctionExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFunctionExpr" ):
                return visitor.visitTableFunctionExpr(self)
            else:
                return visitor.visitChildren(self)




    def tableFunctionExpr(self):

        localctx = HogQLParser.TableFunctionExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_tableFunctionExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1233
            self.identifier()
            self.state = 1234
            self.match(HogQLParser.LPAREN)
            self.state = 1236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -72339354898415618) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2895777159790460927) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 18455) != 0):
                self.state = 1235
                self.tableArgList()


            self.state = 1238
            self.match(HogQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.NestedIdentifierContext,0)


        def databaseIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.DatabaseIdentifierContext,0)


        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableIdentifier" ):
                return visitor.visitTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def tableIdentifier(self):

        localctx = HogQLParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.state = 1240
                self.databaseIdentifier()
                self.state = 1241
                self.match(HogQLParser.DOT)


            self.state = 1245
            self.nestedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableArgList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableArgList" ):
                return visitor.visitTableArgList(self)
            else:
                return visitor.visitChildren(self)




    def tableArgList(self):

        localctx = HogQLParser.TableArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_tableArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1247
            self.columnExpr(0)
            self.state = 1252
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,156,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1248
                    self.match(HogQLParser.COMMA)
                    self.state = 1249
                    self.columnExpr(0) 
                self.state = 1254
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

            self.state = 1256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 1255
                self.match(HogQLParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatabaseIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_databaseIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabaseIdentifier" ):
                return visitor.visitDatabaseIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def databaseIdentifier(self):

        localctx = HogQLParser.DatabaseIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_databaseIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatingLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOATING_LITERAL(self):
            return self.getToken(HogQLParser.FLOATING_LITERAL, 0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def DECIMAL_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.DECIMAL_LITERAL)
            else:
                return self.getToken(HogQLParser.DECIMAL_LITERAL, i)

        def OCTAL_LITERAL(self):
            return self.getToken(HogQLParser.OCTAL_LITERAL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_floatingLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatingLiteral" ):
                return visitor.visitFloatingLiteral(self)
            else:
                return visitor.visitChildren(self)




    def floatingLiteral(self):

        localctx = HogQLParser.FloatingLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_floatingLiteral)
        self._la = 0 # Token type
        try:
            self.state = 1268
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [111]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1260
                self.match(HogQLParser.FLOATING_LITERAL)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1261
                self.match(HogQLParser.DOT)
                self.state = 1262
                _la = self._input.LA(1)
                if not(_la==112 or _la==113):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1263
                self.match(HogQLParser.DECIMAL_LITERAL)
                self.state = 1264
                self.match(HogQLParser.DOT)
                self.state = 1266
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                if la_ == 1:
                    self.state = 1265
                    _la = self._input.LA(1)
                    if not(_la==112 or _la==113):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def floatingLiteral(self):
            return self.getTypedRuleContext(HogQLParser.FloatingLiteralContext,0)


        def OCTAL_LITERAL(self):
            return self.getToken(HogQLParser.OCTAL_LITERAL, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def HEXADECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.HEXADECIMAL_LITERAL, 0)

        def INF(self):
            return self.getToken(HogQLParser.INF, 0)

        def NAN_SQL(self):
            return self.getToken(HogQLParser.NAN_SQL, 0)

        def PLUS(self):
            return self.getToken(HogQLParser.PLUS, 0)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_numberLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberLiteral" ):
                return visitor.visitNumberLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numberLiteral(self):

        localctx = HogQLParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==123 or _la==144:
                self.state = 1270
                _la = self._input.LA(1)
                if not(_la==123 or _la==144):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 1273
                self.floatingLiteral()
                pass

            elif la_ == 2:
                self.state = 1274
                self.match(HogQLParser.OCTAL_LITERAL)
                pass

            elif la_ == 3:
                self.state = 1275
                self.match(HogQLParser.DECIMAL_LITERAL)
                pass

            elif la_ == 4:
                self.state = 1276
                self.match(HogQLParser.HEXADECIMAL_LITERAL)
                pass

            elif la_ == 5:
                self.state = 1277
                self.match(HogQLParser.INF)
                pass

            elif la_ == 6:
                self.state = 1278
                self.match(HogQLParser.NAN_SQL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_literal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = HogQLParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_literal)
        try:
            self.state = 1284
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46, 61, 111, 112, 113, 114, 123, 125, 144]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1281
                self.numberLiteral()
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1282
                self.match(HogQLParser.STRING_LITERAL)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1283
                self.match(HogQLParser.NULL_SQL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECOND(self):
            return self.getToken(HogQLParser.SECOND, 0)

        def MINUTE(self):
            return self.getToken(HogQLParser.MINUTE, 0)

        def HOUR(self):
            return self.getToken(HogQLParser.HOUR, 0)

        def DAY(self):
            return self.getToken(HogQLParser.DAY, 0)

        def WEEK(self):
            return self.getToken(HogQLParser.WEEK, 0)

        def MONTH(self):
            return self.getToken(HogQLParser.MONTH, 0)

        def QUARTER(self):
            return self.getToken(HogQLParser.QUARTER, 0)

        def YEAR(self):
            return self.getToken(HogQLParser.YEAR, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_interval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = HogQLParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1286
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1729384455937720320) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 17448304897) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def ANTI(self):
            return self.getToken(HogQLParser.ANTI, 0)

        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def ARRAY(self):
            return self.getToken(HogQLParser.ARRAY, 0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)

        def ASCENDING(self):
            return self.getToken(HogQLParser.ASCENDING, 0)

        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)

        def BOTH(self):
            return self.getToken(HogQLParser.BOTH, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def CASE(self):
            return self.getToken(HogQLParser.CASE, 0)

        def CAST(self):
            return self.getToken(HogQLParser.CAST, 0)

        def COHORT(self):
            return self.getToken(HogQLParser.COHORT, 0)

        def COLLATE(self):
            return self.getToken(HogQLParser.COLLATE, 0)

        def CREATE(self):
            return self.getToken(HogQLParser.CREATE, 0)

        def CROSS(self):
            return self.getToken(HogQLParser.CROSS, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(HogQLParser.CURRENT, 0)

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def DESC(self):
            return self.getToken(HogQLParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(HogQLParser.DESCENDING, 0)

        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)

        def END(self):
            return self.getToken(HogQLParser.END, 0)

        def EXTRACT(self):
            return self.getToken(HogQLParser.EXTRACT, 0)

        def FINAL(self):
            return self.getToken(HogQLParser.FINAL, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def FOLLOWING(self):
            return self.getToken(HogQLParser.FOLLOWING, 0)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def FULL(self):
            return self.getToken(HogQLParser.FULL, 0)

        def GROUP(self):
            return self.getToken(HogQLParser.GROUP, 0)

        def HAVING(self):
            return self.getToken(HogQLParser.HAVING, 0)

        def ID(self):
            return self.getToken(HogQLParser.ID, 0)

        def IS(self):
            return self.getToken(HogQLParser.IS, 0)

        def IF(self):
            return self.getToken(HogQLParser.IF, 0)

        def ILIKE(self):
            return self.getToken(HogQLParser.ILIKE, 0)

        def IN(self):
            return self.getToken(HogQLParser.IN, 0)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def KEY(self):
            return self.getToken(HogQLParser.KEY, 0)

        def LAST(self):
            return self.getToken(HogQLParser.LAST, 0)

        def LEADING(self):
            return self.getToken(HogQLParser.LEADING, 0)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def LIKE(self):
            return self.getToken(HogQLParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def NULLS(self):
            return self.getToken(HogQLParser.NULLS, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def ON(self):
            return self.getToken(HogQLParser.ON, 0)

        def OR(self):
            return self.getToken(HogQLParser.OR, 0)

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(HogQLParser.PARTITION, 0)

        def PRECEDING(self):
            return self.getToken(HogQLParser.PRECEDING, 0)

        def PREWHERE(self):
            return self.getToken(HogQLParser.PREWHERE, 0)

        def RANGE(self):
            return self.getToken(HogQLParser.RANGE, 0)

        def RETURN(self):
            return self.getToken(HogQLParser.RETURN, 0)

        def RIGHT(self):
            return self.getToken(HogQLParser.RIGHT, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(HogQLParser.ROW, 0)

        def ROWS(self):
            return self.getToken(HogQLParser.ROWS, 0)

        def SAMPLE(self):
            return self.getToken(HogQLParser.SAMPLE, 0)

        def SELECT(self):
            return self.getToken(HogQLParser.SELECT, 0)

        def SEMI(self):
            return self.getToken(HogQLParser.SEMI, 0)

        def SETTINGS(self):
            return self.getToken(HogQLParser.SETTINGS, 0)

        def SUBSTRING(self):
            return self.getToken(HogQLParser.SUBSTRING, 0)

        def TABLE(self):
            return self.getToken(HogQLParser.TABLE, 0)

        def THEN(self):
            return self.getToken(HogQLParser.THEN, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def TIMESTAMP(self):
            return self.getToken(HogQLParser.TIMESTAMP, 0)

        def TOTALS(self):
            return self.getToken(HogQLParser.TOTALS, 0)

        def TRAILING(self):
            return self.getToken(HogQLParser.TRAILING, 0)

        def TRIM(self):
            return self.getToken(HogQLParser.TRIM, 0)

        def TRUNCATE(self):
            return self.getToken(HogQLParser.TRUNCATE, 0)

        def TO(self):
            return self.getToken(HogQLParser.TO, 0)

        def TOP(self):
            return self.getToken(HogQLParser.TOP, 0)

        def UNBOUNDED(self):
            return self.getToken(HogQLParser.UNBOUNDED, 0)

        def UNION(self):
            return self.getToken(HogQLParser.UNION, 0)

        def USING(self):
            return self.getToken(HogQLParser.USING, 0)

        def WHEN(self):
            return self.getToken(HogQLParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(HogQLParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(HogQLParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_keyword

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword" ):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)




    def keyword(self):

        localctx = HogQLParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 5115734848060768254) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 15101071195135) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordForAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def ID(self):
            return self.getToken(HogQLParser.ID, 0)

        def KEY(self):
            return self.getToken(HogQLParser.KEY, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_keywordForAlias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeywordForAlias" ):
                return visitor.visitKeywordForAlias(self)
            else:
                return visitor.visitChildren(self)




    def keywordForAlias(self):

        localctx = HogQLParser.KeywordForAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_keywordForAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1290
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4508001970946048) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def keywordForAlias(self):
            return self.getTypedRuleContext(HogQLParser.KeywordForAliasContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_alias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias" ):
                return visitor.visitAlias(self)
            else:
                return visitor.visitChildren(self)




    def alias(self):

        localctx = HogQLParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_alias)
        try:
            self.state = 1294
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [110]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1292
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [21, 32, 42, 52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1293
                self.keywordForAlias()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)


        def keyword(self):
            return self.getTypedRuleContext(HogQLParser.KeywordContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = HogQLParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_identifier)
        try:
            self.state = 1299
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [110]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1296
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [22, 41, 59, 60, 74, 82, 102, 108]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1297
                self.interval()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 32, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 103, 104, 106, 107]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1298
                self.keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(HogQLParser.StringContext,0)


        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_enumValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValue" ):
                return visitor.visitEnumValue(self)
            else:
                return visitor.visitChildren(self)




    def enumValue(self):

        localctx = HogQLParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1301
            self.string()
            self.state = 1302
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 1303
            self.numberLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceholderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_placeholder

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlaceholder" ):
                return visitor.visitPlaceholder(self)
            else:
                return visitor.visitChildren(self)




    def placeholder(self):

        localctx = HogQLParser.PlaceholderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_placeholder)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self.match(HogQLParser.LBRACE)
            self.state = 1306
            self.columnExpr(0)
            self.state = 1307
            self.match(HogQLParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def templateString(self):
            return self.getTypedRuleContext(HogQLParser.TemplateStringContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_string

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = HogQLParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_string)
        try:
            self.state = 1311
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1309
                self.match(HogQLParser.STRING_LITERAL)
                pass
            elif token in [147]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1310
                self.templateString()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTE_SINGLE_TEMPLATE(self):
            return self.getToken(HogQLParser.QUOTE_SINGLE_TEMPLATE, 0)

        def QUOTE_SINGLE(self):
            return self.getToken(HogQLParser.QUOTE_SINGLE, 0)

        def stringContents(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.StringContentsContext)
            else:
                return self.getTypedRuleContext(HogQLParser.StringContentsContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_templateString

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateString" ):
                return visitor.visitTemplateString(self)
            else:
                return visitor.visitChildren(self)




    def templateString(self):

        localctx = HogQLParser.TemplateStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_templateString)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1313
            self.match(HogQLParser.QUOTE_SINGLE_TEMPLATE)
            self.state = 1317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==161 or _la==162:
                self.state = 1314
                self.stringContents()
                self.state = 1319
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1320
            self.match(HogQLParser.QUOTE_SINGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_ESCAPE_TRIGGER(self):
            return self.getToken(HogQLParser.STRING_ESCAPE_TRIGGER, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def STRING_TEXT(self):
            return self.getToken(HogQLParser.STRING_TEXT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_stringContents

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringContents" ):
                return visitor.visitStringContents(self)
            else:
                return visitor.visitChildren(self)




    def stringContents(self):

        localctx = HogQLParser.StringContentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_stringContents)
        try:
            self.state = 1327
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [162]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1322
                self.match(HogQLParser.STRING_ESCAPE_TRIGGER)
                self.state = 1323
                self.columnExpr(0)
                self.state = 1324
                self.match(HogQLParser.RBRACE)
                pass
            elif token in [161]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1326
                self.match(HogQLParser.STRING_TEXT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullTemplateStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTE_SINGLE_TEMPLATE_FULL(self):
            return self.getToken(HogQLParser.QUOTE_SINGLE_TEMPLATE_FULL, 0)

        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def stringContentsFull(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.StringContentsFullContext)
            else:
                return self.getTypedRuleContext(HogQLParser.StringContentsFullContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_fullTemplateString

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFullTemplateString" ):
                return visitor.visitFullTemplateString(self)
            else:
                return visitor.visitChildren(self)




    def fullTemplateString(self):

        localctx = HogQLParser.FullTemplateStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_fullTemplateString)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1329
            self.match(HogQLParser.QUOTE_SINGLE_TEMPLATE_FULL)
            self.state = 1333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==163 or _la==164:
                self.state = 1330
                self.stringContentsFull()
                self.state = 1335
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1336
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContentsFullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FULL_STRING_ESCAPE_TRIGGER(self):
            return self.getToken(HogQLParser.FULL_STRING_ESCAPE_TRIGGER, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def FULL_STRING_TEXT(self):
            return self.getToken(HogQLParser.FULL_STRING_TEXT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_stringContentsFull

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringContentsFull" ):
                return visitor.visitStringContentsFull(self)
            else:
                return visitor.visitChildren(self)




    def stringContentsFull(self):

        localctx = HogQLParser.StringContentsFullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_stringContentsFull)
        try:
            self.state = 1343
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [164]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1338
                self.match(HogQLParser.FULL_STRING_ESCAPE_TRIGGER)
                self.state = 1339
                self.columnExpr(0)
                self.state = 1340
                self.match(HogQLParser.RBRACE)
                pass
            elif token in [163]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1342
                self.match(HogQLParser.FULL_STRING_TEXT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[42] = self.joinExpr_sempred
        self._predicates[62] = self.columnExpr_sempred
        self._predicates[71] = self.tableExpr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def joinExpr_sempred(self, localctx:JoinExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 4)
         

    def columnExpr_sempred(self, localctx:ColumnExprContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 31)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 30)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 9)
         

    def tableExpr_sempred(self, localctx:TableExprContext, predIndex:int):
            if predIndex == 20:
                return self.precpred(self._ctx, 3)
         




