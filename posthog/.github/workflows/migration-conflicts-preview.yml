name: Migration Conflicts - Preview

on:
    workflow_dispatch:
        inputs:
            app_filter:
                description: 'Specific app to check (optional, e.g., "posthog", "billing")'
                required: false
                type: string
    issue_comment:
        types: [created]
    repository_dispatch:
        types: [test-preview]

jobs:
    preview-migration-fixes:
        runs-on: ubuntu-latest
        if: |
            (github.event_name == 'workflow_dispatch') ||
            (github.event_name == 'issue_comment' && 
             github.event.issue.pull_request && 
             contains(github.event.comment.body, '/preview-migrations') &&
             github.event.issue.pull_request.head.ref == 'yasen/feat/migrations-conflict-resolution-in-ci') ||
            (github.event_name == 'repository_dispatch' && github.event.action == 'test-preview' && github.event.client_payload.branch == 'yasen/feat/migrations-conflict-resolution-in-ci')

        steps:
            - name: Extract app filter from comment
              if: github.event_name == 'issue_comment'
              id: extract_params
              run: |
                  COMMENT="${{ github.event.comment.body }}"
                  if echo "$COMMENT" | grep -q '\-\-app'; then
                    APP_FILTER=$(echo "$COMMENT" | grep -o '\-\-app [^[:space:]]*' | cut -d' ' -f2)
                    echo "app_filter=$APP_FILTER" >> $GITHUB_OUTPUT
                  else
                    echo "app_filter=" >> $GITHUB_OUTPUT
                  fi

            - name: React to comment
              if: github.event_name == 'issue_comment'
              uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6
              with:
                  script: |
                      await github.rest.reactions.createForIssueComment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        comment_id: context.payload.comment.id,
                        content: 'eyes'
                      });

            - name: Checkout PR code
              uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}
                  ref: |
                      ${{ 
                        github.event_name == 'issue_comment' && format('refs/pull/{0}/head', github.event.issue.number) || 
                        github.event_name == 'repository_dispatch' && github.event.client_payload.branch ||
                        github.ref 
                      }}

            - name: Set up Python
              uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5
              with:
                  python-version: '3.11'

            - name: Fetch master branch
              run: git fetch origin master:master

            - name: Run migration conflict detection and preview
              id: preview
              run: |
                  APP_FILTER=""
                  if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
                    APP_FILTER="${{ inputs.app_filter }}"
                  elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
                    APP_FILTER="${{ github.event.client_payload.app_filter }}"
                  else
                    APP_FILTER="${{ steps.extract_params.outputs.app_filter }}"
                  fi

                  OUTPUT=$(python bin/fix-migration-conflicts.py --preview ${APP_FILTER:+--app "$APP_FILTER"} 2>&1)
                  echo "$OUTPUT" > ../migration_preview.txt

                  if echo "$OUTPUT" | grep -q "CONFLICT DETECTED"; then
                    echo "conflicts_found=true" >> $GITHUB_OUTPUT
                  else
                    echo "conflicts_found=false" >> $GITHUB_OUTPUT
                  fi

                  echo "app_filter=$APP_FILTER" >> $GITHUB_OUTPUT

            - name: Create PR comment with preview
              if: steps.preview.outputs.conflicts_found == 'true'
              uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6
              with:
                  script: |
                      const fs = require('fs');
                      const previewOutput = fs.readFileSync('../migration_preview.txt', 'utf8');

                      const appFilter = '${{ steps.preview.outputs.app_filter }}';
                      const appText = appFilter ? ` --app ${appFilter}` : '';

                      let issueNumber;
                      if (context.eventName === 'repository_dispatch') {
                        issueNumber = context.payload.client_payload.pr_number || 34406;
                      } else {
                        issueNumber = context.payload.issue?.number || context.payload.pull_request?.number;
                      }

                      const comment = `## ðŸ”§ Migration conflicts preview

                      Preview of fixes for migration conflicts:

                      <details>
                      <summary>Details</summary>

                      \`\`\`
                      ${previewOutput}
                      \`\`\`
                      </details>

                      **Apply fixes:** Comment \`/fix-migrations${appText}\` to apply these changes.`;

                      const comments = await github.rest.issues.listComments({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: issueNumber,
                      });

                      const botComment = comments.data.find(comment => 
                        comment.user.type === 'Bot' && 
                        (comment.body.includes('Migration conflicts preview') || comment.body.includes('Migration conflicts detected'))
                      );

                      if (botComment) {
                        await github.rest.issues.updateComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          comment_id: botComment.id,
                          body: comment
                        });
                      } else {
                        await github.rest.issues.createComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: issueNumber,
                          body: comment
                        });
                      }

            - name: Create PR comment when no conflicts found
              if: steps.preview.outputs.conflicts_found == 'false'
              uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6
              with:
                  script: |
                      const appFilter = '${{ steps.preview.outputs.app_filter }}';
                      const appText = appFilter ? ` for app "${appFilter}"` : '';

                      let issueNumber;
                      if (context.eventName === 'repository_dispatch') {
                        issueNumber = context.payload.client_payload.pr_number || 34406;
                      } else {
                        issueNumber = context.payload.issue?.number || context.payload.pull_request?.number;
                      }

                      const comment = `## âœ… No migration conflicts found

                      No migration conflicts detected${appText}. Your migrations should merge cleanly.`;

                      await github.rest.issues.createComment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: issueNumber,
                        body: comment
                      });

            - name: Add success reaction
              if: github.event_name == 'issue_comment'
              uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6
              with:
                  script: |
                      await github.rest.reactions.createForIssueComment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        comment_id: context.payload.comment.id,
                        content: 'rocket'
                      });
