# Generated by Django 4.2.18 on 2025-05-26 09:56

from django.db import migrations
from django.conf import settings


def get_person_autovacuum_params():
    # Default values for person table
    params = {}

    # Adjust based on deployment
    deployment = settings.CLOUD_DEPLOYMENT

    if not deployment:
        return params

    if deployment == "DEV":
        params.update(
            {
                "vacuum_scale_factor": 0.001,
                "analyze_scale_factor": 0.01,
                "vacuum_threshold": 100000,
                "analyze_threshold": 100000,
                "vacuum_insert_scale_factor": 0.01,
                "vacuum_insert_threshold": 100000,
                "vacuum_cost_limit": 1000,
                "vacuum_cost_delay": 1,
            }
        )
    elif deployment == "EU":
        params.update(
            {
                "vacuum_scale_factor": 0.001,
                "vacuum_threshold": 10000,
                "analyze_scale_factor": 0.001,
                "analyze_threshold": 10000,
                "vacuum_insert_scale_factor": 0.001,
                "vacuum_insert_threshold": 10000,
                "vacuum_cost_limit": 8000,
                "vacuum_cost_delay": 1,
            }
        )
    elif deployment == "US":
        params.update(
            {
                "vacuum_scale_factor": 0.001,
                "vacuum_threshold": 10000,
                "analyze_scale_factor": 0.001,
                "analyze_threshold": 10000,
                "vacuum_insert_scale_factor": 0.001,
                "vacuum_insert_threshold": 10000,
                "vacuum_cost_limit": 10000,
                "vacuum_cost_delay": 1,
            }
        )

    return params


def get_persondistinctid_autovacuum_params():
    # Default values for persondistinctid table
    params = {}

    # Adjust based on deployment
    deployment = settings.CLOUD_DEPLOYMENT

    if not deployment:
        return params

    if deployment == "DEV":
        params.update(
            {
                "vacuum_scale_factor": 0.01,
                "analyze_scale_factor": 0.01,
                "vacuum_threshold": 100000,
                "analyze_threshold": 100000,
                "vacuum_insert_scale_factor": 0.01,
                "vacuum_insert_threshold": 100000,
                "vacuum_cost_limit": 1000,
                "vacuum_cost_delay": 1,
            }
        )
    elif deployment == "EU":
        params.update(
            {
                "vacuum_scale_factor": 0.001,
                "vacuum_threshold": 10000,
                "analyze_scale_factor": 0.001,
                "analyze_threshold": 10000,
                "vacuum_insert_scale_factor": 0.001,
                "vacuum_insert_threshold": 10000,
                "vacuum_cost_limit": 8000,
                "vacuum_cost_delay": 0,
            }
        )
    elif deployment == "US":
        params.update(
            {
                "vacuum_scale_factor": 0.001,
                "vacuum_threshold": 10000,
                "analyze_scale_factor": 0.001,
                "analyze_threshold": 10000,
                "vacuum_insert_scale_factor": 0.001,
                "vacuum_insert_threshold": 10000,
                "vacuum_cost_limit": 10000,
                "vacuum_cost_delay": 0,
            }
        )

    return params


def build_autovacuum_sql(params):
    settings = []
    for key, value in params.items():
        settings.append(f"autovacuum_{key} = {value}")
    return ", ".join(settings)


def get_person_sql():
    params = get_person_autovacuum_params()
    if not params:
        return ""
    return f"""
    ALTER TABLE posthog_person SET (
        {build_autovacuum_sql(params)}
    );
    """


def get_persondistinctid_sql():
    params = get_persondistinctid_autovacuum_params()
    if not params:
        return ""
    return f"""
    ALTER TABLE posthog_persondistinctid SET (
        {build_autovacuum_sql(params)}
    );
    """


class Migration(migrations.Migration):
    dependencies = [
        ("posthog", "0739_teamrevenueanalyticsconfig__goals"),
    ]

    operations = [
        migrations.RunSQL(
            sql=get_person_sql(),
            reverse_sql="""
            ALTER TABLE posthog_person RESET (
                autovacuum_vacuum_scale_factor,
                autovacuum_vacuum_threshold,
                autovacuum_analyze_scale_factor,
                autovacuum_analyze_threshold,
                autovacuum_vacuum_insert_scale_factor,
                autovacuum_vacuum_insert_threshold,
                autovacuum_vacuum_cost_limit,
                autovacuum_vacuum_cost_delay
            );
            """,
        ),
        migrations.RunSQL(
            sql=get_persondistinctid_sql(),
            reverse_sql="""
            ALTER TABLE posthog_persondistinctid RESET (
                autovacuum_vacuum_scale_factor,
                autovacuum_vacuum_threshold,
                autovacuum_analyze_scale_factor,
                autovacuum_analyze_threshold,
                autovacuum_vacuum_insert_scale_factor,
                autovacuum_vacuum_insert_threshold,
                autovacuum_vacuum_cost_limit,
                autovacuum_vacuum_cost_delay
            );
            """,
        ),
    ]
