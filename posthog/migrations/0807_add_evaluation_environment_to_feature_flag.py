# Generated by Django 4.2.22 on 2025-07-25 22:18

from django.db import migrations, models


def backfill_evaluation_environment(apps, schema_editor):
    """Backfill evaluation_environment field in batches to avoid locking"""
    FeatureFlag = apps.get_model("posthog", "FeatureFlag")

    batch_size = 1000
    total_updated = 0

    while True:
        # Get batch of records where evaluation_environment is NULL
        batch_ids = list(
            FeatureFlag.objects.filter(evaluation_environment__isnull=True).values_list("id", flat=True)[:batch_size]
        )

        if not batch_ids:
            break

        # Update this batch
        updated_count = FeatureFlag.objects.filter(id__in=batch_ids).update(evaluation_environment="all")
        total_updated += updated_count

        # If we updated fewer than batch_size, we're done
        if updated_count < batch_size:
            break


def reverse_backfill_evaluation_environment(apps, schema_editor):
    """Reverse migration - set all values back to NULL"""
    FeatureFlag = apps.get_model("posthog", "FeatureFlag")
    FeatureFlag.objects.all().update(evaluation_environment=None)


class Migration(migrations.Migration):
    dependencies = [
        ("posthog", "0806_scheduledchange_failure_count_and_more"),
    ]

    operations = [
        # Step 1: Add nullable column
        migrations.AddField(
            model_name="featureflag",
            name="evaluation_environment",
            field=models.CharField(
                choices=[("server", "Server"), ("client", "Client"), ("all", "All")],
                null=True,
                blank=True,
                help_text="Specifies where this feature flag should be evaluated",
                max_length=10,
            ),
        ),
        # Step 2: Backfill data in batches
        migrations.RunPython(
            backfill_evaluation_environment,
            reverse_backfill_evaluation_environment,
        ),
        # Step 3: Add default (keep nullable to avoid table locks)
        migrations.AlterField(
            model_name="featureflag",
            name="evaluation_environment",
            field=models.CharField(
                choices=[("server", "Server"), ("client", "Client"), ("all", "All")],
                default="all",
                null=True,
                blank=True,
                help_text="Specifies where this feature flag should be evaluated",
                max_length=10,
            ),
        ),
    ]
