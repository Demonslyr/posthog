# serializer version: 1
# name: TestInsightActorsQueryRunner.test_insight_persons_funnels_query
  '''
  SELECT name AS name
  FROM
    (SELECT persons.properties___name AS name
     FROM
       (SELECT aggregation_target AS actor_id
        FROM
          (SELECT arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), uuid, [], arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1)])))) AS events_array,
                  arrayJoin(aggregate_funnel_array_v4(2, 1209600, 'first_touch', 'ordered', [[]], arrayFilter((x, x_before, x_after) -> not(and(ifNull(lessOrEquals(length(x.4), 1), 0), ifNull(equals(x.4, x_before.4), isNull(x.4)
                                                                                                                                                                                                and isNull(x_before.4)), ifNull(equals(x.4, x_after.4), isNull(x.4)
                                                                                                                                                                                                                                and isNull(x_after.4)), ifNull(equals(x.3, x_before.3), isNull(x.3)
                                                                                                                                                                                                                                                               and isNull(x_before.3)), ifNull(equals(x.3, x_after.3), isNull(x.3)
                                                                                                                                                                                                                                                                                               and isNull(x_after.3)), ifNull(greater(x.1, x_before.1), 0), ifNull(less(x.1, x_after.1), 0))), events_array, arrayRotateRight(events_array, 1), arrayRotateLeft(events_array, 1)))) AS af_tuple,
                  af_tuple.1 AS step_reached,
                  plus(af_tuple.1, 1) AS steps,
                  af_tuple.2 AS breakdown,
                  af_tuple.3 AS timings,
                  aggregation_target AS aggregation_target
           FROM
             (SELECT toTimeZone(e.timestamp, 'US/Pacific') AS timestamp,
                     if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                     e.uuid AS uuid,
                     e.`$session_id` AS `$session_id`,
                     e.`$window_id` AS `$window_id`,
                     if(equals(e.event, '$pageview'), 1, 0) AS step_0,
                     if(equals(e.event, '$pageview'), 1, 0) AS step_1
              FROM events AS e
              LEFT OUTER JOIN
                (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                        person_distinct_id_overrides.distinct_id AS distinct_id
                 FROM person_distinct_id_overrides
                 WHERE equals(person_distinct_id_overrides.team_id, 99999)
                 GROUP BY person_distinct_id_overrides.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
              WHERE and(equals(e.team_id, 99999), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'US/Pacific'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'US/Pacific')), lessOrEquals(toTimeZone(e.timestamp, 'US/Pacific'), toDateTime64('2020-01-19 23:59:59.999999', 6, 'US/Pacific'))), in(e.event, tuple('$pageview'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0))))
           GROUP BY aggregation_target
           HAVING ifNull(greaterOrEquals(step_reached, 0), 0))
        WHERE ifNull(greaterOrEquals(step_reached, 1), 0)
        ORDER BY aggregation_target ASC SETTINGS join_algorithm='auto') AS source
     INNER JOIN
       (SELECT person.id AS id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'name'), ''), 'null'), '^"|"$', '') AS properties___name
        FROM person
        WHERE and(equals(person.team_id, 99999), ifNull(in(tuple(person.id, person.version),
                                                             (SELECT person.id AS id, max(person.version) AS version
                                                              FROM person
                                                              WHERE equals(person.team_id, 99999)
                                                              GROUP BY person.id
                                                              HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'US/Pacific'), person.version), plus(now64(6, 'US/Pacific'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS persons ON equals(persons.id, source.actor_id)
     ORDER BY persons.properties___name ASC SETTINGS optimize_aggregation_in_order=1,
                                                     join_algorithm='auto')
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0
  '''
# ---
# name: TestInsightActorsQueryRunner.test_insight_persons_lifecycle_query
  '''
  SELECT n AS n
  FROM
    (SELECT persons.properties___name AS n
     FROM
       (SELECT DISTINCT actor_id AS actor_id
        FROM
          (SELECT min(events__person.created_at) AS created_at,
                  arraySort(groupUniqArray(toStartOfDay(toTimeZone(events.timestamp, 'US/Pacific')))) AS all_activity,
                  arrayPopBack(arrayPushFront(all_activity, toStartOfDay(created_at))) AS previous_activity,
                  arrayPopFront(arrayPushBack(all_activity, toStartOfDay(toDateTime64('1970-01-01 00:00:00', 6, 'US/Pacific')))) AS following_activity,
                  arrayMap((previous, current, index) -> if(ifNull(equals(previous, current), isNull(previous)
                                                                   and isNull(current)), 'new', if(and(ifNull(equals(minus(current, toIntervalDay(1)), previous), isNull(minus(current, toIntervalDay(1)))
                                                                                                              and isNull(previous)), ifNull(notEquals(index, 1), 1)), 'returning', 'resurrecting')), previous_activity, all_activity, arrayEnumerate(all_activity)) AS initial_status,
                  arrayMap((current, next) -> if(ifNull(equals(plus(current, toIntervalDay(1)), next), isNull(plus(current, toIntervalDay(1)))
                                                        and isNull(next)), '', 'dormant'), all_activity, following_activity) AS dormant_status,
                  arrayMap(x -> plus(x, toIntervalDay(1)), arrayFilter((current, is_dormant) -> ifNull(equals(is_dormant, 'dormant'), 0), all_activity, dormant_status)) AS dormant_periods,
                  arrayMap(x -> 'dormant', dormant_periods) AS dormant_label,
                  arrayConcat(arrayZip(all_activity, initial_status), arrayZip(dormant_periods, dormant_label)) AS temp_concat,
                  arrayJoin(temp_concat) AS period_status_pairs,
                  period_status_pairs.1 AS start_of_period,
                  period_status_pairs.2 AS status,
                  if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS actor_id
           FROM events
           LEFT OUTER JOIN
             (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                     person_distinct_id_overrides.distinct_id AS distinct_id
              FROM person_distinct_id_overrides
              WHERE equals(person_distinct_id_overrides.team_id, 99999)
              GROUP BY person_distinct_id_overrides.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
           LEFT JOIN
             (SELECT argMax(toTimeZone(person.created_at, 'US/Pacific'), person.version) AS created_at,
                     person.id AS id
              FROM person
              WHERE equals(person.team_id, 99999)
              GROUP BY person.id
              HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'US/Pacific'), person.version), plus(now64(6, 'US/Pacific'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id), events__person.id)
           WHERE and(equals(events.team_id, 99999), ifNull(notEquals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$process_person_profile'), ''), 'null'), '^"|"$', ''), 'false'), 1), greaterOrEquals(toTimeZone(events.timestamp, 'US/Pacific'), minus(toStartOfDay(assumeNotNull(toDateTime64('2020-01-09 00:00:00', 6, 'US/Pacific'))), toIntervalDay(1))), less(toTimeZone(events.timestamp, 'US/Pacific'), plus(toStartOfDay(assumeNotNull(toDateTime64('2020-01-19 23:59:59', 6, 'US/Pacific'))), toIntervalDay(1))), equals(events.event, '$pageview'))
           GROUP BY actor_id)
        WHERE and(ifNull(equals(start_of_period, toStartOfDay(toDateTime64('2020-01-12', 6, 'US/Pacific'))), isNull(start_of_period)
                         and isNull(toStartOfDay(toDateTime64('2020-01-12', 6, 'US/Pacific')))), ifNull(equals(status, 'returning'), 0))) AS source
     INNER JOIN
       (SELECT person.id AS id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'name'), ''), 'null'), '^"|"$', '') AS properties___name
        FROM person
        WHERE and(equals(person.team_id, 99999), in(tuple(person.id, person.version),
                                                      (SELECT person.id AS id, max(person.version) AS version
                                                       FROM person
                                                       WHERE and(equals(person.team_id, 99999), in(person.id,
                                                                                                     (SELECT source.actor_id AS actor_id
                                                                                                      FROM
                                                                                                        (SELECT DISTINCT actor_id AS actor_id
                                                                                                         FROM
                                                                                                           (SELECT min(events__person.created_at) AS created_at, arraySort(groupUniqArray(toStartOfDay(toTimeZone(events.timestamp, 'US/Pacific')))) AS all_activity, arrayPopBack(arrayPushFront(all_activity, toStartOfDay(created_at))) AS previous_activity, arrayPopFront(arrayPushBack(all_activity, toStartOfDay(toDateTime64('1970-01-01 00:00:00', 6, 'US/Pacific')))) AS following_activity, arrayMap((previous, current, index) -> if(ifNull(equals(previous, current), isNull(previous)
and isNull(current)), 'new', if(and(ifNull(equals(minus(current, toIntervalDay(1)), previous), isNull(minus(current, toIntervalDay(1)))
and isNull(previous)), ifNull(notEquals(index, 1), 1)), 'returning', 'resurrecting')), previous_activity, all_activity, arrayEnumerate(all_activity)) AS initial_status, arrayMap((current, next) -> if(ifNull(equals(plus(current, toIntervalDay(1)), next), isNull(plus(current, toIntervalDay(1)))
and isNull(next)), '', 'dormant'), all_activity, following_activity) AS dormant_status, arrayMap(x -> plus(x, toIntervalDay(1)), arrayFilter((current, is_dormant) -> ifNull(equals(is_dormant, 'dormant'), 0), all_activity, dormant_status)) AS dormant_periods, arrayMap(x -> 'dormant', dormant_periods) AS dormant_label, arrayConcat(arrayZip(all_activity, initial_status), arrayZip(dormant_periods, dormant_label)) AS temp_concat, arrayJoin(temp_concat) AS period_status_pairs, period_status_pairs.1 AS start_of_period, period_status_pairs.2 AS status, if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id) AS actor_id
                                                                                                            FROM events
                                                                                                            LEFT OUTER JOIN
                                                                                                              (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id, person_distinct_id_overrides.distinct_id AS distinct_id
                                                                                                               FROM person_distinct_id_overrides
                                                                                                               WHERE equals(person_distinct_id_overrides.team_id, 99999)
                                                                                                               GROUP BY person_distinct_id_overrides.distinct_id
                                                                                                               HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
                                                                                                            LEFT JOIN
                                                                                                              (SELECT argMax(toTimeZone(person.created_at, 'US/Pacific'), person.version) AS created_at, person.id AS id
                                                                                                               FROM person
                                                                                                               WHERE equals(person.team_id, 99999)
                                                                                                               GROUP BY person.id
                                                                                                               HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'US/Pacific'), person.version), plus(now64(6, 'US/Pacific'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id), events__person.id)
                                                                                                            WHERE and(equals(events.team_id, 99999), ifNull(notEquals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$process_person_profile'), ''), 'null'), '^"|"$', ''), 'false'), 1), greaterOrEquals(toTimeZone(events.timestamp, 'US/Pacific'), minus(toStartOfDay(assumeNotNull(toDateTime64('2020-01-09 00:00:00', 6, 'US/Pacific'))), toIntervalDay(1))), less(toTimeZone(events.timestamp, 'US/Pacific'), plus(toStartOfDay(assumeNotNull(toDateTime64('2020-01-19 23:59:59', 6, 'US/Pacific'))), toIntervalDay(1))), equals(events.event, '$pageview'))
                                                                                                            GROUP BY actor_id)
                                                                                                         WHERE and(ifNull(equals(start_of_period, toStartOfDay(toDateTime64('2020-01-12', 6, 'US/Pacific'))), isNull(start_of_period)
                                                                                                                          and isNull(toStartOfDay(toDateTime64('2020-01-12', 6, 'US/Pacific')))), ifNull(equals(status, 'returning'), 0))) AS source)))
                                                       GROUP BY person.id
                                                       HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'US/Pacific'), person.version), plus(now64(6, 'US/Pacific'), toIntervalDay(1))), 0))))) SETTINGS optimize_aggregation_in_order=1) AS persons ON equals(persons.id, source.actor_id)
     ORDER BY persons.properties___name ASC SETTINGS optimize_aggregation_in_order=1,
                                                     join_algorithm='auto')
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0
  '''
# ---
# name: TestInsightActorsQueryRunner.test_insight_persons_stickiness_groups_query
  '''
  SELECT name AS name
  FROM
    (SELECT groups.properties___name AS name
     FROM
       (SELECT aggregation_target AS group_key
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  count() AS num_intervals
           FROM
             (SELECT e.`$group_0` AS aggregation_target,
                     toStartOfDay(toTimeZone(e.timestamp, 'US/Pacific')) AS start_of_interval
              FROM events AS e SAMPLE 1
              WHERE and(equals(e.team_id, 99999), greaterOrEquals(toTimeZone(e.timestamp, 'US/Pacific'), toStartOfDay(assumeNotNull(toDateTime64('2020-01-01 00:00:00', 6, 'US/Pacific')))), lessOrEquals(toTimeZone(e.timestamp, 'US/Pacific'), assumeNotNull(toDateTime64('2020-01-19 23:59:59', 6, 'US/Pacific'))), equals(e.event, '$pageview'), notEquals(e.`$group_0`, ''))
              GROUP BY aggregation_target,
                       start_of_interval
              HAVING ifNull(greater(count(), 0), 0))
           GROUP BY aggregation_target)
        WHERE ifNull(equals(num_intervals, 7), 0)) AS source
     INNER JOIN
       (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'name'), ''), 'null'), '^"|"$', ''), toTimeZone(groups._timestamp, 'US/Pacific')) AS properties___name,
               groups.group_type_index AS index,
               groups.group_key AS key
        FROM groups
        WHERE equals(groups.team_id, 99999)
        GROUP BY groups.group_type_index,
                 groups.group_key) AS groups ON equals(groups.key, source.group_key)
     ORDER BY groups.properties___name ASC SETTINGS optimize_aggregation_in_order=1,
                                                    join_algorithm='auto')
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0
  '''
# ---
# name: TestInsightActorsQueryRunner.test_insight_persons_stickiness_query
  '''
  SELECT name AS name
  FROM
    (SELECT persons.properties___name AS name
     FROM
       (SELECT aggregation_target AS actor_id
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  count() AS num_intervals
           FROM
             (SELECT if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target,
                     toStartOfDay(toTimeZone(e.timestamp, 'US/Pacific')) AS start_of_interval
              FROM events AS e SAMPLE 1
              LEFT OUTER JOIN
                (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                        person_distinct_id_overrides.distinct_id AS distinct_id
                 FROM person_distinct_id_overrides
                 WHERE equals(person_distinct_id_overrides.team_id, 99999)
                 GROUP BY person_distinct_id_overrides.distinct_id
                 HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
              WHERE and(equals(e.team_id, 99999), greaterOrEquals(toTimeZone(e.timestamp, 'US/Pacific'), toStartOfDay(assumeNotNull(toDateTime64('2020-01-09 00:00:00', 6, 'US/Pacific')))), lessOrEquals(toTimeZone(e.timestamp, 'US/Pacific'), assumeNotNull(toDateTime64('2020-01-19 23:59:59', 6, 'US/Pacific'))), equals(e.event, '$pageview'))
              GROUP BY aggregation_target,
                       start_of_interval
              HAVING ifNull(greater(count(), 0), 0))
           GROUP BY aggregation_target)
        WHERE ifNull(equals(num_intervals, 2), 0)) AS source
     INNER JOIN
       (SELECT person.id AS id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'name'), ''), 'null'), '^"|"$', '') AS properties___name
        FROM person
        WHERE and(equals(person.team_id, 99999), in(tuple(person.id, person.version),
                                                      (SELECT person.id AS id, max(person.version) AS version
                                                       FROM person
                                                       WHERE and(equals(person.team_id, 99999), in(person.id,
                                                                                                     (SELECT source.actor_id AS actor_id
                                                                                                      FROM
                                                                                                        (SELECT aggregation_target AS actor_id
                                                                                                         FROM
                                                                                                           (SELECT aggregation_target AS aggregation_target, count() AS num_intervals
                                                                                                            FROM
                                                                                                              (SELECT if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS aggregation_target, toStartOfDay(toTimeZone(e.timestamp, 'US/Pacific')) AS start_of_interval
                                                                                                               FROM events AS e SAMPLE 1
                                                                                                               LEFT OUTER JOIN
                                                                                                                 (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id, person_distinct_id_overrides.distinct_id AS distinct_id
                                                                                                                  FROM person_distinct_id_overrides
                                                                                                                  WHERE equals(person_distinct_id_overrides.team_id, 99999)
                                                                                                                  GROUP BY person_distinct_id_overrides.distinct_id
                                                                                                                  HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
                                                                                                               WHERE and(equals(e.team_id, 99999), greaterOrEquals(toTimeZone(e.timestamp, 'US/Pacific'), toStartOfDay(assumeNotNull(toDateTime64('2020-01-09 00:00:00', 6, 'US/Pacific')))), lessOrEquals(toTimeZone(e.timestamp, 'US/Pacific'), assumeNotNull(toDateTime64('2020-01-19 23:59:59', 6, 'US/Pacific'))), equals(e.event, '$pageview'))
                                                                                                               GROUP BY aggregation_target, start_of_interval
                                                                                                               HAVING ifNull(greater(count(), 0), 0))
                                                                                                            GROUP BY aggregation_target)
                                                                                                         WHERE ifNull(equals(num_intervals, 2), 0)) AS source)))
                                                       GROUP BY person.id
                                                       HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'US/Pacific'), person.version), plus(now64(6, 'US/Pacific'), toIntervalDay(1))), 0))))) SETTINGS optimize_aggregation_in_order=1) AS persons ON equals(persons.id, source.actor_id)
     ORDER BY persons.properties___name ASC SETTINGS optimize_aggregation_in_order=1,
                                                     join_algorithm='auto')
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0
  '''
# ---
# name: TestInsightActorsQueryRunner.test_insight_persons_trends_groups_query
  '''
  SELECT name AS name
  FROM
    (SELECT groups.properties___name AS name
     FROM
       (SELECT actor_id AS actor_id,
               count() AS event_count
        FROM
          (SELECT e.`$group_0` AS actor_id,
                  toTimeZone(e.timestamp, 'US/Pacific') AS timestamp,
                  e.uuid AS uuid
           FROM events AS e
           WHERE and(equals(e.team_id, 99999), greaterOrEquals(timestamp, toDateTime64('2020-01-09 00:00:00.000000', 6, 'US/Pacific')), less(timestamp, toDateTime64('2020-01-10 00:00:00.000000', 6, 'US/Pacific')), notEquals(e.`$group_0`, ''), equals(e.event, '$pageview')))
        GROUP BY actor_id) AS source
     INNER JOIN
       (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(groups.group_properties, 'name'), ''), 'null'), '^"|"$', ''), toTimeZone(groups._timestamp, 'US/Pacific')) AS properties___name,
               groups.group_type_index AS index,
               groups.group_key AS key
        FROM groups
        WHERE equals(groups.team_id, 99999)
        GROUP BY groups.group_type_index,
                 groups.group_key) AS groups ON equals(groups.key, source.actor_id)
     ORDER BY groups.properties___name ASC SETTINGS optimize_aggregation_in_order=1,
                                                    join_algorithm='auto')
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0
  '''
# ---
# name: TestInsightActorsQueryRunner.test_insight_persons_trends_query_with_argmaxV1
  '''
  SELECT name AS name,
         event_distinct_ids AS event_distinct_ids
  FROM
    (SELECT persons.properties___name AS name,
            source.event_distinct_ids AS event_distinct_ids
     FROM
       (SELECT actor_id AS actor_id,
               count() AS event_count,
               groupUniqArray(distinct_id) AS event_distinct_ids
        FROM
          (SELECT if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS actor_id,
                  toTimeZone(e.timestamp, 'US/Pacific') AS timestamp,
                  e.uuid AS uuid,
                  e.distinct_id AS distinct_id
           FROM events AS e
           LEFT OUTER JOIN
             (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                     person_distinct_id_overrides.distinct_id AS distinct_id
              FROM person_distinct_id_overrides
              WHERE equals(person_distinct_id_overrides.team_id, 99999)
              GROUP BY person_distinct_id_overrides.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
           LEFT JOIN
             (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', ''), person.version) AS properties___email,
                     person.id AS id
              FROM person
              WHERE equals(person.team_id, 99999)
              GROUP BY person.id
              HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'US/Pacific'), person.version), plus(now64(6, 'US/Pacific'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__person ON equals(if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id), e__person.id)
           WHERE and(equals(e.team_id, 99999), ifNull(notEquals(e__person.properties___email, 'tom@posthog.com'), 1), greaterOrEquals(timestamp, toDateTime64('2020-01-09 00:00:00.000000', 6, 'US/Pacific')), less(timestamp, toDateTime64('2020-01-10 00:00:00.000000', 6, 'US/Pacific')), equals(e.event, '$pageview')))
        GROUP BY actor_id) AS source
     INNER JOIN
       (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'name'), ''), 'null'), '^"|"$', ''), person.version) AS properties___name,
               person.id AS id
        FROM person
        WHERE and(equals(person.team_id, 99999), in(id,
                                                      (SELECT source.actor_id AS actor_id
                                                       FROM
                                                         (SELECT actor_id AS actor_id, count() AS event_count, groupUniqArray(distinct_id) AS event_distinct_ids
                                                          FROM
                                                            (SELECT if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS actor_id, toTimeZone(e.timestamp, 'US/Pacific') AS timestamp, e.uuid AS uuid, e.distinct_id AS distinct_id
                                                             FROM events AS e
                                                             LEFT OUTER JOIN
                                                               (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id, person_distinct_id_overrides.distinct_id AS distinct_id
                                                                FROM person_distinct_id_overrides
                                                                WHERE equals(person_distinct_id_overrides.team_id, 99999)
                                                                GROUP BY person_distinct_id_overrides.distinct_id
                                                                HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
                                                             LEFT JOIN
                                                               (SELECT argMax(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', ''), person.version) AS properties___email, person.id AS id
                                                                FROM person
                                                                WHERE equals(person.team_id, 99999)
                                                                GROUP BY person.id
                                                                HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'US/Pacific'), person.version), plus(now64(6, 'US/Pacific'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__person ON equals(if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id), e__person.id)
                                                             WHERE and(equals(e.team_id, 99999), ifNull(notEquals(e__person.properties___email, 'tom@posthog.com'), 1), greaterOrEquals(timestamp, toDateTime64('2020-01-09 00:00:00.000000', 6, 'US/Pacific')), less(timestamp, toDateTime64('2020-01-10 00:00:00.000000', 6, 'US/Pacific')), equals(e.event, '$pageview')))
                                                          GROUP BY actor_id) AS source)))
        GROUP BY person.id
        HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'US/Pacific'), person.version), plus(now64(6, 'US/Pacific'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS persons ON equals(persons.id, source.actor_id)
     ORDER BY persons.properties___name ASC SETTINGS optimize_aggregation_in_order=1,
                                                     join_algorithm='auto')
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0
  '''
# ---
# name: TestInsightActorsQueryRunner.test_insight_persons_trends_query_with_argmaxV2
  '''
  SELECT name AS name,
         event_distinct_ids AS event_distinct_ids
  FROM
    (SELECT persons.properties___name AS name,
            source.event_distinct_ids AS event_distinct_ids
     FROM
       (SELECT actor_id AS actor_id,
               count() AS event_count,
               groupUniqArray(distinct_id) AS event_distinct_ids
        FROM
          (SELECT if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS actor_id,
                  toTimeZone(e.timestamp, 'US/Pacific') AS timestamp,
                  e.uuid AS uuid,
                  e.distinct_id AS distinct_id
           FROM events AS e
           LEFT OUTER JOIN
             (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
                     person_distinct_id_overrides.distinct_id AS distinct_id
              FROM person_distinct_id_overrides
              WHERE equals(person_distinct_id_overrides.team_id, 99999)
              GROUP BY person_distinct_id_overrides.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
           LEFT JOIN
             (SELECT person.id AS id,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
              FROM person
              WHERE and(equals(person.team_id, 99999), ifNull(in(tuple(person.id, person.version),
                                                                   (SELECT person.id AS id, max(person.version) AS version
                                                                    FROM person
                                                                    WHERE equals(person.team_id, 99999)
                                                                    GROUP BY person.id
                                                                    HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'US/Pacific'), person.version), plus(now64(6, 'US/Pacific'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__person ON equals(if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id), e__person.id)
           WHERE and(equals(e.team_id, 99999), ifNull(notEquals(e__person.properties___email, 'tom@posthog.com'), 1), greaterOrEquals(timestamp, toDateTime64('2020-01-09 00:00:00.000000', 6, 'US/Pacific')), less(timestamp, toDateTime64('2020-01-10 00:00:00.000000', 6, 'US/Pacific')), equals(e.event, '$pageview')))
        GROUP BY actor_id) AS source
     INNER JOIN
       (SELECT person.id AS id,
               replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'name'), ''), 'null'), '^"|"$', '') AS properties___name
        FROM person
        WHERE and(equals(person.team_id, 99999), in(tuple(person.id, person.version),
                                                      (SELECT person.id AS id, max(person.version) AS version
                                                       FROM person
                                                       WHERE and(equals(person.team_id, 99999), in(person.id,
                                                                                                     (SELECT source.actor_id AS actor_id
                                                                                                      FROM
                                                                                                        (SELECT actor_id AS actor_id, count() AS event_count, groupUniqArray(distinct_id) AS event_distinct_ids
                                                                                                         FROM
                                                                                                           (SELECT if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id) AS actor_id, toTimeZone(e.timestamp, 'US/Pacific') AS timestamp, e.uuid AS uuid, e.distinct_id AS distinct_id
                                                                                                            FROM events AS e
                                                                                                            LEFT OUTER JOIN
                                                                                                              (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id, person_distinct_id_overrides.distinct_id AS distinct_id
                                                                                                               FROM person_distinct_id_overrides
                                                                                                               WHERE equals(person_distinct_id_overrides.team_id, 99999)
                                                                                                               GROUP BY person_distinct_id_overrides.distinct_id
                                                                                                               HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__override ON equals(e.distinct_id, e__override.distinct_id)
                                                                                                            LEFT JOIN
                                                                                                              (SELECT person.id AS id, replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
                                                                                                               FROM person
                                                                                                               WHERE and(equals(person.team_id, 99999), ifNull(in(tuple(person.id, person.version),
                                                                                                                                                                    (SELECT person.id AS id, max(person.version) AS version
                                                                                                                                                                     FROM person
                                                                                                                                                                     WHERE equals(person.team_id, 99999)
                                                                                                                                                                     GROUP BY person.id
                                                                                                                                                                     HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'US/Pacific'), person.version), plus(now64(6, 'US/Pacific'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__person ON equals(if(not(empty(e__override.distinct_id)), e__override.person_id, e.person_id), e__person.id)
                                                                                                            WHERE and(equals(e.team_id, 99999), ifNull(notEquals(e__person.properties___email, 'tom@posthog.com'), 1), greaterOrEquals(timestamp, toDateTime64('2020-01-09 00:00:00.000000', 6, 'US/Pacific')), less(timestamp, toDateTime64('2020-01-10 00:00:00.000000', 6, 'US/Pacific')), equals(e.event, '$pageview')))
                                                                                                         GROUP BY actor_id) AS source)))
                                                       GROUP BY person.id
                                                       HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'US/Pacific'), person.version), plus(now64(6, 'US/Pacific'), toIntervalDay(1))), 0))))) SETTINGS optimize_aggregation_in_order=1) AS persons ON equals(persons.id, source.actor_id)
     ORDER BY persons.properties___name ASC SETTINGS optimize_aggregation_in_order=1,
                                                     join_algorithm='auto')
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0
  '''
# ---
