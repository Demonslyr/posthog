# serializer version: 1
# name: TestStatsTablePreAggregated.test_browser_breakdown_query_generation
  '''
  
  SELECT web_stats_daily.browser AS `context.columns.breakdown_value`, tuple(uniqMergeIf(web_stats_daily.persons_uniq_state, and(greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC')))), uniqMergeIf(web_stats_daily.persons_uniq_state, and(greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC'))))) AS `context.columns.visitors`, tuple(sumMergeIf(web_stats_daily.pageviews_count_state, and(greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC')))), sumMergeIf(web_stats_daily.pageviews_count_state, and(greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC'))))) AS `context.columns.views` 
  FROM web_stats_daily FINAL 
  WHERE and(equals(web_stats_daily.team_id, 420), greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC'))) 
  GROUP BY `context.columns.breakdown_value` ORDER BY `context.columns.visitors` DESC 
  LIMIT 50000
  '''
# ---
# name: TestStatsTablePreAggregated.test_complex_stats_table_with_state_aggregations
  '''
  
  SELECT concat(ifNull(toString(web_stats_daily.viewport_width), ''), %(hogql_val_0)s, ifNull(toString(web_stats_daily.viewport_height), '')) AS `context.columns.breakdown_value`, tuple(uniqMergeIf(web_stats_daily.persons_uniq_state, and(greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-07 23:59:59.999999', 6, 'UTC')))), uniqMergeIf(web_stats_daily.persons_uniq_state, and(greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-07 23:59:59.999999', 6, 'UTC'))))) AS `context.columns.visitors`, tuple(sumMergeIf(web_stats_daily.pageviews_count_state, and(greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-07 23:59:59.999999', 6, 'UTC')))), sumMergeIf(web_stats_daily.pageviews_count_state, and(greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-07 23:59:59.999999', 6, 'UTC'))))) AS `context.columns.views` 
  FROM web_stats_daily FINAL 
  WHERE and(equals(web_stats_daily.team_id, 420), greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-07 23:59:59.999999', 6, 'UTC'))) 
  GROUP BY `context.columns.breakdown_value` ORDER BY `context.columns.views` DESC 
  LIMIT 50000
  '''
# ---
# name: TestStatsTablePreAggregated.test_country_breakdown_with_filters
  '''
  
  SELECT web_stats_daily.country_name AS `context.columns.breakdown_value`, tuple(uniqMergeIf(web_stats_daily.persons_uniq_state, and(greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC')))), uniqMergeIf(web_stats_daily.persons_uniq_state, and(greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC'))))) AS `context.columns.visitors`, tuple(sumMergeIf(web_stats_daily.pageviews_count_state, and(greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC')))), sumMergeIf(web_stats_daily.pageviews_count_state, and(greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC'))))) AS `context.columns.views` 
  FROM web_stats_daily FINAL 
  WHERE and(equals(web_stats_daily.team_id, 420), greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC')), ifNull(equals(web_stats_daily.browser, %(hogql_val_0)s), 0)) 
  GROUP BY `context.columns.breakdown_value` ORDER BY `context.columns.views` DESC 
  LIMIT 50000
  '''
# ---
# name: TestStatsTablePreAggregated.test_device_type_breakdown_query_generation
  '''
  
  SELECT web_stats_daily.device_type AS `context.columns.breakdown_value`, tuple(uniqMergeIf(web_stats_daily.persons_uniq_state, and(greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC')))), uniqMergeIf(web_stats_daily.persons_uniq_state, and(greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC'))))) AS `context.columns.visitors`, tuple(sumMergeIf(web_stats_daily.pageviews_count_state, and(greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC')))), sumMergeIf(web_stats_daily.pageviews_count_state, and(greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC'))))) AS `context.columns.views` 
  FROM web_stats_daily FINAL 
  WHERE and(equals(web_stats_daily.team_id, 420), greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC'))) 
  GROUP BY `context.columns.breakdown_value` ORDER BY `context.columns.views` DESC 
  LIMIT 50000
  '''
# ---
# name: TestStatsTablePreAggregated.test_fallback_to_regular_query_when_preaggregated_not_available
  '''
  
  SELECT breakdown_value AS `context.columns.breakdown_value`, tuple(uniq(filtered_person_id), NULL) AS `context.columns.visitors`, tuple(sum(filtered_pageview_count), NULL) AS `context.columns.views` 
  FROM (
  SELECT any(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id)) AS filtered_person_id, count() AS filtered_pageview_count, replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, %(hogql_val_9)s), ''), 'null'), '^"|"$', '') AS breakdown_value, events__session.session_id AS session_id, any(events__session.`$is_bounce`) AS is_bounce, min(events__session.`$start_timestamp`) AS start_timestamp 
  FROM events LEFT JOIN (
  SELECT toString(reinterpretAsUUID(bitOr(bitShiftLeft(raw_sessions.session_id_v7, 64), bitShiftRight(raw_sessions.session_id_v7, 64)))) AS session_id, if(ifNull(equals(uniqMerge(raw_sessions.pageview_uniq), 0), 0), NULL, not(or(ifNull(greater(uniqMerge(raw_sessions.pageview_uniq), 1), 0), ifNull(greater(uniqMerge(raw_sessions.autocapture_uniq), 0), 0), greaterOrEquals(dateDiff(%(hogql_val_0)s, min(toTimeZone(raw_sessions.min_timestamp, %(hogql_val_1)s)), max(toTimeZone(raw_sessions.max_timestamp, %(hogql_val_2)s))), 10)))) AS `$is_bounce`, min(toTimeZone(raw_sessions.min_timestamp, %(hogql_val_3)s)) AS `$start_timestamp`, raw_sessions.session_id_v7 AS session_id_v7 
  FROM raw_sessions 
  WHERE and(equals(raw_sessions.team_id, 420), greaterOrEquals(fromUnixTimestamp(intDiv(toUInt64(bitShiftRight(raw_sessions.session_id_v7, 80)), 1000)), minus(assumeNotNull(toDateTime(%(hogql_val_4)s, %(hogql_val_5)s)), toIntervalDay(3))), lessOrEquals(fromUnixTimestamp(intDiv(toUInt64(bitShiftRight(raw_sessions.session_id_v7, 80)), 1000)), plus(assumeNotNull(toDateTime(%(hogql_val_6)s, %(hogql_val_7)s)), toIntervalDay(3)))) 
  GROUP BY raw_sessions.session_id_v7, raw_sessions.session_id_v7) AS events__session ON equals(toUInt128(accurateCastOrNull(events.`$session_id`, %(hogql_val_8)s)), events__session.session_id_v7) LEFT OUTER JOIN (
  SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id, person_distinct_id_overrides.distinct_id AS distinct_id 
  FROM person_distinct_id_overrides 
  WHERE equals(person_distinct_id_overrides.team_id, 420) 
  GROUP BY person_distinct_id_overrides.distinct_id 
  HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) 
  SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id) 
  WHERE and(equals(events.team_id, 420), and(or(and(greaterOrEquals(toTimeZone(events.timestamp, %(hogql_val_10)s), assumeNotNull(toDateTime(%(hogql_val_11)s, %(hogql_val_12)s))), lessOrEquals(toTimeZone(events.timestamp, %(hogql_val_13)s), assumeNotNull(toDateTime(%(hogql_val_14)s, %(hogql_val_15)s)))), 0), or(equals(events.event, %(hogql_val_16)s), equals(events.event, %(hogql_val_17)s)), 1, isNotNull(breakdown_value))) 
  GROUP BY session_id, breakdown_value) 
  GROUP BY `context.columns.breakdown_value` ORDER BY `context.columns.visitors` DESC, `context.columns.views` DESC, `context.columns.breakdown_value` ASC 
  LIMIT 50000
  '''
# ---
# name: TestStatsTablePreAggregated.test_initial_page_breakdown_with_bounce_rate_query_generation
  '''
  
  SELECT web_bounces_daily.entry_pathname AS `context.columns.breakdown_value`, tuple(uniqMergeIf(web_bounces_daily.persons_uniq_state, and(greaterOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC')))), uniqMergeIf(web_bounces_daily.persons_uniq_state, and(greaterOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC'))))) AS `context.columns.visitors`, tuple(sumMergeIf(web_bounces_daily.pageviews_count_state, and(greaterOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC')))), sumMergeIf(web_bounces_daily.pageviews_count_state, and(greaterOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC'))))) AS `context.columns.views`, tuple(divide(sumMergeIf(web_bounces_daily.bounces_count_state, and(greaterOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC')))), nullIf(uniqMergeIf(web_bounces_daily.sessions_uniq_state, and(greaterOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC')))), 0)), divide(sumMergeIf(web_bounces_daily.bounces_count_state, and(greaterOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC')))), nullIf(uniqMergeIf(web_bounces_daily.sessions_uniq_state, and(greaterOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC')))), 0))) AS `context.columns.bounce_rate` 
  FROM web_bounces_daily FINAL 
  WHERE and(equals(web_bounces_daily.team_id, 420), greaterOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC'))) 
  GROUP BY `context.columns.breakdown_value` ORDER BY `context.columns.views` DESC 
  LIMIT 50000
  '''
# ---
# name: TestStatsTablePreAggregated.test_page_breakdown_with_bounce_rate_query_generation
  '''
  
  SELECT web_stats_daily.pathname AS `context.columns.breakdown_value`, tuple(uniqMergeIf(web_stats_daily.persons_uniq_state, and(greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC')))), uniqMergeIf(web_stats_daily.persons_uniq_state, and(greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC'))))) AS `context.columns.visitors`, tuple(sumMergeIf(web_stats_daily.pageviews_count_state, and(greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC')))), sumMergeIf(web_stats_daily.pageviews_count_state, and(greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC'))))) AS `context.columns.views`, any(bounces.`context.columns.bounce_rate`) AS `context.columns.bounce_rate` 
  FROM web_stats_daily FINAL LEFT JOIN (
  SELECT web_bounces_daily.entry_pathname AS `context.columns.breakdown_value`, tuple(uniqMergeIf(web_bounces_daily.persons_uniq_state, and(greaterOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC')))), uniqMergeIf(web_bounces_daily.persons_uniq_state, and(greaterOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC'))))) AS `context.columns.visitors`, tuple(sumMergeIf(web_bounces_daily.pageviews_count_state, and(greaterOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC')))), sumMergeIf(web_bounces_daily.pageviews_count_state, and(greaterOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC'))))) AS `context.columns.views`, tuple(divide(sumMergeIf(web_bounces_daily.bounces_count_state, and(greaterOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC')))), nullIf(uniqMergeIf(web_bounces_daily.sessions_uniq_state, and(greaterOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC')))), 0)), divide(sumMergeIf(web_bounces_daily.bounces_count_state, and(greaterOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC')))), nullIf(uniqMergeIf(web_bounces_daily.sessions_uniq_state, and(greaterOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_bounces_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC')))), 0))) AS `context.columns.bounce_rate` 
  FROM web_bounces_daily FINAL 
  WHERE equals(web_bounces_daily.team_id, 420) 
  GROUP BY `context.columns.breakdown_value`) AS bounces ON equals(web_stats_daily.pathname, bounces.`context.columns.breakdown_value`) 
  WHERE and(equals(web_stats_daily.team_id, 420), greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-02 23:59:59.999999', 6, 'UTC'))) 
  GROUP BY `context.columns.breakdown_value` ORDER BY `context.columns.views` DESC 
  LIMIT 50000
  '''
# ---
# name: TestStatsTablePreAggregated.test_utm_source_breakdown_with_comparison_period
  '''
  
  SELECT web_stats_daily.utm_source AS `context.columns.breakdown_value`, tuple(uniqMergeIf(web_stats_daily.persons_uniq_state, and(greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-08 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-15 23:59:59.999999', 6, 'UTC')))), uniqMergeIf(web_stats_daily.persons_uniq_state, and(greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-08 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-15 23:59:59.999999', 6, 'UTC'))))) AS `context.columns.visitors`, tuple(sumMergeIf(web_stats_daily.pageviews_count_state, and(greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-08 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-15 23:59:59.999999', 6, 'UTC')))), sumMergeIf(web_stats_daily.pageviews_count_state, and(greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-08 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-15 23:59:59.999999', 6, 'UTC'))))) AS `context.columns.views` 
  FROM web_stats_daily FINAL 
  WHERE and(equals(web_stats_daily.team_id, 420), greaterOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-08 00:00:00.000000', 6, 'UTC')), lessOrEquals(web_stats_daily.day_bucket, toDateTime64('2023-01-15 23:59:59.999999', 6, 'UTC'))) 
  GROUP BY `context.columns.breakdown_value` ORDER BY `context.columns.views` DESC 
  LIMIT 50000
  '''
# ---
