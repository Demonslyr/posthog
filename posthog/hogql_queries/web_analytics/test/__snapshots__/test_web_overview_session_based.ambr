# serializer version: 1
# name: TestWebOverviewSessionBasedQueryRunner.test_basic_functionality
  '''
  SELECT uniq(session_person_id) AS unique_users,
         NULL AS previous_unique_users,
         sum(filtered_pageview_count) AS total_filtered_pageview_count,
         NULL AS previous_total_filtered_pageview_count,
         uniq(session_id) AS unique_sessions,
         NULL AS previous_unique_sessions,
         avg(session_duration) AS avg_duration_s,
         NULL AS previous_avg_duration_s,
         avg(is_bounce) AS bounce_rate,
         NULL AS previous_bounce_rate
  FROM
    (SELECT any(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id)) AS session_person_id,
            events__session.session_id AS session_id,
            min(events__session.`$start_timestamp`) AS start_timestamp,
            any(events__session.`$session_duration`) AS session_duration,
            countIf(or(equals(events.event, '$pageview'), equals(events.event, '$screen'))) AS filtered_pageview_count,
            any(events__session.`$is_bounce`) AS is_bounce
     FROM events
     LEFT JOIN
       (SELECT toString(reinterpretAsUUID(bitOr(bitShiftLeft(raw_sessions.session_id_v7, 64), bitShiftRight(raw_sessions.session_id_v7, 64)))) AS session_id,
               min(raw_sessions.min_timestamp) AS `$start_timestamp`,
               dateDiff('second', min(raw_sessions.min_timestamp), max(raw_sessions.max_timestamp)) AS `$session_duration`,
               if(ifNull(equals(uniqMerge(raw_sessions.pageview_uniq), 0), 0), NULL, not(or(ifNull(greater(uniqMerge(raw_sessions.pageview_uniq), 1), 0), ifNull(greater(uniqMerge(raw_sessions.autocapture_uniq), 0), 0), ifNull(greaterOrEquals(dateDiff('second', min(raw_sessions.min_timestamp), max(raw_sessions.max_timestamp)), 10), 0)))) AS `$is_bounce`,
               raw_sessions.session_id_v7 AS session_id_v7
        FROM raw_sessions
        WHERE and(equals(raw_sessions.team_id, 99999), greaterOrEquals(fromUnixTimestamp(intDiv(toUInt64(bitShiftRight(raw_sessions.session_id_v7, 80)), 1000)), minus(assumeNotNull(toDateTime('2023-12-01 00:00:00', 'UTC')), toIntervalDay(3))), lessOrEquals(fromUnixTimestamp(intDiv(toUInt64(bitShiftRight(raw_sessions.session_id_v7, 80)), 1000)), plus(assumeNotNull(toDateTime('2023-12-01 23:59:59', 'UTC')), toIntervalDay(3))))
        GROUP BY raw_sessions.session_id_v7,
                 raw_sessions.session_id_v7) AS events__session ON equals(toUInt128(accurateCastOrNull(events.`$session_id`, 'UUID')), events__session.session_id_v7)
     LEFT OUTER JOIN
       (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
               person_distinct_id_overrides.distinct_id AS distinct_id
        FROM person_distinct_id_overrides
        WHERE equals(person_distinct_id_overrides.team_id, 99999)
        GROUP BY person_distinct_id_overrides.distinct_id
        HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
     WHERE and(equals(events.team_id, 99999), and(isNotNull(events.`$session_id`), or(equals(events.event, '$pageview'), equals(events.event, '$screen')), or(and(greaterOrEquals(events.timestamp, assumeNotNull(toDateTime('2023-12-01 00:00:00', 'UTC'))), lessOrEquals(events.timestamp, assumeNotNull(toDateTime('2023-12-01 23:59:59', 'UTC')))), 0), 1))
     GROUP BY session_id
     HAVING or(and(ifNull(greaterOrEquals(start_timestamp, assumeNotNull(toDateTime('2023-12-01 00:00:00', 'UTC'))), 0), ifNull(lessOrEquals(start_timestamp, assumeNotNull(toDateTime('2023-12-01 23:59:59', 'UTC'))), 0)), 0))
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestWebOverviewSessionBasedQueryRunner.test_basic_functionality.1
  '''
  SELECT uniq(session_person_id) AS unique_users,
         NULL AS previous_unique_users,
         sum(filtered_pageview_count) AS total_filtered_pageview_count,
         NULL AS previous_total_filtered_pageview_count,
         uniq(session_id) AS unique_sessions,
         NULL AS previous_unique_sessions,
         avg(session_duration) AS avg_duration_s,
         NULL AS previous_avg_duration_s,
         avg(is_bounce) AS bounce_rate,
         NULL AS previous_bounce_rate
  FROM
    (SELECT any(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id)) AS session_person_id,
            events__session.session_id AS session_id,
            min(events__session.`$start_timestamp`) AS start_timestamp,
            any(events__session.`$session_duration`) AS session_duration,
            countIf(or(equals(events.event, '$pageview'), equals(events.event, '$screen'))) AS filtered_pageview_count,
            any(events__session.`$is_bounce`) AS is_bounce
     FROM events
     LEFT JOIN
       (SELECT toString(reinterpretAsUUID(bitOr(bitShiftLeft(raw_sessions.session_id_v7, 64), bitShiftRight(raw_sessions.session_id_v7, 64)))) AS session_id,
               min(raw_sessions.min_timestamp) AS `$start_timestamp`,
               dateDiff('second', min(raw_sessions.min_timestamp), max(raw_sessions.max_timestamp)) AS `$session_duration`,
               if(ifNull(equals(uniqMerge(raw_sessions.pageview_uniq), 0), 0), NULL, not(or(ifNull(greater(uniqMerge(raw_sessions.pageview_uniq), 1), 0), ifNull(greater(uniqMerge(raw_sessions.autocapture_uniq), 0), 0), ifNull(greaterOrEquals(dateDiff('second', min(raw_sessions.min_timestamp), max(raw_sessions.max_timestamp)), 10), 0)))) AS `$is_bounce`,
               raw_sessions.session_id_v7 AS session_id_v7
        FROM raw_sessions
        WHERE equals(raw_sessions.team_id, 99999)
        GROUP BY raw_sessions.session_id_v7,
                 raw_sessions.session_id_v7) AS events__session ON equals(toUInt128(accurateCastOrNull(events.`$session_id`, 'UUID')), events__session.session_id_v7)
     LEFT OUTER JOIN
       (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
               person_distinct_id_overrides.distinct_id AS distinct_id
        FROM person_distinct_id_overrides
        WHERE equals(person_distinct_id_overrides.team_id, 99999)
        GROUP BY person_distinct_id_overrides.distinct_id
        HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
     WHERE and(equals(events.team_id, 99999), and(isNotNull(events.`$session_id`), or(equals(events.event, '$pageview'), equals(events.event, '$screen')), 1))
     GROUP BY session_id
     HAVING or(and(ifNull(greaterOrEquals(start_timestamp, assumeNotNull(toDateTime('2023-12-01 00:00:00', 'UTC'))), 0), ifNull(lessOrEquals(start_timestamp, assumeNotNull(toDateTime('2023-12-01 23:59:59', 'UTC'))), 0)), 0))
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestWebOverviewSessionBasedQueryRunner.test_cross_day_session_filtering_difference
  '''
  SELECT uniq(session_person_id) AS unique_users,
         NULL AS previous_unique_users,
         sum(filtered_pageview_count) AS total_filtered_pageview_count,
         NULL AS previous_total_filtered_pageview_count,
         uniq(session_id) AS unique_sessions,
         NULL AS previous_unique_sessions,
         avg(session_duration) AS avg_duration_s,
         NULL AS previous_avg_duration_s,
         avg(is_bounce) AS bounce_rate,
         NULL AS previous_bounce_rate
  FROM
    (SELECT any(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id)) AS session_person_id,
            events__session.session_id AS session_id,
            min(events__session.`$start_timestamp`) AS start_timestamp,
            any(events__session.`$session_duration`) AS session_duration,
            countIf(or(equals(events.event, '$pageview'), equals(events.event, '$screen'))) AS filtered_pageview_count,
            any(events__session.`$is_bounce`) AS is_bounce
     FROM events
     LEFT JOIN
       (SELECT toString(reinterpretAsUUID(bitOr(bitShiftLeft(raw_sessions.session_id_v7, 64), bitShiftRight(raw_sessions.session_id_v7, 64)))) AS session_id,
               min(raw_sessions.min_timestamp) AS `$start_timestamp`,
               dateDiff('second', min(raw_sessions.min_timestamp), max(raw_sessions.max_timestamp)) AS `$session_duration`,
               if(ifNull(equals(uniqMerge(raw_sessions.pageview_uniq), 0), 0), NULL, not(or(ifNull(greater(uniqMerge(raw_sessions.pageview_uniq), 1), 0), ifNull(greater(uniqMerge(raw_sessions.autocapture_uniq), 0), 0), ifNull(greaterOrEquals(dateDiff('second', min(raw_sessions.min_timestamp), max(raw_sessions.max_timestamp)), 10), 0)))) AS `$is_bounce`,
               raw_sessions.session_id_v7 AS session_id_v7
        FROM raw_sessions
        WHERE and(equals(raw_sessions.team_id, 99999), greaterOrEquals(fromUnixTimestamp(intDiv(toUInt64(bitShiftRight(raw_sessions.session_id_v7, 80)), 1000)), minus(assumeNotNull(toDateTime('2023-12-02 00:00:00', 'UTC')), toIntervalDay(3))), lessOrEquals(fromUnixTimestamp(intDiv(toUInt64(bitShiftRight(raw_sessions.session_id_v7, 80)), 1000)), plus(assumeNotNull(toDateTime('2023-12-02 23:59:59', 'UTC')), toIntervalDay(3))))
        GROUP BY raw_sessions.session_id_v7,
                 raw_sessions.session_id_v7) AS events__session ON equals(toUInt128(accurateCastOrNull(events.`$session_id`, 'UUID')), events__session.session_id_v7)
     LEFT OUTER JOIN
       (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
               person_distinct_id_overrides.distinct_id AS distinct_id
        FROM person_distinct_id_overrides
        WHERE equals(person_distinct_id_overrides.team_id, 99999)
        GROUP BY person_distinct_id_overrides.distinct_id
        HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
     WHERE and(equals(events.team_id, 99999), and(isNotNull(events.`$session_id`), or(equals(events.event, '$pageview'), equals(events.event, '$screen')), or(and(greaterOrEquals(events.timestamp, assumeNotNull(toDateTime('2023-12-02 00:00:00', 'UTC'))), lessOrEquals(events.timestamp, assumeNotNull(toDateTime('2023-12-02 23:59:59', 'UTC')))), 0), 1))
     GROUP BY session_id
     HAVING or(and(ifNull(greaterOrEquals(start_timestamp, assumeNotNull(toDateTime('2023-12-02 00:00:00', 'UTC'))), 0), ifNull(lessOrEquals(start_timestamp, assumeNotNull(toDateTime('2023-12-02 23:59:59', 'UTC'))), 0)), 0))
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestWebOverviewSessionBasedQueryRunner.test_cross_day_session_filtering_difference.1
  '''
  SELECT uniq(session_person_id) AS unique_users,
         NULL AS previous_unique_users,
         sum(filtered_pageview_count) AS total_filtered_pageview_count,
         NULL AS previous_total_filtered_pageview_count,
         uniq(session_id) AS unique_sessions,
         NULL AS previous_unique_sessions,
         avg(session_duration) AS avg_duration_s,
         NULL AS previous_avg_duration_s,
         avg(is_bounce) AS bounce_rate,
         NULL AS previous_bounce_rate
  FROM
    (SELECT any(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id)) AS session_person_id,
            events__session.session_id AS session_id,
            min(events__session.`$start_timestamp`) AS start_timestamp,
            any(events__session.`$session_duration`) AS session_duration,
            countIf(or(equals(events.event, '$pageview'), equals(events.event, '$screen'))) AS filtered_pageview_count,
            any(events__session.`$is_bounce`) AS is_bounce
     FROM events
     LEFT JOIN
       (SELECT toString(reinterpretAsUUID(bitOr(bitShiftLeft(raw_sessions.session_id_v7, 64), bitShiftRight(raw_sessions.session_id_v7, 64)))) AS session_id,
               min(raw_sessions.min_timestamp) AS `$start_timestamp`,
               dateDiff('second', min(raw_sessions.min_timestamp), max(raw_sessions.max_timestamp)) AS `$session_duration`,
               if(ifNull(equals(uniqMerge(raw_sessions.pageview_uniq), 0), 0), NULL, not(or(ifNull(greater(uniqMerge(raw_sessions.pageview_uniq), 1), 0), ifNull(greater(uniqMerge(raw_sessions.autocapture_uniq), 0), 0), ifNull(greaterOrEquals(dateDiff('second', min(raw_sessions.min_timestamp), max(raw_sessions.max_timestamp)), 10), 0)))) AS `$is_bounce`,
               raw_sessions.session_id_v7 AS session_id_v7
        FROM raw_sessions
        WHERE equals(raw_sessions.team_id, 99999)
        GROUP BY raw_sessions.session_id_v7,
                 raw_sessions.session_id_v7) AS events__session ON equals(toUInt128(accurateCastOrNull(events.`$session_id`, 'UUID')), events__session.session_id_v7)
     LEFT OUTER JOIN
       (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
               person_distinct_id_overrides.distinct_id AS distinct_id
        FROM person_distinct_id_overrides
        WHERE equals(person_distinct_id_overrides.team_id, 99999)
        GROUP BY person_distinct_id_overrides.distinct_id
        HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
     WHERE and(equals(events.team_id, 99999), and(isNotNull(events.`$session_id`), or(equals(events.event, '$pageview'), equals(events.event, '$screen')), 1))
     GROUP BY session_id
     HAVING or(and(ifNull(greaterOrEquals(start_timestamp, assumeNotNull(toDateTime('2023-12-02 00:00:00', 'UTC'))), 0), ifNull(lessOrEquals(start_timestamp, assumeNotNull(toDateTime('2023-12-02 23:59:59', 'UTC'))), 0)), 0))
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestWebOverviewSessionBasedQueryRunner.test_matches_preaggregated_logic
  '''
  SELECT uniq(session_person_id) AS unique_users,
         NULL AS previous_unique_users,
         sum(filtered_pageview_count) AS total_filtered_pageview_count,
         NULL AS previous_total_filtered_pageview_count,
         uniq(session_id) AS unique_sessions,
         NULL AS previous_unique_sessions,
         avg(session_duration) AS avg_duration_s,
         NULL AS previous_avg_duration_s,
         avg(is_bounce) AS bounce_rate,
         NULL AS previous_bounce_rate
  FROM
    (SELECT any(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id)) AS session_person_id,
            events__session.session_id AS session_id,
            min(events__session.`$start_timestamp`) AS start_timestamp,
            any(events__session.`$session_duration`) AS session_duration,
            countIf(or(equals(events.event, '$pageview'), equals(events.event, '$screen'))) AS filtered_pageview_count,
            any(events__session.`$is_bounce`) AS is_bounce
     FROM events
     LEFT JOIN
       (SELECT toString(reinterpretAsUUID(bitOr(bitShiftLeft(raw_sessions.session_id_v7, 64), bitShiftRight(raw_sessions.session_id_v7, 64)))) AS session_id,
               min(raw_sessions.min_timestamp) AS `$start_timestamp`,
               dateDiff('second', min(raw_sessions.min_timestamp), max(raw_sessions.max_timestamp)) AS `$session_duration`,
               if(ifNull(equals(uniqMerge(raw_sessions.pageview_uniq), 0), 0), NULL, not(or(ifNull(greater(uniqMerge(raw_sessions.pageview_uniq), 1), 0), ifNull(greater(uniqMerge(raw_sessions.autocapture_uniq), 0), 0), ifNull(greaterOrEquals(dateDiff('second', min(raw_sessions.min_timestamp), max(raw_sessions.max_timestamp)), 10), 0)))) AS `$is_bounce`,
               raw_sessions.session_id_v7 AS session_id_v7
        FROM raw_sessions
        WHERE equals(raw_sessions.team_id, 99999)
        GROUP BY raw_sessions.session_id_v7,
                 raw_sessions.session_id_v7) AS events__session ON equals(toUInt128(accurateCastOrNull(events.`$session_id`, 'UUID')), events__session.session_id_v7)
     LEFT OUTER JOIN
       (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
               person_distinct_id_overrides.distinct_id AS distinct_id
        FROM person_distinct_id_overrides
        WHERE equals(person_distinct_id_overrides.team_id, 99999)
        GROUP BY person_distinct_id_overrides.distinct_id
        HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
     WHERE and(equals(events.team_id, 99999), and(isNotNull(events.`$session_id`), or(equals(events.event, '$pageview'), equals(events.event, '$screen')), 1))
     GROUP BY session_id
     HAVING or(and(ifNull(greaterOrEquals(start_timestamp, assumeNotNull(toDateTime('2023-12-01 00:00:00', 'UTC'))), 0), ifNull(lessOrEquals(start_timestamp, assumeNotNull(toDateTime('2023-12-01 23:59:59', 'UTC'))), 0)), 0))
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestWebOverviewSessionBasedQueryRunner.test_matches_preaggregated_logic.1
  '''
  SELECT uniq(session_person_id) AS unique_users,
         NULL AS previous_unique_users,
         sum(filtered_pageview_count) AS total_filtered_pageview_count,
         NULL AS previous_total_filtered_pageview_count,
         uniq(session_id) AS unique_sessions,
         NULL AS previous_unique_sessions,
         avg(session_duration) AS avg_duration_s,
         NULL AS previous_avg_duration_s,
         avg(is_bounce) AS bounce_rate,
         NULL AS previous_bounce_rate
  FROM
    (SELECT any(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id)) AS session_person_id,
            events__session.session_id AS session_id,
            min(events__session.`$start_timestamp`) AS start_timestamp,
            any(events__session.`$session_duration`) AS session_duration,
            countIf(or(equals(events.event, '$pageview'), equals(events.event, '$screen'))) AS filtered_pageview_count,
            any(events__session.`$is_bounce`) AS is_bounce
     FROM events
     LEFT JOIN
       (SELECT toString(reinterpretAsUUID(bitOr(bitShiftLeft(raw_sessions.session_id_v7, 64), bitShiftRight(raw_sessions.session_id_v7, 64)))) AS session_id,
               min(raw_sessions.min_timestamp) AS `$start_timestamp`,
               dateDiff('second', min(raw_sessions.min_timestamp), max(raw_sessions.max_timestamp)) AS `$session_duration`,
               if(ifNull(equals(uniqMerge(raw_sessions.pageview_uniq), 0), 0), NULL, not(or(ifNull(greater(uniqMerge(raw_sessions.pageview_uniq), 1), 0), ifNull(greater(uniqMerge(raw_sessions.autocapture_uniq), 0), 0), ifNull(greaterOrEquals(dateDiff('second', min(raw_sessions.min_timestamp), max(raw_sessions.max_timestamp)), 10), 0)))) AS `$is_bounce`,
               raw_sessions.session_id_v7 AS session_id_v7
        FROM raw_sessions
        WHERE equals(raw_sessions.team_id, 99999)
        GROUP BY raw_sessions.session_id_v7,
                 raw_sessions.session_id_v7) AS events__session ON equals(toUInt128(accurateCastOrNull(events.`$session_id`, 'UUID')), events__session.session_id_v7)
     LEFT OUTER JOIN
       (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
               person_distinct_id_overrides.distinct_id AS distinct_id
        FROM person_distinct_id_overrides
        WHERE equals(person_distinct_id_overrides.team_id, 99999)
        GROUP BY person_distinct_id_overrides.distinct_id
        HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
     WHERE and(equals(events.team_id, 99999), and(isNotNull(events.`$session_id`), or(equals(events.event, '$pageview'), equals(events.event, '$screen')), 1))
     GROUP BY session_id
     HAVING or(and(ifNull(greaterOrEquals(start_timestamp, assumeNotNull(toDateTime('2023-12-02 00:00:00', 'UTC'))), 0), ifNull(lessOrEquals(start_timestamp, assumeNotNull(toDateTime('2023-12-02 23:59:59', 'UTC'))), 0)), 0))
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestWebOverviewSessionBasedQueryRunner.test_session_outside_range
  '''
  SELECT uniq(session_person_id) AS unique_users,
         NULL AS previous_unique_users,
         sum(filtered_pageview_count) AS total_filtered_pageview_count,
         NULL AS previous_total_filtered_pageview_count,
         uniq(session_id) AS unique_sessions,
         NULL AS previous_unique_sessions,
         avg(session_duration) AS avg_duration_s,
         NULL AS previous_avg_duration_s,
         avg(is_bounce) AS bounce_rate,
         NULL AS previous_bounce_rate
  FROM
    (SELECT any(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id)) AS session_person_id,
            events__session.session_id AS session_id,
            min(events__session.`$start_timestamp`) AS start_timestamp,
            any(events__session.`$session_duration`) AS session_duration,
            countIf(or(equals(events.event, '$pageview'), equals(events.event, '$screen'))) AS filtered_pageview_count,
            any(events__session.`$is_bounce`) AS is_bounce
     FROM events
     LEFT JOIN
       (SELECT toString(reinterpretAsUUID(bitOr(bitShiftLeft(raw_sessions.session_id_v7, 64), bitShiftRight(raw_sessions.session_id_v7, 64)))) AS session_id,
               min(raw_sessions.min_timestamp) AS `$start_timestamp`,
               dateDiff('second', min(raw_sessions.min_timestamp), max(raw_sessions.max_timestamp)) AS `$session_duration`,
               if(ifNull(equals(uniqMerge(raw_sessions.pageview_uniq), 0), 0), NULL, not(or(ifNull(greater(uniqMerge(raw_sessions.pageview_uniq), 1), 0), ifNull(greater(uniqMerge(raw_sessions.autocapture_uniq), 0), 0), ifNull(greaterOrEquals(dateDiff('second', min(raw_sessions.min_timestamp), max(raw_sessions.max_timestamp)), 10), 0)))) AS `$is_bounce`,
               raw_sessions.session_id_v7 AS session_id_v7
        FROM raw_sessions
        WHERE and(equals(raw_sessions.team_id, 99999), greaterOrEquals(fromUnixTimestamp(intDiv(toUInt64(bitShiftRight(raw_sessions.session_id_v7, 80)), 1000)), minus(assumeNotNull(toDateTime('2023-12-02 00:00:00', 'UTC')), toIntervalDay(3))), lessOrEquals(fromUnixTimestamp(intDiv(toUInt64(bitShiftRight(raw_sessions.session_id_v7, 80)), 1000)), plus(assumeNotNull(toDateTime('2023-12-02 23:59:59', 'UTC')), toIntervalDay(3))))
        GROUP BY raw_sessions.session_id_v7,
                 raw_sessions.session_id_v7) AS events__session ON equals(toUInt128(accurateCastOrNull(events.`$session_id`, 'UUID')), events__session.session_id_v7)
     LEFT OUTER JOIN
       (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
               person_distinct_id_overrides.distinct_id AS distinct_id
        FROM person_distinct_id_overrides
        WHERE equals(person_distinct_id_overrides.team_id, 99999)
        GROUP BY person_distinct_id_overrides.distinct_id
        HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
     WHERE and(equals(events.team_id, 99999), and(isNotNull(events.`$session_id`), or(equals(events.event, '$pageview'), equals(events.event, '$screen')), or(and(greaterOrEquals(events.timestamp, assumeNotNull(toDateTime('2023-12-02 00:00:00', 'UTC'))), lessOrEquals(events.timestamp, assumeNotNull(toDateTime('2023-12-02 23:59:59', 'UTC')))), 0), 1))
     GROUP BY session_id
     HAVING or(and(ifNull(greaterOrEquals(start_timestamp, assumeNotNull(toDateTime('2023-12-02 00:00:00', 'UTC'))), 0), ifNull(lessOrEquals(start_timestamp, assumeNotNull(toDateTime('2023-12-02 23:59:59', 'UTC'))), 0)), 0))
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestWebOverviewSessionBasedQueryRunner.test_session_outside_range.1
  '''
  SELECT uniq(session_person_id) AS unique_users,
         NULL AS previous_unique_users,
         sum(filtered_pageview_count) AS total_filtered_pageview_count,
         NULL AS previous_total_filtered_pageview_count,
         uniq(session_id) AS unique_sessions,
         NULL AS previous_unique_sessions,
         avg(session_duration) AS avg_duration_s,
         NULL AS previous_avg_duration_s,
         avg(is_bounce) AS bounce_rate,
         NULL AS previous_bounce_rate
  FROM
    (SELECT any(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id)) AS session_person_id,
            events__session.session_id AS session_id,
            min(events__session.`$start_timestamp`) AS start_timestamp,
            any(events__session.`$session_duration`) AS session_duration,
            countIf(or(equals(events.event, '$pageview'), equals(events.event, '$screen'))) AS filtered_pageview_count,
            any(events__session.`$is_bounce`) AS is_bounce
     FROM events
     LEFT JOIN
       (SELECT toString(reinterpretAsUUID(bitOr(bitShiftLeft(raw_sessions.session_id_v7, 64), bitShiftRight(raw_sessions.session_id_v7, 64)))) AS session_id,
               min(raw_sessions.min_timestamp) AS `$start_timestamp`,
               dateDiff('second', min(raw_sessions.min_timestamp), max(raw_sessions.max_timestamp)) AS `$session_duration`,
               if(ifNull(equals(uniqMerge(raw_sessions.pageview_uniq), 0), 0), NULL, not(or(ifNull(greater(uniqMerge(raw_sessions.pageview_uniq), 1), 0), ifNull(greater(uniqMerge(raw_sessions.autocapture_uniq), 0), 0), ifNull(greaterOrEquals(dateDiff('second', min(raw_sessions.min_timestamp), max(raw_sessions.max_timestamp)), 10), 0)))) AS `$is_bounce`,
               raw_sessions.session_id_v7 AS session_id_v7
        FROM raw_sessions
        WHERE equals(raw_sessions.team_id, 99999)
        GROUP BY raw_sessions.session_id_v7,
                 raw_sessions.session_id_v7) AS events__session ON equals(toUInt128(accurateCastOrNull(events.`$session_id`, 'UUID')), events__session.session_id_v7)
     LEFT OUTER JOIN
       (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
               person_distinct_id_overrides.distinct_id AS distinct_id
        FROM person_distinct_id_overrides
        WHERE equals(person_distinct_id_overrides.team_id, 99999)
        GROUP BY person_distinct_id_overrides.distinct_id
        HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
     WHERE and(equals(events.team_id, 99999), and(isNotNull(events.`$session_id`), or(equals(events.event, '$pageview'), equals(events.event, '$screen')), 1))
     GROUP BY session_id
     HAVING or(and(ifNull(greaterOrEquals(start_timestamp, assumeNotNull(toDateTime('2023-12-02 00:00:00', 'UTC'))), 0), ifNull(lessOrEquals(start_timestamp, assumeNotNull(toDateTime('2023-12-02 23:59:59', 'UTC'))), 0)), 0))
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestWebOverviewSessionBasedQueryRunner.test_timezone_conversion_respected
  '''
  SELECT uniq(session_person_id) AS unique_users,
         NULL AS previous_unique_users,
         sum(filtered_pageview_count) AS total_filtered_pageview_count,
         NULL AS previous_total_filtered_pageview_count,
         uniq(session_id) AS unique_sessions,
         NULL AS previous_unique_sessions,
         avg(session_duration) AS avg_duration_s,
         NULL AS previous_avg_duration_s,
         avg(is_bounce) AS bounce_rate,
         NULL AS previous_bounce_rate
  FROM
    (SELECT any(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id)) AS session_person_id,
            events__session.session_id AS session_id,
            min(events__session.`$start_timestamp`) AS start_timestamp,
            any(events__session.`$session_duration`) AS session_duration,
            countIf(or(equals(events.event, '$pageview'), equals(events.event, '$screen'))) AS filtered_pageview_count,
            any(events__session.`$is_bounce`) AS is_bounce
     FROM events
     LEFT JOIN
       (SELECT toString(reinterpretAsUUID(bitOr(bitShiftLeft(raw_sessions.session_id_v7, 64), bitShiftRight(raw_sessions.session_id_v7, 64)))) AS session_id,
               min(raw_sessions.min_timestamp) AS `$start_timestamp`,
               dateDiff('second', min(raw_sessions.min_timestamp), max(raw_sessions.max_timestamp)) AS `$session_duration`,
               if(ifNull(equals(uniqMerge(raw_sessions.pageview_uniq), 0), 0), NULL, not(or(ifNull(greater(uniqMerge(raw_sessions.pageview_uniq), 1), 0), ifNull(greater(uniqMerge(raw_sessions.autocapture_uniq), 0), 0), ifNull(greaterOrEquals(dateDiff('second', min(raw_sessions.min_timestamp), max(raw_sessions.max_timestamp)), 10), 0)))) AS `$is_bounce`,
               raw_sessions.session_id_v7 AS session_id_v7
        FROM raw_sessions
        WHERE equals(raw_sessions.team_id, 99999)
        GROUP BY raw_sessions.session_id_v7,
                 raw_sessions.session_id_v7) AS events__session ON equals(toUInt128(accurateCastOrNull(events.`$session_id`, 'UUID')), events__session.session_id_v7)
     LEFT OUTER JOIN
       (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
               person_distinct_id_overrides.distinct_id AS distinct_id
        FROM person_distinct_id_overrides
        WHERE equals(person_distinct_id_overrides.team_id, 99999)
        GROUP BY person_distinct_id_overrides.distinct_id
        HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
     WHERE and(equals(events.team_id, 99999), and(isNotNull(events.`$session_id`), or(equals(events.event, '$pageview'), equals(events.event, '$screen')), 1))
     GROUP BY session_id
     HAVING or(and(ifNull(greaterOrEquals(start_timestamp, assumeNotNull(toDateTime('2023-12-01 00:00:00', 'UTC'))), 0), ifNull(lessOrEquals(start_timestamp, assumeNotNull(toDateTime('2023-12-01 23:59:59', 'UTC'))), 0)), 0))
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
# name: TestWebOverviewSessionBasedQueryRunner.test_timezone_conversion_respected.1
  '''
  SELECT uniq(session_person_id) AS unique_users,
         NULL AS previous_unique_users,
         sum(filtered_pageview_count) AS total_filtered_pageview_count,
         NULL AS previous_total_filtered_pageview_count,
         uniq(session_id) AS unique_sessions,
         NULL AS previous_unique_sessions,
         avg(session_duration) AS avg_duration_s,
         NULL AS previous_avg_duration_s,
         avg(is_bounce) AS bounce_rate,
         NULL AS previous_bounce_rate
  FROM
    (SELECT any(if(not(empty(events__override.distinct_id)), events__override.person_id, events.person_id)) AS session_person_id,
            events__session.session_id AS session_id,
            min(events__session.`$start_timestamp`) AS start_timestamp,
            any(events__session.`$session_duration`) AS session_duration,
            countIf(or(equals(events.event, '$pageview'), equals(events.event, '$screen'))) AS filtered_pageview_count,
            any(events__session.`$is_bounce`) AS is_bounce
     FROM events
     LEFT JOIN
       (SELECT toString(reinterpretAsUUID(bitOr(bitShiftLeft(raw_sessions.session_id_v7, 64), bitShiftRight(raw_sessions.session_id_v7, 64)))) AS session_id,
               min(toTimeZone(raw_sessions.min_timestamp, 'America/New_York')) AS `$start_timestamp`,
               dateDiff('second', min(toTimeZone(raw_sessions.min_timestamp, 'America/New_York')), max(toTimeZone(raw_sessions.max_timestamp, 'America/New_York'))) AS `$session_duration`,
               if(ifNull(equals(uniqMerge(raw_sessions.pageview_uniq), 0), 0), NULL, not(or(ifNull(greater(uniqMerge(raw_sessions.pageview_uniq), 1), 0), ifNull(greater(uniqMerge(raw_sessions.autocapture_uniq), 0), 0), greaterOrEquals(dateDiff('second', min(toTimeZone(raw_sessions.min_timestamp, 'America/New_York')), max(toTimeZone(raw_sessions.max_timestamp, 'America/New_York'))), 10)))) AS `$is_bounce`,
               raw_sessions.session_id_v7 AS session_id_v7
        FROM raw_sessions
        WHERE equals(raw_sessions.team_id, 99999)
        GROUP BY raw_sessions.session_id_v7,
                 raw_sessions.session_id_v7) AS events__session ON equals(toUInt128(accurateCastOrNull(events.`$session_id`, 'UUID')), events__session.session_id_v7)
     LEFT OUTER JOIN
       (SELECT argMax(person_distinct_id_overrides.person_id, person_distinct_id_overrides.version) AS person_id,
               person_distinct_id_overrides.distinct_id AS distinct_id
        FROM person_distinct_id_overrides
        WHERE equals(person_distinct_id_overrides.team_id, 99999)
        GROUP BY person_distinct_id_overrides.distinct_id
        HAVING ifNull(equals(argMax(person_distinct_id_overrides.is_deleted, person_distinct_id_overrides.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__override ON equals(events.distinct_id, events__override.distinct_id)
     WHERE and(equals(events.team_id, 99999), and(isNotNull(events.`$session_id`), or(equals(events.event, '$pageview'), equals(events.event, '$screen')), 1))
     GROUP BY session_id
     HAVING or(and(ifNull(greaterOrEquals(start_timestamp, assumeNotNull(toDateTime('2023-12-01 00:00:00', 'America/New_York'))), 0), ifNull(lessOrEquals(start_timestamp, assumeNotNull(toDateTime('2023-12-01 23:59:59', 'America/New_York'))), 0)), 0))
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=0,
                     transform_null_in=1,
                     optimize_min_equality_disjunction_chain_length=4294967295,
                     allow_experimental_join_condition=1
  '''
# ---
