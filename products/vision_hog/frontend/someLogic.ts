import { actions, kea, path, props, reducers } from 'kea'

// import api from 'lib/api' // Your project's API utility if you have one
import type { someLogicType } from './someLogicType' // This will be auto-generated by Kea typegen

export interface SomeLogicProps {
    // Define any props your logic might need here
    // exampleProp?: string
}

export const someLogic = kea<someLogicType>([
    path(['products', 'visionHog', 'frontend', 'someLogic']),
    props({} as SomeLogicProps), // Pass empty props object for now

    actions({
        // Example: define an action to load data from your temp backend
        // loadTempBackendData: true,
        // setTempBackendData: (data: any) => ({ data }),
        // setTempBackendError: (error: string) => ({ error }),
        setVideoUrl: (url: string) => ({ url }),
    }),

    reducers({
        // Example: store data or loading/error states
        // tempBackendData: [null as any | null, { setTempBackendData: (_, { data }) => data }],
        // isLoadingTempBackend: [
        //     false,
        //     {
        //         loadTempBackendData: () => true,
        //         setTempBackendData: () => false,
        //         setTempBackendError: () => false,
        //     },
        // ],
        // tempBackendError: [null as string | null, {
        //     loadTempBackendData: () => null,
        //     setTempBackendError: (_, { error }) => error
        // }]
        videoUrl: [
            '',
            {
                setVideoUrl: (_, { url }) => url,
            },
        ],
    }),

    // listeners(({ actions }) => ({
    //     loadTempBackendData: async () => {
    //         try {
    //             // const response = await api.get('/api/visionhog/temp_endpoint') // Replace with actual API call
    //             // actions.setTempBackendData(response)
    //             console.log('Simulating API call to /api/visionhog/temp_endpoint')
    //             // Simulate a successful response for now
    //             actions.setTempBackendData({ message: 'Data from temp backend (mocked)' })
    //         } catch (e: any) {
    //             actions.setTempBackendError(e.message || 'Failed to load data.')
    //         }
    //     },
    // })),

    // // If you want to load data when the logic is mounted:
    // // afterMount(({ actions }) => {
    // //     actions.loadTempBackendData()
    // // }),
])
