{
  "version": 3,
  "sources": ["../src/lib/components/SceneDashboardChoice/sceneDashboardChoiceModalLogic.ts", "../src/lib/components/SceneDashboardChoice/SceneDashboardChoiceModal.tsx", "../src/lib/components/SceneDashboardChoice/SceneIcon.tsx", "../src/lib/components/SceneDashboardChoice/SceneDashboardChoiceRequired.tsx"],
  "sourcesContent": ["import Fuse from 'fuse.js'\nimport { actions, connect, kea, key, listeners, path, props, reducers, selectors } from 'kea'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\nimport posthog from 'posthog-js'\nimport { Scene } from 'scenes/sceneTypes'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { dashboardsModel } from '~/models/dashboardsModel'\n\nimport type { sceneDashboardChoiceModalLogicType } from './sceneDashboardChoiceModalLogicType'\n\nexport type DashboardCompatibleScenes = Scene.ProjectHomepage | Scene.Person | Scene.Group\n\nexport interface SceneDashboardChoiceModalProps {\n    scene: DashboardCompatibleScenes\n}\n\nexport const sceneDescription: Record<DashboardCompatibleScenes, string> = {\n    [Scene.Person]: 'persons',\n    [Scene.Group]: 'groups',\n    [Scene.ProjectHomepage]: 'this project',\n}\n\nexport const sceneDashboardChoiceModalLogic = kea<sceneDashboardChoiceModalLogicType>([\n    path((key) => ['lib', 'components', 'SceneDashboardChoice', 'sceneDashboardChoiceModalLogic', key || 'unknown']),\n    props({} as SceneDashboardChoiceModalProps),\n    key((props) => `${props.scene}`),\n    connect({\n        logic: [eventUsageLogic],\n        actions: [teamLogic, ['updateCurrentTeam'], userLogic, ['setUserScenePersonalisation']],\n        values: [teamLogic, ['currentTeam'], userLogic, ['user'], dashboardsModel, ['nameSortedDashboards']],\n    }),\n    actions({\n        showSceneDashboardChoiceModal: () => true,\n        closeSceneDashboardChoiceModal: () => true,\n        setSceneDashboardChoice: (dashboardId: number) => ({ dashboardId }),\n        setSearchTerm: (searchTerm: string) => ({ searchTerm }),\n    }),\n    reducers({\n        searchTerm: [null as string | null, { setSearchTerm: (_, { searchTerm }) => searchTerm }],\n        isOpen: [false, { showSceneDashboardChoiceModal: () => true, closeSceneDashboardChoiceModal: () => false }],\n    }),\n    selectors(({ props }) => ({\n        currentDashboardId: [\n            (s) => [s.currentTeam, s.user],\n            (currentTeam, user) => {\n                let currentDashboard = user?.scene_personalisation?.find(\n                    (choice) => choice.scene === props.scene\n                )?.dashboard\n\n                if (!currentDashboard && props.scene === Scene.ProjectHomepage) {\n                    currentDashboard = currentTeam?.primary_dashboard\n                }\n\n                return (typeof currentDashboard === 'number' ? currentDashboard : currentDashboard?.id) ?? null\n            },\n        ],\n        dashboards: [\n            (s) => [s.searchTerm, s.nameSortedDashboards],\n            (searchTerm, dashboards) => {\n                dashboards = dashboards\n                    .filter((d) => !d.deleted)\n                    .sort((a, b) => (a.name ?? 'Untitled').localeCompare(b.name ?? 'Untitled'))\n                if (!searchTerm) {\n                    return dashboards\n                }\n                return new Fuse(dashboards, {\n                    keys: ['key', 'name', 'description', 'tags'],\n                    threshold: 0.3,\n                })\n                    .search(searchTerm)\n                    .map((result) => result.item)\n            },\n        ],\n    })),\n    listeners(({ actions, props }) => ({\n        setSceneDashboardChoice: async ({ dashboardId }) => {\n            // TODO needs to report scene and dashboard\n            if (props.scene === Scene.ProjectHomepage) {\n                // TODO be able to save individual or team level home dashboard\n                actions.updateCurrentTeam({ primary_dashboard: dashboardId })\n                posthog.capture('primary dashboard changed')\n            } else {\n                actions.setUserScenePersonalisation(props.scene, dashboardId)\n                posthog.capture('scene dashboard choice set', { scene: props.scene, dashboardId: dashboardId })\n            }\n        },\n        showSceneDashboardChoiceModal: async () => {\n            if (props.scene === Scene.ProjectHomepage) {\n                posthog.capture('primary dashboard modal opened')\n            } else {\n                posthog.capture('scene dashboard choice modal opened', { scene: props.scene })\n            }\n        },\n    })),\n])\n", "import { LemonDivider, LemonInput } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { SceneIcon } from 'lib/components/SceneDashboardChoice/SceneIcon'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonModal } from 'lib/lemon-ui/LemonModal'\nimport { LemonRow } from 'lib/lemon-ui/LemonRow'\nimport { LemonSkeleton } from 'lib/lemon-ui/LemonSkeleton'\n\nimport { dashboardsModel } from '~/models/dashboardsModel'\n\nimport {\n    sceneDashboardChoiceModalLogic,\n    SceneDashboardChoiceModalProps,\n    sceneDescription,\n} from './sceneDashboardChoiceModalLogic'\n\nexport function SceneDashboardChoiceModal({ scene }: SceneDashboardChoiceModalProps): JSX.Element {\n    const modalLogic = sceneDashboardChoiceModalLogic({ scene })\n    const { isOpen, currentDashboardId, dashboards, searchTerm } = useValues(modalLogic)\n    const { closeSceneDashboardChoiceModal, setSceneDashboardChoice, setSearchTerm } = useActions(modalLogic)\n    const { dashboardsLoading } = useValues(dashboardsModel)\n\n    return (\n        <LemonModal\n            isOpen={isOpen}\n            onClose={closeSceneDashboardChoiceModal}\n            title={<>Select a default dashboard for {sceneDescription[scene]}</>}\n            footer={\n                <>\n                    <LemonButton\n                        type=\"secondary\"\n                        data-attr=\"close-scene-dashboard-choice-modal\"\n                        onClick={closeSceneDashboardChoiceModal}\n                    >\n                        Close\n                    </LemonButton>\n                </>\n            }\n        >\n            {dashboardsLoading ? (\n                <div className=\"space-y-2\">\n                    <LemonSkeleton.Row repeat={4} />\n                </div>\n            ) : (\n                <>\n                    <LemonInput\n                        type=\"search\"\n                        placeholder=\"Search for dashboards\"\n                        onChange={setSearchTerm}\n                        value={searchTerm ?? undefined}\n                        fullWidth={true}\n                        allowClear={true}\n                        className=\"mb-4\"\n                    />\n                    <LemonDivider />\n                    <div className=\"space-y-2 min-h-100\">\n                        {dashboards.map((dashboard) => {\n                            const isCurrentChoice = dashboard.id === currentDashboardId\n                            const rowContents = (\n                                <div className=\"flex flex-1 items-center justify-between overflow-hidden\">\n                                    <div className=\"flex-1 flex flex-col justify-center overflow-hidden\">\n                                        <strong>{dashboard.name}</strong>\n                                        <span className=\"text-text-3000 font-normal text-ellipsis\">\n                                            {dashboard.description}\n                                        </span>\n                                    </div>\n                                    {isCurrentChoice ? (\n                                        <>\n                                            <SceneIcon scene={scene} size=\"small\" /> <span>Default</span>\n                                        </>\n                                    ) : (\n                                        <strong className=\"set-default-text\">Set as default</strong>\n                                    )}\n                                </div>\n                            )\n                            if (isCurrentChoice) {\n                                return (\n                                    <LemonRow key={dashboard.id} fullWidth status=\"muted\" className=\"dashboard-row\">\n                                        {rowContents}\n                                    </LemonRow>\n                                )\n                            }\n                            return (\n                                <LemonButton\n                                    key={dashboard.id}\n                                    fullWidth\n                                    className=\"dashboard-row\"\n                                    onClick={() => {\n                                        setSceneDashboardChoice(dashboard.id)\n                                        setSearchTerm('')\n                                        closeSceneDashboardChoiceModal()\n                                    }}\n                                >\n                                    {rowContents}\n                                </LemonButton>\n                            )\n                        })}\n                    </div>\n                </>\n            )}\n        </LemonModal>\n    )\n}\n", "import { IconHome, IconPerson } from '@posthog/icons'\nimport clsx from 'clsx'\nimport { DashboardCompatibleScenes } from 'lib/components/SceneDashboardChoice/sceneDashboardChoiceModalLogic'\nimport { Scene } from 'scenes/sceneTypes'\n\nexport function SceneIcon(props: { scene: DashboardCompatibleScenes; size: 'small' | 'large' }): JSX.Element | null {\n    const className = clsx('text-warning', props.size === 'small' ? 'text-lg' : 'text-3xl')\n    if (props.scene === Scene.ProjectHomepage) {\n        return <IconHome className={className} />\n    } else if (props.scene === Scene.Group) {\n        return <IconPerson className={className} />\n    } else if (props.scene === Scene.Person) {\n        return <IconPerson className={className} />\n    } else {\n        return null\n    }\n}\n", "import {\n    DashboardCompatibleScenes,\n    sceneDescription,\n} from 'lib/components/SceneDashboardChoice/sceneDashboardChoiceModalLogic'\nimport { SceneIcon } from 'lib/components/SceneDashboardChoice/SceneIcon'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { Scene } from 'scenes/sceneTypes'\n\nexport function SceneDashboardChoiceRequired(props: {\n    open: () => void\n    scene: DashboardCompatibleScenes\n}): JSX.Element {\n    return (\n        <div className=\"empty-state-container flex flex-col items-center\">\n            <h1>\n                <SceneIcon scene={props.scene} size=\"large\" /> There isn\u2019t a{' '}\n                {props.scene === Scene.ProjectHomepage ? <>default </> : null}dashboard set for{' '}\n                {sceneDescription[props.scene]}\n            </h1>\n            {props.scene === Scene.ProjectHomepage ? (\n                <p className=\"mb-4\">\n                    Default dashboards are shown to everyone in the project. When you set a default, it\u2019ll show up here.\n                </p>\n            ) : null}\n            <LemonButton type=\"primary\" data-attr={`${props.scene}-choose-dashboard-from-empty`} onClick={props.open}>\n                Select a dashboard\n            </LemonButton>\n        </div>\n    )\n}\n"],
  "mappings": "8OAAAA,IAAAC,IAAAC,IACA,IAAAC,EAAwF,OAiBjF,IAAMC,EAA8D,CACtE,OAAe,UACf,MAAc,SACd,gBAAwB,cAC7B,EAEaC,KAAiC,OAAwC,IAClF,QAAMC,GAAQ,CAAC,MAAO,aAAc,uBAAwB,iCAAkCA,GAAO,SAAS,CAAC,KAC/G,SAAM,CAAC,CAAmC,KAC1C,OAAKC,GAAU,GAAGA,EAAM,KAAK,EAAE,KAC/B,WAAQ,CACJ,MAAO,CAACC,CAAe,EACvB,QAAS,CAACC,EAAW,CAAC,mBAAmB,EAAGC,EAAW,CAAC,6BAA6B,CAAC,EACtF,OAAQ,CAACD,EAAW,CAAC,aAAa,EAAGC,EAAW,CAAC,MAAM,EAAGC,EAAiB,CAAC,sBAAsB,CAAC,CACvG,CAAC,KACD,WAAQ,CACJ,8BAA+B,IAAM,GACrC,+BAAgC,IAAM,GACtC,wBAA0BC,IAAyB,CAAE,YAAAA,CAAY,GACjE,cAAgBC,IAAwB,CAAE,WAAAA,CAAW,EACzD,CAAC,KACD,YAAS,CACL,WAAY,CAAC,KAAuB,CAAE,cAAe,CAACC,EAAG,CAAE,WAAAD,CAAW,IAAMA,CAAW,CAAC,EACxF,OAAQ,CAAC,GAAO,CAAE,8BAA+B,IAAM,GAAM,+BAAgC,IAAM,EAAM,CAAC,CAC9G,CAAC,KACD,aAAU,CAAC,CAAE,MAAAN,CAAM,KAAO,CACtB,mBAAoB,CACfQ,GAAM,CAACA,EAAE,YAAaA,EAAE,IAAI,EAC7B,CAACC,EAAaC,IAAS,CACnB,IAAIC,EAAmBD,GAAM,uBAAuB,KAC/CE,GAAWA,EAAO,QAAUZ,EAAM,KACvC,GAAG,UAEH,MAAI,CAACW,GAAoBX,EAAM,QAAU,oBACrCW,EAAmBF,GAAa,oBAG5B,OAAOE,GAAqB,SAAWA,EAAmBA,GAAkB,KAAO,IAC/F,CACJ,EACA,WAAY,CACPH,GAAM,CAACA,EAAE,WAAYA,EAAE,oBAAoB,EAC5C,CAACF,EAAYO,KACTA,EAAaA,EACR,OAAQC,GAAM,CAACA,EAAE,OAAO,EACxB,KAAK,CAACC,EAAGC,KAAOD,EAAE,MAAQ,YAAY,cAAcC,EAAE,MAAQ,UAAU,CAAC,EACzEV,EAGE,IAAIW,EAAKJ,EAAY,CACxB,KAAM,CAAC,MAAO,OAAQ,cAAe,MAAM,EAC3C,UAAW,EACf,CAAC,EACI,OAAOP,CAAU,EACjB,IAAKY,GAAWA,EAAO,IAAI,EAPrBL,EASnB,CACJ,EAAE,KACF,aAAU,CAAC,CAAE,QAAAM,EAAS,MAAAnB,CAAM,KAAO,CAC/B,wBAAyB,MAAO,CAAE,YAAAK,CAAY,IAAM,CAE5CL,EAAM,QAAU,mBAEhBmB,EAAQ,kBAAkB,CAAE,kBAAmBd,CAAY,CAAC,EAC5De,EAAQ,QAAQ,2BAA2B,IAE3CD,EAAQ,4BAA4BnB,EAAM,MAAOK,CAAW,EAC5De,EAAQ,QAAQ,6BAA8B,CAAE,MAAOpB,EAAM,MAAO,YAAaK,CAAY,CAAC,EAEtG,EACA,8BAA+B,SAAY,CACnCL,EAAM,QAAU,kBAChBoB,EAAQ,QAAQ,gCAAgC,EAEhDA,EAAQ,QAAQ,sCAAuC,CAAE,MAAOpB,EAAM,KAAM,CAAC,CAErF,CACJ,EAAE,CACN,CAAC,EChGDqB,IAAAC,IAAAC,IACA,IAAAC,EAAsC,OCDtCC,IAAAC,IAAAC,IACA,IAAAC,EAAiB,OAOF,IAAAC,EAAA,OAHR,SAASC,EAAUC,EAA0F,CAChH,IAAMC,KAAY,EAAAC,SAAK,eAAgBF,EAAM,OAAS,QAAU,UAAY,UAAU,EACtF,OAAIA,EAAM,QAAU,qBACT,OAACG,EAAA,CAAS,UAAWF,EAAW,EAChCD,EAAM,QAAU,WAChB,OAACI,EAAA,CAAW,UAAWH,EAAW,EAClCD,EAAM,QAAU,YAChB,OAACI,EAAA,CAAW,UAAWH,EAAW,EAElC,IAEf,CDUmB,IAAAI,EAAA,OAVZ,SAASC,GAA0B,CAAE,MAAAC,CAAM,EAAgD,CAC9F,IAAMC,EAAaC,EAA+B,CAAE,MAAAF,CAAM,CAAC,EACrD,CAAE,OAAAG,EAAQ,mBAAAC,EAAoB,WAAAC,EAAY,WAAAC,CAAW,KAAI,aAAUL,CAAU,EAC7E,CAAE,+BAAAM,EAAgC,wBAAAC,EAAyB,cAAAC,CAAc,KAAI,cAAWR,CAAU,EAClG,CAAE,kBAAAS,CAAkB,KAAI,aAAUC,CAAe,EAEvD,SACI,OAACC,EAAA,CACG,OAAQT,EACR,QAASI,EACT,SAAO,oBAAE,4CAAgCM,EAAiBb,CAAK,GAAE,EACjE,UACI,mBACI,mBAACc,EAAA,CACG,KAAK,YACL,YAAU,qCACV,QAASP,EACZ,iBAED,EACJ,EAGH,SAAAG,KACG,OAAC,OAAI,UAAU,YACX,mBAACK,EAAc,IAAd,CAAkB,OAAQ,EAAG,EAClC,KAEA,oBACI,oBAACC,EAAA,CACG,KAAK,SACL,YAAY,wBACZ,SAAUP,EACV,MAAOH,GAAc,OACrB,UAAW,GACX,WAAY,GACZ,UAAU,OACd,KACA,OAACW,EAAA,EAAa,KACd,OAAC,OAAI,UAAU,sBACV,SAAAZ,EAAW,IAAKa,GAAc,CAC3B,IAAMC,EAAkBD,EAAU,KAAOd,EACnCgB,KACF,QAAC,OAAI,UAAU,2DACX,qBAAC,OAAI,UAAU,sDACX,oBAAC,UAAQ,SAAAF,EAAU,KAAK,KACxB,OAAC,QAAK,UAAU,2CACX,SAAAA,EAAU,YACf,GACJ,EACCC,KACG,oBACI,oBAACE,EAAA,CAAU,MAAOrB,EAAO,KAAK,QAAQ,EAAE,OAAC,OAAC,QAAK,mBAAO,GAC1D,KAEA,OAAC,UAAO,UAAU,mBAAmB,0BAAc,GAE3D,EAEJ,OAAImB,KAEI,OAACG,EAAA,CAA4B,UAAS,GAAC,OAAO,QAAQ,UAAU,gBAC3D,SAAAF,GADUF,EAAU,EAEzB,KAIJ,OAACJ,EAAA,CAEG,UAAS,GACT,UAAU,gBACV,QAAS,IAAM,CACXN,EAAwBU,EAAU,EAAE,EACpCT,EAAc,EAAE,EAChBF,EAA+B,CACnC,EAEC,SAAAa,GATIF,EAAU,EAUnB,CAER,CAAC,EACL,GACJ,EAER,CAER,CEtGAK,IAAAC,IAAAC,IAcY,IAAAC,EAAA,OANL,SAASC,GAA6BC,EAG7B,CACZ,SACI,QAAC,OAAI,UAAU,mDACX,qBAAC,MACG,oBAACC,EAAA,CAAU,MAAOD,EAAM,MAAO,KAAK,QAAQ,EAAE,sBAAe,IAC5DA,EAAM,QAAU,qBAAwB,mBAAE,oBAAQ,EAAM,KAAK,oBAAkB,IAC/EE,EAAiBF,EAAM,KAAK,GACjC,EACCA,EAAM,QAAU,qBACb,OAAC,KAAE,UAAU,OAAO,qHAEpB,EACA,QACJ,OAACG,EAAA,CAAY,KAAK,UAAU,YAAW,GAAGH,EAAM,KAAK,+BAAgC,QAASA,EAAM,KAAM,8BAE1G,GACJ,CAER",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "sceneDescription", "sceneDashboardChoiceModalLogic", "key", "props", "eventUsageLogic", "teamLogic", "userLogic", "dashboardsModel", "dashboardId", "searchTerm", "_", "s", "currentTeam", "user", "currentDashboard", "choice", "dashboards", "d", "a", "b", "Fuse", "result", "actions", "Co", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_jsx_runtime", "SceneIcon", "props", "className", "clsx", "IconHome", "IconPerson", "import_jsx_runtime", "SceneDashboardChoiceModal", "scene", "modalLogic", "sceneDashboardChoiceModalLogic", "isOpen", "currentDashboardId", "dashboards", "searchTerm", "closeSceneDashboardChoiceModal", "setSceneDashboardChoice", "setSearchTerm", "dashboardsLoading", "dashboardsModel", "LemonModal", "sceneDescription", "LemonButton", "LemonSkeleton", "LemonInput", "LemonDivider", "dashboard", "isCurrentChoice", "rowContents", "SceneIcon", "LemonRow", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "SceneDashboardChoiceRequired", "props", "SceneIcon", "sceneDescription", "LemonButton"]
}
