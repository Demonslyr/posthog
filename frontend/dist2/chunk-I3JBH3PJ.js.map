{
  "version": 3,
  "sources": ["../src/lib/components/IframedToolbarBrowser/utils.ts"],
  "sourcesContent": ["import { CUSTOM_OPTION_KEY } from 'lib/components/DateFilter/types'\nimport { HeatmapFilters } from 'lib/components/heatmaps/types'\nimport { dateMapping } from 'lib/utils'\n\nexport enum PostHogAppToolbarEvent {\n    PH_TOOLBAR_INIT = 'ph-toolbar-init',\n    PH_TOOLBAR_READY = 'ph-toolbar-ready',\n    PH_APP_INIT = 'ph-app-init',\n    PH_HEATMAPS_CONFIG = 'ph-heatmaps-config',\n    PH_PATCH_HEATMAP_FILTERS = 'ph-patch-heatmap-filters',\n    PH_HEATMAPS_FIXED_POSITION_MODE = 'ph-heatmaps-fixed-position-mode',\n    PH_HEATMAPS_COLOR_PALETTE = 'ph-heatmaps-color-palette',\n    PH_HEATMAPS_COMMON_FILTERS = 'ph-heatmaps-common-filters',\n    PH_TOOLBAR_HEATMAP_LOADING = 'ph-toolbar-heatmap-loading',\n    PH_TOOLBAR_HEATMAP_LOADED = 'ph-toolbar-heatmap-loaded',\n    PH_TOOLBAR_HEATMAP_FAILED = 'ph-toolbar-heatmap-failed',\n    PH_ELEMENT_SELECTOR = 'ph-element-selector',\n    PH_NEW_ACTION_NAME = 'ph-new-action-name',\n    PH_NEW_ACTION_CREATED = 'ph-new-action-created',\n    PH_TOOLBAR_NAVIGATED = 'ph-toolbar-navigated',\n}\n\nexport const DEFAULT_HEATMAP_FILTERS: HeatmapFilters = {\n    enabled: true,\n    type: 'click',\n    viewportAccuracy: 0.9,\n    aggregation: 'total_count',\n}\nexport const calculateViewportRange = (\n    heatmapFilters: HeatmapFilters,\n    windowWidth: number\n): { max: number; min: number } => {\n    const viewportAccuracy = heatmapFilters.viewportAccuracy ?? 0.2\n    const extraPixels = windowWidth - windowWidth * viewportAccuracy\n\n    const minWidth = Math.max(0, windowWidth - extraPixels)\n    const maxWidth = windowWidth + extraPixels\n\n    return {\n        min: Math.round(minWidth),\n        max: Math.round(maxWidth),\n    }\n}\n\n// some of the date options we allow in insights don't apply to heatmaps\n// let's filter the list down\nconst dateItemDenyList = ['Last 180 days', 'This month', 'Previous month', 'Year to date', 'All time']\nexport const heatmapDateOptions = dateMapping.filter(\n    (dm) => dm.key !== CUSTOM_OPTION_KEY && !dateItemDenyList.includes(dm.key)\n)\n"],
  "mappings": "mHAAAA,IAAAC,IAAAC,IAsBO,IAAMC,EAA0C,CACnD,QAAS,GACT,KAAM,QACN,iBAAkB,GAClB,YAAa,aACjB,EACaC,EAAyB,CAClCC,EACAC,IAC+B,CAC/B,IAAMC,EAAmBF,EAAe,kBAAoB,GACtDG,EAAcF,EAAcA,EAAcC,EAE1CE,EAAW,KAAK,IAAI,EAAGH,EAAcE,CAAW,EAChDE,EAAWJ,EAAcE,EAE/B,MAAO,CACH,IAAK,KAAK,MAAMC,CAAQ,EACxB,IAAK,KAAK,MAAMC,CAAQ,CAC5B,CACJ,EAIMC,EAAmB,CAAC,gBAAiB,aAAc,iBAAkB,eAAgB,UAAU,EACxFC,EAAqBC,EAAY,OACzCC,GAAOA,EAAG,MAAQC,GAAqB,CAACJ,EAAiB,SAASG,EAAG,GAAG,CAC7E",
  "names": ["init_dirname", "init_buffer", "init_process", "DEFAULT_HEATMAP_FILTERS", "calculateViewportRange", "heatmapFilters", "windowWidth", "viewportAccuracy", "extraPixels", "minWidth", "maxWidth", "dateItemDenyList", "heatmapDateOptions", "dateMapping", "dm", "CUSTOM_OPTION_KEY"]
}
