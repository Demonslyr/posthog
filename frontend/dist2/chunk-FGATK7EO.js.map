{
  "version": 3,
  "sources": ["../src/scenes/groups/groupsListLogic.ts"],
  "sourcesContent": ["import { actions, afterMount, connect, kea, key, listeners, path, props, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { groupsAccessLogic } from 'lib/introductions/groupsAccessLogic'\nimport { projectLogic } from 'scenes/projectLogic'\n\nimport { groupsModel, Noun } from '~/models/groupsModel'\nimport { Group } from '~/types'\n\nimport type { groupsListLogicType } from './groupsListLogicType'\n\nexport interface GroupsPaginatedResponse {\n    next: string | null\n    previous: string | null\n    results: Group[]\n}\n\nexport interface GroupsListLogicProps {\n    groupTypeIndex: number\n}\n\nexport const groupsListLogic = kea<groupsListLogicType>([\n    props({} as GroupsListLogicProps),\n    key((props: GroupsListLogicProps) => props.groupTypeIndex),\n    path(['groups', 'groupsListLogic']),\n    connect({\n        values: [\n            projectLogic,\n            ['currentProjectId'],\n            groupsModel,\n            ['groupTypes', 'aggregationLabel'],\n            groupsAccessLogic,\n            ['groupsEnabled'],\n        ],\n    }),\n    actions(() => ({\n        loadGroups: (url?: string | null) => ({ url }),\n        setSearch: (search: string, debounce: boolean = true) => ({ search, debounce }),\n    })),\n    loaders(({ props, values }) => ({\n        groups: [\n            { next: null, previous: null, results: [] } as GroupsPaginatedResponse,\n            {\n                loadGroups: async ({ url }, breakpoint) => {\n                    await breakpoint(300)\n\n                    if (!values.groupsEnabled) {\n                        return values.groups\n                    }\n                    url =\n                        url ||\n                        `api/projects/${values.currentProjectId}/groups/?group_type_index=${props.groupTypeIndex}${\n                            values.search ? '&search=' + encodeURIComponent(values.search) : ''\n                        }`\n                    return await api.get(url)\n                },\n            },\n        ],\n    })),\n    reducers({\n        search: [\n            '',\n            {\n                setSearch: (_, { search }) => search,\n            },\n        ],\n    }),\n    selectors({\n        groupTypeName: [\n            (s, p) => [p.groupTypeIndex, s.aggregationLabel],\n            (groupTypeIndex, aggregationLabel): Noun =>\n                groupTypeIndex === -1 ? { singular: 'person', plural: 'persons' } : aggregationLabel(groupTypeIndex),\n        ],\n    }),\n    listeners(({ actions }) => ({\n        setSearch: async ({ debounce }, breakpoint) => {\n            if (debounce) {\n                await breakpoint(300)\n            }\n            actions.loadGroups()\n        },\n    })),\n    afterMount(({ actions }) => {\n        actions.loadGroups()\n    }),\n])\n"],
  "mappings": "yJAAAA,IAAAC,IAAAC,IAAA,IAAAC,EAAoG,OACpGC,EAAwB,OAoBjB,IAAMC,KAAkB,OAAyB,IACpD,SAAM,CAAC,CAAyB,KAChC,OAAKC,GAAgCA,EAAM,cAAc,KACzD,QAAK,CAAC,SAAU,iBAAiB,CAAC,KAClC,WAAQ,CACJ,OAAQ,CACJC,EACA,CAAC,kBAAkB,EACnBC,EACA,CAAC,aAAc,kBAAkB,EACjCC,EACA,CAAC,eAAe,CACpB,CACJ,CAAC,KACD,WAAQ,KAAO,CACX,WAAaC,IAAyB,CAAE,IAAAA,CAAI,GAC5C,UAAW,CAACC,EAAgBC,EAAoB,MAAU,CAAE,OAAAD,EAAQ,SAAAC,CAAS,EACjF,EAAE,KACF,WAAQ,CAAC,CAAE,MAAAN,EAAO,OAAAO,CAAO,KAAO,CAC5B,OAAQ,CACJ,CAAE,KAAM,KAAM,SAAU,KAAM,QAAS,CAAC,CAAE,EAC1C,CACI,WAAY,MAAO,CAAE,IAAAH,CAAI,EAAGI,KACxB,MAAMA,EAAW,GAAG,EAEfD,EAAO,eAGZH,EACIA,GACA,gBAAgBG,EAAO,gBAAgB,6BAA6BP,EAAM,cAAc,GACpFO,EAAO,OAAS,WAAa,mBAAmBA,EAAO,MAAM,EAAI,EACrE,GACG,MAAME,EAAI,IAAIL,CAAG,GAPbG,EAAO,OAS1B,CACJ,CACJ,EAAE,KACF,YAAS,CACL,OAAQ,CACJ,GACA,CACI,UAAW,CAACG,EAAG,CAAE,OAAAL,CAAO,IAAMA,CAClC,CACJ,CACJ,CAAC,KACD,aAAU,CACN,cAAe,CACX,CAACM,EAAGC,IAAM,CAACA,EAAE,eAAgBD,EAAE,gBAAgB,EAC/C,CAACE,EAAgBC,IACbD,IAAmB,GAAK,CAAE,SAAU,SAAU,OAAQ,SAAU,EAAIC,EAAiBD,CAAc,CAC3G,CACJ,CAAC,KACD,aAAU,CAAC,CAAE,QAAAE,CAAQ,KAAO,CACxB,UAAW,MAAO,CAAE,SAAAT,CAAS,EAAGE,IAAe,CACvCF,GACA,MAAME,EAAW,GAAG,EAExBO,EAAQ,WAAW,CACvB,CACJ,EAAE,KACF,cAAW,CAAC,CAAE,QAAAA,CAAQ,IAAM,CACxBA,EAAQ,WAAW,CACvB,CAAC,CACL,CAAC",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "groupsListLogic", "props", "projectLogic", "groupsModel", "groupsAccessLogic", "url", "search", "debounce", "values", "breakpoint", "api_default", "_", "s", "p", "groupTypeIndex", "aggregationLabel", "actions"]
}
