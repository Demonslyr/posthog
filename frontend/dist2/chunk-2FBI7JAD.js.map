{
  "version": 3,
  "sources": ["../src/scenes/experiments/ExperimentView/SummaryTable.tsx", "../src/scenes/experiments/ExperimentView/Info.tsx", "../src/scenes/experiments/ExperimentView/ExperimentDates.tsx"],
  "sourcesContent": ["import { IconInfo, IconRewindPlay } from '@posthog/icons'\nimport { LemonButton, LemonTable, LemonTableColumns, LemonTag, Tooltip } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { router } from 'kea-router'\nimport { EntityFilterInfo } from 'lib/components/EntityFilterInfo'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { LemonProgress } from 'lib/lemon-ui/LemonProgress'\nimport { humanFriendlyNumber } from 'lib/utils'\nimport posthog from 'posthog-js'\nimport { urls } from 'scenes/urls'\n\nimport {\n    ExperimentFunnelsQuery,\n    ExperimentMetric,\n    ExperimentTrendsQuery,\n    NodeKind,\n} from '~/queries/schema/schema-general'\nimport {\n    FilterLogicalOperator,\n    InsightType,\n    RecordingUniversalFilters,\n    ReplayTabs,\n    TrendExperimentVariant,\n} from '~/types'\n\nimport { experimentLogic } from '../experimentLogic'\nimport { getViewRecordingFilters } from '../utils'\nimport { VariantTag } from './components'\n\nexport function SummaryTable({\n    metric,\n    metricIndex = 0,\n    isSecondary = false,\n}: {\n    metric: ExperimentMetric | ExperimentTrendsQuery | ExperimentFunnelsQuery\n    metricIndex?: number\n    isSecondary?: boolean\n}): JSX.Element {\n    const {\n        experimentId,\n        experiment,\n        metricResults,\n        secondaryMetricResults,\n        tabularExperimentResults,\n        getMetricType,\n        exposureCountDataForVariant,\n        conversionRateForVariant,\n        experimentMathAggregationForTrends,\n        countDataForVariant,\n        getHighestProbabilityVariant,\n        credibleIntervalForVariant,\n        featureFlags,\n    } = useValues(experimentLogic)\n    const metricType = getMetricType(metric)\n    const result = isSecondary ? secondaryMetricResults?.[metricIndex] : metricResults?.[metricIndex]\n    if (!result) {\n        return <></>\n    }\n\n    const winningVariant = getHighestProbabilityVariant(result)\n\n    const columns: LemonTableColumns<any> = [\n        {\n            key: 'variants',\n            title: 'Variant',\n            render: function Key(_, item): JSX.Element {\n                return (\n                    <div className=\"flex items-center\">\n                        <VariantTag experimentId={experimentId} variantKey={item.key} />\n                    </div>\n                )\n            },\n        },\n    ]\n\n    if (metricType === InsightType.TRENDS) {\n        columns.push({\n            key: 'counts',\n            title: (\n                <div className=\"flex\">\n                    {result.insight?.[0] && 'action' in result.insight[0] && (\n                        <EntityFilterInfo filter={result.insight[0].action} />\n                    )}\n                    <span className=\"pl-1\">{experimentMathAggregationForTrends() ? 'metric' : 'count'}</span>\n                </div>\n            ),\n            render: function Key(_, variant): JSX.Element {\n                const count = countDataForVariant(result, variant.key)\n                if (!count) {\n                    return <>\u2014</>\n                }\n\n                return <div className=\"flex\">{humanFriendlyNumber(count)}</div>\n            },\n        })\n        columns.push({\n            key: 'exposure',\n            title: (\n                <div className=\"inline-flex items-center space-x-1\">\n                    <div className=\"\">Exposure</div>\n                    <Tooltip\n                        title={\n                            <div>\n                                The number of users who were exposed to this variant. By default, this is measured by\n                                the count of <LemonTag type=\"option\">$feature_flag_called</LemonTag> events per unique\n                                user. Check your metric settings to confirm how this is measured.\n                            </div>\n                        }\n                    >\n                        <IconInfo className=\"text-secondary text-base\" />\n                    </Tooltip>\n                </div>\n            ),\n            render: function Key(_, variant): JSX.Element {\n                const exposure = exposureCountDataForVariant(result, variant.key)\n                if (!exposure) {\n                    return <>\u2014</>\n                }\n\n                return <div>{humanFriendlyNumber(exposure)}</div>\n            },\n        })\n        columns.push({\n            key: 'mean',\n            title: 'Mean',\n            render: function Key(_, v): JSX.Element {\n                const variant = v as TrendExperimentVariant\n                if (!variant.count || !variant.absolute_exposure) {\n                    return <div className=\"font-semibold\">\u2014</div>\n                }\n\n                return <div className=\"font-semibold\">{(variant.count / variant.absolute_exposure).toFixed(2)}</div>\n            },\n        })\n        columns.push({\n            key: 'delta',\n            title: (\n                <div className=\"inline-flex items-center space-x-1\">\n                    <div className=\"\">Delta %</div>\n                    <Tooltip title=\"Delta % indicates the percentage change in the mean between the control and the test variant.\">\n                        <IconInfo className=\"text-secondary text-base\" />\n                    </Tooltip>\n                </div>\n            ),\n            render: function Key(_, v): JSX.Element {\n                const variant = v as TrendExperimentVariant\n\n                if (variant.key === 'control') {\n                    return <em>Baseline</em>\n                }\n\n                const controlVariant = (result.variants as TrendExperimentVariant[]).find(\n                    ({ key }) => key === 'control'\n                ) as TrendExperimentVariant\n\n                if (\n                    !variant.count ||\n                    !variant.absolute_exposure ||\n                    !controlVariant ||\n                    !controlVariant.count ||\n                    !controlVariant.absolute_exposure\n                ) {\n                    return <div className=\"font-semibold\">\u2014</div>\n                }\n\n                const controlMean = controlVariant.count / controlVariant.absolute_exposure\n                const variantMean = variant.count / variant.absolute_exposure\n                const delta = ((variantMean - controlMean) / controlMean) * 100\n\n                return (\n                    <div className={`font-semibold ${delta > 0 ? 'text-success' : delta < 0 ? 'text-danger' : ''}`}>{`${\n                        delta > 0 ? '+' : ''\n                    }${delta.toFixed(2)}%`}</div>\n                )\n            },\n        })\n        columns.push({\n            key: 'credibleInterval',\n            title: (\n                <div className=\"inline-flex items-center space-x-1\">\n                    <div className=\"\">Credible interval (95%)</div>\n                    <Tooltip title=\"A credible interval estimates the percentage change in the mean, indicating with 95% probability how much higher or lower the test variant's mean is compared to the control.\">\n                        <IconInfo className=\"text-secondary text-base\" />\n                    </Tooltip>\n                </div>\n            ),\n            render: function Key(_, v): JSX.Element {\n                const variant = v as TrendExperimentVariant\n                if (variant.key === 'control') {\n                    return <em>Baseline</em>\n                }\n\n                const credibleInterval = credibleIntervalForVariant(result || null, variant.key, metricType)\n                if (!credibleInterval) {\n                    return <>\u2014</>\n                }\n                const [lowerBound, upperBound] = credibleInterval\n\n                return (\n                    <div className=\"font-semibold\">{`[${lowerBound > 0 ? '+' : ''}${lowerBound.toFixed(2)}%, ${\n                        upperBound > 0 ? '+' : ''\n                    }${upperBound.toFixed(2)}%]`}</div>\n                )\n            },\n        })\n    }\n\n    if (metricType === InsightType.FUNNELS) {\n        columns.push({\n            key: 'conversionRate',\n            title: 'Conversion rate',\n            render: function Key(_, item): JSX.Element {\n                const conversionRate = conversionRateForVariant(result, item.key)\n                if (!conversionRate) {\n                    return <>\u2014</>\n                }\n\n                return <div className=\"font-semibold\">{`${conversionRate.toFixed(2)}%`}</div>\n            },\n        }),\n            columns.push({\n                key: 'delta',\n                title: (\n                    <div className=\"inline-flex items-center space-x-1\">\n                        <div className=\"\">Delta %</div>\n                        <Tooltip title=\"Delta % indicates the percentage change in the conversion rate between the control and the test variant.\">\n                            <IconInfo className=\"text-secondary text-base\" />\n                        </Tooltip>\n                    </div>\n                ),\n                render: function Key(_, item): JSX.Element {\n                    if (item.key === 'control') {\n                        return <em>Baseline</em>\n                    }\n\n                    const controlConversionRate = conversionRateForVariant(result, 'control')\n                    const variantConversionRate = conversionRateForVariant(result, item.key)\n\n                    if (!controlConversionRate || !variantConversionRate) {\n                        return <>\u2014</>\n                    }\n\n                    const delta = ((variantConversionRate - controlConversionRate) / controlConversionRate) * 100\n\n                    return (\n                        <div\n                            className={`font-semibold ${delta > 0 ? 'text-success' : delta < 0 ? 'text-danger' : ''}`}\n                        >{`${delta > 0 ? '+' : ''}${delta.toFixed(2)}%`}</div>\n                    )\n                },\n            }),\n            columns.push({\n                key: 'credibleInterval',\n                title: (\n                    <div className=\"inline-flex items-center space-x-1\">\n                        <div className=\"\">Credible interval (95%)</div>\n                        <Tooltip title=\"A credible interval estimates the percentage change in the conversion rate, indicating with 95% probability how much higher or lower the test variant's conversion rate is compared to the control.\">\n                            <IconInfo className=\"text-secondary text-base\" />\n                        </Tooltip>\n                    </div>\n                ),\n                render: function Key(_, item): JSX.Element {\n                    if (item.key === 'control') {\n                        return <em>Baseline</em>\n                    }\n\n                    const credibleInterval = credibleIntervalForVariant(result || null, item.key, metricType)\n                    if (!credibleInterval) {\n                        return <>\u2014</>\n                    }\n                    const [lowerBound, upperBound] = credibleInterval\n\n                    return (\n                        <div className=\"font-semibold\">{`[${lowerBound > 0 ? '+' : ''}${lowerBound.toFixed(2)}%, ${\n                            upperBound > 0 ? '+' : ''\n                        }${upperBound.toFixed(2)}%]`}</div>\n                    )\n                },\n            })\n    }\n\n    if (featureFlags[FEATURE_FLAGS.EXPERIMENT_P_VALUE]) {\n        columns.push({\n            key: 'pValue',\n            title: 'P-value',\n            render: function Key(_, item): JSX.Element {\n                const variantKey = item.key\n                const pValue =\n                    result?.probability?.[variantKey] !== undefined ? 1 - result.probability[variantKey] : undefined\n\n                return (\n                    <>\n                        {pValue != undefined ? (\n                            <span className=\"inline-flex items-center w-52 space-x-4\">\n                                <span className=\"w-1/4 font-semibold\">\n                                    {pValue < 0.001 ? '< 0.001' : pValue.toFixed(3)}\n                                </span>\n                            </span>\n                        ) : (\n                            '\u2014'\n                        )}\n                    </>\n                )\n            },\n        })\n    }\n\n    columns.push({\n        key: 'winProbability',\n        title: 'Win probability',\n        sorter: (a, b) => {\n            const aPercentage = (result?.probability?.[a.key] || 0) * 100\n            const bPercentage = (result?.probability?.[b.key] || 0) * 100\n            return aPercentage - bPercentage\n        },\n        render: function Key(_, item): JSX.Element {\n            const variantKey = item.key\n            const percentage = result?.probability?.[variantKey] !== undefined && result.probability?.[variantKey] * 100\n            const isWinning = variantKey === winningVariant\n\n            // Only show the win probability if the conversion rate exists\n            // TODO: move this to the backend\n            const conversionRate = conversionRateForVariant(result, variantKey)\n            const hasValidConversionRate = conversionRate !== null && conversionRate !== undefined\n\n            return (\n                <>\n                    {percentage && (metricType === InsightType.FUNNELS ? hasValidConversionRate : true) ? (\n                        <span className=\"inline-flex items-center w-52 space-x-4\">\n                            <LemonProgress className=\"inline-flex w-3/4\" percent={percentage} />\n                            <span className={`w-1/4 font-semibold ${isWinning && 'text-success'}`}>\n                                {percentage.toFixed(2)}%\n                            </span>\n                        </span>\n                    ) : (\n                        '\u2014'\n                    )}\n                </>\n            )\n        },\n    })\n\n    columns.push({\n        key: 'recordings',\n        title: '',\n        render: function Key(_, item): JSX.Element {\n            const variantKey = item.key\n\n            const filters = getViewRecordingFilters(metric, experiment.feature_flag_key, variantKey)\n            return (\n                <LemonButton\n                    size=\"xsmall\"\n                    icon={<IconRewindPlay />}\n                    tooltip=\"Watch recordings of people who were exposed to this variant.\"\n                    disabledReason={filters.length === 0 ? 'Unable to identify recordings for this metric' : undefined}\n                    type=\"secondary\"\n                    onClick={() => {\n                        const filterGroup: Partial<RecordingUniversalFilters> = {\n                            filter_group: {\n                                type: FilterLogicalOperator.And,\n                                values: [\n                                    {\n                                        type: FilterLogicalOperator.And,\n                                        values: filters,\n                                    },\n                                ],\n                            },\n                            date_from: experiment?.start_date,\n                            date_to: experiment?.end_date,\n                            filter_test_accounts:\n                                metric.kind === NodeKind.ExperimentMetric\n                                    ? false\n                                    : metric.kind === NodeKind.ExperimentTrendsQuery\n                                    ? metric.count_query.filterTestAccounts\n                                    : metric.funnels_query.filterTestAccounts,\n                        }\n                        router.actions.push(urls.replay(ReplayTabs.Home, filterGroup))\n                        posthog.capture('viewed recordings from experiment', { variant: variantKey })\n                    }}\n                >\n                    View recordings\n                </LemonButton>\n            )\n        },\n    })\n\n    return (\n        <div className=\"mb-4\">\n            <LemonTable\n                loading={false}\n                columns={columns}\n                dataSource={tabularExperimentResults(metricIndex, isSecondary)}\n            />\n        </div>\n    )\n}\n", "import { IconRefresh, IconWarning } from '@posthog/icons'\nimport { LemonButton, Link, ProfilePicture, Tooltip } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { CopyToClipboardInline } from 'lib/components/CopyToClipboard'\nimport { EditableField } from 'lib/components/EditableField/EditableField'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { dayjs } from 'lib/dayjs'\nimport { IconOpenInNew } from 'lib/lemon-ui/icons'\nimport { urls } from 'scenes/urls'\n\nimport { ProgressStatus } from '~/types'\n\nimport { experimentLogic } from '../experimentLogic'\nimport { getExperimentStatus } from '../experimentsLogic'\nimport { StatusTag } from './components'\nimport { ExperimentDates } from './ExperimentDates'\n\nexport function Info(): JSX.Element {\n    const { experiment, featureFlags, metricResults, metricResultsLoading, secondaryMetricResultsLoading } =\n        useValues(experimentLogic)\n    const { updateExperiment, setExperimentStatsVersion, refreshExperimentResults } = useActions(experimentLogic)\n\n    const { created_by } = experiment\n\n    if (!experiment.feature_flag) {\n        return <></>\n    }\n\n    const currentStatsVersion = experiment.stats_config?.version || 1\n\n    const lastRefresh = metricResults?.[0]?.last_refresh\n\n    return (\n        <div>\n            <div className=\"flex flex-wrap justify-between gap-4\">\n                <div className=\"inline-flex space-x-8\">\n                    <div className=\"block\" data-attr=\"experiment-status\">\n                        <div className=\"text-xs font-semibold uppercase tracking-wide\">Status</div>\n                        <StatusTag experiment={experiment} />\n                    </div>\n                    {experiment.feature_flag && (\n                        <div className=\"block\">\n                            <div className=\"text-xs font-semibold uppercase tracking-wide\">\n                                <span>Feature flag</span>\n                            </div>\n                            {getExperimentStatus(experiment) === ProgressStatus.Running &&\n                                !experiment.feature_flag.active && (\n                                    <Tooltip\n                                        placement=\"bottom\"\n                                        title=\"Your experiment is running, but the linked flag is disabled. No data is being collected.\"\n                                    >\n                                        <IconWarning\n                                            style={{ transform: 'translateY(2px)' }}\n                                            className=\"mr-1 text-danger\"\n                                            fontSize=\"18px\"\n                                        />\n                                    </Tooltip>\n                                )}\n                            <CopyToClipboardInline\n                                iconStyle={{ color: 'var(--lemon-button-icon-opacity)' }}\n                                className=\"font-normal text-sm\"\n                                description=\"feature flag key\"\n                            >\n                                {experiment.feature_flag.key}\n                            </CopyToClipboardInline>\n                            <Link\n                                target=\"_blank\"\n                                className=\"font-semibold\"\n                                to={experiment.feature_flag ? urls.featureFlag(experiment.feature_flag.id) : undefined}\n                            >\n                                <IconOpenInNew fontSize=\"18\" />\n                            </Link>\n                        </div>\n                    )}\n                    <div className=\"block\">\n                        <div className=\"text-xs font-semibold uppercase tracking-wide\">\n                            <span>Stats Engine</span>\n                        </div>\n                        <div className=\"flex gap-1\">Bayesian</div>\n                    </div>\n                    {featureFlags[FEATURE_FLAGS.EXPERIMENT_STATS_V2] && (\n                        <div className=\"block\">\n                            <div className=\"text-xs font-semibold uppercase tracking-wide\">\n                                <span>Stats Version</span>\n                            </div>\n                            <div className=\"flex gap-1\">\n                                {[1, 2].map((version) => (\n                                    <LemonButton\n                                        key={version}\n                                        size=\"xsmall\"\n                                        type=\"tertiary\"\n                                        active={currentStatsVersion === version}\n                                        onClick={() => {\n                                            setExperimentStatsVersion(version)\n                                        }}\n                                    >\n                                        v{version}\n                                    </LemonButton>\n                                ))}\n                            </div>\n                        </div>\n                    )}\n                </div>\n\n                <div className=\"flex flex-col\">\n                    <div className=\"inline-flex space-x-8\">\n                        {experiment.start_date && (\n                            <div className=\"block\">\n                                <div className=\"text-xs font-semibold uppercase tracking-wide\">Last refreshed</div>\n                                <div className=\"inline-flex space-x-2\">\n                                    <span\n                                        className={`${\n                                            lastRefresh\n                                                ? dayjs().diff(dayjs(lastRefresh), 'hours') > 12\n                                                    ? 'text-danger'\n                                                    : dayjs().diff(dayjs(lastRefresh), 'hours') > 6\n                                                    ? 'text-warning'\n                                                    : ''\n                                                : ''\n                                        }`}\n                                    >\n                                        {metricResultsLoading || secondaryMetricResultsLoading\n                                            ? 'Loading\u2026'\n                                            : lastRefresh\n                                            ? dayjs(lastRefresh).fromNow()\n                                            : 'a while ago'}\n                                    </span>\n                                    <LemonButton\n                                        type=\"secondary\"\n                                        size=\"xsmall\"\n                                        onClick={() => {\n                                            refreshExperimentResults(true)\n                                        }}\n                                        data-attr=\"refresh-experiment\"\n                                        icon={<IconRefresh />}\n                                        tooltip=\"Refresh experiment results\"\n                                    />\n                                </div>\n                            </div>\n                        )}\n                        <ExperimentDates />\n                        <div className=\"block\">\n                            <div className=\"text-xs font-semibold uppercase tracking-wide\">Created by</div>\n                            {created_by && <ProfilePicture user={created_by} size=\"md\" showName />}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"block mt-4\">\n                <div className=\"text-xs font-semibold uppercase tracking-wide\">Description</div>\n                <EditableField\n                    className=\"py-2\"\n                    multiline\n                    markdown\n                    name=\"description\"\n                    value={experiment.description || ''}\n                    placeholder=\"Add your hypothesis for this test (optional)\"\n                    onSave={(value) => updateExperiment({ description: value })}\n                    maxLength={400}\n                    data-attr=\"experiment-description\"\n                    compactButtons\n                />\n            </div>\n        </div>\n    )\n}\n", "import { IconPencil } from '@posthog/icons'\nimport { LemonButton, LemonCalendarSelectInput } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { TZLabel } from 'lib/components/TZLabel'\nimport { dayjs } from 'lib/dayjs'\nimport { useState } from 'react'\n\nimport { experimentLogic } from '../experimentLogic'\n\nexport function ExperimentDates(): JSX.Element {\n    const [isStartDatePickerOpen, setIsStartDatePickerOpen] = useState(false)\n    const { experiment } = useValues(experimentLogic)\n    const { changeExperimentStartDate } = useActions(experimentLogic)\n    const { created_at, start_date, end_date } = experiment\n\n    if (!start_date) {\n        if (!created_at) {\n            return <></>\n        }\n        return (\n            <div className=\"block\" data-attr=\"experiment-creation-date\">\n                <div className=\"text-xs font-semibold uppercase tracking-wide\">Creation date</div>\n                <TZLabel time={created_at} />\n            </div>\n        )\n    }\n    return (\n        <>\n            <div className=\"block\" data-attr=\"experiment-start-date\">\n                <div\n                    className={clsx(\n                        'text-xs font-semibold uppercase tracking-wide',\n                        isStartDatePickerOpen && 'text-center'\n                    )}\n                >\n                    Start date\n                </div>\n                <div className=\"flex\">\n                    {isStartDatePickerOpen ? (\n                        <LemonCalendarSelectInput\n                            granularity=\"minute\"\n                            visible\n                            value={dayjs(start_date)}\n                            onChange={(newStartDate) => {\n                                if (newStartDate) {\n                                    changeExperimentStartDate(newStartDate.toISOString())\n                                }\n                            }}\n                            onClose={() => setIsStartDatePickerOpen(false)}\n                            onClickOutside={() => setIsStartDatePickerOpen(false)}\n                            clearable={false}\n                            selectionPeriod=\"past\"\n                            buttonProps={{ size: 'xsmall', 'data-attr': 'experiment-start-date-picker' }}\n                        />\n                    ) : (\n                        <>\n                            <TZLabel time={start_date} />\n                            <LemonButton\n                                title=\"Move start date\"\n                                data-attr=\"move-experiment-start-date\"\n                                icon={<IconPencil />}\n                                size=\"small\"\n                                onClick={() => setIsStartDatePickerOpen(true)}\n                                noPadding\n                                className=\"ml-2\"\n                            />\n                        </>\n                    )}\n                </div>\n            </div>\n            {end_date && (\n                <div className=\"block\" data-attr=\"experiment-end-date\">\n                    <div className=\"text-xs font-semibold uppercase tracking-wide\">End date</div>\n                    {/* Flex class here is for the end date to have same appearance as the start date. */}\n                    <div className=\"flex\">\n                        <TZLabel time={end_date} />\n                    </div>\n                </div>\n            )}\n        </>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "import_jsx_runtime", "SummaryTable", "metric", "metricIndex", "isSecondary", "experimentId", "experiment", "metricResults", "secondaryMetricResults", "tabularExperimentResults", "getMetricType", "exposureCountDataForVariant", "conversionRateForVariant", "experimentMathAggregationForTrends", "countDataForVariant", "getHighestProbabilityVariant", "credibleIntervalForVariant", "featureFlags", "experimentLogic", "metricType", "result", "winningVariant", "columns", "_", "item", "VariantTag", "EntityFilterInfo", "variant", "count", "humanFriendlyNumber", "Tooltip", "LemonTag", "IconInfo", "exposure", "v", "controlVariant", "key", "controlMean", "delta", "credibleInterval", "lowerBound", "upperBound", "conversionRate", "controlConversionRate", "variantConversionRate", "FEATURE_FLAGS", "variantKey", "pValue", "a", "b", "aPercentage", "bPercentage", "percentage", "isWinning", "hasValidConversionRate", "LemonProgress", "filters", "getViewRecordingFilters", "LemonButton", "IconRewindPlay", "filterGroup", "urls", "Co", "LemonTable", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_react", "import_jsx_runtime", "ExperimentDates", "isStartDatePickerOpen", "setIsStartDatePickerOpen", "experiment", "experimentLogic", "changeExperimentStartDate", "created_at", "start_date", "end_date", "clsx", "LemonCalendarSelectInput", "dayjs", "newStartDate", "TZLabel", "LemonButton", "IconPencil", "import_jsx_runtime", "Info", "experiment", "featureFlags", "metricResults", "metricResultsLoading", "secondaryMetricResultsLoading", "experimentLogic", "updateExperiment", "setExperimentStatsVersion", "refreshExperimentResults", "created_by", "currentStatsVersion", "lastRefresh", "StatusTag", "getExperimentStatus", "Tooltip", "IconWarning", "CopyToClipboardInline", "Link", "urls", "IconOpenInNew", "FEATURE_FLAGS", "version", "LemonButton", "dayjs", "IconRefresh", "ExperimentDates", "ProfilePicture", "EditableField", "value"]
}
