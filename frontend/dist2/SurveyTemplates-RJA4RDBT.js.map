{
  "version": 3,
  "sources": ["../src/scenes/surveys/SurveyTemplates.tsx"],
  "sourcesContent": ["import './SurveyTemplates.scss'\n\nimport { LemonButton } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { urls } from 'scenes/urls'\n\nimport { Survey } from '~/types'\n\nimport { defaultSurveyAppearance, defaultSurveyTemplates } from './constants'\nimport { SurveyAppearancePreview } from './SurveyAppearancePreview'\nimport { surveyLogic } from './surveyLogic'\n\nexport const scene: SceneExport = {\n    component: SurveyTemplates,\n}\n\nexport function SurveyTemplates(): JSX.Element {\n    const { setSurveyTemplateValues } = useActions(surveyLogic({ id: 'new' }))\n    const { reportSurveyTemplateClicked } = useActions(eventUsageLogic)\n    const { currentTeam } = useValues(teamLogic)\n    const surveyAppearance = {\n        ...currentTeam?.survey_config?.appearance,\n    }\n\n    return (\n        <>\n            <PageHeader\n                buttons={\n                    <LemonButton type=\"primary\" to={urls.survey('new')} data-attr=\"new-blank-survey\">\n                        Create blank survey\n                    </LemonButton>\n                }\n            />\n            <div className=\"flex flex-row flex-wrap gap-8 mt-8\">\n                {defaultSurveyTemplates.map((template, idx) => {\n                    return (\n                        <div className=\"flex flex-col items-center\" key={idx}>\n                            <span className=\"text-md\">\n                                <b>{template.templateType}</b>\n                            </span>\n                            <span className=\"flex flex-wrap text-xs text-secondary max-w-80 font-medium mb-3\">\n                                {template.description}\n                            </span>\n                            <div\n                                className=\"SurveyTemplateContainer\"\n                                tabIndex={idx + 1}\n                                data-attr=\"survey-template\"\n                                onClick={() => {\n                                    setSurveyTemplateValues({\n                                        name: template.templateType,\n                                        questions: template.questions,\n                                        appearance: {\n                                            ...defaultSurveyAppearance,\n                                            ...template.appearance,\n                                            ...surveyAppearance,\n                                        },\n                                    })\n                                    reportSurveyTemplateClicked(template.templateType)\n                                }}\n                                onKeyDown={(event) => {\n                                    if (event.key === 'Enter') {\n                                        event.currentTarget.click()\n                                    }\n                                }}\n                            >\n                                <div className=\"SurveyTemplate\">\n                                    <SurveyAppearancePreview\n                                        key={idx}\n                                        survey={\n                                            {\n                                                id: `templateMock-${idx}`,\n                                                questions: template.questions,\n                                                appearance: {\n                                                    ...defaultSurveyAppearance,\n                                                    whiteLabel: true,\n                                                    ...template.appearance,\n                                                    ...surveyAppearance,\n                                                },\n                                            } as Survey\n                                        }\n                                        previewPageIndex={0}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    )\n                })}\n            </div>\n        </>\n    )\n}\n"],
  "mappings": "moCAAAA,IAAAC,IAAAC,IAGA,IAAAC,EAAsC,OA0B9B,IAAAC,EAAA,OAbKC,EAAqB,CAC9B,UAAWC,CACf,EAEO,SAASA,GAA+B,CAC3C,GAAM,CAAE,wBAAAC,CAAwB,KAAI,cAAWC,EAAY,CAAE,GAAI,KAAM,CAAC,CAAC,EACnE,CAAE,4BAAAC,CAA4B,KAAI,cAAWC,CAAe,EAC5D,CAAE,YAAAC,CAAY,KAAI,aAAUC,CAAS,EACrCC,EAAmB,CACrB,GAAGF,GAAa,eAAe,UACnC,EAEA,SACI,oBACI,oBAACG,EAAA,CACG,WACI,OAACC,EAAA,CAAY,KAAK,UAAU,GAAIC,EAAK,OAAO,KAAK,EAAG,YAAU,mBAAmB,+BAEjF,EAER,KACA,OAAC,OAAI,UAAU,qCACV,SAAAC,EAAuB,IAAI,CAACC,EAAUC,OAE/B,QAAC,OAAI,UAAU,6BACX,oBAAC,QAAK,UAAU,UACZ,mBAAC,KAAG,SAAAD,EAAS,aAAa,EAC9B,KACA,OAAC,QAAK,UAAU,kEACX,SAAAA,EAAS,YACd,KACA,OAAC,OACG,UAAU,0BACV,SAAUC,EAAM,EAChB,YAAU,kBACV,QAAS,IAAM,CACXZ,EAAwB,CACpB,KAAMW,EAAS,aACf,UAAWA,EAAS,UACpB,WAAY,CACR,GAAGE,EACH,GAAGF,EAAS,WACZ,GAAGL,CACP,CACJ,CAAC,EACDJ,EAA4BS,EAAS,YAAY,CACrD,EACA,UAAYG,GAAU,CACdA,EAAM,MAAQ,SACdA,EAAM,cAAc,MAAM,CAElC,EAEA,mBAAC,OAAI,UAAU,iBACX,mBAACC,EAAA,CAEG,OACI,CACI,GAAI,gBAAgBH,CAAG,GACvB,UAAWD,EAAS,UACpB,WAAY,CACR,GAAGE,EACH,WAAY,GACZ,GAAGF,EAAS,WACZ,GAAGL,CACP,CACJ,EAEJ,iBAAkB,GAbbM,CAcT,EACJ,EACJ,IA/C6CA,CAgDjD,CAEP,EACL,GACJ,CAER",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "scene", "SurveyTemplates", "setSurveyTemplateValues", "surveyLogic", "reportSurveyTemplateClicked", "eventUsageLogic", "currentTeam", "teamLogic", "surveyAppearance", "PageHeader", "LemonButton", "urls", "defaultSurveyTemplates", "template", "idx", "defaultSurveyAppearance", "event", "SurveyAppearancePreview"]
}
