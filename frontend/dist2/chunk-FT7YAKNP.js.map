{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/lilypond.js"],
  "sourcesContent": ["'use strict'\nvar refractorScheme = require('./scheme.js')\nmodule.exports = lilypond\nlilypond.displayName = 'lilypond'\nlilypond.aliases = []\nfunction lilypond(Prism) {\n  Prism.register(refractorScheme)\n  ;(function (Prism) {\n    var schemeExpression =\n      /\\((?:[^();\"#\\\\]|\\\\[\\s\\S]|;.*(?!.)|\"(?:[^\"\\\\]|\\\\.)*\"|#(?:\\{(?:(?!#\\})[\\s\\S])*#\\}|[^{])|<expr>)*\\)/\n        .source // allow for up to pow(2, recursivenessLog2) many levels of recursive brace expressions\n    // For some reason, this can't be 4\n    var recursivenessLog2 = 5\n    for (var i = 0; i < recursivenessLog2; i++) {\n      schemeExpression = schemeExpression.replace(/<expr>/g, function () {\n        return schemeExpression\n      })\n    }\n    schemeExpression = schemeExpression.replace(/<expr>/g, /[^\\s\\S]/.source)\n    var lilypond = (Prism.languages.lilypond = {\n      comment: /%(?:(?!\\{).*|\\{[\\s\\S]*?%\\})/,\n      'embedded-scheme': {\n        pattern: RegExp(\n          /(^|[=\\s])#(?:\"(?:[^\"\\\\]|\\\\.)*\"|[^\\s()\"]*(?:[^\\s()]|<expr>))/.source.replace(\n            /<expr>/g,\n            function () {\n              return schemeExpression\n            }\n          ),\n          'm'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          scheme: {\n            pattern: /^(#)[\\s\\S]+$/,\n            lookbehind: true,\n            alias: 'language-scheme',\n            inside: {\n              'embedded-lilypond': {\n                pattern: /#\\{[\\s\\S]*?#\\}/,\n                greedy: true,\n                inside: {\n                  punctuation: /^#\\{|#\\}$/,\n                  lilypond: {\n                    pattern: /[\\s\\S]+/,\n                    alias: 'language-lilypond',\n                    inside: null // see below\n                  }\n                }\n              },\n              rest: Prism.languages.scheme\n            }\n          },\n          punctuation: /#/\n        }\n      },\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true\n      },\n      'class-name': {\n        pattern: /(\\\\new\\s+)[\\w-]+/,\n        lookbehind: true\n      },\n      keyword: {\n        pattern: /\\\\[a-z][-\\w]*/i,\n        inside: {\n          punctuation: /^\\\\/\n        }\n      },\n      operator: /[=|]|<<|>>/,\n      punctuation: {\n        pattern:\n          /(^|[a-z\\d])(?:'+|,+|[_^]?-[_^]?(?:[-+^!>._]|(?=\\d))|[_^]\\.?|[.!])|[{}()[\\]<>^~]|\\\\[()[\\]<>\\\\!]|--|__/,\n        lookbehind: true\n      },\n      number: /\\b\\d+(?:\\/\\d+)?\\b/\n    })\n    lilypond['embedded-scheme'].inside['scheme'].inside[\n      'embedded-lilypond'\n    ].inside['lilypond'].inside = lilypond\n    Prism.languages.ly = lilypond\n  })(Prism)\n}\n"],
  "mappings": "iHAAA,IAAAA,EAAAC,EAAA,CAAAC,EAAAC,IAAA,CAAAC,IAAAC,IAAAC,IACA,IAAIC,EAAkB,IACtBJ,EAAO,QAAUK,EACjBA,EAAS,YAAc,WACvBA,EAAS,QAAU,CAAC,EACpB,SAASA,EAASC,EAAO,CACvBA,EAAM,SAASF,CAAe,EAC5B,SAAUE,EAAO,CAMjB,QALIC,EACF,mGACG,OAEDC,EAAoB,EACfC,EAAI,EAAGA,EAAID,EAAmBC,IACrCF,EAAmBA,EAAiB,QAAQ,UAAW,UAAY,CACjE,OAAOA,CACT,CAAC,EAEHA,EAAmBA,EAAiB,QAAQ,UAAW,UAAU,MAAM,EACvE,IAAIF,EAAYC,EAAM,UAAU,SAAW,CACzC,QAAS,8BACT,kBAAmB,CACjB,QAAS,OACP,8DAA8D,OAAO,QACnE,UACA,UAAY,CACV,OAAOC,CACT,CACF,EACA,GACF,EACA,WAAY,GACZ,OAAQ,GACR,OAAQ,CACN,OAAQ,CACN,QAAS,eACT,WAAY,GACZ,MAAO,kBACP,OAAQ,CACN,oBAAqB,CACnB,QAAS,iBACT,OAAQ,GACR,OAAQ,CACN,YAAa,YACb,SAAU,CACR,QAAS,UACT,MAAO,oBACP,OAAQ,IACV,CACF,CACF,EACA,KAAMD,EAAM,UAAU,MACxB,CACF,EACA,YAAa,GACf,CACF,EACA,OAAQ,CACN,QAAS,oBACT,OAAQ,EACV,EACA,aAAc,CACZ,QAAS,mBACT,WAAY,EACd,EACA,QAAS,CACP,QAAS,iBACT,OAAQ,CACN,YAAa,KACf,CACF,EACA,SAAU,aACV,YAAa,CACX,QACE,uGACF,WAAY,EACd,EACA,OAAQ,mBACV,EACAD,EAAS,iBAAiB,EAAE,OAAO,OAAU,OAC3C,mBACF,EAAE,OAAO,SAAY,OAASA,EAC9BC,EAAM,UAAU,GAAKD,CACvB,EAAGC,CAAK,CACV",
  "names": ["require_lilypond", "__commonJSMin", "exports", "module", "init_dirname", "init_buffer", "init_process", "refractorScheme", "lilypond", "Prism", "schemeExpression", "recursivenessLog2", "i"]
}
