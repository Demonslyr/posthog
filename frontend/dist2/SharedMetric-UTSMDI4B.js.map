{
  "version": 3,
  "sources": ["../src/scenes/experiments/SharedMetrics/SharedMetric.tsx", "../src/scenes/experiments/SharedMetrics/LegacySharedFunnelsMetricForm.tsx", "../src/scenes/experiments/SharedMetrics/sharedMetricLogic.tsx", "../src/scenes/experiments/SharedMetrics/LegacySharedTrendsMetricForm.tsx"],
  "sourcesContent": ["import { IconCheckCircle } from '@posthog/icons'\nimport { LemonButton, LemonDialog, LemonInput, LemonLabel, Spinner } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { ObjectTags } from 'lib/components/ObjectTags/ObjectTags'\nimport { SceneExport } from 'scenes/sceneTypes'\n\nimport { themeLogic } from '~/layout/navigation-3000/themeLogic'\nimport { tagsModel } from '~/models/tagsModel'\nimport { ExperimentMetric, NodeKind } from '~/queries/schema/schema-general'\n\nimport { ExperimentMetricForm } from '../ExperimentMetricForm'\nimport { getDefaultFunnelsMetric, getDefaultTrendsMetric } from '../utils'\nimport { LegacySharedFunnelsMetricForm } from './LegacySharedFunnelsMetricForm'\nimport { LegacySharedTrendsMetricForm } from './LegacySharedTrendsMetricForm'\nimport { sharedMetricLogic } from './sharedMetricLogic'\n\nexport const scene: SceneExport = {\n    component: SharedMetric,\n    logic: sharedMetricLogic,\n    paramsToProps: ({ params: { id } }) => ({\n        sharedMetricId: id === 'new' ? 'new' : parseInt(id),\n    }),\n}\n\nexport function SharedMetric(): JSX.Element {\n    const { sharedMetricId, sharedMetric } = useValues(sharedMetricLogic)\n    const { setSharedMetric, createSharedMetric, updateSharedMetric, deleteSharedMetric } =\n        useActions(sharedMetricLogic)\n    const { isDarkModeOn } = useValues(themeLogic)\n\n    const { tags: allExistingTags } = useValues(tagsModel)\n\n    if (!sharedMetric || !sharedMetric.query) {\n        return (\n            <div className=\"fixed inset-0 flex justify-center items-center\">\n                <Spinner className=\"text-5xl\" />\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"max-w-[800px]\">\n            {sharedMetric.query.kind !== NodeKind.ExperimentMetric && (\n                <div className=\"flex gap-4 mb-4\">\n                    <div\n                        className={`flex-1 cursor-pointer p-4 rounded border ${\n                            sharedMetric.query.kind === NodeKind.ExperimentTrendsQuery\n                                ? 'border-accent-primary bg-accent-primary-highlight'\n                                : 'border-border'\n                        }`}\n                        onClick={() => {\n                            setSharedMetric({\n                                query: getDefaultTrendsMetric(),\n                            })\n                        }}\n                    >\n                        <div className=\"font-semibold flex justify-between items-center\">\n                            <span>Trend</span>\n                            {sharedMetric.query.kind === NodeKind.ExperimentTrendsQuery && (\n                                <IconCheckCircle fontSize={18} color=\"var(--accent-primary)\" />\n                            )}\n                        </div>\n                        <div className=\"text-secondary text-sm leading-relaxed\">\n                            Track a single event, action or a property value.\n                        </div>\n                    </div>\n                    <div\n                        className={`flex-1 cursor-pointer p-4 rounded border ${\n                            sharedMetric.query.kind === NodeKind.ExperimentFunnelsQuery\n                                ? 'border-accent-primary bg-accent-primary-highlight'\n                                : 'border-border'\n                        }`}\n                        onClick={() => {\n                            setSharedMetric({\n                                query: getDefaultFunnelsMetric(),\n                            })\n                        }}\n                    >\n                        <div className=\"font-semibold flex justify-between items-center\">\n                            <span>Funnel</span>\n                            {sharedMetric.query.kind === NodeKind.ExperimentFunnelsQuery && (\n                                <IconCheckCircle fontSize={18} color=\"var(--accent-primary)\" />\n                            )}\n                        </div>\n                        <div className=\"text-secondary text-sm leading-relaxed\">\n                            Analyze conversion rates between sequential steps.\n                        </div>\n                    </div>\n                </div>\n            )}\n            <div className={`border rounded ${isDarkModeOn ? 'bg-light' : 'bg-white'} p-4`}>\n                <div className=\"mb-4\">\n                    <LemonLabel>Name</LemonLabel>\n                    <LemonInput\n                        value={sharedMetric.name}\n                        onChange={(newName) => {\n                            setSharedMetric({\n                                name: newName,\n                            })\n                        }}\n                    />\n                </div>\n                <div className=\"mb-4\">\n                    <LemonLabel>Description (optional)</LemonLabel>\n                    <LemonInput\n                        value={sharedMetric.description}\n                        onChange={(newDescription) => {\n                            setSharedMetric({\n                                description: newDescription,\n                            })\n                        }}\n                    />\n                </div>\n                <div className=\"mb-4\">\n                    <LemonLabel>Tags</LemonLabel>\n                    <div className=\"mt-2\">\n                        <ObjectTags\n                            tags={sharedMetric.tags || []}\n                            onChange={(newTags) => {\n                                setSharedMetric({\n                                    tags: newTags,\n                                })\n                            }}\n                            saving={false}\n                            tagsAvailable={allExistingTags}\n                            data-attr=\"shared-metric-tags\"\n                        />\n                    </div>\n                </div>\n                {sharedMetric.query.kind === NodeKind.ExperimentMetric ? (\n                    <ExperimentMetricForm\n                        metric={sharedMetric.query as ExperimentMetric}\n                        handleSetMetric={({ newMetric }: { newMetric: ExperimentMetric }) => {\n                            setSharedMetric({\n                                ...sharedMetric,\n                                query: newMetric,\n                            })\n                        }}\n                    />\n                ) : sharedMetric.query.kind === NodeKind.ExperimentTrendsQuery ? (\n                    <LegacySharedTrendsMetricForm />\n                ) : (\n                    <LegacySharedFunnelsMetricForm />\n                )}\n            </div>\n            <div className=\"flex justify-between mt-4\">\n                {sharedMetricId !== 'new' && (\n                    <LemonButton\n                        size=\"medium\"\n                        type=\"primary\"\n                        status=\"danger\"\n                        onClick={() => {\n                            LemonDialog.open({\n                                title: 'Delete this metric?',\n                                content: <div className=\"text-sm text-secondary\">This action cannot be undone.</div>,\n                                primaryButton: {\n                                    children: 'Delete',\n                                    type: 'primary',\n                                    onClick: () => deleteSharedMetric(),\n                                    size: 'small',\n                                },\n                                secondaryButton: {\n                                    children: 'Cancel',\n                                    type: 'tertiary',\n                                    size: 'small',\n                                },\n                            })\n                        }}\n                    >\n                        Delete\n                    </LemonButton>\n                )}\n                <LemonButton\n                    className=\"ml-auto\"\n                    disabledReason={sharedMetric.name ? undefined : 'You must give your metric a name'}\n                    size=\"medium\"\n                    type=\"primary\"\n                    onClick={() => {\n                        if (sharedMetricId === 'new') {\n                            createSharedMetric()\n                        } else {\n                            updateSharedMetric()\n                        }\n                    }}\n                >\n                    Save\n                </LemonButton>\n            </div>\n        </div>\n    )\n}\n", "import { LemonBanner } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { TestAccountFilterSwitch } from 'lib/components/TestAccountFiltersSwitch'\nimport { EXPERIMENT_DEFAULT_DURATION } from 'lib/constants'\nimport { ActionFilter } from 'scenes/insights/filters/ActionFilter/ActionFilter'\nimport { MathAvailability } from 'scenes/insights/filters/ActionFilter/ActionFilterRow/ActionFilterRow'\nimport { getHogQLValue } from 'scenes/insights/filters/AggregationSelect'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { actionsAndEventsToSeries } from '~/queries/nodes/InsightQuery/utils/filtersToQueryNode'\nimport { queryNodeToFilter } from '~/queries/nodes/InsightQuery/utils/queryNodeToFilter'\nimport { Query } from '~/queries/Query/Query'\nimport { ExperimentFunnelsQuery, NodeKind } from '~/queries/schema/schema-general'\nimport { BreakdownAttributionType, FilterType } from '~/types'\n\nimport {\n    commonActionFilterProps,\n    FunnelAggregationSelect,\n    FunnelAttributionSelect,\n    FunnelConversionWindowFilter,\n} from '../Metrics/Selectors'\nimport { sharedMetricLogic } from './sharedMetricLogic'\n\nexport function LegacySharedFunnelsMetricForm(): JSX.Element {\n    const { sharedMetric } = useValues(sharedMetricLogic)\n    const { setSharedMetric } = useActions(sharedMetricLogic)\n\n    const { currentTeam } = useValues(teamLogic)\n    const hasFilters = (currentTeam?.test_account_filters || []).length > 0\n\n    const actionFilterProps = {\n        ...commonActionFilterProps,\n        actionsTaxonomicGroupTypes: [TaxonomicFilterGroupType.Events, TaxonomicFilterGroupType.Actions],\n    }\n\n    if (!sharedMetric?.query) {\n        return <></>\n    }\n\n    const sharedMetricQuery = sharedMetric.query as ExperimentFunnelsQuery\n\n    return (\n        <>\n            <ActionFilter\n                bordered\n                filters={queryNodeToFilter(sharedMetricQuery.funnels_query)}\n                setFilters={({ actions, events, data_warehouse }: Partial<FilterType>): void => {\n                    if (!sharedMetric?.query) {\n                        return\n                    }\n\n                    const series = actionsAndEventsToSeries(\n                        { actions, events, data_warehouse } as any,\n                        true,\n                        MathAvailability.None\n                    )\n                    setSharedMetric({\n                        query: {\n                            ...sharedMetricQuery,\n                            funnels_query: {\n                                ...sharedMetricQuery.funnels_query,\n                                series,\n                            },\n                        },\n                    })\n                }}\n                typeKey=\"experiment-metric\"\n                mathAvailability={MathAvailability.None}\n                buttonCopy=\"Add funnel step\"\n                showSeriesIndicator={true}\n                seriesIndicatorType=\"numeric\"\n                sortable={true}\n                showNestedArrow={true}\n                {...actionFilterProps}\n            />\n            <div className=\"mt-4 space-y-4\">\n                <FunnelAggregationSelect\n                    value={getHogQLValue(\n                        sharedMetricQuery.funnels_query.aggregation_group_type_index ?? undefined,\n                        sharedMetricQuery.funnels_query.funnelsFilter?.funnelAggregateByHogQL ?? undefined\n                    )}\n                    onChange={(value) => {\n                        setSharedMetric({\n                            query: {\n                                ...sharedMetricQuery,\n                                funnels_query: {\n                                    ...sharedMetricQuery.funnels_query,\n                                    funnelsFilter: {\n                                        ...sharedMetricQuery.funnels_query.funnelsFilter,\n                                        funnelAggregateByHogQL: value,\n                                    },\n                                },\n                            },\n                        })\n                    }}\n                />\n                <FunnelConversionWindowFilter\n                    funnelWindowInterval={sharedMetricQuery.funnels_query?.funnelsFilter?.funnelWindowInterval}\n                    funnelWindowIntervalUnit={sharedMetricQuery.funnels_query?.funnelsFilter?.funnelWindowIntervalUnit}\n                    onFunnelWindowIntervalChange={(funnelWindowInterval) => {\n                        setSharedMetric({\n                            query: {\n                                ...sharedMetricQuery,\n                                funnels_query: {\n                                    ...sharedMetricQuery.funnels_query,\n                                    // funnelWindowInterval: funnelWindowInterval,\n                                    funnelsFilter: {\n                                        ...sharedMetricQuery.funnels_query.funnelsFilter,\n                                        funnelWindowInterval: funnelWindowInterval,\n                                    },\n                                },\n                            },\n                        })\n                    }}\n                    onFunnelWindowIntervalUnitChange={(funnelWindowIntervalUnit) => {\n                        setSharedMetric({\n                            query: {\n                                ...sharedMetricQuery,\n                                funnels_query: {\n                                    ...sharedMetricQuery.funnels_query,\n                                    funnelsFilter: {\n                                        ...sharedMetricQuery.funnels_query.funnelsFilter,\n                                        funnelWindowIntervalUnit: funnelWindowIntervalUnit || undefined,\n                                    },\n                                },\n                            },\n                        })\n                    }}\n                />\n                <FunnelAttributionSelect\n                    value={(() => {\n                        const breakdownAttributionType =\n                            sharedMetricQuery.funnels_query?.funnelsFilter?.breakdownAttributionType\n                        const breakdownAttributionValue =\n                            sharedMetricQuery.funnels_query?.funnelsFilter?.breakdownAttributionValue\n\n                        const currentValue: BreakdownAttributionType | `${BreakdownAttributionType.Step}/${number}` =\n                            !breakdownAttributionType\n                                ? BreakdownAttributionType.FirstTouch\n                                : breakdownAttributionType === BreakdownAttributionType.Step\n                                ? `${breakdownAttributionType}/${breakdownAttributionValue || 0}`\n                                : breakdownAttributionType\n\n                        return currentValue\n                    })()}\n                    onChange={(value) => {\n                        const [breakdownAttributionType, breakdownAttributionValue] = (value || '').split('/')\n                        setSharedMetric({\n                            query: {\n                                ...sharedMetricQuery,\n                                funnels_query: {\n                                    ...sharedMetricQuery.funnels_query,\n                                    funnelsFilter: {\n                                        ...sharedMetricQuery.funnels_query.funnelsFilter,\n                                        breakdownAttributionType: breakdownAttributionType as BreakdownAttributionType,\n                                        breakdownAttributionValue: breakdownAttributionValue\n                                            ? parseInt(breakdownAttributionValue)\n                                            : undefined,\n                                    },\n                                },\n                            },\n                        })\n                    }}\n                    stepsLength={sharedMetricQuery.funnels_query?.series?.length}\n                />\n                <TestAccountFilterSwitch\n                    checked={(() => {\n                        const val = sharedMetricQuery.funnels_query?.filterTestAccounts\n                        return hasFilters ? !!val : false\n                    })()}\n                    onChange={(checked: boolean) => {\n                        setSharedMetric({\n                            query: {\n                                ...sharedMetricQuery,\n                                funnels_query: {\n                                    ...sharedMetricQuery.funnels_query,\n                                    filterTestAccounts: checked,\n                                },\n                            },\n                        })\n                    }}\n                    fullWidth\n                />\n            </div>\n\n            <LemonBanner type=\"info\" className=\"mt-3 mb-3\">\n                Preview insights are generated based on {EXPERIMENT_DEFAULT_DURATION} days of data. This can cause a\n                mismatch between the preview and the actual results.\n            </LemonBanner>\n\n            <div className=\"mt-4\">\n                <Query\n                    query={{\n                        kind: NodeKind.InsightVizNode,\n                        source: sharedMetricQuery.funnels_query,\n                        showTable: false,\n                        showLastComputation: true,\n                        showLastComputationRefresh: false,\n                    }}\n                    readOnly\n                />\n            </div>\n        </>\n    )\n}\n", "import { lemonToast } from '@posthog/lemon-ui'\nimport { actions, connect, kea, key, listeners, path, props, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport { router, urlToAction } from 'kea-router'\nimport api from 'lib/api'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { featureFlagLogic, FeatureFlagsSet } from 'lib/logic/featureFlagLogic'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\n\nimport { UserBasicType } from '~/types'\n\nimport { getDefaultBinomialMetric, getDefaultTrendsMetric } from '../utils'\nimport type { sharedMetricLogicType } from './sharedMetricLogicType'\nimport { sharedMetricsLogic } from './sharedMetricsLogic'\n\nexport interface SharedMetricLogicProps {\n    sharedMetricId?: string | number\n}\n\nexport interface SharedMetric {\n    id: number\n    name: string\n    description?: string\n    query: Record<string, any>\n    created_by: UserBasicType | null\n    created_at: string | null\n    updated_at: string | null\n    tags: string[]\n}\n\nexport const NEW_SHARED_METRIC: Partial<SharedMetric> = {\n    name: '',\n    description: '',\n    query: undefined,\n    tags: [],\n}\n\nexport const sharedMetricLogic = kea<sharedMetricLogicType>([\n    props({} as SharedMetricLogicProps),\n    path((key) => ['scenes', 'experiments', 'sharedMetricLogic', key]),\n    key((props) => props.sharedMetricId || 'new'),\n    connect(() => ({\n        actions: [sharedMetricsLogic, ['loadSharedMetrics'], eventUsageLogic, ['reportExperimentSharedMetricCreated']],\n        values: [featureFlagLogic, ['featureFlags']],\n    })),\n    actions({\n        setSharedMetric: (metric: Partial<SharedMetric>) => ({ metric }),\n        createSharedMetric: true,\n        updateSharedMetric: true,\n        deleteSharedMetric: true,\n    }),\n\n    loaders(({ props, values }) => ({\n        sharedMetric: {\n            loadSharedMetric: async () => {\n                if (props.sharedMetricId && props.sharedMetricId !== 'new') {\n                    const response = await api.get(\n                        `api/projects/@current/experiment_saved_metrics/${props.sharedMetricId}`\n                    )\n                    return response as SharedMetric\n                }\n                return {\n                    ...values.newSharedMetric,\n                }\n            },\n        },\n    })),\n\n    listeners(({ actions, values }) => ({\n        createSharedMetric: async () => {\n            const response = await api.create(`api/projects/@current/experiment_saved_metrics/`, values.sharedMetric)\n            if (response.id) {\n                lemonToast.success('Shared metric created successfully')\n                actions.reportExperimentSharedMetricCreated(response as SharedMetric)\n                actions.loadSharedMetrics()\n                router.actions.push('/experiments/shared-metrics')\n            }\n        },\n        updateSharedMetric: async () => {\n            const response = await api.update(\n                `api/projects/@current/experiment_saved_metrics/${values.sharedMetricId}`,\n                values.sharedMetric\n            )\n            if (response.id) {\n                lemonToast.success('Shared metric updated successfully')\n                actions.loadSharedMetrics()\n                router.actions.push('/experiments/shared-metrics')\n            }\n        },\n        deleteSharedMetric: async () => {\n            try {\n                await api.delete(`api/projects/@current/experiment_saved_metrics/${values.sharedMetricId}`)\n                lemonToast.success('Shared metric deleted successfully')\n                actions.loadSharedMetrics()\n                router.actions.push('/experiments/shared-metrics')\n            } catch (error) {\n                lemonToast.error('Failed to delete shared metric')\n                console.error(error)\n            }\n        },\n    })),\n\n    reducers({\n        sharedMetric: [\n            { ...NEW_SHARED_METRIC } as Partial<SharedMetric>,\n            {\n                setSharedMetric: (state, { metric }) => ({ ...state, ...metric }),\n            },\n        ],\n    }),\n\n    selectors({\n        sharedMetricId: [\n            () => [(_, props) => props.sharedMetricId ?? 'new'],\n            (sharedMetricId): string | number => sharedMetricId,\n        ],\n        isNew: [(s) => [s.sharedMetricId], (sharedMetricId) => sharedMetricId === 'new'],\n        newSharedMetric: [\n            (s) => [s.featureFlags],\n            (featureFlags: FeatureFlagsSet) => ({\n                ...NEW_SHARED_METRIC,\n                query: featureFlags[FEATURE_FLAGS.EXPERIMENTS_NEW_QUERY_RUNNER]\n                    ? getDefaultBinomialMetric()\n                    : getDefaultTrendsMetric(),\n            }),\n        ],\n    }),\n\n    urlToAction(({ actions, values }) => ({\n        '/experiments/shared-metrics/:id': ({ id }, _, __, currentLocation, previousLocation) => {\n            const didPathChange = currentLocation.initial || currentLocation.pathname !== previousLocation?.pathname\n\n            if (id && didPathChange) {\n                const parsedId = id === 'new' ? 'new' : parseInt(id)\n                if (parsedId === 'new') {\n                    actions.setSharedMetric({ ...values.newSharedMetric })\n                }\n\n                if (parsedId !== 'new' && parsedId === values.sharedMetricId) {\n                    actions.loadSharedMetric()\n                }\n            }\n        },\n    })),\n])\n", "import { IconCheckCircle } from '@posthog/icons'\nimport { LemonBanner, LemonTabs, LemonTag } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { TestAccountFilterSwitch } from 'lib/components/TestAccountFiltersSwitch'\nimport { EXPERIMENT_DEFAULT_DURATION } from 'lib/constants'\nimport { dayjs } from 'lib/dayjs'\nimport { useState } from 'react'\nimport { ActionFilter } from 'scenes/insights/filters/ActionFilter/ActionFilter'\nimport { MathAvailability } from 'scenes/insights/filters/ActionFilter/ActionFilterRow/ActionFilterRow'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { actionsAndEventsToSeries } from '~/queries/nodes/InsightQuery/utils/filtersToQueryNode'\nimport { queryNodeToFilter } from '~/queries/nodes/InsightQuery/utils/queryNodeToFilter'\nimport { Query } from '~/queries/Query/Query'\nimport { ExperimentTrendsQuery, InsightQueryNode, NodeKind } from '~/queries/schema/schema-general'\nimport { BaseMathType, ChartDisplayType, FilterType } from '~/types'\n\nimport { LEGACY_EXPERIMENT_ALLOWED_MATH_TYPES } from '../constants'\nimport { commonActionFilterProps } from '../Metrics/Selectors'\nimport { sharedMetricLogic } from './sharedMetricLogic'\n\nexport function LegacySharedTrendsMetricForm(): JSX.Element {\n    const { sharedMetric } = useValues(sharedMetricLogic)\n    const { setSharedMetric } = useActions(sharedMetricLogic)\n    const { currentTeam } = useValues(teamLogic)\n    const hasFilters = (currentTeam?.test_account_filters || []).length > 0\n    const [activeTab, setActiveTab] = useState('main')\n\n    if (!sharedMetric?.query) {\n        return <></>\n    }\n\n    const sharedMetricQuery = sharedMetric.query as ExperimentTrendsQuery\n\n    return (\n        <>\n            <LemonTabs\n                activeKey={activeTab}\n                onChange={(newKey) => setActiveTab(newKey)}\n                tabs={[\n                    {\n                        key: 'main',\n                        label: 'Main metric',\n                        content: (\n                            <>\n                                <ActionFilter\n                                    bordered\n                                    filters={queryNodeToFilter(sharedMetricQuery.count_query)}\n                                    setFilters={({ actions, events, data_warehouse }: Partial<FilterType>): void => {\n                                        const series = actionsAndEventsToSeries(\n                                            { actions, events, data_warehouse } as any,\n                                            true,\n                                            MathAvailability.All\n                                        )\n                                        setSharedMetric({\n                                            query: {\n                                                ...sharedMetricQuery,\n                                                count_query: {\n                                                    ...sharedMetricQuery.count_query,\n                                                    series,\n                                                },\n                                            },\n                                        })\n                                    }}\n                                    typeKey=\"experiment-metric\"\n                                    buttonCopy=\"Add graph series\"\n                                    showSeriesIndicator={true}\n                                    entitiesLimit={1}\n                                    showNumericalPropsOnly={true}\n                                    allowedMathTypes={LEGACY_EXPERIMENT_ALLOWED_MATH_TYPES}\n                                    {...commonActionFilterProps}\n                                />\n                                <div className=\"mt-4 space-y-4\">\n                                    <TestAccountFilterSwitch\n                                        checked={(() => {\n                                            const val = sharedMetricQuery.count_query?.filterTestAccounts\n                                            return hasFilters ? !!val : false\n                                        })()}\n                                        onChange={(checked: boolean) => {\n                                            setSharedMetric({\n                                                query: {\n                                                    ...sharedMetricQuery,\n                                                    count_query: {\n                                                        ...sharedMetricQuery.count_query,\n                                                        filterTestAccounts: checked,\n                                                    },\n                                                },\n                                            })\n                                        }}\n                                        fullWidth\n                                    />\n                                </div>\n                                <LemonBanner type=\"info\" className=\"mt-3 mb-3\">\n                                    Preview insights are generated based on {EXPERIMENT_DEFAULT_DURATION} days of data.\n                                    This can cause a mismatch between the preview and the actual results.\n                                </LemonBanner>\n                                <div className=\"mt-4\">\n                                    <Query\n                                        query={{\n                                            kind: NodeKind.InsightVizNode,\n                                            source: sharedMetricQuery.count_query,\n                                            showTable: false,\n                                            showLastComputation: true,\n                                            showLastComputationRefresh: false,\n                                        }}\n                                        readOnly\n                                    />\n                                </div>\n                            </>\n                        ),\n                    },\n                    {\n                        key: 'exposure',\n                        label: 'Exposure',\n                        content: (\n                            <>\n                                <div className=\"flex gap-4 mb-4\">\n                                    <div\n                                        className={`flex-1 cursor-pointer p-4 rounded border ${\n                                            !sharedMetricQuery.exposure_query\n                                                ? 'border-accent-primary bg-accent-primary-highlight'\n                                                : 'border-border'\n                                        }`}\n                                        onClick={() => {\n                                            setSharedMetric({\n                                                query: {\n                                                    ...sharedMetricQuery,\n                                                    exposure_query: undefined,\n                                                },\n                                            })\n                                        }}\n                                    >\n                                        <div className=\"font-semibold flex justify-between items-center\">\n                                            <span>Default</span>\n                                            {!sharedMetricQuery.exposure_query && (\n                                                <IconCheckCircle fontSize={18} color=\"var(--accent-primary)\" />\n                                            )}\n                                        </div>\n                                        <div className=\"text-secondary text-sm leading-relaxed\">\n                                            Uses the number of unique users who trigger the{' '}\n                                            <LemonTag>$feature_flag_called</LemonTag> event as your exposure count. This\n                                            is the recommended setting for most experiments, as it accurately tracks\n                                            variant exposure.\n                                        </div>\n                                    </div>\n                                    <div\n                                        className={`flex-1 cursor-pointer p-4 rounded border ${\n                                            sharedMetricQuery.exposure_query\n                                                ? 'border-accent-primary bg-accent-primary-highlight'\n                                                : 'border-border'\n                                        }`}\n                                        onClick={() => {\n                                            setSharedMetric({\n                                                query: {\n                                                    ...sharedMetricQuery,\n                                                    exposure_query: {\n                                                        kind: NodeKind.TrendsQuery,\n                                                        series: [\n                                                            {\n                                                                kind: NodeKind.EventsNode,\n                                                                name: '$feature_flag_called',\n                                                                event: '$feature_flag_called',\n                                                                math: BaseMathType.UniqueUsers,\n                                                            },\n                                                        ],\n                                                        interval: 'day',\n                                                        dateRange: {\n                                                            date_from: dayjs()\n                                                                .subtract(EXPERIMENT_DEFAULT_DURATION, 'day')\n                                                                .format('YYYY-MM-DDTHH:mm'),\n                                                            date_to: dayjs().endOf('d').format('YYYY-MM-DDTHH:mm'),\n                                                            explicitDate: true,\n                                                        },\n                                                        trendsFilter: {\n                                                            display: ChartDisplayType.ActionsLineGraph,\n                                                        },\n                                                        filterTestAccounts: true,\n                                                    },\n                                                },\n                                            })\n                                        }}\n                                    >\n                                        <div className=\"font-semibold flex justify-between items-center\">\n                                            <span>Custom</span>\n                                            {sharedMetricQuery.exposure_query && (\n                                                <IconCheckCircle fontSize={18} color=\"var(--accent-primary)\" />\n                                            )}\n                                        </div>\n                                        <div className=\"text-secondary text-sm leading-relaxed\">\n                                            Define your own exposure metric for specific use cases, such as counting by\n                                            sessions instead of users. This gives you full control but requires careful\n                                            configuration.\n                                        </div>\n                                    </div>\n                                </div>\n                                {sharedMetricQuery.exposure_query && (\n                                    <>\n                                        <ActionFilter\n                                            bordered\n                                            filters={queryNodeToFilter(\n                                                sharedMetricQuery.exposure_query as InsightQueryNode\n                                            )}\n                                            setFilters={({\n                                                actions,\n                                                events,\n                                                data_warehouse,\n                                            }: Partial<FilterType>): void => {\n                                                const series = actionsAndEventsToSeries(\n                                                    { actions, events, data_warehouse } as any,\n                                                    true,\n                                                    MathAvailability.All\n                                                )\n                                                setSharedMetric({\n                                                    query: {\n                                                        ...sharedMetricQuery,\n                                                        exposure_query: {\n                                                            ...sharedMetricQuery.exposure_query,\n                                                            series,\n                                                        },\n                                                    },\n                                                })\n                                            }}\n                                            typeKey=\"experiment-metric\"\n                                            buttonCopy=\"Add graph series\"\n                                            showSeriesIndicator={true}\n                                            entitiesLimit={1}\n                                            showNumericalPropsOnly={true}\n                                            allowedMathTypes={LEGACY_EXPERIMENT_ALLOWED_MATH_TYPES}\n                                            {...commonActionFilterProps}\n                                        />\n                                        <div className=\"mt-4 space-y-4\">\n                                            <TestAccountFilterSwitch\n                                                checked={(() => {\n                                                    const val = sharedMetricQuery.exposure_query?.filterTestAccounts\n                                                    return hasFilters ? !!val : false\n                                                })()}\n                                                onChange={(checked: boolean) => {\n                                                    setSharedMetric({\n                                                        query: {\n                                                            ...sharedMetricQuery,\n                                                            exposure_query: {\n                                                                ...sharedMetricQuery.exposure_query,\n                                                                filterTestAccounts: checked,\n                                                            },\n                                                        },\n                                                    })\n                                                }}\n                                                fullWidth\n                                            />\n                                        </div>\n                                        <LemonBanner type=\"info\" className=\"mt-3 mb-3\">\n                                            Preview insights are generated based on {EXPERIMENT_DEFAULT_DURATION} days\n                                            of data. This can cause a mismatch between the preview and the actual\n                                            results.\n                                        </LemonBanner>\n                                        <div className=\"mt-4\">\n                                            <Query\n                                                query={{\n                                                    kind: NodeKind.InsightVizNode,\n                                                    source: sharedMetricQuery.exposure_query,\n                                                    showTable: false,\n                                                    showLastComputation: true,\n                                                    showLastComputationRefresh: false,\n                                                }}\n                                                readOnly\n                                            />\n                                        </div>\n                                    </>\n                                )}\n                            </>\n                        ),\n                    },\n                ]}\n            />\n        </>\n    )\n}\n"],
  "mappings": "orDAAAA,IAAAC,IAAAC,IAEA,IAAAC,EAAsC,OCFtCC,IAAAC,IAAAC,IACA,IAAAC,EAAsC,OCDtCC,IAAAC,IAAAC,IACA,IAAAC,EAAwF,OACxFC,GAAwB,QACxBC,EAAoC,QA2B7B,IAAMC,GAA2C,CACpD,KAAM,GACN,YAAa,GACb,MAAO,OACP,KAAM,CAAC,CACX,EAEaC,KAAoB,OAA2B,IACxD,SAAM,CAAC,CAA2B,KAClC,QAAMC,GAAQ,CAAC,SAAU,cAAe,oBAAqBA,CAAG,CAAC,KACjE,OAAKC,GAAUA,EAAM,gBAAkB,KAAK,KAC5C,WAAQ,KAAO,CACX,QAAS,CAACC,GAAoB,CAAC,mBAAmB,EAAGC,GAAiB,CAAC,qCAAqC,CAAC,EAC7G,OAAQ,CAACC,EAAkB,CAAC,cAAc,CAAC,CAC/C,EAAE,KACF,WAAQ,CACJ,gBAAkBC,IAAmC,CAAE,OAAAA,CAAO,GAC9D,mBAAoB,GACpB,mBAAoB,GACpB,mBAAoB,EACxB,CAAC,KAED,YAAQ,CAAC,CAAE,MAAAJ,EAAO,OAAAK,CAAO,KAAO,CAC5B,aAAc,CACV,iBAAkB,SACVL,EAAM,gBAAkBA,EAAM,iBAAmB,MAChC,MAAMM,EAAI,IACvB,kDAAkDN,EAAM,cAAc,EAC1E,EAGG,CACH,GAAGK,EAAO,eACd,CAER,CACJ,EAAE,KAEF,aAAU,CAAC,CAAE,QAAAE,EAAS,OAAAF,CAAO,KAAO,CAChC,mBAAoB,SAAY,CAC5B,IAAMG,EAAW,MAAMF,EAAI,OAAO,kDAAmDD,EAAO,YAAY,EACpGG,EAAS,KACTC,EAAW,QAAQ,oCAAoC,EACvDF,EAAQ,oCAAoCC,CAAwB,EACpED,EAAQ,kBAAkB,EAC1B,SAAO,QAAQ,KAAK,6BAA6B,EAEzD,EACA,mBAAoB,SAAY,EACX,MAAMD,EAAI,OACvB,kDAAkDD,EAAO,cAAc,GACvEA,EAAO,YACX,GACa,KACTI,EAAW,QAAQ,oCAAoC,EACvDF,EAAQ,kBAAkB,EAC1B,SAAO,QAAQ,KAAK,6BAA6B,EAEzD,EACA,mBAAoB,SAAY,CAC5B,GAAI,CACA,MAAMD,EAAI,OAAO,kDAAkDD,EAAO,cAAc,EAAE,EAC1FI,EAAW,QAAQ,oCAAoC,EACvDF,EAAQ,kBAAkB,EAC1B,SAAO,QAAQ,KAAK,6BAA6B,CACrD,OAASG,EAAO,CACZD,EAAW,MAAM,gCAAgC,EACjD,QAAQ,MAAMC,CAAK,CACvB,CACJ,CACJ,EAAE,KAEF,YAAS,CACL,aAAc,CACV,CAAE,GAAGb,EAAkB,EACvB,CACI,gBAAiB,CAACc,EAAO,CAAE,OAAAP,CAAO,KAAO,CAAE,GAAGO,EAAO,GAAGP,CAAO,EACnE,CACJ,CACJ,CAAC,KAED,aAAU,CACN,eAAgB,CACZ,IAAM,CAAC,CAACQ,EAAGZ,IAAUA,EAAM,gBAAkB,KAAK,EACjDa,GAAoCA,CACzC,EACA,MAAO,CAAEC,GAAM,CAACA,EAAE,cAAc,EAAID,GAAmBA,IAAmB,KAAK,EAC/E,gBAAiB,CACZC,GAAM,CAACA,EAAE,YAAY,EACrBC,IAAmC,CAChC,GAAGlB,GACH,MAAOkB,EAAaC,EAAc,4BAA4B,EACxDC,GAAyB,EACzBC,EAAuB,CACjC,EACJ,CACJ,CAAC,KAED,eAAY,CAAC,CAAE,QAAAX,EAAS,OAAAF,CAAO,KAAO,CAClC,kCAAmC,CAAC,CAAE,GAAAc,CAAG,EAAGP,EAAGQ,EAAIC,EAAiBC,IAAqB,CACrF,IAAMC,EAAgBF,EAAgB,SAAWA,EAAgB,WAAaC,GAAkB,SAEhG,GAAIH,GAAMI,EAAe,CACrB,IAAMC,EAAWL,IAAO,MAAQ,MAAQ,SAASA,CAAE,EAC/CK,IAAa,OACbjB,EAAQ,gBAAgB,CAAE,GAAGF,EAAO,eAAgB,CAAC,EAGrDmB,IAAa,OAASA,IAAanB,EAAO,gBAC1CE,EAAQ,iBAAiB,CAEjC,CACJ,CACJ,EAAE,CACN,CAAC,ED3Gc,IAAAkB,EAAA,OAbR,SAASC,IAA6C,CACzD,GAAM,CAAE,aAAAC,CAAa,KAAI,aAAUC,CAAiB,EAC9C,CAAE,gBAAAC,CAAgB,KAAI,cAAWD,CAAiB,EAElD,CAAE,YAAAE,CAAY,KAAI,aAAUC,CAAS,EACrCC,GAAcF,GAAa,sBAAwB,CAAC,GAAG,OAAS,EAEhEG,EAAoB,CACtB,GAAGC,EACH,2BAA4B,mBAAkE,CAClG,EAEA,GAAI,CAACP,GAAc,MACf,SAAO,oBAAE,EAGb,IAAMQ,EAAoBR,EAAa,MAEvC,SACI,oBACI,oBAACS,EAAA,CACG,SAAQ,GACR,QAASC,EAAkBF,EAAkB,aAAa,EAC1D,WAAY,CAAC,CAAE,QAAAG,EAAS,OAAAC,EAAQ,eAAAC,CAAe,IAAiC,CAC5E,GAAI,CAACb,GAAc,MACf,OAGJ,IAAMc,EAASC,EACX,CAAE,QAAAJ,EAAS,OAAAC,EAAQ,eAAAC,CAAe,EAClC,IAEJ,EACAX,EAAgB,CACZ,MAAO,CACH,GAAGM,EACH,cAAe,CACX,GAAGA,EAAkB,cACrB,OAAAM,CACJ,CACJ,CACJ,CAAC,CACL,EACA,QAAQ,oBACR,mBACA,WAAW,kBACX,oBAAqB,GACrB,oBAAoB,UACpB,SAAU,GACV,gBAAiB,GAChB,GAAGR,EACR,KACA,QAAC,OAAI,UAAU,iBACX,oBAACU,GAAA,CACG,MAAOC,GACHT,EAAkB,cAAc,8BAAgC,OAChEA,EAAkB,cAAc,eAAe,wBAA0B,MAC7E,EACA,SAAWU,GAAU,CACjBhB,EAAgB,CACZ,MAAO,CACH,GAAGM,EACH,cAAe,CACX,GAAGA,EAAkB,cACrB,cAAe,CACX,GAAGA,EAAkB,cAAc,cACnC,uBAAwBU,CAC5B,CACJ,CACJ,CACJ,CAAC,CACL,EACJ,KACA,OAACC,GAAA,CACG,qBAAsBX,EAAkB,eAAe,eAAe,qBACtE,yBAA0BA,EAAkB,eAAe,eAAe,yBAC1E,6BAA+BY,GAAyB,CACpDlB,EAAgB,CACZ,MAAO,CACH,GAAGM,EACH,cAAe,CACX,GAAGA,EAAkB,cAErB,cAAe,CACX,GAAGA,EAAkB,cAAc,cACnC,qBAAsBY,CAC1B,CACJ,CACJ,CACJ,CAAC,CACL,EACA,iCAAmCC,GAA6B,CAC5DnB,EAAgB,CACZ,MAAO,CACH,GAAGM,EACH,cAAe,CACX,GAAGA,EAAkB,cACrB,cAAe,CACX,GAAGA,EAAkB,cAAc,cACnC,yBAA0Ba,GAA4B,MAC1D,CACJ,CACJ,CACJ,CAAC,CACL,EACJ,KACA,OAACC,GAAA,CACG,OAAQ,IAAM,CACV,IAAMC,EACFf,EAAkB,eAAe,eAAe,yBAC9CgB,EACFhB,EAAkB,eAAe,eAAe,0BASpD,OANKe,EAEKA,IAA6B,OAC7B,GAAGA,CAAwB,IAAIC,GAA6B,CAAC,GAC7DD,eAGd,GAAG,EACH,SAAWL,GAAU,CACjB,GAAM,CAACK,EAA0BC,CAAyB,GAAKN,GAAS,IAAI,MAAM,GAAG,EACrFhB,EAAgB,CACZ,MAAO,CACH,GAAGM,EACH,cAAe,CACX,GAAGA,EAAkB,cACrB,cAAe,CACX,GAAGA,EAAkB,cAAc,cACnC,yBAA0Be,EAC1B,0BAA2BC,EACrB,SAASA,CAAyB,EAClC,MACV,CACJ,CACJ,CACJ,CAAC,CACL,EACA,YAAahB,EAAkB,eAAe,QAAQ,OAC1D,KACA,OAACiB,EAAA,CACG,SAAU,IAAM,CACZ,IAAMC,EAAMlB,EAAkB,eAAe,mBAC7C,OAAOH,EAAa,CAAC,CAACqB,EAAM,EAChC,GAAG,EACH,SAAWC,GAAqB,CAC5BzB,EAAgB,CACZ,MAAO,CACH,GAAGM,EACH,cAAe,CACX,GAAGA,EAAkB,cACrB,mBAAoBmB,CACxB,CACJ,CACJ,CAAC,CACL,EACA,UAAS,GACb,GACJ,KAEA,QAACC,EAAA,CAAY,KAAK,OAAO,UAAU,YAAY,qDACFC,EAA4B,wFAEzE,KAEA,OAAC,OAAI,UAAU,OACX,mBAACC,EAAA,CACG,MAAO,CACH,sBACA,OAAQtB,EAAkB,cAC1B,UAAW,GACX,oBAAqB,GACrB,2BAA4B,EAChC,EACA,SAAQ,GACZ,EACJ,GACJ,CAER,CE7MAuB,IAAAC,IAAAC,IAEA,IAAAC,EAAsC,OAItC,IAAAC,GAAyB,QAuBV,IAAAC,EAAA,OARR,SAASC,IAA4C,CACxD,GAAM,CAAE,aAAAC,CAAa,KAAI,aAAUC,CAAiB,EAC9C,CAAE,gBAAAC,CAAgB,KAAI,cAAWD,CAAiB,EAClD,CAAE,YAAAE,CAAY,KAAI,aAAUC,CAAS,EACrCC,GAAcF,GAAa,sBAAwB,CAAC,GAAG,OAAS,EAChE,CAACG,EAAWC,CAAY,KAAI,aAAS,MAAM,EAEjD,GAAI,CAACP,GAAc,MACf,SAAO,oBAAE,EAGb,IAAMQ,EAAoBR,EAAa,MAEvC,SACI,mBACI,mBAACS,EAAA,CACG,UAAWH,EACX,SAAWI,GAAWH,EAAaG,CAAM,EACzC,KAAM,CACF,CACI,IAAK,OACL,MAAO,cACP,WACI,oBACI,oBAACC,EAAA,CACG,SAAQ,GACR,QAASC,EAAkBJ,EAAkB,WAAW,EACxD,WAAY,CAAC,CAAE,QAAAK,EAAS,OAAAC,EAAQ,eAAAC,CAAe,IAAiC,CAC5E,IAAMC,EAASC,EACX,CAAE,QAAAJ,EAAS,OAAAC,EAAQ,eAAAC,CAAe,EAClC,IAEJ,EACAb,EAAgB,CACZ,MAAO,CACH,GAAGM,EACH,YAAa,CACT,GAAGA,EAAkB,YACrB,OAAAQ,CACJ,CACJ,CACJ,CAAC,CACL,EACA,QAAQ,oBACR,WAAW,mBACX,oBAAqB,GACrB,cAAe,EACf,uBAAwB,GACxB,iBAAkBE,EACjB,GAAGC,EACR,KACA,OAAC,OAAI,UAAU,iBACX,mBAACC,EAAA,CACG,SAAU,IAAM,CACZ,IAAMC,EAAMb,EAAkB,aAAa,mBAC3C,OAAOH,EAAa,CAAC,CAACgB,EAAM,EAChC,GAAG,EACH,SAAWC,GAAqB,CAC5BpB,EAAgB,CACZ,MAAO,CACH,GAAGM,EACH,YAAa,CACT,GAAGA,EAAkB,YACrB,mBAAoBc,CACxB,CACJ,CACJ,CAAC,CACL,EACA,UAAS,GACb,EACJ,KACA,QAACC,EAAA,CAAY,KAAK,OAAO,UAAU,YAAY,qDACFC,EAA4B,wFAEzE,KACA,OAAC,OAAI,UAAU,OACX,mBAACC,EAAA,CACG,MAAO,CACH,sBACA,OAAQjB,EAAkB,YAC1B,UAAW,GACX,oBAAqB,GACrB,2BAA4B,EAChC,EACA,SAAQ,GACZ,EACJ,GACJ,CAER,EACA,CACI,IAAK,WACL,MAAO,WACP,WACI,oBACI,qBAAC,OAAI,UAAU,kBACX,qBAAC,OACG,UAAW,4CACNA,EAAkB,eAEb,gBADA,mDAEV,GACA,QAAS,IAAM,CACXN,EAAgB,CACZ,MAAO,CACH,GAAGM,EACH,eAAgB,MACpB,CACJ,CAAC,CACL,EAEA,qBAAC,OAAI,UAAU,kDACX,oBAAC,QAAK,mBAAO,EACZ,CAACA,EAAkB,mBAChB,OAACkB,EAAA,CAAgB,SAAU,GAAI,MAAM,wBAAwB,GAErE,KACA,QAAC,OAAI,UAAU,yCAAyC,4DACJ,OAChD,OAACC,EAAA,CAAS,gCAAoB,EAAW,kIAG7C,GACJ,KACA,QAAC,OACG,UAAW,4CACPnB,EAAkB,eACZ,oDACA,eACV,GACA,QAAS,IAAM,CACXN,EAAgB,CACZ,MAAO,CACH,GAAGM,EACH,eAAgB,CACZ,mBACA,OAAQ,CACJ,CACI,kBACA,KAAM,uBACN,MAAO,uBACP,UACJ,CACJ,EACA,SAAU,MACV,UAAW,CACP,aAAW,EAAAoB,SAAM,EACZ,SAASJ,EAA6B,KAAK,EAC3C,OAAO,kBAAkB,EAC9B,WAAS,EAAAI,SAAM,EAAE,MAAM,GAAG,EAAE,OAAO,kBAAkB,EACrD,aAAc,EAClB,EACA,aAAc,CACV,0BACJ,EACA,mBAAoB,EACxB,CACJ,CACJ,CAAC,CACL,EAEA,qBAAC,OAAI,UAAU,kDACX,oBAAC,QAAK,kBAAM,EACXpB,EAAkB,mBACf,OAACkB,EAAA,CAAgB,SAAU,GAAI,MAAM,wBAAwB,GAErE,KACA,OAAC,OAAI,UAAU,yCAAyC,kLAIxD,GACJ,GACJ,EACClB,EAAkB,mBACf,oBACI,oBAACG,EAAA,CACG,SAAQ,GACR,QAASC,EACLJ,EAAkB,cACtB,EACA,WAAY,CAAC,CACT,QAAAK,EACA,OAAAC,EACA,eAAAC,CACJ,IAAiC,CAC7B,IAAMC,EAASC,EACX,CAAE,QAAAJ,EAAS,OAAAC,EAAQ,eAAAC,CAAe,EAClC,IAEJ,EACAb,EAAgB,CACZ,MAAO,CACH,GAAGM,EACH,eAAgB,CACZ,GAAGA,EAAkB,eACrB,OAAAQ,CACJ,CACJ,CACJ,CAAC,CACL,EACA,QAAQ,oBACR,WAAW,mBACX,oBAAqB,GACrB,cAAe,EACf,uBAAwB,GACxB,iBAAkBE,EACjB,GAAGC,EACR,KACA,OAAC,OAAI,UAAU,iBACX,mBAACC,EAAA,CACG,SAAU,IAAM,CACZ,IAAMC,EAAMb,EAAkB,gBAAgB,mBAC9C,OAAOH,EAAa,CAAC,CAACgB,EAAM,EAChC,GAAG,EACH,SAAWC,GAAqB,CAC5BpB,EAAgB,CACZ,MAAO,CACH,GAAGM,EACH,eAAgB,CACZ,GAAGA,EAAkB,eACrB,mBAAoBc,CACxB,CACJ,CACJ,CAAC,CACL,EACA,UAAS,GACb,EACJ,KACA,QAACC,EAAA,CAAY,KAAK,OAAO,UAAU,YAAY,qDACFC,EAA4B,wFAGzE,KACA,OAAC,OAAI,UAAU,OACX,mBAACC,EAAA,CACG,MAAO,CACH,sBACA,OAAQjB,EAAkB,eAC1B,UAAW,GACX,oBAAqB,GACrB,2BAA4B,EAChC,EACA,SAAQ,GACZ,EACJ,GACJ,GAER,CAER,CACJ,EACJ,EACJ,CAER,CHjPgB,IAAAqB,EAAA,OAnBHC,GAAqB,CAC9B,UAAWC,GACX,MAAOC,EACP,cAAe,CAAC,CAAE,OAAQ,CAAE,GAAAC,CAAG,CAAE,KAAO,CACpC,eAAgBA,IAAO,MAAQ,MAAQ,SAASA,CAAE,CACtD,EACJ,EAEO,SAASF,IAA4B,CACxC,GAAM,CAAE,eAAAG,EAAgB,aAAAC,CAAa,KAAI,aAAUH,CAAiB,EAC9D,CAAE,gBAAAI,EAAiB,mBAAAC,EAAoB,mBAAAC,EAAoB,mBAAAC,CAAmB,KAChF,cAAWP,CAAiB,EAC1B,CAAE,aAAAQ,CAAa,KAAI,aAAUC,CAAU,EAEvC,CAAE,KAAMC,CAAgB,KAAI,aAAUC,EAAS,EAErD,MAAI,CAACR,GAAgB,CAACA,EAAa,SAE3B,OAAC,OAAI,UAAU,iDACX,mBAACS,EAAA,CAAQ,UAAU,WAAW,EAClC,KAKJ,QAAC,OAAI,UAAU,gBACV,UAAAT,EAAa,MAAM,OAAS,uBACzB,QAAC,OAAI,UAAU,kBACX,qBAAC,OACG,UAAW,4CACPA,EAAa,MAAM,OAAS,wBACtB,oDACA,eACV,GACA,QAAS,IAAM,CACXC,EAAgB,CACZ,MAAOS,EAAuB,CAClC,CAAC,CACL,EAEA,qBAAC,OAAI,UAAU,kDACX,oBAAC,QAAK,iBAAK,EACVV,EAAa,MAAM,OAAS,4BACzB,OAACW,EAAA,CAAgB,SAAU,GAAI,MAAM,wBAAwB,GAErE,KACA,OAAC,OAAI,UAAU,yCAAyC,6DAExD,GACJ,KACA,QAAC,OACG,UAAW,4CACPX,EAAa,MAAM,OAAS,yBACtB,oDACA,eACV,GACA,QAAS,IAAM,CACXC,EAAgB,CACZ,MAAOW,GAAwB,CACnC,CAAC,CACL,EAEA,qBAAC,OAAI,UAAU,kDACX,oBAAC,QAAK,kBAAM,EACXZ,EAAa,MAAM,OAAS,6BACzB,OAACW,EAAA,CAAgB,SAAU,GAAI,MAAM,wBAAwB,GAErE,KACA,OAAC,OAAI,UAAU,yCAAyC,8DAExD,GACJ,GACJ,KAEJ,QAAC,OAAI,UAAW,kBAAkBN,EAAe,WAAa,UAAU,OACpE,qBAAC,OAAI,UAAU,OACX,oBAACQ,EAAA,CAAW,gBAAI,KAChB,OAACC,EAAA,CACG,MAAOd,EAAa,KACpB,SAAWe,GAAY,CACnBd,EAAgB,CACZ,KAAMc,CACV,CAAC,CACL,EACJ,GACJ,KACA,QAAC,OAAI,UAAU,OACX,oBAACF,EAAA,CAAW,kCAAsB,KAClC,OAACC,EAAA,CACG,MAAOd,EAAa,YACpB,SAAWgB,GAAmB,CAC1Bf,EAAgB,CACZ,YAAae,CACjB,CAAC,CACL,EACJ,GACJ,KACA,QAAC,OAAI,UAAU,OACX,oBAACH,EAAA,CAAW,gBAAI,KAChB,OAAC,OAAI,UAAU,OACX,mBAACI,GAAA,CACG,KAAMjB,EAAa,MAAQ,CAAC,EAC5B,SAAWkB,GAAY,CACnBjB,EAAgB,CACZ,KAAMiB,CACV,CAAC,CACL,EACA,OAAQ,GACR,cAAeX,EACf,YAAU,qBACd,EACJ,GACJ,EACCP,EAAa,MAAM,OAAS,sBACzB,OAACmB,GAAA,CACG,OAAQnB,EAAa,MACrB,gBAAiB,CAAC,CAAE,UAAAoB,CAAU,IAAuC,CACjEnB,EAAgB,CACZ,GAAGD,EACH,MAAOoB,CACX,CAAC,CACL,EACJ,EACApB,EAAa,MAAM,OAAS,2BAC5B,OAACqB,GAAA,EAA6B,KAE9B,OAACC,GAAA,EAA8B,GAEvC,KACA,QAAC,OAAI,UAAU,4BACV,UAAAvB,IAAmB,UAChB,OAACwB,EAAA,CACG,KAAK,SACL,KAAK,UACL,OAAO,SACP,QAAS,IAAM,CACXC,EAAY,KAAK,CACb,MAAO,sBACP,WAAS,OAAC,OAAI,UAAU,yBAAyB,yCAA6B,EAC9E,cAAe,CACX,SAAU,SACV,KAAM,UACN,QAAS,IAAMpB,EAAmB,EAClC,KAAM,OACV,EACA,gBAAiB,CACb,SAAU,SACV,KAAM,WACN,KAAM,OACV,CACJ,CAAC,CACL,EACH,kBAED,KAEJ,OAACmB,EAAA,CACG,UAAU,UACV,eAAgBvB,EAAa,KAAO,OAAY,mCAChD,KAAK,SACL,KAAK,UACL,QAAS,IAAM,CACPD,IAAmB,MACnBG,EAAmB,EAEnBC,EAAmB,CAE3B,EACH,gBAED,GACJ,GACJ,CAER",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "import_kea_router", "NEW_SHARED_METRIC", "sharedMetricLogic", "key", "props", "sharedMetricsLogic", "eventUsageLogic", "featureFlagLogic", "metric", "values", "api_default", "actions", "response", "lemonToast", "error", "state", "_", "sharedMetricId", "s", "featureFlags", "FEATURE_FLAGS", "getDefaultBinomialMetric", "getDefaultTrendsMetric", "id", "__", "currentLocation", "previousLocation", "didPathChange", "parsedId", "import_jsx_runtime", "LegacySharedFunnelsMetricForm", "sharedMetric", "sharedMetricLogic", "setSharedMetric", "currentTeam", "teamLogic", "hasFilters", "actionFilterProps", "commonActionFilterProps", "sharedMetricQuery", "ActionFilter", "queryNodeToFilter", "actions", "events", "data_warehouse", "series", "actionsAndEventsToSeries", "FunnelAggregationSelect", "getHogQLValue", "value", "FunnelConversionWindowFilter", "funnelWindowInterval", "funnelWindowIntervalUnit", "FunnelAttributionSelect", "breakdownAttributionType", "breakdownAttributionValue", "TestAccountFilterSwitch", "val", "checked", "LemonBanner", "EXPERIMENT_DEFAULT_DURATION", "Query", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "LegacySharedTrendsMetricForm", "sharedMetric", "sharedMetricLogic", "setSharedMetric", "currentTeam", "teamLogic", "hasFilters", "activeTab", "setActiveTab", "sharedMetricQuery", "LemonTabs", "newKey", "ActionFilter", "queryNodeToFilter", "actions", "events", "data_warehouse", "series", "actionsAndEventsToSeries", "LEGACY_EXPERIMENT_ALLOWED_MATH_TYPES", "commonActionFilterProps", "TestAccountFilterSwitch", "val", "checked", "LemonBanner", "EXPERIMENT_DEFAULT_DURATION", "Query", "IconCheckCircle", "LemonTag", "dayjs", "import_jsx_runtime", "scene", "SharedMetric", "sharedMetricLogic", "id", "sharedMetricId", "sharedMetric", "setSharedMetric", "createSharedMetric", "updateSharedMetric", "deleteSharedMetric", "isDarkModeOn", "themeLogic", "allExistingTags", "tagsModel", "Spinner", "getDefaultTrendsMetric", "IconCheckCircle", "getDefaultFunnelsMetric", "LemonLabel", "LemonInput", "newName", "newDescription", "ObjectTags", "newTags", "ExperimentMetricForm", "newMetric", "LegacySharedTrendsMetricForm", "LegacySharedFunnelsMetricForm", "LemonButton", "LemonDialog"]
}
