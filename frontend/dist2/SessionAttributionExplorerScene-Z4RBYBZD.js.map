{
  "version": 3,
  "sources": ["../src/scenes/web-analytics/SessionAttributionExplorer/SessionAttributionExplorerScene.tsx", "../src/scenes/web-analytics/SessionAttributionExplorer/sessionAttributionExplorerLogic.ts"],
  "sourcesContent": ["import { IconCollapse, IconExpand, IconPlus } from '@posthog/icons'\nimport { LemonMenu, LemonSwitch } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { supportLogic } from 'lib/components/Support/supportLogic'\nimport { IconFeedback } from 'lib/lemon-ui/icons'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport React from 'react'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\nimport { SceneExport } from 'scenes/sceneTypes'\n\nimport { Query } from '~/queries/Query/Query'\nimport { DataTableNode, HogQLQuery, SessionAttributionGroupBy } from '~/queries/schema/schema-general'\nimport { isSessionPropertyFilters } from '~/queries/schema-guards'\nimport { QueryContext, QueryContextColumnComponent } from '~/queries/types'\n\nimport { sessionAttributionExplorerLogic } from './sessionAttributionExplorerLogic'\n\nexport function SessionAttributionExplorerScene(): JSX.Element {\n    return <SessionAttributionExplorer />\n}\n\nexport const scene: SceneExport = {\n    component: SessionAttributionExplorerScene,\n    logic: sessionAttributionExplorerLogic,\n}\n\nconst ExpandableDataCell: QueryContextColumnComponent = ({ value }: { value: unknown }): JSX.Element => {\n    const [isExpanded, setIsExpanded] = React.useState(false)\n\n    if (value == null || (Array.isArray(value) && value.length === 0)) {\n        return (\n            <Tooltip title=\"NULL\">\n                <span aria-hidden={true} className=\"cursor-default\">\n                    \u2014\n                </span>\n            </Tooltip>\n        )\n    }\n\n    if (!Array.isArray(value)) {\n        return <div>{value}</div>\n    }\n\n    return (\n        <div className=\"flex flex-row\">\n            <div>\n                <span>\n                    <LemonButton\n                        active={isExpanded}\n                        onClick={() => {\n                            setIsExpanded(!isExpanded)\n                        }}\n                        icon={isExpanded ? <IconCollapse /> : <IconExpand />}\n                        title={isExpanded ? 'Show less' : 'Show more'}\n                        size=\"small\"\n                    />\n                </span>\n            </div>\n            <div className=\"flex flex-col items-center justify-center\">\n                <div className=\"flex flex-1\">\n                    {isExpanded ? (\n                        <ul className=\"flex-1 flex flex-col\">\n                            {value.map((url) => (\n                                <li className=\"flex-1 mb-1 break-all\" key={url}>\n                                    {url}\n                                </li>\n                            ))}\n                        </ul>\n                    ) : (\n                        value[0]\n                    )}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst queryContext: QueryContext = {\n    columns: {\n        channel_type: {\n            title: 'Channel type',\n            render: ExpandableDataCell,\n        },\n        count: {\n            title: 'Session count',\n            align: 'right',\n        },\n        referring_domain: {\n            title: 'Referring domain',\n            render: ExpandableDataCell,\n        },\n        utm_source: {\n            title: 'UTM source',\n            render: ExpandableDataCell,\n        },\n        utm_medium: {\n            title: 'UTM medium',\n            render: ExpandableDataCell,\n        },\n        utm_campaign: {\n            title: 'UTM campaign',\n            render: ExpandableDataCell,\n        },\n        ad_ids: {\n            title: 'Ad IDs',\n            render: ExpandableDataCell,\n        },\n        example_entry_urls: {\n            title: 'Example entry URLs',\n            render: ExpandableDataCell,\n        },\n    },\n    emptyStateHeading: 'There are no matching sessions for this query',\n    emptyStateDetail: 'Try changing the date range, or changing the property filters.',\n}\n\nconst groupByOptions = [\n    {\n        label: 'Channel type',\n        value: SessionAttributionGroupBy.ChannelType,\n    },\n    {\n        label: 'Referring domain',\n        value: SessionAttributionGroupBy.ReferringDomain,\n    },\n    {\n        label: 'UTM source',\n        value: SessionAttributionGroupBy.Source,\n    },\n    {\n        label: 'UTM medium',\n        value: SessionAttributionGroupBy.Medium,\n    },\n    {\n        label: 'UTM campaign',\n        value: SessionAttributionGroupBy.Campaign,\n    },\n    {\n        label: 'Ad IDs',\n        value: SessionAttributionGroupBy.AdIds,\n    },\n    {\n        label: 'Entry URL',\n        value: SessionAttributionGroupBy.InitialURL,\n    },\n]\n\nexport const GroupByFilter = (): JSX.Element => {\n    const { groupBy } = useValues(sessionAttributionExplorerLogic)\n    const { enableGroupBy, disableGroupBy } = useActions(sessionAttributionExplorerLogic)\n\n    return (\n        <div className=\"mb-2\">\n            <LemonMenu\n                items={groupByOptions.map(({ label, value }) => {\n                    return {\n                        label: () => (\n                            <LemonSwitch\n                                checked={groupBy.includes(value)}\n                                onChange={(val) => {\n                                    if (val) {\n                                        enableGroupBy(value)\n                                    } else {\n                                        disableGroupBy(value)\n                                    }\n                                }}\n                                fullWidth={true}\n                                label={label}\n                            />\n                        ),\n                    }\n                })}\n                closeOnClickInside={false}\n            >\n                <LemonButton icon={<IconPlus />} size=\"small\" type=\"secondary\">\n                    Group by\n                </LemonButton>\n            </LemonMenu>\n        </div>\n    )\n}\n\nexport function SessionAttributionExplorer(): JSX.Element {\n    const { query } = useValues(sessionAttributionExplorerLogic)\n    const { setDateRange, setProperties } = useActions(sessionAttributionExplorerLogic)\n    const { preflight } = useValues(preflightLogic)\n    const { openSupportForm } = useActions(supportLogic)\n\n    const showSupportOptions = preflight?.cloud\n    return (\n        <div>\n            <LemonBanner type=\"info\" className=\"my-4\">\n                <div className=\"flex items-center flex-wrap gap-2 justify-between\">\n                    <div className=\"flex-1 min-w-full sm:min-w-0\">\n                        <p>\n                            You can use the Session attribution explorer (beta) to understand how your sessions are\n                            attributed. We use the referring domain, <code>utm_source</code>, <code>utm_medium</code>,{' '}\n                            <code>utm_campaign</code>, and the presence of advertising ids like <code>gclid</code> and{' '}\n                            <code>gad_source</code>, to assign a session a{' '}\n                            <Link to=\"https://posthog.com/docs/data/channel-type\">Channel type</Link>.\n                        </p>\n                        <p>\n                            If you believe that a session is attributed incorrectly, please let us know! If you'd like\n                            to customize your Channel attribution, please leave feedback on the{' '}\n                            <Link to=\"https://github.com/PostHog/posthog/issues/21195\">feature request</Link>.\n                        </p>\n                    </div>\n                    {showSupportOptions ? (\n                        <span className=\"flex items-center gap-2\">\n                            <LemonButton\n                                type=\"secondary\"\n                                icon={<IconFeedback />}\n                                onClick={() =>\n                                    openSupportForm({\n                                        kind: 'feedback',\n                                        isEmailFormOpen: true,\n                                        target_area: 'web_analytics',\n                                    })\n                                }\n                            >\n                                Give feedback\n                            </LemonButton>\n                        </span>\n                    ) : null}\n                </div>\n            </LemonBanner>\n            <GroupByFilter />\n            <Query<DataTableNode>\n                context={queryContext}\n                query={query}\n                setQuery={(query) => {\n                    const source = query.source as HogQLQuery\n                    if (source.filters && isSessionPropertyFilters(source.filters.properties)) {\n                        setProperties(source.filters.properties)\n                    } else {\n                        setProperties([])\n                    }\n                    setDateRange(source.filters?.dateRange ?? null)\n                }}\n            />\n        </div>\n    )\n}\n", "import { actions, connect, kea, path, reducers, selectors } from 'kea'\nimport { actionToUrl, urlToAction } from 'kea-router'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { urls } from 'scenes/urls'\n\nimport {\n    DataTableNode,\n    DateRange,\n    NodeKind,\n    SessionAttributionExplorerQuery,\n    SessionAttributionGroupBy,\n} from '~/queries/schema/schema-general'\nimport { isSessionPropertyFilters } from '~/queries/schema-guards'\nimport { SessionPropertyFilter } from '~/types'\n\nimport type { sessionAttributionExplorerLogicType } from './sessionAttributionExplorerLogicType'\n\nexport const initialProperties = [] as SessionPropertyFilter[]\nexport const initialGroupBy = [\n    SessionAttributionGroupBy.Source,\n    SessionAttributionGroupBy.Medium,\n    SessionAttributionGroupBy.ChannelType,\n    SessionAttributionGroupBy.ReferringDomain,\n]\nexport const defaultDateRange: DateRange = { date_from: '-7d', date_to: 'now' }\nexport const sessionAttributionExplorerLogic = kea<sessionAttributionExplorerLogicType>([\n    path(['scenes', 'webAnalytics', 'sessionDebuggerLogic']),\n    connect(() => ({\n        values: [featureFlagLogic, ['featureFlags']],\n    })),\n    actions({\n        setProperties: (properties: SessionPropertyFilter[]) => ({ properties }),\n        setDateRange: (dateRange: DateRange | null) => ({ dateRange }),\n        setStateFromUrl: (state: { properties: SessionPropertyFilter[]; dateRange: DateRange | null }) => ({\n            state,\n        }),\n        enableGroupBy: (groupBy: SessionAttributionGroupBy) => {\n            return { groupBy }\n        },\n        disableGroupBy: (groupBy: SessionAttributionGroupBy) => {\n            return { groupBy }\n        },\n    }),\n    reducers({\n        properties: [\n            initialProperties,\n            {\n                setProperties: (_, { properties }) => properties,\n                setStateFromUrl: (_, { state }) => state.properties,\n            },\n        ],\n        dateRange: [\n            null as DateRange | null,\n            {\n                setDateRange: (_, { dateRange }) => dateRange,\n                setStateFromUrl: (_, { state }) => state.dateRange,\n            },\n        ],\n        groupBy: [\n            initialGroupBy,\n            {\n                enableGroupBy: (state, { groupBy }) => {\n                    return Array.from(new Set([...state, groupBy]))\n                },\n                disableGroupBy: (state, { groupBy }) => {\n                    return state.filter((item) => item !== groupBy)\n                },\n            },\n        ],\n    }),\n    selectors({\n        query: [\n            (s) => [s.properties, s.dateRange, s.groupBy],\n            (properties: SessionPropertyFilter[], dateRange, groupBy): DataTableNode => {\n                const filters = {\n                    properties,\n                    dateRange: dateRange ?? defaultDateRange,\n                }\n                const source: SessionAttributionExplorerQuery = {\n                    kind: NodeKind.SessionAttributionExplorerQuery,\n                    groupBy: groupBy,\n                    filters: filters,\n                }\n\n                return {\n                    kind: NodeKind.DataTableNode,\n                    source: source,\n                    showPropertyFilter: [TaxonomicFilterGroupType.SessionProperties],\n                    showDateRange: true,\n                    showOpenEditorButton: true,\n                    showReload: true,\n                }\n            },\n        ],\n    }),\n\n    actionToUrl(({ values }) => {\n        const stateToUrl = (): [string, Record<string, string>] => {\n            const { properties, dateRange } = values\n\n            const urlParams = {}\n            if (properties.length > 0) {\n                urlParams['properties'] = properties\n            }\n            if (dateRange) {\n                urlParams['dateRange'] = dateRange\n            }\n\n            return [urls.sessionAttributionExplorer(), urlParams]\n        }\n\n        return {\n            setProperties: stateToUrl,\n            setDateRange: stateToUrl,\n        }\n    }),\n\n    urlToAction(({ actions }) => ({\n        [urls.sessionAttributionExplorer()]: (_, { properties, dateRange }) => {\n            const parsedProperties = isSessionPropertyFilters(properties) ? properties : initialProperties\n            const parsedDateRange = dateRange ?? null\n\n            actions.setStateFromUrl({\n                properties: parsedProperties,\n                dateRange: parsedDateRange,\n            })\n        },\n    })),\n])\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "initialProperties", "initialGroupBy", "defaultDateRange", "sessionAttributionExplorerLogic", "featureFlagLogic", "properties", "dateRange", "state", "groupBy", "_", "item", "s", "filters", "source", "values", "stateToUrl", "urlParams", "urls", "actions", "parsedProperties", "isSessionPropertyFilters", "parsedDateRange", "import_jsx_runtime", "SessionAttributionExplorerScene", "SessionAttributionExplorer", "scene", "sessionAttributionExplorerLogic", "ExpandableDataCell", "value", "isExpanded", "setIsExpanded", "React", "Tooltip", "LemonButton", "IconCollapse", "IconExpand", "url", "queryContext", "groupByOptions", "GroupByFilter", "groupBy", "enableGroupBy", "disableGroupBy", "LemonMenu", "label", "LemonSwitch", "val", "IconPlus", "query", "setDateRange", "setProperties", "preflight", "preflightLogic", "openSupportForm", "supportLogic", "showSupportOptions", "LemonBanner", "Link", "IconFeedback", "Query", "source", "isSessionPropertyFilters"]
}
