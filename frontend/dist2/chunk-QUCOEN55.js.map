{
  "version": 3,
  "sources": ["../src/lib/integrations/integrationsLogic.ts"],
  "sourcesContent": ["import { lemonToast } from '@posthog/lemon-ui'\nimport { actions, afterMount, connect, kea, listeners, path, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport { router, urlToAction } from 'kea-router'\nimport api from 'lib/api'\nimport { fromParamsGivenUrl } from 'lib/utils'\nimport IconGoogleAds from 'public/services/google-ads.png'\nimport IconGoogleCloud from 'public/services/google-cloud.png'\nimport IconGoogleCloudStorage from 'public/services/google-cloud-storage.png'\nimport IconHubspot from 'public/services/hubspot.png'\nimport IconLinkedIn from 'public/services/linkedin.png'\nimport IconSalesforce from 'public/services/salesforce.png'\nimport IconSlack from 'public/services/slack.png'\nimport IconSnapchat from 'public/services/snapchat.png'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\nimport { urls } from 'scenes/urls'\n\nimport { IntegrationKind, IntegrationType } from '~/types'\n\nimport type { integrationsLogicType } from './integrationsLogicType'\n\nconst ICONS: Record<IntegrationKind, any> = {\n    slack: IconSlack,\n    salesforce: IconSalesforce,\n    hubspot: IconHubspot,\n    'google-pubsub': IconGoogleCloud,\n    'google-cloud-storage': IconGoogleCloudStorage,\n    'google-ads': IconGoogleAds,\n    snapchat: IconSnapchat,\n    'linkedin-ads': IconLinkedIn,\n}\n\nexport const integrationsLogic = kea<integrationsLogicType>([\n    path(['lib', 'integrations', 'integrationsLogic']),\n    connect({\n        values: [preflightLogic, ['siteUrlMisconfigured', 'preflight']],\n    }),\n\n    actions({\n        handleOauthCallback: (kind: IntegrationKind, searchParams: any) => ({ kind, searchParams }),\n        newGoogleCloudKey: (kind: string, key: File, callback?: (integration: IntegrationType) => void) => ({\n            kind,\n            key,\n            callback,\n        }),\n        deleteIntegration: (id: number) => ({ id }),\n    }),\n\n    loaders(({ values }) => ({\n        integrations: [\n            null as IntegrationType[] | null,\n            {\n                loadIntegrations: async () => {\n                    const res = await api.integrations.list()\n\n                    // Simple modifier here to add icons and names - we can move this to the backend at some point\n\n                    return res.results.map((integration) => {\n                        return {\n                            ...integration,\n                            // TODO: Make the icons endpoint independent of hog functions\n                            icon_url: ICONS[integration.kind],\n                        }\n                    })\n                },\n                newGoogleCloudKey: async ({ kind, key, callback }) => {\n                    try {\n                        const formData = new FormData()\n                        formData.append('kind', kind)\n                        formData.append('key', key)\n                        const response = await api.integrations.create(formData)\n                        const responseWithIcon = { ...response, icon_url: ICONS[kind] ?? ICONS['google-pubsub'] }\n\n                        // run onChange after updating the integrations loader\n                        window.setTimeout(() => callback?.(responseWithIcon), 0)\n\n                        if (\n                            values.integrations?.find(\n                                (x) => x.kind === kind && x.display_name === response.display_name\n                            )\n                        ) {\n                            lemonToast.success('Google Cloud key updated.')\n                            return values.integrations.map((x) =>\n                                x.kind === kind && x.display_name === response.display_name ? responseWithIcon : x\n                            )\n                        }\n                        lemonToast.success('Google Cloud key created.')\n                        return [...(values.integrations ?? []), responseWithIcon]\n                    } catch (e) {\n                        lemonToast.error('Failed to upload Google Cloud key.')\n                        throw e\n                    }\n                },\n            },\n        ],\n    })),\n    listeners(({ actions }) => ({\n        handleOauthCallback: async ({ kind, searchParams }) => {\n            const { state, code, error } = searchParams\n            const { next } = fromParamsGivenUrl(state)\n            let replaceUrl: string = next || urls.settings('project-integrations')\n\n            if (error) {\n                lemonToast.error(`Failed due to \"${error}\"`)\n                router.actions.replace(replaceUrl)\n                return\n            }\n\n            try {\n                const integration = await api.integrations.create({\n                    kind,\n                    config: { state, code },\n                })\n\n                // Add the integration ID to the replaceUrl so that the landing page can use it\n                replaceUrl += `${replaceUrl.includes('?') ? '&' : '?'}integration_id=${integration.id}`\n\n                actions.loadIntegrations()\n                lemonToast.success(`Integration successful.`)\n            } catch (e) {\n                lemonToast.error(`Something went wrong. Please try again.`)\n            } finally {\n                router.actions.replace(replaceUrl)\n            }\n        },\n\n        deleteIntegration: async ({ id }) => {\n            await api.integrations.delete(id)\n            actions.loadIntegrations()\n        },\n    })),\n    afterMount(({ actions }) => {\n        actions.loadIntegrations()\n    }),\n\n    urlToAction(({ actions }) => ({\n        '/integrations/:kind/callback': ({ kind = '' }, searchParams) => {\n            actions.handleOauthCallback(kind as IntegrationKind, searchParams)\n        },\n    })),\n    selectors({\n        slackIntegrations: [\n            (s) => [s.integrations],\n            (integrations) => {\n                return integrations?.filter((x) => x.kind == 'slack')\n            },\n        ],\n\n        slackAvailable: [\n            (s) => [s.preflight],\n            (preflight) => {\n                // TODO: Change this to be based on preflight or something\n                return preflight?.slack_service?.available\n            },\n        ],\n    }),\n])\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "import_kea_router", "ICONS", "slack_default", "salesforce_default", "hubspot_default", "google_cloud_default", "google_cloud_storage_default", "google_ads_default", "snapchat_default", "linkedin_default", "integrationsLogic", "preflightLogic", "kind", "searchParams", "key", "callback", "id", "values", "api_default", "integration", "formData", "response", "responseWithIcon", "x", "lemonToast", "e", "actions", "state", "code", "error", "next", "fromParamsGivenUrl", "replaceUrl", "urls", "s", "integrations", "preflight"]
}
