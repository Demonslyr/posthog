{
  "version": 3,
  "sources": ["../src/scenes/Unsubscribe/Unsubscribe.tsx", "../src/scenes/Unsubscribe/unsubscribeLogic.ts"],
  "sourcesContent": ["import { useValues } from 'kea'\nimport { BridgePage } from 'lib/components/BridgePage/BridgePage'\nimport { SpinnerOverlay } from 'lib/lemon-ui/Spinner/Spinner'\nimport { SceneExport } from 'scenes/sceneTypes'\n\nimport { unsubscribeLogic } from './unsubscribeLogic'\n\nexport const scene: SceneExport = {\n    component: Unsubscribe,\n    logic: unsubscribeLogic,\n}\n\nexport function Unsubscribe(): JSX.Element {\n    const { unsubscriptionLoading, unsubscription } = useValues(unsubscribeLogic)\n    return (\n        <BridgePage view=\"unsubscribe\">\n            {unsubscriptionLoading ? (\n                <SpinnerOverlay sceneLevel />\n            ) : unsubscription ? (\n                <div>\n                    <h2>You have been unsubscribed!</h2>\n                    <p>You will no longer receive these kinds of emails.</p>\n                </div>\n            ) : (\n                <div>\n                    <h2>Something went wrong!</h2>\n                    <p>Your may already be unsubscribed or the link you clicked may be invalid.</p>\n                </div>\n            )}\n        </BridgePage>\n    )\n}\n\nexport default Unsubscribe\n", "import { actions, afterMount, kea, path } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport { router } from 'kea-router'\nimport api from 'lib/api'\n\nimport type { unsubscribeLogicType } from './unsubscribeLogicType'\n\nexport const unsubscribeLogic = kea<unsubscribeLogicType>([\n    path(['scenes', 'Unsubscribe', 'unsubscribeLogic']),\n    actions({\n        attemptUnsubscribe: (token: string) => ({ token }),\n    }),\n\n    loaders(() => ({\n        unsubscription: {\n            __default: false as boolean,\n            attemptUnsubscribe: async ({ token }) => {\n                const res = await api.get(`api/unsubscribe?token=${token}`)\n                return res.success\n            },\n        },\n    })),\n    afterMount(({ actions }) => {\n        const { token } = router.values.searchParams\n        actions.attemptUnsubscribe(token)\n    }),\n])\n"],
  "mappings": "uhCAAAA,IAAAC,IAAAC,IAAA,IAAAC,EAA0B,OCA1BC,IAAAC,IAAAC,IAAA,IAAAC,EAA+C,OAC/CC,EAAwB,OACxBC,EAAuB,OAKhB,IAAMC,KAAmB,OAA0B,IACtD,QAAK,CAAC,SAAU,cAAe,kBAAkB,CAAC,KAClD,WAAQ,CACJ,mBAAqBC,IAAmB,CAAE,MAAAA,CAAM,EACpD,CAAC,KAED,WAAQ,KAAO,CACX,eAAgB,CACZ,UAAW,GACX,mBAAoB,MAAO,CAAE,MAAAA,CAAM,KACnB,MAAMC,EAAI,IAAI,yBAAyBD,CAAK,EAAE,GAC/C,OAEnB,CACJ,EAAE,KACF,cAAW,CAAC,CAAE,QAAAE,CAAQ,IAAM,CACxB,GAAM,CAAE,MAAAF,CAAM,EAAI,SAAO,OAAO,aAChCE,EAAQ,mBAAmBF,CAAK,CACpC,CAAC,CACL,CAAC,EDTe,IAAAG,EAAA,OAVHC,EAAqB,CAC9B,UAAWC,EACX,MAAOC,CACX,EAEO,SAASD,GAA2B,CACvC,GAAM,CAAE,sBAAAE,EAAuB,eAAAC,CAAe,KAAI,aAAUF,CAAgB,EAC5E,SACI,OAACG,EAAA,CAAW,KAAK,cACZ,SAAAF,KACG,OAACG,EAAA,CAAe,WAAU,GAAC,EAC3BF,KACA,QAAC,OACG,oBAAC,MAAG,uCAA2B,KAC/B,OAAC,KAAE,6DAAiD,GACxD,KAEA,QAAC,OACG,oBAAC,MAAG,iCAAqB,KACzB,OAAC,KAAE,oFAAwE,GAC/E,EAER,CAER,CAEA,IAAOG,EAAQN",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "import_kea_router", "unsubscribeLogic", "token", "api_default", "actions", "import_jsx_runtime", "scene", "Unsubscribe", "unsubscribeLogic", "unsubscriptionLoading", "unsubscription", "BridgePage", "SpinnerOverlay", "Unsubscribe_default"]
}
