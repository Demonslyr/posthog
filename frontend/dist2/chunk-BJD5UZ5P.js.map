{
  "version": 3,
  "sources": ["../src/scenes/project-homepage/WatchNextPanel.tsx"],
  "sourcesContent": ["import './ProjectHomepage.scss'\n\nimport { IconInfo } from '@posthog/icons'\nimport clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { CompactList } from 'lib/components/CompactList/CompactList'\nimport { IconPlayCircle } from 'lib/lemon-ui/icons'\nimport { LemonSnack } from 'lib/lemon-ui/LemonSnack'\nimport { ProfilePicture } from 'lib/lemon-ui/ProfilePicture'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { humanFriendlyDuration } from 'lib/utils'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\nimport { asDisplay } from 'scenes/persons/person-utils'\nimport { sessionPlayerModalLogic } from 'scenes/session-recordings/player/modal/sessionPlayerModalLogic'\nimport {\n    DEFAULT_RECORDING_FILTERS,\n    defaultRecordingDurationFilter,\n    sessionRecordingsPlaylistLogic,\n} from 'scenes/session-recordings/playlist/sessionRecordingsPlaylistLogic'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { urls } from 'scenes/urls'\n\nimport { SessionRecordingType } from '~/types'\n\nimport { ProjectHomePageCompactListItem } from './ProjectHomePageCompactListItem'\n\ninterface RecordingRowProps {\n    recording: SessionRecordingType\n}\n\ntype ACTIVITY_DESCRIPTIONS = 'very low' | 'low' | 'medium' | 'high' | 'very high'\n\nfunction ActivityScoreLabel({ score }: { score: number | undefined }): JSX.Element {\n    const n = score ?? 0\n    let backgroundColor = 'bg-primary-alt-highlight'\n    let description: ACTIVITY_DESCRIPTIONS = 'very low'\n    if (n >= 90) {\n        backgroundColor = 'bg-success-highlight'\n        description = 'very high'\n    } else if (n >= 75) {\n        backgroundColor = 'bg-success-highlight'\n        description = 'high'\n    } else if (n >= 50) {\n        backgroundColor = 'bg-warning-highlight'\n        description = 'medium'\n    } else if (n >= 25) {\n        backgroundColor = 'bg-warning-highlight'\n        description = 'low'\n    }\n\n    return <LemonSnack className={clsx(backgroundColor, 'text-xs')}>activity: {description}</LemonSnack>\n}\n\nexport function RecordingRow({ recording }: RecordingRowProps): JSX.Element {\n    const { openSessionPlayer } = useActions(sessionPlayerModalLogic)\n    const { reportRecordingOpenedFromRecentRecordingList } = useActions(eventUsageLogic)\n\n    return (\n        <ProjectHomePageCompactListItem\n            title={asDisplay(recording.person)}\n            subtitle={<ActivityScoreLabel score={recording.activity_score} />}\n            prefix={<ProfilePicture name={asDisplay(recording.person)} />}\n            suffix={\n                <div className=\"flex items-center justify-end text-text-3000\">\n                    <span>{humanFriendlyDuration(recording.recording_duration)}</span>\n                    <IconPlayCircle className=\"text-2xl ml-2\" />\n                </div>\n            }\n            onClick={() => {\n                openSessionPlayer({\n                    id: recording.id,\n                })\n                reportRecordingOpenedFromRecentRecordingList()\n            }}\n        />\n    )\n}\n\nexport interface WatchNextListProps {\n    sessionRecordings: SessionRecordingType[]\n    loading: boolean\n    recordingsOptIn: boolean | undefined\n}\n\n// separated from the logics so that it can have storybook tests without mocking API calls\nexport function WatchNextList({ sessionRecordings, loading, recordingsOptIn }: WatchNextListProps): JSX.Element {\n    return (\n        <CompactList\n            title={\n                <Tooltip title=\"A selection of the most interesting recordings. We use multiple signals to calculate an activity score.\">\n                    <div className=\"flex items-center gap-1.5\">\n                        <span>Watch next</span>\n                        <IconInfo className=\"text-lg\" />\n                    </div>\n                </Tooltip>\n            }\n            viewAllURL={urls.replay()}\n            loading={loading}\n            emptyMessage={\n                recordingsOptIn\n                    ? {\n                          title: 'There are no recordings for this project',\n                          description: 'Make sure you have the javascript snippet setup in your website.',\n                          buttonText: 'Learn more',\n                          buttonTo: 'https://posthog.com/docs/user-guides/recordings',\n                      }\n                    : {\n                          title: 'Recordings are not enabled for this project',\n                          description: 'Once recordings are enabled, recordings will display here.',\n                          buttonText: 'Enable recordings',\n                          buttonTo: urls.settings('project-replay'),\n                      }\n            }\n            items={sessionRecordings.slice(0, 5)}\n            renderRow={(recording: SessionRecordingType, index) => <RecordingRow key={index} recording={recording} />}\n        />\n    )\n}\n\nexport function WatchNextPanel(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n    const sessionRecordingsListLogicInstance = sessionRecordingsPlaylistLogic({\n        logicKey: 'projectHomepage',\n        filters: {\n            ...DEFAULT_RECORDING_FILTERS,\n            duration: [\n                {\n                    ...defaultRecordingDurationFilter,\n                    value: 60,\n                },\n            ],\n            date_to: '-15M',\n            order: 'activity_score',\n        },\n    })\n    const { sessionRecordings, sessionRecordingsResponseLoading } = useValues(sessionRecordingsListLogicInstance)\n\n    return (\n        <WatchNextList\n            recordingsOptIn={currentTeam?.session_recording_opt_in}\n            sessionRecordings={sessionRecordings}\n            loading={sessionRecordingsResponseLoading}\n        />\n    )\n}\n"],
  "mappings": "2UAAAA,IAAAC,IAAAC,IAGA,IAAAC,EAAiB,OACjBC,EAAsC,OA8C3B,IAAAC,EAAA,OAlBX,SAASC,EAAmB,CAAE,MAAAC,CAAM,EAA+C,CAC/E,IAAMC,EAAID,GAAS,EACfE,EAAkB,2BAClBC,EAAqC,WACzC,OAAIF,GAAK,IACLC,EAAkB,uBAClBC,EAAc,aACPF,GAAK,IACZC,EAAkB,uBAClBC,EAAc,QACPF,GAAK,IACZC,EAAkB,uBAClBC,EAAc,UACPF,GAAK,KACZC,EAAkB,uBAClBC,EAAc,UAGX,QAACC,EAAA,CAAW,aAAW,EAAAC,SAAKH,EAAiB,SAAS,EAAG,uBAAWC,GAAY,CAC3F,CAEO,SAASG,EAAa,CAAE,UAAAC,CAAU,EAAmC,CACxE,GAAM,CAAE,kBAAAC,CAAkB,KAAI,cAAWC,CAAuB,EAC1D,CAAE,6CAAAC,CAA6C,KAAI,cAAWC,CAAe,EAEnF,SACI,OAACC,EAAA,CACG,MAAOC,EAAUN,EAAU,MAAM,EACjC,YAAU,OAACR,EAAA,CAAmB,MAAOQ,EAAU,eAAgB,EAC/D,UAAQ,OAACO,EAAA,CAAe,KAAMD,EAAUN,EAAU,MAAM,EAAG,EAC3D,UACI,QAAC,OAAI,UAAU,+CACX,oBAAC,QAAM,SAAAQ,EAAsBR,EAAU,kBAAkB,EAAE,KAC3D,OAACS,EAAA,CAAe,UAAU,gBAAgB,GAC9C,EAEJ,QAAS,IAAM,CACXR,EAAkB,CACd,GAAID,EAAU,EAClB,CAAC,EACDG,EAA6C,CACjD,EACJ,CAER,CASO,SAASO,EAAc,CAAE,kBAAAC,EAAmB,QAAAC,EAAS,gBAAAC,CAAgB,EAAoC,CAC5G,SACI,OAACC,EAAA,CACG,SACI,OAACC,EAAA,CAAQ,MAAM,0GACX,oBAAC,OAAI,UAAU,4BACX,oBAAC,QAAK,sBAAU,KAChB,OAACC,EAAA,CAAS,UAAU,UAAU,GAClC,EACJ,EAEJ,WAAYC,EAAK,OAAO,EACxB,QAASL,EACT,aACIC,EACM,CACI,MAAO,2CACP,YAAa,mEACb,WAAY,aACZ,SAAU,iDACd,EACA,CACI,MAAO,8CACP,YAAa,6DACb,WAAY,oBACZ,SAAUI,EAAK,SAAS,gBAAgB,CAC5C,EAEV,MAAON,EAAkB,MAAM,EAAG,CAAC,EACnC,UAAW,CAACX,EAAiCkB,OAAU,OAACnB,EAAA,CAAyB,UAAWC,GAAlBkB,CAA6B,EAC3G,CAER,CAEO,SAASC,GAA8B,CAC1C,GAAM,CAAE,YAAAC,CAAY,KAAI,aAAUC,CAAS,EACrCC,EAAqCC,EAA+B,CACtE,SAAU,kBACV,QAAS,CACL,GAAGC,EACH,SAAU,CACN,CACI,GAAGC,EACH,MAAO,EACX,CACJ,EACA,QAAS,OACT,MAAO,gBACX,CACJ,CAAC,EACK,CAAE,kBAAAd,EAAmB,iCAAAe,CAAiC,KAAI,aAAUJ,CAAkC,EAE5G,SACI,OAACZ,EAAA,CACG,gBAAiBU,GAAa,yBAC9B,kBAAmBT,EACnB,QAASe,EACb,CAER",
  "names": ["init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_jsx_runtime", "ActivityScoreLabel", "score", "n", "backgroundColor", "description", "LemonSnack", "clsx", "RecordingRow", "recording", "openSessionPlayer", "sessionPlayerModalLogic", "reportRecordingOpenedFromRecentRecordingList", "eventUsageLogic", "ProjectHomePageCompactListItem", "asDisplay", "ProfilePicture", "humanFriendlyDuration", "IconPlayCircle", "WatchNextList", "sessionRecordings", "loading", "recordingsOptIn", "CompactList", "Tooltip", "IconInfo", "urls", "index", "WatchNextPanel", "currentTeam", "teamLogic", "sessionRecordingsListLogicInstance", "sessionRecordingsPlaylistLogic", "DEFAULT_RECORDING_FILTERS", "defaultRecordingDurationFilter", "sessionRecordingsResponseLoading"]
}
