{
  "version": 3,
  "sources": ["../src/scenes/instance/AsyncMigrations/AsyncMigrations.tsx", "../src/scenes/instance/AsyncMigrations/AsyncMigrationParametersModal.tsx", "../src/scenes/instance/AsyncMigrations/asyncMigrationParameterFormLogic.ts", "../src/scenes/instance/AsyncMigrations/asyncMigrationsLogic.ts", "../src/scenes/instance/AsyncMigrations/AsyncMigrationDetails.tsx", "../src/scenes/instance/AsyncMigrations/SettingUpdateField.tsx"],
  "sourcesContent": ["import { Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { IconPlayCircle, IconRefresh, IconReplay } from 'lib/lemon-ui/icons'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonProgress } from 'lib/lemon-ui/LemonProgress'\nimport { LemonTable, LemonTableColumn } from 'lib/lemon-ui/LemonTable'\nimport { LemonTableLink } from 'lib/lemon-ui/LemonTable/LemonTableLink'\nimport { LemonTabs } from 'lib/lemon-ui/LemonTabs'\nimport { LemonTag, LemonTagType } from 'lib/lemon-ui/LemonTag/LemonTag'\nimport { Spinner } from 'lib/lemon-ui/Spinner/Spinner'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { humanFriendlyDetailedTime } from 'lib/utils'\nimport { useEffect } from 'react'\nimport { AsyncMigrationParametersModal } from 'scenes/instance/AsyncMigrations/AsyncMigrationParametersModal'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { AsyncMigrationDetails } from './AsyncMigrationDetails'\nimport {\n    AsyncMigration,\n    asyncMigrationsLogic,\n    AsyncMigrationsTab,\n    AsyncMigrationStatus,\n    migrationStatusNumberToMessage,\n} from './asyncMigrationsLogic'\nimport { SettingUpdateField } from './SettingUpdateField'\n\nexport const scene: SceneExport = {\n    component: AsyncMigrations,\n    logic: asyncMigrationsLogic,\n}\n\ntype AsyncMigrationColumnType = LemonTableColumn<AsyncMigration, keyof AsyncMigration | undefined>\n\nconst STATUS_RELOAD_INTERVAL_MS = 3000\n\nexport function AsyncMigrations(): JSX.Element {\n    const { user } = useValues(userLogic)\n    const {\n        asyncMigrationsLoading,\n        activeTab,\n        asyncMigrationSettings,\n        isAnyMigrationRunning,\n        activeAsyncMigrationModal,\n        actionableMigrations,\n        futureMigrations,\n    } = useValues(asyncMigrationsLogic)\n    const {\n        triggerMigration,\n        resumeMigration,\n        rollbackMigration,\n        forceStopMigration,\n        forceStopMigrationWithoutRollback,\n        loadAsyncMigrations,\n        loadAsyncMigrationErrors,\n        setActiveTab,\n    } = useActions(asyncMigrationsLogic)\n\n    useEffect(() => {\n        if (isAnyMigrationRunning) {\n            const interval = setInterval(() => loadAsyncMigrations(), STATUS_RELOAD_INTERVAL_MS)\n            return () => clearInterval(interval)\n        }\n    }, [isAnyMigrationRunning])\n\n    const nameColumn: AsyncMigrationColumnType = {\n        title: 'Migration',\n        render: function Render(_, asyncMigration: AsyncMigration): JSX.Element {\n            const link =\n                'https://github.com/PostHog/posthog/blob/master/posthog/async_migrations/migrations/' +\n                asyncMigration.name +\n                '.py'\n            return <LemonTableLink to={link} title={asyncMigration.name} description={asyncMigration.description} />\n        },\n    }\n    const progressColumn: AsyncMigrationColumnType = {\n        title: 'Progress',\n        render: function Render(_, asyncMigration: AsyncMigration): JSX.Element {\n            const progress = asyncMigration.progress\n            return (\n                <div>\n                    <LemonProgress percent={progress} />\n                </div>\n            )\n        },\n    }\n    const statusColumn: AsyncMigrationColumnType = {\n        title: 'Status',\n        render: function Render(_, asyncMigration: AsyncMigration): JSX.Element {\n            const status = asyncMigration.status\n            const type: LemonTagType =\n                status === AsyncMigrationStatus.Running\n                    ? 'success'\n                    : status === AsyncMigrationStatus.Errored || status === AsyncMigrationStatus.FailedAtStartup\n                    ? 'danger'\n                    : status === AsyncMigrationStatus.Starting\n                    ? 'warning'\n                    : status === AsyncMigrationStatus.RolledBack\n                    ? 'warning'\n                    : 'default'\n            return (\n                <LemonTag type={type} className=\"uppercase\">\n                    {migrationStatusNumberToMessage[status]}\n                </LemonTag>\n            )\n        },\n    }\n    const lastOpColumn: AsyncMigrationColumnType = {\n        title: 'Last operation index',\n        render: function Render(_, asyncMigration: AsyncMigration): JSX.Element {\n            return <div>{asyncMigration.current_operation_index}</div>\n        },\n    }\n    const queryIdColumn: AsyncMigrationColumnType = {\n        title: 'Last query ID',\n        render: function Render(_, asyncMigration: AsyncMigration): JSX.Element {\n            return (\n                <div>\n                    <small>{asyncMigration.current_query_id}</small>\n                </div>\n            )\n        },\n    }\n    const startedAtColumn: AsyncMigrationColumnType = {\n        title: 'Started at',\n        render: function Render(_, asyncMigration: AsyncMigration): JSX.Element {\n            const startedAt = asyncMigration.started_at\n            return <div>{humanFriendlyDetailedTime(startedAt)}</div>\n        },\n    }\n    const finishedAtColumn: AsyncMigrationColumnType = {\n        title: 'Finished at',\n        render: function Render(_, asyncMigration: AsyncMigration): JSX.Element {\n            const finishedAt = asyncMigration.finished_at\n            return <div>{humanFriendlyDetailedTime(finishedAt)}</div>\n        },\n    }\n    const ActionsColumn: AsyncMigrationColumnType = {\n        title: '',\n        render: function Render(_, asyncMigration: AsyncMigration): JSX.Element {\n            const status = asyncMigration.status\n            return (\n                <div>\n                    {status === AsyncMigrationStatus.NotStarted || status === AsyncMigrationStatus.FailedAtStartup ? (\n                        <Tooltip title=\"Start\">\n                            <LemonButton\n                                size=\"small\"\n                                icon={<IconPlayCircle />}\n                                onClick={() => triggerMigration(asyncMigration)}\n                            >\n                                Run\n                            </LemonButton>\n                        </Tooltip>\n                    ) : status === AsyncMigrationStatus.Starting || status === AsyncMigrationStatus.Running ? (\n                        <More\n                            overlay={\n                                <>\n                                    <LemonButton onClick={() => forceStopMigration(asyncMigration)} fullWidth>\n                                        Stop and rollback\n                                    </LemonButton>\n                                    <LemonButton\n                                        onClick={() => forceStopMigrationWithoutRollback(asyncMigration)}\n                                        fullWidth\n                                    >\n                                        Stop\n                                    </LemonButton>\n                                </>\n                            }\n                        />\n                    ) : status === AsyncMigrationStatus.CompletedSuccessfully ? (\n                        <></>\n                    ) : status === AsyncMigrationStatus.Errored ? (\n                        <More\n                            overlay={\n                                <>\n                                    <LemonButton onClick={() => resumeMigration(asyncMigration)} fullWidth>\n                                        Resume\n                                    </LemonButton>\n                                    <LemonButton onClick={() => rollbackMigration(asyncMigration)} fullWidth>\n                                        Rollback\n                                    </LemonButton>\n                                </>\n                            }\n                        />\n                    ) : status === AsyncMigrationStatus.RolledBack ? (\n                        <Tooltip title=\"Restart\">\n                            <LemonButton\n                                icon={<IconReplay />}\n                                onClick={() => triggerMigration(asyncMigration)}\n                                fullWidth\n                            />\n                        </Tooltip>\n                    ) : null}\n                </div>\n            )\n        },\n    }\n\n    const minVersionColumn: AsyncMigrationColumnType = {\n        title: 'Minimum PostHog version',\n        render: function Render(_, asyncMigration: AsyncMigration): JSX.Element {\n            return <div>{asyncMigration.posthog_min_version}</div>\n        },\n    }\n    const maxVersionColumn: AsyncMigrationColumnType = {\n        title: 'Maximum PostHog version',\n        render: function Render(_, asyncMigration: AsyncMigration): JSX.Element {\n            return <div>{asyncMigration.posthog_max_version}</div>\n        },\n    }\n\n    const columns = {}\n    columns[AsyncMigrationsTab.FutureMigrations] = [nameColumn, statusColumn, minVersionColumn, maxVersionColumn]\n    columns[AsyncMigrationsTab.Management] = [\n        nameColumn,\n        progressColumn,\n        statusColumn,\n        lastOpColumn,\n        queryIdColumn,\n        startedAtColumn,\n        finishedAtColumn,\n        ActionsColumn,\n    ]\n    const migrations = {}\n    migrations[AsyncMigrationsTab.FutureMigrations] = futureMigrations\n    migrations[AsyncMigrationsTab.Management] = actionableMigrations\n\n    const rowExpansion = {\n        expandedRowRender: function renderExpand(asyncMigration: AsyncMigration) {\n            return asyncMigration && <AsyncMigrationDetails asyncMigration={asyncMigration} />\n        },\n        rowExpandable: (asyncMigration: AsyncMigration) => asyncMigration.error_count > 0,\n        onRowExpand: function getErrors(asyncMigration: AsyncMigration) {\n            loadAsyncMigrationErrors(asyncMigration.id)\n        },\n    }\n\n    const tabs = [\n        {\n            key: AsyncMigrationsTab.Management,\n            label: `Management (${actionableMigrations.length})`,\n        },\n        {\n            key: AsyncMigrationsTab.Settings,\n            label: 'Settings',\n        },\n    ]\n\n    if (futureMigrations.length > 0) {\n        tabs.splice(1, 0, {\n            key: AsyncMigrationsTab.FutureMigrations,\n            label: `Future Migrations (${futureMigrations.length})`,\n        })\n    }\n\n    return (\n        <div>\n            {user?.is_staff ? (\n                <>\n                    <PageHeader\n                        caption={\n                            <>\n                                <p>Manage async migrations in your instance.</p>\n                                <p>\n                                    Read about async migrations on our{' '}\n                                    <Link to=\"https://posthog.com/docs/self-host/configure/async-migrations/overview\">\n                                        dedicated docs page\n                                    </Link>\n                                    .\n                                </p>\n                            </>\n                        }\n                    />\n\n                    <LemonTabs activeKey={activeTab} onChange={setActiveTab} tabs={tabs} />\n\n                    {[AsyncMigrationsTab.Management, AsyncMigrationsTab.FutureMigrations].includes(activeTab) ? (\n                        <>\n                            <div className=\"mb-4 float-right\">\n                                <LemonButton\n                                    icon={asyncMigrationsLoading ? <Spinner /> : <IconRefresh />}\n                                    onClick={loadAsyncMigrations}\n                                    type=\"secondary\"\n                                    size=\"small\"\n                                >\n                                    Refresh\n                                </LemonButton>\n                            </div>\n                            <LemonTable\n                                pagination={{ pageSize: 10 }}\n                                loading={asyncMigrationsLoading}\n                                columns={columns[activeTab]}\n                                dataSource={migrations[activeTab]}\n                                expandable={rowExpansion}\n                            />\n                            {activeAsyncMigrationModal ? (\n                                <AsyncMigrationParametersModal {...activeAsyncMigrationModal} />\n                            ) : null}\n                        </>\n                    ) : activeTab === AsyncMigrationsTab.Settings ? (\n                        <>\n                            <br />\n                            {asyncMigrationSettings.map((setting) => {\n                                return (\n                                    <div key={setting.key}>\n                                        <SettingUpdateField setting={setting} />\n                                    </div>\n                                )\n                            })}\n                        </>\n                    ) : null}\n                </>\n            ) : (\n                <PageHeader\n                    caption={\n                        <>\n                            <p>\n                                Only users with staff access can manage async migrations. Please contact your instance\n                                admin.\n                            </p>\n                            <p>\n                                If you're an admin and don't have access, set <code>is_staff=true</code> for your user\n                                on the PostgreSQL <code>posthog_user</code> table.\n                            </p>\n                        </>\n                    }\n                />\n            )}\n        </div>\n    )\n}\n", "import { Link } from '@posthog/lemon-ui'\nimport { useActions } from 'kea'\nimport { Field, Form } from 'kea-forms'\nimport { AnimatedCollapsible } from 'lib/components/AnimatedCollapsible'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonInput } from 'lib/lemon-ui/LemonInput/LemonInput'\nimport { LemonModal } from 'lib/lemon-ui/LemonModal'\nimport { useState } from 'react'\nimport { asyncMigrationParameterFormLogic } from 'scenes/instance/AsyncMigrations/asyncMigrationParameterFormLogic'\nimport { AsyncMigrationModalProps, asyncMigrationsLogic } from 'scenes/instance/AsyncMigrations/asyncMigrationsLogic'\n\nexport function AsyncMigrationParametersModal(props: AsyncMigrationModalProps): JSX.Element {\n    const { closeAsyncMigrationsModal } = useActions(asyncMigrationsLogic)\n\n    const [collapsed, setCollapsed] = useState(true)\n\n    return (\n        <LemonModal title=\"\" onClose={closeAsyncMigrationsModal} isOpen={true} simple>\n            <Form\n                logic={asyncMigrationParameterFormLogic}\n                props={props}\n                formKey=\"parameters\"\n                enableFormOnSubmit\n                id=\"async-migration-parameters-form\"\n                className=\"LemonModal__layout\"\n            >\n                <LemonModal.Header>\n                    <h3>Advanced migration configuration</h3>\n                </LemonModal.Header>\n                <LemonModal.Content>\n                    <p>\n                        This async migration allows tuning parameters used in the async migration.\n                        {collapsed && (\n                            <>\n                                <br />\n                                <Link\n                                    onClick={() => {\n                                        setCollapsed(!collapsed)\n                                    }}\n                                >\n                                    Show advanced configuration\n                                </Link>\n                            </>\n                        )}\n                    </p>\n\n                    <AnimatedCollapsible collapsed={collapsed}>\n                        {Object.entries(props.migration.parameter_definitions).map(\n                            ([parameterName, [defaultValue, parameterDescription]]) => (\n                                <Field name={parameterName} key={parameterName} label={<>{parameterDescription}</>}>\n                                    {/* TODO: Send the parameter type from the backend */}\n                                    <LemonInput type={typeof defaultValue === 'number' ? 'number' : 'text'} />\n                                </Field>\n                            )\n                        )}\n                    </AnimatedCollapsible>\n                </LemonModal.Content>\n                <LemonModal.Footer>\n                    <LemonButton\n                        form=\"async-migration-parameters-form\"\n                        type=\"secondary\"\n                        data-attr=\"async-migration-parameters-cancel\"\n                        className=\"mr-2\"\n                        onClick={closeAsyncMigrationsModal}\n                    >\n                        Cancel\n                    </LemonButton>\n                    <LemonButton\n                        form=\"async-migration-parameters-form\"\n                        htmlType=\"submit\"\n                        type=\"primary\"\n                        data-attr=\"async-migration-parameters-submit\"\n                    >\n                        Run migration\n                    </LemonButton>\n                </LemonModal.Footer>\n            </Form>\n        </LemonModal>\n    )\n}\n", "import { kea, key, path, props } from 'kea'\nimport { forms } from 'kea-forms'\nimport { AsyncMigrationModalProps, asyncMigrationsLogic } from 'scenes/instance/AsyncMigrations/asyncMigrationsLogic'\n\nimport type { asyncMigrationParameterFormLogicType } from './asyncMigrationParameterFormLogicType'\n\nexport const asyncMigrationParameterFormLogic = kea<asyncMigrationParameterFormLogicType>([\n    path(['scenes', 'instance', 'AsyncMigrations', 'asyncMigrationParameterFormLogic']),\n    props({} as AsyncMigrationModalProps),\n    key((props) => props.migration.id),\n\n    forms(({ props }) => ({\n        parameters: {\n            defaults: defaultParameters(props),\n\n            submit: async (parameters: Record<string, number>) => {\n                asyncMigrationsLogic.actions.updateMigrationStatus(\n                    {\n                        ...props.migration,\n                        parameters,\n                    },\n                    props.endpoint,\n                    props.message\n                )\n            },\n        },\n    })),\n])\n\nfunction defaultParameters(props: AsyncMigrationModalProps): Record<string, number> {\n    const result = {}\n    Object.keys(props.migration.parameter_definitions).forEach((key) => {\n        if (props.migration.parameters[key]) {\n            result[key] = props.migration.parameters[key]\n        } else {\n            result[key] = props.migration.parameter_definitions[key][0]\n        }\n    })\n    return result\n}\n", "import { actions, connect, events, kea, listeners, path, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport { actionToUrl, urlToAction } from 'kea-router'\nimport api from 'lib/api'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast/LemonToast'\nimport { systemStatusLogic } from 'scenes/instance/SystemStatus/systemStatusLogic'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { InstanceSetting } from '~/types'\n\nimport type { asyncMigrationsLogicType } from './asyncMigrationsLogicType'\nexport type TabName = 'overview' | 'internal_metrics'\n\n// keep in sync with MigrationStatus in posthog/models/async_migration.py\nexport enum AsyncMigrationStatus {\n    NotStarted = 0,\n    Running = 1,\n    CompletedSuccessfully = 2,\n    Errored = 3,\n    RolledBack = 4,\n    Starting = 5,\n    FailedAtStartup = 6,\n}\n\nexport enum AsyncMigrationsTab {\n    Management = 'management',\n    FutureMigrations = 'future',\n    Settings = 'settings',\n}\n\nexport const migrationStatusNumberToMessage = {\n    0: 'Not started',\n    1: 'Running',\n    2: 'Complete',\n    3: 'Error',\n    4: 'Rolled back',\n    5: 'Starting',\n    6: 'Failed at startup',\n}\n\nexport interface AsyncMigrationError {\n    id: number\n    description: string\n    created_at: string\n}\nexport interface AsyncMigration {\n    id: number\n    name: string\n    description: string\n    progress: number\n    status: AsyncMigrationStatus\n    current_operation_index: number\n    current_query_id: string\n    celery_task_id: string\n    started_at: string\n    finished_at: string\n    posthog_min_version: string\n    posthog_max_version: string\n    error_count: number\n    parameters: Record<string, number>\n    parameter_definitions: Record<string, [string | number | null, string]>\n    is_available: boolean\n}\n\nexport interface AsyncMigrationModalProps {\n    migration: AsyncMigration\n    endpoint: string\n    message: string\n}\n\nexport const asyncMigrationsLogic = kea<asyncMigrationsLogicType>([\n    path(['scenes', 'instance', 'AsyncMigrations', 'asyncMigrationsLogic']),\n    connect({\n        values: [preflightLogic, ['preflight']],\n    }),\n    actions({\n        triggerMigration: (migration: AsyncMigration) => ({ migration }),\n        resumeMigration: (migration: AsyncMigration) => ({ migration }),\n        rollbackMigration: (migration: AsyncMigration) => ({ migration }),\n        forceStopMigration: (migration: AsyncMigration) => ({ migration }),\n        forceStopMigrationWithoutRollback: (migration: AsyncMigration) => ({ migration }),\n        updateMigrationStatus: (migration: AsyncMigration, endpoint: string, message: string) => ({\n            migration,\n            endpoint,\n            message,\n        }),\n        setActiveTab: (tab: AsyncMigrationsTab) => ({ tab }),\n        updateSetting: (settingKey: string, newValue: string) => ({ settingKey, newValue }),\n        loadAsyncMigrationErrors: (migrationId: number) => ({ migrationId }),\n        loadAsyncMigrationErrorsSuccess: (migrationId: number, errors: AsyncMigrationError[]) => ({\n            migrationId,\n            errors,\n        }),\n        loadAsyncMigrationErrorsFailure: (migrationId: number, error: any) => ({ migrationId, error }),\n        openAsyncMigrationsModal: (migration: AsyncMigration, endpoint: string, message: string) => ({\n            migration,\n            endpoint,\n            message,\n        }),\n        closeAsyncMigrationsModal: true,\n    }),\n\n    reducers({\n        activeTab: [AsyncMigrationsTab.Management as AsyncMigrationsTab, { setActiveTab: (_, { tab }) => tab }],\n        asyncMigrationErrors: [\n            {} as Record<number, AsyncMigrationError[]>,\n            {\n                loadAsyncMigrationErrorsSuccess: (state, { migrationId, errors }) => {\n                    return { ...state, [migrationId]: errors }\n                },\n            },\n        ],\n        asyncMigrationErrorsLoading: [\n            {} as Record<number, boolean>,\n            {\n                loadAsyncMigrationErrors: (state, { migrationId }) => {\n                    return { ...state, [migrationId]: true }\n                },\n                loadAsyncMigrationErrorsSuccess: (state, { migrationId }) => {\n                    return { ...state, [migrationId]: false }\n                },\n                loadAsyncMigrationErrorsFailure: (state, { migrationId }) => {\n                    return { ...state, [migrationId]: false }\n                },\n            },\n        ],\n        activeAsyncMigrationModal: [\n            null as AsyncMigrationModalProps | null,\n            {\n                openAsyncMigrationsModal: (_, payload) => payload,\n                closeAsyncMigrationsModal: () => null,\n                updateMigrationStatus: () => null,\n            },\n        ],\n    }),\n    loaders(() => ({\n        asyncMigrations: [\n            [] as AsyncMigration[],\n            {\n                loadAsyncMigrations: async () => {\n                    if (!userLogic.values.user?.is_staff) {\n                        return []\n                    }\n                    return (await api.get('api/async_migrations')).results\n                },\n            },\n        ],\n        asyncMigrationSettings: [\n            [] as InstanceSetting[],\n            {\n                loadAsyncMigrationSettings: async (): Promise<InstanceSetting[]> => {\n                    if (!userLogic.values.user?.is_staff) {\n                        return []\n                    }\n                    const settings: InstanceSetting[] = (await api.get('api/instance_settings')).results\n                    return settings.filter((setting) => setting.key.includes('ASYNC_MIGRATIONS'))\n                },\n            },\n        ],\n    })),\n\n    selectors({\n        isAnyMigrationRunning: [\n            (s) => [s.asyncMigrations],\n            (asyncMigrations) =>\n                asyncMigrations.some((migration) =>\n                    [AsyncMigrationStatus.Running, AsyncMigrationStatus.Starting].includes(migration.status)\n                ),\n        ],\n        actionableMigrations: [\n            (s) => [s.asyncMigrations],\n            (asyncMigrations) => asyncMigrations.filter((migration) => migration.is_available),\n        ],\n        futureMigrations: [\n            (s) => [s.asyncMigrations],\n            (asyncMigrations) => asyncMigrations.filter((migration) => !migration.is_available),\n        ],\n    }),\n\n    listeners(({ actions }) => ({\n        triggerMigration: async ({ migration }) => {\n            if (Object.keys(migration.parameter_definitions).length > 0) {\n                actions.openAsyncMigrationsModal(migration, 'trigger', 'Migration triggered successfully')\n            } else {\n                actions.updateMigrationStatus(migration, 'trigger', 'Migration triggered successfully')\n            }\n        },\n        resumeMigration: async ({ migration }) => {\n            if (Object.keys(migration.parameter_definitions).length > 0) {\n                actions.openAsyncMigrationsModal(migration, 'resume', 'Migration resume triggered successfully')\n            } else {\n                actions.updateMigrationStatus(migration, 'resume', 'Migration resume triggered successfully')\n            }\n        },\n        rollbackMigration: async ({ migration }) => {\n            actions.updateMigrationStatus(migration, 'rollback', 'Migration rollback triggered successfully')\n        },\n        forceStopMigration: async ({ migration }) => {\n            actions.updateMigrationStatus(migration, 'force_stop', 'Force stop triggered successfully')\n        },\n        forceStopMigrationWithoutRollback: async ({ migration }) => {\n            actions.updateMigrationStatus(\n                migration,\n                'force_stop_without_rollback',\n                'Force stop without rollback triggered successfully'\n            )\n        },\n        updateMigrationStatus: async ({ migration, endpoint, message }) => {\n            const res = await api.create(`/api/async_migrations/${migration.id}/${endpoint}`, {\n                parameters: migration.parameters,\n            })\n            if (res.success) {\n                lemonToast.success(message)\n                actions.loadAsyncMigrations()\n            } else {\n                lemonToast.error(res.error)\n            }\n        },\n        updateSetting: async ({ settingKey, newValue }) => {\n            // TODO: Use systemStatusLogic.ts for consistency\n            try {\n                await api.update(`/api/instance_settings/${settingKey}`, {\n                    value: newValue,\n                })\n                lemonToast.success(`Instance setting ${settingKey} updated`)\n                actions.loadAsyncMigrationSettings()\n                actions.loadAsyncMigrations()\n                systemStatusLogic.actions.loadSystemStatus()\n            } catch {\n                lemonToast.error('Failed to trigger migration')\n            }\n        },\n        loadAsyncMigrationErrors: async ({ migrationId }) => {\n            try {\n                const errorsForMigration = await api.get(`api/async_migrations/${migrationId}/errors`)\n                actions.loadAsyncMigrationErrorsSuccess(migrationId, errorsForMigration)\n            } catch (error) {\n                actions.loadAsyncMigrationErrorsFailure(migrationId, error)\n            }\n        },\n    })),\n\n    events(({ actions }) => ({\n        afterMount: () => {\n            actions.loadAsyncMigrations()\n            actions.loadAsyncMigrationSettings()\n        },\n    })),\n\n    actionToUrl(({ values }) => ({\n        setActiveTab: () =>\n            `/instance/async_migrations${\n                values.activeTab === AsyncMigrationsTab.Management ? '' : '/' + values.activeTab\n            }`,\n    })),\n\n    urlToAction(({ actions, values }) => ({\n        '/instance/async_migrations(/:tab)': ({ tab }: { tab?: AsyncMigrationsTab }) => {\n            if (tab && tab !== values.activeTab && tab !== AsyncMigrationsTab.Management) {\n                actions.setActiveTab(tab)\n            }\n        },\n    })),\n])\n", "import { useActions, useValues } from 'kea'\nimport { IconRefresh } from 'lib/lemon-ui/icons'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonTable, LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { Spinner } from 'lib/lemon-ui/Spinner/Spinner'\nimport { humanFriendlyDetailedTime } from 'lib/utils'\n\nimport { AsyncMigration, AsyncMigrationError, asyncMigrationsLogic } from './asyncMigrationsLogic'\n\nexport function AsyncMigrationDetails({ asyncMigration }: { asyncMigration: AsyncMigration }): JSX.Element {\n    const { asyncMigrationErrorsLoading, asyncMigrationErrors } = useValues(asyncMigrationsLogic)\n    const { loadAsyncMigrationErrors } = useActions(asyncMigrationsLogic)\n\n    const columns: LemonTableColumns<AsyncMigrationError> = [\n        {\n            title: 'Error',\n            dataIndex: 'description',\n        },\n        {\n            title: (\n                <LemonButton\n                    icon={asyncMigrationErrorsLoading[asyncMigration.id] ? <Spinner /> : <IconRefresh />}\n                    onClick={() => loadAsyncMigrationErrors(asyncMigration.id)}\n                    type=\"secondary\"\n                    size=\"small\"\n                >\n                    Refresh errors\n                </LemonButton>\n            ),\n            render: function Render(_, asyncMigrationError: AsyncMigrationError): JSX.Element {\n                return <div>{humanFriendlyDetailedTime(asyncMigrationError.created_at)}</div>\n            },\n        },\n    ]\n    return (\n        <LemonTable\n            columns={columns}\n            dataSource={asyncMigrationErrors[asyncMigration.id]}\n            loading={asyncMigrationErrorsLoading[asyncMigration.id]}\n            embedded\n        />\n    )\n}\n", "import { LemonButton, LemonDivider, LemonInput } from '@posthog/lemon-ui'\nimport { useActions } from 'kea'\nimport { useState } from 'react'\n\nimport { InstanceSetting } from '~/types'\n\nimport { asyncMigrationsLogic } from './asyncMigrationsLogic'\n\nexport function SettingUpdateField({ setting }: { setting: InstanceSetting }): JSX.Element {\n    const { updateSetting } = useActions(asyncMigrationsLogic)\n\n    const [inputValue, setInputValue] = useState<string>(String(setting.value))\n\n    return (\n        <div key={setting.key}>\n            <h4>{setting.key}</h4>\n            <p>{setting.description}</p>\n            <div className=\"flex space-x-2\">\n                <div className=\"w-1/3\">\n                    <LemonInput value={inputValue} onChange={setInputValue} />\n                </div>\n                <div>\n                    <LemonButton\n                        type=\"secondary\"\n                        disabledReason={String(setting.value) === inputValue && 'Edit the value to save it'}\n                        onClick={() => updateSetting(setting.key, inputValue)}\n                    >\n                        Update\n                    </LemonButton>\n                </div>\n            </div>\n            <LemonDivider />\n        </div>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "import_kea_router", "migrationStatusNumberToMessage", "asyncMigrationsLogic", "preflightLogic", "migration", "endpoint", "message", "tab", "settingKey", "newValue", "migrationId", "errors", "error", "_", "state", "payload", "userLogic", "api_default", "setting", "s", "asyncMigrations", "actions", "res", "lemonToast", "systemStatusLogic", "errorsForMigration", "values", "asyncMigrationParameterFormLogic", "props", "defaultParameters", "parameters", "asyncMigrationsLogic", "result", "key", "import_jsx_runtime", "AsyncMigrationParametersModal", "props", "closeAsyncMigrationsModal", "asyncMigrationsLogic", "collapsed", "setCollapsed", "LemonModal", "asyncMigrationParameterFormLogic", "Link", "AnimatedCollapsible", "parameterName", "defaultValue", "parameterDescription", "LemonInput", "LemonButton", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "AsyncMigrationDetails", "asyncMigration", "asyncMigrationErrorsLoading", "asyncMigrationErrors", "asyncMigrationsLogic", "loadAsyncMigrationErrors", "columns", "LemonButton", "Spinner", "IconRefresh", "_", "asyncMigrationError", "humanFriendlyDetailedTime", "LemonTable", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "SettingUpdateField", "setting", "updateSetting", "asyncMigrationsLogic", "inputValue", "setInputValue", "LemonInput", "LemonButton", "LemonDivider", "import_jsx_runtime", "scene", "AsyncMigrations", "asyncMigrationsLogic", "STATUS_RELOAD_INTERVAL_MS", "user", "userLogic", "asyncMigrationsLoading", "activeTab", "asyncMigrationSettings", "isAnyMigrationRunning", "activeAsyncMigrationModal", "actionableMigrations", "futureMigrations", "triggerMigration", "resumeMigration", "rollbackMigration", "forceStopMigration", "forceStopMigrationWithoutRollback", "loadAsyncMigrations", "loadAsyncMigrationErrors", "setActiveTab", "interval", "nameColumn", "_", "asyncMigration", "link", "LemonTableLink", "progressColumn", "progress", "LemonProgress", "statusColumn", "status", "type", "LemonTag", "migrationStatusNumberToMessage", "lastOpColumn", "queryIdColumn", "startedAtColumn", "startedAt", "humanFriendlyDetailedTime", "finishedAtColumn", "finishedAt", "ActionsColumn", "Tooltip", "LemonButton", "IconPlayCircle", "More", "IconReplay", "minVersionColumn", "maxVersionColumn", "columns", "migrations", "rowExpansion", "AsyncMigrationDetails", "tabs", "PageHeader", "Link", "LemonTabs", "Spinner", "IconRefresh", "LemonTable", "AsyncMigrationParametersModal", "setting", "SettingUpdateField"]
}
