{
  "version": 3,
  "sources": ["../src/scenes/session-recordings/playlist/SessionRecordingsPlaylist.tsx", "../src/scenes/session-recordings/playlist/Playlist.tsx", "../src/scenes/session-recordings/components/AiFilter/AiFilter.tsx", "../src/scenes/session-recordings/components/AiFilter/AiFilterInput.tsx", "../src/scenes/session-recordings/components/AiFilter/aiFilterLogic.ts", "../src/scenes/session-recordings/components/AiFilter/AiFilterIntro.tsx", "../src/scenes/session-recordings/components/AiFilter/AiFilterSuggestions.tsx", "../src/scenes/session-recordings/components/AiFilter/AiFilterThread.tsx", "../src/scenes/session-recordings/playlist/playlistLogic.ts", "../src/scenes/session-recordings/filters/RecordingsUniversalFilters.tsx", "../src/scenes/session-recordings/filters/DurationFilter.tsx", "../src/scenes/session-recordings/filters/DurationTypeSelect.tsx", "../src/scenes/session-recordings/playlist/SessionRecordingPreview.tsx", "../src/scenes/session-recordings/playlist/SessionRecordingsPlaylistSettings.tsx", "../src/scenes/session-recordings/playlist/SessionRecordingsPlaylistTroubleshooting.tsx"],
  "sourcesContent": ["import { LemonBadge, LemonButton, Link, Spinner } from '@posthog/lemon-ui'\nimport { BindLogic, useActions, useValues } from 'kea'\nimport { EmptyMessage } from 'lib/components/EmptyMessage/EmptyMessage'\nimport { PropertyKeyInfo } from 'lib/components/PropertyKeyInfo'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { useNotebookNode } from 'scenes/notebooks/Nodes/NotebookNodeContext'\nimport { Playlist, PlaylistSection } from 'scenes/session-recordings/playlist/Playlist'\nimport { urls } from 'scenes/urls'\n\nimport { ReplayTabs } from '~/types'\n\nimport { RecordingsUniversalFilters } from '../filters/RecordingsUniversalFilters'\nimport { SessionRecordingPlayer } from '../player/SessionRecordingPlayer'\nimport { SessionRecordingPreview } from './SessionRecordingPreview'\nimport {\n    DEFAULT_RECORDING_FILTERS,\n    SessionRecordingPlaylistLogicProps,\n    sessionRecordingsPlaylistLogic,\n} from './sessionRecordingsPlaylistLogic'\nimport {\n    SessionRecordingPlaylistBottomSettings,\n    SessionRecordingsPlaylistTopSettings,\n} from './SessionRecordingsPlaylistSettings'\nimport { SessionRecordingsPlaylistTroubleshooting } from './SessionRecordingsPlaylistTroubleshooting'\n\nexport function SessionRecordingsPlaylist({\n    showContent = true,\n    ...props\n}: SessionRecordingPlaylistLogicProps & { showContent?: boolean }): JSX.Element {\n    const logicProps: SessionRecordingPlaylistLogicProps = {\n        ...props,\n        autoPlay: props.autoPlay ?? true,\n    }\n    const logic = sessionRecordingsPlaylistLogic(logicProps)\n    const {\n        filters,\n        pinnedRecordings,\n        matchingEventsMatchType,\n        sessionRecordingsResponseLoading,\n        otherRecordings,\n        activeSessionRecordingId,\n        hasNext,\n        allowFlagsFilters,\n        allowHogQLFilters,\n        totalFiltersCount,\n    } = useValues(logic)\n    const { maybeLoadSessionRecordings, setSelectedRecordingId, setFilters, resetFilters } = useActions(logic)\n\n    const { featureFlags } = useValues(featureFlagLogic)\n    const isTestingSaved = featureFlags[FEATURE_FLAGS.SAVED_NOT_PINNED] === 'test'\n\n    const pinnedDescription = isTestingSaved ? 'Saved' : 'Pinned'\n\n    const notebookNode = useNotebookNode()\n\n    const sections: PlaylistSection[] = []\n\n    if (pinnedRecordings.length) {\n        sections.push({\n            key: 'pinned',\n            title: (\n                <div className=\"flex flex-row space-x-1 items-center\">\n                    <span>{pinnedDescription} recordings</span>\n                    <LemonBadge.Number count={pinnedRecordings.length} status=\"muted\" size=\"small\" />\n                </div>\n            ),\n            items: pinnedRecordings,\n            render: ({ item, isActive }) => (\n                <SessionRecordingPreview recording={item} isActive={isActive} pinned={true} />\n            ),\n            initiallyOpen: true,\n        })\n    }\n\n    sections.push({\n        key: 'other',\n        title: (\n            <div className=\"flex flex-row space-x-1 items-center\">\n                <span>Results</span>\n                <LemonBadge.Number count={otherRecordings.length} status=\"muted\" size=\"small\" />\n            </div>\n        ),\n        items: otherRecordings,\n        initiallyOpen: !pinnedRecordings.length,\n        render: ({ item, isActive }) => <SessionRecordingPreview recording={item} isActive={isActive} pinned={false} />,\n        footer: (\n            <div className=\"p-4\">\n                <div className=\"h-10 flex items-center justify-center gap-2 text-secondary\">\n                    {sessionRecordingsResponseLoading ? (\n                        <>\n                            <Spinner textColored /> Loading older recordings\n                        </>\n                    ) : hasNext ? (\n                        <LemonButton onClick={() => maybeLoadSessionRecordings('older')}>Load more</LemonButton>\n                    ) : (\n                        'No more results'\n                    )}\n                </div>\n            </div>\n        ),\n    })\n\n    return (\n        <BindLogic logic={sessionRecordingsPlaylistLogic} props={logicProps}>\n            <div className=\"h-full space-y-2\">\n                <Playlist\n                    data-attr=\"session-recordings-playlist\"\n                    notebooksHref={urls.replay(ReplayTabs.Home, filters)}\n                    embedded={!!notebookNode}\n                    sections={sections}\n                    headerActions={<SessionRecordingsPlaylistTopSettings filters={filters} setFilters={setFilters} />}\n                    footerActions={<SessionRecordingPlaylistBottomSettings />}\n                    filterActions={\n                        notebookNode ? null : (\n                            <RecordingsUniversalFilters\n                                resetFilters={resetFilters}\n                                filters={filters}\n                                setFilters={setFilters}\n                                totalFiltersCount={totalFiltersCount}\n                                className=\"border-b\"\n                                allowReplayHogQLFilters={allowHogQLFilters}\n                                allowReplayFlagsFilters={allowFlagsFilters}\n                            />\n                        )\n                    }\n                    loading={sessionRecordingsResponseLoading}\n                    onScrollListEdge={(edge) => {\n                        if (edge === 'top') {\n                            maybeLoadSessionRecordings('newer')\n                        } else {\n                            maybeLoadSessionRecordings('older')\n                        }\n                    }}\n                    listEmptyState={<ListEmptyState />}\n                    onSelect={(item) => setSelectedRecordingId(item.id)}\n                    activeItemId={activeSessionRecordingId}\n                    content={({ activeItem }) =>\n                        showContent && activeItem ? (\n                            <SessionRecordingPlayer\n                                playerKey={props.logicKey ?? 'playlist'}\n                                sessionRecordingId={activeItem.id}\n                                matchingEventsMatchType={matchingEventsMatchType}\n                                playlistLogic={logic}\n                                noBorder\n                                pinned={!!pinnedRecordings.find((x) => x.id === activeItem.id)}\n                                setPinned={\n                                    props.onPinnedChange\n                                        ? (pinned) => {\n                                              if (!activeItem.id) {\n                                                  return\n                                              }\n                                              props.onPinnedChange?.(activeItem, pinned)\n                                          }\n                                        : undefined\n                                }\n                            />\n                        ) : (\n                            <div className=\"mt-20\">\n                                <EmptyMessage\n                                    title=\"No recording selected\"\n                                    description=\"Please select a recording from the list on the left\"\n                                    buttonText=\"Learn more about recordings\"\n                                    buttonTo=\"https://posthog.com/docs/user-guides/recordings\"\n                                />\n                            </div>\n                        )\n                    }\n                />\n            </div>\n        </BindLogic>\n    )\n}\n\nconst ListEmptyState = (): JSX.Element => {\n    const { filters, sessionRecordingsAPIErrored, unusableEventsInFilter } = useValues(sessionRecordingsPlaylistLogic)\n    const { setFilters } = useActions(sessionRecordingsPlaylistLogic)\n\n    return (\n        <div className=\"p-3 text-sm text-secondary\">\n            {sessionRecordingsAPIErrored ? (\n                <LemonBanner type=\"error\">Error while trying to load recordings.</LemonBanner>\n            ) : unusableEventsInFilter.length ? (\n                <UnusableEventsWarning unusableEventsInFilter={unusableEventsInFilter} />\n            ) : (\n                <div className=\"flex flex-col items-center space-y-2\">\n                    {filters.date_from === DEFAULT_RECORDING_FILTERS.date_from ? (\n                        <>\n                            <span>No matching recordings found</span>\n                            <LemonButton\n                                type=\"secondary\"\n                                data-attr=\"expand-replay-listing-from-default-seven-days-to-twenty-one\"\n                                onClick={() => setFilters({ date_from: '-30d' })}\n                            >\n                                Search over the last 30 days\n                            </LemonButton>\n                        </>\n                    ) : (\n                        <SessionRecordingsPlaylistTroubleshooting />\n                    )}\n                </div>\n            )}\n        </div>\n    )\n}\n\n/**\n * TODO add docs on how to enrich custom events with session_id and link to it from here\n */\nconst UnusableEventsWarning = (props: { unusableEventsInFilter: string[] }): JSX.Element => {\n    return (\n        <LemonBanner type=\"warning\">\n            <p>Cannot use these events to filter for session recordings:</p>\n            <li className=\"my-1\">\n                {props.unusableEventsInFilter.map((event) => (\n                    <span key={event}>\"{event}\"</span>\n                ))}\n            </li>\n            <p>\n                Events have to have a <PropertyKeyInfo value=\"$session_id\" /> to be used to filter recordings. This is\n                added automatically by{' '}\n                <Link to=\"https://posthog.com/docs/libraries/js\" target=\"_blank\">\n                    the Web SDK\n                </Link>\n                ,{' '}\n                <Link to=\"https://posthog.com/docs/libraries\" target=\"_blank\">\n                    and the Mobile SDKs (Android, iOS, React Native and Flutter)\n                </Link>\n            </p>\n        </LemonBanner>\n    )\n}\n", "import './Playlist.scss'\n\nimport { IconX } from '@posthog/icons'\nimport { LemonButton, LemonCollapse, LemonSkeleton, Tooltip } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { useResizeBreakpoints } from 'lib/hooks/useResizeObserver'\nimport { LemonTableLoader } from 'lib/lemon-ui/LemonTable/LemonTableLoader'\nimport { range } from 'lib/utils'\nimport posthog from 'posthog-js'\nimport { ReactNode, useRef, useState } from 'react'\nimport { DraggableToNotebook } from 'scenes/notebooks/AddToNotebook/DraggableToNotebook'\nimport { AiFilter } from 'scenes/session-recordings/components/AiFilter/AiFilter'\n\nimport { SessionRecordingType } from '~/types'\n\nimport { playlistLogic } from './playlistLogic'\n\nconst SCROLL_TRIGGER_OFFSET = 100\n\ntype PlaylistSectionBase = {\n    key: string\n    title?: ReactNode\n    initiallyOpen?: boolean\n}\n\nexport type PlaylistRecordingPreviewBlock = PlaylistSectionBase & {\n    items: SessionRecordingType[]\n    render: ({ item, isActive }: { item: SessionRecordingType; isActive: boolean }) => JSX.Element\n    footer?: JSX.Element\n}\n\nexport type PlaylistContentBlock = PlaylistSectionBase & {\n    content: ReactNode\n}\n\nexport type PlaylistSection = PlaylistRecordingPreviewBlock | PlaylistContentBlock\n\nexport type PlaylistProps = {\n    sections: PlaylistSection[]\n    listEmptyState: JSX.Element\n    content: ReactNode | (({ activeItem }: { activeItem: SessionRecordingType | null }) => JSX.Element) | null\n    title?: string\n    notebooksHref?: string\n    embedded?: boolean\n    loading?: boolean\n    headerActions?: JSX.Element\n    footerActions?: JSX.Element\n    filterActions?: JSX.Element | null\n    onScrollListEdge?: (edge: 'top' | 'bottom') => void\n    // Optionally select the first item in the list. Only works in controlled mode\n    selectInitialItem?: boolean\n    onSelect?: (item: SessionRecordingType) => void\n    onChangeSections?: (activeKeys: string[]) => void\n    'data-attr'?: string\n    activeItemId?: string\n    isCollapsed?: boolean\n}\n\nexport function Playlist({\n    title,\n    notebooksHref,\n    loading,\n    embedded = false,\n    activeItemId: propsActiveItemId,\n    content,\n    sections,\n    headerActions,\n    footerActions,\n    filterActions,\n    onScrollListEdge,\n    listEmptyState,\n    selectInitialItem,\n    onSelect,\n    onChangeSections,\n    'data-attr': dataAttr,\n}: PlaylistProps): JSX.Element {\n    const firstItem = sections\n        .filter((s): s is PlaylistRecordingPreviewBlock => 'items' in s)\n        ?.find((s) => s.items.length > 0)?.items[0]\n\n    const [controlledActiveItemId, setControlledActiveItemId] = useState<SessionRecordingType['id'] | null>(\n        selectInitialItem && firstItem ? firstItem.id : null\n    )\n\n    const playlistListRef = useRef<HTMLDivElement>(null)\n    const { ref: playlistRef, size } = useResizeBreakpoints({\n        0: 'small',\n        750: 'medium',\n    })\n\n    const { isExpanded } = useValues(playlistLogic)\n    const { setIsExpanded } = useActions(playlistLogic)\n\n    const onChangeActiveItem = (item: SessionRecordingType): void => {\n        setControlledActiveItemId(item.id)\n        onSelect?.(item)\n    }\n\n    const initiallyOpenSections = sections.filter((s) => s.initiallyOpen).map((s) => s.key)\n    const [openSections, setOpenSections] = useState<string[]>(initiallyOpenSections)\n\n    const onChangeOpenSections = (activeKeys: string[]): void => {\n        setOpenSections(activeKeys)\n        onChangeSections?.(activeKeys)\n    }\n\n    const activeItemId = propsActiveItemId === undefined ? controlledActiveItemId : propsActiveItemId\n\n    const activeItem =\n        sections\n            .filter((s): s is PlaylistRecordingPreviewBlock => 'items' in s)\n            .flatMap((s) => s.items)\n            .find((i) => i.id === activeItemId) || null\n\n    const lastScrollPositionRef = useRef(0)\n    const contentRef = useRef<HTMLDivElement | null>(null)\n\n    const handleScroll = (e: React.UIEvent<HTMLDivElement>): void => {\n        // If we are scrolling down then check if we are at the bottom of the list\n        if (e.currentTarget.scrollTop > lastScrollPositionRef.current) {\n            const scrollPosition = e.currentTarget.scrollTop + e.currentTarget.clientHeight\n            if (e.currentTarget.scrollHeight - scrollPosition < SCROLL_TRIGGER_OFFSET) {\n                onScrollListEdge?.('bottom')\n            }\n        }\n\n        // Same again but if scrolling to the top\n        if (e.currentTarget.scrollTop < lastScrollPositionRef.current) {\n            if (e.currentTarget.scrollTop < SCROLL_TRIGGER_OFFSET) {\n                onScrollListEdge?.('top')\n            }\n        }\n\n        lastScrollPositionRef.current = e.currentTarget.scrollTop\n    }\n\n    const sectionCount = sections.length\n    const itemsCount = sections\n        .filter((s): s is PlaylistRecordingPreviewBlock => 'items' in s)\n        .flatMap((s) => s.items).length\n\n    return (\n        <>\n            <div\n                className={clsx(`w-full mb-8`, {\n                    hidden: !isExpanded,\n                })}\n            >\n                <div className=\"flex justify-end\">\n                    <LemonButton\n                        icon={<IconX />}\n                        onClick={() => {\n                            setIsExpanded(false)\n                            posthog.capture('ai_filter_close')\n                        }}\n                    />\n                </div>\n                <AiFilter isExpanded={isExpanded} />\n            </div>\n\n            <div\n                className={clsx('flex flex-col w-full gap-2 h-full', {\n                    'xl:flex-row': true,\n                })}\n            >\n                <div className=\"flex flex-col gap-2 xl:max-w-80\">\n                    <DraggableToNotebook href={notebooksHref}>{filterActions}</DraggableToNotebook>\n                    <div\n                        ref={playlistRef}\n                        data-attr={dataAttr}\n                        className={clsx('Playlist w-full min-w-60 min-h-96', {\n                            'Playlist--wide': size !== 'small',\n                            'Playlist--embedded': embedded,\n                        })}\n                    >\n                        <div\n                            ref={playlistListRef}\n                            className=\"Playlist__list flex flex-col relative overflow-hidden h-full w-full\"\n                        >\n                            <div className=\"flex flex-col relative w-full bg-bg-light overflow-hidden h-full Playlist__list\">\n                                <DraggableToNotebook href={notebooksHref}>\n                                    <div className=\"flex flex-col gap-1\">\n                                        <div className=\"shrink-0 bg-bg-3000 relative flex justify-between items-center gap-0.5 whitespace-nowrap border-b\">\n                                            {title && <TitleWithCount title={title} count={itemsCount} />}\n                                            {headerActions}\n                                        </div>\n                                        <LemonTableLoader loading={loading} />\n                                    </div>\n                                </DraggableToNotebook>\n                                <div className=\"overflow-y-auto flex-1\" onScroll={handleScroll} ref={contentRef}>\n                                    {sectionCount > 1 ? (\n                                        <LemonCollapse\n                                            defaultActiveKeys={openSections}\n                                            panels={sections.map((s) => {\n                                                return {\n                                                    key: s.key,\n                                                    header: s.title ?? '',\n                                                    content: (\n                                                        <SectionContent\n                                                            section={s}\n                                                            loading={!!loading}\n                                                            setActiveItemId={onChangeActiveItem}\n                                                            activeItemId={activeItemId}\n                                                            emptyState={listEmptyState}\n                                                        />\n                                                    ),\n                                                    className: 'p-0',\n                                                }\n                                            })}\n                                            onChange={onChangeOpenSections}\n                                            multiple\n                                            embedded\n                                            size=\"small\"\n                                        />\n                                    ) : sectionCount === 1 ? (\n                                        <SectionContent\n                                            section={sections[0]}\n                                            loading={!!loading}\n                                            setActiveItemId={onChangeActiveItem}\n                                            activeItemId={activeItemId}\n                                            emptyState={listEmptyState}\n                                        />\n                                    ) : loading ? (\n                                        <LoadingState />\n                                    ) : (\n                                        listEmptyState\n                                    )}\n                                </div>\n                                <div className=\"shrink-0 relative flex justify-between items-center gap-0.5 whitespace-nowrap\">\n                                    {footerActions}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div\n                    className={clsx(\n                        'Playlist h-full min-h-96 w-full min-w-96 lg:min-w-[560px] order-first xl:order-none',\n                        {\n                            'Playlist--wide': size !== 'small',\n                            'Playlist--embedded': embedded,\n                        }\n                    )}\n                >\n                    {content && (\n                        <div className=\"Playlist__main h-full\">\n                            {' '}\n                            {typeof content === 'function' ? content({ activeItem }) : content}\n                        </div>\n                    )}\n                </div>\n            </div>\n        </>\n    )\n}\n\nconst TitleWithCount = ({ title, count }: { title?: string; count: number }): JSX.Element => {\n    return (\n        <div className=\"flex items-center gap-0.5\">\n            {title && (\n                <span className=\"flex flex-1 gap-1 items-center\">\n                    <span className=\"font-bold uppercase text-xxs tracking-wide\">{title}</span>\n                    <Tooltip\n                        placement=\"bottom\"\n                        title={\n                            <>\n                                Showing {count} results.\n                                <br />\n                                Scrolling to the bottom or the top of the list will load older or newer results\n                                respectively.\n                            </>\n                        }\n                    >\n                        <span className=\"rounded py-1 px-2 bg-border-light font-semibold select-none text-xxs\">\n                            {Math.min(999, count)}+\n                        </span>\n                    </Tooltip>\n                </span>\n            )}\n        </div>\n    )\n}\n\nfunction SectionContent({\n    section,\n    loading,\n    activeItemId,\n    setActiveItemId,\n    emptyState,\n}: {\n    section: PlaylistSection\n    loading: boolean\n    activeItemId: SessionRecordingType['id'] | null\n    setActiveItemId: (item: SessionRecordingType) => void\n    emptyState: PlaylistProps['listEmptyState']\n}): JSX.Element {\n    return 'content' in section ? (\n        <>{section.content}</>\n    ) : 'items' in section && !!section.items.length ? (\n        <ListSection {...section} onClick={setActiveItemId} activeItemId={activeItemId} />\n    ) : loading ? (\n        <LoadingState />\n    ) : (\n        emptyState\n    )\n}\n\nexport function ListSection({\n    items,\n    render,\n    footer,\n    onClick,\n    activeItemId,\n}: PlaylistRecordingPreviewBlock & {\n    onClick: (item: SessionRecordingType) => void\n    activeItemId: SessionRecordingType['id'] | null\n}): JSX.Element {\n    return (\n        <>\n            {items.length > 0\n                ? items.map((item) => (\n                      <div key={item.id} className=\"border-b\" onClick={() => onClick(item)}>\n                          {render({ item, isActive: item.id === activeItemId })}\n                      </div>\n                  ))\n                : null}\n            {footer}\n        </>\n    )\n}\n\nconst LoadingState = (): JSX.Element => {\n    return (\n        <>\n            {range(5).map((i) => (\n                <div key={i} className=\"p-4 space-y-2\">\n                    <LemonSkeleton className=\"w-1/2 h-4\" />\n                    <LemonSkeleton className=\"w-1/3 h-4\" />\n                </div>\n            ))}\n        </>\n    )\n}\n", "import { useActions, useMountedLogic, useValues } from 'kea'\nimport { sessionRecordingsPlaylistLogic } from 'scenes/session-recordings/playlist/sessionRecordingsPlaylistLogic'\n\nimport { AiFilterInput } from './AiFilterInput'\nimport { AiFilterIntro } from './AiFilterIntro'\nimport { aiFilterLogic } from './aiFilterLogic'\nimport { AiFilterSuggestions } from './AiFilterSuggestions'\nimport { AiFilterThread } from './AiFilterThread'\n\nexport function AiFilter({ isExpanded }: { isExpanded: boolean }): JSX.Element {\n    const mountedLogic = useMountedLogic(sessionRecordingsPlaylistLogic)\n    const { setFilters, resetFilters } = useActions(mountedLogic)\n    const filterLogic = aiFilterLogic({ setFilters, resetFilters })\n    const { messages } = useValues(filterLogic)\n\n    return (\n        <div className=\"relative flex flex-col gap-3 px-4 items-center grow justify-center\">\n            {messages.length === 0 && <AiFilterIntro />}\n            <AiFilterThread />\n            {isExpanded && <AiFilterInput />}\n            {messages.length === 0 && <AiFilterSuggestions />}\n        </div>\n    )\n}\n", "import { offset } from '@floating-ui/react'\nimport { IconArrowRight, IconRewind } from '@posthog/icons'\nimport { LemonButton, LemonTextArea } from '@posthog/lemon-ui'\nimport { useActions, useMountedLogic, useValues } from 'kea'\nimport { maxGlobalLogic } from 'scenes/max/maxGlobalLogic'\nimport { sessionRecordingsPlaylistLogic } from 'scenes/session-recordings/playlist/sessionRecordingsPlaylistLogic'\nimport { AIConsentPopoverWrapper } from 'scenes/settings/organization/AIConsentPopoverWrapper'\n\nimport { aiFilterLogic } from './aiFilterLogic'\n\nexport function AiFilterInput(): JSX.Element {\n    const mountedLogic = useMountedLogic(sessionRecordingsPlaylistLogic)\n    const { setFilters, resetFilters } = useActions(mountedLogic)\n    const filterLogic = aiFilterLogic({ setFilters, resetFilters })\n    const { messages, input, isLoading } = useValues(filterLogic)\n    const { setInput, handleSend, handleReset } = useActions(filterLogic)\n    const { dataProcessingAccepted } = useValues(maxGlobalLogic)\n\n    return (\n        <>\n            <div className=\"w-[min(44rem,100%)] relative\">\n                <LemonTextArea\n                    value={input}\n                    onChange={(value) => setInput(value)}\n                    placeholder={\n                        isLoading\n                            ? 'Thinking\u2026'\n                            : messages.length === 0\n                            ? 'Show me recordings of people who ...'\n                            : 'Ask follow-up'\n                    }\n                    onPressEnter={() => {\n                        if (input) {\n                            handleSend()\n                        }\n                    }}\n                    minRows={1}\n                    maxRows={10}\n                    className=\"p-3\"\n                    autoFocus\n                    disabled={isLoading}\n                />\n                <div className=\"absolute top-0 bottom-0 flex items-center right-2\">\n                    <AIConsentPopoverWrapper placement=\"right-end\" middleware={[offset(-12)]} showArrow>\n                        <LemonButton\n                            type={messages.length === 0 ? 'primary' : 'secondary'}\n                            onClick={handleSend}\n                            tooltip=\"Let's go!\"\n                            disabled={isLoading || input.length === 0 || !dataProcessingAccepted}\n                            size=\"small\"\n                            icon={<IconArrowRight />}\n                        />\n                    </AIConsentPopoverWrapper>\n                </div>\n            </div>\n            <span className=\"text-xs text-muted-alt\">\n                * Max AI currently only knows about PostHog default properties added by our SDKs. For your custom\n                properties, use the filters box below.\n            </span>\n            {messages.length > 0 && (\n                <div>\n                    <LemonButton\n                        icon={<IconRewind />}\n                        onClick={handleReset}\n                        disabled={isLoading}\n                        type=\"tertiary\"\n                        size=\"xsmall\"\n                    >\n                        Start over\n                    </LemonButton>\n                </div>\n            )}\n        </>\n    )\n}\n", "import { actions, kea, listeners, path, props, reducers } from 'kea'\nimport api from 'lib/api'\nimport {\n    ChatCompletionAssistantMessageParam,\n    ChatCompletionSystemMessageParam,\n    ChatCompletionUserMessageParam,\n} from 'openai/resources/chat/completions'\nimport posthog from 'posthog-js'\n\nimport { RecordingUniversalFilters } from '~/types'\n\nimport type { aiFilterLogicType } from './aiFilterLogicType'\n\nexport interface AiFilterLogicProps {\n    setFilters: (filters: Partial<RecordingUniversalFilters>) => void\n    resetFilters: () => void\n}\n\ninterface AiFilterResponse {\n    result: 'filter' | 'question'\n    data: any\n}\n\nconst TIMEOUT_LIMIT = 10000\n\nexport const aiFilterLogic = kea<aiFilterLogicType>([\n    path(['lib', 'components', 'AiFilter', 'aiFilterLogicType']),\n    props({} as AiFilterLogicProps),\n    actions({\n        setMessages: (\n            messages: (\n                | ChatCompletionUserMessageParam\n                | ChatCompletionAssistantMessageParam\n                | ChatCompletionSystemMessageParam\n            )[]\n        ) => ({ messages }),\n        setInput: (input: string) => ({ input }),\n        setIsLoading: (isLoading: boolean) => ({ isLoading }),\n        handleAi: (\n            newMessages: (\n                | ChatCompletionUserMessageParam\n                | ChatCompletionAssistantMessageParam\n                | ChatCompletionSystemMessageParam\n            )[]\n        ) => ({ newMessages }),\n        handleReset: () => ({}),\n        handleSend: () => ({}),\n    }),\n    reducers({\n        messages: [\n            [],\n            {\n                setMessages: (_, { messages }) => messages,\n            },\n        ],\n        input: [\n            '',\n            {\n                setInput: (_, { input }) => input,\n            },\n        ],\n        isLoading: [\n            false,\n            {\n                setIsLoading: (_, { isLoading }) => isLoading,\n            },\n        ],\n    }),\n    listeners(({ actions, values, props }) => ({\n        handleSend: () => {\n            posthog.capture('ai_filter_send')\n            const newMessages = [\n                ...values.messages,\n                {\n                    role: 'user',\n                    content: values.input,\n                } as ChatCompletionUserMessageParam,\n            ]\n            actions.setMessages(newMessages)\n            actions.handleAi(newMessages)\n            actions.setInput('')\n        },\n        handleAi: async ({ newMessages }) => {\n            actions.setIsLoading(true)\n\n            try {\n                const timeoutPromise = new Promise((_, reject) => {\n                    setTimeout(() => reject(new Error('Request timed out')), TIMEOUT_LIMIT)\n                })\n\n                const contentPromise = api.recordings.aiFilters(newMessages as ChatCompletionUserMessageParam[])\n                const content = (await Promise.race([contentPromise, timeoutPromise])) as AiFilterResponse\n\n                if (content.hasOwnProperty('result')) {\n                    if (content.result === 'filter') {\n                        props.setFilters(content.data)\n                        posthog.capture('ai_filter_success')\n                    }\n\n                    actions.setMessages([\n                        ...newMessages,\n                        {\n                            role: 'assistant',\n                            content: content.result === 'filter' ? JSON.stringify(content.data) : content.data.question,\n                        } as ChatCompletionAssistantMessageParam,\n                    ])\n                }\n            } catch (error) {\n                actions.setMessages([\n                    ...newMessages,\n                    {\n                        role: 'assistant',\n                        content: 'Sorry, I was unable to process your request. Please try again.',\n                    } as ChatCompletionAssistantMessageParam,\n                ])\n                posthog.capture('ai_filter_error')\n            }\n\n            actions.setIsLoading(false)\n        },\n        handleReset: () => {\n            actions.setMessages([])\n            props.resetFilters()\n            posthog.capture('ai_filter_reset')\n        },\n    })),\n])\n", "import { FilmCameraHog } from 'lib/components/hedgehogs'\n\nexport function AiFilterIntro(): JSX.Element {\n    return (\n        <>\n            <div className=\"flex\">\n                <FilmCameraHog className=\"w-20 h-20\" />\n            </div>\n            <div className=\"text-center mb-3\">\n                <h2 className=\"text-2xl font-bold mb-2 text-balance\">Chat with your recordings</h2>\n                <div className=\"text-secondary text-balance\">\n                    I'm Max, here to help you to find recordings matching your needs.\n                </div>\n            </div>\n        </>\n    )\n}\n", "import { IconArrowUpRight } from '@posthog/icons'\nimport { LemonButton } from '@posthog/lemon-ui'\nimport { useActions } from 'kea'\n\nimport { aiFilterLogic } from './aiFilterLogic'\n\nexport function AiFilterSuggestions(): JSX.Element {\n    const filterLogic = aiFilterLogic()\n    const { setInput } = useActions(filterLogic)\n\n    const suggestions = [\n        'Show me recordings of people who visited sign up page in the last 24 hours',\n        'Show me recordings of people who are frustrated',\n        'Show me recordings of people who are facing bugs',\n    ]\n\n    return (\n        <div className=\"flex items-center justify-center flex-wrap gap-x-2 gap-y-1.5 w-[min(48rem,100%)]\">\n            {suggestions.map((suggestion) => (\n                <LemonButton\n                    key={suggestion}\n                    className=\"mb-1\"\n                    type=\"secondary\"\n                    size=\"xsmall\"\n                    sideIcon={<IconArrowUpRight />}\n                    onClick={() => setInput(suggestion)}\n                >\n                    {suggestion}\n                </LemonButton>\n            ))}\n        </div>\n    )\n}\n", "import { ProfilePicture, Spinner, Tooltip } from '@posthog/lemon-ui'\nimport { useActions, useMountedLogic, useValues } from 'kea'\nimport { LemonMarkdown } from 'lib/lemon-ui/LemonMarkdown'\nimport { sessionRecordingsPlaylistLogic } from 'scenes/session-recordings/playlist/sessionRecordingsPlaylistLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { aiFilterLogic } from './aiFilterLogic'\n\nexport function AiFilterThread(): JSX.Element {\n    const mountedLogic = useMountedLogic(sessionRecordingsPlaylistLogic)\n    const { setFilters, resetFilters } = useActions(mountedLogic)\n    const filterLogic = aiFilterLogic({ setFilters, resetFilters })\n    const { messages, isLoading } = useValues(filterLogic)\n    const { user } = useValues(userLogic)\n\n    return (\n        <>\n            {(messages.length > 0 || isLoading) && (\n                <div className=\"w-[min(44rem,100%)] relative\">\n                    {messages\n                        .filter((message) => message.role !== 'system')\n                        .map((message, index) => (\n                            <div key={index} className=\" my-2\">\n                                {message.role === 'user' ? (\n                                    <>\n                                        <div className=\"relative flex gap-2 flex-row-reverse ml-10 items-center\">\n                                            <Tooltip placement=\"right\" title=\"You\">\n                                                <ProfilePicture\n                                                    user={{ ...user, hedgehog_config: undefined }}\n                                                    size=\"lg\"\n                                                    className=\"mt-1 border\"\n                                                />\n                                            </Tooltip>\n                                            <div className=\"border py-2 px-3 rounded-lg bg-surface-primary font-medium\">\n                                                <LemonMarkdown>{message.content}</LemonMarkdown>\n                                            </div>\n                                        </div>\n                                    </>\n                                ) : (\n                                    <>\n                                        <div className=\"relative flex gap-2 mr-10 items-center\">\n                                            <Tooltip placement=\"left\" title=\"Max\">\n                                                <ProfilePicture\n                                                    user={{\n                                                        hedgehog_config: {\n                                                            ...user?.hedgehog_config,\n                                                            use_as_profile: true,\n                                                        },\n                                                    }}\n                                                    size=\"lg\"\n                                                    className=\"mt-1 border\"\n                                                />\n                                            </Tooltip>\n                                            <div className=\"border py-2 px-3 rounded-lg bg-surface-primary font-medium\">\n                                                <LemonMarkdown>\n                                                    {message.content.length > 0 && message.content[0] === '{'\n                                                        ? 'Done! Filters have been updated'\n                                                        : message.content}\n                                                </LemonMarkdown>\n                                            </div>\n                                        </div>\n                                    </>\n                                )}\n                            </div>\n                        ))}\n                    {isLoading && (\n                        <div className=\"relative flex gap-2 mr-10 items-center\">\n                            <Tooltip placement=\"left\" title=\"Max\">\n                                <ProfilePicture\n                                    user={{ hedgehog_config: { ...user?.hedgehog_config, use_as_profile: true } }}\n                                    size=\"lg\"\n                                    className=\"mt-1 border\"\n                                />\n                            </Tooltip>\n                            <div className=\"border py-2 px-3 rounded-lg bg-surface-primary font-medium\">\n                                Thinking...\n                                <Spinner />\n                            </div>\n                        </div>\n                    )}\n                </div>\n            )}\n        </>\n    )\n}\n", "import { actions, kea, path, reducers } from 'kea'\n\nimport type { playlistLogicType } from './playlistLogicType'\n\nexport const playlistLogic = kea<playlistLogicType>([\n    path(['scenes', 'session-recordings', 'playlist', 'playlistLogicType']),\n    actions({\n        setIsExpanded: (isExpanded: boolean) => ({ isExpanded }),\n    }),\n    reducers({\n        isExpanded: [\n            false,\n            {\n                setIsExpanded: (_, { isExpanded }) => isExpanded,\n            },\n        ],\n    }),\n])\n", "import { IconChevronDown, IconFilter, IconRevert } from '@posthog/icons'\nimport { LemonBadge, LemonButton, LemonButtonProps, ProfilePicture } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { useActions, useMountedLogic, useValues } from 'kea'\nimport { DateFilter } from 'lib/components/DateFilter/DateFilter'\nimport { FlaggedFeature } from 'lib/components/FlaggedFeature'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport UniversalFilters from 'lib/components/UniversalFilters/UniversalFilters'\nimport { universalFiltersLogic } from 'lib/components/UniversalFilters/universalFiltersLogic'\nimport { isUniversalGroupFilterLike } from 'lib/components/UniversalFilters/utils'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport posthog from 'posthog-js'\nimport { useEffect, useState } from 'react'\nimport { TestAccountFilter } from 'scenes/insights/filters/TestAccountFilter'\nimport { playlistLogic } from 'scenes/session-recordings/playlist/playlistLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { actionsModel } from '~/models/actionsModel'\nimport { cohortsModel } from '~/models/cohortsModel'\nimport { AndOrFilterSelect } from '~/queries/nodes/InsightViz/PropertyGroupFilters/AndOrFilterSelect'\nimport { NodeKind } from '~/queries/schema/schema-general'\nimport { RecordingUniversalFilters, UniversalFiltersGroup } from '~/types'\n\nimport { DurationFilter } from './DurationFilter'\n\nexport const RecordingsUniversalFilters = ({\n    filters,\n    setFilters,\n    resetFilters,\n    totalFiltersCount,\n    className,\n    allowReplayHogQLFilters = false,\n    allowReplayFlagsFilters = false,\n}: {\n    filters: RecordingUniversalFilters\n    setFilters: (filters: Partial<RecordingUniversalFilters>) => void\n    resetFilters?: () => void\n    totalFiltersCount?: number\n    className?: string\n    allowReplayFlagsFilters?: boolean\n    allowReplayHogQLFilters?: boolean\n}): JSX.Element => {\n    useMountedLogic(cohortsModel)\n    useMountedLogic(actionsModel)\n\n    const durationFilter = filters.duration[0]\n\n    const [isFiltersExpanded, setIsFiltersExpanded] = useState(false)\n\n    const { isExpanded } = useValues(playlistLogic)\n    const { setIsExpanded } = useActions(playlistLogic)\n\n    const taxonomicGroupTypes = [\n        TaxonomicFilterGroupType.Replay,\n        TaxonomicFilterGroupType.Events,\n        TaxonomicFilterGroupType.EventProperties,\n        TaxonomicFilterGroupType.Actions,\n        TaxonomicFilterGroupType.Cohorts,\n        TaxonomicFilterGroupType.PersonProperties,\n        TaxonomicFilterGroupType.SessionProperties,\n    ]\n\n    if (allowReplayHogQLFilters) {\n        taxonomicGroupTypes.push(TaxonomicFilterGroupType.HogQLExpression)\n    }\n\n    if (allowReplayFlagsFilters) {\n        taxonomicGroupTypes.push(TaxonomicFilterGroupType.EventFeatureFlags)\n    }\n\n    function IconMaxFromHedgehogConfig(): JSX.Element {\n        const { user } = useValues(userLogic)\n        return (\n            <ProfilePicture\n                user={{ hedgehog_config: { ...user?.hedgehog_config, use_as_profile: true } }}\n                size=\"md\"\n                className=\"border bg-bg-light -scale-x-100\" // Flip the hedegehog to face the scene\n            />\n        )\n    }\n\n    return (\n        <>\n            <div className=\"flex justify-center relative gap-2\">\n                <LemonButton\n                    className=\"flex-1\"\n                    type=\"secondary\"\n                    icon={<IconFilter />}\n                    sideIcon={<IconChevronDown className={isFiltersExpanded ? 'rotate-180' : ''} />}\n                    onClick={() => {\n                        setIsFiltersExpanded(!isFiltersExpanded)\n                    }}\n                >\n                    Filters{' '}\n                    {totalFiltersCount && totalFiltersCount > 0 ? (\n                        <LemonBadge.Number count={totalFiltersCount} />\n                    ) : null}\n                </LemonButton>\n                <FlaggedFeature flag={FEATURE_FLAGS.RECORDINGS_AI_FILTER}>\n                    <LemonButton\n                        type=\"secondary\"\n                        icon={<IconMaxFromHedgehogConfig />}\n                        onClick={() => {\n                            setIsExpanded(!isExpanded)\n                            posthog.capture('ai_filter_open')\n                            // If the AI filter is not expanded, we need to expand the filters\n                            if (!isExpanded) {\n                                setIsFiltersExpanded(true)\n                            }\n                        }}\n                    >\n                        Help\n                    </LemonButton>\n                </FlaggedFeature>\n            </div>\n            <div\n                className={clsx(\n                    'flex justify-center relative border-r border-l rounded-b overflow-hidden transition-all duration-200',\n                    isFiltersExpanded ? 'max-h-[1000px] opacity-100' : 'max-h-0 opacity-0'\n                )}\n            >\n                <div className={clsx('divide-y bg-surface-primary rounded-b w-full', className)}>\n                    <div className=\"flex items-center my-2\">\n                        <AndOrFilterSelect\n                            value={filters.filter_group.type}\n                            onChange={(type) => {\n                                let values = filters.filter_group.values\n\n                                // set the type on the nested child when only using a single filter group\n                                const hasSingleGroup = values.length === 1\n                                if (hasSingleGroup) {\n                                    const group = values[0] as UniversalFiltersGroup\n                                    values = [{ ...group, type }]\n                                }\n\n                                setFilters({\n                                    filter_group: {\n                                        type: type,\n                                        values: values,\n                                    },\n                                })\n                            }}\n                            topLevelFilter={true}\n                            suffix={['filter', 'filters']}\n                            size=\"xsmall\"\n                        />\n                    </div>\n                    <div className=\"flex justify-between px-2 py-2 flex-wrap gap-1\">\n                        <div className=\"flex flex-wrap gap-2 items-center\">\n                            <DateFilter\n                                dateFrom={filters.date_from ?? '-3d'}\n                                dateTo={filters.date_to}\n                                onChange={(changedDateFrom, changedDateTo) => {\n                                    setFilters({\n                                        date_from: changedDateFrom,\n                                        date_to: changedDateTo,\n                                    })\n                                }}\n                                dateOptions={[\n                                    { key: 'Custom', values: [] },\n                                    { key: 'Last 24 hours', values: ['-24h'] },\n                                    { key: 'Last 3 days', values: ['-3d'] },\n                                    { key: 'Last 7 days', values: ['-7d'] },\n                                    { key: 'Last 30 days', values: ['-30d'] },\n                                    { key: 'All time', values: ['-90d'] },\n                                ]}\n                                dropdownPlacement=\"bottom-start\"\n                                size=\"xsmall\"\n                            />\n                            <DurationFilter\n                                onChange={(newRecordingDurationFilter, newDurationType) => {\n                                    setFilters({\n                                        duration: [{ ...newRecordingDurationFilter, key: newDurationType }],\n                                    })\n                                }}\n                                recordingDurationFilter={durationFilter}\n                                durationTypeFilter={durationFilter.key}\n                                pageKey=\"session-recordings\"\n                                size=\"xsmall\"\n                            />\n                        </div>\n                        <div>\n                            <TestAccountFilter\n                                size=\"xsmall\"\n                                filters={filters}\n                                onChange={(testFilters) =>\n                                    setFilters({ filter_test_accounts: testFilters.filter_test_accounts })\n                                }\n                            />\n                        </div>\n                    </div>\n                    <div className=\"flex flex-wrap gap-2 p-2\">\n                        <UniversalFilters\n                            rootKey=\"session-recordings\"\n                            group={filters.filter_group}\n                            taxonomicGroupTypes={taxonomicGroupTypes}\n                            onChange={(filterGroup) => setFilters({ filter_group: filterGroup })}\n                        >\n                            <RecordingsUniversalFilterGroup size=\"xsmall\" />\n                        </UniversalFilters>\n                        {resetFilters && (totalFiltersCount ?? 0) > 0 && (\n                            <LemonButton type=\"tertiary\" size=\"xsmall\" onClick={resetFilters} icon={<IconRevert />}>\n                                Reset\n                            </LemonButton>\n                        )}\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nconst RecordingsUniversalFilterGroup = ({ size = 'small' }: { size?: LemonButtonProps['size'] }): JSX.Element => {\n    const { filterGroup } = useValues(universalFiltersLogic)\n    const { replaceGroupValue, removeGroupValue } = useActions(universalFiltersLogic)\n    const [allowInitiallyOpen, setAllowInitiallyOpen] = useState(false)\n\n    useEffect(() => {\n        setAllowInitiallyOpen(true)\n    }, [])\n\n    return (\n        <>\n            {filterGroup.values.map((filterOrGroup, index) => {\n                return isUniversalGroupFilterLike(filterOrGroup) ? (\n                    <UniversalFilters.Group key={index} index={index} group={filterOrGroup}>\n                        <RecordingsUniversalFilterGroup size={size} />\n                        <UniversalFilters.AddFilterButton size={size} type=\"secondary\" />\n                    </UniversalFilters.Group>\n                ) : (\n                    <UniversalFilters.Value\n                        key={index}\n                        index={index}\n                        filter={filterOrGroup}\n                        onRemove={() => removeGroupValue(index)}\n                        onChange={(value) => replaceGroupValue(index, value)}\n                        initiallyOpen={allowInitiallyOpen}\n                        metadataSource={{ kind: NodeKind.RecordingsQuery }}\n                    />\n                )\n            })}\n        </>\n    )\n}\n", "import { LemonButton, LemonButtonProps } from '@posthog/lemon-ui'\nimport { convertSecondsToDuration, DurationPicker } from 'lib/components/DurationPicker/DurationPicker'\nimport { OperatorSelect } from 'lib/components/PropertyFilters/components/OperatorValueSelect'\nimport { Popover } from 'lib/lemon-ui/Popover/Popover'\nimport { useMemo, useState } from 'react'\nimport { DurationTypeSelect } from 'scenes/session-recordings/filters/DurationTypeSelect'\n\nimport { DurationType, PropertyOperator, RecordingDurationFilter } from '~/types'\n\ninterface DurationFilterProps {\n    recordingDurationFilter: RecordingDurationFilter\n    durationTypeFilter: DurationType\n    onChange: (recordingDurationFilter: RecordingDurationFilter, durationType: DurationType) => void\n    pageKey: string\n    size?: LemonButtonProps['size']\n    type?: LemonButtonProps['type']\n}\n\nconst durationTypeMapping: Record<DurationType, string> = {\n    duration: '',\n    active_seconds: 'active ',\n    inactive_seconds: 'inactive ',\n}\n\nexport const humanFriendlyDurationFilter = (\n    recordingDurationFilter: RecordingDurationFilter,\n    durationTypeFilter: DurationType\n): string => {\n    const operator = recordingDurationFilter.operator === PropertyOperator.GreaterThan ? '>' : '<'\n    const duration = convertSecondsToDuration(recordingDurationFilter.value || 0)\n    const durationDescription = durationTypeMapping[durationTypeFilter]\n    const unit = duration.timeValue === 1 ? duration.unit.slice(0, -1) : duration.unit\n    return `${operator} ${duration.timeValue || 0} ${durationDescription}${unit}`\n}\n\nexport function DurationFilter({\n    recordingDurationFilter,\n    durationTypeFilter,\n    onChange,\n    size,\n    type,\n}: DurationFilterProps): JSX.Element {\n    const [isOpen, setIsOpen] = useState(false)\n    const durationString = useMemo(\n        () => humanFriendlyDurationFilter(recordingDurationFilter, durationTypeFilter),\n        [recordingDurationFilter, durationTypeFilter]\n    )\n\n    return (\n        <Popover\n            visible={isOpen}\n            placement=\"bottom-start\"\n            fallbackPlacements={['bottom-end']}\n            onClickOutside={() => setIsOpen(false)}\n            overlay={\n                <div className=\"flex gap-2\">\n                    <OperatorSelect\n                        operator={recordingDurationFilter.operator}\n                        operators={[PropertyOperator.GreaterThan, PropertyOperator.LessThan]}\n                        onChange={(newOperator) =>\n                            onChange({ ...recordingDurationFilter, operator: newOperator }, durationTypeFilter)\n                        }\n                        className=\"flex-1\"\n                    />\n                    <DurationPicker\n                        onChange={(newValue) =>\n                            onChange({ ...recordingDurationFilter, value: newValue }, durationTypeFilter)\n                        }\n                        value={recordingDurationFilter.value || undefined}\n                    />\n\n                    <DurationTypeSelect\n                        onChange={(v) => onChange(recordingDurationFilter, v)}\n                        value={durationTypeFilter}\n                    />\n                </div>\n            }\n        >\n            <LemonButton\n                type={type ?? 'secondary'}\n                size={size ?? 'small'}\n                onClick={() => {\n                    setIsOpen(true)\n                }}\n            >\n                {durationString}\n            </LemonButton>\n        </Popover>\n    )\n}\n", "import { LemonSelect } from '@posthog/lemon-ui'\nimport posthog from 'posthog-js'\n\nimport { DurationType } from '~/types'\n\ninterface DurationTypeFilterProps {\n    // what to call this when reporting analytics to PostHog\n    onChangeEventDescription?: string\n    onChange: (newFilter: DurationType) => void\n    value?: DurationType\n}\n\nexport function DurationTypeSelect({\n    onChange,\n    value,\n    onChangeEventDescription,\n}: DurationTypeFilterProps): JSX.Element {\n    return (\n        <LemonSelect\n            data-attr=\"duration-type-selector\"\n            onChange={(v) => {\n                posthog.capture(onChangeEventDescription || 'session recording duration type filter changed', {\n                    durationChoice: v,\n                })\n                onChange((v || 'all') as DurationType)\n            }}\n            options={[\n                {\n                    label: 'total duration',\n                    value: 'duration',\n                },\n                {\n                    label: 'active duration',\n                    value: 'active_seconds',\n                },\n                {\n                    label: 'inactive duration',\n                    value: 'inactive_seconds',\n                },\n            ]}\n            size=\"small\"\n            value={value || 'duration'}\n        />\n    )\n}\n", "import { IconBug, IconCursorClick, IconKeyboard, IconLive, IconPinFilled } from '@posthog/icons'\nimport clsx from 'clsx'\nimport { useValues } from 'kea'\nimport { PropertyIcon } from 'lib/components/PropertyIcon'\nimport { TZLabel } from 'lib/components/TZLabel'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { LemonSkeleton } from 'lib/lemon-ui/LemonSkeleton'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { colonDelimitedDuration } from 'lib/utils'\nimport { DraggableToNotebook } from 'scenes/notebooks/AddToNotebook/DraggableToNotebook'\nimport { asDisplay } from 'scenes/persons/person-utils'\nimport { SimpleTimeLabel } from 'scenes/session-recordings/components/SimpleTimeLabel'\nimport { countryTitleFrom } from 'scenes/session-recordings/player/playerMetaLogic'\nimport { playerSettingsLogic, TimestampFormat } from 'scenes/session-recordings/player/playerSettingsLogic'\nimport { urls } from 'scenes/urls'\n\nimport { RecordingsQuery } from '~/queries/schema/schema-general'\nimport { SessionRecordingType } from '~/types'\n\nimport { sessionRecordingsListPropertiesLogic } from './sessionRecordingsListPropertiesLogic'\nimport { DEFAULT_RECORDING_FILTERS_ORDER_BY, sessionRecordingsPlaylistLogic } from './sessionRecordingsPlaylistLogic'\n\nexport interface SessionRecordingPreviewProps {\n    recording: SessionRecordingType\n    isActive?: boolean\n    onClick?: () => void\n    pinned?: boolean\n}\n\nfunction RecordingDuration({ recordingDuration }: { recordingDuration: number | undefined }): JSX.Element {\n    if (recordingDuration === undefined) {\n        return <div className=\"flex text-secondary text-xs\">-</div>\n    }\n\n    const formattedDuration = colonDelimitedDuration(recordingDuration)\n    const [hours, minutes, seconds] = formattedDuration.split(':')\n\n    return (\n        <div className=\"flex text-secondary text-xs\">\n            {hours != '00' && <span>{hours}:</span>}\n            <span>\n                {minutes}:{seconds}\n            </span>\n        </div>\n    )\n}\n\nfunction ErrorCount({\n    iconClassNames,\n    errorCount,\n}: {\n    iconClassNames: string\n    errorCount: number | undefined\n}): JSX.Element {\n    if (errorCount === undefined) {\n        return <div className=\"flex items-center flex-1 justify-end font-semibold\">-</div>\n    }\n\n    return (\n        <div className=\"flex items-center flex-1 space-x-1 justify-end font-semibold\">\n            <IconBug className={iconClassNames} />\n            <span>{errorCount}</span>\n        </div>\n    )\n}\n\ninterface GatheredProperty {\n    property: string\n    value: string | undefined\n    label: string | undefined\n}\n\nconst browserIconPropertyKeys = ['$geoip_country_code', '$browser', '$device_type', '$os']\nconst mobileIconPropertyKeys = ['$geoip_country_code', '$device_type', '$os_name']\n\nexport function gatherIconProperties(\n    recordingProperties: Record<string, any> | undefined,\n    recording?: SessionRecordingType\n): GatheredProperty[] {\n    const iconProperties =\n        recordingProperties && Object.keys(recordingProperties).length > 0\n            ? recordingProperties\n            : recording?.person?.properties || {}\n\n    const deviceType = iconProperties['$device_type'] || iconProperties['$initial_device_type']\n    const iconPropertyKeys = deviceType === 'Mobile' ? mobileIconPropertyKeys : browserIconPropertyKeys\n\n    return iconPropertyKeys\n        .flatMap((property) => {\n            const value = property === '$device_type' ? deviceType : iconProperties[property]\n            const label = property === '$geoip_country_code' ? countryTitleFrom(iconProperties) : value\n\n            return { property, value, label }\n        })\n        .filter((property) => !!property.value)\n}\n\nexport interface PropertyIconsProps {\n    recordingProperties: GatheredProperty[]\n    loading?: boolean\n    iconClassNames?: string\n    showTooltip?: boolean\n    showLabel?: (key: string) => boolean\n}\n\nexport function PropertyIcons({ recordingProperties, loading, iconClassNames }: PropertyIconsProps): JSX.Element {\n    return (\n        <div className=\"flex space-x-1 ph-no-capture\">\n            {loading ? (\n                <LemonSkeleton className=\"w-16 h-3\" />\n            ) : (\n                recordingProperties.map(({ property, value, label }) => (\n                    <Tooltip key={property} title={label}>\n                        <PropertyIcon className={iconClassNames} property={property} value={value} />\n                    </Tooltip>\n                ))\n            )}\n        </div>\n    )\n}\n\nfunction FirstURL(props: { startUrl: string | undefined }): JSX.Element {\n    const firstPath = props.startUrl?.replace(/https?:\\/\\//g, '').split(/[?|#]/)[0]\n    return (\n        <span className=\"flex overflow-hidden text-secondary text-xs\">\n            <span title={`First URL: ${props.startUrl}`} className=\"truncate\">\n                {firstPath}\n            </span>\n        </span>\n    )\n}\n\nfunction PinnedIndicator(): JSX.Element | null {\n    const { featureFlags } = useValues(featureFlagLogic)\n    const isTestingSaved = featureFlags[FEATURE_FLAGS.SAVED_NOT_PINNED] === 'test'\n    const description = isTestingSaved ? 'saved' : 'pinned'\n    return (\n        <Tooltip placement=\"top-end\" title={<>This recording is {description} to this list.</>}>\n            <IconPinFilled className=\"text-sm text-orange shrink-0\" />\n        </Tooltip>\n    )\n}\n\nfunction RecordingOngoingIndicator(): JSX.Element {\n    return (\n        <Tooltip title=\"This recording is still ongoing - we received data within the last 5 minutes.\">\n            <IconLive className=\"animate-[pulse_1s_ease-out_infinite] text-primary-3000\" />\n        </Tooltip>\n    )\n}\n\nfunction UnwatchedIndicator(): JSX.Element {\n    return (\n        <Tooltip title=\"Indicates the recording has not been watched yet\">\n            <div className=\"w-2 h-2 rounded-full bg-primary-3000\" aria-label=\"unwatched-recording-label\" />\n        </Tooltip>\n    )\n}\n\nfunction durationToShow(recording: SessionRecordingType, order: RecordingsQuery['order']): number | undefined {\n    return order === 'active_seconds'\n        ? recording.active_seconds\n        : order === 'inactive_seconds'\n        ? recording.inactive_seconds\n        : recording.recording_duration\n}\n\nexport function SessionRecordingPreview({\n    recording,\n    isActive,\n    onClick,\n    pinned,\n}: SessionRecordingPreviewProps): JSX.Element {\n    const { playlistTimestampFormat } = useValues(playerSettingsLogic)\n\n    const { filters } = useValues(sessionRecordingsPlaylistLogic)\n    const { recordingPropertiesById, recordingPropertiesLoading } = useValues(sessionRecordingsListPropertiesLogic)\n\n    const recordingProperties = recordingPropertiesById[recording.id]\n    const loading = !recordingProperties && recordingPropertiesLoading\n    const iconProperties = gatherIconProperties(recordingProperties, recording)\n\n    const iconClassNames = 'text-secondary shrink-0'\n\n    return (\n        <DraggableToNotebook href={urls.replaySingle(recording.id)}>\n            <div\n                key={recording.id}\n                className={clsx(\n                    'SessionRecordingPreview flex overflow-hidden cursor-pointer py-0.5 px-1 text-xs',\n                    isActive && 'SessionRecordingPreview--active'\n                )}\n                onClick={() => onClick?.()}\n            >\n                <div className=\"grow overflow-hidden space-y-1\">\n                    <div className=\"flex items-center justify-between space-x-0.5\">\n                        <div className=\"flex overflow-hidden font-medium text-link ph-no-capture\">\n                            <span className=\"truncate\">{asDisplay(recording.person)}</span>\n                        </div>\n\n                        {playlistTimestampFormat === TimestampFormat.Relative ? (\n                            <TZLabel\n                                className=\"overflow-hidden text-ellipsis text-xs text-secondary shrink-0\"\n                                time={recording.start_time}\n                                placement=\"right\"\n                            />\n                        ) : (\n                            <SimpleTimeLabel\n                                startTime={recording.start_time}\n                                timestampFormat={playlistTimestampFormat}\n                            />\n                        )}\n                    </div>\n\n                    <div className=\"flex justify-between items-center space-x-0.5\">\n                        <div className=\"flex space-x-2 text-secondary text-sm\">\n                            <PropertyIcons\n                                recordingProperties={iconProperties}\n                                iconClassNames={iconClassNames}\n                                loading={loading}\n                            />\n\n                            <div className=\"flex gap-1\">\n                                <Tooltip className=\"flex items-center\" title=\"Clicks\">\n                                    <span className=\"space-x-0.5\">\n                                        <IconCursorClick className={iconClassNames} />\n                                        <span>{recording.click_count}</span>\n                                    </span>\n                                </Tooltip>\n                                <Tooltip className=\"flex items-center\" title=\"Key presses\">\n                                    <span className=\"space-x-0.5\">\n                                        <IconKeyboard className={iconClassNames} />\n                                        <span>{recording.keypress_count}</span>\n                                    </span>\n                                </Tooltip>\n                            </div>\n                        </div>\n\n                        {filters.order === 'console_error_count' ? (\n                            <ErrorCount iconClassNames={iconClassNames} errorCount={recording.console_error_count} />\n                        ) : (\n                            <RecordingDuration\n                                recordingDuration={durationToShow(\n                                    recording,\n                                    filters.order || DEFAULT_RECORDING_FILTERS_ORDER_BY\n                                )}\n                            />\n                        )}\n                    </div>\n\n                    <FirstURL startUrl={recording.start_url} />\n                </div>\n\n                <div\n                    className={clsx(\n                        'min-w-6 flex flex-col space-x-0.5 items-center',\n                        // need different margin if the first item is an icon\n                        recording.ongoing || pinned ? 'mt-1' : 'mt-2'\n                    )}\n                >\n                    {recording.ongoing ? <RecordingOngoingIndicator /> : null}\n                    {pinned ? <PinnedIndicator /> : null}\n                    {!recording.viewed ? <UnwatchedIndicator /> : null}\n                </div>\n            </div>\n        </DraggableToNotebook>\n    )\n}\n\nexport function SessionRecordingPreviewSkeleton(): JSX.Element {\n    return (\n        <div className=\"p-4 space-y-2\">\n            <LemonSkeleton className=\"w-1/2 h-4\" />\n            <LemonSkeleton className=\"w-1/3 h-4\" />\n        </div>\n    )\n}\n", "import { IconEllipsis } from '@posthog/icons'\nimport { IconClock, IconSort } from '@posthog/icons'\nimport { useActions, useValues } from 'kea'\nimport { SettingsBar, SettingsMenu, SettingsToggle } from 'scenes/session-recordings/components/PanelSettings'\nimport { TimestampFormatToLabel } from 'scenes/session-recordings/utils'\n\nimport { RecordingUniversalFilters } from '~/types'\n\nimport { PlaybackMode, playerSettingsLogic, TimestampFormat } from '../player/playerSettingsLogic'\n\nconst SortingKeyToLabel = {\n    start_time: 'Latest',\n    activity_score: 'Activity',\n    console_error_count: 'Errors',\n    duration: 'Total duration',\n    active_seconds: 'Activity',\n    inactive_seconds: 'Inactivity',\n    click_count: 'Clicks',\n    keypress_count: 'Keystrokes',\n    mouse_activity_count: 'Mouse activity',\n}\n\nfunction SortedBy({\n    filters,\n    setFilters,\n}: {\n    filters: RecordingUniversalFilters\n    setFilters: (filters: Partial<RecordingUniversalFilters>) => void\n}): JSX.Element {\n    return (\n        <SettingsMenu\n            highlightWhenActive={false}\n            items={[\n                {\n                    label: SortingKeyToLabel['start_time'],\n                    onClick: () => setFilters({ order: 'start_time' }),\n                    active: filters.order === 'start_time',\n                },\n                {\n                    label: SortingKeyToLabel['activity_score'],\n                    onClick: () => setFilters({ order: 'activity_score' }),\n                    active: filters.order === 'activity_score',\n                },\n                {\n                    label: SortingKeyToLabel['console_error_count'],\n                    onClick: () => setFilters({ order: 'console_error_count' }),\n                    active: filters.order === 'console_error_count',\n                },\n                {\n                    label: 'Longest',\n                    items: [\n                        {\n                            label: SortingKeyToLabel['duration'],\n                            onClick: () => setFilters({ order: 'duration' }),\n                            active: filters.order === 'duration',\n                        },\n                        {\n                            label: SortingKeyToLabel['active_seconds'],\n                            onClick: () => setFilters({ order: 'active_seconds' }),\n                            active: filters.order === 'active_seconds',\n                        },\n                        {\n                            label: SortingKeyToLabel['inactive_seconds'],\n                            onClick: () => setFilters({ order: 'inactive_seconds' }),\n                            active: filters.order === 'inactive_seconds',\n                        },\n                    ],\n                },\n                {\n                    label: 'Most active',\n                    items: [\n                        {\n                            label: SortingKeyToLabel['click_count'],\n                            onClick: () => setFilters({ order: 'click_count' }),\n                            active: filters.order === 'click_count',\n                        },\n                        {\n                            label: SortingKeyToLabel['keypress_count'],\n                            onClick: () => setFilters({ order: 'keypress_count' }),\n                            active: filters.order === 'keypress_count',\n                        },\n                        {\n                            label: SortingKeyToLabel['mouse_activity_count'],\n                            onClick: () => setFilters({ order: 'mouse_activity_count' }),\n                            active: filters.order === 'mouse_activity_count',\n                        },\n                    ],\n                },\n            ]}\n            icon={<IconSort className=\"text-lg\" />}\n            label={SortingKeyToLabel[filters.order || 'start_time']}\n        />\n    )\n}\n\nexport function SessionRecordingPlaylistBottomSettings(): JSX.Element {\n    const { hideViewedRecordings, playlistTimestampFormat } = useValues(playerSettingsLogic)\n    const { setHideViewedRecordings, setPlaylistTimestampFormat } = useActions(playerSettingsLogic)\n    return (\n        <SettingsBar border=\"top\">\n            <SettingsToggle\n                active={hideViewedRecordings}\n                title=\"Hide viewed recordings\"\n                label=\"Hide viewed recordings\"\n                onClick={() => setHideViewedRecordings(!hideViewedRecordings)}\n            />\n            <SettingsMenu\n                highlightWhenActive={false}\n                items={[\n                    {\n                        label: 'UTC',\n                        onClick: () => setPlaylistTimestampFormat(TimestampFormat.UTC),\n                        active: playlistTimestampFormat === TimestampFormat.UTC,\n                    },\n                    {\n                        label: 'Device',\n                        onClick: () => setPlaylistTimestampFormat(TimestampFormat.Device),\n                        active: playlistTimestampFormat === TimestampFormat.Device,\n                    },\n                    {\n                        label: 'Relative',\n                        onClick: () => setPlaylistTimestampFormat(TimestampFormat.Relative),\n                        active: playlistTimestampFormat === TimestampFormat.Relative,\n                    },\n                ]}\n                icon={<IconClock />}\n                label={TimestampFormatToLabel[playlistTimestampFormat]}\n            />\n        </SettingsBar>\n    )\n}\n\nexport function SessionRecordingsPlaylistTopSettings({\n    filters,\n    setFilters,\n}: {\n    filters?: RecordingUniversalFilters\n    setFilters?: (filters: Partial<RecordingUniversalFilters>) => void\n}): JSX.Element {\n    const { autoplayDirection, playbackMode } = useValues(playerSettingsLogic)\n    const { setAutoplayDirection, setPlaybackMode } = useActions(playerSettingsLogic)\n\n    return (\n        <SettingsBar border=\"none\" className=\"justify-between\">\n            {filters && setFilters ? (\n                <span className=\"text-xs font-normal inline-flex items-center ml-2\">\n                    Sort by: <SortedBy filters={filters} setFilters={setFilters} />\n                </span>\n            ) : null}\n            <SettingsMenu\n                items={[\n                    {\n                        label: 'Autoplay',\n                        items: [\n                            {\n                                label: 'Off',\n                                onClick: () => setAutoplayDirection(null),\n                                active: !autoplayDirection,\n                            },\n                            {\n                                label: 'Newer recordings',\n                                onClick: () => setAutoplayDirection('newer'),\n                                active: autoplayDirection === 'newer',\n                            },\n                            {\n                                label: 'Older recordings',\n                                onClick: () => setAutoplayDirection('older'),\n                                active: autoplayDirection === 'older',\n                            },\n                        ],\n                    },\n                    {\n                        label: 'Playback mode',\n                        items: [\n                            {\n                                label: 'Recordings',\n                                onClick: () => setPlaybackMode(PlaybackMode.Recording),\n                                active: playbackMode === PlaybackMode.Recording,\n                            },\n                            {\n                                label: 'Waterfall',\n                                onClick: () => setPlaybackMode(PlaybackMode.Waterfall),\n                                active: playbackMode === PlaybackMode.Waterfall,\n                            },\n                        ],\n                    },\n                ]}\n                icon={<IconEllipsis className=\"rotate-90\" />}\n            />\n        </SettingsBar>\n    )\n}\n", "import { LemonDivider, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\n\nimport { playerSettingsLogic } from '../player/playerSettingsLogic'\nimport { sessionRecordingsPlaylistLogic } from './sessionRecordingsPlaylistLogic'\n\nexport const SessionRecordingsPlaylistTroubleshooting = (): JSX.Element => {\n    const { hideViewedRecordings } = useValues(playerSettingsLogic)\n    const { setHideViewedRecordings } = useActions(playerSettingsLogic)\n    const { otherRecordings } = useValues(sessionRecordingsPlaylistLogic)\n    const { setShowSettings } = useActions(sessionRecordingsPlaylistLogic)\n\n    return (\n        <>\n            <h3 className=\"title align-center text-secondary mb-0\">No matching recordings</h3>\n            <div className=\"flex flex-col space-y-2\">\n                <p className=\"text-secondary description m-0\">\n                    Recordings may not be found for a variety of reasons including:\n                </p>\n\n                <ul className=\"space-y-1\">\n                    <h5>All recording sources:</h5>\n                    {otherRecordings.length > 0 && hideViewedRecordings && (\n                        <li>\n                            Viewed recordings hidden.{' '}\n                            <Link\n                                onClick={() => {\n                                    setShowSettings(true)\n                                    setHideViewedRecordings(false)\n                                }}\n                            >\n                                Toggle option\n                            </Link>\n                        </li>\n                    )}\n                    <li>\n                        <Link to=\"https://posthog.com/docs/session-replay/data-retention\" target=\"_blank\">\n                            They are outside the retention period\n                        </Link>\n                    </li>\n                    <LemonDivider dashed={true} />\n                    <h5>Web recordings</h5>\n                    <li>\n                        <Link\n                            to=\"https://posthog.com/docs/session-replay/troubleshooting#4-adtracking-blockers\"\n                            target=\"_blank\"\n                        >\n                            An ad blocker prevented recording\n                        </Link>\n                    </li>\n                    <li>\n                        <Link\n                            to=\"https://posthog.com/docs/session-replay/troubleshooting#1-authorized-domains-for-recordings\"\n                            target=\"_blank\"\n                        >\n                            Your domain is not authorized\n                        </Link>\n                    </li>\n                </ul>\n            </div>\n        </>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "TIMEOUT_LIMIT", "aiFilterLogic", "messages", "input", "isLoading", "newMessages", "_", "actions", "values", "props", "Co", "timeoutPromise", "reject", "contentPromise", "api_default", "content", "import_jsx_runtime", "AiFilterInput", "mountedLogic", "sessionRecordingsPlaylistLogic", "setFilters", "resetFilters", "filterLogic", "aiFilterLogic", "messages", "input", "isLoading", "setInput", "handleSend", "handleReset", "dataProcessingAccepted", "maxGlobalLogic", "LemonTextArea", "value", "AIConsentPopoverWrapper", "offset", "LemonButton", "IconArrowRight", "IconRewind", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "AiFilterIntro", "FilmCameraHog", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "AiFilterSuggestions", "filterLogic", "aiFilterLogic", "setInput", "suggestion", "LemonButton", "IconArrowUpRight", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "AiFilterThread", "mountedLogic", "sessionRecordingsPlaylistLogic", "setFilters", "resetFilters", "filterLogic", "aiFilterLogic", "messages", "isLoading", "user", "userLogic", "message", "index", "Tooltip", "ProfilePicture", "LemonMarkdown", "Spinner", "import_jsx_runtime", "AiFilter", "isExpanded", "mountedLogic", "sessionRecordingsPlaylistLogic", "setFilters", "resetFilters", "filterLogic", "aiFilterLogic", "messages", "AiFilterIntro", "AiFilterThread", "AiFilterInput", "AiFilterSuggestions", "init_dirname", "init_buffer", "init_process", "import_kea", "playlistLogic", "isExpanded", "_", "import_jsx_runtime", "SCROLL_TRIGGER_OFFSET", "Playlist", "title", "notebooksHref", "loading", "embedded", "propsActiveItemId", "content", "sections", "headerActions", "footerActions", "filterActions", "onScrollListEdge", "listEmptyState", "selectInitialItem", "onSelect", "onChangeSections", "dataAttr", "firstItem", "s", "controlledActiveItemId", "setControlledActiveItemId", "playlistListRef", "playlistRef", "size", "useResizeBreakpoints", "isExpanded", "playlistLogic", "setIsExpanded", "onChangeActiveItem", "item", "initiallyOpenSections", "openSections", "setOpenSections", "onChangeOpenSections", "activeKeys", "activeItemId", "activeItem", "i", "lastScrollPositionRef", "contentRef", "handleScroll", "e", "scrollPosition", "sectionCount", "itemsCount", "clsx", "LemonButton", "IconX", "Co", "AiFilter", "DraggableToNotebook", "TitleWithCount", "LemonTableLoader", "LemonCollapse", "SectionContent", "LoadingState", "count", "Tooltip", "section", "setActiveItemId", "emptyState", "ListSection", "items", "render", "footer", "onClick", "range", "LemonSkeleton", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_react", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "DurationTypeSelect", "onChange", "value", "onChangeEventDescription", "LemonSelect", "v", "Co", "import_jsx_runtime", "durationTypeMapping", "humanFriendlyDurationFilter", "recordingDurationFilter", "durationTypeFilter", "operator", "duration", "convertSecondsToDuration", "durationDescription", "unit", "DurationFilter", "onChange", "size", "type", "isOpen", "setIsOpen", "durationString", "Popover", "OperatorSelect", "newOperator", "DurationPicker", "newValue", "DurationTypeSelect", "LemonButton", "import_jsx_runtime", "RecordingsUniversalFilters", "filters", "setFilters", "resetFilters", "totalFiltersCount", "className", "allowReplayHogQLFilters", "allowReplayFlagsFilters", "cohortsModel", "actionsModel", "durationFilter", "isFiltersExpanded", "setIsFiltersExpanded", "isExpanded", "playlistLogic", "setIsExpanded", "taxonomicGroupTypes", "IconMaxFromHedgehogConfig", "user", "userLogic", "ProfilePicture", "LemonButton", "IconFilter", "IconChevronDown", "LemonBadge", "FlaggedFeature", "FEATURE_FLAGS", "Co", "clsx", "AndOrFilterSelect", "type", "values", "DateFilter", "changedDateFrom", "changedDateTo", "DurationFilter", "newRecordingDurationFilter", "newDurationType", "TestAccountFilter", "testFilters", "UniversalFilters_default", "filterGroup", "RecordingsUniversalFilterGroup", "IconRevert", "size", "universalFiltersLogic", "replaceGroupValue", "removeGroupValue", "allowInitiallyOpen", "setAllowInitiallyOpen", "filterOrGroup", "index", "isUniversalGroupFilterLike", "value", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_jsx_runtime", "RecordingDuration", "recordingDuration", "formattedDuration", "colonDelimitedDuration", "hours", "minutes", "seconds", "ErrorCount", "iconClassNames", "errorCount", "IconBug", "browserIconPropertyKeys", "mobileIconPropertyKeys", "gatherIconProperties", "recordingProperties", "recording", "iconProperties", "deviceType", "property", "value", "label", "countryTitleFrom", "PropertyIcons", "loading", "LemonSkeleton", "Tooltip", "PropertyIcon", "FirstURL", "props", "firstPath", "PinnedIndicator", "featureFlags", "featureFlagLogic", "description", "FEATURE_FLAGS", "IconPinFilled", "RecordingOngoingIndicator", "IconLive", "UnwatchedIndicator", "durationToShow", "order", "SessionRecordingPreview", "isActive", "onClick", "pinned", "playlistTimestampFormat", "playerSettingsLogic", "filters", "sessionRecordingsPlaylistLogic", "recordingPropertiesById", "recordingPropertiesLoading", "sessionRecordingsListPropertiesLogic", "DraggableToNotebook", "urls", "clsx", "asDisplay", "TZLabel", "SimpleTimeLabel", "IconCursorClick", "IconKeyboard", "DEFAULT_RECORDING_FILTERS_ORDER_BY", "SessionRecordingPreviewSkeleton", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "SortingKeyToLabel", "SortedBy", "filters", "setFilters", "SettingsMenu", "IconSort", "SessionRecordingPlaylistBottomSettings", "hideViewedRecordings", "playlistTimestampFormat", "playerSettingsLogic", "setHideViewedRecordings", "setPlaylistTimestampFormat", "SettingsBar", "SettingsToggle", "IconClock", "TimestampFormatToLabel", "SessionRecordingsPlaylistTopSettings", "autoplayDirection", "playbackMode", "setAutoplayDirection", "setPlaybackMode", "IconEllipsis", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "SessionRecordingsPlaylistTroubleshooting", "hideViewedRecordings", "playerSettingsLogic", "setHideViewedRecordings", "otherRecordings", "sessionRecordingsPlaylistLogic", "setShowSettings", "Link", "LemonDivider", "import_jsx_runtime", "SessionRecordingsPlaylist", "showContent", "props", "logicProps", "logic", "sessionRecordingsPlaylistLogic", "filters", "pinnedRecordings", "matchingEventsMatchType", "sessionRecordingsResponseLoading", "otherRecordings", "activeSessionRecordingId", "hasNext", "allowFlagsFilters", "allowHogQLFilters", "totalFiltersCount", "maybeLoadSessionRecordings", "setSelectedRecordingId", "setFilters", "resetFilters", "featureFlags", "featureFlagLogic", "pinnedDescription", "FEATURE_FLAGS", "notebookNode", "useNotebookNode", "sections", "LemonBadge", "item", "isActive", "SessionRecordingPreview", "Spinner", "LemonButton", "Playlist", "urls", "SessionRecordingsPlaylistTopSettings", "SessionRecordingPlaylistBottomSettings", "RecordingsUniversalFilters", "edge", "ListEmptyState", "activeItem", "SessionRecordingPlayer", "x", "pinned", "EmptyMessage", "sessionRecordingsAPIErrored", "unusableEventsInFilter", "LemonBanner", "UnusableEventsWarning", "DEFAULT_RECORDING_FILTERS", "SessionRecordingsPlaylistTroubleshooting", "event", "PropertyKeyInfo", "Link"]
}
