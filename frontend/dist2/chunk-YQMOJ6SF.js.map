{
  "version": 3,
  "sources": ["../src/scenes/groups/Group.tsx", "../src/scenes/groups/GroupDashboard.tsx", "../src/scenes/groups/groupDashboardLogic.ts", "../src/scenes/groups/groupLogic.ts", "../src/scenes/groups/RelatedGroups.tsx", "../src/scenes/groups/relatedGroupsLogic.ts", "../src/scenes/persons/RelatedFeatureFlags.tsx", "../src/scenes/persons/relatedFeatureFlagsLogic.ts"],
  "sourcesContent": ["import { useActions, useValues } from 'kea'\nimport { router } from 'kea-router'\nimport { CopyToClipboardInline } from 'lib/components/CopyToClipboard'\nimport { NotFound } from 'lib/components/NotFound'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { PropertiesTable } from 'lib/components/PropertiesTable'\nimport { TZLabel } from 'lib/components/TZLabel'\nimport { isEventFilter } from 'lib/components/UniversalFilters/utils'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { LemonTabs } from 'lib/lemon-ui/LemonTabs'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { Spinner, SpinnerOverlay } from 'lib/lemon-ui/Spinner/Spinner'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { GroupDashboard } from 'scenes/groups/GroupDashboard'\nimport { groupLogic, GroupLogicProps } from 'scenes/groups/groupLogic'\nimport { RelatedGroups } from 'scenes/groups/RelatedGroups'\nimport { NotebookSelectButton } from 'scenes/notebooks/NotebookSelectButton/NotebookSelectButton'\nimport { RelatedFeatureFlags } from 'scenes/persons/RelatedFeatureFlags'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { SessionRecordingsPlaylist } from 'scenes/session-recordings/playlist/SessionRecordingsPlaylist'\nimport { filtersFromUniversalFilterGroups } from 'scenes/session-recordings/utils'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { urls } from 'scenes/urls'\n\nimport { Query } from '~/queries/Query/Query'\nimport {\n    ActionFilter,\n    FilterLogicalOperator,\n    Group as IGroup,\n    NotebookNodeType,\n    PersonsTabType,\n    PropertyDefinitionType,\n    PropertyFilterType,\n    PropertyOperator,\n} from '~/types'\n\ninterface GroupSceneProps {\n    groupTypeIndex?: string\n    groupKey?: string\n}\n\nexport const scene: SceneExport = {\n    component: Group,\n    logic: groupLogic,\n    paramsToProps: ({ params: { groupTypeIndex, groupKey } }: { params: GroupSceneProps }): GroupLogicProps => ({\n        groupTypeIndex: parseInt(groupTypeIndex ?? '0'),\n        groupKey: decodeURIComponent(groupKey ?? ''),\n    }),\n}\n\nexport function GroupCaption({ groupData, groupTypeName }: { groupData: IGroup; groupTypeName: string }): JSX.Element {\n    return (\n        <div className=\"flex items-center flex-wrap\">\n            <div className=\"mr-4\">\n                <span className=\"text-secondary\">Type:</span> {groupTypeName}\n            </div>\n            <div className=\"mr-4\">\n                <span className=\"text-secondary\">Key:</span>{' '}\n                <CopyToClipboardInline\n                    tooltipMessage={null}\n                    description=\"group key\"\n                    style={{ display: 'inline-flex', justifyContent: 'flex-end' }}\n                >\n                    {groupData.group_key}\n                </CopyToClipboardInline>\n            </div>\n            <div>\n                <span className=\"text-secondary\">First seen:</span>{' '}\n                {groupData.created_at ? <TZLabel time={groupData.created_at} /> : 'unknown'}\n            </div>\n        </div>\n    )\n}\n\nexport function Group(): JSX.Element {\n    const {\n        logicProps,\n        groupData,\n        groupDataLoading,\n        groupTypeName,\n        groupType,\n        groupTab,\n        groupEventsQuery,\n        showCustomerSuccessDashboards,\n    } = useValues(groupLogic)\n    const { groupKey, groupTypeIndex } = logicProps\n    const { setGroupEventsQuery } = useActions(groupLogic)\n    const { currentTeam } = useValues(teamLogic)\n    const { featureFlags } = useValues(featureFlagLogic)\n\n    if (!groupData || !groupType) {\n        return groupDataLoading ? <SpinnerOverlay sceneLevel /> : <NotFound object=\"group\" />\n    }\n\n    const settingLevel = featureFlags[FEATURE_FLAGS.ENVIRONMENTS] ? 'environment' : 'project'\n\n    return (\n        <>\n            <PageHeader\n                caption={<GroupCaption groupData={groupData} groupTypeName={groupTypeName} />}\n                buttons={\n                    <NotebookSelectButton\n                        type=\"secondary\"\n                        resource={{\n                            type: NotebookNodeType.Group,\n                            attrs: {\n                                id: groupKey,\n                                groupTypeIndex: groupTypeIndex,\n                            },\n                        }}\n                    />\n                }\n            />\n            <LemonTabs\n                activeKey={groupTab ?? PersonsTabType.PROPERTIES}\n                onChange={(tab) => router.actions.push(urls.group(String(groupTypeIndex), groupKey, true, tab))}\n                tabs={[\n                    {\n                        key: PersonsTabType.PROPERTIES,\n                        label: <span data-attr=\"groups-properties-tab\">Properties</span>,\n                        content: (\n                            <PropertiesTable\n                                type={PropertyDefinitionType.Group}\n                                properties={groupData.group_properties || {}}\n                                embedded={false}\n                                searchable\n                            />\n                        ),\n                    },\n                    {\n                        key: PersonsTabType.EVENTS,\n                        label: <span data-attr=\"groups-events-tab\">Events</span>,\n                        content: groupEventsQuery ? (\n                            <Query\n                                query={groupEventsQuery}\n                                setQuery={setGroupEventsQuery}\n                                context={{ alwaysRefresh: true }}\n                            />\n                        ) : (\n                            <Spinner />\n                        ),\n                    },\n                    {\n                        key: PersonsTabType.SESSION_RECORDINGS,\n                        label: <span data-attr=\"group-session-recordings-tab\">Recordings</span>,\n                        content: (\n                            <>\n                                {!currentTeam?.session_recording_opt_in ? (\n                                    <div className=\"mb-4\">\n                                        <LemonBanner type=\"info\">\n                                            Session recordings are currently disabled for this {settingLevel}. To use\n                                            this feature, please go to your{' '}\n                                            <Link to={`${urls.settings('project')}#recordings`}>project settings</Link>{' '}\n                                            and enable it.\n                                        </LemonBanner>\n                                    </div>\n                                ) : (\n                                    <div className=\"SessionRecordingPlaylistHeightWrapper\">\n                                        <SessionRecordingsPlaylist\n                                            logicKey={`groups-recordings-${groupKey}-${groupTypeIndex}`}\n                                            updateSearchParams\n                                            filters={{\n                                                duration: [\n                                                    {\n                                                        type: PropertyFilterType.Recording,\n                                                        key: 'duration',\n                                                        value: 1,\n                                                        operator: PropertyOperator.GreaterThan,\n                                                    },\n                                                ],\n                                                filter_group: {\n                                                    type: FilterLogicalOperator.And,\n                                                    values: [\n                                                        {\n                                                            type: FilterLogicalOperator.And,\n                                                            values: [\n                                                                {\n                                                                    type: 'events',\n                                                                    name: 'All events',\n                                                                    properties: [\n                                                                        {\n                                                                            key: `$group_${groupTypeIndex} = '${groupKey}'`,\n                                                                            type: 'hogql',\n                                                                        },\n                                                                    ],\n                                                                } as ActionFilter,\n                                                            ],\n                                                        },\n                                                    ],\n                                                },\n                                            }}\n                                            onFiltersChange={(filters) => {\n                                                const eventFilters =\n                                                    filtersFromUniversalFilterGroups(filters).filter(isEventFilter)\n\n                                                const stillHasGroupFilter = eventFilters?.some((event) => {\n                                                    return event.properties?.some(\n                                                        (prop: Record<string, any>) =>\n                                                            prop.key === `$group_${groupTypeIndex} = '${groupKey}'`\n                                                    )\n                                                })\n                                                if (!stillHasGroupFilter) {\n                                                    lemonToast.warning(\n                                                        'Group filter removed. Please add it back to see recordings for this group.'\n                                                    )\n                                                }\n                                            }}\n                                        />\n                                    </div>\n                                )}\n                            </>\n                        ),\n                    },\n                    {\n                        key: PersonsTabType.RELATED,\n                        label: (\n                            <div className=\"flex items-center\" data-attr=\"group-related-tab\">\n                                Related people & groups\n                            </div>\n                        ),\n                        tooltip: `People and groups that have shared events with this ${groupTypeName} in the last 90 days.`,\n                        content: <RelatedGroups id={groupKey} groupTypeIndex={groupTypeIndex} />,\n                    },\n                    {\n                        key: PersonsTabType.FEATURE_FLAGS,\n                        label: <span data-attr=\"groups-related-flags-tab\">Feature flags</span>,\n                        tooltip: `Only shows feature flags with targeting conditions based on ${groupTypeName} properties.`,\n                        content: (\n                            <RelatedFeatureFlags\n                                distinctId={groupData.group_key}\n                                groupTypeIndex={groupTypeIndex}\n                                groups={{ [groupType]: groupKey }}\n                            />\n                        ),\n                    },\n                    showCustomerSuccessDashboards\n                        ? {\n                              key: PersonsTabType.DASHBOARD,\n                              label: 'Dashboard',\n                              content: <GroupDashboard groupData={groupData} />,\n                          }\n                        : null,\n                ]}\n            />\n        </>\n    )\n}\n", "import { LemonButton } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { SceneDashboardChoiceModal } from 'lib/components/SceneDashboardChoice/SceneDashboardChoiceModal'\nimport { sceneDashboardChoiceModalLogic } from 'lib/components/SceneDashboardChoice/sceneDashboardChoiceModalLogic'\nimport { SceneDashboardChoiceRequired } from 'lib/components/SceneDashboardChoice/SceneDashboardChoiceRequired'\nimport { useEffect } from 'react'\nimport { Dashboard } from 'scenes/dashboard/Dashboard'\nimport { dashboardLogic, DashboardLogicProps } from 'scenes/dashboard/dashboardLogic'\nimport { groupDashboardLogic } from 'scenes/groups/groupDashboardLogic'\nimport { Scene } from 'scenes/sceneTypes'\n\nimport { Group, GroupPropertyFilter, PropertyFilterType, PropertyOperator } from '~/types'\n\nexport function GroupDashboard({ groupData }: { groupData: Group }): JSX.Element {\n    const { showSceneDashboardChoiceModal } = useActions(sceneDashboardChoiceModalLogic({ scene: Scene.Group }))\n    const { dashboardLogicProps } = useValues(groupDashboardLogic)\n\n    return (\n        <>\n            {dashboardLogicProps?.id !== undefined ? (\n                <GroupDashboardExisting groupData={groupData} dashboardLogicProps={dashboardLogicProps} />\n            ) : (\n                <SceneDashboardChoiceRequired\n                    open={() => {\n                        showSceneDashboardChoiceModal()\n                    }}\n                    scene={Scene.Group}\n                />\n            )}\n            <SceneDashboardChoiceModal scene={Scene.Group} />\n        </>\n    )\n}\n\nfunction GroupDashboardExisting({\n    groupData,\n    dashboardLogicProps,\n}: {\n    groupData: Group\n    dashboardLogicProps: DashboardLogicProps\n}): JSX.Element {\n    const { showSceneDashboardChoiceModal } = useActions(sceneDashboardChoiceModalLogic({ scene: Scene.Group }))\n    const { dashboard } = useValues(dashboardLogic(dashboardLogicProps))\n    const { setProperties } = useActions(dashboardLogic(dashboardLogicProps))\n\n    useEffect(() => {\n        if (dashboard && groupData) {\n            // `dashboard?.filters.properties` is typed as `any` but it's a list...\n            const current = Array.isArray(dashboard?.filters.properties) ? dashboard?.filters.properties : []\n\n            // TODO need to be able to handle groups that don't have an ID key\n            const desired: GroupPropertyFilter = {\n                key: 'id',\n                value: [groupData.group_properties.id.toString()],\n                operator: PropertyOperator.Exact,\n                type: PropertyFilterType.Group,\n                group_type_index: groupData.group_type_index,\n            }\n\n            const hasFilter = current.some(\n                (item) =>\n                    item.type === PropertyFilterType.Group &&\n                    item.group_type_index === groupData.group_type_index &&\n                    item.key === 'id'\n            )\n            if (!hasFilter) {\n                setProperties([...current, desired])\n            }\n        }\n    }, [dashboard, groupData])\n\n    return (\n        <>\n            <div className=\"flex items-center justify-end mb-2\">\n                <LemonButton\n                    type=\"secondary\"\n                    size=\"small\"\n                    data-attr=\"group-dashboard-change-dashboard\"\n                    onClick={showSceneDashboardChoiceModal}\n                >\n                    Change dashboard\n                </LemonButton>\n            </div>\n            <Dashboard id={dashboardLogicProps.id.toString()} placement={dashboardLogicProps.placement} />\n        </>\n    )\n}\n", "import { connect, kea, path, selectors } from 'kea'\nimport { DashboardLogicProps } from 'scenes/dashboard/dashboardLogic'\nimport { Scene } from 'scenes/sceneTypes'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { DashboardPlacement } from '~/types'\n\nimport type { groupDashboardLogicType } from './groupDashboardLogicType'\n\nexport const groupDashboardLogic = kea<groupDashboardLogicType>([\n    path(['scenes', 'groups', 'groupDashboardLogic']),\n    connect({\n        values: [userLogic, ['user']],\n    }),\n    selectors(() => ({\n        groupDashboardId: [\n            (s) => [s.user],\n            (user) => {\n                const currentDashboard = user?.scene_personalisation?.find(\n                    (choice) => choice.scene === Scene.Group\n                )?.dashboard\n                return typeof currentDashboard === 'number' ? currentDashboard : currentDashboard?.id\n            },\n        ],\n        dashboardLogicProps: [\n            (s) => [s.groupDashboardId],\n            (groupDashboardId): DashboardLogicProps | null =>\n                groupDashboardId\n                    ? {\n                          id: groupDashboardId,\n                          placement: DashboardPlacement.Group,\n                      }\n                    : null,\n        ],\n    })),\n])\n", "import { actions, afterMount, connect, kea, key, path, props, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport { urlToAction } from 'kea-router'\nimport api from 'lib/api'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { toParams } from 'lib/utils'\nimport { capitalizeFirstLetter } from 'lib/utils'\nimport { groupDisplayId } from 'scenes/persons/GroupActorDisplay'\nimport { projectLogic } from 'scenes/projectLogic'\nimport { Scene } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { groupsModel } from '~/models/groupsModel'\nimport { defaultDataTableColumns } from '~/queries/nodes/DataTable/utils'\nimport { DataTableNode, Node, NodeKind } from '~/queries/schema/schema-general'\nimport { isDataTableNode } from '~/queries/utils'\nimport { Breadcrumb, Group, GroupTypeIndex, PropertyFilterType, PropertyOperator } from '~/types'\n\nimport type { groupLogicType } from './groupLogicType'\n\nfunction getGroupEventsQuery(groupTypeIndex: number, groupKey: string): DataTableNode {\n    return {\n        kind: NodeKind.DataTableNode,\n        full: true,\n        source: {\n            kind: NodeKind.EventsQuery,\n            select: defaultDataTableColumns(NodeKind.EventsQuery),\n            after: '-24h',\n            fixedProperties: [\n                {\n                    key: `$group_${groupTypeIndex}`,\n                    value: groupKey,\n                    type: PropertyFilterType.Event,\n                    operator: PropertyOperator.Exact,\n                },\n            ],\n        },\n    }\n}\n\nexport type GroupLogicProps = {\n    groupTypeIndex: number\n    groupKey: string\n}\n\nexport const groupLogic = kea<groupLogicType>([\n    props({} as GroupLogicProps),\n    key((props) => `${props.groupTypeIndex}-${props.groupKey}`),\n    path((key) => ['scenes', 'groups', 'groupLogic', key]),\n    connect({\n        values: [\n            projectLogic,\n            ['currentProjectId'],\n            groupsModel,\n            ['groupTypes', 'aggregationLabel'],\n            featureFlagLogic,\n            ['featureFlags'],\n        ],\n    }),\n    actions(() => ({\n        setGroupTab: (groupTab: string | null) => ({ groupTab }),\n        setGroupEventsQuery: (query: Node) => ({ query }),\n    })),\n    loaders(({ values, props }) => ({\n        groupData: [\n            null as Group | null,\n            {\n                loadGroup: async () => {\n                    const params = { group_type_index: props.groupTypeIndex, group_key: props.groupKey }\n                    const url = `api/projects/${values.currentProjectId}/groups/find?${toParams(params)}`\n                    return await api.get(url)\n                },\n            },\n        ],\n    })),\n    reducers({\n        groupTab: [\n            null as string | null,\n            {\n                setGroupTab: (_, { groupTab }) => groupTab,\n            },\n        ],\n        groupEventsQuery: [\n            null as DataTableNode | null,\n            {\n                setGroupEventsQuery: (_, { query }) => (isDataTableNode(query) ? query : null),\n            },\n        ],\n    }),\n    selectors({\n        logicProps: [() => [(_, props) => props], (props): GroupLogicProps => props],\n\n        showCustomerSuccessDashboards: [\n            (s) => [s.featureFlags],\n            (featureFlags) => featureFlags[FEATURE_FLAGS.CS_DASHBOARDS],\n        ],\n        groupTypeName: [\n            (s, p) => [s.aggregationLabel, p.groupTypeIndex],\n            (aggregationLabel, index): string => aggregationLabel(index).singular,\n        ],\n        groupType: [\n            (s, p) => [s.groupTypes, p.groupTypeIndex],\n            (groupTypes, index): string | null => groupTypes.get(index as GroupTypeIndex)?.group_type ?? null,\n        ],\n        breadcrumbs: [\n            (s, p) => [s.groupTypeName, p.groupTypeIndex, p.groupKey, s.groupData],\n            (groupTypeName, groupTypeIndex, groupKey, groupData): Breadcrumb[] => [\n                {\n                    key: Scene.DataManagement,\n                    name: 'People',\n                    path: urls.persons(),\n                },\n                {\n                    key: groupTypeIndex,\n                    name: capitalizeFirstLetter(groupTypeName),\n                    path: urls.groups(String(groupTypeIndex)),\n                },\n                {\n                    key: [Scene.Group, `${groupTypeIndex}-${groupKey}`],\n                    name: groupDisplayId(groupKey, groupData?.group_properties || {}),\n                    path: urls.group(String(groupTypeIndex), groupKey),\n                },\n            ],\n        ],\n    }),\n    urlToAction(({ actions }) => ({\n        '/groups/:groupTypeIndex/:groupKey(/:groupTab)': ({ groupTab }) => {\n            actions.setGroupTab(groupTab || null)\n        },\n    })),\n\n    afterMount(({ actions, props }) => {\n        actions.loadGroup()\n        actions.setGroupEventsQuery(getGroupEventsQuery(props.groupTypeIndex, props.groupKey))\n    }),\n])\n", "import { IconPerson } from '@posthog/icons'\nimport { useValues } from 'kea'\nimport { LemonTable, LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { capitalizeFirstLetter } from 'lib/utils'\nimport { relatedGroupsLogic } from 'scenes/groups/relatedGroupsLogic'\nimport { GroupActorDisplay } from 'scenes/persons/GroupActorDisplay'\nimport { PersonDisplay } from 'scenes/persons/PersonDisplay'\n\nimport { groupsModel } from '~/models/groupsModel'\nimport { ActorType } from '~/types'\n\ninterface Props {\n    groupTypeIndex: number | null\n    id: string\n}\n\nexport function RelatedGroups({ groupTypeIndex, id }: Props): JSX.Element {\n    const { relatedActors, relatedActorsLoading } = useValues(relatedGroupsLogic({ groupTypeIndex, id }))\n    const { aggregationLabel } = useValues(groupsModel)\n\n    const columns: LemonTableColumns<ActorType> = [\n        {\n            title: 'Type',\n            key: 'type',\n            render: function RenderActor(_, actor: ActorType) {\n                if (actor.type === 'group') {\n                    return <>{capitalizeFirstLetter(aggregationLabel(actor.group_type_index).singular)}</>\n                } else {\n                    return (\n                        <>\n                            <IconPerson /> Person\n                        </>\n                    )\n                }\n            },\n        },\n        {\n            title: 'id',\n            key: 'id',\n            render: function RenderActor(_, actor: ActorType) {\n                if (actor.type == 'group') {\n                    return <GroupActorDisplay actor={actor} />\n                } else {\n                    return <PersonDisplay person={actor} withIcon={false} />\n                }\n            },\n        },\n    ]\n\n    return (\n        <LemonTable\n            dataSource={relatedActors}\n            columns={columns}\n            rowKey=\"id\"\n            pagination={{ pageSize: 30, hideOnSinglePage: true }}\n            loading={relatedActorsLoading}\n            nouns={['related group', 'related groups']}\n            emptyState=\"No related groups found\"\n        />\n    )\n}\n", "import { actions, connect, events, kea, key, path, props } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { toParams } from 'lib/utils'\nimport { projectLogic } from 'scenes/projectLogic'\n\nimport { ActorType } from '~/types'\n\nimport type { relatedGroupsLogicType } from './relatedGroupsLogicType'\n\nexport const relatedGroupsLogic = kea<relatedGroupsLogicType>([\n    props(\n        {} as {\n            groupTypeIndex: number | null\n            id: string\n        }\n    ),\n    key((props) => `${props.groupTypeIndex ?? 'person'}-${props.id}`),\n    path(['scenes', 'groups', 'relatedGroupsLogic']),\n    connect({ values: [projectLogic, ['currentProjectId']] }),\n    actions(() => ({\n        loadRelatedActors: true,\n    })),\n    loaders(({ values, props }) => ({\n        relatedActors: [\n            [] as ActorType[],\n            {\n                loadRelatedActors: async () => {\n                    const url = `api/projects/${values.currentProjectId}/groups/related?${toParams({\n                        group_type_index: props.groupTypeIndex,\n                        id: props.id,\n                    })}`\n                    return await api.get(url)\n                },\n                setGroup: () => [],\n            },\n        ],\n    })),\n    events(({ actions }) => ({\n        afterMount: actions.loadRelatedActors,\n    })),\n])\n", "import { IconInfo } from '@posthog/icons'\nimport { LemonInput, LemonSelect, LemonSnack, LemonTable, LemonTag, Link, Tooltip } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { LemonTableLink } from 'lib/lemon-ui/LemonTable/LemonTableLink'\nimport { capitalizeFirstLetter } from 'lib/utils'\nimport stringWithWBR from 'lib/utils/stringWithWBR'\nimport { urls } from 'scenes/urls'\n\nimport { FeatureFlagReleaseType } from '~/types'\n\nimport { RelatedFeatureFlag, relatedFeatureFlagsLogic } from './relatedFeatureFlagsLogic'\n\ninterface Props {\n    distinctId: string\n    groupTypeIndex?: number\n    groups?: { [key: string]: string }\n}\n\nexport enum FeatureFlagMatchReason {\n    SuperConditionMatch = 'super_condition_value',\n    ConditionMatch = 'condition_match',\n    NoConditionMatch = 'no_condition_match',\n    OutOfRolloutBound = 'out_of_rollout_bound',\n    NoGroupType = 'no_group_type',\n    Disabled = 'disabled',\n}\n\nconst featureFlagMatchMapping = {\n    [FeatureFlagMatchReason.ConditionMatch]: 'Matches',\n    [FeatureFlagMatchReason.NoConditionMatch]: \"Doesn't match any conditions\",\n    [FeatureFlagMatchReason.OutOfRolloutBound]: 'Out of rollout bound',\n    [FeatureFlagMatchReason.NoGroupType]: 'Missing group type',\n    [FeatureFlagMatchReason.SuperConditionMatch]: 'Matches early access condition',\n    [FeatureFlagMatchReason.Disabled]: 'Disabled',\n}\n\nexport function RelatedFeatureFlags({ distinctId, groupTypeIndex, groups }: Props): JSX.Element {\n    const { filteredMappedFlags, relatedFeatureFlagsLoading, searchTerm, filters } = useValues(\n        relatedFeatureFlagsLogic({ distinctId, groupTypeIndex, groups })\n    )\n    const { setSearchTerm, setFilters } = useActions(relatedFeatureFlagsLogic({ distinctId, groupTypeIndex, groups }))\n\n    const columns: LemonTableColumns<RelatedFeatureFlag> = [\n        {\n            title: 'Key',\n            dataIndex: 'key',\n            className: 'ph-no-capture',\n            sticky: true,\n            width: '40%',\n            sorter: (a: RelatedFeatureFlag, b: RelatedFeatureFlag) => (a.key || '').localeCompare(b.key || ''),\n            render: function Render(_, featureFlag: RelatedFeatureFlag) {\n                const isExperiment = (featureFlag.experiment_set || []).length > 0\n                return (\n                    <LemonTableLink\n                        to={featureFlag.id ? urls.featureFlag(featureFlag.id) : undefined}\n                        title={\n                            <>\n                                {stringWithWBR(featureFlag.key, 17)}\n                                <LemonTag type={isExperiment ? 'completion' : 'default'} className=\"ml-2\">\n                                    {isExperiment ? 'Experiment' : 'Feature flag'}\n                                </LemonTag>\n                            </>\n                        }\n                        description={featureFlag.name}\n                    />\n                )\n            },\n        },\n        {\n            title: 'Type',\n            width: 100,\n            render: function Render(_, featureFlag: RelatedFeatureFlag) {\n                return featureFlag.filters.multivariate\n                    ? FeatureFlagReleaseType.Variants\n                    : FeatureFlagReleaseType.ReleaseToggle\n            },\n        },\n        {\n            title: 'Value',\n            dataIndex: 'value',\n            width: 150,\n            render: function Render(_, featureFlag: RelatedFeatureFlag) {\n                return (\n                    <div className=\"break-words\">\n                        {featureFlag.active && featureFlag.value\n                            ? capitalizeFirstLetter(featureFlag.value.toString())\n                            : 'False'}\n                    </div>\n                )\n            },\n        },\n        {\n            title: (\n                <div className=\"inline-flex items-center space-x-1\">\n                    <div className=\"\">Match evaluation</div>\n                    <Tooltip\n                        title={\n                            <div className=\"space-y-2\">\n                                <div>\n                                    This column simulates the feature flag evaluation based on the selected distinct ID,\n                                    current properties, and groups associated with the user. If the actual flag value\n                                    differs, it could be due to different inputs used during evaluation.\n                                </div>\n                                <div>\n                                    If you are using local flag evaluation, you must ensure that you provide any person\n                                    properties, groups, or group properties used to evaluate the release conditions of\n                                    the flag. Read more in the{' '}\n                                    <Link to=\"https://posthog.com/docs/feature-flags/local-evaluation#step-3-evaluate-your-feature-flag\">\n                                        documentation.\n                                    </Link>\n                                </div>\n                            </div>\n                        }\n                        closeDelayMs={200}\n                    >\n                        <IconInfo className=\"text-secondary text-base ml-1\" />\n                    </Tooltip>\n                </div>\n            ),\n            dataIndex: 'evaluation',\n            width: 150,\n            render: function Render(_, featureFlag: RelatedFeatureFlag) {\n                const matchesSet = featureFlag.evaluation.reason === FeatureFlagMatchReason.ConditionMatch\n                return (\n                    <div>\n                        {featureFlag.active ? <>{featureFlagMatchMapping[featureFlag.evaluation.reason]}</> : '--'}\n\n                        {matchesSet && <LemonSnack>Set {(featureFlag.evaluation.condition_index ?? 0) + 1}</LemonSnack>}\n                    </div>\n                )\n            },\n        },\n        {\n            title: 'Status',\n            dataIndex: 'active',\n            sorter: (a: RelatedFeatureFlag, b: RelatedFeatureFlag) => Number(a.active) - Number(b.active),\n            width: 100,\n            render: function RenderActive(_, featureFlag: RelatedFeatureFlag) {\n                return <span className=\"font-normal\">{featureFlag.active ? 'Enabled' : 'Disabled'}</span>\n            },\n        },\n    ]\n\n    const options = [\n        { label: 'All types', value: 'all' },\n        {\n            label: FeatureFlagReleaseType.ReleaseToggle,\n            value: FeatureFlagReleaseType.ReleaseToggle,\n        },\n        { label: FeatureFlagReleaseType.Variants, value: FeatureFlagReleaseType.Variants },\n    ]\n\n    return (\n        <>\n            <div className=\"flex justify-between mb-4 gap-2 flex-wrap\">\n                <LemonInput\n                    type=\"search\"\n                    placeholder=\"Search for feature flags\"\n                    onChange={setSearchTerm}\n                    value={searchTerm}\n                />\n                <div className=\"flex items-center gap-2\">\n                    <span>\n                        <b>Type</b>\n                    </span>\n                    <LemonSelect\n                        options={options}\n                        onChange={(type) => {\n                            if (type) {\n                                if (type === 'all') {\n                                    if (filters) {\n                                        const { type, ...restFilters } = filters\n                                        setFilters(restFilters, true)\n                                    }\n                                } else {\n                                    setFilters({ type })\n                                }\n                            }\n                        }}\n                        value={filters.type || 'all'}\n                        dropdownMaxContentWidth\n                    />\n                    <span className=\"ml-2\">\n                        <b>Match evaluation</b>\n                    </span>\n                    <LemonSelect\n                        options={\n                            [\n                                { label: 'All', value: 'all' },\n                                { label: 'Matched', value: FeatureFlagMatchReason.ConditionMatch },\n                                { label: 'Not matched', value: 'not matched' },\n                            ] as { label: string; value: string }[]\n                        }\n                        onChange={(reason) => {\n                            if (reason) {\n                                if (reason === 'all') {\n                                    if (filters) {\n                                        const { reason, ...restFilters } = filters\n                                        setFilters(restFilters, true)\n                                    }\n                                } else {\n                                    setFilters({ reason })\n                                }\n                            }\n                        }}\n                        value={filters.reason || 'all'}\n                        dropdownMaxContentWidth\n                    />\n                    <span className=\"ml-2\">\n                        <b>Flag status</b>\n                    </span>\n                    <LemonSelect\n                        onChange={(status) => {\n                            if (status) {\n                                if (status === 'all') {\n                                    if (filters) {\n                                        const { active, ...restFilters } = filters\n                                        setFilters(restFilters, true)\n                                    }\n                                } else {\n                                    setFilters({ active: status })\n                                }\n                            }\n                        }}\n                        options={\n                            [\n                                { label: 'All', value: 'all' },\n                                { label: 'Enabled', value: 'true' },\n                                { label: 'Disabled', value: 'false' },\n                            ] as { label: string; value: string }[]\n                        }\n                        value={filters.active || 'all'}\n                        dropdownMaxContentWidth\n                    />\n                </div>\n            </div>\n            <LemonTable columns={columns} loading={relatedFeatureFlagsLoading} dataSource={filteredMappedFlags} />\n        </>\n    )\n}\n", "import Fuse from 'fuse.js'\nimport { actions, connect, events, kea, key, path, props, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { toParams } from 'lib/utils'\nimport { featureFlagsLogic } from 'scenes/feature-flags/featureFlagsLogic'\nimport { projectLogic } from 'scenes/projectLogic'\n\nimport { FeatureFlagReleaseType, FeatureFlagType } from '~/types'\n\nimport { FeatureFlagMatchReason } from './RelatedFeatureFlags'\nimport type { relatedFeatureFlagsLogicType } from './relatedFeatureFlagsLogicType'\n\nexport interface RelatedFeatureFlag extends FeatureFlagType {\n    value: boolean | string\n    evaluation: FeatureFlagEvaluationType\n}\n\nexport interface FeatureFlagEvaluationType {\n    reason: FeatureFlagMatchReason\n    condition_index?: number\n}\n\nexport interface RelatedFeatureFlagResponse {\n    [key: string]: {\n        value: boolean | string\n        evaluation: FeatureFlagEvaluationType\n    }\n}\n\nexport interface RelatedFlagsFilters {\n    type: string\n    active: string\n    reason: string\n}\n\nexport const relatedFeatureFlagsLogic = kea<relatedFeatureFlagsLogicType>([\n    path(['scenes', 'persons', 'relatedFeatureFlagsLogic']),\n    connect({ values: [projectLogic, ['currentProjectId'], featureFlagsLogic, ['featureFlags']] }),\n    props(\n        {} as {\n            distinctId: string\n            groupTypeIndex?: number\n            groups?: { [key: string]: string }\n        }\n    ),\n    key((props) => `${props.distinctId}`),\n    actions({\n        setSearchTerm: (searchTerm: string) => ({ searchTerm }),\n        setFilters: (filters: Partial<RelatedFlagsFilters>, replace?: boolean) => ({ filters, replace }),\n        loadRelatedFeatureFlags: true,\n    }),\n    loaders(({ values, props }) => ({\n        relatedFeatureFlags: [\n            null as RelatedFeatureFlagResponse | null,\n            {\n                loadRelatedFeatureFlags: async () => {\n                    const response = await api.get(\n                        `api/projects/${values.currentProjectId}/feature_flags/evaluation_reasons?${toParams({\n                            distinct_id: props.distinctId,\n                            ...(props.groups ? { groups: props.groups } : {}),\n                        })}`\n                    )\n                    return response\n                },\n            },\n        ],\n    })),\n    reducers({\n        searchTerm: [\n            '',\n            {\n                setSearchTerm: (_, { searchTerm }) => searchTerm,\n            },\n        ],\n        filters: [\n            {} as Partial<RelatedFlagsFilters>,\n            {\n                setFilters: (state, { filters, replace }) => {\n                    if (replace) {\n                        return { ...filters }\n                    }\n                    return { ...state, ...filters }\n                },\n            },\n        ],\n    }),\n    selectors(({ props }) => ({\n        mappedRelatedFeatureFlags: [\n            (selectors) => [selectors.relatedFeatureFlags, selectors.featureFlags],\n            (relatedFlags, featureFlags): RelatedFeatureFlag[] => {\n                if (relatedFlags && featureFlags) {\n                    let flags = featureFlags.results\n                        .map((flag) => ({ ...relatedFlags[flag.key], ...flag }))\n                        .filter((flag) => flag.evaluation !== undefined)\n\n                    // return related feature flags for group property targeting or person property targeting, but not both\n                    if (props.groupTypeIndex !== undefined && props.groups && Object.keys(props.groups).length > 0) {\n                        flags = flags.filter(\n                            (flag) =>\n                                flag.filters.aggregation_group_type_index !== undefined &&\n                                flag.filters.aggregation_group_type_index !== null &&\n                                flag.filters.aggregation_group_type_index === props.groupTypeIndex\n                        )\n                    } else {\n                        flags = flags.filter(\n                            (flag) =>\n                                flag.filters.aggregation_group_type_index === undefined ||\n                                flag.filters.aggregation_group_type_index === null\n                        )\n                    }\n\n                    return flags\n                }\n                return []\n            },\n        ],\n        filteredMappedFlags: [\n            (selectors) => [selectors.mappedRelatedFeatureFlags, selectors.searchTerm, selectors.filters],\n            (featureFlags, searchTerm, filters) => {\n                if (!searchTerm && Object.keys(filters).length === 0) {\n                    return featureFlags\n                }\n                let searchedFlags: RelatedFeatureFlag[] = featureFlags\n                if (searchTerm) {\n                    searchedFlags = new Fuse(featureFlags, {\n                        keys: ['key', 'name'],\n                        threshold: 0.3,\n                    })\n                        .search(searchTerm)\n                        .map((result) => result.item)\n                }\n\n                const { type, active, reason } = filters\n                if (type) {\n                    searchedFlags = searchedFlags.filter((flag) =>\n                        type === FeatureFlagReleaseType.Variants\n                            ? flag.filters.multivariate\n                            : !flag.filters.multivariate\n                    )\n                }\n                if (active) {\n                    searchedFlags = searchedFlags.filter((flag) => (active === 'true' ? flag.active : !flag.active))\n                }\n                if (reason) {\n                    searchedFlags = searchedFlags.filter((flag) =>\n                        reason === 'not matched'\n                            ? flag.evaluation.reason !== FeatureFlagMatchReason.ConditionMatch\n                            : flag.evaluation.reason === FeatureFlagMatchReason.ConditionMatch\n                    )\n                }\n                return searchedFlags\n            },\n        ],\n    })),\n    events(({ actions }) => ({\n        afterMount: actions.loadRelatedFeatureFlags,\n    })),\n])\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "groupDashboardLogic", "userLogic", "s", "user", "currentDashboard", "choice", "groupDashboardId", "import_jsx_runtime", "GroupDashboard", "groupData", "showSceneDashboardChoiceModal", "sceneDashboardChoiceModalLogic", "dashboardLogicProps", "groupDashboardLogic", "GroupDashboardExisting", "SceneDashboardChoiceRequired", "SceneDashboardChoiceModal", "dashboard", "dashboardLogic", "setProperties", "current", "desired", "item", "LemonButton", "Dashboard", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "import_kea_router", "getGroupEventsQuery", "groupTypeIndex", "groupKey", "defaultDataTableColumns", "groupLogic", "props", "key", "projectLogic", "groupsModel", "featureFlagLogic", "groupTab", "query", "values", "params", "url", "toParams", "api_default", "_", "isDataTableNode", "s", "featureFlags", "FEATURE_FLAGS", "p", "aggregationLabel", "index", "groupTypes", "groupTypeName", "groupData", "urls", "capitalizeFirstLetter", "groupDisplayId", "actions", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "relatedGroupsLogic", "props", "projectLogic", "values", "url", "toParams", "api_default", "actions", "import_jsx_runtime", "RelatedGroups", "groupTypeIndex", "id", "relatedActors", "relatedActorsLoading", "relatedGroupsLogic", "aggregationLabel", "groupsModel", "LemonTable", "_", "actor", "capitalizeFirstLetter", "IconPerson", "GroupActorDisplay", "PersonDisplay", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "relatedFeatureFlagsLogic", "projectLogic", "featureFlagsLogic", "props", "searchTerm", "filters", "replace", "values", "api_default", "toParams", "_", "state", "selectors", "relatedFlags", "featureFlags", "flags", "flag", "searchedFlags", "Fuse", "result", "type", "active", "reason", "actions", "import_jsx_runtime", "featureFlagMatchMapping", "RelatedFeatureFlags", "distinctId", "groupTypeIndex", "groups", "filteredMappedFlags", "relatedFeatureFlagsLoading", "searchTerm", "filters", "relatedFeatureFlagsLogic", "setSearchTerm", "setFilters", "columns", "a", "_", "featureFlag", "isExperiment", "LemonTableLink", "urls", "stringWithWBR", "LemonTag", "capitalizeFirstLetter", "Tooltip", "Link", "IconInfo", "matchesSet", "LemonSnack", "options", "LemonInput", "LemonSelect", "type", "restFilters", "reason", "status", "active", "LemonTable", "import_jsx_runtime", "scene", "Group", "groupLogic", "groupTypeIndex", "groupKey", "GroupCaption", "groupData", "groupTypeName", "CopyToClipboardInline", "TZLabel", "logicProps", "groupDataLoading", "groupType", "groupTab", "groupEventsQuery", "showCustomerSuccessDashboards", "setGroupEventsQuery", "currentTeam", "teamLogic", "featureFlags", "featureFlagLogic", "SpinnerOverlay", "NotFound", "settingLevel", "FEATURE_FLAGS", "PageHeader", "NotebookSelectButton", "LemonTabs", "tab", "urls", "PropertiesTable", "Query", "Spinner", "SessionRecordingsPlaylist", "filters", "filtersFromUniversalFilterGroups", "isEventFilter", "event", "prop", "lemonToast", "LemonBanner", "Link", "RelatedGroups", "RelatedFeatureFlags", "GroupDashboard"]
}
