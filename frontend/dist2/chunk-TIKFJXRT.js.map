{
  "version": 3,
  "sources": ["../../products/early_access_features/frontend/earlyAccessFeatureLogic.ts", "../src/scenes/experiments/experimentLogic.tsx", "../src/scenes/feature-flags/featureFlagLogic.ts", "../src/scenes/feature-flags/featureFlagPermissionsLogic.tsx", "../src/scenes/settings/organization/Permissions/Roles/rolesLogic.tsx", "../src/scenes/experiments/holdoutsLogic.tsx"],
  "sourcesContent": ["import { lemonToast } from '@posthog/lemon-ui'\nimport { actions, afterMount, connect, kea, key, listeners, path, props, reducers, selectors } from 'kea'\nimport { forms } from 'kea-forms'\nimport { loaders } from 'kea-loaders'\nimport { router, urlToAction } from 'kea-router'\nimport api from 'lib/api'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { urls } from 'scenes/urls'\n\nimport {\n    Breadcrumb,\n    EarlyAccessFeatureStage,\n    EarlyAccessFeatureTabs,\n    EarlyAccessFeatureType,\n    NewEarlyAccessFeatureType,\n} from '~/types'\n\nimport type { earlyAccessFeatureLogicType } from './earlyAccessFeatureLogicType'\nimport { earlyAccessFeaturesLogic } from './earlyAccessFeaturesLogic'\n\nexport const NEW_EARLY_ACCESS_FEATURE: NewEarlyAccessFeatureType = {\n    name: '',\n    description: '',\n    stage: EarlyAccessFeatureStage.Draft,\n    documentation_url: '',\n    feature_flag_id: undefined,\n}\n\nexport interface EarlyAccessFeatureLogicProps {\n    /** Either a UUID or \"new\". */\n    id: string\n}\n\nexport const earlyAccessFeatureLogic = kea<earlyAccessFeatureLogicType>([\n    path(['products', 'earlyAccessFeatures', 'frontend', 'earlyAccessFeatureLogic']),\n    props({} as EarlyAccessFeatureLogicProps),\n    key(({ id }) => id),\n    connect(() => ({\n        values: [teamLogic, ['currentTeamId'], earlyAccessFeaturesLogic, ['earlyAccessFeatures']],\n        actions: [earlyAccessFeaturesLogic, ['loadEarlyAccessFeatures', 'loadEarlyAccessFeaturesSuccess']],\n    })),\n    actions({\n        setEarlyAccessFeatureMissing: true,\n        toggleImplementOptInInstructionsModal: true,\n        editFeature: (editing: boolean) => ({ editing }),\n        updateStage: (stage: EarlyAccessFeatureStage) => ({ stage }),\n        deleteEarlyAccessFeature: (earlyAccessFeatureId: EarlyAccessFeatureType['id']) => ({ earlyAccessFeatureId }),\n        setActiveTab: (activeTab: EarlyAccessFeatureTabs) => ({ activeTab }),\n    }),\n    loaders(({ props, actions }) => ({\n        earlyAccessFeature: {\n            loadEarlyAccessFeature: async () => {\n                if (props.id && props.id !== 'new') {\n                    try {\n                        const response = await api.earlyAccessFeatures.get(props.id)\n                        return response\n                    } catch (error: any) {\n                        actions.setEarlyAccessFeatureMissing()\n                        throw error\n                    }\n                }\n                return NEW_EARLY_ACCESS_FEATURE\n            },\n            saveEarlyAccessFeature: async (\n                updatedEarlyAccessFeature: Partial<EarlyAccessFeatureType | NewEarlyAccessFeatureType>\n            ) => {\n                let result: EarlyAccessFeatureType\n                if (props.id === 'new') {\n                    result = await api.earlyAccessFeatures.create(\n                        updatedEarlyAccessFeature as NewEarlyAccessFeatureType\n                    )\n                    router.actions.replace(urls.earlyAccessFeature(result.id))\n                } else {\n                    result = await api.earlyAccessFeatures.update(\n                        props.id,\n                        updatedEarlyAccessFeature as EarlyAccessFeatureType\n                    )\n                }\n                return result\n            },\n        },\n    })),\n    forms(({ actions }) => ({\n        earlyAccessFeature: {\n            defaults: { ...NEW_EARLY_ACCESS_FEATURE } as NewEarlyAccessFeatureType | EarlyAccessFeatureType,\n            errors: (payload) => ({\n                name: !payload.name ? 'Feature name must be set' : undefined,\n            }),\n            submit: async (payload) => {\n                actions.saveEarlyAccessFeature(payload)\n            },\n        },\n    })),\n    reducers({\n        earlyAccessFeatureMissing: [\n            false,\n            {\n                setEarlyAccessFeatureMissing: () => true,\n            },\n        ],\n        isEditingFeature: [\n            false,\n            {\n                editFeature: (_, { editing }) => editing,\n            },\n        ],\n        implementOptInInstructionsModal: [\n            false,\n            {\n                toggleImplementOptInInstructionsModal: (state) => !state,\n            },\n        ],\n        activeTab: [\n            EarlyAccessFeatureTabs.OptedIn as EarlyAccessFeatureTabs,\n            {\n                setActiveTab: (_, { activeTab }) => activeTab,\n            },\n        ],\n    }),\n    selectors({\n        mode: [(_, p) => [p.id], (id): 'view' | 'edit' => (id === 'new' ? 'edit' : 'view')],\n        breadcrumbs: [\n            (s) => [s.earlyAccessFeature],\n            (earlyAccessFeature: EarlyAccessFeatureType): Breadcrumb[] => [\n                {\n                    key: 'EarlyAccessFeatures',\n                    name: 'Early Access Management',\n                    path: urls.earlyAccessFeatures(),\n                },\n                {\n                    key: ['EarlyAccessFeature', earlyAccessFeature.id || 'new'],\n                    name: earlyAccessFeature.name,\n                },\n            ],\n        ],\n    }),\n    listeners(({ actions, values, props }) => ({\n        updateStage: async ({ stage }) => {\n            'id' in values.earlyAccessFeature &&\n                (await api.earlyAccessFeatures.update(props.id, {\n                    ...values.earlyAccessFeature,\n                    stage: stage,\n                }))\n            actions.loadEarlyAccessFeature()\n            actions.loadEarlyAccessFeatures()\n        },\n        saveEarlyAccessFeatureSuccess: ({ earlyAccessFeature: _earlyAccessFeature }) => {\n            lemonToast.success('Early Access Feature saved')\n            actions.loadEarlyAccessFeatures()\n            _earlyAccessFeature.id && router.actions.replace(urls.earlyAccessFeature(_earlyAccessFeature.id))\n            actions.editFeature(false)\n        },\n        deleteEarlyAccessFeature: async ({ earlyAccessFeatureId }) => {\n            try {\n                await api.earlyAccessFeatures.delete(earlyAccessFeatureId)\n                lemonToast.info(\n                    'Early access feature deleted. Remember to delete corresponding feature flag if necessary'\n                )\n                actions.loadEarlyAccessFeaturesSuccess(\n                    values.earlyAccessFeatures.filter((feature) => feature.id !== earlyAccessFeatureId)\n                )\n                router.actions.push(urls.earlyAccessFeatures())\n            } catch (e) {\n                lemonToast.error(`Error deleting Early Access Feature: ${e}`)\n            }\n        },\n    })),\n    urlToAction(({ actions, props }) => ({\n        [urls.earlyAccessFeature(props.id ?? 'new')]: (_, __, ___, { method }) => {\n            // If the URL was pushed (user clicked on a link), reset the scene's data.\n            // This avoids resetting form fields if you click back/forward.\n            if (method === 'PUSH') {\n                if (props.id) {\n                    actions.loadEarlyAccessFeature()\n                }\n            }\n        },\n    })),\n    afterMount(({ props, actions }) => {\n        if (props.id !== 'new') {\n            actions.loadEarlyAccessFeature()\n        }\n    }),\n])\n", "import { actions, connect, isBreakpoint, kea, key, listeners, path, props, reducers, selectors } from 'kea'\nimport { forms } from 'kea-forms'\nimport { loaders } from 'kea-loaders'\nimport { router, urlToAction } from 'kea-router'\nimport api from 'lib/api'\nimport { EXPERIMENT_DEFAULT_DURATION, FEATURE_FLAGS } from 'lib/constants'\nimport { dayjs } from 'lib/dayjs'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast/LemonToast'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { hasFormErrors, toParams } from 'lib/utils'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\nimport { ProductIntentContext } from 'lib/utils/product-intents'\nimport { addProjectIdIfMissing } from 'lib/utils/router-utils'\nimport {\n    indexToVariantKeyFeatureFlagPayloads,\n    validateFeatureFlagKey,\n    variantKeyToIndexFeatureFlagPayloads,\n} from 'scenes/feature-flags/featureFlagLogic'\nimport { featureFlagsLogic } from 'scenes/feature-flags/featureFlagsLogic'\nimport { funnelDataLogic } from 'scenes/funnels/funnelDataLogic'\nimport { insightDataLogic } from 'scenes/insights/insightDataLogic'\nimport { projectLogic } from 'scenes/projectLogic'\nimport { sceneLogic } from 'scenes/sceneLogic'\nimport { Scene } from 'scenes/sceneTypes'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { trendsDataLogic } from 'scenes/trends/trendsDataLogic'\nimport { urls } from 'scenes/urls'\n\nimport { activationLogic, ActivationTask } from '~/layout/navigation-3000/sidepanel/panels/activation/activationLogic'\nimport { cohortsModel } from '~/models/cohortsModel'\nimport { groupsModel } from '~/models/groupsModel'\nimport { performQuery, QUERY_TIMEOUT_ERROR_MESSAGE } from '~/queries/query'\nimport {\n    AnyEntityNode,\n    CachedExperimentFunnelsQueryResponse,\n    CachedExperimentQueryResponse,\n    CachedExperimentTrendsQueryResponse,\n    ExperimentFunnelsQuery,\n    ExperimentMetric,\n    ExperimentMetricType,\n    ExperimentSignificanceCode,\n    ExperimentTrendsQuery,\n    InsightQueryNode,\n    InsightVizNode,\n    NodeKind,\n} from '~/queries/schema/schema-general'\nimport {\n    Breadcrumb,\n    BreakdownAttributionType,\n    BreakdownType,\n    CohortType,\n    CountPerActorMathType,\n    DashboardType,\n    Experiment,\n    FeatureFlagType,\n    FunnelExperimentVariant,\n    FunnelStep,\n    InsightType,\n    MultivariateFlagVariant,\n    ProductKey,\n    PropertyMathType,\n    TrendExperimentVariant,\n    TrendResult,\n} from '~/types'\n\nimport { MetricInsightId } from './constants'\nimport type { experimentLogicType } from './experimentLogicType'\nimport { experimentsLogic } from './experimentsLogic'\nimport { holdoutsLogic } from './holdoutsLogic'\nimport { SharedMetric } from './SharedMetrics/sharedMetricLogic'\nimport { sharedMetricsLogic } from './SharedMetrics/sharedMetricsLogic'\nimport {\n    featureFlagEligibleForExperiment,\n    getMinimumDetectableEffect,\n    percentageDistribution,\n    transformFiltersForWinningVariant,\n} from './utils'\n\nconst NEW_EXPERIMENT: Experiment = {\n    id: 'new',\n    name: '',\n    type: 'product',\n    feature_flag_key: '',\n    filters: {},\n    metrics: [],\n    metrics_secondary: [],\n    saved_metrics_ids: [],\n    saved_metrics: [],\n    parameters: {\n        feature_flag_variants: [\n            { key: 'control', rollout_percentage: 50 },\n            { key: 'test', rollout_percentage: 50 },\n        ],\n    },\n    secondary_metrics: [],\n    created_at: null,\n    created_by: null,\n    updated_at: null,\n    holdout_id: null,\n}\n\nexport interface ExperimentLogicProps {\n    experimentId?: Experiment['id']\n}\n\ninterface MetricLoadingConfig {\n    metrics: any[]\n    experimentId: Experiment['id']\n    refresh?: boolean\n    onSetResults: (\n        results: (\n            | CachedExperimentQueryResponse\n            | CachedExperimentTrendsQueryResponse\n            | CachedExperimentFunnelsQueryResponse\n            | null\n        )[]\n    ) => void\n    onSetErrors: (errors: any[]) => void\n    onTimeout: (experimentId: Experiment['id'], metric: any) => void\n}\n\nconst loadMetrics = async ({\n    metrics,\n    experimentId,\n    refresh,\n    onSetResults,\n    onSetErrors,\n    onTimeout,\n}: MetricLoadingConfig): Promise<void[]> => {\n    const results: (\n        | CachedExperimentQueryResponse\n        | CachedExperimentTrendsQueryResponse\n        | CachedExperimentFunnelsQueryResponse\n        | null\n    )[] = []\n\n    const currentErrors = new Array(metrics.length).fill(null)\n\n    return await Promise.all(\n        metrics.map(async (metric, index) => {\n            try {\n                let queryWithExperimentId\n                if (metric.kind === NodeKind.ExperimentMetric) {\n                    queryWithExperimentId = {\n                        kind: NodeKind.ExperimentQuery,\n                        metric: metric,\n                        experiment_id: experimentId,\n                    }\n                } else {\n                    queryWithExperimentId = {\n                        ...metric,\n                        experiment_id: experimentId,\n                    }\n                }\n                const response = await performQuery(queryWithExperimentId, undefined, refresh)\n\n                results[index] = {\n                    ...response,\n                    fakeInsightId: Math.random().toString(36).substring(2, 15),\n                }\n                onSetResults([...results])\n            } catch (error: any) {\n                const errorDetailMatch = error.detail?.match(/\\{.*\\}/)\n                const errorDetail = errorDetailMatch ? JSON.parse(errorDetailMatch[0]) : error.detail || error.message\n\n                currentErrors[index] = {\n                    detail: errorDetail,\n                    statusCode: error.status,\n                    hasDiagnostics: !!errorDetailMatch,\n                }\n                onSetErrors(currentErrors)\n\n                if (errorDetail === QUERY_TIMEOUT_ERROR_MESSAGE) {\n                    onTimeout(experimentId, metric)\n                }\n\n                results[index] = null\n                onSetResults([...results])\n            }\n        })\n    )\n}\n\nexport const experimentLogic = kea<experimentLogicType>([\n    props({} as ExperimentLogicProps),\n    key((props) => props.experimentId || 'new'),\n    path((key) => ['scenes', 'experiment', 'experimentLogic', key]),\n    connect(() => ({\n        values: [\n            projectLogic,\n            ['currentProjectId'],\n            groupsModel,\n            ['aggregationLabel', 'groupTypes', 'showGroupsOptions'],\n            sceneLogic,\n            ['activeScene'],\n            featureFlagLogic,\n            ['featureFlags'],\n            holdoutsLogic,\n            ['holdouts'],\n            // Hook the insight state to get the results for the sample size estimation\n            funnelDataLogic({ dashboardItemId: MetricInsightId.Funnels }),\n            ['results as funnelResults', 'conversionMetrics'],\n            trendsDataLogic({ dashboardItemId: MetricInsightId.Trends }),\n            ['results as trendResults'],\n            // Hook into the loading state of the metric insight\n            insightDataLogic({ dashboardItemId: MetricInsightId.Trends }),\n            ['insightDataLoading as trendMetricInsightLoading'],\n            insightDataLogic({ dashboardItemId: MetricInsightId.Funnels }),\n            ['insightDataLoading as funnelMetricInsightLoading'],\n            sharedMetricsLogic,\n            ['sharedMetrics'],\n        ],\n        actions: [\n            experimentsLogic,\n            ['updateExperiments', 'addToExperiments'],\n            eventUsageLogic,\n            [\n                'reportExperimentCreated',\n                'reportExperimentViewed',\n                'reportExperimentLaunched',\n                'reportExperimentCompleted',\n                'reportExperimentArchived',\n                'reportExperimentReset',\n                'reportExperimentExposureCohortCreated',\n                'reportExperimentVariantShipped',\n                'reportExperimentVariantScreenshotUploaded',\n                'reportExperimentResultsLoadingTimeout',\n                'reportExperimentReleaseConditionsViewed',\n                'reportExperimentHoldoutAssigned',\n                'reportExperimentSharedMetricAssigned',\n                'reportExperimentDashboardCreated',\n                'reportExperimentMetricTimeout',\n            ],\n            teamLogic,\n            ['addProductIntent'],\n            featureFlagsLogic,\n            ['updateFlag'],\n        ],\n    })),\n    actions({\n        setExperimentMissing: true,\n        setExperiment: (experiment: Partial<Experiment>) => ({ experiment }),\n        createExperiment: (draft?: boolean) => ({ draft }),\n        setExperimentType: (type?: string) => ({ type }),\n        removeExperimentGroup: (idx: number) => ({ idx }),\n        setEditExperiment: (editing: boolean) => ({ editing }),\n        setFlagImplementationWarning: (warning: boolean) => ({ warning }),\n        setExposureAndSampleSize: (exposure: number, sampleSize: number) => ({ exposure, sampleSize }),\n        refreshExperimentResults: (forceRefresh?: boolean) => ({ forceRefresh }),\n        updateExperimentGoal: true,\n        updateExperimentCollectionGoal: true,\n        changeExperimentStartDate: (startDate: string) => ({ startDate }),\n        setExperimentStatsVersion: (version: number) => ({ version }),\n        launchExperiment: true,\n        endExperiment: true,\n        addVariant: true,\n        archiveExperiment: true,\n        resetRunningExperiment: true,\n        checkFlagImplementationWarning: true,\n        openExperimentCollectionGoalModal: true,\n        closeExperimentCollectionGoalModal: true,\n        openShipVariantModal: true,\n        closeShipVariantModal: true,\n        openDistributionModal: true,\n        closeDistributionModal: true,\n        openReleaseConditionsModal: true,\n        closeReleaseConditionsModal: true,\n        updateExperimentVariantImages: (variantPreviewMediaIds: Record<string, string[]>) => ({\n            variantPreviewMediaIds,\n        }),\n        setMetric: ({\n            metricIdx,\n            name,\n            metric,\n            isSecondary = false,\n        }: {\n            metricIdx: number\n            name?: string\n            metric: ExperimentMetric\n            isSecondary?: boolean\n        }) => ({ metricIdx, name, metric, isSecondary }),\n        setTrendsMetric: ({\n            metricIdx,\n            name,\n            series,\n            filterTestAccounts,\n            isSecondary = false,\n        }: {\n            metricIdx: number\n            name?: string\n            series?: AnyEntityNode[]\n            filterTestAccounts?: boolean\n            isSecondary?: boolean\n        }) => ({ metricIdx, name, series, filterTestAccounts, isSecondary }),\n        setTrendsExposureMetric: ({\n            metricIdx,\n            name,\n            series,\n            filterTestAccounts,\n            isSecondary = false,\n        }: {\n            metricIdx: number\n            name?: string\n            series?: AnyEntityNode[]\n            filterTestAccounts?: boolean\n            isSecondary?: boolean\n        }) => ({ metricIdx, name, series, filterTestAccounts, isSecondary }),\n        setFunnelsMetric: ({\n            metricIdx,\n            name,\n            series,\n            filterTestAccounts,\n            breakdownAttributionType,\n            breakdownAttributionValue,\n            funnelWindowInterval,\n            funnelWindowIntervalUnit,\n            aggregation_group_type_index,\n            funnelAggregateByHogQL,\n            isSecondary,\n        }: {\n            metricIdx: number\n            name?: string\n            series?: AnyEntityNode[]\n            filterTestAccounts?: boolean\n            breakdownAttributionType?: BreakdownAttributionType\n            breakdownAttributionValue?: number\n            funnelWindowInterval?: number\n            funnelWindowIntervalUnit?: string\n            aggregation_group_type_index?: number\n            funnelAggregateByHogQL?: string\n            isSecondary?: boolean\n        }) => ({\n            metricIdx,\n            name,\n            series,\n            filterTestAccounts,\n            breakdownAttributionType,\n            breakdownAttributionValue,\n            funnelWindowInterval,\n            funnelWindowIntervalUnit,\n            aggregation_group_type_index,\n            funnelAggregateByHogQL,\n            isSecondary,\n        }),\n        setTabKey: (tabKey: string) => ({ tabKey }),\n        openPrimaryMetricModal: (index: number) => ({ index }),\n        closePrimaryMetricModal: true,\n        setMetricResultsLoading: (loading: boolean) => ({ loading }),\n        setMetricResults: (\n            results: (\n                | CachedExperimentQueryResponse\n                | CachedExperimentTrendsQueryResponse\n                | CachedExperimentFunnelsQueryResponse\n                | null\n            )[]\n        ) => ({ results }),\n        loadMetricResults: (refresh?: boolean) => ({ refresh }),\n        setPrimaryMetricsResultErrors: (errors: any[]) => ({ errors }),\n        setEditingPrimaryMetricIndex: (index: number | null) => ({ index }),\n        updateDistributionModal: (featureFlag: FeatureFlagType) => ({ featureFlag }),\n        openSecondaryMetricModal: (index: number) => ({ index }),\n        closeSecondaryMetricModal: true,\n        setSecondaryMetricResultsLoading: (loading: boolean) => ({ loading }),\n        setSecondaryMetricResults: (\n            results: (\n                | CachedExperimentQueryResponse\n                | CachedExperimentTrendsQueryResponse\n                | CachedExperimentFunnelsQueryResponse\n                | null\n            )[]\n        ) => ({ results }),\n        loadSecondaryMetricResults: (refresh?: boolean) => ({ refresh }),\n        setSecondaryMetricsResultErrors: (errors: any[]) => ({ errors }),\n        openPrimaryMetricSourceModal: true,\n        closePrimaryMetricSourceModal: true,\n        openSecondaryMetricSourceModal: true,\n        closeSecondaryMetricSourceModal: true,\n        openPrimarySharedMetricModal: (sharedMetricId: SharedMetric['id'] | null) => ({ sharedMetricId }),\n        closePrimarySharedMetricModal: true,\n        openSecondarySharedMetricModal: (sharedMetricId: SharedMetric['id'] | null) => ({ sharedMetricId }),\n        closeSecondarySharedMetricModal: true,\n        openVariantDeltaTimeseriesModal: true,\n        closeVariantDeltaTimeseriesModal: true,\n        addSharedMetricsToExperiment: (\n            sharedMetricIds: SharedMetric['id'][],\n            metadata: { type: 'primary' | 'secondary' }\n        ) => ({\n            sharedMetricIds,\n            metadata,\n        }),\n        removeSharedMetricFromExperiment: (sharedMetricId: SharedMetric['id']) => ({ sharedMetricId }),\n        createExperimentDashboard: true,\n        setIsCreatingExperimentDashboard: (isCreating: boolean) => ({ isCreating }),\n        setUnmodifiedExperiment: (experiment: Experiment) => ({ experiment }),\n        restoreUnmodifiedExperiment: true,\n        setValidExistingFeatureFlag: (featureFlag: FeatureFlagType | null) => ({ featureFlag }),\n        setFeatureFlagValidationError: (error: string) => ({ error }),\n        validateFeatureFlag: (featureFlagKey: string) => ({ featureFlagKey }),\n    }),\n    reducers({\n        experiment: [\n            { ...NEW_EXPERIMENT } as Experiment,\n            {\n                setExperiment: (state, { experiment }) => {\n                    return { ...state, ...experiment }\n                },\n                addVariant: (state) => {\n                    if (state?.parameters?.feature_flag_variants) {\n                        const newRolloutPercentages = percentageDistribution(\n                            state.parameters.feature_flag_variants.length + 1\n                        )\n                        const updatedRolloutPercentageVariants = state.parameters.feature_flag_variants.map(\n                            (variant: MultivariateFlagVariant, i: number) => ({\n                                ...variant,\n                                rollout_percentage: newRolloutPercentages[i],\n                            })\n                        )\n                        return {\n                            ...state,\n                            parameters: {\n                                ...state.parameters,\n                                feature_flag_variants: [\n                                    ...updatedRolloutPercentageVariants,\n                                    {\n                                        key: `test_group_${state.parameters.feature_flag_variants.length}`,\n                                        rollout_percentage: newRolloutPercentages[newRolloutPercentages.length - 1],\n                                    },\n                                ],\n                            },\n                        }\n                    }\n                    return state\n                },\n                removeExperimentGroup: (state, { idx }) => {\n                    if (!state) {\n                        return state\n                    }\n                    const variants = [...(state.parameters?.feature_flag_variants || [])]\n                    variants.splice(idx, 1)\n                    const newRolloutPercentages = percentageDistribution(\n                        (state?.parameters?.feature_flag_variants || []).length - 1\n                    )\n                    const updatedVariants = variants.map((variant: MultivariateFlagVariant, i: number) => ({\n                        ...variant,\n                        rollout_percentage: newRolloutPercentages[i],\n                    }))\n\n                    return {\n                        ...state,\n                        parameters: {\n                            ...state.parameters,\n                            feature_flag_variants: updatedVariants,\n                        },\n                    }\n                },\n                setMetric: (state, { metricIdx, metric, isSecondary }) => {\n                    const metricsKey = isSecondary ? 'metrics_secondary' : 'metrics'\n                    const metrics = [...(state?.[metricsKey] || [])]\n\n                    metrics[metricIdx] = metric\n\n                    return {\n                        ...state,\n                        [metricsKey]: metrics,\n                    }\n                },\n                setTrendsMetric: (state, { metricIdx, name, series, filterTestAccounts, isSecondary }) => {\n                    const metricsKey = isSecondary ? 'metrics_secondary' : 'metrics'\n                    const metrics = [...(state?.[metricsKey] || [])]\n                    const metric = metrics[metricIdx]\n\n                    metrics[metricIdx] = {\n                        ...metric,\n                        ...(name !== undefined && { name }),\n                        count_query: {\n                            ...(metric as ExperimentTrendsQuery).count_query,\n                            ...(series && { series }),\n                            ...(filterTestAccounts !== undefined && { filterTestAccounts }),\n                        },\n                    } as ExperimentTrendsQuery\n\n                    return {\n                        ...state,\n                        [metricsKey]: metrics,\n                    }\n                },\n                setTrendsExposureMetric: (state, { metricIdx, name, series, filterTestAccounts, isSecondary }) => {\n                    const metricsKey = isSecondary ? 'metrics_secondary' : 'metrics'\n                    const metrics = [...(state?.[metricsKey] || [])]\n                    const metric = metrics[metricIdx]\n\n                    metrics[metricIdx] = {\n                        ...metric,\n                        ...(name !== undefined && { name }),\n                        exposure_query: {\n                            ...(metric as ExperimentTrendsQuery).exposure_query,\n                            ...(series && { series }),\n                            ...(filterTestAccounts !== undefined && { filterTestAccounts }),\n                        },\n                    } as ExperimentTrendsQuery\n\n                    return {\n                        ...state,\n                        [metricsKey]: metrics,\n                    }\n                },\n                setFunnelsMetric: (\n                    state,\n                    {\n                        metricIdx,\n                        name,\n                        series,\n                        filterTestAccounts,\n                        breakdownAttributionType,\n                        breakdownAttributionValue,\n                        funnelWindowInterval,\n                        funnelWindowIntervalUnit,\n                        aggregation_group_type_index,\n                        funnelAggregateByHogQL,\n                        isSecondary,\n                    }\n                ) => {\n                    const metricsKey = isSecondary ? 'metrics_secondary' : 'metrics'\n                    const metrics = [...(state?.[metricsKey] || [])]\n                    const metric = metrics[metricIdx]\n\n                    metrics[metricIdx] = {\n                        ...metric,\n                        ...(name !== undefined && { name }),\n                        funnels_query: {\n                            ...(metric as ExperimentFunnelsQuery).funnels_query,\n                            ...(series && { series }),\n                            ...(filterTestAccounts !== undefined && { filterTestAccounts }),\n                            ...(aggregation_group_type_index !== undefined && { aggregation_group_type_index }),\n                            funnelsFilter: {\n                                ...(metric as ExperimentFunnelsQuery).funnels_query.funnelsFilter,\n                                ...(breakdownAttributionType && { breakdownAttributionType }),\n                                ...(breakdownAttributionValue !== undefined && { breakdownAttributionValue }),\n                                ...(funnelWindowInterval !== undefined && { funnelWindowInterval }),\n                                ...(funnelWindowIntervalUnit && { funnelWindowIntervalUnit }),\n                                ...(funnelAggregateByHogQL !== undefined && { funnelAggregateByHogQL }),\n                            },\n                        },\n                    } as ExperimentFunnelsQuery\n\n                    return {\n                        ...state,\n                        [metricsKey]: metrics,\n                    }\n                },\n            },\n        ],\n        experimentMissing: [\n            false,\n            {\n                setExperimentMissing: () => true,\n            },\n        ],\n        editingExistingExperiment: [\n            false,\n            {\n                setEditExperiment: (_, { editing }) => editing,\n            },\n        ],\n        flagImplementationWarning: [\n            false as boolean,\n            {\n                setFlagImplementationWarning: (_, { warning }) => warning,\n            },\n        ],\n        isExperimentCollectionGoalModalOpen: [\n            false,\n            {\n                openExperimentCollectionGoalModal: () => true,\n                closeExperimentCollectionGoalModal: () => false,\n            },\n        ],\n        isShipVariantModalOpen: [\n            false,\n            {\n                openShipVariantModal: () => true,\n                closeShipVariantModal: () => false,\n            },\n        ],\n        isDistributionModalOpen: [\n            false,\n            {\n                openDistributionModal: () => true,\n                closeDistributionModal: () => false,\n            },\n        ],\n        isReleaseConditionsModalOpen: [\n            false,\n            {\n                openReleaseConditionsModal: () => true,\n                closeReleaseConditionsModal: () => false,\n            },\n        ],\n        experimentValuesChangedLocally: [\n            false,\n            {\n                setExperiment: () => true,\n                loadExperiment: () => false,\n                updateExperiment: () => false,\n            },\n        ],\n        unmodifiedExperiment: [\n            null as Experiment | null,\n            {\n                setUnmodifiedExperiment: (_, { experiment }) => experiment,\n            },\n        ],\n        tabKey: [\n            'results',\n            {\n                setTabKey: (_, { tabKey }) => tabKey,\n            },\n        ],\n        isPrimaryMetricModalOpen: [\n            false,\n            {\n                openPrimaryMetricModal: () => true,\n                closePrimaryMetricModal: () => false,\n            },\n        ],\n        metricResultsLoading: [\n            false,\n            {\n                setMetricResultsLoading: (_, { loading }) => loading,\n            },\n        ],\n        metricResults: [\n            [] as (\n                | CachedExperimentQueryResponse\n                | CachedExperimentTrendsQueryResponse\n                | CachedExperimentFunnelsQueryResponse\n                | null\n            )[],\n            {\n                setMetricResults: (_, { results }) => results,\n            },\n        ],\n        secondaryMetricResultsLoading: [\n            false,\n            {\n                setSecondaryMetricResultsLoading: (_, { loading }) => loading,\n            },\n        ],\n        secondaryMetricResults: [\n            [] as (\n                | CachedExperimentQueryResponse\n                | CachedExperimentTrendsQueryResponse\n                | CachedExperimentFunnelsQueryResponse\n                | null\n            )[],\n            {\n                setSecondaryMetricResults: (_, { results }) => results,\n            },\n        ],\n        editingPrimaryMetricIndex: [\n            null as number | null,\n            {\n                openPrimaryMetricModal: (_, { index }) => index,\n                closePrimaryMetricModal: () => null,\n                updateExperimentGoal: () => null,\n                setEditingPrimaryMetricIndex: (_, { index }) => index,\n            },\n        ],\n        primaryMetricsResultErrors: [\n            [] as any[],\n            {\n                setPrimaryMetricsResultErrors: (_, { errors }) => errors,\n                loadMetricResults: () => [],\n                loadExperiment: () => [],\n            },\n        ],\n        isSecondaryMetricModalOpen: [\n            false,\n            {\n                openSecondaryMetricModal: () => true,\n                closeSecondaryMetricModal: () => false,\n            },\n        ],\n        editingSecondaryMetricIndex: [\n            null as number | null,\n            {\n                openSecondaryMetricModal: (_, { index }) => index,\n                closeSecondaryMetricModal: () => null,\n                updateExperimentGoal: () => null,\n            },\n        ],\n        editingSharedMetricId: [\n            null as SharedMetric['id'] | null,\n            {\n                openPrimarySharedMetricModal: (_, { sharedMetricId }) => sharedMetricId,\n                openSecondarySharedMetricModal: (_, { sharedMetricId }) => sharedMetricId,\n                updateExperimentGoal: () => null,\n            },\n        ],\n        secondaryMetricsResultErrors: [\n            [] as any[],\n            {\n                setSecondaryMetricsResultErrors: (_, { errors }) => errors,\n                loadSecondaryMetricResults: () => [],\n                loadExperiment: () => [],\n            },\n        ],\n        isPrimaryMetricSourceModalOpen: [\n            false,\n            {\n                openPrimaryMetricSourceModal: () => true,\n                closePrimaryMetricSourceModal: () => false,\n            },\n        ],\n        isSecondaryMetricSourceModalOpen: [\n            false,\n            {\n                openSecondaryMetricSourceModal: () => true,\n                closeSecondaryMetricSourceModal: () => false,\n            },\n        ],\n        isPrimarySharedMetricModalOpen: [\n            false,\n            {\n                openPrimarySharedMetricModal: () => true,\n                closePrimarySharedMetricModal: () => false,\n            },\n        ],\n        isSecondarySharedMetricModalOpen: [\n            false,\n            {\n                openSecondarySharedMetricModal: () => true,\n                closeSecondarySharedMetricModal: () => false,\n            },\n        ],\n        isVariantDeltaTimeseriesModalOpen: [\n            false,\n            {\n                openVariantDeltaTimeseriesModal: () => true,\n                closeVariantDeltaTimeseriesModal: () => false,\n            },\n        ],\n        isCreatingExperimentDashboard: [\n            false,\n            {\n                setIsCreatingExperimentDashboard: (_, { isCreating }) => isCreating,\n            },\n        ],\n        validExistingFeatureFlag: [\n            null as FeatureFlagType | null,\n            {\n                setValidExistingFeatureFlag: (_, { featureFlag }) => featureFlag,\n            },\n        ],\n        featureFlagValidationError: [\n            null as string | null,\n            {\n                setFeatureFlagValidationError: (_, { error }) => error,\n            },\n        ],\n    }),\n    listeners(({ values, actions }) => ({\n        createExperiment: async ({ draft }) => {\n            const { recommendedRunningTime, recommendedSampleSize, minimumDetectableEffect } = values\n\n            actions.touchExperimentField('name')\n            actions.touchExperimentField('feature_flag_key')\n            values.experiment.parameters.feature_flag_variants.forEach((_, i) =>\n                actions.touchExperimentField(`parameters.feature_flag_variants.${i}.key`)\n            )\n\n            if (hasFormErrors(values.experimentErrors)) {\n                return\n            }\n\n            // Minimum Detectable Effect is calculated based on a loaded insight\n            // Terminate if the insight did not manage to load in time\n            if (!minimumDetectableEffect) {\n                eventUsageLogic.actions.reportExperimentInsightLoadFailed()\n                return lemonToast.error(\n                    'Failed to load insight. Experiment cannot be saved without this value. Try changing the experiment goal.'\n                )\n            }\n\n            let response: Experiment | null = null\n            const isUpdate = !!values.experimentId && values.experimentId !== 'new'\n            try {\n                if (isUpdate) {\n                    response = await api.update(\n                        `api/projects/${values.currentProjectId}/experiments/${values.experimentId}`,\n                        {\n                            ...values.experiment,\n                            parameters: {\n                                ...values.experiment?.parameters,\n                                recommended_running_time: recommendedRunningTime,\n                                recommended_sample_size: recommendedSampleSize,\n                                minimum_detectable_effect: minimumDetectableEffect,\n                            },\n                            ...(!draft && { start_date: dayjs() }),\n                            // backwards compatibility: Remove any global properties set on the experiment.\n                            // These were used to change feature flag targeting, but this is controlled directly\n                            // on the feature flag now.\n                            filters: {\n                                events: [],\n                                actions: [],\n                                ...values.experiment.filters,\n                                properties: [],\n                            },\n                        }\n                    )\n\n                    if (response?.id) {\n                        actions.updateExperiments(response)\n                        actions.setEditExperiment(false)\n                        actions.loadExperimentSuccess(response)\n                        return\n                    }\n                } else {\n                    response = await api.create(`api/projects/${values.currentProjectId}/experiments`, {\n                        ...values.experiment,\n                        parameters: {\n                            ...values.experiment?.parameters,\n                            recommended_running_time: recommendedRunningTime,\n                            recommended_sample_size: recommendedSampleSize,\n                            minimum_detectable_effect: minimumDetectableEffect,\n                        },\n                        ...(!draft && { start_date: dayjs() }),\n                    })\n                    if (response) {\n                        actions.reportExperimentCreated(response)\n                        actions.addProductIntent({\n                            product_type: ProductKey.EXPERIMENTS,\n                            intent_context: ProductIntentContext.EXPERIMENT_CREATED,\n                        })\n                    }\n                }\n            } catch (error: any) {\n                lemonToast.error(error.detail || 'Failed to create experiment')\n                return\n            }\n\n            if (response?.id) {\n                const experimentId = response.id\n                router.actions.push(urls.experiment(experimentId))\n                actions.addToExperiments(response)\n                lemonToast.success(`Experiment ${isUpdate ? 'updated' : 'created'}`, {\n                    button: {\n                        label: 'View it',\n                        action: () => {\n                            router.actions.push(urls.experiment(experimentId))\n                        },\n                    },\n                })\n            }\n        },\n        setExperimentType: async ({ type }) => {\n            actions.setExperiment({ type: type })\n        },\n        loadExperimentSuccess: async ({ experiment }) => {\n            const duration = experiment?.start_date ? dayjs().diff(experiment.start_date, 'second') : null\n            experiment && actions.reportExperimentViewed(experiment, duration)\n\n            if (experiment?.start_date) {\n                actions.refreshExperimentResults()\n            }\n        },\n        launchExperiment: async () => {\n            const startDate = dayjs()\n            actions.updateExperiment({ start_date: startDate.toISOString() })\n            values.experiment && eventUsageLogic.actions.reportExperimentLaunched(values.experiment, startDate)\n            activationLogic.findMounted()?.actions.markTaskAsCompleted(ActivationTask.LaunchExperiment)\n        },\n        changeExperimentStartDate: async ({ startDate }) => {\n            actions.updateExperiment({ start_date: startDate })\n            values.experiment && eventUsageLogic.actions.reportExperimentStartDateChange(values.experiment, startDate)\n        },\n        setExperimentStatsVersion: async ({ version }, breakpoint) => {\n            actions.updateExperiment({ stats_config: { version } })\n            await breakpoint(100)\n            if (values.experiment?.start_date) {\n                actions.refreshExperimentResults(true)\n            }\n        },\n        endExperiment: async () => {\n            const endDate = dayjs()\n            actions.updateExperiment({ end_date: endDate.toISOString() })\n            const duration = endDate.diff(values.experiment?.start_date, 'second')\n            values.experiment &&\n                actions.reportExperimentCompleted(\n                    values.experiment,\n                    endDate,\n                    duration,\n                    values.isPrimaryMetricSignificant(0)\n                )\n        },\n        archiveExperiment: async () => {\n            actions.updateExperiment({ archived: true })\n            values.experiment && actions.reportExperimentArchived(values.experiment)\n        },\n        refreshExperimentResults: async ({ forceRefresh }) => {\n            actions.loadMetricResults(forceRefresh)\n            actions.loadSecondaryMetricResults(forceRefresh)\n            actions.loadExposures(forceRefresh)\n        },\n        updateExperimentGoal: async () => {\n            // Reset MDE to the recommended setting\n            actions.setExperiment({\n                parameters: {\n                    ...values.experiment.parameters,\n                    minimum_detectable_effect: undefined,\n                },\n            })\n\n            const { recommendedRunningTime, recommendedSampleSize, minimumDetectableEffect } = values\n\n            actions.updateExperiment({\n                metrics: values.experiment.metrics,\n                metrics_secondary: values.experiment.metrics_secondary,\n                parameters: {\n                    ...values.experiment?.parameters,\n                    recommended_running_time: recommendedRunningTime,\n                    recommended_sample_size: recommendedSampleSize,\n                    minimum_detectable_effect: minimumDetectableEffect,\n                },\n            })\n        },\n        updateExperimentCollectionGoal: async () => {\n            const { recommendedRunningTime, recommendedSampleSize, minimumDetectableEffect } = values\n\n            actions.updateExperiment({\n                parameters: {\n                    ...values.experiment?.parameters,\n                    recommended_running_time: recommendedRunningTime,\n                    recommended_sample_size: recommendedSampleSize,\n                    minimum_detectable_effect: minimumDetectableEffect || 0,\n                },\n            })\n        },\n        resetRunningExperiment: async () => {\n            actions.updateExperiment({ start_date: null, end_date: null, archived: false })\n            values.experiment && actions.reportExperimentReset(values.experiment)\n            actions.setMetricResults([])\n            actions.setSecondaryMetricResults([])\n        },\n        updateExperimentSuccess: async ({ experiment, payload }) => {\n            actions.updateExperiments(experiment)\n            if (experiment.start_date) {\n                const forceRefresh = payload?.start_date !== undefined\n                actions.refreshExperimentResults(forceRefresh)\n            }\n        },\n        setExperiment: async ({ experiment }) => {\n            const experimentEntitiesChanged =\n                (experiment.filters?.events && experiment.filters.events.length > 0) ||\n                (experiment.filters?.actions && experiment.filters.actions.length > 0) ||\n                (experiment.filters?.data_warehouse && experiment.filters.data_warehouse.length > 0)\n\n            if (!experiment.filters || Object.keys(experiment.filters).length === 0) {\n                return\n            }\n\n            if (experimentEntitiesChanged) {\n                actions.checkFlagImplementationWarning()\n            }\n        },\n        setExperimentValue: async ({ name, value }, breakpoint) => {\n            if (Array.isArray(name) && name[0] === 'feature_flag_key') {\n                actions.validateFeatureFlag(value)\n            }\n\n            await breakpoint(100)\n\n            if (name === 'filters') {\n                const experimentEntitiesChanged =\n                    (value?.events && value.events.length > 0) ||\n                    (value?.actions && value.actions.length > 0) ||\n                    (value?.data_warehouse && value.data_warehouse.length > 0)\n\n                if (!value || Object.keys(value).length === 0) {\n                    return\n                }\n\n                if (experimentEntitiesChanged) {\n                    actions.checkFlagImplementationWarning()\n                }\n            }\n        },\n        setExperimentValues: async ({ values }, breakpoint) => {\n            await breakpoint(100)\n\n            const experiment = values\n\n            const experimentEntitiesChanged =\n                (experiment.filters?.events && experiment.filters.events.length > 0) ||\n                (experiment.filters?.actions && experiment.filters.actions.length > 0) ||\n                (experiment.filters?.data_warehouse && experiment.filters.data_warehouse.length > 0)\n\n            if (!experiment.filters || Object.keys(experiment.filters).length === 0) {\n                return\n            }\n\n            if (experimentEntitiesChanged) {\n                actions.checkFlagImplementationWarning()\n            }\n        },\n        checkFlagImplementationWarning: async (_, breakpoint) => {\n            const experiment = values.experiment\n            const experimentEntitiesChanged =\n                (experiment.filters?.events && experiment.filters.events.length > 0) ||\n                (experiment.filters?.actions && experiment.filters.actions.length > 0) ||\n                (experiment.filters?.data_warehouse && experiment.filters.data_warehouse.length > 0)\n\n            if (!experiment.filters || Object.keys(experiment.filters).length === 0) {\n                return\n            }\n\n            if (experimentEntitiesChanged) {\n                const url = `/api/projects/${\n                    values.currentProjectId\n                }/experiments/requires_flag_implementation?${toParams(experiment.filters || {})}`\n                await breakpoint(100)\n\n                try {\n                    const response = await api.get(url)\n                    actions.setFlagImplementationWarning(response.result)\n                } catch (e) {\n                    // default to not showing the warning\n                    actions.setFlagImplementationWarning(false)\n                }\n            }\n        },\n        createExposureCohortSuccess: ({ exposureCohort }) => {\n            if (exposureCohort && exposureCohort.id !== 'new') {\n                cohortsModel.actions.cohortCreated(exposureCohort)\n                actions.reportExperimentExposureCohortCreated(values.experiment, exposureCohort)\n                actions.setExperiment({ exposure_cohort: exposureCohort.id })\n                lemonToast.success('Exposure cohort created successfully', {\n                    button: {\n                        label: 'View cohort',\n                        action: () => router.actions.push(urls.cohort(exposureCohort.id)),\n                    },\n                })\n            }\n        },\n        shipVariantSuccess: ({ payload }) => {\n            lemonToast.success('The selected variant has been shipped')\n            actions.closeShipVariantModal()\n            if (payload.shouldStopExperiment && !values.isExperimentStopped) {\n                actions.endExperiment()\n            }\n            actions.loadExperiment()\n            actions.reportExperimentVariantShipped(values.experiment)\n        },\n        shipVariantFailure: ({ error }) => {\n            lemonToast.error(error)\n            actions.closeShipVariantModal()\n        },\n        updateExperimentVariantImages: async ({ variantPreviewMediaIds }) => {\n            try {\n                const updatedParameters = {\n                    ...values.experiment.parameters,\n                    variant_screenshot_media_ids: variantPreviewMediaIds,\n                }\n                await api.update(`api/projects/${values.currentProjectId}/experiments/${values.experimentId}`, {\n                    parameters: updatedParameters,\n                })\n                actions.setExperiment({\n                    parameters: updatedParameters,\n                })\n            } catch (error) {\n                lemonToast.error('Failed to update experiment variant images')\n            }\n        },\n        updateDistributionModal: async ({ featureFlag }) => {\n            const { created_at, id, ...flag } = featureFlag\n\n            const preparedFlag = indexToVariantKeyFeatureFlagPayloads(flag)\n\n            const savedFlag = await api.update(\n                `api/projects/${values.currentProjectId}/feature_flags/${id}`,\n                preparedFlag\n            )\n\n            const updatedFlag = variantKeyToIndexFeatureFlagPayloads(savedFlag)\n            actions.updateFlag(updatedFlag)\n\n            actions.updateExperiment({\n                holdout_id: values.experiment.holdout_id,\n            })\n        },\n        addSharedMetricsToExperiment: async ({ sharedMetricIds, metadata }) => {\n            const existingMetricsIds = values.experiment.saved_metrics.map((sharedMetric) => ({\n                id: sharedMetric.saved_metric,\n                metadata: sharedMetric.metadata,\n            }))\n\n            const newMetricsIds = sharedMetricIds.map((id: SharedMetric['id']) => ({ id, metadata }))\n            newMetricsIds.forEach((metricId) => {\n                const metric = values.sharedMetrics.find((m: SharedMetric) => m.id === metricId.id)\n                if (metric) {\n                    actions.reportExperimentSharedMetricAssigned(values.experimentId, metric)\n                }\n            })\n            const combinedMetricsIds = [...existingMetricsIds, ...newMetricsIds]\n\n            await api.update(`api/projects/${values.currentProjectId}/experiments/${values.experimentId}`, {\n                saved_metrics_ids: combinedMetricsIds,\n            })\n\n            actions.loadExperiment()\n        },\n        removeSharedMetricFromExperiment: async ({ sharedMetricId }) => {\n            const sharedMetricsIds = values.experiment.saved_metrics\n                .filter((sharedMetric) => sharedMetric.saved_metric !== sharedMetricId)\n                .map((sharedMetric) => ({\n                    id: sharedMetric.saved_metric,\n                    metadata: sharedMetric.metadata,\n                }))\n            await api.update(`api/projects/${values.currentProjectId}/experiments/${values.experimentId}`, {\n                saved_metrics_ids: sharedMetricsIds,\n            })\n\n            actions.loadExperiment()\n        },\n        createExperimentDashboard: async () => {\n            actions.setIsCreatingExperimentDashboard(true)\n            try {\n                // 1. Create the dashboard\n                // 2. Create secondary metric insights in reverse order\n                // 3. Create primary metric insights in reverse order\n\n                const experimentUrl =\n                    window.location.origin + addProjectIdIfMissing(urls.experiment(values.experimentId))\n                const dashboard: DashboardType = await api.create(\n                    `api/environments/${teamLogic.values.currentTeamId}/dashboards/`,\n                    {\n                        name: 'Experiment: ' + values.experiment.name,\n                        description: `Dashboard for [${experimentUrl}](${experimentUrl})`,\n                        filters: {\n                            date_from: values.experiment.start_date,\n                            date_to: values.experiment.end_date,\n                            properties: [],\n                            breakdown_filter: {\n                                breakdown: '$feature/' + values.experiment.feature_flag_key,\n                                breakdown_type: 'event' as BreakdownType,\n                            },\n                        },\n                    } as Partial<DashboardType>\n                )\n\n                // Reverse order because adding an insight to the dashboard\n                // places it at the beginning of the list\n                for (const type of ['secondary', 'primary']) {\n                    const singleMetrics =\n                        type === 'secondary' ? values.experiment.metrics_secondary : values.experiment.metrics\n                    const sharedMetrics = values.experiment?.saved_metrics.filter(\n                        (sharedMetric) => sharedMetric.metadata.type === type\n                    )\n                    const metrics = [\n                        ...singleMetrics,\n                        ...sharedMetrics.map((m) => ({ name: m.name, ...m.query })),\n                    ].reverse()\n                    for (const query of metrics) {\n                        const insightQuery: InsightVizNode = {\n                            kind: NodeKind.InsightVizNode,\n                            source: (query.kind === NodeKind.ExperimentTrendsQuery\n                                ? query.count_query\n                                : query.funnels_query) as InsightQueryNode,\n                        }\n                        await api.create(`api/projects/${teamLogic.values.currentTeamId}/insights`, {\n                            name: query.name || undefined,\n                            query: insightQuery,\n                            dashboards: [dashboard.id],\n                        })\n                    }\n                }\n\n                actions.reportExperimentDashboardCreated(values.experiment, dashboard.id)\n\n                const dashboardUrl = window.location.origin + addProjectIdIfMissing(urls.dashboard(dashboard.id))\n                actions.updateExperiment({\n                    description:\n                        (values.experiment.description ? values.experiment.description + `\\n\\n` : '') +\n                        `Dashboard: [${dashboardUrl}](${dashboardUrl})`,\n                })\n\n                lemonToast.success('Dashboard created successfully', {\n                    button: {\n                        label: 'View dashboard',\n                        action: () => router.actions.push(`/dashboard/${dashboard.id}`),\n                    },\n                })\n            } catch (error: any) {\n                if (!isBreakpoint(error)) {\n                    const message = error.code && error.detail ? `${error.code}: ${error.detail}` : error\n                    lemonToast.error(`Could not create dashboard: ${message}`)\n                }\n            }\n            actions.setIsCreatingExperimentDashboard(false)\n        },\n        restoreUnmodifiedExperiment: () => {\n            if (values.unmodifiedExperiment) {\n                actions.setExperiment(structuredClone(values.unmodifiedExperiment))\n            }\n        },\n        validateFeatureFlag: async ({ featureFlagKey }: { featureFlagKey: string }, breakpoint) => {\n            await breakpoint(200)\n            const response = await api.get(\n                `api/projects/${values.currentProjectId}/feature_flags/?${toParams({ search: featureFlagKey })}`\n            )\n            const existingErrors = {\n                // :KLUDGE: If there is no name error, we don't want to trigger the 'required' error early\n                name: undefined,\n                ...values.experimentErrors,\n            }\n            if (response.results.length > 0) {\n                const matchingFlag = response.results.find((flag: FeatureFlagType) => flag.key === featureFlagKey)\n                if (matchingFlag) {\n                    let isValid\n                    try {\n                        isValid = featureFlagEligibleForExperiment(matchingFlag)\n                    } catch (error) {\n                        isValid = false\n                    }\n                    actions.setValidExistingFeatureFlag(isValid ? matchingFlag : null)\n                    actions.setFeatureFlagValidationError(\n                        isValid ? '' : 'Existing feature flag is not eligible for experiments.'\n                    )\n                    actions.setExperimentManualErrors({\n                        ...existingErrors,\n                        feature_flag_key: values.featureFlagValidationError || undefined,\n                    })\n                    return\n                }\n            }\n\n            actions.setValidExistingFeatureFlag(null)\n            actions.setFeatureFlagValidationError(validateFeatureFlagKey(featureFlagKey) || '')\n            actions.setExperimentManualErrors({\n                ...existingErrors,\n                feature_flag_key: values.featureFlagValidationError || undefined,\n            })\n        },\n        touchExperimentField: ({ key }) => {\n            // :KLUDGE: Persist the existing feature_flag_key validation when the field is blurred.\n            if (key === 'feature_flag_key') {\n                actions.setExperimentManualErrors({\n                    feature_flag_key: values.featureFlagValidationError || undefined,\n                })\n            }\n        },\n        loadMetricResults: async ({ refresh }: { refresh?: boolean }) => {\n            actions.setMetricResultsLoading(true)\n            actions.setMetricResults([])\n\n            let metrics = values.experiment?.metrics\n            const sharedMetrics = values.experiment?.saved_metrics\n                .filter((sharedMetric) => sharedMetric.metadata.type === 'primary')\n                .map((sharedMetric) => sharedMetric.query)\n            if (sharedMetrics) {\n                metrics = [...metrics, ...sharedMetrics]\n            }\n\n            await loadMetrics({\n                metrics,\n                experimentId: values.experimentId,\n                refresh,\n                onSetResults: actions.setMetricResults,\n                onSetErrors: actions.setPrimaryMetricsResultErrors,\n                onTimeout: actions.reportExperimentMetricTimeout,\n            })\n\n            actions.setMetricResultsLoading(false)\n        },\n        loadSecondaryMetricResults: async ({ refresh }: { refresh?: boolean }) => {\n            actions.setSecondaryMetricResultsLoading(true)\n            actions.setSecondaryMetricResults([])\n\n            let secondaryMetrics = values.experiment?.metrics_secondary\n            const sharedMetrics = values.experiment?.saved_metrics\n                .filter((sharedMetric) => sharedMetric.metadata.type === 'secondary')\n                .map((sharedMetric) => sharedMetric.query)\n            if (sharedMetrics) {\n                secondaryMetrics = [...secondaryMetrics, ...sharedMetrics]\n            }\n\n            await loadMetrics({\n                metrics: secondaryMetrics,\n                experimentId: values.experimentId,\n                refresh,\n                onSetResults: actions.setSecondaryMetricResults,\n                onSetErrors: actions.setSecondaryMetricsResultErrors,\n                onTimeout: actions.reportExperimentMetricTimeout,\n            })\n\n            actions.setSecondaryMetricResultsLoading(false)\n        },\n    })),\n    loaders(({ actions, props, values }) => ({\n        experiment: {\n            loadExperiment: async () => {\n                if (props.experimentId && props.experimentId !== 'new') {\n                    try {\n                        const response: Experiment = await api.get(\n                            `api/projects/${values.currentProjectId}/experiments/${props.experimentId}`\n                        )\n                        actions.setUnmodifiedExperiment(structuredClone(response))\n                        return response\n                    } catch (error: any) {\n                        if (error.status === 404) {\n                            actions.setExperimentMissing()\n                        } else {\n                            throw error\n                        }\n                    }\n                }\n                return NEW_EXPERIMENT\n            },\n            updateExperiment: async (update: Partial<Experiment>) => {\n                const response: Experiment = await api.update(\n                    `api/projects/${values.currentProjectId}/experiments/${values.experimentId}`,\n                    update\n                )\n                actions.setUnmodifiedExperiment(structuredClone(response))\n                return response\n            },\n        },\n        exposureCohort: [\n            null as CohortType | null,\n            {\n                createExposureCohort: async () => {\n                    if (props.experimentId && props.experimentId !== 'new' && props.experimentId !== 'web') {\n                        return (await api.experiments.createExposureCohort(props.experimentId)).cohort\n                    }\n                    return null\n                },\n            },\n        ],\n        featureFlag: [\n            null as FeatureFlagType | null,\n            {\n                shipVariant: async ({ selectedVariantKey, shouldStopExperiment }) => {\n                    if (!values.experiment.feature_flag) {\n                        throw new Error('Experiment does not have a feature flag linked')\n                    }\n\n                    const currentFlagFilters = values.experiment.feature_flag?.filters\n                    const newFilters = transformFiltersForWinningVariant(currentFlagFilters, selectedVariantKey)\n\n                    await api.update(\n                        `api/projects/${values.currentProjectId}/feature_flags/${values.experiment.feature_flag?.id}`,\n                        { filters: newFilters }\n                    )\n\n                    return shouldStopExperiment\n                },\n            },\n        ],\n        exposures: [\n            null as any,\n            {\n                loadExposures: async (refresh: boolean = false) => {\n                    const query = {\n                        kind: NodeKind.ExperimentExposureQuery,\n                        experiment_id: props.experimentId,\n                    }\n                    return await performQuery(query, undefined, refresh)\n                },\n            },\n        ],\n    })),\n    selectors({\n        props: [() => [(_, props) => props], (props) => props],\n        experimentId: [\n            () => [(_, props) => props.experimentId ?? 'new'],\n            (experimentId): Experiment['id'] => experimentId,\n        ],\n        getMetricType: [\n            () => [],\n            () =>\n                (\n                    metric: ExperimentMetric | ExperimentTrendsQuery | ExperimentFunnelsQuery | undefined\n                ): InsightType => {\n                    return metric &&\n                        ((metric?.kind === NodeKind.ExperimentMetric &&\n                            (metric.metric_type === ExperimentMetricType.COUNT ||\n                                metric.metric_type === ExperimentMetricType.CONTINUOUS)) ||\n                            metric?.kind === NodeKind.ExperimentTrendsQuery)\n                        ? InsightType.TRENDS\n                        : InsightType.FUNNELS\n                },\n        ],\n        getExperimentMetricType: [\n            () => [],\n            () =>\n                (metric: ExperimentMetric | undefined): ExperimentMetricType => {\n                    return metric?.metric_type || ExperimentMetricType.COUNT\n                },\n        ],\n        isExperimentRunning: [\n            (s) => [s.experiment],\n            (experiment): boolean => {\n                return !!experiment?.start_date\n            },\n        ],\n        isExperimentStopped: [\n            (s) => [s.experiment],\n            (experiment): boolean => {\n                return (\n                    !!experiment?.end_date &&\n                    dayjs().isSameOrAfter(dayjs(experiment.end_date), 'day') &&\n                    !experiment.archived\n                )\n            },\n        ],\n        breadcrumbs: [\n            (s) => [s.experiment, s.experimentId],\n            (experiment, experimentId): Breadcrumb[] => [\n                {\n                    key: Scene.Experiments,\n                    name: 'Experiments',\n                    path: urls.experiments(),\n                },\n                {\n                    key: [Scene.Experiment, experimentId],\n                    name: experiment?.name || '',\n                    onRename: async (name: string) => {\n                        // :KLUDGE: work around a type error when using asyncActions accessed via a callback passed to selectors()\n                        const logic = experimentLogic({ experimentId })\n                        await logic.asyncActions.updateExperiment({ name })\n                    },\n                },\n            ],\n        ],\n        variants: [\n            (s) => [s.experiment],\n            (experiment): MultivariateFlagVariant[] => {\n                return experiment?.parameters?.feature_flag_variants || []\n            },\n        ],\n        experimentMathAggregationForTrends: [\n            (s) => [s.experiment],\n            (experiment) => (): PropertyMathType | CountPerActorMathType | undefined => {\n                const query = experiment?.metrics?.[0] as ExperimentTrendsQuery\n                if (!query) {\n                    return undefined\n                }\n                const entities = query.count_query?.series || []\n\n                // Find out if we're using count per actor math aggregates averages per user\n                const userMathValue = entities.filter((entity) =>\n                    Object.values(CountPerActorMathType).includes(entity?.math as CountPerActorMathType)\n                )[0]?.math\n\n                // alternatively, if we're using property math\n                // remove 'sum' property math from the list of math types\n                // since we can handle that as a regular case\n                const targetValues = Object.values(PropertyMathType).filter((value) => value !== PropertyMathType.Sum)\n\n                const propertyMathValue = entities.filter((entity) =>\n                    targetValues.includes(entity?.math as PropertyMathType)\n                )[0]?.math\n\n                return (userMathValue ?? propertyMathValue) as PropertyMathType | CountPerActorMathType | undefined\n            },\n        ],\n        minimumDetectableEffect: [\n            (s) => [s.experiment, s.getMetricType, s.conversionMetrics, s.trendResults, s.firstPrimaryMetric],\n            (newExperiment, getMetricType, conversionMetrics, trendResults, firstPrimaryMetric): number => {\n                return (\n                    newExperiment?.parameters?.minimum_detectable_effect ||\n                    // :KLUDGE: extracted the method due to difficulties with logic tests\n                    getMinimumDetectableEffect(getMetricType(firstPrimaryMetric), conversionMetrics, trendResults) ||\n                    0\n                )\n            },\n        ],\n        minimumSampleSizePerVariant: [\n            (s) => [s.minimumDetectableEffect],\n            (mde) => (conversionRate: number) => {\n                // Using the rule of thumb: sampleSize = 16 * sigma^2 / (mde^2)\n                // refer https://en.wikipedia.org/wiki/Sample_size_determination with default beta and alpha\n                // The results are same as: https://www.evanmiller.org/ab-testing/sample-size.html\n                // and also: https://marketing.dynamicyield.com/ab-test-duration-calculator/\n                if (!mde) {\n                    return 0\n                }\n\n                return Math.ceil((1600 * conversionRate * (1 - conversionRate / 100)) / (mde * mde))\n            },\n        ],\n        isPrimaryMetricSignificant: [\n            (s) => [s.metricResults],\n            (\n                    metricResults: (\n                        | CachedExperimentQueryResponse\n                        | CachedExperimentFunnelsQueryResponse\n                        | CachedExperimentTrendsQueryResponse\n                        | null\n                    )[]\n                ) =>\n                (metricIndex: number = 0): boolean => {\n                    return metricResults?.[metricIndex]?.significant || false\n                },\n        ],\n        isSecondaryMetricSignificant: [\n            (s) => [s.secondaryMetricResults],\n            (\n                    secondaryMetricResults: (\n                        | CachedExperimentQueryResponse\n                        | CachedExperimentFunnelsQueryResponse\n                        | CachedExperimentTrendsQueryResponse\n                        | null\n                    )[]\n                ) =>\n                (metricIndex: number = 0): boolean => {\n                    return secondaryMetricResults?.[metricIndex]?.significant || false\n                },\n        ],\n        significanceDetails: [\n            (s) => [s.metricResults, s.experimentStatsVersion],\n            (\n                    metricResults: (\n                        | CachedExperimentQueryResponse\n                        | CachedExperimentFunnelsQueryResponse\n                        | CachedExperimentTrendsQueryResponse\n                        | null\n                    )[],\n                    experimentStatsVersion: number\n                ) =>\n                (metricIndex: number = 0): string => {\n                    const results = metricResults?.[metricIndex]\n\n                    if (results?.significance_code === ExperimentSignificanceCode.HighLoss) {\n                        return `This is because the expected loss in conversion is greater than 1% (current value is ${(\n                            (results as CachedExperimentFunnelsQueryResponse)?.expected_loss || 0\n                        )?.toFixed(2)}%).`\n                    }\n\n                    if (results?.significance_code === ExperimentSignificanceCode.HighPValue) {\n                        return `This is because the p value is greater than 0.05 (current value is ${\n                            (results as CachedExperimentTrendsQueryResponse)?.p_value?.toFixed(3) || 1\n                        }).`\n                    }\n\n                    if (results?.significance_code === ExperimentSignificanceCode.LowWinProbability) {\n                        if (experimentStatsVersion === 2) {\n                            return 'This is because no variant (control or test) has a win probability higher than 90%.'\n                        }\n                        return 'This is because the win probability of all test variants combined is less than 90%.'\n                    }\n\n                    if (results?.significance_code === ExperimentSignificanceCode.NotEnoughExposure) {\n                        return 'This is because we need at least 100 people per variant to declare significance.'\n                    }\n\n                    return ''\n                },\n        ],\n        recommendedSampleSize: [\n            (s) => [s.conversionMetrics, s.minimumSampleSizePerVariant, s.variants],\n            (conversionMetrics, minimumSampleSizePerVariant, variants): number => {\n                const conversionRate = conversionMetrics.totalRate * 100\n                const sampleSizePerVariant = minimumSampleSizePerVariant(conversionRate)\n                const sampleSize = sampleSizePerVariant * variants.length\n                return sampleSize\n            },\n        ],\n        recommendedRunningTime: [\n            (s) => [\n                s.experiment,\n                s.variants,\n                s.getMetricType,\n                s.firstPrimaryMetric,\n                s.funnelResults,\n                s.conversionMetrics,\n                s.expectedRunningTime,\n                s.trendResults,\n                s.minimumSampleSizePerVariant,\n                s.recommendedExposureForCountData,\n            ],\n            (\n                experiment,\n                variants,\n                getMetricType,\n                firstPrimaryMetric,\n                funnelResults,\n                conversionMetrics,\n                expectedRunningTime,\n                trendResults,\n                minimumSampleSizePerVariant,\n                recommendedExposureForCountData\n            ): number => {\n                if (getMetricType(firstPrimaryMetric) === InsightType.FUNNELS) {\n                    const currentDuration = dayjs().diff(dayjs(experiment?.start_date), 'hour')\n                    const funnelEntrants = funnelResults?.[0]?.count\n\n                    const conversionRate = conversionMetrics.totalRate * 100\n                    const sampleSizePerVariant = minimumSampleSizePerVariant(conversionRate)\n                    const funnelSampleSize = sampleSizePerVariant * variants.length\n                    if (experiment?.start_date) {\n                        return expectedRunningTime(funnelEntrants || 1, funnelSampleSize || 0, currentDuration)\n                    }\n                    return expectedRunningTime(funnelEntrants || 1, funnelSampleSize || 0)\n                }\n\n                const trendCount = trendResults[0]?.count\n                const runningTime = recommendedExposureForCountData(trendCount)\n                return runningTime\n            },\n        ],\n        recommendedExposureForCountData: [\n            (s) => [s.minimumDetectableEffect],\n            (mde) =>\n                (baseCountData: number): number => {\n                    // http://www.columbia.edu/~cjd11/charles_dimaggio/DIRE/styled-4/code-12/\n                    if (!mde) {\n                        return 0\n                    }\n\n                    const minCountData = (baseCountData * mde) / 100\n                    const lambda1 = baseCountData\n                    const lambda2 = minCountData + baseCountData\n\n                    // This is exposure in units of days\n                    return parseFloat(\n                        (\n                            4 /\n                            Math.pow(\n                                Math.sqrt(lambda1 / EXPERIMENT_DEFAULT_DURATION) -\n                                    Math.sqrt(lambda2 / EXPERIMENT_DEFAULT_DURATION),\n                                2\n                            )\n                        ).toFixed(1)\n                    )\n                },\n        ],\n        expectedRunningTime: [\n            () => [],\n            () =>\n                (entrants: number, sampleSize: number, duration: number = EXPERIMENT_DEFAULT_DURATION): number => {\n                    // recommended people / (actual people / day) = expected days\n                    return parseFloat((sampleSize / (entrants / duration)).toFixed(1))\n                },\n        ],\n        conversionRateForVariant: [\n            () => [],\n            () =>\n                (\n                    metricResult:\n                        | CachedExperimentQueryResponse\n                        | CachedExperimentFunnelsQueryResponse\n                        | CachedExperimentTrendsQueryResponse\n                        | null,\n                    variantKey: string\n                ): number | null => {\n                    if (!metricResult) {\n                        return null\n                    }\n\n                    if (\n                        metricResult.kind === NodeKind.ExperimentQuery &&\n                        metricResult.metric.metric_type === ExperimentMetricType.BINOMIAL\n                    ) {\n                        const variants = metricResult.variants as FunnelExperimentVariant[]\n                        const variantResults = variants.find((variant) => variant.key === variantKey)\n\n                        if (!variantResults) {\n                            return null\n                        }\n                        return (\n                            (variantResults.success_count /\n                                (variantResults.success_count + variantResults.failure_count)) *\n                            100\n                        )\n                    } else if (metricResult.kind === NodeKind.ExperimentFunnelsQuery && metricResult.insight) {\n                        const variantResults = (metricResult.insight as FunnelStep[][]).find(\n                            (variantFunnel: FunnelStep[]) => {\n                                const breakdownValue = variantFunnel[0]?.breakdown_value\n                                return Array.isArray(breakdownValue) && breakdownValue[0] === variantKey\n                            }\n                        )\n\n                        if (!variantResults) {\n                            return null\n                        }\n\n                        return (variantResults[variantResults.length - 1].count / variantResults[0].count) * 100\n                    }\n\n                    return null\n                },\n        ],\n        credibleIntervalForVariant: [\n            () => [],\n            () =>\n                (\n                    metricResult:\n                        | CachedExperimentQueryResponse\n                        | CachedExperimentFunnelsQueryResponse\n                        | CachedExperimentTrendsQueryResponse\n                        | null,\n                    variantKey: string,\n                    metricType: InsightType\n                ): [number, number] | null => {\n                    const credibleInterval = metricResult?.credible_intervals?.[variantKey]\n                    if (!credibleInterval) {\n                        return null\n                    }\n\n                    if (metricType === InsightType.FUNNELS) {\n                        const controlVariant = (metricResult.variants as FunnelExperimentVariant[]).find(\n                            ({ key }) => key === 'control'\n                        ) as FunnelExperimentVariant\n                        const controlConversionRate =\n                            controlVariant.success_count / (controlVariant.success_count + controlVariant.failure_count)\n\n                        if (!controlConversionRate) {\n                            return null\n                        }\n\n                        // Calculate the percentage difference between the credible interval bounds of the variant and the control's conversion rate.\n                        // This represents the range in which the true percentage change relative to the control is likely to fall.\n                        const lowerBound = ((credibleInterval[0] - controlConversionRate) / controlConversionRate) * 100\n                        const upperBound = ((credibleInterval[1] - controlConversionRate) / controlConversionRate) * 100\n                        return [lowerBound, upperBound]\n                    }\n\n                    const controlVariant = (metricResult.variants as TrendExperimentVariant[]).find(\n                        ({ key }) => key === 'control'\n                    ) as TrendExperimentVariant\n\n                    const controlMean = controlVariant.count / controlVariant.absolute_exposure\n                    if (!controlMean) {\n                        return null\n                    }\n\n                    // Calculate the percentage difference between the credible interval bounds of the variant and the control's mean.\n                    // This represents the range in which the true percentage change relative to the control is likely to fall.\n                    const relativeLowerBound = ((credibleInterval[0] - controlMean) / controlMean) * 100\n                    const relativeUpperBound = ((credibleInterval[1] - controlMean) / controlMean) * 100\n                    return [relativeLowerBound, relativeUpperBound]\n                },\n        ],\n        getIndexForVariant: [\n            (s) => [s.getMetricType, s.firstPrimaryMetric],\n            (getMetricType, firstPrimaryMetric) =>\n                (\n                    metricResult:\n                        | CachedExperimentQueryResponse\n                        | CachedExperimentTrendsQueryResponse\n                        | CachedExperimentFunnelsQueryResponse\n                        | null,\n                    variant: string\n                ): number | null => {\n                    // Ensures we get the right index from results, so the UI can\n                    // display the right colour for the variant\n                    if (!metricResult || !metricResult.insight) {\n                        return null\n                    }\n\n                    let index = -1\n                    if (getMetricType(firstPrimaryMetric) === InsightType.FUNNELS) {\n                        // Funnel Insight is displayed in order of decreasing count\n                        index = (Array.isArray(metricResult.insight) ? [...metricResult.insight] : [])\n                            .sort((a, b) => {\n                                const aCount = (a && Array.isArray(a) && a[0]?.count) || 0\n                                const bCount = (b && Array.isArray(b) && b[0]?.count) || 0\n                                return bCount - aCount\n                            })\n                            .findIndex((variantFunnel) => {\n                                if (!Array.isArray(variantFunnel) || !variantFunnel[0]?.breakdown_value) {\n                                    return false\n                                }\n                                const breakdownValue = variantFunnel[0].breakdown_value\n                                return Array.isArray(breakdownValue) && breakdownValue[0] === variant\n                            })\n                    } else {\n                        index = (metricResult.insight as TrendResult[]).findIndex(\n                            (variantTrend: TrendResult) => variantTrend.breakdown_value === variant\n                        )\n                    }\n                    const result = index === -1 ? null : index\n\n                    if (result !== null && getMetricType(firstPrimaryMetric) === InsightType.FUNNELS) {\n                        return result + 1\n                    }\n                    return result\n                },\n        ],\n        countDataForVariant: [\n            (s) => [s.experimentMathAggregationForTrends],\n            (experimentMathAggregationForTrends) =>\n                (\n                    metricResult:\n                        | CachedExperimentQueryResponse\n                        | CachedExperimentTrendsQueryResponse\n                        | CachedExperimentFunnelsQueryResponse\n                        | null,\n                    variant: string,\n                    type: 'primary' | 'secondary' = 'primary'\n                ): number | null => {\n                    if (!metricResult) {\n                        return null\n                    }\n\n                    if ('kind' in metricResult && metricResult.kind === NodeKind.ExperimentQuery) {\n                        const variantResults = (\n                            metricResult.variants as Array<{ key: string } & Record<string, any>>\n                        ).find((variantData) => variantData.key === variant)\n                        // NOTE: Unfortunately, there does not seem to be a better way at the moment to figure out which type it is.\n                        // Something we can improve later when we replace the ExperimentVariantTrendsBaseStats with a new type / interface.\n                        if (variantResults && 'success_count' in variantResults) {\n                            return variantResults.success_count + variantResults.failure_count\n                        } else if (variantResults && 'count' in variantResults) {\n                            return variantResults.count\n                        }\n                        return null\n                    }\n\n                    const usingMathAggregationType = type === 'primary' ? experimentMathAggregationForTrends() : false\n                    if (!metricResult.insight) {\n                        return null\n                    }\n                    const variantResults = (metricResult.insight as TrendResult[]).find(\n                        (variantTrend: TrendResult) => variantTrend.breakdown_value === variant\n                    )\n                    if (!variantResults) {\n                        return null\n                    }\n\n                    let result = variantResults.count\n\n                    if (usingMathAggregationType) {\n                        // TODO: Aggregate end result appropriately for nth percentile\n                        if (\n                            [\n                                CountPerActorMathType.Average,\n                                CountPerActorMathType.Median,\n                                PropertyMathType.Average,\n                                PropertyMathType.Median,\n                            ].includes(usingMathAggregationType)\n                        ) {\n                            result = variantResults.count / variantResults.data.length\n                        } else if (\n                            [CountPerActorMathType.Maximum, PropertyMathType.Maximum].includes(usingMathAggregationType)\n                        ) {\n                            result = Math.max(...variantResults.data)\n                        } else if (\n                            [CountPerActorMathType.Minimum, PropertyMathType.Minimum].includes(usingMathAggregationType)\n                        ) {\n                            result = Math.min(...variantResults.data)\n                        }\n                    }\n\n                    return result\n                },\n        ],\n        exposureCountDataForVariant: [\n            () => [],\n            () =>\n                (\n                    metricResult:\n                        | CachedExperimentQueryResponse\n                        | CachedExperimentTrendsQueryResponse\n                        | CachedExperimentFunnelsQueryResponse\n                        | null,\n                    variant: string\n                ): number | null => {\n                    if (!metricResult || !metricResult.variants) {\n                        return null\n                    }\n\n                    if ('kind' in metricResult && metricResult.kind === NodeKind.ExperimentQuery) {\n                        const variantResults = (\n                            metricResult.variants as Array<{ key: string; exposure?: number }>\n                        ).find((variantData) => variantData.key === variant)\n                        return variantResults?.exposure ?? null\n                    }\n\n                    const variantResults = (metricResult.variants as TrendExperimentVariant[]).find(\n                        (variantTrend: TrendExperimentVariant) => variantTrend.key === variant\n                    )\n                    if (!variantResults || !variantResults.absolute_exposure) {\n                        return null\n                    }\n\n                    return variantResults.absolute_exposure\n                },\n        ],\n        getHighestProbabilityVariant: [\n            () => [],\n            () =>\n                (\n                    results:\n                        | CachedExperimentQueryResponse\n                        | CachedExperimentTrendsQueryResponse\n                        | CachedExperimentFunnelsQueryResponse\n                        | null\n                ) => {\n                    if (results && results.probability) {\n                        const maxValue = Math.max(...Object.values(results.probability))\n                        return Object.keys(results.probability).find(\n                            (key) => Math.abs(results.probability[key] - maxValue) < Number.EPSILON\n                        )\n                    }\n                },\n        ],\n        tabularExperimentResults: [\n            (s) => [s.experiment, s.metricResults, s.secondaryMetricResults, s.getMetricType],\n            (\n                    experiment,\n                    metricResults: (\n                        | CachedExperimentQueryResponse\n                        | CachedExperimentFunnelsQueryResponse\n                        | CachedExperimentTrendsQueryResponse\n                        | null\n                    )[],\n                    secondaryMetricResults: (\n                        | CachedExperimentQueryResponse\n                        | CachedExperimentFunnelsQueryResponse\n                        | CachedExperimentTrendsQueryResponse\n                        | null\n                    )[],\n                    getMetricType\n                ) =>\n                (metricIndex: number = 0, isSecondary: boolean = false): any[] => {\n                    const tabularResults = []\n                    const metricType = isSecondary\n                        ? getMetricType(experiment.metrics_secondary[metricIndex])\n                        : getMetricType(experiment.metrics[metricIndex])\n                    const result = isSecondary ? secondaryMetricResults[metricIndex] : metricResults[metricIndex]\n\n                    if (result) {\n                        for (const variantObj of result.variants) {\n                            if (metricType === InsightType.FUNNELS) {\n                                const { key, success_count, failure_count } = variantObj as FunnelExperimentVariant\n                                tabularResults.push({ key, success_count, failure_count })\n                            } else if (metricType === InsightType.TRENDS) {\n                                const { key, count, exposure, absolute_exposure } = variantObj as TrendExperimentVariant\n                                tabularResults.push({ key, count, exposure, absolute_exposure })\n                            }\n                        }\n                    }\n\n                    if (experiment.feature_flag?.filters.multivariate?.variants) {\n                        for (const { key } of experiment.feature_flag.filters.multivariate.variants) {\n                            if (tabularResults.find((variantObj) => variantObj.key === key)) {\n                                continue\n                            }\n\n                            if (metricType === InsightType.FUNNELS) {\n                                tabularResults.push({ key, success_count: null, failure_count: null })\n                            } else if (metricType === InsightType.TRENDS) {\n                                tabularResults.push({ key, count: null, exposure: null, absolute_exposure: null })\n                            }\n                        }\n                    }\n\n                    return tabularResults\n                },\n        ],\n        sortedWinProbabilities: [\n            (s) => [s.metricResults, s.conversionRateForVariant],\n            (\n                    metricResults: (\n                        | CachedExperimentQueryResponse\n                        | CachedExperimentFunnelsQueryResponse\n                        | CachedExperimentTrendsQueryResponse\n                        | null\n                    )[],\n                    conversionRateForVariant\n                ) =>\n                (metricIndex: number = 0) => {\n                    const result = metricResults?.[metricIndex]\n\n                    if (!result || !result.probability) {\n                        return []\n                    }\n\n                    return Object.keys(result.probability)\n                        .map((key) => ({\n                            key,\n                            winProbability: result.probability[key],\n                            conversionRate: conversionRateForVariant(result, key),\n                        }))\n                        .sort((a, b) => b.winProbability - a.winProbability)\n                },\n        ],\n        funnelResultsPersonsTotal: [\n            (s) => [s.experiment, s.metricResults, s.getMetricType],\n            (\n                    experiment,\n                    metricResults: (\n                        | CachedExperimentQueryResponse\n                        | CachedExperimentFunnelsQueryResponse\n                        | CachedExperimentTrendsQueryResponse\n                        | null\n                    )[],\n                    getMetricType\n                ) =>\n                (metricIndex: number = 0): number => {\n                    const result = metricResults?.[metricIndex]\n\n                    if (getMetricType(experiment.metrics[metricIndex]) !== InsightType.FUNNELS || !result?.insight) {\n                        return 0\n                    }\n\n                    let sum = 0\n                    result.insight.forEach((variantResult) => {\n                        if (variantResult[0]?.count) {\n                            sum += variantResult[0].count\n                        }\n                    })\n                    return sum\n                },\n        ],\n        actualRunningTime: [\n            (s) => [s.experiment],\n            (experiment: Experiment): number => {\n                if (!experiment.start_date) {\n                    return 0\n                }\n\n                if (experiment.end_date) {\n                    return dayjs(experiment.end_date).diff(experiment.start_date, 'day')\n                }\n\n                return dayjs().diff(experiment.start_date, 'day')\n            },\n        ],\n        isSingleVariantShipped: [\n            (s) => [s.experiment],\n            (experiment: Experiment): boolean => {\n                const filters = experiment.feature_flag?.filters\n\n                return (\n                    !!filters &&\n                    Array.isArray(filters.groups?.[0]?.properties) &&\n                    filters.groups?.[0]?.properties?.length === 0 &&\n                    filters.groups?.[0]?.rollout_percentage === 100 &&\n                    (filters.multivariate?.variants?.some(({ rollout_percentage }) => rollout_percentage === 100) ||\n                        false)\n                )\n            },\n        ],\n        hasPrimaryMetricSet: [\n            (s) => [s.primaryMetricsLengthWithSharedMetrics],\n            (primaryMetricsLengthWithSharedMetrics): boolean => {\n                return primaryMetricsLengthWithSharedMetrics > 0\n            },\n        ],\n        firstPrimaryMetric: [\n            (s) => [s.experiment],\n            (experiment: Experiment): ExperimentMetric | ExperimentTrendsQuery | ExperimentFunnelsQuery | undefined => {\n                if (experiment.metrics.length) {\n                    return experiment.metrics[0]\n                }\n                const primaryMetric = experiment.saved_metrics.find((metric) => metric.metadata.type === 'primary')\n                if (primaryMetric) {\n                    return primaryMetric.query\n                }\n            },\n        ],\n        experimentStatsVersion: [\n            (s) => [s.experiment],\n            (experiment: Experiment): number => {\n                return experiment.stats_config?.version || 1\n            },\n        ],\n        primaryMetricsLengthWithSharedMetrics: [\n            (s) => [s.experiment],\n            (experiment: Experiment): number => {\n                return (\n                    experiment.metrics.length +\n                    experiment.saved_metrics.filter((savedMetric) => savedMetric.metadata.type === 'primary').length\n                )\n            },\n        ],\n        secondaryMetricsLengthWithSharedMetrics: [\n            (s) => [s.experiment],\n            (experiment: Experiment): number => {\n                return (\n                    experiment.metrics_secondary.length +\n                    experiment.saved_metrics.filter((savedMetric) => savedMetric.metadata.type === 'secondary').length\n                )\n            },\n        ],\n        compatibleSharedMetrics: [\n            (s) => [s.sharedMetrics, s.shouldUseExperimentMetrics],\n            (sharedMetrics: SharedMetric[], shouldUseExperimentMetrics: boolean): SharedMetric[] => {\n                if (!sharedMetrics) {\n                    return []\n                }\n                if (shouldUseExperimentMetrics) {\n                    return sharedMetrics.filter((metric) => metric.query.kind === NodeKind.ExperimentMetric)\n                }\n                return sharedMetrics.filter((metric) => metric.query.kind !== NodeKind.ExperimentMetric)\n            },\n        ],\n        shouldUseExperimentMetrics: [\n            (s) => [s.experiment, s.featureFlags],\n            (experiment: Experiment, featureFlags: Record<string, boolean>): boolean => {\n                const allMetrics = [...experiment.metrics, ...experiment.metrics_secondary, ...experiment.saved_metrics]\n                const hasExperimentMetrics = allMetrics.some((query) => query.kind === NodeKind.ExperimentMetric)\n                const hasLegacyMetrics = allMetrics.some(\n                    (query) =>\n                        query.kind === NodeKind.ExperimentTrendsQuery || query.kind === NodeKind.ExperimentFunnelsQuery\n                )\n                if (hasExperimentMetrics) {\n                    return true\n                }\n                if (hasLegacyMetrics) {\n                    return false\n                }\n                return featureFlags[FEATURE_FLAGS.EXPERIMENTS_NEW_QUERY_RUNNER]\n            },\n        ],\n    }),\n    forms(({ actions }) => ({\n        experiment: {\n            options: { showErrorsOnTouch: true },\n            defaults: { ...NEW_EXPERIMENT } as Experiment,\n            errors: ({ name, parameters }) => ({\n                name: !name && 'Please enter a name',\n                // feature_flag_key is handled asynchronously\n                parameters: {\n                    feature_flag_variants: parameters.feature_flag_variants?.map(({ key }) => ({\n                        key: !key.match?.(/^([A-z]|[a-z]|[0-9]|-|_)+$/)\n                            ? 'Only letters, numbers, hyphens (-) & underscores (_) are allowed.'\n                            : undefined,\n                    })),\n                },\n            }),\n            submit: () => actions.createExperiment(true),\n        },\n    })),\n    urlToAction(({ actions, values }) => ({\n        '/experiments/:id': ({ id }, query, __, currentLocation, previousLocation) => {\n            const didPathChange = currentLocation.initial || currentLocation.pathname !== previousLocation?.pathname\n\n            actions.setEditExperiment(false)\n\n            if (id && didPathChange) {\n                const parsedId = id === 'new' ? 'new' : parseInt(id)\n                if (parsedId === 'new') {\n                    actions.resetExperiment({\n                        ...NEW_EXPERIMENT,\n                        metrics: query.metric ? [query.metric] : [],\n                        name: query.name ?? '',\n                    })\n                }\n                if (parsedId !== 'new' && parsedId === values.experimentId) {\n                    actions.loadExperiment()\n                    if (values.isExperimentRunning) {\n                        actions.loadExposures()\n                    }\n                }\n            }\n        },\n    })),\n])\n", "import { actions, afterMount, connect, kea, key, listeners, path, props, reducers, selectors } from 'kea'\nimport { DeepPartialMap, forms, ValidationErrorType } from 'kea-forms'\nimport { loaders } from 'kea-loaders'\nimport { router, urlToAction } from 'kea-router'\nimport api, { PaginatedResponse } from 'lib/api'\nimport { dayjs } from 'lib/dayjs'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast/LemonToast'\nimport { featureFlagLogic as enabledFeaturesLogic } from 'lib/logic/featureFlagLogic'\nimport { sum, toParams } from 'lib/utils'\nimport { deleteWithUndo } from 'lib/utils/deleteWithUndo'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\nimport { ProductIntentContext } from 'lib/utils/product-intents'\nimport { NEW_EARLY_ACCESS_FEATURE } from 'products/early_access_features/frontend/earlyAccessFeatureLogic'\nimport { dashboardsLogic } from 'scenes/dashboard/dashboards/dashboardsLogic'\nimport { newDashboardLogic } from 'scenes/dashboard/newDashboardLogic'\nimport { experimentLogic } from 'scenes/experiments/experimentLogic'\nimport { featureFlagsLogic, FeatureFlagsTab } from 'scenes/feature-flags/featureFlagsLogic'\nimport { filterTrendsClientSideParams } from 'scenes/insights/sharedUtils'\nimport { cleanFilters } from 'scenes/insights/utils/cleanFilters'\nimport { projectLogic } from 'scenes/projectLogic'\nimport { Scene } from 'scenes/sceneTypes'\nimport { NEW_SURVEY, NewSurvey } from 'scenes/surveys/constants'\nimport { urls } from 'scenes/urls'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { activationLogic, ActivationTask } from '~/layout/navigation-3000/sidepanel/panels/activation/activationLogic'\nimport { sidePanelStateLogic } from '~/layout/navigation-3000/sidepanel/sidePanelStateLogic'\nimport { SIDE_PANEL_CONTEXT_KEY, SidePanelSceneContext } from '~/layout/navigation-3000/sidepanel/types'\nimport { groupsModel } from '~/models/groupsModel'\nimport { getQueryBasedInsightModel } from '~/queries/nodes/InsightViz/utils'\nimport {\n    ActivityScope,\n    AvailableFeature,\n    Breadcrumb,\n    CohortType,\n    DashboardBasicType,\n    EarlyAccessFeatureType,\n    FeatureFlagGroupType,\n    FeatureFlagRollbackConditions,\n    FeatureFlagStatusResponse,\n    FeatureFlagType,\n    FilterLogicalOperator,\n    FilterType,\n    InsightModel,\n    InsightType,\n    JsonType,\n    MultivariateFlagOptions,\n    MultivariateFlagVariant,\n    NewEarlyAccessFeatureType,\n    OrganizationFeatureFlag,\n    ProductKey,\n    PropertyFilterType,\n    PropertyOperator,\n    QueryBasedInsightModel,\n    RecordingUniversalFilters,\n    RolloutConditionType,\n    ScheduledChangeOperationType,\n    ScheduledChangeType,\n    Survey,\n    SurveyQuestionType,\n} from '~/types'\n\nimport { organizationLogic } from '../organizationLogic'\nimport { teamLogic } from '../teamLogic'\nimport type { featureFlagLogicType } from './featureFlagLogicType'\nimport { featureFlagPermissionsLogic } from './featureFlagPermissionsLogic'\n\nexport type ScheduleFlagPayload = Pick<FeatureFlagType, 'filters' | 'active'>\n\nconst getDefaultRollbackCondition = (): FeatureFlagRollbackConditions => ({\n    operator: 'gt',\n    threshold_type: RolloutConditionType.Sentry,\n    threshold: 50,\n    threshold_metric: {\n        ...cleanFilters({\n            insight: InsightType.TRENDS,\n            date_from: dayjs().subtract(7, 'day').format('YYYY-MM-DDTHH:mm'),\n            date_to: dayjs().endOf('d').format('YYYY-MM-DDTHH:mm'),\n        }),\n    },\n})\n\nconst NEW_FLAG: FeatureFlagType = {\n    id: null,\n    created_at: null,\n    key: '',\n    name: '',\n    filters: {\n        groups: [{ properties: [], rollout_percentage: undefined, variant: null }],\n        multivariate: null,\n        payloads: {},\n    },\n    deleted: false,\n    active: true,\n    created_by: null,\n    is_simple_flag: false,\n    rollout_percentage: null,\n    ensure_experience_continuity: false,\n    experiment_set: null,\n    features: [],\n    rollback_conditions: [],\n    surveys: null,\n    performed_rollback: false,\n    can_edit: true,\n    user_access_level: 'editor',\n    tags: [],\n    is_remote_configuration: false,\n    has_encrypted_payloads: false,\n    status: 'ACTIVE',\n}\nconst NEW_VARIANT = {\n    key: '',\n    name: '',\n    rollout_percentage: 0,\n}\nconst EMPTY_MULTIVARIATE_OPTIONS: MultivariateFlagOptions = {\n    variants: [\n        {\n            key: '',\n            name: '',\n            rollout_percentage: 100,\n        },\n    ],\n}\n\n/** Check whether a string is a valid feature flag key. If not, a reason string is returned - otherwise undefined. */\nexport function validateFeatureFlagKey(key: string): string | undefined {\n    return !key\n        ? 'Please set a key'\n        : !key.match?.(/^([A-z]|[a-z]|[0-9]|-|_)+$/)\n        ? 'Only letters, numbers, hyphens (-) & underscores (_) are allowed.'\n        : undefined\n}\n\nfunction validatePayloadRequired(is_remote_configuration: boolean, payload?: JsonType): string | undefined {\n    if (!is_remote_configuration) {\n        return undefined\n    }\n\n    return payload === undefined ? 'Payload is required for remote configuration flags.' : undefined\n}\n\nexport interface FeatureFlagLogicProps {\n    id: number | 'new' | 'link'\n}\n\n// KLUDGE: Payloads are returned in a <variant-key>: <payload> mapping.\n// This doesn't work for forms because variant-keys can be updated too which would invalidate the dictionary entry.\n// If a multivariant flag is returned, the payload dictionary will be transformed to be <variant-key-index>: <payload>\nexport const variantKeyToIndexFeatureFlagPayloads = (flag: FeatureFlagType): FeatureFlagType => {\n    if (!flag.filters.multivariate) {\n        return flag\n    }\n\n    const newPayloads: Record<number, JsonType> = {}\n    flag.filters.multivariate?.variants.forEach((variant, index) => {\n        if (flag.filters.payloads?.[variant.key] !== undefined) {\n            newPayloads[index] = flag.filters.payloads[variant.key]\n        }\n    })\n    return {\n        ...flag,\n        filters: {\n            ...flag.filters,\n            payloads: newPayloads,\n        },\n    }\n}\n\nexport const indexToVariantKeyFeatureFlagPayloads = (flag: Partial<FeatureFlagType>): Partial<FeatureFlagType> => {\n    if (flag.filters?.multivariate) {\n        const newPayloads: Record<string, JsonType> = {}\n        flag.filters.multivariate.variants.forEach(({ key }, index) => {\n            if (flag.filters?.payloads?.[index] !== undefined) {\n                newPayloads[key] = flag.filters.payloads[index]\n            }\n        })\n        return {\n            ...flag,\n            filters: {\n                ...flag.filters,\n                payloads: newPayloads,\n            },\n        }\n    }\n    if (flag.filters && !flag.filters.multivariate) {\n        let cleanedPayloadValue = {}\n        if (flag.filters.payloads?.['true']) {\n            cleanedPayloadValue = { true: flag.filters.payloads['true'] }\n        }\n        return {\n            ...flag,\n            filters: {\n                ...flag.filters,\n                payloads: cleanedPayloadValue,\n            },\n        }\n    }\n    return flag\n}\n\nexport const getRecordingFilterForFlagVariant = (\n    flagKey: string,\n    variantKey: string | null,\n    hasEnrichedAnalytics?: boolean\n): Partial<RecordingUniversalFilters> => {\n    return {\n        filter_group: {\n            type: FilterLogicalOperator.And,\n            values: [\n                {\n                    type: FilterLogicalOperator.And,\n                    values: [\n                        hasEnrichedAnalytics\n                            ? {\n                                  id: '$feature_interaction',\n                                  type: 'events',\n                                  order: 0,\n                                  name: '$feature_interaction',\n                                  properties: [\n                                      {\n                                          key: 'feature_flag',\n                                          value: [flagKey],\n                                          operator: PropertyOperator.Exact,\n                                          type: PropertyFilterType.Event,\n                                      },\n                                  ],\n                              }\n                            : {\n                                  type: PropertyFilterType.Event,\n                                  key: `$feature/${flagKey}`,\n                                  operator: PropertyOperator.Exact,\n                                  value: [variantKey ? variantKey : 'true'],\n                              },\n                    ],\n                },\n            ],\n        },\n    }\n}\n\nexport const featureFlagLogic = kea<featureFlagLogicType>([\n    path(['scenes', 'feature-flags', 'featureFlagLogic']),\n    props({} as FeatureFlagLogicProps),\n    key(({ id }) => id ?? 'unknown'),\n    connect((props: FeatureFlagLogicProps) => ({\n        values: [\n            teamLogic,\n            ['currentTeam', 'currentTeamId'],\n            projectLogic,\n            ['currentProjectId'],\n            groupsModel,\n            ['aggregationLabel'],\n            userLogic,\n            ['hasAvailableFeature'],\n            dashboardsLogic,\n            ['dashboards'],\n            organizationLogic,\n            ['currentOrganization'],\n            enabledFeaturesLogic,\n            ['featureFlags as enabledFeatures'],\n        ],\n        actions: [\n            newDashboardLogic({ featureFlagId: typeof props.id === 'number' ? props.id : undefined }),\n            ['submitNewDashboardSuccessWithResult'],\n            featureFlagsLogic,\n            ['updateFlag', 'deleteFlag'],\n            sidePanelStateLogic,\n            ['closeSidePanel'],\n            teamLogic,\n            ['addProductIntent'],\n        ],\n    })),\n    actions({\n        setFeatureFlag: (featureFlag: FeatureFlagType) => ({ featureFlag }),\n        setFeatureFlagFilters: (filters: FeatureFlagType['filters'], errors: any) => ({ filters, errors }),\n        setActiveTab: (tab: FeatureFlagsTab) => ({ tab }),\n        setFeatureFlagMissing: true,\n        addRollbackCondition: true,\n        removeRollbackCondition: (index: number) => ({ index }),\n        deleteFeatureFlag: (featureFlag: Partial<FeatureFlagType>) => ({ featureFlag }),\n        restoreFeatureFlag: (featureFlag: Partial<FeatureFlagType>) => ({ featureFlag }),\n        setRemoteConfigEnabled: (enabled: boolean) => ({ enabled }),\n        resetEncryptedPayload: () => ({}),\n        setMultivariateEnabled: (enabled: boolean) => ({ enabled }),\n        setMultivariateOptions: (multivariateOptions: MultivariateFlagOptions | null) => ({ multivariateOptions }),\n        addVariant: true,\n        duplicateVariant: (index: number) => ({ index }),\n        removeVariant: (index: number) => ({ index }),\n        editFeatureFlag: (editing: boolean) => ({ editing }),\n        distributeVariantsEqually: true,\n        loadInsightAtIndex: (index: number, filters: Partial<FilterType>) => ({ index, filters }),\n        setInsightResultAtIndex: (index: number, average: number) => ({ index, average }),\n        loadAllInsightsForFlag: true,\n        generateUsageDashboard: true,\n        enrichUsageDashboard: true,\n        setCopyDestinationProject: (id: number | null) => ({ id }),\n        setScheduleDateMarker: (dateMarker: any) => ({ dateMarker }),\n        setSchedulePayload: (\n            filters: FeatureFlagType['filters'] | null,\n            active: FeatureFlagType['active'] | null,\n            errors?: any\n        ) => ({ filters, active, errors }),\n        setScheduledChangeOperation: (changeType: ScheduledChangeOperationType) => ({ changeType }),\n        setAccessDeniedToFeatureFlag: true,\n    }),\n    forms(({ actions, values }) => ({\n        featureFlag: {\n            defaults: {\n                ...NEW_FLAG,\n                ensure_experience_continuity: values.currentTeam?.flags_persistence_default || false,\n            },\n            errors: ({ key, filters, is_remote_configuration }) => {\n                return {\n                    key: validateFeatureFlagKey(key),\n                    filters: {\n                        multivariate: {\n                            variants: filters?.multivariate?.variants?.map(\n                                ({ key: variantKey }: MultivariateFlagVariant) => ({\n                                    key: validateFeatureFlagKey(variantKey),\n                                })\n                            ),\n                        },\n                        groups: values.propertySelectErrors as DeepPartialMap<\n                            FeatureFlagGroupType,\n                            ValidationErrorType\n                        >[],\n                        payloads: {\n                            true: validatePayloadRequired(is_remote_configuration, filters?.payloads?.['true']),\n                        } as any,\n                        // Forced any cast necessary to prevent Kea's typechecking from raising \"Type instantiation\n                        // is excessively deep and possibly infinite\" error\n                    },\n                }\n            },\n            submit: (featureFlag) => {\n                actions.saveFeatureFlag(featureFlag)\n            },\n        },\n    })),\n    reducers({\n        featureFlag: [\n            { ...NEW_FLAG } as FeatureFlagType,\n            {\n                setFeatureFlag: (_, { featureFlag }) => {\n                    return featureFlag\n                },\n                setFeatureFlagFilters: (state, { filters }) => {\n                    return { ...state, filters }\n                },\n                addRollbackCondition: (state) => {\n                    if (!state) {\n                        return state\n                    }\n                    return {\n                        ...state,\n                        rollback_conditions: [...state.rollback_conditions, getDefaultRollbackCondition()],\n                    }\n                },\n                removeRollbackCondition: (state, { index }) => {\n                    if (!state) {\n                        return state\n                    }\n                    const rollback_conditions = [...state.rollback_conditions]\n                    rollback_conditions.splice(index, 1)\n                    return { ...state, rollback_conditions: rollback_conditions }\n                },\n                setMultivariateOptions: (state, { multivariateOptions }) => {\n                    if (!state) {\n                        return state\n                    }\n                    return { ...state, filters: { ...state.filters, multivariate: multivariateOptions } }\n                },\n                setRemoteConfigEnabled: (state, { enabled }) => {\n                    if (!state) {\n                        return state\n                    }\n\n                    return {\n                        ...state,\n                        is_remote_configuration: enabled,\n                    }\n                },\n                resetEncryptedPayload: (state) => {\n                    if (!state) {\n                        return state\n                    }\n\n                    return {\n                        ...state,\n                        filters: {\n                            ...state.filters,\n                            payloads: { true: '' },\n                        },\n                        has_encrypted_payloads: false,\n                    }\n                },\n                addVariant: (state) => {\n                    if (!state) {\n                        return state\n                    }\n                    const variants = [...(state.filters.multivariate?.variants || [])]\n                    return {\n                        ...state,\n                        filters: {\n                            ...state.filters,\n                            multivariate: {\n                                ...(state.filters.multivariate || {}),\n                                variants: [...variants, NEW_VARIANT],\n                            },\n                        },\n                    }\n                },\n                removeVariant: (state, { index }) => {\n                    if (!state) {\n                        return state\n                    }\n                    const variants = [...(state.filters.multivariate?.variants || [])]\n                    variants.splice(index, 1)\n\n                    const currentPayloads = { ...state.filters.payloads }\n                    const newPayloads: Record<number, any> = {}\n\n                    // TRICKY: In addition to modifying the variant array, we also need to shift the payload indices\n                    // because the variant array is being modified and we need to make sure that the payloads object\n                    // stays in sync with the variant array.\n                    Object.keys(currentPayloads).forEach((key) => {\n                        const payloadIndex = parseInt(key)\n                        if (payloadIndex > index) {\n                            newPayloads[payloadIndex - 1] = currentPayloads[payloadIndex]\n                        } else if (payloadIndex < index) {\n                            newPayloads[payloadIndex] = currentPayloads[payloadIndex]\n                        }\n                    })\n\n                    return {\n                        ...state,\n                        filters: {\n                            ...state.filters,\n                            multivariate: {\n                                ...state.filters.multivariate,\n                                variants,\n                            },\n                            payloads: newPayloads,\n                        },\n                    }\n                },\n                distributeVariantsEqually: (state) => {\n                    // Adjust the variants to be as evenly distributed as possible,\n                    // taking integer rounding into account\n                    if (!state) {\n                        return state\n                    }\n                    const variants = [...(state.filters.multivariate?.variants || [])]\n                    const numVariants = variants.length\n                    if (numVariants > 0 && numVariants <= 100) {\n                        const percentageRounded = Math.round(100 / numVariants)\n                        const totalRounded = percentageRounded * numVariants\n                        const delta = totalRounded - 100\n                        variants.forEach((variant, index) => {\n                            variants[index] = { ...variant, rollout_percentage: percentageRounded }\n                        })\n                        // Apply the rounding error to the last index\n                        variants[numVariants - 1] = {\n                            ...variants[numVariants - 1],\n                            rollout_percentage: percentageRounded - delta,\n                        }\n                    }\n                    return {\n                        ...state,\n                        filters: {\n                            ...state.filters,\n                            multivariate: {\n                                ...state.filters.multivariate,\n                                variants,\n                            },\n                        },\n                    }\n                },\n                createEarlyAccessFeatureSuccess: (state, { newEarlyAccessFeature }) => {\n                    if (!state) {\n                        return state\n                    }\n                    return {\n                        ...state,\n                        features: [...(state.features || []), newEarlyAccessFeature],\n                    }\n                },\n                createSurveySuccess: (state, { newSurvey }) => {\n                    if (!state) {\n                        return state\n                    }\n                    return {\n                        ...state,\n                        surveys: [...(state.surveys || []), newSurvey],\n                    }\n                },\n            },\n        ],\n        accessDeniedToFeatureFlag: [false, { setAccessDeniedToFeatureFlag: () => true }],\n        propertySelectErrors: [\n            null as any,\n            {\n                setFeatureFlagFilters: (_, { errors }) => {\n                    return errors\n                },\n            },\n        ],\n        activeTab: [\n            FeatureFlagsTab.OVERVIEW as FeatureFlagsTab,\n            {\n                setActiveTab: (_, { tab }) => tab,\n            },\n        ],\n        featureFlagMissing: [false, { setFeatureFlagMissing: () => true }],\n        isEditingFlag: [\n            false,\n            {\n                editFeatureFlag: (_, { editing }) => editing,\n            },\n        ],\n        insightRollingAverages: [\n            {},\n            {\n                setInsightResultAtIndex: (state, { index, average }) => ({\n                    ...state,\n                    [`${index}`]: average,\n                }),\n            },\n        ],\n        copyDestinationProject: [\n            null as number | null,\n            {\n                setCopyDestinationProject: (_, { id }) => id,\n            },\n        ],\n        scheduleDateMarker: [\n            null as any,\n            {\n                setScheduleDateMarker: (_, { dateMarker }) => dateMarker,\n            },\n        ],\n        schedulePayload: [\n            {\n                filters: { ...NEW_FLAG.filters },\n                active: NEW_FLAG.active,\n            } as ScheduleFlagPayload,\n            {\n                setSchedulePayload: (state, { filters, active }) => {\n                    return {\n                        filters: filters === null ? state.filters : filters,\n                        active: active === null ? state.active : active,\n                    }\n                },\n            },\n        ],\n        schedulePayloadErrors: [\n            null as any,\n            {\n                setSchedulePayload: (state, { errors }) => {\n                    return errors === null || errors === undefined ? state : errors\n                },\n            },\n        ],\n        scheduledChangeOperation: [\n            ScheduledChangeOperationType.AddReleaseCondition as ScheduledChangeOperationType,\n            {\n                setScheduledChangeOperation: (_, { changeType }) => changeType,\n            },\n        ],\n    }),\n    loaders(({ values, props, actions }) => ({\n        featureFlag: {\n            loadFeatureFlag: async () => {\n                if (props.id && props.id !== 'new' && props.id !== 'link') {\n                    try {\n                        const retrievedFlag: FeatureFlagType = await api.featureFlags.get(props.id)\n                        return variantKeyToIndexFeatureFlagPayloads(retrievedFlag)\n                    } catch (e: any) {\n                        if (e.status === 403 && e.code === 'permission_denied') {\n                            actions.setAccessDeniedToFeatureFlag()\n                        } else {\n                            actions.setFeatureFlagMissing()\n                        }\n                        throw e\n                    }\n                }\n                return {\n                    ...NEW_FLAG,\n                    ensure_experience_continuity: values.currentTeam?.flags_persistence_default ?? false,\n                }\n            },\n            saveFeatureFlag: async (updatedFlag: Partial<FeatureFlagType>) => {\n                const { created_at, id, ...flag } = updatedFlag\n\n                const preparedFlag = indexToVariantKeyFeatureFlagPayloads(flag)\n\n                try {\n                    let savedFlag: FeatureFlagType\n                    if (!updatedFlag.id) {\n                        savedFlag = await api.create(\n                            `api/projects/${values.currentProjectId}/feature_flags`,\n                            preparedFlag\n                        )\n                        if (values.roleBasedAccessEnabled && savedFlag.id) {\n                            featureFlagPermissionsLogic({ flagId: null })?.actions.addAssociatedRoles(savedFlag.id)\n                        }\n                        actions.addProductIntent({\n                            product_type: ProductKey.FEATURE_FLAGS,\n                            intent_context: ProductIntentContext.FEATURE_FLAG_CREATED,\n                        })\n                    } else {\n                        const cachedFlag = featureFlagsLogic\n                            .findMounted()\n                            ?.values.featureFlags.results.find((flag) => flag.id === props.id)\n\n                        // If we've got a cached flag and the filters have changed, we've updated the release conditions\n                        if (\n                            cachedFlag &&\n                            JSON.stringify(cachedFlag?.filters) !== JSON.stringify(values.featureFlag.filters)\n                        ) {\n                            activationLogic\n                                .findMounted()\n                                ?.actions.markTaskAsCompleted(ActivationTask.UpdateFeatureFlagReleaseConditions)\n                        }\n\n                        savedFlag = await api.update(\n                            `api/projects/${values.currentProjectId}/feature_flags/${updatedFlag.id}`,\n                            preparedFlag\n                        )\n                    }\n\n                    return variantKeyToIndexFeatureFlagPayloads(savedFlag)\n                } catch (error: any) {\n                    if (error.code === 'behavioral_cohort_found' || error.code === 'cohort_does_not_exist') {\n                        eventUsageLogic.actions.reportFailedToCreateFeatureFlagWithCohort(error.code, error.detail)\n                    }\n                    throw error\n                }\n            },\n            saveSidebarExperimentFeatureFlag: async (updatedFlag: Partial<FeatureFlagType>) => {\n                const { created_at, id, ...flag } = updatedFlag\n\n                const preparedFlag = indexToVariantKeyFeatureFlagPayloads(flag)\n\n                try {\n                    let savedFlag: FeatureFlagType\n                    if (!updatedFlag.id) {\n                        savedFlag = await api.create(\n                            `api/projects/${values.currentProjectId}/feature_flags`,\n                            preparedFlag\n                        )\n                        if (values.roleBasedAccessEnabled && savedFlag.id) {\n                            featureFlagPermissionsLogic({ flagId: null })?.actions.addAssociatedRoles(savedFlag.id)\n                        }\n                    } else {\n                        savedFlag = await api.update(\n                            `api/projects/${values.currentProjectId}/feature_flags/${updatedFlag.id}`,\n                            preparedFlag\n                        )\n                    }\n\n                    return variantKeyToIndexFeatureFlagPayloads(savedFlag)\n                } catch (error: any) {\n                    if (error.code === 'behavioral_cohort_found' || error.code === 'cohort_does_not_exist') {\n                        eventUsageLogic.actions.reportFailedToCreateFeatureFlagWithCohort(error.code, error.detail)\n                    }\n                    throw error\n                }\n            },\n        },\n        relatedInsights: [\n            [] as QueryBasedInsightModel[],\n            {\n                loadRelatedInsights: async () => {\n                    if (props.id && props.id !== 'new' && values.featureFlag.key) {\n                        const response = await api.get<PaginatedResponse<InsightModel>>(\n                            `api/environments/${values.currentProjectId}/insights/?feature_flag=${values.featureFlag.key}&order=-created_at`\n                        )\n                        return response.results.map((legacyInsight) => getQueryBasedInsightModel(legacyInsight))\n                    }\n                    return []\n                },\n            },\n        ],\n        sentryStats: [\n            {} as { total_count?: number; sentry_integration_enabled?: number },\n            {\n                loadSentryStats: async () => {\n                    return await api.get(`api/sentry_stats/`)\n                },\n            },\n        ],\n        // used to generate a new early access feature\n        // but all subsequent operations after generation should occur via the earlyAccessFeatureLogic\n        newEarlyAccessFeature: [\n            null as EarlyAccessFeatureType | null,\n            {\n                createEarlyAccessFeature: async () => {\n                    const newEarlyAccessFeature = {\n                        ...NEW_EARLY_ACCESS_FEATURE,\n                        name: `Early access: ${values.featureFlag.key}`,\n                        feature_flag_id: values.featureFlag.id,\n                    }\n                    return await api.earlyAccessFeatures.create(newEarlyAccessFeature as NewEarlyAccessFeatureType)\n                },\n            },\n        ],\n        // used to generate a new survey\n        // but all subsequent operations after generation should occur via the surveyLogic\n        newSurvey: [\n            null as Survey | null,\n            {\n                createSurvey: async () => {\n                    const newSurvey = {\n                        ...NEW_SURVEY,\n                        name: `Survey: ${values.featureFlag.key}`,\n                        linked_flag_id: values.featureFlag.id,\n                        questions: [\n                            {\n                                type: SurveyQuestionType.Open,\n                                question: `What do you think of ${values.featureFlag.key}?`,\n                            },\n                        ],\n                    }\n                    return await api.surveys.create(newSurvey as NewSurvey)\n                },\n            },\n        ],\n        newCohort: [\n            null as CohortType | null,\n            {\n                createStaticCohort: async () => {\n                    if (props.id && props.id !== 'new' && props.id !== 'link') {\n                        return (await api.featureFlags.createStaticCohort(props.id)).cohort\n                    }\n                    return null\n                },\n            },\n        ],\n        projectsWithCurrentFlag: {\n            __default: [] as OrganizationFeatureFlag[],\n            loadProjectsWithCurrentFlag: async () => {\n                const orgId = values.currentOrganization?.id\n                const flagKey = values.featureFlag.key\n\n                const projects = await api.organizationFeatureFlags.get(orgId, flagKey)\n\n                // Put current project first\n                const currentProjectIdx = projects.findIndex((p) => p.team_id === values.currentTeamId)\n                if (currentProjectIdx) {\n                    const [currentProject] = projects.splice(currentProjectIdx, 1)\n                    const sortedProjects = [currentProject, ...projects]\n                    return sortedProjects\n                }\n                return projects\n            },\n        },\n        featureFlagCopy: {\n            copyFlag: async () => {\n                const orgId = values.currentOrganization?.id\n                const featureFlagKey = values.featureFlag.key\n                const { copyDestinationProject, currentProjectId } = values\n\n                if (currentProjectId && copyDestinationProject) {\n                    return await api.organizationFeatureFlags.copy(orgId, {\n                        feature_flag_key: featureFlagKey,\n                        from_project: currentProjectId,\n                        target_project_ids: [copyDestinationProject],\n                    })\n                }\n            },\n        },\n        scheduledChanges: {\n            __default: [] as ScheduledChangeType[],\n            loadScheduledChanges: async () => {\n                const { currentProjectId } = values\n                if (currentProjectId) {\n                    const response = await api.featureFlags.getScheduledChanges(currentProjectId, values.featureFlag.id)\n                    return response.results || []\n                }\n            },\n        },\n        scheduledChange: {\n            __default: {} as ScheduledChangeType,\n            createScheduledChange: async () => {\n                const { scheduledChangeOperation, scheduleDateMarker, currentProjectId, schedulePayload } = values\n\n                const fields: Record<ScheduledChangeOperationType, keyof ScheduleFlagPayload> = {\n                    [ScheduledChangeOperationType.UpdateStatus]: 'active',\n                    [ScheduledChangeOperationType.AddReleaseCondition]: 'filters',\n                }\n\n                if (currentProjectId && scheduledChangeOperation) {\n                    const data = {\n                        record_id: values.featureFlag.id,\n                        model_name: 'FeatureFlag',\n                        payload: {\n                            operation: scheduledChangeOperation,\n                            value: schedulePayload[fields[scheduledChangeOperation]],\n                        },\n                        scheduled_at: scheduleDateMarker.toISOString(),\n                    }\n\n                    return await api.featureFlags.createScheduledChange(currentProjectId, data)\n                }\n            },\n            deleteScheduledChange: async (scheduledChangeId) => {\n                const { currentProjectId } = values\n                if (currentProjectId) {\n                    return await api.featureFlags.deleteScheduledChange(currentProjectId, scheduledChangeId)\n                }\n            },\n        },\n        flagStatus: [\n            null as FeatureFlagStatusResponse | null,\n            {\n                loadFeatureFlagStatus: () => {\n                    const { currentProjectId } = values\n                    if (currentProjectId && props.id && props.id !== 'new' && props.id !== 'link') {\n                        return api.featureFlags.getStatus(currentProjectId, props.id)\n                    }\n                    return null\n                },\n            },\n        ],\n        experiment: {\n            loadExperiment: async () => {\n                if (values.featureFlag.experiment_set) {\n                    return await api.experiments.get(values.featureFlag.experiment_set[0])\n                }\n            },\n        },\n    })),\n    listeners(({ actions, values, props }) => ({\n        submitNewDashboardSuccessWithResult: async ({ result }) => {\n            await api.update(`api/projects/${values.currentProjectId}/feature_flags/${values.featureFlag.id}`, {\n                analytics_dashboards: [result.id],\n            })\n        },\n        generateUsageDashboard: async () => {\n            if (props.id) {\n                await api.create(`api/projects/${values.currentProjectId}/feature_flags/${props.id}/dashboard`)\n                actions.loadFeatureFlag()\n            }\n        },\n        enrichUsageDashboard: async (_, breakpoint) => {\n            if (props.id) {\n                await breakpoint(1000) // in ms\n                await api.create(\n                    `api/projects/${values.currentProjectId}/feature_flags/${props.id}/enrich_usage_dashboard`\n                )\n            }\n        },\n        submitFeatureFlagFailure: async () => {\n            // When errors occur, scroll to the error, but wait for errors to be set in the DOM first\n            setTimeout(\n                () => document.querySelector(`.Field--error`)?.scrollIntoView({ block: 'center', behavior: 'smooth' }),\n                1\n            )\n        },\n        saveFeatureFlagSuccess: ({ featureFlag }) => {\n            lemonToast.success('Feature flag saved')\n            actions.updateFlag(featureFlag)\n            featureFlag.id && router.actions.replace(urls.featureFlag(featureFlag.id))\n            actions.editFeatureFlag(false)\n            activationLogic.findMounted()?.actions.markTaskAsCompleted(ActivationTask.CreateFeatureFlag)\n        },\n        saveSidebarExperimentFeatureFlagSuccess: ({ featureFlag }) => {\n            lemonToast.success('Release conditions updated')\n            actions.updateFlag(featureFlag)\n            actions.editFeatureFlag(false)\n            actions.closeSidePanel()\n\n            const currentPath = router.values.currentLocation.pathname\n            const experimentId = currentPath.split('/').pop()\n\n            if (experimentId) {\n                eventUsageLogic.actions.reportExperimentReleaseConditionsUpdated(parseInt(experimentId))\n                experimentLogic({ experimentId: parseInt(experimentId) }).actions.loadExperiment()\n            }\n        },\n        deleteFeatureFlag: async ({ featureFlag }) => {\n            await deleteWithUndo({\n                endpoint: `projects/${values.currentProjectId}/feature_flags`,\n                object: { name: featureFlag.key, id: featureFlag.id },\n                callback: () => {\n                    featureFlag.id && actions.deleteFlag(featureFlag.id)\n                    // Load latest change so a backwards navigation shows the flag as deleted\n                    actions.loadFeatureFlag()\n                    router.actions.push(urls.featureFlags())\n                },\n            })\n        },\n        restoreFeatureFlag: async ({ featureFlag }) => {\n            await deleteWithUndo({\n                endpoint: `projects/${values.currentProjectId}/feature_flags`,\n                object: { name: featureFlag.key, id: featureFlag.id },\n                undo: true,\n                callback: () => {\n                    actions.loadFeatureFlag()\n                },\n            })\n        },\n        setMultivariateEnabled: async ({ enabled }) => {\n            if (enabled) {\n                actions.setMultivariateOptions(EMPTY_MULTIVARIATE_OPTIONS)\n            } else {\n                actions.setMultivariateOptions(null)\n            }\n        },\n        loadFeatureFlagSuccess: async () => {\n            actions.loadRelatedInsights()\n            actions.loadAllInsightsForFlag()\n            actions.loadExperiment()\n        },\n        loadInsightAtIndex: async ({ index, filters }) => {\n            if (filters) {\n                const response = await api.get(\n                    `api/environments/${values.currentProjectId}/insights/trend/?${toParams(\n                        filterTrendsClientSideParams(filters)\n                    )}`\n                )\n                const counts = response.result?.[0]?.data\n                const avg = Math.round(sum(counts) / 7)\n                actions.setInsightResultAtIndex(index, avg)\n            }\n        },\n        loadAllInsightsForFlag: () => {\n            values.featureFlag.rollback_conditions?.forEach((condition, index) => {\n                if (condition.threshold_metric) {\n                    actions.loadInsightAtIndex(index, condition.threshold_metric)\n                }\n            })\n        },\n        addRollbackCondition: () => {\n            const index = values.featureFlag.rollback_conditions.length - 1\n            actions.loadInsightAtIndex(\n                index,\n                values.featureFlag.rollback_conditions[index].threshold_metric as FilterType\n            )\n        },\n        copyFlagSuccess: ({ featureFlagCopy }) => {\n            if (featureFlagCopy?.success.length) {\n                const operation = values.projectsWithCurrentFlag.find(\n                    (p) => Number(p.team_id) === values.copyDestinationProject\n                )\n                    ? 'updated'\n                    : 'copied'\n                lemonToast.success(`Feature flag ${operation} successfully!`)\n                eventUsageLogic.actions.reportFeatureFlagCopySuccess()\n            } else {\n                const errorMessage = JSON.stringify(featureFlagCopy?.failed) || featureFlagCopy\n                lemonToast.error(`Error while saving feature flag: ${errorMessage}`)\n                eventUsageLogic.actions.reportFeatureFlagCopyFailure(errorMessage)\n            }\n\n            actions.loadProjectsWithCurrentFlag()\n            actions.setCopyDestinationProject(null)\n        },\n        createStaticCohortSuccess: ({ newCohort }) => {\n            if (newCohort) {\n                lemonToast.success('Static cohort created successfully', {\n                    button: {\n                        label: 'View cohort',\n                        action: () => router.actions.push(urls.cohort(newCohort.id)),\n                    },\n                })\n            }\n        },\n        createScheduledChangeSuccess: ({ scheduledChange }) => {\n            if (scheduledChange) {\n                lemonToast.success('Change scheduled successfully')\n                actions.setSchedulePayload(NEW_FLAG.filters, NEW_FLAG.active, {})\n                actions.loadScheduledChanges()\n                eventUsageLogic.actions.reportFeatureFlagScheduleSuccess()\n            }\n        },\n        setScheduledChangeOperation: () => {\n            // reset filters when operation changes\n            actions.setSchedulePayload(NEW_FLAG.filters, NEW_FLAG.active, {})\n        },\n        setActiveTab: ({ tab }) => {\n            // reset filters when opening schedule tab, and load scheduled changes\n            if (tab === FeatureFlagsTab.SCHEDULE) {\n                actions.setSchedulePayload(NEW_FLAG.filters, NEW_FLAG.active, {})\n                actions.loadScheduledChanges()\n            }\n        },\n        createScheduledChangeFailure: ({ error }) => {\n            eventUsageLogic.actions.reportFeatureFlagScheduleFailure({ error })\n        },\n        deleteScheduledChangeSuccess: ({ scheduledChange }) => {\n            if (scheduledChange) {\n                lemonToast.success('Change has been deleted')\n                actions.loadScheduledChanges()\n            }\n        },\n        setRemoteConfigEnabled: ({ enabled }) => {\n            if (enabled) {\n                actions.setFeatureFlagFilters(\n                    {\n                        ...values.featureFlag.filters,\n                        groups: [\n                            {\n                                variant: null,\n                                properties: [],\n                                rollout_percentage: 100,\n                            },\n                        ],\n                    },\n                    {}\n                )\n            }\n        },\n    })),\n    selectors({\n        sentryErrorCount: [(s) => [s.sentryStats], (stats) => stats.total_count],\n        sentryIntegrationEnabled: [(s) => [s.sentryStats], (stats) => !!stats.sentry_integration_enabled],\n        props: [() => [(_, props) => props], (props) => props],\n        multivariateEnabled: [(s) => [s.featureFlag], (featureFlag) => !!featureFlag?.filters.multivariate],\n        flagType: [\n            (s) => [s.featureFlag],\n            (featureFlag) =>\n                featureFlag?.is_remote_configuration\n                    ? 'remote_config'\n                    : featureFlag?.filters.multivariate\n                    ? 'multivariate'\n                    : 'boolean',\n        ],\n        flagTypeString: [\n            (s) => [s.featureFlag],\n            (featureFlag) =>\n                featureFlag?.is_remote_configuration\n                    ? 'Remote configuration (single payload)'\n                    : featureFlag?.filters.multivariate\n                    ? 'Multiple variants with rollout percentages (A/B/n test)'\n                    : 'Release toggle (boolean)',\n        ],\n        roleBasedAccessEnabled: [\n            (s) => [s.hasAvailableFeature],\n            (hasAvailableFeature) => hasAvailableFeature(AvailableFeature.ROLE_BASED_ACCESS),\n        ],\n        variants: [(s) => [s.featureFlag], (featureFlag) => featureFlag?.filters.multivariate?.variants || []],\n        nonEmptyVariants: [(s) => [s.variants], (variants) => variants.filter(({ key }) => !!key)],\n        variantRolloutSum: [\n            (s) => [s.variants],\n            (variants) => variants.reduce((total: number, { rollout_percentage }) => total + rollout_percentage, 0),\n        ],\n        areVariantRolloutsValid: [\n            (s) => [s.variants, s.variantRolloutSum],\n            (variants, variantRolloutSum) =>\n                variants.every(({ rollout_percentage }) => rollout_percentage >= 0 && rollout_percentage <= 100) &&\n                variantRolloutSum === 100,\n        ],\n        aggregationTargetName: [\n            (s) => [s.featureFlag, s.aggregationLabel],\n            (featureFlag, aggregationLabel): string => {\n                if (featureFlag && featureFlag.filters.aggregation_group_type_index != null) {\n                    return aggregationLabel(featureFlag.filters.aggregation_group_type_index).plural\n                }\n                return 'users'\n            },\n        ],\n        breadcrumbs: [\n            (s) => [s.featureFlag],\n            (featureFlag): Breadcrumb[] => [\n                {\n                    key: Scene.FeatureFlags,\n                    name: 'Feature Flags',\n                    path: urls.featureFlags(),\n                },\n                { key: [Scene.FeatureFlag, featureFlag.id || 'unknown'], name: featureFlag.key || 'Unnamed' },\n            ],\n        ],\n        [SIDE_PANEL_CONTEXT_KEY]: [\n            (s) => [s.featureFlag, s.currentTeam],\n            (featureFlag, currentTeam): SidePanelSceneContext | null => {\n                // Only render the new access control on side panel if they have been migrated\n                return featureFlag?.id && currentTeam?.access_control_version === 'v2'\n                    ? {\n                          activity_scope: ActivityScope.FEATURE_FLAG,\n                          activity_item_id: `${featureFlag.id}`,\n                          access_control_resource: 'feature_flag',\n                          access_control_resource_id: `${featureFlag.id}`,\n                      }\n                    : null\n            },\n        ],\n        filteredDashboards: [\n            (s) => [s.dashboards, s.featureFlag],\n            (dashboards, featureFlag) => {\n                if (!featureFlag) {\n                    return dashboards\n                }\n\n                return dashboards.filter((dashboard: DashboardBasicType) => {\n                    return featureFlag.analytics_dashboards?.includes(dashboard.id)\n                })\n            },\n        ],\n        recordingFilterForFlag: [\n            (s) => [s.featureFlag],\n            (featureFlag): Partial<RecordingUniversalFilters> => {\n                const flagKey = featureFlag?.key\n                if (!flagKey) {\n                    return {}\n                }\n\n                return getRecordingFilterForFlagVariant(flagKey, null, featureFlag.has_enriched_analytics)\n            },\n        ],\n        hasEarlyAccessFeatures: [\n            (s) => [s.featureFlag],\n            (featureFlag) => {\n                return (featureFlag?.features?.length || 0) > 0\n            },\n        ],\n        earlyAccessFeaturesList: [\n            (s) => [s.featureFlag],\n            (featureFlag) => {\n                return featureFlag?.features || []\n            },\n        ],\n        featureFlagKey: [\n            (s) => [s.featureFlag],\n            (featureFlag) => {\n                return featureFlag.key\n            },\n        ],\n        canCreateEarlyAccessFeature: [\n            (s) => [s.featureFlag, s.variants],\n            (featureFlag, variants) => {\n                return (\n                    featureFlag &&\n                    featureFlag.filters.aggregation_group_type_index == undefined &&\n                    variants.length === 0\n                )\n            },\n        ],\n        hasSurveys: [\n            (s) => [s.featureFlag],\n            (featureFlag) => {\n                return featureFlag?.surveys && featureFlag.surveys.length > 0\n            },\n        ],\n        hasEncryptedPayloadBeenSaved: [\n            (s) => [s.featureFlag, s.props],\n            (featureFlag, props) => {\n                if (!featureFlag.has_encrypted_payloads) {\n                    return false\n                }\n                const savedFlag = featureFlagsLogic\n                    .findMounted()\n                    ?.values.featureFlags.results.find((flag) => flag.id === props.id)\n                return savedFlag?.has_encrypted_payloads\n            },\n        ],\n        hasExperiment: [\n            (s) => [s.featureFlag],\n            (featureFlag) => {\n                return featureFlag?.experiment_set && featureFlag.experiment_set.length > 0\n            },\n        ],\n        isDraftExperiment: [\n            (s) => [s.experiment],\n            (experiment) => {\n                // Treat as launched experiment if not yet loaded.\n                if (!experiment) {\n                    return false\n                }\n                return !experiment?.start_date\n            },\n        ],\n    }),\n    urlToAction(({ actions, props }) => ({\n        [urls.featureFlag(props.id ?? 'new')]: (_, __, ___, { method }) => {\n            // If the URL was pushed (user clicked on a link), reset the scene's data.\n            // This avoids resetting form fields if you click back/forward.\n            if (method === 'PUSH') {\n                if (props.id) {\n                    actions.loadFeatureFlag()\n                } else {\n                    actions.resetFeatureFlag()\n                }\n            }\n        },\n    })),\n    afterMount(({ props, actions }) => {\n        const foundFlag = featureFlagsLogic\n            .findMounted()\n            ?.values.featureFlags.results.find((flag) => flag.id === props.id)\n        if (foundFlag) {\n            const formatPayloadsWithFlag = variantKeyToIndexFeatureFlagPayloads(foundFlag)\n            actions.setFeatureFlag(formatPayloadsWithFlag)\n            actions.loadRelatedInsights()\n            actions.loadAllInsightsForFlag()\n            actions.loadFeatureFlagStatus()\n        } else if (props.id !== 'new') {\n            actions.loadFeatureFlag()\n            actions.loadFeatureFlagStatus()\n        }\n    }),\n])\n", "import { actions, afterMount, connect, kea, key, path, props, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\nimport { rolesLogic } from 'scenes/settings/organization/Permissions/Roles/rolesLogic'\n\nimport { AccessLevel, FeatureFlagAssociatedRoleType, Resource, RoleType } from '~/types'\n\nimport type { featureFlagPermissionsLogicType } from './featureFlagPermissionsLogicType'\n\nexport type FeatureFlagPermissionsLogicProps = {\n    flagId: number | null\n}\n\nexport const featureFlagPermissionsLogic = kea<featureFlagPermissionsLogicType>([\n    path(['scenes', 'feature-flags', 'featureFlagPermissionsLogic']),\n    props({} as FeatureFlagPermissionsLogicProps),\n    key((props: FeatureFlagPermissionsLogicProps) => `${props.flagId}`),\n    connect({ values: [rolesLogic, ['roles']] }),\n    actions({\n        setModalOpen: (visible: boolean) => ({ visible }),\n        setRolesToAdd: (roleIds: string[]) => ({ roleIds }),\n    }),\n    reducers({\n        permissionModalVisible: [\n            false,\n            {\n                setModalOpen: (_, { visible }) => visible,\n            },\n        ],\n        rolesToAdd: [\n            [] as string[],\n            {\n                setRolesToAdd: (_, { roleIds }) => roleIds,\n            },\n        ],\n    }),\n    loaders(({ props, values, actions }) => ({\n        unfilteredAddableRoles: [\n            [] as RoleType[],\n            {\n                loadPossibleRolesToAdd: async () => {\n                    const response = await api.roles.list({\n                        feature_flags_access_level: AccessLevel.READ,\n                    })\n                    return response.results || []\n                },\n            },\n        ],\n        associatedRoles: [\n            [] as FeatureFlagAssociatedRoleType[],\n            {\n                loadAssociatedRoles: async () => {\n                    if (props.flagId) {\n                        const response = await api.resourceAccessPermissions.featureFlags.list(props.flagId)\n\n                        return response.results || []\n                    } else {\n                        return []\n                    }\n                },\n                addAssociatedRoles: async (flagId?: number) => {\n                    const { rolesToAdd } = values\n                    const possibleFlagId = props.flagId || flagId\n                    if (possibleFlagId) {\n                        const newAssociatedRoles = await Promise.all(\n                            rolesToAdd.map(\n                                async (roleId) =>\n                                    await api.resourceAccessPermissions.featureFlags.create(possibleFlagId, roleId)\n                            )\n                        )\n                        actions.setRolesToAdd([])\n                        return [...values.associatedRoles, ...newAssociatedRoles]\n                    }\n                    const newFlagAssociatedRoles: RoleType[] = []\n                    for (const roleId of rolesToAdd) {\n                        const existingRole = values.roles.find((r) => roleId === r.id)\n                        if (existingRole?.id) {\n                            newFlagAssociatedRoles.push(existingRole)\n                        }\n                    }\n                    eventUsageLogic.actions.reportRoleCustomAddedToAResource(Resource.FEATURE_FLAGS, rolesToAdd.length)\n                    return newFlagAssociatedRoles.map((newRole) => ({\n                        id: newRole.id,\n                        role: newRole,\n                        feature_flag: null,\n                        updated_at: '',\n                        added_at: '',\n                    }))\n                },\n                deleteAssociatedRole: async ({ roleId }) => {\n                    const associatedRoleId = values.associatedRoles.find(\n                        (associatedRole) => associatedRole.role.id === roleId\n                    )?.id\n                    const filteredRoles = values.associatedRoles.filter(\n                        (associatedRole) => associatedRole.id !== associatedRoleId\n                    )\n\n                    if (props.flagId) {\n                        associatedRoleId &&\n                            (await api.resourceAccessPermissions.featureFlags.delete(props.flagId, associatedRoleId))\n                    } else {\n                        actions.setRolesToAdd(filteredRoles.map((filteredRole) => filteredRole.id))\n                    }\n                    return filteredRoles\n                },\n            },\n        ],\n    })),\n    selectors({\n        derivedRoles: [\n            (s) => [s.associatedRoles],\n            (associatedRoles): RoleType[] => {\n                return associatedRoles.map((associatedRole: FeatureFlagAssociatedRoleType) => associatedRole.role)\n            },\n        ],\n        addableRoles: [\n            (s) => [s.unfilteredAddableRoles, s.associatedRoles],\n            (unfilteredAddableRoles, associatedRoles): RoleType[] => {\n                const addableRoles: RoleType[] = []\n\n                for (const role of unfilteredAddableRoles) {\n                    if (\n                        !associatedRoles.some(\n                            (associatedRole: FeatureFlagAssociatedRoleType) => associatedRole.role.id === role.id\n                        )\n                    ) {\n                        addableRoles.push(role)\n                    }\n                }\n\n                return addableRoles\n            },\n        ],\n    }),\n    afterMount(({ actions }) => {\n        actions.loadPossibleRolesToAdd()\n        actions.loadAssociatedRoles()\n    }),\n])\n", "import { actions, afterMount, connect, kea, listeners, path, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\nimport { teamMembersLogic } from 'scenes/settings/environment/teamMembersLogic'\n\nimport { AccessLevel, Resource, RoleMemberType, RoleType, UserBasicType } from '~/types'\n\nimport type { rolesLogicType } from './rolesLogicType'\n\nexport const rolesLogic = kea<rolesLogicType>([\n    path(['scenes', 'organization', 'rolesLogic']),\n    connect({ values: [teamMembersLogic, ['allMembers']] }),\n    actions({\n        setCreateRoleModalShown: (shown: boolean) => ({ shown }),\n        setRoleInFocus: (role: null | RoleType) => ({ role }),\n        setRoleMembersInFocus: (roleMembers: RoleMemberType[]) => ({ roleMembers }),\n        setRoleMembersToAdd: (uuids: string[]) => ({ uuids }),\n        openCreateRoleModal: true,\n        setPermission: (resource: Resource, access: AccessLevel) => ({ resource, access }),\n        clearPermission: true,\n        updateRole: (role: RoleType) => ({ role }),\n    }),\n    reducers({\n        createRoleModalShown: [\n            false,\n            {\n                setCreateRoleModalShown: (_, { shown }) => shown,\n            },\n        ],\n        roleInFocus: [\n            null as null | RoleType,\n            {\n                setRoleInFocus: (_, { role }) => role,\n            },\n        ],\n        roleMembersInFocus: [\n            [] as RoleMemberType[],\n            {\n                setRoleMembersInFocus: (_, { roleMembers }) => roleMembers,\n            },\n        ],\n        roleMembersToAdd: [\n            [] as string[],\n            {\n                setRoleMembersToAdd: (_, { uuids }) => uuids,\n            },\n        ],\n        roles: [\n            [] as RoleType[],\n            {\n                updateRole: (state, { role: newRole }) => {\n                    return state.map((role) => (role.id == newRole.id ? newRole : role))\n                },\n            },\n        ],\n    }),\n    loaders(({ values, actions, asyncActions }) => ({\n        roles: {\n            loadRoles: async () => {\n                const response = await api.roles.list()\n                return response?.results || []\n            },\n            createRole: async (roleName: string) => {\n                const { roles, roleMembersToAdd } = values\n                const newRole = await api.roles.create(roleName)\n                await asyncActions.addRoleMembers({ role: newRole, membersToAdd: roleMembersToAdd })\n                eventUsageLogic.actions.reportRoleCreated(roleName)\n                actions.setRoleMembersInFocus([])\n                actions.setRoleMembersToAdd([])\n                actions.clearPermission()\n                actions.setCreateRoleModalShown(false)\n                return [newRole, ...roles]\n            },\n            deleteRole: async (role: RoleType) => {\n                await api.roles.delete(role.id)\n                return values.roles.filter((currRoles) => currRoles.id !== role.id)\n            },\n        },\n        roleMembersInFocus: [\n            [] as RoleMemberType[],\n            {\n                loadRoleMembers: async ({ roleId }) => {\n                    const response = await api.roles.members.list(roleId)\n                    return response?.results || []\n                },\n                addRoleMembers: async ({ role, membersToAdd }) => {\n                    const newMembers = await Promise.all(\n                        membersToAdd.map(async (userUuid: string) => await api.roles.members.create(role.id, userUuid))\n                    )\n                    actions.setRoleMembersToAdd([])\n                    return [...values.roleMembersInFocus, ...newMembers]\n                },\n                deleteRoleMember: async ({ roleMemberUuid }) => {\n                    values.roleInFocus && (await api.roles.members.delete(values.roleInFocus.id, roleMemberUuid))\n                    return values.roleMembersInFocus.filter((member) => member.id !== roleMemberUuid)\n                },\n            },\n        ],\n    })),\n    listeners(({ actions, values }) => ({\n        setRoleInFocus: ({ role }) => {\n            role && actions.loadRoleMembers({ roleId: role.id })\n            actions.setCreateRoleModalShown(true)\n        },\n        openCreateRoleModal: () => {\n            actions.setRoleInFocus(null)\n            actions.setRoleMembersInFocus([])\n            actions.setCreateRoleModalShown(true)\n        },\n        setCreateRoleModalShown: () => {\n            if (values.roleInFocus) {\n                actions.setPermission(Resource.FEATURE_FLAGS, values.roleInFocus.feature_flags_access_level)\n            } else {\n                actions.setPermission(Resource.FEATURE_FLAGS, AccessLevel.WRITE)\n            }\n        },\n        deleteRoleSuccess: () => {\n            actions.setCreateRoleModalShown(false)\n        },\n    })),\n    selectors({\n        addableMembers: [\n            (s) => [s.allMembers, s.roleMembersInFocus],\n            (allMembers, roleMembersInFocus): UserBasicType[] => {\n                const addableMembers: UserBasicType[] = []\n                for (const member of allMembers) {\n                    if (\n                        !roleMembersInFocus.some(\n                            (roleMember: RoleMemberType) => roleMember.user.uuid === member.user.uuid\n                        )\n                    ) {\n                        addableMembers.push(member.user)\n                    }\n                }\n                addableMembers.sort((a, b) => a.first_name.localeCompare(b.first_name))\n                return addableMembers\n            },\n        ],\n    }),\n    afterMount(({ actions }) => {\n        actions.loadRoles()\n    }),\n])\n", "import { actions, connect, events, kea, listeners, path, reducers } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast/LemonToast'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\n\nimport { UserBasicType } from '~/types'\n\nimport type { holdoutsLogicType } from './holdoutsLogicType'\n\nexport interface Holdout {\n    id: number | null\n    name: string\n    description: string | null\n    filters: Record<string, any>\n    created_by: UserBasicType | null\n    created_at: string | null\n    updated_at: string | null\n}\n\nexport const NEW_HOLDOUT: Holdout = {\n    id: null,\n    name: '',\n    description: null,\n    filters: [\n        {\n            properties: [],\n            rollout_percentage: 10,\n            variant: 'holdout',\n        },\n    ],\n    created_by: null,\n    created_at: null,\n    updated_at: null,\n}\n\nexport const holdoutsLogic = kea<holdoutsLogicType>([\n    path(['scenes', 'experiments', 'holdoutsLogic']),\n    actions({\n        setHoldout: (holdout: Partial<Holdout>) => ({ holdout }),\n        createHoldout: true,\n        updateHoldout: (id: number | null, holdout: Partial<Holdout>) => ({ id, holdout }),\n        deleteHoldout: (id: number | null) => ({ id }),\n        loadHoldout: (id: number | null) => ({ id }),\n    }),\n    connect({\n        actions: [eventUsageLogic, ['reportExperimentHoldoutCreated']],\n    }),\n    reducers({\n        holdout: [\n            NEW_HOLDOUT,\n            {\n                setHoldout: (state, { holdout }) => ({ ...state, ...holdout }),\n            },\n        ],\n    }),\n    loaders(({ actions, values }) => ({\n        holdouts: [\n            [] as Holdout[],\n            {\n                loadHoldouts: async () => {\n                    const response = await api.get(`api/projects/@current/experiment_holdouts/`)\n                    return response.results as Holdout[]\n                },\n                createHoldout: async () => {\n                    const response = await api.create(`api/projects/@current/experiment_holdouts/`, values.holdout)\n                    actions.reportExperimentHoldoutCreated(response)\n                    return [...values.holdouts, response] as Holdout[]\n                },\n                updateHoldout: async ({ id, holdout }) => {\n                    const response = await api.update(`api/projects/@current/experiment_holdouts/${id}/`, holdout)\n                    return values.holdouts.map((h) => (h.id === id ? response : h)) as Holdout[]\n                },\n                deleteHoldout: async ({ id }) => {\n                    await api.delete(`api/projects/@current/experiment_holdouts/${id}/`)\n                    return values.holdouts.filter((h) => h.id !== id)\n                },\n            },\n        ],\n    })),\n    listeners(({ actions }) => ({\n        createHoldoutSuccess: () => {\n            lemonToast.success('Holdout created')\n            actions.loadHoldouts()\n        },\n        updateHoldoutSuccess: () => {\n            lemonToast.success('Holdout updated')\n            actions.loadHoldouts()\n        },\n        deleteHoldoutSuccess: () => {\n            lemonToast.success('Holdout deleted')\n            actions.loadHoldouts()\n        },\n    })),\n    events(({ actions }) => ({\n        afterMount: () => {\n            actions.loadHoldouts()\n        },\n    })),\n])\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_kea_loaders", "import_kea_router", "NEW_EARLY_ACCESS_FEATURE", "earlyAccessFeatureLogic", "id", "teamLogic", "earlyAccessFeaturesLogic", "editing", "stage", "earlyAccessFeatureId", "activeTab", "props", "actions", "api_default", "error", "updatedEarlyAccessFeature", "result", "urls", "payload", "_", "state", "p", "s", "earlyAccessFeature", "values", "_earlyAccessFeature", "lemonToast", "feature", "e", "__", "___", "method", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_kea_loaders", "import_kea_router", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_kea_loaders", "import_kea_router", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "rolesLogic", "teamMembersLogic", "shown", "role", "roleMembers", "uuids", "resource", "access", "_", "state", "newRole", "values", "actions", "asyncActions", "api_default", "roleName", "roles", "roleMembersToAdd", "eventUsageLogic", "currRoles", "roleId", "membersToAdd", "newMembers", "userUuid", "roleMemberUuid", "member", "s", "allMembers", "roleMembersInFocus", "addableMembers", "roleMember", "a", "b", "featureFlagPermissionsLogic", "props", "rolesLogic", "visible", "roleIds", "_", "values", "actions", "api_default", "flagId", "rolesToAdd", "possibleFlagId", "newAssociatedRoles", "roleId", "newFlagAssociatedRoles", "existingRole", "r", "eventUsageLogic", "newRole", "associatedRoleId", "associatedRole", "filteredRoles", "filteredRole", "s", "associatedRoles", "unfilteredAddableRoles", "addableRoles", "role", "getDefaultRollbackCondition", "cleanFilters", "dayjs", "NEW_FLAG", "NEW_VARIANT", "EMPTY_MULTIVARIATE_OPTIONS", "validateFeatureFlagKey", "key", "validatePayloadRequired", "is_remote_configuration", "payload", "variantKeyToIndexFeatureFlagPayloads", "flag", "newPayloads", "variant", "index", "indexToVariantKeyFeatureFlagPayloads", "cleanedPayloadValue", "getRecordingFilterForFlagVariant", "flagKey", "variantKey", "hasEnrichedAnalytics", "featureFlagLogic", "id", "props", "teamLogic", "projectLogic", "groupsModel", "userLogic", "dashboardsLogic", "organizationLogic", "newDashboardLogic", "featureFlagsLogic", "sidePanelStateLogic", "featureFlag", "filters", "errors", "tab", "enabled", "multivariateOptions", "editing", "average", "dateMarker", "active", "changeType", "actions", "values", "_", "state", "rollback_conditions", "variants", "currentPayloads", "payloadIndex", "numVariants", "percentageRounded", "delta", "newEarlyAccessFeature", "newSurvey", "retrievedFlag", "api_default", "e", "updatedFlag", "created_at", "preparedFlag", "savedFlag", "featureFlagPermissionsLogic", "cachedFlag", "activationLogic", "error", "eventUsageLogic", "legacyInsight", "getQueryBasedInsightModel", "NEW_EARLY_ACCESS_FEATURE", "NEW_SURVEY", "orgId", "projects", "currentProjectIdx", "p", "currentProject", "featureFlagKey", "copyDestinationProject", "currentProjectId", "scheduledChangeOperation", "scheduleDateMarker", "schedulePayload", "fields", "data", "scheduledChangeId", "result", "breakpoint", "lemonToast", "urls", "experimentId", "experimentLogic", "deleteWithUndo", "counts", "toParams", "filterTrendsClientSideParams", "avg", "sum", "condition", "featureFlagCopy", "operation", "errorMessage", "newCohort", "scheduledChange", "s", "stats", "hasAvailableFeature", "total", "rollout_percentage", "variantRolloutSum", "aggregationLabel", "SIDE_PANEL_CONTEXT_KEY", "currentTeam", "dashboards", "dashboard", "experiment", "__", "___", "method", "foundFlag", "formatPayloadsWithFlag", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "NEW_HOLDOUT", "holdoutsLogic", "holdout", "id", "eventUsageLogic", "state", "actions", "values", "api_default", "response", "h", "lemonToast", "NEW_EXPERIMENT", "loadMetrics", "metrics", "experimentId", "refresh", "onSetResults", "onSetErrors", "onTimeout", "results", "currentErrors", "metric", "index", "queryWithExperimentId", "response", "performQuery", "error", "errorDetailMatch", "errorDetail", "QUERY_TIMEOUT_ERROR_MESSAGE", "experimentLogic", "props", "key", "projectLogic", "groupsModel", "sceneLogic", "featureFlagLogic", "holdoutsLogic", "funnelDataLogic", "trendsDataLogic", "insightDataLogic", "sharedMetricsLogic", "experimentsLogic", "eventUsageLogic", "teamLogic", "featureFlagsLogic", "experiment", "draft", "type", "idx", "editing", "warning", "exposure", "sampleSize", "forceRefresh", "startDate", "version", "variantPreviewMediaIds", "metricIdx", "name", "isSecondary", "series", "filterTestAccounts", "breakdownAttributionType", "breakdownAttributionValue", "funnelWindowInterval", "funnelWindowIntervalUnit", "aggregation_group_type_index", "funnelAggregateByHogQL", "tabKey", "loading", "errors", "featureFlag", "sharedMetricId", "sharedMetricIds", "metadata", "isCreating", "featureFlagKey", "state", "newRolloutPercentages", "percentageDistribution", "updatedRolloutPercentageVariants", "variant", "i", "variants", "updatedVariants", "metricsKey", "_", "values", "actions", "recommendedRunningTime", "recommendedSampleSize", "minimumDetectableEffect", "hasFormErrors", "lemonToast", "isUpdate", "api_default", "dayjs", "urls", "duration", "activationLogic", "breakpoint", "endDate", "payload", "experimentEntitiesChanged", "value", "url", "toParams", "exposureCohort", "cohortsModel", "updatedParameters", "created_at", "id", "flag", "preparedFlag", "indexToVariantKeyFeatureFlagPayloads", "savedFlag", "updatedFlag", "variantKeyToIndexFeatureFlagPayloads", "existingMetricsIds", "sharedMetric", "newMetricsIds", "metricId", "m", "combinedMetricsIds", "sharedMetricsIds", "experimentUrl", "addProjectIdIfMissing", "dashboard", "singleMetrics", "sharedMetrics", "query", "insightQuery", "dashboardUrl", "message", "existingErrors", "matchingFlag", "isValid", "featureFlagEligibleForExperiment", "validateFeatureFlagKey", "secondaryMetrics", "update", "selectedVariantKey", "shouldStopExperiment", "currentFlagFilters", "newFilters", "transformFiltersForWinningVariant", "s", "entities", "userMathValue", "entity", "CountPerActorMathType", "targetValues", "PropertyMathType", "propertyMathValue", "newExperiment", "getMetricType", "conversionMetrics", "trendResults", "firstPrimaryMetric", "getMinimumDetectableEffect", "mde", "conversionRate", "metricResults", "metricIndex", "secondaryMetricResults", "experimentStatsVersion", "minimumSampleSizePerVariant", "funnelResults", "expectedRunningTime", "recommendedExposureForCountData", "currentDuration", "funnelEntrants", "funnelSampleSize", "trendCount", "baseCountData", "minCountData", "lambda1", "lambda2", "EXPERIMENT_DEFAULT_DURATION", "entrants", "metricResult", "variantKey", "variantResults", "variantFunnel", "breakdownValue", "metricType", "credibleInterval", "controlVariant", "controlConversionRate", "lowerBound", "upperBound", "controlMean", "relativeLowerBound", "relativeUpperBound", "a", "b", "aCount", "variantTrend", "result", "experimentMathAggregationForTrends", "variantData", "usingMathAggregationType", "maxValue", "tabularResults", "variantObj", "success_count", "failure_count", "count", "absolute_exposure", "conversionRateForVariant", "sum", "variantResult", "filters", "rollout_percentage", "primaryMetricsLengthWithSharedMetrics", "primaryMetric", "savedMetric", "shouldUseExperimentMetrics", "featureFlags", "allMetrics", "hasExperimentMetrics", "hasLegacyMetrics", "FEATURE_FLAGS", "parameters", "__", "currentLocation", "previousLocation", "didPathChange", "parsedId"]
}
