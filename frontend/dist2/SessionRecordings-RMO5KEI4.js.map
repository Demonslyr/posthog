{
  "version": 3,
  "sources": ["../src/scenes/session-recordings/SessionRecordings.tsx", "../src/lib/hooks/useAsyncHandler.ts", "../src/scenes/session-recordings/saved-playlists/SavedSessionRecordingPlaylists.tsx", "../src/scenes/session-recordings/saved-playlists/SavedSessionRecordingPlaylistsEmptyState.tsx", "../src/scenes/session-recordings/templates/SessionRecordingTemplates.tsx", "../src/scenes/session-recordings/templates/availableTemplates.tsx", "../src/scenes/session-recordings/templates/sessionRecordingTemplatesLogic.tsx"],
  "sourcesContent": ["import { IconEllipsis, IconGear } from '@posthog/icons'\nimport { IconOpenSidebar } from '@posthog/icons'\nimport { LemonBadge, LemonButton, LemonMenu } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { router } from 'kea-router'\nimport {\n    authorizedUrlListLogic,\n    AuthorizedUrlListType,\n    defaultAuthorizedUrlProperties,\n} from 'lib/components/AuthorizedUrlList/authorizedUrlListLogic'\nimport { FilmCameraHog, WarningHog } from 'lib/components/hedgehogs'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { ProductIntroduction } from 'lib/components/ProductIntroduction/ProductIntroduction'\nimport { VersionCheckerBanner } from 'lib/components/VersionChecker/VersionCheckerBanner'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { useAsyncHandler } from 'lib/hooks/useAsyncHandler'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { LemonTabs } from 'lib/lemon-ui/LemonTabs'\nimport { Spinner } from 'lib/lemon-ui/Spinner/Spinner'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\nimport { NotebookSelectButton } from 'scenes/notebooks/NotebookSelectButton/NotebookSelectButton'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { sessionRecordingsPlaylistLogic } from 'scenes/session-recordings/playlist/sessionRecordingsPlaylistLogic'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { urls } from 'scenes/urls'\n\nimport { sidePanelSettingsLogic } from '~/layout/navigation-3000/sidepanel/panels/sidePanelSettingsLogic'\nimport { NotebookNodeType, ReplayTabs } from '~/types'\nimport { ProductKey } from '~/types'\n\nimport { createPlaylist } from './playlist/playlistUtils'\nimport { SessionRecordingsPlaylist } from './playlist/SessionRecordingsPlaylist'\nimport { SavedSessionRecordingPlaylists } from './saved-playlists/SavedSessionRecordingPlaylists'\nimport { humanFriendlyTabName, sessionReplaySceneLogic } from './sessionReplaySceneLogic'\nimport SessionRecordingTemplates from './templates/SessionRecordingTemplates'\n\nfunction Header(): JSX.Element {\n    const { tab } = useValues(sessionReplaySceneLogic)\n    const { currentTeam } = useValues(teamLogic)\n    const recordingsDisabled = currentTeam && !currentTeam?.session_recording_opt_in\n    const { reportRecordingPlaylistCreated } = useActions(eventUsageLogic)\n\n    const { openSettingsPanel } = useActions(sidePanelSettingsLogic)\n\n    // NB this relies on `updateSearchParams` being the only prop needed to pick the correct \"Recent\" tab list logic\n    const { filters, totalFiltersCount } = useValues(sessionRecordingsPlaylistLogic({ updateSearchParams: true }))\n    const saveFiltersPlaylistHandler = useAsyncHandler(async () => {\n        await createPlaylist({ filters }, true)\n        reportRecordingPlaylistCreated('filters')\n    })\n\n    const newPlaylistHandler = useAsyncHandler(async () => {\n        await createPlaylist({}, true)\n        reportRecordingPlaylistCreated('new')\n    })\n\n    return (\n        <PageHeader\n            buttons={\n                <>\n                    {tab === ReplayTabs.Home && !recordingsDisabled && (\n                        <>\n                            <LemonMenu\n                                items={[\n                                    {\n                                        label: 'Playback from PostHog JSON file',\n                                        to: urls.replayFilePlayback(),\n                                    },\n                                ]}\n                            >\n                                <LemonButton icon={<IconEllipsis />} />\n                            </LemonMenu>\n                            <NotebookSelectButton\n                                resource={{\n                                    type: NotebookNodeType.RecordingPlaylist,\n                                    attrs: { filters: filters },\n                                }}\n                                type=\"secondary\"\n                            />\n                            <LemonButton\n                                fullWidth={false}\n                                data-attr=\"session-recordings-filters-save-as-playlist\"\n                                type=\"primary\"\n                                onClick={(e) =>\n                                    // choose the type of playlist handler so that analytics correctly report\n                                    // whether filters have been changed before saving\n                                    totalFiltersCount === 0\n                                        ? newPlaylistHandler.onEvent?.(e)\n                                        : saveFiltersPlaylistHandler.onEvent?.(e)\n                                }\n                            >\n                                Save as playlist\n                            </LemonButton>\n                            <LemonButton\n                                type=\"secondary\"\n                                icon={<IconGear />}\n                                onClick={() => openSettingsPanel({ sectionId: 'project-replay' })}\n                            >\n                                Configure\n                            </LemonButton>\n                        </>\n                    )}\n\n                    {tab === ReplayTabs.Playlists && (\n                        <LemonButton\n                            type=\"primary\"\n                            onClick={(e) => newPlaylistHandler.onEvent?.(e)}\n                            data-attr=\"save-recordings-playlist-button\"\n                            loading={newPlaylistHandler.loading}\n                        >\n                            New playlist\n                        </LemonButton>\n                    )}\n                </>\n            }\n        />\n    )\n}\n\nfunction Warnings(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n    const recordingsDisabled = currentTeam && !currentTeam?.session_recording_opt_in\n\n    const { openSettingsPanel } = useActions(sidePanelSettingsLogic)\n\n    const theAuthorizedUrlsLogic = authorizedUrlListLogic({\n        ...defaultAuthorizedUrlProperties,\n        type: AuthorizedUrlListType.RECORDING_DOMAINS,\n    })\n    const { suggestions, authorizedUrls } = useValues(theAuthorizedUrlsLogic)\n    const { featureFlags } = useValues(featureFlagLogic)\n\n    const mightBeRefusingRecordings = suggestions.length > 0 && authorizedUrls.length > 0\n    const settingLevel = featureFlags[FEATURE_FLAGS.ENVIRONMENTS] ? 'environment' : 'project'\n\n    return (\n        <>\n            <VersionCheckerBanner />\n\n            {recordingsDisabled ? (\n                <LemonBanner type=\"info\" hideIcon={true}>\n                    <div className=\"flex gap-8 p-8 md:flex-row justify-center flex-wrap\">\n                        <div className=\"flex justify-center items-center w-full md:w-50\">\n                            <WarningHog className=\"w-full h-auto md:h-[200px] md:w-[200px] max-w-50\" />\n                        </div>\n                        <div className=\"flex flex-col gap-2 flex-shrink max-w-180\">\n                            <h2 className=\"text-lg font-semibold\">\n                                Session recordings are not yet enabled for this {settingLevel}\n                            </h2>\n                            <p className=\"font-normal\">Enabling session recordings will help you:</p>\n                            <ul className=\"list-disc list-inside font-normal\">\n                                <li>\n                                    <strong>Understand user behavior:</strong> Get a clear view of how people navigate\n                                    and interact with your product.\n                                </li>\n                                <li>\n                                    <strong>Identify UI/UX issues:</strong> Spot friction points and refine your design\n                                    to increase usability.\n                                </li>\n                                <li>\n                                    <strong>Improve customer support:</strong> Quickly diagnose problems and provide\n                                    more accurate solutions.\n                                </li>\n                                <li>\n                                    <strong>Refine product decisions:</strong> Use real insights to prioritize features\n                                    and improvements.\n                                </li>\n                            </ul>\n                            <p className=\"font-normal\">\n                                Enable session recordings to unlock these benefits and create better experiences for\n                                your users.\n                            </p>\n                            <div className=\"flex items-center gap-x-4 gap-y-2 flex-wrap\">\n                                <LemonButton\n                                    className=\"hidden @md:flex\"\n                                    type=\"primary\"\n                                    icon={<IconGear />}\n                                    onClick={() => openSettingsPanel({ sectionId: 'project-replay' })}\n                                >\n                                    Configure\n                                </LemonButton>\n                                <LemonButton\n                                    type=\"tertiary\"\n                                    sideIcon={<IconOpenSidebar className=\"w-4 h-4\" />}\n                                    to=\"https://posthog.com/docs/session-replay?utm_medium=in-product&utm_campaign=empty-state-docs-link\"\n                                    data-attr=\"product-introduction-docs-link\"\n                                    targetBlank\n                                >\n                                    Learn more\n                                </LemonButton>\n                            </div>\n                        </div>\n                    </div>\n                </LemonBanner>\n            ) : (\n                <ProductIntroduction\n                    productName=\"session replay\"\n                    productKey={ProductKey.SESSION_REPLAY}\n                    thingName=\"playlist\"\n                    description=\"Use session replay playlists to easily group and analyze user sessions. Curate playlists based on events or user segments, spot patterns, diagnose issues, and share insights with your team.\"\n                    docsURL=\"https://posthog.com/docs/session-replay/manual\"\n                    customHog={FilmCameraHog}\n                />\n            )}\n\n            {!recordingsDisabled && mightBeRefusingRecordings ? (\n                <LemonBanner\n                    type=\"warning\"\n                    action={{\n                        type: 'secondary',\n                        icon: <IconGear />,\n                        onClick: () =>\n                            openSettingsPanel({ sectionId: 'project-replay', settingId: 'replay-authorized-domains' }),\n                        children: 'Configure',\n                    }}\n                    dismissKey={`session-recordings-authorized-domains-warning/${suggestions.join(',')}`}\n                >\n                    You have unauthorized domains trying to send recordings. To accept recordings from these domains,\n                    please check your config.\n                </LemonBanner>\n            ) : null}\n        </>\n    )\n}\n\nfunction MainPanel(): JSX.Element {\n    const { tab } = useValues(sessionReplaySceneLogic)\n\n    return (\n        <div className=\"space-y-4 mt-2\">\n            <Warnings />\n\n            {!tab ? (\n                <Spinner />\n            ) : tab === ReplayTabs.Home ? (\n                <div className=\"SessionRecordingPlaylistHeightWrapper\">\n                    <SessionRecordingsPlaylist updateSearchParams />\n                </div>\n            ) : tab === ReplayTabs.Playlists ? (\n                <SavedSessionRecordingPlaylists tab={ReplayTabs.Playlists} />\n            ) : tab === ReplayTabs.Templates ? (\n                <SessionRecordingTemplates />\n            ) : null}\n        </div>\n    )\n}\n\nfunction PageTabs(): JSX.Element {\n    const { tab, shouldShowNewBadge } = useValues(sessionReplaySceneLogic)\n\n    return (\n        <LemonTabs\n            activeKey={tab}\n            onChange={(t) => router.actions.push(urls.replay(t as ReplayTabs))}\n            tabs={Object.values(ReplayTabs).map((replayTab) => {\n                return {\n                    label: (\n                        <>\n                            {humanFriendlyTabName(replayTab)}\n                            {replayTab === ReplayTabs.Templates && shouldShowNewBadge && (\n                                <LemonBadge className=\"ml-1\" size=\"small\" />\n                            )}\n                        </>\n                    ),\n                    key: replayTab,\n                }\n            })}\n        />\n    )\n}\nexport function SessionsRecordings(): JSX.Element {\n    return (\n        <>\n            <Header />\n            <PageTabs />\n            <MainPanel />\n        </>\n    )\n}\n\nexport const scene: SceneExport = {\n    component: SessionsRecordings,\n    logic: sessionReplaySceneLogic,\n}\n", "import { useState } from 'react'\n\n/**\n * Wraps an event handler to set a loading state while the handler is running.\n * @param onEvent The event handler to wrap.\n * @returns The wrapped event handler and a loading state.\n * @example\n * const { loading, onEvent } = useAsyncHandler(() => await api.doSomething())\n * return <LemonButton onClick={onEvent} loading={loading}>Click me</button>\n */\nexport function useAsyncHandler<E extends React.UIEvent>(\n    onEvent: ((e: E) => any) | undefined\n): { loading: boolean; onEvent: ((e: E) => void) | undefined } {\n    const [loading, setLoading] = useState(false)\n\n    const onEventWrapper = onEvent\n        ? (e: E) => {\n              if (onEvent) {\n                  const result = onEvent(e)\n                  if (result instanceof Promise) {\n                      setLoading(true)\n                      void result.finally(() => setLoading(false))\n                  }\n              }\n          }\n        : undefined\n\n    return {\n        loading: loading,\n        onEvent: onEventWrapper,\n    }\n}\n", "import { IconCalendar, IconPin, IconPinFilled } from '@posthog/icons'\nimport { LemonButton, LemonDivider, LemonInput, LemonTable, Link } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { DateFilter } from 'lib/components/DateFilter/DateFilter'\nimport { MemberSelect } from 'lib/components/MemberSelect'\nimport { TZLabel } from 'lib/components/TZLabel'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonTableColumn, LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { createdByColumn } from 'lib/lemon-ui/LemonTable/columnUtils'\nimport { SavedSessionRecordingPlaylistsEmptyState } from 'scenes/session-recordings/saved-playlists/SavedSessionRecordingPlaylistsEmptyState'\nimport { urls } from 'scenes/urls'\n\nimport { ReplayTabs, SessionRecordingPlaylistType } from '~/types'\n\nimport { PLAYLISTS_PER_PAGE, savedSessionRecordingPlaylistsLogic } from './savedSessionRecordingPlaylistsLogic'\n\nexport type SavedSessionRecordingPlaylistsProps = {\n    tab: ReplayTabs.Playlists\n}\n\nfunction nameColumn(): LemonTableColumn<SessionRecordingPlaylistType, 'name'> {\n    return {\n        title: 'Name',\n        dataIndex: 'name',\n        render: function Render(name, { short_id, derived_name, description }) {\n            return (\n                <>\n                    <Link className={clsx('font-semibold', !name && 'italic')} to={urls.replayPlaylist(short_id)}>\n                        {name || derived_name || 'Unnamed'}\n                    </Link>\n                    {description ? <div className=\"truncate\">{description}</div> : null}\n                </>\n            )\n        },\n    }\n}\n\nexport function SavedSessionRecordingPlaylists({ tab }: SavedSessionRecordingPlaylistsProps): JSX.Element {\n    const logic = savedSessionRecordingPlaylistsLogic({ tab })\n    const { playlists, playlistsLoading, filters, sorting, pagination } = useValues(logic)\n    const { setSavedPlaylistsFilters, updatePlaylist, duplicatePlaylist, deletePlaylist } = useActions(logic)\n\n    const columns: LemonTableColumns<SessionRecordingPlaylistType> = [\n        {\n            width: 0,\n            dataIndex: 'pinned',\n            render: function Render(pinned, { short_id }) {\n                return (\n                    <LemonButton\n                        size=\"small\"\n                        onClick={() => updatePlaylist(short_id, { pinned: !pinned })}\n                        icon={pinned ? <IconPinFilled /> : <IconPin />}\n                    />\n                )\n            },\n        },\n        nameColumn() as LemonTableColumn<SessionRecordingPlaylistType, keyof SessionRecordingPlaylistType | undefined>,\n        {\n            ...(createdByColumn<SessionRecordingPlaylistType>() as LemonTableColumn<\n                SessionRecordingPlaylistType,\n                keyof SessionRecordingPlaylistType | undefined\n            >),\n            width: 0,\n        },\n        {\n            title: 'Last modified',\n            sorter: true,\n            dataIndex: 'last_modified_at',\n            width: 0,\n            render: function Render(last_modified_at) {\n                return (\n                    <div>\n                        {last_modified_at && typeof last_modified_at === 'string' && (\n                            <TZLabel time={last_modified_at} />\n                        )}\n                    </div>\n                )\n            },\n        },\n\n        {\n            width: 0,\n            render: function Render(_, playlist) {\n                return (\n                    <More\n                        overlay={\n                            <>\n                                <LemonButton\n                                    onClick={() => duplicatePlaylist(playlist)}\n                                    fullWidth\n                                    data-attr=\"duplicate-playlist\"\n                                    loading={playlistsLoading}\n                                >\n                                    Duplicate\n                                </LemonButton>\n                                <LemonDivider />\n\n                                <LemonButton\n                                    status=\"danger\"\n                                    onClick={() => deletePlaylist(playlist)}\n                                    fullWidth\n                                    loading={playlistsLoading}\n                                >\n                                    Delete playlist\n                                </LemonButton>\n                            </>\n                        }\n                    />\n                )\n            },\n        },\n    ]\n\n    return (\n        <div className=\"space-y-4\">\n            <div className=\"flex justify-between gap-2 mb-2 items-center flex-wrap\">\n                <LemonInput\n                    type=\"search\"\n                    placeholder=\"Search for playlists\"\n                    onChange={(value) => setSavedPlaylistsFilters({ search: value || undefined })}\n                    value={filters.search || ''}\n                />\n                <div className=\"flex items-center gap-4 flex-wrap\">\n                    <div className=\"flex items-center gap-2\">\n                        <LemonButton\n                            data-attr=\"session-recording-playlist-pinned-filter\"\n                            active={filters.pinned}\n                            size=\"small\"\n                            type=\"secondary\"\n                            status=\"alt\"\n                            center\n                            onClick={() => setSavedPlaylistsFilters({ pinned: !filters.pinned })}\n                            icon={filters.pinned ? <IconPinFilled /> : <IconPin />}\n                        >\n                            Pinned\n                        </LemonButton>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                        <span>Last modified:</span>\n                        <DateFilter\n                            disabled={false}\n                            dateFrom={filters.dateFrom}\n                            dateTo={filters.dateTo}\n                            onChange={(fromDate, toDate) =>\n                                setSavedPlaylistsFilters({ dateFrom: fromDate, dateTo: toDate ?? undefined })\n                            }\n                            makeLabel={(key) => (\n                                <>\n                                    <IconCalendar />\n                                    <span className=\"hide-when-small\"> {key}</span>\n                                </>\n                            )}\n                            max={21}\n                        />\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                        <span>Created by:</span>\n                        <MemberSelect\n                            value={filters.createdBy === 'All users' ? null : filters.createdBy}\n                            onChange={(user) => setSavedPlaylistsFilters({ createdBy: user?.id || 'All users' })}\n                        />\n                    </div>\n                </div>\n            </div>\n\n            {!playlistsLoading && playlists.count < 1 ? (\n                <SavedSessionRecordingPlaylistsEmptyState />\n            ) : (\n                <LemonTable\n                    loading={playlistsLoading}\n                    columns={columns}\n                    dataSource={playlists.results}\n                    pagination={pagination}\n                    noSortingCancellation\n                    sorting={sorting}\n                    onSort={(newSorting) =>\n                        setSavedPlaylistsFilters({\n                            order: newSorting\n                                ? `${newSorting.order === -1 ? '-' : ''}${newSorting.columnKey}`\n                                : undefined,\n                        })\n                    }\n                    rowKey=\"id\"\n                    loadingSkeletonRows={PLAYLISTS_PER_PAGE}\n                    nouns={['playlist', 'playlists']}\n                />\n            )}\n        </div>\n    )\n}\n", "import { IconPlus } from '@posthog/icons'\nimport { useValues } from 'kea'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\n\nimport { ReplayTabs } from '~/types'\n\nimport { createPlaylist } from '../playlist/playlistUtils'\nimport { savedSessionRecordingPlaylistsLogic } from './savedSessionRecordingPlaylistsLogic'\n\nexport function SavedSessionRecordingPlaylistsEmptyState(): JSX.Element {\n    const playlistsLogic = savedSessionRecordingPlaylistsLogic({ tab: ReplayTabs.Home })\n    const { loadPlaylistsFailed } = useValues(playlistsLogic)\n    return loadPlaylistsFailed ? (\n        <LemonBanner type=\"error\">Error while trying to load playlist.</LemonBanner>\n    ) : (\n        <div className=\"flex items-center justify-center\">\n            <div className=\"max-w-248 mt-12 flex flex-col items-center\">\n                <h2 className=\"text-xl\">There are no playlists that match these filters</h2>\n                <p className=\"text-secondary\">Once you create a playlist, it will show up here.</p>\n                <LemonButton\n                    type=\"primary\"\n                    data-attr=\"add-session-playlist-button-empty-state\"\n                    icon={<IconPlus />}\n                    onClick={() => void createPlaylist({}, true)}\n                >\n                    New playlist\n                </LemonButton>\n            </div>\n        </div>\n    )\n}\n", "import { LemonButton, LemonCard, LemonInput, LemonLabel, Link } from '@posthog/lemon-ui'\nimport { useActions, useMountedLogic, useValues } from 'kea'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport UniversalFilters from 'lib/components/UniversalFilters/UniversalFilters'\nimport { universalFiltersLogic } from 'lib/components/UniversalFilters/universalFiltersLogic'\nimport { isUniversalGroupFilterLike } from 'lib/components/UniversalFilters/utils'\n\nimport { actionsModel } from '~/models/actionsModel'\nimport {\n    FeaturePropertyFilter,\n    FilterLogicalOperator,\n    ReplayTemplateCategory,\n    ReplayTemplateType,\n    ReplayTemplateVariableType,\n} from '~/types'\n\nimport { replayTemplates } from './availableTemplates'\nimport { sessionReplayTemplatesLogic } from './sessionRecordingTemplatesLogic'\n\ninterface RecordingTemplateCardProps {\n    template: ReplayTemplateType\n    category: ReplayTemplateCategory\n}\n\nconst allCategories: ReplayTemplateCategory[] = replayTemplates\n    .flatMap((template) => template.categories)\n    .filter((category, index, self) => self.indexOf(category) === index)\n\nconst NestedFilterGroup = ({\n    rootKey,\n    buttonTitle,\n    selectOne,\n}: {\n    rootKey: string\n    buttonTitle?: string\n    selectOne?: boolean\n}): JSX.Element => {\n    const { filterGroup } = useValues(universalFiltersLogic)\n    const { replaceGroupValue, removeGroupValue } = useActions(universalFiltersLogic)\n\n    return (\n        <div>\n            <div className=\"inline-flex flex-col gap-2\">\n                {filterGroup.values.map((filterOrGroup, index) => {\n                    return isUniversalGroupFilterLike(filterOrGroup) ? (\n                        <UniversalFilters.Group key={index} index={index} group={filterOrGroup}>\n                            <NestedFilterGroup rootKey={rootKey} />\n                        </UniversalFilters.Group>\n                    ) : (\n                        <UniversalFilters.Value\n                            key={index}\n                            index={index}\n                            filter={filterOrGroup}\n                            onRemove={() => removeGroupValue(index)}\n                            onChange={(value) => replaceGroupValue(index, value)}\n                        />\n                    )\n                })}\n                {!selectOne || (selectOne && filterGroup.values.length === 0) ? (\n                    <div>\n                        <UniversalFilters.AddFilterButton title={buttonTitle} type=\"secondary\" size=\"xsmall\" />\n                    </div>\n                ) : null}\n            </div>\n        </div>\n    )\n}\n\nconst SingleTemplateVariable = ({\n    variable,\n    ...props\n}: RecordingTemplateCardProps & {\n    variable: ReplayTemplateVariableType\n}): JSX.Element | null => {\n    const { setVariable, resetVariable } = useActions(sessionReplayTemplatesLogic(props))\n    useMountedLogic(actionsModel)\n\n    return variable.type === 'pageview' ? (\n        <div>\n            <LemonLabel info={variable.description}>{variable.name}</LemonLabel>\n            <LemonInput\n                placeholder={variable.value}\n                value={variable.value}\n                onChange={(e) =>\n                    e ? setVariable({ ...variable, value: e }) : resetVariable({ ...variable, value: undefined })\n                }\n                size=\"small\"\n            />\n        </div>\n    ) : ['event', 'flag', 'person-property'].includes(variable.type) ? (\n        <div>\n            <LemonLabel info={variable.description}>{variable.name}</LemonLabel>\n            <UniversalFilters\n                rootKey={`session-recordings-${variable.key}`}\n                group={{\n                    type: FilterLogicalOperator.And,\n                    values: variable.filterGroup ? [variable.filterGroup] : [],\n                }}\n                taxonomicGroupTypes={\n                    variable.type === 'event'\n                        ? [TaxonomicFilterGroupType.Events, TaxonomicFilterGroupType.Actions]\n                        : variable.type === 'flag'\n                        ? [TaxonomicFilterGroupType.FeatureFlags]\n                        : variable.type === 'person-property'\n                        ? [TaxonomicFilterGroupType.PersonProperties]\n                        : []\n                }\n                onChange={(thisFilterGroup) => {\n                    if (thisFilterGroup.values.length === 0) {\n                        resetVariable({ ...variable, filterGroup: undefined })\n                    } else if (variable.type === 'flag') {\n                        setVariable({ ...variable, value: (thisFilterGroup.values[0] as FeaturePropertyFilter).key })\n                    } else {\n                        setVariable({ ...variable, filterGroup: thisFilterGroup.values[0] })\n                    }\n                }}\n            >\n                <NestedFilterGroup\n                    rootKey=\"session-recordings\"\n                    buttonTitle={`Select ${\n                        variable.type === 'event' ? 'event' : variable.type === 'flag' ? 'flag' : 'person property'\n                    }`}\n                    selectOne={variable.type == 'flag'}\n                />\n            </UniversalFilters>\n        </div>\n    ) : null\n}\n\nconst TemplateVariables = (props: RecordingTemplateCardProps): JSX.Element => {\n    const { navigate } = useActions(sessionReplayTemplatesLogic(props))\n    const { variables, canApplyFilters } = useValues(sessionReplayTemplatesLogic(props))\n    return (\n        <div className=\"flex flex-col gap-2\">\n            {variables\n                .filter((v) => !v.noTouch)\n                .map((variable) => (\n                    <SingleTemplateVariable key={variable.key} variable={variable} {...props} />\n                ))}\n            <div>\n                <LemonButton\n                    onClick={() => navigate()}\n                    type=\"primary\"\n                    className=\"mt-2\"\n                    disabledReason={!canApplyFilters ? 'Please set a value for at least one variable' : undefined}\n                >\n                    Apply filters\n                </LemonButton>\n            </div>\n        </div>\n    )\n}\n\nconst RecordingTemplateCard = (props: RecordingTemplateCardProps): JSX.Element => {\n    const { showVariables, hideVariables } = useActions(sessionReplayTemplatesLogic(props))\n    const { variablesVisible } = useValues(sessionReplayTemplatesLogic(props))\n\n    return (\n        <LemonCard\n            className=\"w-80\"\n            onClick={() => {\n                showVariables()\n            }}\n            closeable={variablesVisible}\n            onClose={hideVariables}\n            focused={variablesVisible}\n            data-attr=\"session-replay-template\"\n            data-ph-capture-attribute-category={props.category}\n            data-ph-capture-attribute-template={props.template.key}\n        >\n            <div className=\"flex flex-col gap-2\">\n                <div className=\"flex items-center gap-2\">\n                    {props.template.icon && (\n                        <div className=\"bg-surface-primary rounded p-2 w-8 h-8 flex items-center justify-center\">\n                            {props.template.icon}\n                        </div>\n                    )}\n                    <h3 className=\"mb-0\">\n                        <Link onClick={() => showVariables()} className=\"text-accent-primary\">\n                            {props.template.name}\n                        </Link>\n                    </h3>\n                </div>\n                <p>{props.template.description}</p>\n                {variablesVisible ? <TemplateVariables {...props} /> : null}\n            </div>\n        </LemonCard>\n    )\n}\n\nconst SessionRecordingTemplates = (): JSX.Element => {\n    return (\n        <div>\n            <h2>Figure out what to watch</h2>\n            <p>To get the most out of session replay, you just need to know where to start. </p>\n            <p>\n                Use our templates to find a focus area, then watch the filtered replays to see where users struggle,\n                what could be made more clear, and other ways to improve.\n            </p>\n            {allCategories.map((category) => (\n                <div key={`replay-template-category-${category}`} className=\"mb-6\">\n                    <h2>{category}</h2>\n                    <div className=\"flex flex-wrap gap-2\">\n                        {replayTemplates\n                            .filter((template) => template.categories.includes(category))\n                            .map((template) => (\n                                <RecordingTemplateCard key={template.key} template={template} category={category} />\n                            ))}\n                    </div>\n                </div>\n            ))}\n        </div>\n    )\n}\n\nexport default SessionRecordingTemplates\n", "import {\n    IconApp,\n    IconCursorClick,\n    IconFlag,\n    IconHandMoney,\n    IconPhone,\n    IconSearch,\n    IconThumbsDown,\n    IconUser,\n    IconVideoCamera,\n} from '@posthog/icons'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\n\nimport { PropertyFilterType, PropertyOperator, ReplayTemplateType } from '~/types'\n\nexport const replayTemplates: ReplayTemplateType[] = [\n    {\n        key: 'signup-flow',\n        name: 'Signup flow',\n        description: 'Watch how users sign up for your website. Look for any areas or steps that cause friction.',\n        variables: [\n            {\n                type: 'pageview',\n                name: 'Signup page URL',\n                key: 'signup-page-url',\n                value: '/signup',\n                description: 'Complete or partial URL',\n            },\n        ],\n        categories: ['B2B'],\n        icon: <IconUser />,\n    },\n    {\n        key: 'pricing-page',\n        name: 'Pricing page',\n        description: 'Watch how users navigate your pricing page. Look for any areas or steps that cause friction.',\n        variables: [\n            {\n                type: 'pageview',\n                name: 'Pricing page URL',\n                key: 'pricing-page-url',\n                description: 'Complete or partial URL',\n            },\n        ],\n        categories: ['B2B'],\n        icon: <IconHandMoney />,\n    },\n    {\n        key: 'upgrade-flow',\n        name: 'Upgrade / subscribe flow',\n        description:\n            'Watch how users upgrade to the paid plan on your website. Look for any areas or steps that cause friction.',\n        variables: [\n            {\n                type: 'pageview',\n                name: 'Upgrade / subscribe page URL',\n                key: 'upgrade-subscribe-page-url',\n                description: 'Complete or partial URL',\n            },\n            {\n                type: 'event',\n                name: 'Upgrade / subscribe event',\n                key: 'upgrade-subscribe-event',\n                description: 'The event that triggers the upgrade / subscribe flow.',\n            },\n        ],\n        categories: ['B2B'],\n        icon: <IconHandMoney />,\n    },\n    {\n        key: 'onboarding-flow',\n        name: 'Onboarding flow',\n        description: 'Watch how users onboard to your website. Look for any areas or steps that cause friction.',\n        variables: [\n            {\n                type: 'pageview',\n                name: 'Onboarding page URL',\n                key: 'onboarding-page-url',\n                description: 'Complete or partial URL',\n            },\n        ],\n        categories: ['B2B'],\n        icon: <IconApp />,\n    },\n    {\n        key: 'feature-usage',\n        name: 'Feature usage',\n        description:\n            'Think of a feature you want to improve. Watch how users interact with it, and see where they get stuck.',\n        variables: [\n            {\n                type: 'event',\n                name: 'Feature event',\n                key: 'feature-event',\n                description: 'The event that indicates a user has interacted with the feature.',\n            },\n            {\n                type: 'pageview',\n                name: 'Feature page URL',\n                key: 'feature-page-url',\n                description: 'Complete or partial URL where the feature is located.',\n            },\n        ],\n        categories: ['B2B', 'B2C'],\n        icon: <IconCursorClick />,\n    },\n    {\n        key: 'purchase-flow',\n        name: 'Purchase flow',\n        description: 'Watch how users purchase from your website. Look for any areas or steps that cause friction.',\n        variables: [\n            {\n                type: 'pageview',\n                name: 'Purchase page URL',\n                key: 'purchase-page-url',\n                description: 'Complete or partial URL',\n            },\n        ],\n        categories: ['B2C'],\n        icon: <IconHandMoney />,\n    },\n    {\n        key: 'product-search',\n        name: 'Product search',\n        description:\n            'Watch how users search for products on your website. Look for any areas or steps that cause friction.',\n        variables: [\n            {\n                type: 'event',\n                name: 'Product search event',\n                key: 'product-search-event',\n                description: 'The event that indicates a user has searched for something on your website.',\n            },\n        ],\n        categories: ['B2C'],\n        icon: <IconSearch />,\n    },\n    {\n        key: 'experiment',\n        name: 'A/B test results',\n        description: 'Watch how users interact with your A/B test. Look for any areas or steps that cause friction.',\n        variables: [\n            {\n                type: 'flag',\n                name: 'Feature flag',\n                key: 'feature-flag',\n                description: 'The feature flag that you want to observe.',\n            },\n        ],\n        categories: ['More'],\n        icon: <IconFlag />,\n    },\n    {\n        key: 'rageclicks',\n        name: 'Rageclicks',\n        description: 'See where users are \"rageclicking\" on your website to find things that don\\'t work as expected.',\n        variables: [\n            {\n                type: 'event',\n                name: 'Rageclick event',\n                key: 'rageclick-event',\n                description: 'The event that indicates a user has \"rageclicked\" on your website.',\n                noTouch: true,\n                filterGroup: {\n                    id: '$rageclick',\n                    name: '$rageclick',\n                    type: TaxonomicFilterGroupType.Events,\n                },\n            },\n        ],\n        categories: ['More'],\n        icon: <IconThumbsDown />,\n    },\n    {\n        key: 'scattershot',\n        name: 'Scattershot',\n        description: 'Watch all recent replays, and see where users are getting stuck.',\n        variables: [],\n        categories: ['More'],\n        order: 'start_time',\n        icon: <IconVideoCamera />,\n    },\n    {\n        key: 'person-property',\n        name: 'Person property',\n        description: 'Watch all replays for users with a specific property, like a specific email address.',\n        variables: [\n            {\n                type: 'person-property',\n                name: 'Person property',\n                key: 'person-property',\n                description: 'The person property that you want to observe.',\n            },\n        ],\n        categories: ['More'],\n        icon: <IconUser />,\n    },\n    {\n        key: 'mobile-devices',\n        name: 'Mobile devices',\n        description: 'Watch replays from mobile device web browsers to look for problems with your responsive design.',\n        variables: [\n            {\n                type: 'snapshot_source',\n                name: 'Mobile device',\n                key: 'mobile-device',\n                description: 'Users who used your website on a mobile device.',\n                noTouch: true,\n                filterGroup: {\n                    id: '$pageview',\n                    name: '$pageview',\n                    type: 'events',\n                    properties: [\n                        {\n                            key: '$screen_width',\n                            value: '600',\n                            operator: PropertyOperator.LessThan,\n                            type: PropertyFilterType.Event,\n                        },\n                    ],\n                },\n            },\n        ],\n        categories: ['More'],\n        icon: <IconPhone />,\n    },\n    {\n        key: 'activity-score',\n        name: 'Most active users',\n        description: 'Watch recordings of the most active sessions. Lots of valuable insights, guaranteed!',\n        order: 'activity_score',\n        categories: ['More'],\n        icon: <IconCursorClick />,\n    },\n]\n", "import clsx from 'clsx'\nimport { actions, connect, events, kea, key, listeners, path, props, reducers, selectors } from 'kea'\nimport { router } from 'kea-router'\nimport posthog from 'posthog-js'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { urls } from 'scenes/urls'\n\nimport {\n    FilterLogicalOperator,\n    PropertyFilterType,\n    PropertyOperator,\n    RecordingUniversalFilters,\n    ReplayTabs,\n    ReplayTemplateCategory,\n    ReplayTemplateType,\n    ReplayTemplateVariableType,\n    UniversalFiltersGroupValue,\n} from '~/types'\n\nimport type { sessionReplayTemplatesLogicType } from './sessionRecordingTemplatesLogicType'\n\nconst getPageviewFilterValue = (pageview: string): UniversalFiltersGroupValue => {\n    return {\n        key: 'visited_page',\n        value: pageview,\n        operator: PropertyOperator.IContains,\n        type: PropertyFilterType.Recording,\n    }\n}\n\nconst getFlagFilterValue = (flag: string): UniversalFiltersGroupValue => {\n    return {\n        id: '$feature_flag_called',\n        name: '$feature_flag_called',\n        type: 'events',\n        properties: [\n            {\n                key: `$feature/${flag}`,\n                type: PropertyFilterType.Event,\n                value: ['false'],\n                operator: PropertyOperator.IsNot,\n            },\n            {\n                key: `$feature/${flag}`,\n                type: PropertyFilterType.Event,\n                value: 'is_set',\n                operator: PropertyOperator.IsSet,\n            },\n            {\n                key: '$feature_flag',\n                type: PropertyFilterType.Event,\n                value: flag,\n                operator: PropertyOperator.Exact,\n            },\n        ],\n    }\n}\n\nexport interface ReplayTemplateLogicPropsType {\n    template: ReplayTemplateType\n    // one card can be in multiple categories,\n    // key on the category so that multiple instances of the same card are isolated\n    category: ReplayTemplateCategory\n}\n\nexport const sessionReplayTemplatesLogic = kea<sessionReplayTemplatesLogicType>([\n    path(() => ['scenes', 'session-recordings', 'templates', 'sessionReplayTemplatesLogic']),\n    props({} as ReplayTemplateLogicPropsType),\n    key((props) => `${props.category}-${props.template.key}`),\n    connect({\n        values: [teamLogic, ['currentTeam']],\n    }),\n    actions({\n        setVariables: (variables?: ReplayTemplateVariableType[]) => ({ variables }),\n        setVariable: (variable: ReplayTemplateVariableType) => ({ variable }),\n        resetVariable: (variable: ReplayTemplateVariableType) => ({ variable }),\n        navigate: true,\n        showVariables: true,\n        hideVariables: true,\n    }),\n    reducers(({ props, values }) => ({\n        variables: [\n            props.template.variables ?? [],\n            {\n                persist: true,\n                storageKey: clsx(\n                    'session-recordings.templates.variables',\n                    values.currentTeam?.id,\n                    props.category,\n                    props.template.key\n                ),\n            },\n            {\n                setVariables: (_, { variables }) => variables ?? [],\n                setVariable: (state, { variable }) =>\n                    state.map((v) => (v.key === variable.key ? { ...variable, touched: true } : v)),\n                resetVariable: (state, { variable }) =>\n                    state.map((v) => (v.key === variable.key ? { ...variable, touched: false } : v)),\n            },\n        ],\n        variablesVisible: [\n            false,\n            {\n                showVariables: () => true,\n                hideVariables: () => false,\n            },\n        ],\n    })),\n    selectors({\n        filterGroup: [\n            (s) => [s.variables],\n            (variables) => {\n                const filters = variables\n                    .map((variable) => {\n                        if (variable.type === 'pageview' && variable.value) {\n                            return getPageviewFilterValue(variable.value)\n                        }\n                        if (variable.type === 'flag' && variable.value) {\n                            return getFlagFilterValue(variable.value)\n                        }\n                        if (\n                            ['snapshot_source', 'event', 'person-property'].includes(variable.type) &&\n                            variable.filterGroup\n                        ) {\n                            return variable.filterGroup\n                        }\n                        return undefined\n                    })\n                    .filter((filter): filter is UniversalFiltersGroupValue => filter !== undefined)\n\n                const filterGroup: Partial<RecordingUniversalFilters> = {\n                    filter_group: {\n                        type: FilterLogicalOperator.And,\n                        values: [\n                            {\n                                type: FilterLogicalOperator.And,\n                                values: filters,\n                            },\n                        ],\n                    },\n                    // TODO this should set order on the filter group after https://github.com/PostHog/posthog/pull/25701\n                }\n                return filterGroup\n            },\n        ],\n        canApplyFilters: [\n            (s) => [s.variables, s.areAnyVariablesTouched],\n            (variables, areAnyVariablesTouched) => areAnyVariablesTouched || variables.length === 0,\n        ],\n        areAnyVariablesTouched: [\n            (s) => [s.variables],\n            (variables) => variables.some((v) => v.touched) || variables.some((v) => v.noTouch),\n        ],\n        editableVariables: [(s) => [s.variables], (variables) => variables.filter((v) => !v.noTouch)],\n    }),\n    listeners(({ values, props }) => ({\n        navigate: () => {\n            posthog.capture('session replay template used', {\n                template: props.template.key,\n                category: props.category,\n            })\n            const filterGroup = values.variables.length > 0 ? values.filterGroup : undefined\n            router.actions.push(urls.replay(ReplayTabs.Home, filterGroup, undefined, props.template.order))\n        },\n    })),\n    events(({ actions, props, values }) => ({\n        afterMount: () => {\n            if (values.variables.length === 0) {\n                actions.setVariables(props.template.variables)\n            }\n        },\n    })),\n])\n"],
  "mappings": "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AA,EAAS,CACpB,EACA,CACI,IAAK,eACL,KAAM,eACN,YAAa,+FACb,UAAW,CACP,CACI,KAAM,WACN,KAAM,mBACN,IAAK,mBACL,YAAa,yBACjB,CACJ,EACA,WAAY,CAAC,KAAK,EAClB,QAAM,OAACC,EAAA,EAAc,CACzB,EACA,CACI,IAAK,eACL,KAAM,2BACN,YACI,6GACJ,UAAW,CACP,CACI,KAAM,WACN,KAAM,+BACN,IAAK,6BACL,YAAa,yBACjB,EACA,CACI,KAAM,QACN,KAAM,4BACN,IAAK,0BACL,YAAa,uDACjB,CACJ,EACA,WAAY,CAAC,KAAK,EAClB,QAAM,OAACA,EAAA,EAAc,CACzB,EACA,CACI,IAAK,kBACL,KAAM,kBACN,YAAa,4FACb,UAAW,CACP,CACI,KAAM,WACN,KAAM,sBACN,IAAK,sBACL,YAAa,yBACjB,CACJ,EACA,WAAY,CAAC,KAAK,EAClB,QAAM,OAACC,GAAA,EAAQ,CACnB,EACA,CACI,IAAK,gBACL,KAAM,gBACN,YACI,0GACJ,UAAW,CACP,CACI,KAAM,QACN,KAAM,gBACN,IAAK,gBACL,YAAa,kEACjB,EACA,CACI,KAAM,WACN,KAAM,mBACN,IAAK,mBACL,YAAa,uDACjB,CACJ,EACA,WAAY,CAAC,MAAO,KAAK,EACzB,QAAM,OAACC,EAAA,EAAgB,CAC3B,EACA,CACI,IAAK,gBACL,KAAM,gBACN,YAAa,+FACb,UAAW,CACP,CACI,KAAM,WACN,KAAM,oBACN,IAAK,oBACL,YAAa,yBACjB,CACJ,EACA,WAAY,CAAC,KAAK,EAClB,QAAM,OAACF,EAAA,EAAc,CACzB,EACA,CACI,IAAK,iBACL,KAAM,iBACN,YACI,wGACJ,UAAW,CACP,CACI,KAAM,QACN,KAAM,uBACN,IAAK,uBACL,YAAa,6EACjB,CACJ,EACA,WAAY,CAAC,KAAK,EAClB,QAAM,OAACG,GAAA,EAAW,CACtB,EACA,CACI,IAAK,aACL,KAAM,mBACN,YAAa,gGACb,UAAW,CACP,CACI,KAAM,OACN,KAAM,eACN,IAAK,eACL,YAAa,4CACjB,CACJ,EACA,WAAY,C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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "init_dirname", "init_buffer", "init_process", "import_react", "useAsyncHandler", "onEvent", "loading", "setLoading", "e", "result", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "SavedSessionRecordingPlaylistsEmptyState", "playlistsLogic", "savedSessionRecordingPlaylistsLogic", "loadPlaylistsFailed", "LemonBanner", "LemonButton", "IconPlus", "createPlaylist", "import_jsx_runtime", "nameColumn", "name", "short_id", "derived_name", "description", "Link", "clsx", "urls", "SavedSessionRecordingPlaylists", "tab", "logic", "savedSessionRecordingPlaylistsLogic", "playlists", "playlistsLoading", "filters", "sorting", "pagination", "setSavedPlaylistsFilters", "updatePlaylist", "duplicatePlaylist", "deletePlaylist", "columns", "pinned", "LemonButton", "IconPinFilled", "IconPin", "createdByColumn", "last_modified_at", "TZLabel", "_", "playlist", "More", "LemonDivider", "LemonInput", "value", "DateFilter", "fromDate", "toDate", "key", "IconCalendar", "MemberSelect", "user", "SavedSessionRecordingPlaylistsEmptyState", "LemonTable", "newSorting", "PLAYLISTS_PER_PAGE", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "replayTemplates", "IconUser", "IconHandMoney", "IconApp", "IconCursorClick", "IconSearch", "IconFlag", "IconThumbsDown", "IconVideoCamera", "IconPhone", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_kea_router", "getPageviewFilterValue", "pageview", "getFlagFilterValue", "flag", "sessionReplayTemplatesLogic", "props", "teamLogic", "variables", "variable", "values", "clsx", "_", "state", "v", "s", "filters", "filter", "areAnyVariablesTouched", "Co", "filterGroup", "urls", "actions", "import_jsx_runtime", "allCategories", "replayTemplates", "template", "category", "index", "self", "NestedFilterGroup", "rootKey", "buttonTitle", "selectOne", "filterGroup", "universalFiltersLogic", "replaceGroupValue", "removeGroupValue", "filterOrGroup", "isUniversalGroupFilterLike", "UniversalFilters_default", "value", "SingleTemplateVariable", "variable", "props", "setVariable", "resetVariable", "sessionReplayTemplatesLogic", "actionsModel", "LemonLabel", "LemonInput", "e", "thisFilterGroup", "TemplateVariables", "navigate", "variables", "canApplyFilters", "v", "LemonButton", "RecordingTemplateCard", "showVariables", "hideVariables", "variablesVisible", "LemonCard", "Link", "SessionRecordingTemplates", "SessionRecordingTemplates_default", "import_jsx_runtime", "Header", "tab", "sessionReplaySceneLogic", "currentTeam", "teamLogic", "recordingsDisabled", "reportRecordingPlaylistCreated", "eventUsageLogic", "openSettingsPanel", "sidePanelSettingsLogic", "filters", "totalFiltersCount", "sessionRecordingsPlaylistLogic", "saveFiltersPlaylistHandler", "useAsyncHandler", "createPlaylist", "newPlaylistHandler", "PageHeader", "LemonMenu", "urls", "LemonButton", "IconEllipsis", "NotebookSelectButton", "e", "IconGear", "Warnings", "theAuthorizedUrlsLogic", "authorizedUrlListLogic", "defaultAuthorizedUrlProperties", "suggestions", "authorizedUrls", "featureFlags", "featureFlagLogic", "mightBeRefusingRecordings", "settingLevel", "FEATURE_FLAGS", "VersionCheckerBanner", "LemonBanner", "WarningHog", "IconOpenSidebar", "ProductIntroduction", "FilmCameraHog", "MainPanel", "SessionRecordingsPlaylist", "SavedSessionRecordingPlaylists", "SessionRecordingTemplates_default", "Spinner", "PageTabs", "shouldShowNewBadge", "LemonTabs", "t", "ReplayTabs", "replayTab", "humanFriendlyTabName", "LemonBadge", "SessionsRecordings", "scene"]
}
