{
  "version": 3,
  "sources": ["../src/scenes/actions/Action.tsx", "../src/scenes/actions/actionLogic.ts", "../src/scenes/actions/actionEditLogic.tsx", "../src/scenes/actions/ActionEdit.tsx", "../src/scenes/actions/ActionHogFunctions.tsx", "../src/scenes/actions/ActionStep.tsx", "../src/scenes/actions/hints.tsx"],
  "sourcesContent": ["import { LemonSkeleton } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { NotFound } from 'lib/components/NotFound'\nimport { Spinner } from 'lib/lemon-ui/Spinner/Spinner'\nimport { actionLogic, ActionLogicProps } from 'scenes/actions/actionLogic'\nimport { SceneExport } from 'scenes/sceneTypes'\n\nimport { defaultDataTableColumns } from '~/queries/nodes/DataTable/utils'\nimport { Query } from '~/queries/Query/Query'\nimport { NodeKind } from '~/queries/schema/schema-general'\nimport { ActionType } from '~/types'\n\nimport { ActionEdit } from './ActionEdit'\n\nexport const scene: SceneExport = {\n    logic: actionLogic,\n    component: Action,\n    paramsToProps: ({ params: { id } }): ActionLogicProps => ({ id: id ? parseInt(id) : undefined }),\n}\n\nexport function Action({ id }: { id?: ActionType['id'] } = {}): JSX.Element {\n    const { action, actionLoading, isComplete } = useValues(actionLogic)\n\n    if (actionLoading) {\n        return (\n            <div className=\"space-y-2\">\n                <LemonSkeleton className=\"w-1/4 h-6\" />\n\n                <LemonSkeleton className=\"w-1/3 h-10\" />\n                <LemonSkeleton className=\"w-1/2 h-6\" />\n\n                <div className=\"flex gap-2\">\n                    <LemonSkeleton className=\"w-1/2 h-120\" />\n                    <LemonSkeleton className=\"w-1/2 h-120\" />\n                </div>\n            </div>\n        )\n    }\n\n    if (id && !action) {\n        return <NotFound object=\"action\" />\n    }\n\n    return (\n        <>\n            <ActionEdit id={id} action={action} />\n            {id && (\n                <>\n                    {isComplete ? (\n                        <div className=\"mt-8\">\n                            <h2 className=\"subtitle\">Matching events</h2>\n                            <p>\n                                This is the list of <strong>recent</strong> events that match this action.\n                            </p>\n                            <div className=\"pt-4 border-t\" />\n                            <Query\n                                query={{\n                                    kind: NodeKind.DataTableNode,\n                                    source: {\n                                        kind: NodeKind.EventsQuery,\n                                        select: defaultDataTableColumns(NodeKind.EventsQuery),\n                                        actionId: id,\n                                        after: '-24h',\n                                    },\n                                    full: true,\n                                    showEventFilter: false,\n                                    showPropertyFilter: false,\n                                }}\n                            />\n                        </div>\n                    ) : (\n                        <div>\n                            <h2 className=\"subtitle\">Matching events</h2>\n                            <div className=\"flex items-center\">\n                                <Spinner className=\"mr-4\" />\n                                Calculating action, please hold on.\n                            </div>\n                        </div>\n                    )}\n                </>\n            )}\n        </>\n    )\n}\n", "import { actions, events, kea, key, listeners, path, props, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { DataManagementTab } from 'scenes/data-management/DataManagementScene'\nimport { Scene } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { SIDE_PANEL_CONTEXT_KEY, SidePanelSceneContext } from '~/layout/navigation-3000/sidepanel/types'\nimport { ActionType, ActivityScope, Breadcrumb, HogFunctionType } from '~/types'\n\nimport { actionEditLogic } from './actionEditLogic'\nimport type { actionLogicType } from './actionLogicType'\n\nexport interface ActionLogicProps {\n    id?: ActionType['id']\n}\n\nexport const actionLogic = kea<actionLogicType>([\n    props({} as ActionLogicProps),\n    key((props) => props.id || 'new'),\n    path((key) => ['scenes', 'actions', 'actionLogic', key]),\n    actions(() => ({\n        updateAction: (action: Partial<ActionType>) => ({ action }),\n        checkIsFinished: (action) => ({ action }),\n        setPollTimeout: (pollTimeout) => ({ pollTimeout }),\n        setIsComplete: (isComplete) => ({ isComplete }),\n    })),\n    loaders(({ props }) => ({\n        action: [\n            null as ActionType | null,\n            {\n                loadAction: async () => {\n                    if (!props.id) {\n                        throw new Error('Cannot fetch an unsaved action from the API.')\n                    }\n                    return await api.actions.get(props.id)\n                },\n            },\n        ],\n        matchingHogFunctions: [\n            null as HogFunctionType[] | null,\n            {\n                loadMatchingHogFunctions: async () => {\n                    const res = await api.hogFunctions.list({ filters: { actions: [{ id: `${props.id}` }] } })\n\n                    return res.results\n                },\n            },\n        ],\n    })),\n    reducers(() => ({\n        action: [\n            null as ActionType | null,\n            {\n                updateAction: (state, { action }) => (state ? { ...state, ...action } : null),\n            },\n        ],\n        pollTimeout: [\n            null as number | null,\n            {\n                setPollTimeout: (_, { pollTimeout }) => pollTimeout,\n            },\n        ],\n        isComplete: [\n            false as boolean,\n            {\n                setIsComplete: (_, { isComplete }) => isComplete,\n            },\n        ],\n    })),\n    selectors({\n        breadcrumbs: [\n            (s) => [\n                s.action,\n                (state, props) =>\n                    actionEditLogic.findMounted(String(props?.id || 'new'))?.selectors.action(state).name || null,\n            ],\n            (action, inProgressName): Breadcrumb[] => [\n                {\n                    key: Scene.DataManagement,\n                    name: `Data management`,\n                    path: urls.eventDefinitions(),\n                },\n                {\n                    key: DataManagementTab.Actions,\n                    name: 'Actions',\n                    path: urls.actions(),\n                },\n                {\n                    key: [Scene.Action, action?.id || 'new'],\n                    name: inProgressName ?? (action?.name || ''),\n                    onRename: async (name: string) => {\n                        const id = action?.id\n                        const actionEditLogicActions = actionEditLogic.find(String(id || 'new'))\n                        actionEditLogicActions.actions.setActionValue('name', name)\n                        if (id) {\n                            await actionEditLogicActions.asyncActions.submitAction()\n                        }\n                    },\n                    forceEditMode: !action?.id,\n                },\n            ],\n        ],\n        hasCohortFilters: [\n            (s) => [s.action],\n            (action) => action?.steps?.some((step) => step.properties?.find((p) => p.type === 'cohort')) ?? false,\n        ],\n\n        [SIDE_PANEL_CONTEXT_KEY]: [\n            (s) => [s.action],\n            (action): SidePanelSceneContext | null => {\n                return action?.id\n                    ? {\n                          activity_scope: ActivityScope.ACTION,\n                          activity_item_id: `${action.id}`,\n                          //   access_control_resource: 'action',\n                          //   access_control_resource_id: `${action.id}`,\n                      }\n                    : null\n            },\n        ],\n    }),\n    listeners(({ actions, values }) => ({\n        checkIsFinished: ({ action }) => {\n            if (action.is_calculating) {\n                actions.setPollTimeout(setTimeout(() => actions.loadAction(), 1000))\n            } else {\n                actions.setIsComplete(new Date())\n                values.pollTimeout && clearTimeout(values.pollTimeout)\n            }\n        },\n        loadActionSuccess: ({ action }) => {\n            actions.setIsComplete(false)\n            actions.checkIsFinished(action)\n        },\n    })),\n    events(({ values, actions, props }) => ({\n        afterMount: () => {\n            props.id && actions.loadAction()\n        },\n        beforeUnmount: () => {\n            values.pollTimeout && clearTimeout(values.pollTimeout)\n        },\n    })),\n])\n", "import { actions, afterMount, connect, kea, key, listeners, path, props, reducers, selectors } from 'kea'\nimport { forms } from 'kea-forms'\nimport { loaders } from 'kea-loaders'\nimport { beforeUnload, router, urlToAction } from 'kea-router'\nimport api from 'lib/api'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast/LemonToast'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { deleteWithUndo } from 'lib/utils/deleteWithUndo'\nimport { eventDefinitionsTableLogic } from 'scenes/data-management/events/eventDefinitionsTableLogic'\nimport { sceneLogic } from 'scenes/sceneLogic'\nimport { urls } from 'scenes/urls'\n\nimport { actionsModel } from '~/models/actionsModel'\nimport { tagsModel } from '~/models/tagsModel'\nimport { ActionStepType, ActionType } from '~/types'\n\nimport type { actionEditLogicType } from './actionEditLogicType'\nimport { actionLogic } from './actionLogic'\n\nexport interface SetActionProps {\n    merge?: boolean\n}\n\nexport interface ActionEditLogicProps {\n    id?: number\n    action?: ActionType | null\n}\n\nexport const DEFAULT_ACTION_STEP: ActionStepType = {\n    event: '$pageview',\n    href_matching: 'contains',\n}\n\nexport const actionEditLogic = kea<actionEditLogicType>([\n    path((key) => ['scenes', 'actions', 'actionEditLogic', key]),\n    props({} as ActionEditLogicProps),\n    key((props) => props.id || 'new'),\n    connect({\n        actions: [\n            actionsModel,\n            ['loadActions'],\n            eventDefinitionsTableLogic,\n            ['loadEventDefinitions'],\n            tagsModel,\n            ['loadTags'],\n        ],\n        values: [sceneLogic, ['activeScene']],\n    }),\n    actions({\n        setAction: (action: Partial<ActionType>, options: SetActionProps = { merge: true }) => ({\n            action,\n            options,\n        }),\n        setCreateNew: (createNew: boolean) => ({ createNew }),\n        actionAlreadyExists: (actionId: number | null) => ({ actionId }),\n        deleteAction: true,\n        migrateToHogFunction: true,\n    }),\n    reducers({\n        createNew: [\n            false,\n            {\n                setCreateNew: (_, { createNew }) => createNew,\n            },\n        ],\n    }),\n    forms(({ actions, props }) => ({\n        action: {\n            defaults:\n                props.action ??\n                ({\n                    name: '',\n                    steps: [DEFAULT_ACTION_STEP],\n                } as ActionType),\n\n            submit: async (updatedAction, breakpoint) => {\n                let action: ActionType\n                // Remove URL from steps if it's not an autocapture or a pageview\n                let updatedSteps = updatedAction.steps\n                if (updatedSteps !== undefined) {\n                    updatedSteps = updatedSteps.map((step) => ({\n                        ...step,\n                        ...(step.event === '$autocapture' || step.event === '$pageview'\n                            ? {}\n                            : { url: null, url_matching: null }),\n                    }))\n                }\n                try {\n                    if (updatedAction.id) {\n                        action = await api.actions.update(updatedAction.id, { ...updatedAction, steps: updatedSteps })\n                    } else {\n                        action = await api.actions.create({ ...updatedAction, steps: updatedSteps })\n                    }\n                    breakpoint()\n                } catch (response: any) {\n                    if (response.code === 'unique') {\n                        // Below works because `detail` in the format:\n                        // `This project already has an action with this name, ID ${errorActionId}`\n                        const dupeId = response.detail.split(' ').pop()\n\n                        lemonToast.error(\n                            <>\n                                Action with this name already exists.{' '}\n                                <Link to={urls.action(dupeId)} target=\"_blank\">\n                                    Edit it here\n                                </Link>\n                            </>\n                        )\n\n                        return { ...updatedAction }\n                    }\n                    throw response\n                }\n\n                lemonToast.success(`Action saved`)\n                actions.resetAction(updatedAction)\n                if (!props.id) {\n                    router.actions.push(urls.action(action.id))\n                } else {\n                    const id = parseInt(props.id.toString()) // props.id can be a string\n                    const logic = actionLogic.findMounted(id)\n                    logic?.actions.loadActionSuccess(action)\n                }\n\n                // reload actions so they are immediately available throughout the app\n                actions.loadEventDefinitions()\n                actions.loadActions()\n                actions.loadTags() // reload tags in case new tags are being saved\n                return action\n            },\n        },\n    })),\n\n    selectors({\n        hasCohortFilters: [\n            (s) => [s.action],\n            (action) => action?.steps?.some((step) => step.properties?.find((p) => p.type === 'cohort')) ?? false,\n        ],\n        originalActionHasCohortFilters: [\n            () => [(_, p: ActionEditLogicProps) => p.action],\n            (action) => action?.steps?.some((step) => step.properties?.find((p) => p.type === 'cohort')) ?? false,\n        ],\n        showCohortDisablesFunctionsWarning: [\n            (s) => [s.hasCohortFilters, s.originalActionHasCohortFilters],\n            (hasCohortFilters, originalActionHasCohortFilters) => hasCohortFilters && !originalActionHasCohortFilters,\n        ],\n    }),\n\n    loaders(({ props, values }) => ({\n        action: [\n            { ...props.action } as ActionType,\n            {\n                setAction: ({ action, options: { merge } }) =>\n                    (merge ? { ...values.action, ...action } : action) as ActionType,\n            },\n        ],\n    })),\n\n    listeners(({ values, actions }) => ({\n        deleteAction: async () => {\n            const actionId = values.action.id\n            if (!actionId) {\n                return\n            }\n            try {\n                await deleteWithUndo({\n                    endpoint: api.actions.determineDeleteEndpoint(),\n                    object: values.action,\n                    callback: (undo: boolean) => {\n                        if (undo) {\n                            router.actions.push(urls.action(actionId))\n                        } else {\n                            actions.resetAction()\n                            router.actions.push(urls.actions())\n                            actions.loadActions()\n                        }\n                    },\n                })\n            } catch (e: any) {\n                lemonToast.error(`Error deleting action: ${e.detail}`)\n            }\n        },\n    })),\n\n    afterMount(({ actions, props }) => {\n        if (!props.id) {\n            actions.setActionValue('steps', [{ ...DEFAULT_ACTION_STEP }])\n        }\n    }),\n\n    urlToAction(({ actions }) => ({\n        [urls.createAction()]: (_, searchParams) => {\n            try {\n                if (searchParams.copy) {\n                    const {\n                        id: _id,\n                        created_at: _created_at,\n                        created_by: _created_by,\n                        last_calculated_at: _last_calculated_at,\n                        ...actionToCopy\n                    } = searchParams.copy\n\n                    actions.setAction(\n                        {\n                            ...actionToCopy,\n                            steps: actionToCopy.steps,\n                            name: `${actionToCopy.name} (copy)`,\n                        },\n                        { merge: false }\n                    )\n                }\n            } catch (e) {\n                throw new Error('Could not parse action to copy from URL')\n            }\n        },\n    })),\n\n    beforeUnload((logic) => ({\n        enabled: () => (logic.isMounted() ? logic.values.actionChanged : false),\n        message: 'Leave action?\\nChanges you made will be discarded.',\n        onConfirm: () => {\n            logic.actions.resetAction()\n        },\n    })),\n])\n", "import { IconInfo, IconPlus } from '@posthog/icons'\nimport { useActions, useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport { router } from 'kea-router'\nimport { EditableField } from 'lib/components/EditableField/EditableField'\nimport { ObjectTags } from 'lib/components/ObjectTags/ObjectTags'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { IconPlayCircle } from 'lib/lemon-ui/icons'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { ActionHogFunctions } from 'scenes/actions/ActionHogFunctions'\nimport { urls } from 'scenes/urls'\n\nimport { tagsModel } from '~/models/tagsModel'\nimport { ActionStepType, FilterLogicalOperator, ReplayTabs } from '~/types'\n\nimport { actionEditLogic, ActionEditLogicProps, DEFAULT_ACTION_STEP } from './actionEditLogic'\nimport { ActionStep } from './ActionStep'\n\nexport function ActionEdit({ action: loadedAction, id }: ActionEditLogicProps): JSX.Element {\n    const logicProps: ActionEditLogicProps = {\n        id: id,\n        action: loadedAction,\n    }\n    const logic = actionEditLogic(logicProps)\n    const { action, actionLoading, actionChanged } = useValues(logic)\n    const { submitAction, deleteAction } = useActions(logic)\n    const { tags } = useValues(tagsModel)\n\n    const deleteButton = (): JSX.Element => (\n        <LemonButton\n            data-attr=\"delete-action-bottom\"\n            status=\"danger\"\n            type=\"secondary\"\n            onClick={() => {\n                deleteAction()\n            }}\n        >\n            Delete\n        </LemonButton>\n    )\n\n    const cancelButton = (): JSX.Element => (\n        <LemonButton\n            data-attr=\"cancel-action-bottom\"\n            status=\"danger\"\n            type=\"secondary\"\n            onClick={() => {\n                router.actions.push(urls.actions())\n            }}\n        >\n            Cancel\n        </LemonButton>\n    )\n\n    const actionEditJSX = (\n        <div className=\"action-edit-container\">\n            <Form logic={actionEditLogic} props={logicProps} formKey=\"action\" enableFormOnSubmit>\n                <PageHeader\n                    caption={\n                        <>\n                            <LemonField name=\"description\">\n                                {({ value, onChange }) => (\n                                    <EditableField\n                                        multiline\n                                        name=\"description\"\n                                        markdown\n                                        value={value || ''}\n                                        placeholder=\"Description (optional)\"\n                                        onChange={\n                                            !id\n                                                ? onChange\n                                                : undefined /* When creating a new action, change value on type */\n                                        }\n                                        onSave={(value) => {\n                                            onChange(value)\n                                            submitAction()\n                                            /* When clicking 'Set' on an `EditableField`, always save the form */\n                                        }}\n                                        mode={\n                                            !id\n                                                ? 'edit'\n                                                : undefined /* When creating a new action, maintain edit mode */\n                                        }\n                                        data-attr=\"action-description\"\n                                        className=\"action-description\"\n                                        compactButtons\n                                        maxLength={600} // No limit on backend model, but enforce shortish description\n                                    />\n                                )}\n                            </LemonField>\n                            <LemonField name=\"tags\" className=\"mt-2\">\n                                {({ value, onChange }) => (\n                                    <ObjectTags\n                                        tags={value ?? []}\n                                        onChange={(tags) => onChange(tags)}\n                                        className=\"action-tags\"\n                                        saving={actionLoading}\n                                        tagsAvailable={tags.filter((tag) => !action.tags?.includes(tag))}\n                                    />\n                                )}\n                            </LemonField>\n                        </>\n                    }\n                    buttons={\n                        <>\n                            {id ? (\n                                <LemonButton\n                                    type=\"secondary\"\n                                    to={urls.replay(ReplayTabs.Home, {\n                                        filter_group: {\n                                            type: FilterLogicalOperator.And,\n                                            values: [\n                                                {\n                                                    type: FilterLogicalOperator.And,\n                                                    values: [\n                                                        {\n                                                            id: id,\n                                                            type: 'actions',\n                                                            order: 0,\n                                                            name: action.name,\n                                                        },\n                                                    ],\n                                                },\n                                            ],\n                                        },\n                                    })}\n                                    sideIcon={<IconPlayCircle />}\n                                    data-attr=\"action-view-recordings\"\n                                >\n                                    View recordings\n                                </LemonButton>\n                            ) : null}\n                            {id ? deleteButton() : cancelButton()}\n                            {actionChanged || !id ? (\n                                <LemonButton\n                                    data-attr=\"save-action-button\"\n                                    type=\"primary\"\n                                    htmlType=\"submit\"\n                                    loading={actionLoading}\n                                    onClick={submitAction}\n                                    disabledReason={!actionChanged && !id ? 'No changes to save' : undefined}\n                                >\n                                    Save\n                                </LemonButton>\n                            ) : null}\n                        </>\n                    }\n                />\n\n                <div className=\"@container\">\n                    <h2 className=\"subtitle\">Match groups</h2>\n                    <p>\n                        Your action will be triggered whenever <b>any of your match groups</b> are received.\n                        <Link to=\"https://posthog.com/docs/product-analytics/retention\" target=\"_blank\">\n                            <IconInfo className=\"ml-1 text-secondary text-xl\" />\n                        </Link>\n                    </p>\n                    <LemonField name=\"steps\">\n                        {({ value: stepsValue, onChange }) => (\n                            <div className=\"grid @4xl:grid-cols-2 gap-3\">\n                                {stepsValue.map((step: ActionStepType, index: number) => {\n                                    const identifier = String(JSON.stringify(step))\n                                    return (\n                                        <ActionStep\n                                            key={index}\n                                            identifier={identifier}\n                                            index={index}\n                                            step={step}\n                                            actionId={action.id || 0}\n                                            isOnlyStep={!!stepsValue && stepsValue.length === 1}\n                                            onDelete={() => {\n                                                const newSteps = [...stepsValue]\n                                                newSteps.splice(index, 1)\n                                                onChange(newSteps)\n                                            }}\n                                            onChange={(newStep) => {\n                                                const newSteps = [...stepsValue]\n                                                newSteps.splice(index, 1, newStep)\n                                                onChange(newSteps)\n                                            }}\n                                        />\n                                    )\n                                })}\n\n                                <div>\n                                    <LemonButton\n                                        icon={<IconPlus />}\n                                        type=\"secondary\"\n                                        onClick={() => {\n                                            onChange([...(action.steps || []), DEFAULT_ACTION_STEP])\n                                        }}\n                                        center\n                                        className=\"w-full h-full\"\n                                    >\n                                        Add match group\n                                    </LemonButton>\n                                </div>\n                            </div>\n                        )}\n                    </LemonField>\n                </div>\n            </Form>\n        </div>\n    )\n\n    return (\n        <>\n            {actionEditJSX}\n            <ActionHogFunctions />\n        </>\n    )\n}\n", "import { LemonBanner } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { actionEditLogic } from 'scenes/actions/actionEditLogic'\nimport { actionLogic } from 'scenes/actions/actionLogic'\nimport { LinkedHogFunctions } from 'scenes/pipeline/hogfunctions/list/LinkedHogFunctions'\n\nimport { HogFunctionFiltersType } from '~/types'\n\nexport function ActionHogFunctions(): JSX.Element | null {\n    const { action } = useValues(actionLogic)\n    const { hasCohortFilters, actionChanged, showCohortDisablesFunctionsWarning } = useValues(\n        actionEditLogic({ id: action?.id, action })\n    )\n    if (!action) {\n        return null\n    }\n\n    const filters: HogFunctionFiltersType = {\n        actions: [\n            {\n                id: `${action?.id}`,\n                name: action?.name,\n                type: 'actions',\n            },\n        ],\n    }\n\n    return (\n        <div className=\"my-4 space-y-2\">\n            <h2 className=\"flex-1 subtitle\">Connected destinations</h2>\n            <p>Actions can be used a filters for destinations such as Slack or Webhook delivery</p>\n\n            {showCohortDisablesFunctionsWarning ? (\n                <LemonBanner type=\"error\">Adding a cohort filter will disable all connected destinations!</LemonBanner>\n            ) : null}\n\n            <LinkedHogFunctions\n                logicKey=\"actions\"\n                type=\"destination\"\n                filters={filters}\n                newDisabledReason={\n                    hasCohortFilters\n                        ? \"Action with cohort filters can't be used in realtime destinations\"\n                        : actionChanged\n                        ? 'Please first save the action to create a destination'\n                        : undefined\n                }\n            />\n        </div>\n    )\n}\n", "import { IconX } from '@posthog/icons'\nimport { LemonButton, LemonInput, LemonSegmentedButton, Link } from '@posthog/lemon-ui'\nimport { AuthorizedUrlList } from 'lib/components/AuthorizedUrlList/AuthorizedUrlList'\nimport { AuthorizedUrlListType } from 'lib/components/AuthorizedUrlList/authorizedUrlListLogic'\nimport { OperandTag } from 'lib/components/PropertyFilters/components/OperandTag'\nimport { PropertyFilters } from 'lib/components/PropertyFilters/PropertyFilters'\nimport { IconOpenInApp } from 'lib/lemon-ui/icons'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { LemonDialog } from 'lib/lemon-ui/LemonDialog'\nimport { LemonLabel } from 'lib/lemon-ui/LemonLabel/LemonLabel'\nimport { useState } from 'react'\nimport { URL_MATCHING_HINTS } from 'scenes/actions/hints'\n\nimport { ActionStepStringMatching, ActionStepType } from '~/types'\n\nimport { LemonEventName } from './EventName'\n\nconst learnMoreLink = 'https://posthog.com/docs/data/actions?utm_medium=in-product&utm_campaign=action-page'\n\ninterface Props {\n    step: ActionStepType\n    actionId: number\n    isOnlyStep: boolean\n    index: number\n    identifier: string\n    onDelete: () => void\n    onChange: (step: ActionStepType) => void\n}\n\nexport function ActionStep({ step, actionId, isOnlyStep, index, identifier, onDelete, onChange }: Props): JSX.Element {\n    const sendStep = (stepToSend: ActionStepType): void => {\n        onChange(stepToSend)\n    }\n\n    return (\n        <div className=\"bg-surface-primary rounded border p-3 relative\">\n            {index > 0 && !(index % 2 === 0) && (\n                <div className=\"absolute top-1/2 -left-5\">\n                    <OperandTag operand=\"or\" />\n                </div>\n            )}\n            <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                    <b>Match Group #{index + 1}</b>\n\n                    {!isOnlyStep && (\n                        <LemonButton\n                            className=\"absolute top-2 right-2\"\n                            icon={<IconX />}\n                            size=\"small\"\n                            aria-label=\"delete\"\n                            onClick={onDelete}\n                        />\n                    )}\n                </div>\n                <TypeSwitcher step={step} sendStep={sendStep} />\n\n                {step.event === '$autocapture' && (\n                    <AutocaptureFields step={step} sendStep={sendStep} actionId={actionId} />\n                )}\n                {step.event !== undefined && step.event !== '$autocapture' && step.event !== '$pageview' && (\n                    <div className=\"space-y-1\">\n                        <LemonLabel>Event name</LemonLabel>\n                        <LemonEventName\n                            value={step.event}\n                            onChange={(value) =>\n                                sendStep({\n                                    ...step,\n                                    event: value,\n                                })\n                            }\n                            placeholder=\"All events\"\n                            allEventsOption=\"explicit\"\n                        />\n\n                        <small>\n                            <Link to=\"https://posthog.com/docs/libraries\" target=\"_blank\">\n                                See documentation\n                            </Link>{' '}\n                            on how to send custom events in lots of languages.\n                        </small>\n                    </div>\n                )}\n                {step.event === '$pageview' && (\n                    <div>\n                        <Option\n                            step={step}\n                            sendStep={sendStep}\n                            item=\"url\"\n                            labelExtra={<StringMatchingSelection field=\"url\" step={step} sendStep={sendStep} />}\n                            label=\"URL\"\n                        />\n                        {step.url_matching && step.url_matching in URL_MATCHING_HINTS && (\n                            <small>{URL_MATCHING_HINTS[step.url_matching]}</small>\n                        )}\n                    </div>\n                )}\n\n                <div className=\"mt-4 space-y-2\">\n                    <LemonLabel>Filters</LemonLabel>\n                    <PropertyFilters\n                        propertyFilters={step.properties}\n                        pageKey={identifier}\n                        eventNames={step.event ? [step.event] : []}\n                        onChange={(properties) => {\n                            sendStep({\n                                ...step,\n                                properties: properties as [],\n                            })\n                        }}\n                        showConditionBadge\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n\n/**\n * There are several issues with how autocapture actions are matched. See https://github.com/PostHog/posthog/issues/7333\n *\n * Until they are fixed this validator can be used to guide users to working solutions\n */\nconst validateSelector = (val: string, selectorPrompts: (s: JSX.Element | null) => void): void => {\n    if (val.includes('#')) {\n        selectorPrompts(\n            <>\n                PostHog actions don't support the <code>#example</code> syntax.\n                <br />\n                Use the equivalent <code>[id=\"example\"]</code> instead.\n            </>\n        )\n    } else {\n        selectorPrompts(null)\n    }\n}\n\nfunction Option({\n    step,\n    sendStep,\n    item,\n    label,\n    placeholder = 'Specify a value to match on this',\n    caption,\n    labelExtra: extra_options,\n}: {\n    step: ActionStepType\n    sendStep: (stepToSend: ActionStepType) => void\n    item: keyof Pick<ActionStepType, 'href' | 'text' | 'selector' | 'url'>\n    label: JSX.Element | string\n    labelExtra?: JSX.Element | string\n    placeholder?: string\n    caption?: JSX.Element | string\n}): JSX.Element {\n    const [selectorPrompt, setSelectorPrompt] = useState(null as JSX.Element | null)\n\n    const onOptionChange = (val: string): void => {\n        if (item === 'selector') {\n            validateSelector(val, setSelectorPrompt)\n        }\n        sendStep({\n            ...step,\n            [item]: val || null, // \"\" is a valid filter, we don't want it\n        })\n    }\n\n    return (\n        <div className=\"space-y-1\">\n            <div className=\"flex flex-wrap gap-1\">\n                <LemonLabel>{label}</LemonLabel>\n                {extra_options}\n            </div>\n            {caption && <div className=\"action-step-caption\">{caption}</div>}\n            <LemonInput\n                data-attr=\"edit-action-url-input\"\n                allowClear\n                onChange={onOptionChange}\n                value={step[item] || ''}\n                placeholder={placeholder}\n            />\n            {item === 'selector' && selectorPrompt && <LemonBanner type=\"warning\">{selectorPrompt}</LemonBanner>}\n        </div>\n    )\n}\n\nconst AndSeparator = (): JSX.Element => {\n    return (\n        <div className=\"flex w-full justify-center\">\n            <OperandTag operand=\"and\" />\n        </div>\n    )\n}\n\nfunction AutocaptureFields({\n    step,\n    actionId,\n    sendStep,\n}: {\n    step: ActionStepType\n    sendStep: (stepToSend: ActionStepType) => void\n    actionId: number\n}): JSX.Element {\n    const onSelectElement = (): void => {\n        LemonDialog.open({\n            title: 'Select an element',\n            description: actionId\n                ? 'Choose the domain on which to edit this action'\n                : 'Choose the domain on which to create this action',\n            content: (\n                <>\n                    <AuthorizedUrlList actionId={actionId} type={AuthorizedUrlListType.TOOLBAR_URLS} />\n                </>\n            ),\n            primaryButton: {\n                children: 'Close',\n                type: 'secondary',\n            },\n        })\n    }\n    return (\n        <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2\">\n                <LemonButton size=\"small\" type=\"secondary\" onClick={onSelectElement} sideIcon={<IconOpenInApp />}>\n                    Select element on site\n                </LemonButton>\n                <Link to={`${learnMoreLink}#1-autocapture`} target=\"_blank\">\n                    See documentation.\n                </Link>\n            </div>\n            <Option\n                step={step}\n                sendStep={sendStep}\n                item=\"text\"\n                labelExtra={<StringMatchingSelection field=\"text\" step={step} sendStep={sendStep} />}\n                label=\"Element text\"\n            />\n            <AndSeparator />\n            <Option\n                step={step}\n                sendStep={sendStep}\n                item=\"href\"\n                labelExtra={<StringMatchingSelection field=\"href\" step={step} sendStep={sendStep} />}\n                label=\"Element link target\"\n                caption={\n                    <>\n                        Filtering by the <code>href</code> attribute. Only <code>{'<a/>'}</code> elements will be\n                        matched.\n                    </>\n                }\n            />\n            <AndSeparator />\n            <Option\n                step={step}\n                sendStep={sendStep}\n                item=\"selector\"\n                label=\"Element matches HTML selector\"\n                caption={\n                    <span>\n                        The selector can be a tag name, class, HTML attribute, or all of those combined. Example:{' '}\n                        <code>button[data-attr=\"signup\"]</code>.{' '}\n                        <Link to={`${learnMoreLink}#matching-selectors`}>Learn more in Docs.</Link>\n                    </span>\n                }\n            />\n            <AndSeparator />\n            <Option\n                step={step}\n                sendStep={sendStep}\n                item=\"url\"\n                labelExtra={<StringMatchingSelection field=\"url\" step={step} sendStep={sendStep} />}\n                label=\"Page URL\"\n                caption=\"The page on which the interaction occurred.\"\n            />\n            {step?.url_matching && step.url_matching in URL_MATCHING_HINTS && (\n                <small>{URL_MATCHING_HINTS[step.url_matching]}</small>\n            )}\n        </div>\n    )\n}\n\nfunction TypeSwitcher({\n    step,\n    sendStep,\n}: {\n    step: ActionStepType\n    sendStep: (stepToSend: ActionStepType) => void\n}): JSX.Element {\n    const handleChange = (type: string): void => {\n        if (type === '$autocapture') {\n            sendStep({ ...step, event: '$autocapture' })\n        } else if (type === 'event') {\n            sendStep({ ...step, event: null })\n        } else if (type === '$pageview') {\n            sendStep({\n                ...step,\n                event: '$pageview',\n                url: step.url,\n            })\n        }\n    }\n\n    return (\n        <div data-attr=\"action-type-switcher\">\n            <LemonSegmentedButton\n                onChange={handleChange}\n                value={\n                    step.event === '$autocapture' || step.event === '$pageview' || step.event === undefined\n                        ? step.event\n                        : 'event'\n                }\n                options={[\n                    {\n                        value: '$pageview',\n                        label: 'Pageview',\n                        'data-attr': 'action-type-pageview',\n                    },\n                    {\n                        value: '$autocapture',\n                        label: 'Autocapture',\n                        'data-attr': 'action-type-autocapture',\n                    },\n                    {\n                        value: 'event',\n                        label: 'Other events',\n                        'data-attr': 'action-type-other',\n                    },\n                ]}\n                fullWidth\n                size=\"small\"\n            />\n        </div>\n    )\n}\n\nfunction StringMatchingSelection({\n    field,\n    step,\n    sendStep,\n}: {\n    field: 'url' | 'text' | 'href'\n    step: ActionStepType\n    sendStep: (stepToSend: ActionStepType) => void\n}): JSX.Element {\n    const key = `${field}_matching`\n    const handleURLMatchChange = (value: string): void => {\n        sendStep({ ...step, [key]: value })\n    }\n    const defaultValue: ActionStepStringMatching = field === 'url' ? 'contains' : 'exact'\n\n    return (\n        <div className=\"flex flex-1 justify-end\">\n            <LemonSegmentedButton\n                onChange={handleURLMatchChange}\n                value={step[key] || defaultValue}\n                options={[\n                    {\n                        value: 'exact',\n                        label: 'matches exactly',\n                    },\n                    {\n                        value: 'regex',\n                        label: 'matches regex',\n                    },\n                    {\n                        value: 'contains',\n                        label: 'contains',\n                    },\n                ]}\n                size=\"xsmall\"\n            />\n        </div>\n    )\n}\n", "import { Link } from '@posthog/lemon-ui'\n\nexport const URL_MATCHING_HINTS = {\n    exact: undefined,\n    contains: (\n        <>\n            Use <code>%</code> for wildcard, for example: <code>/user/%/edit</code>.\n        </>\n    ),\n    regex: (\n        <Link to=\"https://github.com/google/re2/wiki/Syntax\" target=\"_blank\">\n            RE2 syntax applies.\n        </Link>\n    ),\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_kea_loaders", "import_kea_router", "import_jsx_runtime", "DEFAULT_ACTION_STEP", "actionEditLogic", "key", "props", "actionsModel", "eventDefinitionsTableLogic", "tagsModel", "sceneLogic", "action", "options", "createNew", "actionId", "_", "actions", "updatedAction", "breakpoint", "updatedSteps", "step", "api_default", "response", "dupeId", "lemonToast", "Link", "urls", "id", "actionLogic", "s", "p", "hasCohortFilters", "originalActionHasCohortFilters", "values", "merge", "deleteWithUndo", "undo", "e", "searchParams", "_id", "_created_at", "_created_by", "_last_calculated_at", "actionToCopy", "logic", "actionLogic", "props", "key", "action", "pollTimeout", "isComplete", "api_default", "state", "_", "s", "actionEditLogic", "inProgressName", "urls", "name", "id", "actionEditLogicActions", "step", "p", "SIDE_PANEL_CONTEXT_KEY", "actions", "values", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_kea_router", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "ActionHogFunctions", "action", "actionLogic", "hasCohortFilters", "actionChanged", "showCohortDisablesFunctionsWarning", "actionEditLogic", "filters", "LemonBanner", "LinkedHogFunctions", "init_dirname", "init_buffer", "init_process", "import_react", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "URL_MATCHING_HINTS", "Link", "import_jsx_runtime", "learnMoreLink", "ActionStep", "step", "actionId", "isOnlyStep", "index", "identifier", "onDelete", "onChange", "sendStep", "stepToSend", "OperandTag", "LemonButton", "IconX", "TypeSwitcher", "AutocaptureFields", "LemonLabel", "LemonEventName", "value", "Link", "Option", "StringMatchingSelection", "URL_MATCHING_HINTS", "PropertyFilters", "properties", "validateSelector", "val", "selectorPrompts", "item", "label", "placeholder", "caption", "extra_options", "selectorPrompt", "setSelectorPrompt", "LemonInput", "LemonBanner", "AndSeparator", "LemonDialog", "AuthorizedUrlList", "IconOpenInApp", "LemonSegmentedButton", "type", "field", "key", "handleURLMatchChange", "defaultValue", "import_jsx_runtime", "ActionEdit", "loadedAction", "id", "logicProps", "logic", "actionEditLogic", "action", "actionLoading", "actionChanged", "submitAction", "deleteAction", "tags", "tagsModel", "deleteButton", "LemonButton", "cancelButton", "urls", "actionEditJSX", "PageHeader", "LemonField", "value", "onChange", "EditableField", "ObjectTags", "tag", "IconPlayCircle", "Link", "IconInfo", "stepsValue", "step", "index", "identifier", "ActionStep", "newSteps", "newStep", "IconPlus", "DEFAULT_ACTION_STEP", "ActionHogFunctions", "import_jsx_runtime", "scene", "actionLogic", "Action", "id", "action", "actionLoading", "isComplete", "LemonSkeleton", "NotFound", "ActionEdit", "Query", "defaultDataTableColumns", "Spinner"]
}
