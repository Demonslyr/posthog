{
  "version": 3,
  "sources": ["../src/scenes/data-warehouse/editor/editorSceneLogic.ts", "../src/scenes/data-warehouse/editor/editorSidebarLogic.tsx", "../src/layout/navigation-3000/navigationLogic.tsx", "../src/layout/navigation-3000/sidebars/dashboards.tsx", "../src/layout/navigation-3000/sidebars/dataManagement.ts", "../src/layout/navigation-3000/sidebars/utils.ts", "../src/layout/navigation-3000/sidebars/experiments.ts", "../src/layout/navigation-3000/sidebars/featureFlags.tsx", "../src/layout/navigation-3000/sidebars/insights.ts", "../src/layout/navigation-3000/sidebars/personsAndGroups.ts", "../src/scenes/data-warehouse/editor/multitabEditorLogic.tsx", "../src/layout/navigation-3000/components/Sidebar.tsx", "../src/layout/navigation-3000/components/SidebarAccordion.tsx", "../src/layout/navigation-3000/components/NewItemButton.tsx", "../src/layout/navigation-3000/components/SidebarList.tsx", "../../node_modules/.pnpm/react-virtualized@9.22.5_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/react-virtualized/dist/es/InfiniteLoader/index.js", "../../node_modules/.pnpm/react-virtualized@9.22.5_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/react-virtualized/dist/es/InfiniteLoader/InfiniteLoader.js", "../src/layout/navigation-3000/components/SearchHighlight.tsx"],
  "sourcesContent": ["import { LemonMenuItem, lemonToast } from '@posthog/lemon-ui'\nimport { actions, connect, kea, path, reducers, selectors } from 'kea'\nimport api from 'lib/api'\nimport { TreeItem } from 'lib/components/DatabaseTableTree/DatabaseTableTree'\nimport { deleteWithUndo } from 'lib/utils/deleteWithUndo'\nimport { databaseTableListLogic } from 'scenes/data-management/database/databaseTableListLogic'\n\nimport {\n    DatabaseSchemaDataWarehouseTable,\n    DatabaseSchemaField,\n    DatabaseSchemaTable,\n} from '~/queries/schema/schema-general'\nimport { DataWarehouseSavedQuery, DataWarehouseViewLink } from '~/types'\n\nimport { dataWarehouseJoinsLogic } from '../external/dataWarehouseJoinsLogic'\nimport { dataWarehouseViewsLogic } from '../saved_queries/dataWarehouseViewsLogic'\nimport { viewLinkLogic } from '../viewLinkLogic'\nimport type { editorSceneLogicType } from './editorSceneLogicType'\n\nconst isDataWarehouseTable = (\n    table: DatabaseSchemaDataWarehouseTable | DatabaseSchemaTable | DataWarehouseSavedQuery\n): table is DatabaseSchemaDataWarehouseTable => {\n    return 'type' in table && table.type === 'data_warehouse'\n}\n\nconst isPostHogTable = (\n    table: DatabaseSchemaDataWarehouseTable | DatabaseSchemaTable | DataWarehouseSavedQuery\n): table is DatabaseSchemaTable => {\n    return 'type' in table && table.type === 'posthog'\n}\n\nconst isViewTable = (\n    table: DatabaseSchemaDataWarehouseTable | DatabaseSchemaTable | DataWarehouseSavedQuery\n): table is DataWarehouseSavedQuery => {\n    return 'query' in table\n}\n\nconst isJoined = (field: DatabaseSchemaField): boolean => {\n    return field.type === 'view' || field.type === 'lazy_table'\n}\n\nexport const editorSceneLogic = kea<editorSceneLogicType>([\n    path(['scenes', 'data-warehouse', 'editor', 'editorSceneLogic']),\n    actions({\n        setSidebarOverlayOpen: (isOpen: boolean) => ({ isOpen }),\n        selectSchema: (schema: DatabaseSchemaDataWarehouseTable | DatabaseSchemaTable | DataWarehouseSavedQuery) => ({\n            schema,\n        }),\n    }),\n    connect({\n        values: [\n            dataWarehouseJoinsLogic,\n            ['joins', 'joinsLoading'],\n            databaseTableListLogic,\n            ['posthogTablesMap', 'dataWarehouseTablesMap'],\n            dataWarehouseViewsLogic,\n            ['dataWarehouseSavedQueryMapById'],\n        ],\n        actions: [\n            viewLinkLogic,\n            ['toggleEditJoinModal'],\n            databaseTableListLogic,\n            ['loadDatabase'],\n            dataWarehouseJoinsLogic,\n            ['loadJoins'],\n        ],\n    }),\n    reducers({\n        sidebarOverlayOpen: [\n            false,\n            {\n                setSidebarOverlayOpen: (_, { isOpen }) => isOpen,\n                selectSchema: (_, { schema }) => schema !== null,\n            },\n        ],\n        selectedSchema: [\n            null as DatabaseSchemaDataWarehouseTable | DatabaseSchemaTable | DataWarehouseSavedQuery | null,\n            {\n                selectSchema: (_, { schema }) => schema,\n            },\n        ],\n    }),\n    selectors(({ actions }) => ({\n        sidebarOverlayTreeItems: [\n            (s) => [\n                s.selectedSchema,\n                s.joins,\n                s.posthogTablesMap,\n                s.dataWarehouseTablesMap,\n                s.dataWarehouseSavedQueryMapById,\n            ],\n            (\n                selectedSchema,\n                joins,\n                posthogTablesMap,\n                dataWarehouseTablesMap,\n                dataWarehouseSavedQueryMapById\n            ): TreeItem[] => {\n                if (selectedSchema === null) {\n                    return []\n                }\n                let table: DatabaseSchemaDataWarehouseTable | DatabaseSchemaTable | DataWarehouseSavedQuery | null =\n                    null\n                if (isPostHogTable(selectedSchema)) {\n                    table = posthogTablesMap[selectedSchema.name]\n                } else if (isDataWarehouseTable(selectedSchema)) {\n                    table = dataWarehouseTablesMap[selectedSchema.name]\n                } else if (isViewTable(selectedSchema)) {\n                    table = dataWarehouseSavedQueryMapById[selectedSchema.id]\n                }\n\n                if (table == null) {\n                    return []\n                }\n\n                const relevantJoins = joins.filter((join) => join.source_table_name === table!.name)\n                const joinsByFieldName = relevantJoins.reduce((acc, join) => {\n                    if (join.field_name) {\n                        acc[join.field_name] = join\n                    }\n                    return acc\n                }, {} as Record<string, DataWarehouseViewLink>)\n\n                const menuItems = (field: DatabaseSchemaField): LemonMenuItem[] => {\n                    return isJoined(field) && joinsByFieldName[field.name]\n                        ? [\n                              {\n                                  label: 'Edit',\n                                  onClick: () => {\n                                      actions.toggleEditJoinModal(joinsByFieldName[field.name])\n                                  },\n                              },\n                              {\n                                  label: 'Delete join',\n                                  status: 'danger',\n                                  onClick: () => {\n                                      const join = joinsByFieldName[field.name]\n                                      void deleteWithUndo({\n                                          endpoint: api.dataWarehouseViewLinks.determineDeleteEndpoint(),\n                                          object: {\n                                              id: join.id,\n                                              name: `${join.field_name} on ${join.source_table_name}`,\n                                          },\n                                          callback: () => {\n                                              actions.loadDatabase()\n                                              actions.loadJoins()\n                                          },\n                                      }).catch((e) => {\n                                          lemonToast.error(`Failed to delete warehouse view link: ${e.detail}`)\n                                      })\n                                  },\n                              },\n                          ]\n                        : []\n                }\n\n                if ('fields' in table) {\n                    return Object.values(table.fields).map((field) => ({\n                        name: field.name,\n                        type: field.type,\n                        menuItems: menuItems(field),\n                    }))\n                }\n\n                if ('columns' in table) {\n                    return Object.values(table.columns).map((column) => ({\n                        name: column.name,\n                        type: column.type,\n                        menuItems: menuItems(column),\n                    }))\n                }\n                return []\n            },\n        ],\n    })),\n])\n", "import { Tooltip } from '@posthog/lemon-ui'\nimport Fuse from 'fuse.js'\nimport { connect, kea, path, selectors } from 'kea'\nimport { router } from 'kea-router'\nimport { subscriptions } from 'kea-subscriptions'\nimport { IconCalculate, IconClipboardEdit } from 'lib/lemon-ui/icons'\nimport { databaseTableListLogic } from 'scenes/data-management/database/databaseTableListLogic'\nimport { sceneLogic } from 'scenes/sceneLogic'\nimport { Scene } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { navigation3000Logic } from '~/layout/navigation-3000/navigationLogic'\nimport { FuseSearchMatch } from '~/layout/navigation-3000/sidebars/utils'\nimport { BasicListItem, ExtendedListItem, ListItemAccordion, SidebarCategory } from '~/layout/navigation-3000/types'\nimport { DatabaseSchemaDataWarehouseTable, DatabaseSchemaTable } from '~/queries/schema/schema-general'\nimport { DataWarehouseSavedQuery, PipelineTab } from '~/types'\n\nimport { dataWarehouseViewsLogic } from '../saved_queries/dataWarehouseViewsLogic'\nimport { viewLinkLogic } from '../viewLinkLogic'\nimport { editorSceneLogic } from './editorSceneLogic'\nimport type { editorSidebarLogicType } from './editorSidebarLogicType'\nimport { multitabEditorLogic } from './multitabEditorLogic'\n\nconst dataWarehouseTablesfuse = new Fuse<DatabaseSchemaDataWarehouseTable>([], {\n    keys: [{ name: 'name', weight: 2 }],\n    threshold: 0.3,\n    ignoreLocation: true,\n    includeMatches: true,\n})\n\nconst posthogTablesfuse = new Fuse<DatabaseSchemaTable>([], {\n    keys: [{ name: 'name', weight: 2 }],\n    threshold: 0.3,\n    ignoreLocation: true,\n    includeMatches: true,\n})\n\nconst savedQueriesfuse = new Fuse<DataWarehouseSavedQuery>([], {\n    keys: [{ name: 'name', weight: 2 }],\n    threshold: 0.3,\n    ignoreLocation: true,\n    includeMatches: true,\n})\n\nexport const editorSidebarLogic = kea<editorSidebarLogicType>([\n    path(['data-warehouse', 'editor', 'editorSidebarLogic']),\n    connect({\n        values: [\n            sceneLogic,\n            ['activeScene', 'sceneParams'],\n            dataWarehouseViewsLogic,\n            ['dataWarehouseSavedQueries', 'dataWarehouseSavedQueryMapById', 'initialDataWarehouseSavedQueryLoading'],\n            databaseTableListLogic,\n            ['posthogTables', 'dataWarehouseTables', 'databaseLoading', 'views', 'viewsMapById'],\n        ],\n        actions: [\n            editorSceneLogic,\n            ['selectSchema'],\n            dataWarehouseViewsLogic,\n            ['deleteDataWarehouseSavedQuery', 'runDataWarehouseSavedQuery'],\n            viewLinkLogic,\n            ['selectSourceTable', 'toggleJoinTableModal'],\n        ],\n    }),\n    selectors(({ actions }) => ({\n        contents: [\n            (s) => [\n                s.relevantSavedQueries,\n                s.initialDataWarehouseSavedQueryLoading,\n                s.relevantPosthogTables,\n                s.relevantDataWarehouseTables,\n                s.dataWarehouseTablesBySourceType,\n                s.databaseLoading,\n            ],\n            (\n                relevantSavedQueries,\n                initialDataWarehouseSavedQueryLoading,\n                relevantPosthogTables,\n                relevantDataWarehouseTables,\n                dataWarehouseTablesBySourceType,\n                databaseLoading\n            ) => [\n                {\n                    key: 'data-warehouse-sources',\n                    noun: ['source', 'external source'],\n                    loading: databaseLoading,\n                    items:\n                        relevantDataWarehouseTables.length > 0\n                            ? relevantDataWarehouseTables.map(([table, matches]) => ({\n                                  key: table.id,\n                                  name: table.name,\n                                  url: '',\n                                  searchMatch: matches\n                                      ? {\n                                            matchingFields: matches.map((match) => match.key),\n                                            nameHighlightRanges: matches.find((match) => match.key === 'name')?.indices,\n                                        }\n                                      : null,\n                                  onClick: () => {\n                                      actions.selectSchema(table)\n                                  },\n                                  menuItems: [\n                                      {\n                                          label: 'Add join',\n                                          onClick: () => {\n                                              actions.selectSourceTable(table.name)\n                                              actions.toggleJoinTableModal()\n                                          },\n                                      },\n                                  ],\n                              }))\n                            : dataWarehouseTablesBySourceType,\n                    onAdd: () => {\n                        router.actions.push(urls.pipeline(PipelineTab.Sources))\n                    },\n                } as SidebarCategory,\n                {\n                    key: 'data-warehouse-tables',\n                    noun: ['table', 'tables'],\n                    loading: databaseLoading,\n                    items: relevantPosthogTables.map(([table, matches]) => ({\n                        key: table.id,\n                        name: table.name,\n                        url: '',\n                        searchMatch: matches\n                            ? {\n                                  matchingFields: matches.map((match) => match.key),\n                                  nameHighlightRanges: matches.find((match) => match.key === 'name')?.indices,\n                              }\n                            : null,\n                        onClick: () => {\n                            actions.selectSchema(table)\n                        },\n                        menuItems: [\n                            {\n                                label: 'Add join',\n                                onClick: () => {\n                                    actions.selectSourceTable(table.name)\n                                    actions.toggleJoinTableModal()\n                                },\n                            },\n                        ],\n                    })),\n                } as SidebarCategory,\n                {\n                    key: 'data-warehouse-views',\n                    noun: ['view', 'views'],\n                    loading: initialDataWarehouseSavedQueryLoading,\n                    items: relevantSavedQueries.map(([savedQuery, matches]) => ({\n                        key: savedQuery.id,\n                        name: savedQuery.name,\n                        url: '',\n                        icon: savedQuery.last_run_at ? (\n                            <Tooltip title=\"Materialized view\">\n                                <IconCalculate />\n                            </Tooltip>\n                        ) : (\n                            <Tooltip title=\"View\">\n                                <IconClipboardEdit />\n                            </Tooltip>\n                        ),\n                        searchMatch: matches\n                            ? {\n                                  matchingFields: matches.map((match) => match.key),\n                                  nameHighlightRanges: matches.find((match) => match.key === 'name')?.indices,\n                              }\n                            : null,\n                        onClick: () => {\n                            actions.selectSchema(savedQuery)\n                        },\n                        menuItems: [\n                            {\n                                label: 'Edit view definition',\n                                onClick: () => {\n                                    multitabEditorLogic({\n                                        key: `hogQLQueryEditor/${router.values.location.pathname}`,\n                                    }).actions.editView(savedQuery.query.query, savedQuery)\n                                },\n                            },\n                            {\n                                label: 'Add join',\n                                onClick: () => {\n                                    actions.selectSourceTable(savedQuery.name)\n                                    actions.toggleJoinTableModal()\n                                },\n                            },\n                            {\n                                label: 'Delete',\n                                status: 'danger',\n                                onClick: () => {\n                                    actions.deleteDataWarehouseSavedQuery(savedQuery.id)\n                                },\n                            },\n                        ],\n                    })),\n                } as SidebarCategory,\n            ],\n        ],\n        nonMaterializedViews: [\n            (s) => [s.dataWarehouseSavedQueries],\n            (views): DataWarehouseSavedQuery[] => {\n                return views.filter((view) => !view.status)\n            },\n        ],\n        materializedViews: [\n            (s) => [s.dataWarehouseSavedQueries],\n            (views): DataWarehouseSavedQuery[] => {\n                return views.filter((view) => view.status)\n            },\n        ],\n        activeListItemKey: [\n            (s) => [s.activeScene, s.sceneParams],\n            (activeScene, sceneParams): [string, number] | null => {\n                return activeScene === Scene.DataWarehouse && sceneParams.params.id\n                    ? ['saved-queries', parseInt(sceneParams.params.id)]\n                    : null\n            },\n        ],\n        dataWarehouseTablesBySourceType: [\n            (s) => [s.dataWarehouseTables],\n            (dataWarehouseTables): BasicListItem[] | ExtendedListItem[] | ListItemAccordion[] => {\n                const tablesBySourceType = dataWarehouseTables.reduce(\n                    (acc: Record<string, DatabaseSchemaDataWarehouseTable[]>, table) => {\n                        if (table.source) {\n                            if (!acc[table.source.source_type]) {\n                                acc[table.source.source_type] = []\n                            }\n                            acc[table.source.source_type].push(table)\n                        } else {\n                            if (!acc['Self-managed']) {\n                                acc['Self-managed'] = []\n                            }\n                            acc['Self-managed'].push(table)\n                        }\n                        return acc\n                    },\n                    {}\n                )\n\n                return Object.entries(tablesBySourceType).map(([sourceType, tables]) => ({\n                    key: sourceType,\n                    noun: [sourceType, sourceType],\n                    items: tables.map((table) => ({\n                        key: table.id,\n                        name: table.name,\n                        url: '',\n                        searchMatch: null,\n                        onClick: () => {\n                            actions.selectSchema(table)\n                        },\n                        menuItems: [\n                            {\n                                label: 'Add join',\n                                onClick: () => {\n                                    actions.selectSourceTable(table.name)\n                                    actions.toggleJoinTableModal()\n                                },\n                            },\n                        ],\n                    })),\n                })) as ListItemAccordion[]\n            },\n        ],\n        relevantDataWarehouseTables: [\n            () => [navigation3000Logic.selectors.searchTerm],\n            (searchTerm): [DatabaseSchemaDataWarehouseTable, FuseSearchMatch[] | null][] => {\n                if (searchTerm) {\n                    return dataWarehouseTablesfuse\n                        .search(searchTerm)\n                        .map((result) => [result.item, result.matches as FuseSearchMatch[]])\n                }\n                return []\n            },\n        ],\n        relevantPosthogTables: [\n            (s) => [s.posthogTables, navigation3000Logic.selectors.searchTerm],\n            (posthogTables, searchTerm): [DatabaseSchemaTable, FuseSearchMatch[] | null][] => {\n                if (searchTerm) {\n                    return posthogTablesfuse\n                        .search(searchTerm)\n                        .map((result) => [result.item, result.matches as FuseSearchMatch[]])\n                }\n                return posthogTables.map((table) => [table, null])\n            },\n        ],\n        relevantSavedQueries: [\n            (s) => [s.dataWarehouseSavedQueries, navigation3000Logic.selectors.searchTerm],\n            (dataWarehouseSavedQueries, searchTerm): [DataWarehouseSavedQuery, FuseSearchMatch[] | null][] => {\n                if (searchTerm) {\n                    return savedQueriesfuse\n                        .search(searchTerm)\n                        .map((result) => [result.item, result.matches as FuseSearchMatch[]])\n                }\n                return dataWarehouseSavedQueries.map((savedQuery) => [savedQuery, null])\n            },\n        ],\n    })),\n    subscriptions({\n        dataWarehouseTables: (dataWarehouseTables) => {\n            dataWarehouseTablesfuse.setCollection(dataWarehouseTables)\n        },\n        posthogTables: (posthogTables) => {\n            posthogTablesfuse.setCollection(posthogTables)\n        },\n        dataWarehouseSavedQueries: (dataWarehouseSavedQueries) => {\n            savedQueriesfuse.setCollection(dataWarehouseSavedQueries)\n        },\n    }),\n])\n", "import {\n    IconAI,\n    IconArrowUpRight,\n    IconCursorClick,\n    IconDashboard,\n    IconDatabase,\n    IconFeatures,\n    IconGraph,\n    IconHome,\n    IconLive,\n    IconLogomark,\n    IconMegaphone,\n    IconMessage,\n    IconNotebook,\n    IconPeople,\n    IconPieChart,\n    IconPlug,\n    IconPlusSmall,\n    IconRewindPlay,\n    IconRocket,\n    IconServer,\n    IconSparkles,\n    IconTestTube,\n    IconToggle,\n    IconWarning,\n} from '@posthog/icons'\nimport { lemonToast, Spinner } from '@posthog/lemon-ui'\nimport { captureException } from '@sentry/react'\nimport { actions, connect, events, kea, listeners, path, props, reducers, selectors } from 'kea'\nimport { router } from 'kea-router'\nimport { subscriptions } from 'kea-subscriptions'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { LemonMenuOverlay } from 'lib/lemon-ui/LemonMenu/LemonMenu'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { isNotNil } from 'lib/utils'\nimport React from 'react'\nimport { editorSidebarLogic } from 'scenes/data-warehouse/editor/editorSidebarLogic'\nimport { sceneLogic } from 'scenes/sceneLogic'\nimport { Scene } from 'scenes/sceneTypes'\nimport { replayLandingPageLogic } from 'scenes/session-recordings/replayLandingPageLogic'\nimport { savedSessionRecordingPlaylistsLogic } from 'scenes/session-recordings/saved-playlists/savedSessionRecordingPlaylistsLogic'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { urls } from 'scenes/urls'\n\nimport { dashboardsModel } from '~/models/dashboardsModel'\nimport { ProductKey, ReplayTabs } from '~/types'\n\nimport { navigationLogic } from '../navigation/navigationLogic'\nimport type { navigation3000LogicType } from './navigationLogicType'\nimport { dashboardsSidebarLogic } from './sidebars/dashboards'\nimport { dataManagementSidebarLogic } from './sidebars/dataManagement'\nimport { experimentsSidebarLogic } from './sidebars/experiments'\nimport { featureFlagsSidebarLogic } from './sidebars/featureFlags'\nimport { insightsSidebarLogic } from './sidebars/insights'\nimport { personsAndGroupsSidebarLogic } from './sidebars/personsAndGroups'\nimport { BasicListItem, ExtendedListItem, NavbarItem, SidebarNavbarItem } from './types'\n\n/** Multi-segment item keys are joined using this separator for easy comparisons. */\nexport const ITEM_KEY_PART_SEPARATOR = '::'\n\nexport type Navigation3000Mode = 'none' | 'minimal' | 'full'\n\nconst MINIMUM_SIDEBAR_WIDTH_PX: number = 192\nconst DEFAULT_SIDEBAR_WIDTH_PX: number = 288\nconst MAXIMUM_SIDEBAR_WIDTH_PX: number = 1024\nconst MAXIMUM_SIDEBAR_WIDTH_PERCENTAGE: number = 50\n\nexport const navigation3000Logic = kea<navigation3000LogicType>([\n    path(['layout', 'navigation-3000', 'navigationLogic']),\n    props({} as { inputElement?: HTMLInputElement | null }),\n    connect(() => ({\n        values: [\n            sceneLogic,\n            ['sceneConfig'],\n            navigationLogic,\n            ['mobileLayout'],\n            teamLogic,\n            ['currentTeam', 'hasOnboardedAnyProduct'],\n            replayLandingPageLogic,\n            ['replayLandingPage'],\n            savedSessionRecordingPlaylistsLogic({ tab: ReplayTabs.Playlists }),\n            ['playlists', 'playlistsLoading'],\n        ],\n        actions: [navigationLogic, ['closeAccountPopover']],\n    })),\n    actions({\n        hideSidebar: true,\n        showSidebar: (newNavbarItemId?: string) => ({ newNavbarItemId }),\n        toggleNavCollapsed: (override?: boolean) => ({ override }),\n        showNavOnMobile: true,\n        hideNavOnMobile: true,\n        toggleSidebar: true,\n        setSidebarWidth: (width: number) => ({ width }),\n        setSidebarOverslide: (overslide: number) => ({ overslide }),\n        syncSidebarWidthWithMouseMove: (delta: number) => ({ delta }),\n        syncSidebarWidthWithViewport: true,\n        beginResize: true,\n        endResize: true,\n        acknowledgeSidebarKeyboardShortcut: true,\n        setIsSearchShown: (isSearchShown: boolean) => ({ isSearchShown }),\n        setSearchTerm: (searchTerm: string) => ({ searchTerm }),\n        initiateNewItemInCategory: (category: string) => ({ category }),\n        initiateNewItemInlineInCategory: (category: string) => ({ category }),\n        cancelNewItem: true,\n        saveNewItem: (itemName: string) => ({ itemName }),\n        saveNewItemComplete: true,\n        setLastFocusedItemIndex: (index: number) => ({ index }),\n        setLastFocusedItemByKey: (key: string | number) => ({ key }), // A wrapper over setLastFocusedItemIndex\n        focusNextItem: true,\n        focusPreviousItem: true,\n        toggleAccordion: (key: string) => ({ key }),\n        toggleListItemAccordion: (key: string) => ({ key }),\n    }),\n    reducers({\n        isSidebarShown: [\n            true,\n            {\n                hideSidebar: () => false,\n                showSidebar: () => true,\n                toggleSidebar: (isSidebarShown) => !isSidebarShown,\n            },\n        ],\n        sidebarWidth: [\n            DEFAULT_SIDEBAR_WIDTH_PX,\n            {\n                setSidebarWidth: (_, { width }) => width,\n            },\n        ],\n        sidebarOverslide: [\n            // Overslide is how far beyond the min/max sidebar width the cursor has moved\n            0,\n            {\n                setSidebarOverslide: (_, { overslide }) => overslide,\n            },\n        ],\n        isResizeInProgress: [\n            false,\n            {\n                beginResize: () => true,\n                endResize: () => false,\n            },\n        ],\n        isNavCollapsedDesktop: [\n            false,\n            { persist: true },\n            {\n                toggleNavCollapsed: (state, { override }) => override ?? !state,\n            },\n        ],\n        isNavShownMobile: [\n            false,\n            { persist: true },\n            {\n                showNavOnMobile: () => true,\n                hideNavOnMobile: () => false,\n                closeAccountPopover: () => false,\n            },\n        ],\n        isSidebarKeyboardShortcutAcknowledged: [\n            false,\n            {\n                persist: true,\n            },\n            {\n                acknowledgeSidebarKeyboardShortcut: () => true,\n            },\n        ],\n        activeNavbarItemIdRaw: [\n            Scene.Dashboards as string,\n            {\n                persist: true,\n            },\n            {\n                showSidebar: (state, { newNavbarItemId }) => newNavbarItemId || state,\n            },\n        ],\n        isSearchShown: [\n            true,\n            {\n                setIsSearchShown: (_, { isSearchShown }) => isSearchShown,\n            },\n        ],\n        internalSearchTerm: [\n            // Do not reference this outside of this file\n            // `searchTerm` is the outwards-facing value, as it's made empty when search is hidden\n            '',\n            {\n                setSearchTerm: (_, { searchTerm }) => searchTerm,\n            },\n        ],\n        lastFocusedItemIndex: [\n            -1 as number,\n            {\n                setLastFocusedItemIndex: (_, { index }) => index,\n            },\n        ],\n        accordionCollapseMapping: [\n            {} as Record<string, boolean>,\n            {\n                persist: true,\n            },\n            {\n                toggleAccordion: (state, { key }) => ({\n                    ...state,\n                    [key]: !state[key],\n                }),\n            },\n        ],\n        listItemAccordionCollapseMapping: [\n            {} as Record<string, boolean>,\n            {\n                persist: true,\n            },\n            {\n                toggleListItemAccordion: (state, { key }) => ({\n                    ...state,\n                    [key]: !state[key],\n                }),\n            },\n        ],\n        newItemInlineCategory: [\n            null as string | null,\n            {\n                initiateNewItemInlineInCategory: (_, { category }) => category,\n                saveNewItemComplete: () => null,\n                cancelNewItem: () => null,\n                toggleSidebar: () => null,\n                showSidebar: () => null,\n                hideSidebar: () => null,\n            },\n        ],\n        savingNewItem: [\n            false,\n            {\n                saveNewItem: () => true,\n                saveNewItemComplete: () => false,\n            },\n        ],\n    }),\n    listeners(({ actions, values }) => ({\n        initiateNewItemInCategory: ({ category: categoryKey }) => {\n            const category = values.activeNavbarItem?.logic.values.contents?.find((item) => item.key === categoryKey)\n            if (!category) {\n                throw new Error(`Sidebar category '${categoryKey}' doesn't exist`)\n            } else if (!category.onAdd || typeof category.onAdd !== 'function') {\n                throw new Error(`Sidebar category '${categoryKey}' doesn't support onAdd`)\n            }\n            if (category.onAdd.length === 0) {\n                ;(category.onAdd as () => void)() // If a zero-arg function, call it immediately\n            } else {\n                actions.initiateNewItemInlineInCategory(categoryKey) // Otherwise initiate inline item creation\n            }\n        },\n        saveNewItem: async ({ itemName }) => {\n            try {\n                const categoryKey = values.newItemInlineCategory\n                if (!categoryKey) {\n                    throw new Error(`Can't save new sidebar item without a category`)\n                }\n                const category = values.activeNavbarItem?.logic.values.contents?.find(\n                    (item) => item.key === categoryKey\n                )\n                if (!category) {\n                    throw new Error(`Sidebar category '${categoryKey}' doesn't exist`)\n                } else if (!category.onAdd || typeof category.onAdd !== 'function') {\n                    throw new Error(`Sidebar category '${categoryKey}' doesn't support onAdd`)\n                }\n                await category.onAdd(itemName)\n            } catch (e) {\n                captureException(e)\n                console.error(e)\n                lemonToast.error('Something went wrong while saving the item. Please try again.')\n            } finally {\n                actions.saveNewItemComplete()\n            }\n        },\n        syncSidebarWidthWithMouseMove: ({ delta }) => {\n            const newWidthRaw = values.sidebarWidth + values.sidebarOverslide + delta\n            let newWidth = newWidthRaw\n            if (newWidth < MINIMUM_SIDEBAR_WIDTH_PX) {\n                newWidth = MINIMUM_SIDEBAR_WIDTH_PX\n            } else if (newWidth > MAXIMUM_SIDEBAR_WIDTH_PX) {\n                newWidth = MAXIMUM_SIDEBAR_WIDTH_PX\n            }\n            if (newWidth > window.innerWidth * (MAXIMUM_SIDEBAR_WIDTH_PERCENTAGE / 100)) {\n                newWidth = window.innerWidth * (MAXIMUM_SIDEBAR_WIDTH_PERCENTAGE / 100)\n            }\n            actions.setSidebarWidth(newWidth)\n            actions.setSidebarOverslide(newWidthRaw - newWidth)\n            if (newWidthRaw < MINIMUM_SIDEBAR_WIDTH_PX / 2) {\n                if (values.isSidebarShown) {\n                    actions.hideSidebar()\n                }\n            } else {\n                if (!values.isSidebarShown) {\n                    actions.showSidebar()\n                }\n            }\n        },\n        syncSidebarWidthWithViewport: () => {\n            if (values.sidebarWidth > window.innerWidth * (MAXIMUM_SIDEBAR_WIDTH_PERCENTAGE / 100)) {\n                // Clamp\n                actions.setSidebarWidth(window.innerWidth * (MAXIMUM_SIDEBAR_WIDTH_PERCENTAGE / 100))\n            }\n        },\n        endResize: () => {\n            actions.setSidebarOverslide(values.isSidebarShown ? 0 : -MINIMUM_SIDEBAR_WIDTH_PX)\n        },\n        toggleSidebar: () => {\n            actions.endResize()\n        },\n        focusNextItem: () => {\n            const nextIndex = values.lastFocusedItemIndex + 1\n            if (nextIndex < values.sidebarContentsFlattened.length) {\n                actions.setLastFocusedItemIndex(nextIndex)\n            }\n        },\n        focusPreviousItem: () => {\n            const nextIndex = values.lastFocusedItemIndex - 1\n            if (nextIndex >= -1) {\n                actions.setLastFocusedItemIndex(nextIndex)\n            }\n        },\n        setLastFocusedItemByKey: ({ key }) => {\n            const index = values.sidebarContentsFlattened.findIndex((item) =>\n                Array.isArray(item.key) ? item.key.includes(key as string) : item.key === key\n            )\n            if (index !== -1) {\n                actions.setLastFocusedItemIndex(index)\n            }\n        },\n    })),\n    selectors({\n        mode: [\n            (s) => [s.sceneConfig],\n            (sceneConfig): Navigation3000Mode => {\n                return sceneConfig?.layout === 'plain' && !sceneConfig.allowUnauthenticated\n                    ? 'minimal'\n                    : sceneConfig?.layout !== 'plain'\n                    ? 'full'\n                    : 'none'\n            },\n        ],\n        isNavShown: [\n            (s) => [s.isNavShownMobile, s.mobileLayout],\n            (isNavShownMobile, mobileLayout): boolean => !mobileLayout || isNavShownMobile,\n        ],\n        isNavCollapsed: [\n            (s) => [s.isNavCollapsedDesktop, s.mobileLayout],\n            (isNavCollapsedDesktop, mobileLayout): boolean => !mobileLayout && isNavCollapsedDesktop,\n        ],\n        navbarItems: [\n            (s) => [\n                featureFlagLogic.selectors.featureFlags,\n                dashboardsModel.selectors.dashboardsLoading,\n                dashboardsModel.selectors.pinnedDashboards,\n                s.currentTeam,\n                s.hasOnboardedAnyProduct,\n                s.replayLandingPage,\n                s.playlists,\n                s.playlistsLoading,\n            ],\n            (\n                featureFlags,\n                dashboardsLoading,\n                pinnedDashboards,\n                currentTeam,\n                hasOnboardedAnyProduct,\n                replayLandingPage,\n                playlists,\n                playlistsLoading\n            ): NavbarItem[][] => {\n                const isUsingSidebar = featureFlags[FEATURE_FLAGS.POSTHOG_3000_NAV]\n                const hasOnboardedFeatureFlags = currentTeam?.has_completed_onboarding_for?.[ProductKey.FEATURE_FLAGS]\n\n                const sectionOne: NavbarItem[] = hasOnboardedAnyProduct\n                    ? [\n                          {\n                              identifier: Scene.ProjectHomepage,\n                              label: 'Home',\n                              icon: <IconHome />,\n                              to: urls.projectHomepage(),\n                          },\n                          {\n                              identifier: Scene.Dashboards,\n                              label: 'Dashboards',\n                              icon: <IconDashboard />,\n                              logic: isUsingSidebar ? dashboardsSidebarLogic : undefined,\n                              to: isUsingSidebar ? undefined : urls.dashboards(),\n                              sideAction:\n                                  pinnedDashboards.length > 0\n                                      ? {\n                                            identifier: 'pinned-dashboards-dropdown',\n                                            dropdown: {\n                                                overlay: (\n                                                    <LemonMenuOverlay\n                                                        items={[\n                                                            {\n                                                                title: 'Pinned dashboards',\n                                                                items: pinnedDashboards.map((dashboard) => ({\n                                                                    label: dashboard.name,\n                                                                    to: urls.dashboard(dashboard.id),\n                                                                })),\n                                                                footer: dashboardsLoading && (\n                                                                    <div className=\"px-2 py-1 text-tertiary\">\n                                                                        <Spinner /> Loading\u2026\n                                                                    </div>\n                                                                ),\n                                                            },\n                                                        ]}\n                                                    />\n                                                ),\n                                                placement: 'bottom-end',\n                                            },\n                                        }\n                                      : undefined,\n                          },\n                          {\n                              identifier: Scene.Notebooks,\n                              label: 'Notebooks',\n                              icon: <IconNotebook />,\n                              to: urls.notebooks(),\n                          },\n                          {\n                              identifier: Scene.DataManagement,\n                              label: 'Data management',\n                              icon: <IconDatabase />,\n                              logic: isUsingSidebar ? dataManagementSidebarLogic : undefined,\n                              to: isUsingSidebar ? undefined : urls.eventDefinitions(),\n                          },\n                          {\n                              identifier: Scene.PersonsManagement,\n                              label: 'People and groups',\n                              icon: <IconPeople />,\n                              logic: isUsingSidebar ? personsAndGroupsSidebarLogic : undefined,\n                              to: isUsingSidebar ? undefined : urls.persons(),\n                          },\n                          {\n                              identifier: Scene.Activity,\n                              label: 'Activity',\n                              icon: <IconLive />,\n                              to: urls.activity(),\n                          },\n                      ]\n                    : [\n                          {\n                              identifier: Scene.Products,\n                              label: 'Welcome to PostHog',\n                              icon: <IconLogomark />,\n                              to: urls.products(),\n                          },\n                      ]\n\n                if (featureFlags[FEATURE_FLAGS.ARTIFICIAL_HOG]) {\n                    sectionOne.splice(1, 0, {\n                        identifier: Scene.Max,\n                        label: 'Max',\n                        icon: <IconSparkles />,\n                        onClick: () =>\n                            lemonToast.info(\n                                'Max now lives in the top right corner of the app \u2013 he will soon disappear from the navbar',\n                                { icon: <IconArrowUpRight /> }\n                            ),\n                        to: urls.max(),\n                        tag: 'beta' as const,\n                    })\n                }\n\n                if (featureFlags[FEATURE_FLAGS.FEATURE_MANAGEMENT_UI]) {\n                    sectionOne.splice(4, 0, {\n                        identifier: Scene.FeatureManagement,\n                        label: 'Features',\n                        icon: <IconFeatures />,\n                        logic: isUsingSidebar ? featureFlagsSidebarLogic : undefined,\n                        to: isUsingSidebar ? undefined : urls.featureManagement(),\n                    })\n                }\n\n                return [\n                    sectionOne,\n                    [\n                        {\n                            identifier: Scene.SavedInsights,\n                            label: 'Product analytics',\n                            icon: <IconGraph />,\n                            logic: isUsingSidebar ? insightsSidebarLogic : undefined,\n                            to: isUsingSidebar ? undefined : urls.savedInsights(),\n                            sideAction: {\n                                icon: <IconPlusSmall />, // The regular plus is too big\n                                to: urls.insightNew(),\n                                tooltip: 'New insight',\n                                identifier: Scene.Insight,\n                            },\n                        },\n                        {\n                            identifier: Scene.WebAnalytics,\n                            label: 'Web analytics',\n                            icon: <IconPieChart />,\n                            to: isUsingSidebar ? undefined : urls.webAnalytics(),\n                        },\n                        featureFlags[FEATURE_FLAGS.LLM_OBSERVABILITY]\n                            ? {\n                                  identifier: 'LLMObservability',\n                                  label: 'LLM observability',\n                                  icon: <IconAI />,\n                                  to: urls.llmObservabilityDashboard(),\n                                  tag: 'beta' as const,\n                              }\n                            : null,\n                        {\n                            identifier: Scene.Replay,\n                            label: 'Session replay',\n                            icon: <IconRewindPlay />,\n                            to: urls.replay(replayLandingPage),\n                            sideAction: {\n                                identifier: 'replay-dropdown',\n                                dropdown: {\n                                    overlay: (\n                                        <LemonMenuOverlay\n                                            items={\n                                                playlists.count > 0\n                                                    ? [\n                                                          {\n                                                              title: 'Saved playlists',\n                                                              items: playlists.results.map((playlist) => ({\n                                                                  label:\n                                                                      playlist.name ||\n                                                                      playlist.derived_name ||\n                                                                      'Unnamed',\n                                                                  to: urls.replayPlaylist(playlist.short_id),\n                                                              })),\n                                                              footer: playlistsLoading && (\n                                                                  <div className=\"px-2 py-1 text-tertiary\">\n                                                                      <Spinner /> Loading\u2026\n                                                                  </div>\n                                                              ),\n                                                          },\n                                                      ]\n                                                    : [\n                                                          {\n                                                              label: 'All recordings',\n                                                              to: urls.replay(ReplayTabs.Home),\n                                                          },\n                                                          {\n                                                              label: 'Playlists',\n                                                              to: urls.replay(ReplayTabs.Playlists),\n                                                          },\n                                                      ]\n                                            }\n                                        />\n                                    ),\n                                    placement: 'bottom-end',\n                                },\n                            },\n                        },\n                        featureFlags[FEATURE_FLAGS.ERROR_TRACKING]\n                            ? {\n                                  identifier: Scene.ErrorTracking,\n                                  label: 'Error tracking',\n                                  icon: <IconWarning />,\n                                  to: urls.errorTracking(),\n                                  tag: 'beta' as const,\n                              }\n                            : null,\n                        featureFlags[FEATURE_FLAGS.HEATMAPS_UI]\n                            ? {\n                                  identifier: Scene.Heatmaps,\n                                  label: 'Heatmaps',\n                                  icon: <IconCursorClick />,\n                                  to: isUsingSidebar ? undefined : urls.heatmaps(),\n                                  tag: 'alpha' as const,\n                              }\n                            : null,\n                        {\n                            identifier: Scene.FeatureFlags,\n                            label: 'Feature flags',\n                            icon: <IconToggle />,\n                            logic: isUsingSidebar ? featureFlagsSidebarLogic : undefined,\n                            to: isUsingSidebar ? undefined : urls.featureFlags(),\n                        },\n                        {\n                            identifier: Scene.Experiments,\n                            label: 'Experiments',\n                            icon: <IconTestTube />,\n                            logic: isUsingSidebar ? experimentsSidebarLogic : undefined,\n                            to: isUsingSidebar ? undefined : urls.experiments(),\n                        },\n                        {\n                            identifier: Scene.Surveys,\n                            label: 'Surveys',\n                            icon: <IconMessage />,\n                            to: urls.surveys(),\n                        },\n                        featureFlags[FEATURE_FLAGS.PRODUCT_INTRO_PAGES] !== 'test' || hasOnboardedFeatureFlags\n                            ? {\n                                  identifier: 'EarlyAccessFeatures',\n                                  label: 'Early access features',\n                                  icon: <IconRocket />,\n                                  to: urls.earlyAccessFeatures(),\n                              }\n                            : null,\n                        {\n                            identifier: Scene.SQLEditor,\n                            label: 'SQL editor',\n                            icon: <IconServer />,\n                            to: urls.sqlEditor(),\n                            logic: editorSidebarLogic,\n                        },\n                        hasOnboardedAnyProduct\n                            ? {\n                                  identifier: Scene.Pipeline,\n                                  label: 'Data pipelines',\n                                  icon: <IconPlug />,\n                                  to: urls.pipeline(),\n                              }\n                            : null,\n                        featureFlags[FEATURE_FLAGS.MESSAGING] && hasOnboardedAnyProduct\n                            ? {\n                                  identifier: Scene.MessagingBroadcasts,\n                                  label: 'Messaging',\n                                  icon: <IconMegaphone />,\n                                  to: urls.messagingBroadcasts(),\n                                  tag: 'alpha' as const,\n                              }\n                            : null,\n                    ].filter(isNotNil) as NavbarItem[],\n                ]\n            },\n        ],\n        navbarItemIdMapping: [\n            (s) => [s.navbarItems],\n            (navbarItems): Record<string, NavbarItem> => {\n                return Object.fromEntries(navbarItems.flat().map((item) => [item.identifier, item]))\n            },\n        ],\n        sidebarOverslideDirection: [\n            (s) => [s.sidebarOverslide],\n            (sidebarOverslide): 'min' | 'max' | null => {\n                if (sidebarOverslide < 0) {\n                    return 'min'\n                } else if (sidebarOverslide > 0) {\n                    return 'max'\n                }\n                return null\n            },\n        ],\n        activeNavbarItem: [\n            (s) => [s.activeNavbarItemId, s.navbarItemIdMapping],\n            (activeNavbarItemId, navbarItemIdMapping): SidebarNavbarItem | null => {\n                const item = activeNavbarItemId ? navbarItemIdMapping[activeNavbarItemId] : null\n                return item && 'logic' in item ? (item as SidebarNavbarItem) : null\n            },\n        ],\n        searchTerm: [\n            (s) => [s.internalSearchTerm, s.isSearchShown],\n            (internalSearchTerm, isSearchShown): string => {\n                return isSearchShown ? internalSearchTerm : ''\n            },\n        ],\n        sidebarContentsFlattened: [\n            (s) => [(state) => s.activeNavbarItem(state)?.logic?.findMounted()?.selectors.contents(state) || null],\n            (sidebarContents): BasicListItem[] | ExtendedListItem[] => {\n                const flattenItems = (items: any[]): (BasicListItem | ExtendedListItem)[] => {\n                    return items.flatMap((item) => {\n                        if ('items' in item) {\n                            return flattenItems(item.items)\n                        }\n                        return item\n                    })\n                }\n                return sidebarContents ? flattenItems(sidebarContents) : []\n            },\n        ],\n        normalizedActiveListItemKey: [\n            (s) => [\n                (state) =>\n                    s.activeNavbarItem(state)?.logic?.findMounted()?.selectors.activeListItemKey?.(state) || null,\n            ],\n            (activeListItemKey): string | number | string[] | null =>\n                activeListItemKey\n                    ? Array.isArray(activeListItemKey)\n                        ? activeListItemKey.join(ITEM_KEY_PART_SEPARATOR)\n                        : activeListItemKey\n                    : null,\n        ],\n        isListItemVisible: [\n            (s) => [s.listItemAccordionCollapseMapping],\n            (listItemAccordionCollapseMapping) => {\n                return (key: string): boolean => {\n                    // Split the key into parts to check each parent's visibility\n                    const parts = key.split(ITEM_KEY_PART_SEPARATOR)\n                    // Check if any parent is collapsed\n                    for (let i = 1; i < parts.length; i++) {\n                        const parentKey = parts.slice(0, i).join(ITEM_KEY_PART_SEPARATOR)\n                        if (listItemAccordionCollapseMapping[parentKey]) {\n                            return false\n                        }\n                    }\n                    return true\n                }\n            },\n        ],\n        activeNavbarItemId: [\n            (s) => [s.activeNavbarItemIdRaw, featureFlagLogic.selectors.featureFlags],\n            (activeNavbarItemIdRaw, featureFlags): string | null => {\n                if (activeNavbarItemIdRaw === Scene.SQLEditor) {\n                    return Scene.SQLEditor\n                }\n                if (!featureFlags[FEATURE_FLAGS.POSTHOG_3000_NAV]) {\n                    return null\n                }\n                return activeNavbarItemIdRaw\n            },\n        ],\n        newItemCategory: [\n            (s) => [\n                (state) => s.activeNavbarItem(state)?.logic?.findMounted()?.selectors.contents(state) || null,\n                s.newItemInlineCategory,\n                router.selectors.location,\n            ],\n            (sidebarContents, newItemInlineCategory, location): string | null => {\n                if (!sidebarContents) {\n                    return null\n                }\n                if (newItemInlineCategory) {\n                    return newItemInlineCategory\n                }\n                return (\n                    sidebarContents.find(\n                        (category) => typeof category.onAdd === 'string' && category.onAdd === location.pathname\n                    )?.key || null\n                )\n            },\n        ],\n    }),\n    subscriptions(({ props, cache, actions, values }) => ({\n        isResizeInProgress: (isResizeInProgress) => {\n            if (isResizeInProgress) {\n                cache.onMouseMove = (e: MouseEvent): void => actions.syncSidebarWidthWithMouseMove(e.movementX)\n                cache.onMouseUp = (e: MouseEvent): void => {\n                    if (e.button === 0) {\n                        actions.endResize()\n                    }\n                }\n                document.addEventListener('mousemove', cache.onMouseMove)\n                document.addEventListener('mouseup', cache.onMouseUp)\n                return () => {}\n            }\n            document.removeEventListener('mousemove', cache.onMouseMove)\n            document.removeEventListener('mouseup', cache.onMouseUp)\n        },\n        sidebarContentsFlattened: (sidebarContentsFlattened) => {\n            for (const item of sidebarContentsFlattened) {\n                if (!item.ref) {\n                    item.ref = React.createRef() // Inject refs for keyboard navigation\n                }\n            }\n            actions.setLastFocusedItemIndex(-1) // Reset focused item index on contents change\n        },\n        lastFocusedItemIndex: (lastFocusedItemIndex) => {\n            if (lastFocusedItemIndex >= 0) {\n                const item = values.sidebarContentsFlattened[lastFocusedItemIndex]\n                item.ref?.current?.focus()\n            } else {\n                props.inputElement?.focus()\n            }\n        },\n    })),\n    events(({ props, actions, cache }) => ({\n        afterMount: () => {\n            cache.onResize = () => actions.syncSidebarWidthWithViewport()\n            cache.onKeyDown = (e: KeyboardEvent) => {\n                if (e.key === 'b' && (e.metaKey || e.ctrlKey)) {\n                    actions.toggleSidebar()\n                    e.preventDefault()\n                }\n                if (e.key === 'f' && e.shiftKey && (e.metaKey || e.ctrlKey)) {\n                    actions.setIsSearchShown(true)\n                    props.inputElement?.focus()\n                    e.preventDefault()\n                }\n            }\n            window.addEventListener('resize', cache.onResize)\n            window.addEventListener('keydown', cache.onKeyDown)\n        },\n        beforeUnmount: () => {\n            window.removeEventListener('resize', cache.onResize)\n            window.removeEventListener('resize', cache.onKeyDown)\n        },\n    })),\n])\n", "import Fuse from 'fuse.js'\nimport { connect, kea, path, selectors } from 'kea'\nimport { subscriptions } from 'kea-subscriptions'\nimport { DashboardEventSource } from 'lib/utils/eventUsageLogic'\nimport { dashboardLogic } from 'scenes/dashboard/dashboardLogic'\nimport { deleteDashboardLogic } from 'scenes/dashboard/deleteDashboardLogic'\nimport { duplicateDashboardLogic } from 'scenes/dashboard/duplicateDashboardLogic'\nimport { newDashboardLogic } from 'scenes/dashboard/newDashboardLogic'\nimport { NewDashboardModal } from 'scenes/dashboard/NewDashboardModal'\nimport { sceneLogic } from 'scenes/sceneLogic'\nimport { Scene } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { navigation3000Logic } from '~/layout/navigation-3000/navigationLogic'\nimport { dashboardsModel } from '~/models/dashboardsModel'\nimport { DashboardBasicType, DashboardType } from '~/types'\nimport { DashboardMode } from '~/types'\n\nimport { BasicListItem, SidebarCategory } from '../types'\nimport type { dashboardsSidebarLogicType } from './dashboardsType'\nimport { FuseSearchMatch } from './utils'\n\nconst fuse = new Fuse<DashboardType>([], {\n    keys: [{ name: 'name', weight: 2 }, 'description', 'tags'],\n    threshold: 0.3,\n    ignoreLocation: true,\n    includeMatches: true,\n})\n\nexport const dashboardsSidebarLogic = kea<dashboardsSidebarLogicType>([\n    path(['layout', 'navigation-3000', 'sidebars', 'dashboardsSidebarLogic']),\n    connect({\n        values: [\n            dashboardsModel,\n            ['pinSortedDashboards', 'dashboardsLoading'],\n            sceneLogic,\n            ['activeScene', 'sceneParams'],\n        ],\n        actions: [\n            dashboardsModel,\n            ['pinDashboard', 'unpinDashboard'],\n            duplicateDashboardLogic,\n            ['showDuplicateDashboardModal'],\n            deleteDashboardLogic,\n            ['showDeleteDashboardModal'],\n            newDashboardLogic,\n            ['showNewDashboardModal'],\n        ],\n    }),\n    selectors(({ actions }) => ({\n        contents: [\n            (s) => [s.relevantDashboards, s.dashboardsLoading],\n            (relevantDashboards, dashboardsLoading) => [\n                {\n                    key: 'dashboards',\n                    noun: 'dashboard',\n                    loading: dashboardsLoading,\n                    onAdd: () => actions.showNewDashboardModal(),\n                    modalContent: <NewDashboardModal />,\n                    items: relevantDashboards.map(\n                        ([dashboard, matches]) =>\n                            ({\n                                key: dashboard.id,\n                                name: dashboard.name,\n                                url: urls.dashboard(dashboard.id),\n                                marker: dashboard.pinned ? { type: 'fold' } : undefined,\n                                searchMatch: matches\n                                    ? {\n                                          matchingFields: matches.map((match) => match.key),\n                                          nameHighlightRanges: matches.find((match) => match.key === 'name')?.indices,\n                                      }\n                                    : null,\n                                menuItems: (initiateRename) => [\n                                    {\n                                        items: [\n                                            {\n                                                to: urls.dashboard(dashboard.id),\n                                                onClick: () => {\n                                                    dashboardLogic({ id: dashboard.id }).mount()\n                                                    dashboardLogic({ id: dashboard.id }).actions.setDashboardMode(\n                                                        DashboardMode.Edit,\n                                                        DashboardEventSource.DashboardsList\n                                                    )\n                                                },\n                                                label: 'Edit',\n                                            },\n                                            {\n                                                onClick: () => {\n                                                    actions.showDuplicateDashboardModal(dashboard.id, dashboard.name)\n                                                },\n                                                label: 'Duplicate',\n                                            },\n                                        ],\n                                    },\n                                    {\n                                        items: [\n                                            {\n                                                onClick: () => {\n                                                    ;(dashboard.pinned ? actions.unpinDashboard : actions.pinDashboard)(\n                                                        dashboard.id,\n                                                        DashboardEventSource.MoreDropdown\n                                                    )\n                                                },\n                                                label: dashboard.pinned ? 'Unpin' : 'Pin',\n                                            },\n                                        ],\n                                    },\n                                    {\n                                        items: [\n                                            {\n                                                onClick: initiateRename,\n                                                label: 'Rename',\n                                                keyboardShortcut: ['enter'],\n                                            },\n                                            {\n                                                onClick: () => {\n                                                    actions.showDeleteDashboardModal(dashboard.id)\n                                                },\n                                                status: 'danger',\n                                                label: 'Delete dashboard',\n                                            },\n                                        ],\n                                    },\n                                ],\n                                onRename: async (newName) => {\n                                    await dashboardsModel.asyncActions.updateDashboard({\n                                        id: dashboard.id,\n                                        name: newName,\n                                    })\n                                },\n                            } as BasicListItem)\n                    ),\n                } as SidebarCategory,\n            ],\n        ],\n        activeListItemKey: [\n            (s) => [s.activeScene, s.sceneParams],\n            (activeScene, sceneParams): [string, number] | null => {\n                return activeScene === Scene.Dashboard && sceneParams.params.id\n                    ? ['dashboards', parseInt(sceneParams.params.id)]\n                    : null\n            },\n        ],\n        relevantDashboards: [\n            (s) => [s.pinSortedDashboards, navigation3000Logic.selectors.searchTerm],\n            (pinSortedDashboards, searchTerm): [DashboardBasicType, FuseSearchMatch[] | null][] => {\n                if (searchTerm) {\n                    return fuse.search(searchTerm).map((result) => [result.item, result.matches as FuseSearchMatch[]])\n                }\n                return pinSortedDashboards.map((dashboard) => [dashboard, null])\n            },\n        ],\n    })),\n    subscriptions({\n        pinSortedDashboards: (pinSortedDashboards) => {\n            fuse.setCollection(pinSortedDashboards)\n        },\n    }),\n])\n", "import { actions, afterMount, connect, kea, path, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport { subscriptions } from 'kea-subscriptions'\nimport api from 'lib/api'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { getFilterLabel } from 'lib/taxonomy'\nimport { actionsFuse, actionsLogic } from 'scenes/actions/actionsLogic'\nimport { sceneLogic } from 'scenes/sceneLogic'\nimport { Scene } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { navigation3000Logic } from '~/layout/navigation-3000/navigationLogic'\nimport { ActionType, EventDefinition, FilterLogicalOperator, PropertyDefinition, ReplayTabs } from '~/types'\n\nimport { BasicListItem, SidebarCategory } from '../types'\nimport type { dataManagementSidebarLogicType } from './dataManagementType'\nimport { findSearchTermInItemName } from './utils'\nimport { FuseSearchMatch } from './utils'\n\nexport const dataManagementSidebarLogic = kea<dataManagementSidebarLogicType>([\n    path(['layout', 'navigation-3000', 'sidebars', 'dataManagementSidebarLogic']),\n    connect(() => ({\n        values: [\n            sceneLogic,\n            ['activeScene', 'sceneParams'],\n            navigation3000Logic,\n            ['searchTerm'],\n            actionsLogic,\n            ['actions', 'actionsLoading'],\n        ],\n    })),\n    actions({\n        loadEventDefinitions: (startIndex: number, stopIndex: number) => ({ startIndex, stopIndex }),\n        loadPropertyDefinitions: (startIndex: number, stopIndex: number) => ({ startIndex, stopIndex }),\n    }),\n    loaders(({ values, cache }) => ({\n        infiniteEventDefinitions: [\n            [[], 0] as [(EventDefinition | null)[], number],\n            {\n                loadEventDefinitions: async ({ startIndex, stopIndex }) => {\n                    if (!startIndex) {\n                        cache.requestedEventDefinitions = []\n                    }\n                    for (let i = startIndex; i < stopIndex; i++) {\n                        cache.requestedEventDefinitions[i] = true\n                    }\n                    const results = await api.eventDefinitions.list({\n                        offset: startIndex,\n                        limit: stopIndex - startIndex,\n                        search: values.searchTerm,\n                    })\n                    const newItems = startIndex ? values.infiniteEventDefinitions[0].slice() : []\n                    for (let i = 0; i < results.results.length; i++) {\n                        newItems[startIndex + i] = results.results[i]\n                    }\n                    return [newItems, results.count]\n                },\n            },\n        ],\n        infinitePropertyDefinitions: [\n            [[], 0] as [(PropertyDefinition | null)[], number],\n            {\n                loadPropertyDefinitions: async ({ startIndex, stopIndex }) => {\n                    if (!startIndex) {\n                        cache.requestedPropertyDefinitions = []\n                    }\n                    for (let i = startIndex; i < stopIndex; i++) {\n                        cache.requestedPropertyDefinitions[i] = true\n                    }\n                    const results = await api.propertyDefinitions.list({\n                        offset: startIndex,\n                        limit: stopIndex - startIndex,\n                        search: values.searchTerm,\n                    })\n                    const newItems = startIndex ? values.infinitePropertyDefinitions[0].slice() : []\n                    for (let i = 0; i < results.results.length; i++) {\n                        newItems[startIndex + i] = results.results[i]\n                    }\n                    return [newItems, results.count]\n                },\n            },\n        ],\n    })),\n    selectors(({ actions, values, cache }) => ({\n        contents: [\n            (s) => [\n                s.infiniteEventDefinitions,\n                s.infiniteEventDefinitionsLoading,\n                s.infinitePropertyDefinitions,\n                s.infinitePropertyDefinitionsLoading,\n                s.relevantActions,\n                s.actionsLoading,\n            ],\n            (\n                [eventDefinitions, eventDefinitionCount],\n                infiniteEventDefinitionsLoading,\n                [propertyDefinitions, propertyDefinitionCount],\n                infinitePropertyDefinitionsLoading,\n                relevantActions,\n                actionsLoading\n            ) => [\n                {\n                    key: 'event-definitions',\n                    noun: 'event definition',\n                    loading: infiniteEventDefinitionsLoading,\n                    items: eventDefinitions.map(\n                        (eventDefinition) =>\n                            eventDefinition &&\n                            ({\n                                key: eventDefinition.id,\n                                name: getFilterLabel(eventDefinition.name, TaxonomicFilterGroupType.Events),\n                                url: urls.eventDefinition(eventDefinition.id),\n                                searchMatch: findSearchTermInItemName(\n                                    getFilterLabel(eventDefinition.name, TaxonomicFilterGroupType.Events),\n                                    values.searchTerm\n                                ),\n                                menuItems: [\n                                    {\n                                        label: 'View recordings',\n                                        to: urls.replay(ReplayTabs.Home, {\n                                            filter_group: {\n                                                type: FilterLogicalOperator.And,\n                                                values: [\n                                                    {\n                                                        type: FilterLogicalOperator.And,\n                                                        values: [\n                                                            {\n                                                                id: eventDefinition.name,\n                                                                type: 'events',\n                                                                order: 0,\n                                                                name: eventDefinition.name,\n                                                            },\n                                                        ],\n                                                    },\n                                                ],\n                                            },\n                                        }),\n                                    },\n                                ],\n                            } as BasicListItem)\n                    ),\n                    remote: {\n                        isItemLoaded: (index) => !!(cache.requestedEventDefinitions[index] || eventDefinitions[index]),\n                        loadMoreItems: (startIndex, stopIndex) => actions.loadEventDefinitions(startIndex, stopIndex),\n                        itemCount: eventDefinitionCount,\n                    },\n                } as SidebarCategory,\n                {\n                    key: 'property-definitions',\n                    noun: 'property definition',\n                    loading: infinitePropertyDefinitionsLoading,\n                    items: propertyDefinitions.map(\n                        (propertyDefinition) =>\n                            propertyDefinition &&\n                            ({\n                                key: propertyDefinition.id,\n                                name: getFilterLabel(propertyDefinition.name, TaxonomicFilterGroupType.EventProperties),\n                                url: urls.propertyDefinition(propertyDefinition.id),\n                                searchMatch: findSearchTermInItemName(\n                                    getFilterLabel(propertyDefinition.name, TaxonomicFilterGroupType.EventProperties),\n                                    values.searchTerm\n                                ),\n                            } as BasicListItem)\n                    ),\n                    remote: {\n                        isItemLoaded: (index) =>\n                            !!(cache.requestedPropertyDefinitions[index] || propertyDefinitions[index]),\n                        loadMoreItems: (startIndex, stopIndex) =>\n                            actions.loadPropertyDefinitions(startIndex, stopIndex),\n                        itemCount: propertyDefinitionCount,\n                    },\n                } as SidebarCategory,\n                {\n                    key: 'actions',\n                    noun: 'action',\n                    loading: actionsLoading,\n                    onAdd: urls.action('new'), // TODO: Show \"New button\" at accordion level\n                    items: relevantActions.map(([action, matches]) => ({\n                        key: action.id,\n                        name: action.name,\n                        url: urls.action(action.id),\n                        searchMatch: matches\n                            ? {\n                                  matchingFields: matches.map((match) => match.key),\n                                  nameHighlightRanges: matches.find((match) => match.key === 'name')?.indices,\n                              }\n                            : null,\n                    })),\n                } as SidebarCategory,\n            ],\n        ],\n        activeListItemKey: [\n            (s) => [s.activeScene, s.sceneParams],\n            (activeScene, sceneParams): [string, string] | null => {\n                if (activeScene === Scene.EventDefinition) {\n                    return ['event-definitions', sceneParams.params.id]\n                }\n                if (activeScene === Scene.PropertyDefinition) {\n                    return ['property-definitions', sceneParams.params.id]\n                }\n                if (activeScene === Scene.Action) {\n                    return ['actions', sceneParams.params.id]\n                }\n                return null\n            },\n        ],\n        // kea-typegen doesn't like selectors without deps, so searchTerm is just for appearances\n        debounceSearch: [(s) => [s.searchTerm], () => true],\n        relevantActions: [\n            (s) => [s.actions, navigation3000Logic.selectors.searchTerm],\n            (actions, searchTerm): [ActionType, FuseSearchMatch[] | null][] => {\n                if (searchTerm) {\n                    return actionsFuse\n                        .search(searchTerm)\n                        .map((result) => [result.item, result.matches as FuseSearchMatch[]])\n                }\n                return actions.map((action) => [action, null])\n            },\n        ],\n    })),\n    subscriptions(({ actions }) => ({\n        searchTerm: () => {\n            actions.loadEventDefinitions(0, 100)\n            actions.loadPropertyDefinitions(0, 100)\n        },\n    })),\n    afterMount(({ actions, cache }) => {\n        cache.requestedEventDefinitions = []\n        cache.requestedPropertyDefinitions = []\n        actions.loadEventDefinitions(0, 100)\n        actions.loadPropertyDefinitions(0, 100)\n    }),\n])\n", "import { SearchMatch } from '../types'\n\nexport interface FuseSearchMatch {\n    // kea-typegen has a problem importing Fuse itself, so we have to duplicate this type\n    indices: readonly [number, number][]\n    key: string\n}\n\n/**\n * Return a search match with instances of the search term highlighted in the string.\n * This provides highlighting for server-side search, which does not return data on how the search term was matched.\n */\nexport function findSearchTermInItemName(name: string, searchTerm: string): SearchMatch | null {\n    if (!searchTerm || !name) {\n        return null\n    }\n    const ranges: [number, number][] = []\n    const workingName = name.toLowerCase()\n    const workingSearchTerm = searchTerm.toLowerCase()\n    let index = workingName.indexOf(workingSearchTerm)\n    while (index !== -1) {\n        ranges.push([index, index + searchTerm.length])\n        index = workingName.indexOf(workingSearchTerm, index + 1)\n    }\n    return ranges.length ? { nameHighlightRanges: ranges } : null\n}\n", "import Fuse from 'fuse.js'\nimport { connect, kea, path, selectors } from 'kea'\nimport { subscriptions } from 'kea-subscriptions'\nimport { dayjs } from 'lib/dayjs'\nimport { experimentsLogic, getExperimentStatus } from 'scenes/experiments/experimentsLogic'\nimport { sceneLogic } from 'scenes/sceneLogic'\nimport { Scene } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { Experiment, ProgressStatus } from '~/types'\n\nimport { navigation3000Logic } from '../navigationLogic'\nimport { ExtendedListItem, SidebarCategory } from '../types'\nimport type { experimentsSidebarLogicType } from './experimentsType'\nimport { FuseSearchMatch } from './utils'\n\nconst fuse = new Fuse<Experiment>([], {\n    keys: [{ name: 'name', weight: 2 }, 'description'],\n    threshold: 0.3,\n    ignoreLocation: true,\n    includeMatches: true,\n})\n\nconst EXPERIMENT_STATUS_TO_RIBBON_STATUS = { draft: 'muted', running: 'success', complete: 'completion' }\n\nexport const experimentsSidebarLogic = kea<experimentsSidebarLogicType>([\n    path(['layout', 'navigation-3000', 'sidebars', 'experimentsSidebarLogic']),\n    connect({\n        values: [experimentsLogic, ['experiments', 'experimentsLoading'], sceneLogic, ['activeScene', 'sceneParams']],\n        actions: [experimentsLogic, ['loadExperiments', 'deleteExperiment']],\n    }),\n    selectors(({ actions }) => ({\n        contents: [\n            (s) => [s.relevantExperiments, s.experimentsLoading],\n            (relevantExperiments, experimentsLoading) => [\n                {\n                    key: 'experiments',\n                    noun: 'experiment',\n                    loading: experimentsLoading,\n                    items: relevantExperiments.map(([experiment, matches]) => {\n                        const experimentStatus = getExperimentStatus(experiment)\n                        return {\n                            key: experiment.id,\n                            name: experiment.name,\n                            summary:\n                                experimentStatus === ProgressStatus.Draft\n                                    ? 'Draft'\n                                    : experimentStatus === ProgressStatus.Complete\n                                    ? `Completed ${dayjs(experiment.start_date).fromNow()}`\n                                    : `Running for ${dayjs(experiment.start_date).fromNow(true)} now`,\n                            extraContextTop: dayjs(experiment.created_at),\n                            extraContextBottom: `by ${experiment.created_by?.first_name || 'unknown'}`,\n                            url: urls.experiment(experiment.id),\n                            searchMatch: matches\n                                ? {\n                                      matchingFields: matches.map((match) => match.key),\n                                      nameHighlightRanges: matches.find((match) => match.key === 'name')?.indices,\n                                  }\n                                : null,\n                            marker: {\n                                type: 'ribbon',\n                                status: EXPERIMENT_STATUS_TO_RIBBON_STATUS[experimentStatus],\n                            },\n                            menuItems: [\n                                {\n                                    items: [\n                                        {\n                                            label: 'Delete experiment',\n                                            onClick: () => actions.deleteExperiment(experiment.id as number),\n                                            status: 'danger',\n                                        },\n                                    ],\n                                },\n                            ],\n                        } as ExtendedListItem\n                    }),\n                    onAdd: urls.experiment('new'),\n                } as SidebarCategory,\n            ],\n        ],\n        activeListItemKey: [\n            (s) => [s.activeScene, s.sceneParams],\n            (activeScene, sceneParams): [string, number] | null => {\n                return activeScene === Scene.Experiment && sceneParams.params.id\n                    ? ['experiments', parseInt(sceneParams.params.id)]\n                    : null\n            },\n        ],\n        relevantExperiments: [\n            (s) => [s.experiments, navigation3000Logic.selectors.searchTerm],\n            (experiments, searchTerm): [Experiment, FuseSearchMatch[] | null][] => {\n                if (searchTerm) {\n                    return fuse.search(searchTerm).map((result) => [result.item, result.matches as FuseSearchMatch[]])\n                }\n                return experiments.map((experiment) => [experiment, null])\n            },\n        ],\n    })),\n    subscriptions({\n        experiments: (experiments) => {\n            fuse.setCollection(experiments)\n        },\n    }),\n])\n", "import Fuse from 'fuse.js'\nimport { connect, kea, path, selectors } from 'kea'\nimport { subscriptions } from 'kea-subscriptions'\nimport { dayjs } from 'lib/dayjs'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast'\nimport { copyToClipboard } from 'lib/utils/copyToClipboard'\nimport { deleteWithUndo } from 'lib/utils/deleteWithUndo'\nimport { featureFlagLogic } from 'scenes/feature-flags/featureFlagLogic'\nimport { groupFilters } from 'scenes/feature-flags/FeatureFlags'\nimport { featureFlagsLogic } from 'scenes/feature-flags/featureFlagsLogic'\nimport { projectLogic } from 'scenes/projectLogic'\nimport { sceneLogic } from 'scenes/sceneLogic'\nimport { Scene } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { groupsModel } from '~/models/groupsModel'\nimport { InsightVizNode, NodeKind } from '~/queries/schema/schema-general'\nimport { BaseMathType, FeatureFlagType } from '~/types'\n\nimport { navigation3000Logic } from '../navigationLogic'\nimport { ExtendedListItem, SidebarCategory } from '../types'\nimport type { featureFlagsSidebarLogicType } from './featureFlagsType'\nimport { FuseSearchMatch } from './utils'\n\nconst fuse = new Fuse<FeatureFlagType>([], {\n    // Note: For feature flags `name` is the description field\n    keys: [{ name: 'key', weight: 2 }, 'name', 'tags'],\n    threshold: 0.3,\n    ignoreLocation: true,\n    includeMatches: true,\n})\n\nexport const featureFlagsSidebarLogic = kea<featureFlagsSidebarLogicType>([\n    path(['layout', 'navigation-3000', 'sidebars', 'featureFlagsSidebarLogic']),\n    connect({\n        values: [\n            featureFlagsLogic,\n            ['featureFlags', 'featureFlagsLoading'],\n            projectLogic,\n            ['currentProjectId'],\n            sceneLogic,\n            ['activeScene', 'sceneParams'],\n            groupsModel,\n            ['aggregationLabel'],\n        ],\n        actions: [featureFlagsLogic, ['updateFeatureFlag', 'loadFeatureFlags']],\n    }),\n    selectors(({ actions }) => ({\n        contents: [\n            (s) => [s.relevantFeatureFlags, s.featureFlagsLoading, s.currentProjectId, s.aggregationLabel],\n            (relevantFeatureFlags, featureFlagsLoading, currentProjectId, aggregationLabel) => [\n                {\n                    key: 'feature-flags',\n                    noun: 'feature flag',\n                    loading: featureFlagsLoading,\n                    onAdd: urls.featureFlag('new'),\n                    items: relevantFeatureFlags.map(([featureFlag, matches]) => {\n                        if (!featureFlag.id) {\n                            throw new Error('Feature flag ID should never be missing in the sidebar')\n                        }\n\n                        const query: InsightVizNode = {\n                            kind: NodeKind.InsightVizNode,\n                            source: {\n                                kind: NodeKind.TrendsQuery,\n                                series: [\n                                    {\n                                        event: '$pageview',\n                                        name: '$pageview',\n                                        kind: NodeKind.EventsNode,\n                                        math: BaseMathType.UniqueUsers,\n                                    },\n                                ],\n                                breakdownFilter: {\n                                    breakdown: `$feature/${featureFlag.key}`,\n                                    breakdown_type: 'event',\n                                },\n                            },\n                        }\n\n                        return {\n                            key: featureFlag.id,\n                            name: featureFlag.key,\n                            url: urls.featureFlag(featureFlag.id),\n                            summary: featureFlag.active ? (\n                                groupFilters(featureFlag.filters, true, aggregationLabel)\n                            ) : (\n                                <i>Disabled</i>\n                            ),\n                            extraContextTop: dayjs(featureFlag.created_at),\n                            extraContextBottom: `by ${featureFlag.created_by?.first_name || 'unknown'}`,\n                            marker: { type: 'ribbon', status: featureFlag.active ? 'success' : 'danger' },\n                            searchMatch: matches\n                                ? {\n                                      matchingFields: matches.map((match) =>\n                                          match.key === 'name' ? 'description' : match.key\n                                      ),\n                                      nameHighlightRanges: matches.find((match) => match.key === 'key')?.indices,\n                                  }\n                                : null,\n                            menuItems: [\n                                {\n                                    items: [\n                                        {\n                                            label: 'Edit',\n                                            to: urls.featureFlag(featureFlag.id),\n                                            onClick: () => {\n                                                featureFlagLogic({ id: featureFlag.id as number }).mount()\n                                                featureFlagLogic({\n                                                    id: featureFlag.id as number,\n                                                }).actions.editFeatureFlag(true)\n                                            },\n                                            disabledReason: !featureFlag.can_edit\n                                                ? \"You don't have permission to edit this feature flag.\"\n                                                : null,\n                                        },\n                                    ],\n                                },\n                                {\n                                    items: [\n                                        {\n                                            label: `${featureFlag.active ? 'Disable' : 'Enable'} flag`,\n                                            onClick: () =>\n                                                actions.updateFeatureFlag({\n                                                    id: featureFlag.id as number,\n                                                    payload: { active: !featureFlag.active },\n                                                }),\n                                            disabledReason: !featureFlag.can_edit\n                                                ? \"You don't have permission to edit this feature flag.\"\n                                                : null,\n                                        },\n                                        {\n                                            label: 'Copy flag key',\n                                            onClick: () => {\n                                                void copyToClipboard(featureFlag.key, 'feature flag key')\n                                            },\n                                        },\n                                        {\n                                            label: 'Try out in Insights',\n                                            to: urls.insightNew({ query }),\n                                            'data-attr': 'usage',\n                                        },\n                                    ],\n                                },\n                                {\n                                    items: [\n                                        {\n                                            label: 'Delete feature flag',\n                                            onClick: () => {\n                                                void deleteWithUndo({\n                                                    endpoint: `projects/${currentProjectId}/feature_flags`,\n                                                    object: { name: featureFlag.key, id: featureFlag.id },\n                                                    callback: () => {\n                                                        actions.loadFeatureFlags()\n                                                    },\n                                                }).catch((e: any) => {\n                                                    lemonToast.error(`Failed to delete feature flag: ${e.detail}`)\n                                                })\n                                            },\n                                            disabledReason: !featureFlag.can_edit\n                                                ? \"You don't have permission to edit this feature flag.\"\n                                                : null,\n                                            status: 'danger',\n                                        },\n                                    ],\n                                },\n                            ],\n                        } as ExtendedListItem\n                    }),\n                } as SidebarCategory,\n            ],\n        ],\n        activeListItemKey: [\n            (s) => [s.activeScene, s.sceneParams],\n            (activeScene, sceneParams): [string, number] | null => {\n                return activeScene === Scene.FeatureFlag && sceneParams.params.id\n                    ? ['feature-flags', parseInt(sceneParams.params.id)]\n                    : null\n            },\n        ],\n        relevantFeatureFlags: [\n            (s) => [s.featureFlags, navigation3000Logic.selectors.searchTerm],\n            (featureFlags, searchTerm): [FeatureFlagType, FuseSearchMatch[] | null][] => {\n                if (searchTerm) {\n                    return fuse.search(searchTerm).map((result) => [result.item, result.matches as FuseSearchMatch[]])\n                }\n                return featureFlags.results.map((featureFlag) => [featureFlag, null])\n            },\n        ],\n    })),\n    subscriptions({\n        featureFlags: (featureFlags) => {\n            fuse.setCollection(featureFlags)\n        },\n    }),\n])\n", "import { afterMount, connect, kea, listeners, path, reducers, selectors } from 'kea'\nimport { subscriptions } from 'kea-subscriptions'\nimport { deleteInsightWithUndo } from 'lib/utils/deleteWithUndo'\nimport { insightsApi } from 'scenes/insights/utils/api'\nimport { projectLogic } from 'scenes/projectLogic'\nimport { INSIGHTS_PER_PAGE, savedInsightsLogic } from 'scenes/saved-insights/savedInsightsLogic'\nimport { sceneLogic } from 'scenes/sceneLogic'\nimport { Scene } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { navigation3000Logic } from '~/layout/navigation-3000/navigationLogic'\nimport { insightsModel } from '~/models/insightsModel'\nimport { QueryBasedInsightModel } from '~/types'\n\nimport { BasicListItem, SidebarCategory } from '../types'\nimport type { insightsSidebarLogicType } from './insightsType'\nimport { findSearchTermInItemName } from './utils'\n\nexport const insightsSidebarLogic = kea<insightsSidebarLogicType>([\n    path(['layout', 'navigation-3000', 'sidebars', 'insightsSidebarLogic']),\n    connect(() => ({\n        values: [\n            savedInsightsLogic,\n            ['insights', 'insightsLoading', 'paramsFromFilters'],\n            sceneLogic,\n            ['activeScene', 'sceneParams'],\n            navigation3000Logic,\n            ['searchTerm'],\n        ],\n        actions: [savedInsightsLogic, ['loadInsights', 'setSavedInsightsFilters', 'duplicateInsight']],\n    })),\n    reducers(() => ({\n        infiniteInsights: [\n            [] as (QueryBasedInsightModel | undefined)[],\n            {\n                [savedInsightsLogic.actionTypes.loadInsightsSuccess]: (state, { insights }) => {\n                    // Reset array if offset is 0\n                    const items: (QueryBasedInsightModel | undefined)[] = insights.offset === 0 ? [] : state.slice()\n                    for (let i = 0; i < insights.results.length; i++) {\n                        items[insights.offset + i] = insights.results[i]\n                    }\n                    return items\n                },\n            },\n        ],\n    })),\n    selectors(({ actions, values, cache }) => ({\n        contents: [\n            (s) => [s.insights, s.infiniteInsights, s.insightsLoading, projectLogic.selectors.currentProjectId],\n            (insights, infiniteInsights, insightsLoading, currentProjectId) => [\n                {\n                    key: 'insights',\n                    noun: 'insight',\n                    onAdd: urls.insightNew(),\n                    items: infiniteInsights.map((insight) => {\n                        if (!insight) {\n                            return undefined\n                        }\n\n                        return {\n                            key: insight.short_id,\n                            name: insight.name || insight.derived_name || 'Untitled',\n                            isNamePlaceholder: !insight.name,\n                            url: urls.insightView(insight.short_id),\n                            searchMatch: findSearchTermInItemName(\n                                insight.name || insight.derived_name || '',\n                                values.searchTerm\n                            ),\n                            menuItems: (initiateRename) => [\n                                {\n                                    items: [\n                                        {\n                                            to: urls.insightEdit(insight.short_id),\n                                            label: 'Edit',\n                                        },\n                                        {\n                                            onClick: () => {\n                                                actions.duplicateInsight(insight)\n                                            },\n                                            label: 'Duplicate',\n                                        },\n                                    ],\n                                },\n                                {\n                                    items: [\n                                        {\n                                            onClick: initiateRename,\n                                            label: 'Rename',\n                                            keyboardShortcut: ['enter'],\n                                        },\n                                        {\n                                            onClick: () => {\n                                                void deleteInsightWithUndo({\n                                                    object: insight,\n                                                    endpoint: `projects/${currentProjectId}/insights`,\n                                                    callback: actions.loadInsights,\n                                                })\n                                            },\n                                            status: 'danger',\n                                            label: 'Delete insight',\n                                        },\n                                    ],\n                                },\n                            ],\n                            onRename: async (newName) => {\n                                const updatedItem = await insightsApi.update(insight.id, { name: newName })\n                                insightsModel.actions.renameInsightSuccess(updatedItem)\n                            },\n                        } as BasicListItem\n                    }),\n                    loading: insightsLoading,\n                    remote: {\n                        isItemLoaded: (index) => !!(cache.requestedInsights[index] || infiniteInsights[index]),\n                        loadMoreItems: async (startIndex) => {\n                            for (let i = startIndex; i < startIndex + INSIGHTS_PER_PAGE; i++) {\n                                cache.requestedInsights[i] = true\n                            }\n                            await savedInsightsLogic.asyncActions.setSavedInsightsFilters(\n                                { page: Math.floor(startIndex / INSIGHTS_PER_PAGE) + 1 },\n                                true,\n                                false\n                            )\n                        },\n                        itemCount: insights.count,\n                        minimumBatchSize: INSIGHTS_PER_PAGE,\n                    },\n                } as SidebarCategory,\n            ],\n        ],\n        activeListItemKey: [\n            (s) => [s.activeScene, s.sceneParams],\n            (activeScene, sceneParams): [string, string] | null => {\n                return activeScene === Scene.Insight && sceneParams.params.shortId\n                    ? ['insights', sceneParams.params.shortId]\n                    : null\n            },\n        ],\n        // kea-typegen doesn't like selectors without deps, so searchTerm is just for appearances\n        debounceSearch: [(s) => [s.searchTerm], () => true],\n    })),\n    listeners(({ values, cache }) => ({\n        loadInsights: () => {\n            if (!values.paramsFromFilters.offset) {\n                cache.requestedInsights = []\n            }\n        },\n    })),\n    subscriptions(({ actions }) => ({\n        searchTerm: (searchTerm) => {\n            actions.setSavedInsightsFilters({ search: searchTerm }, false, false)\n        },\n    })),\n    afterMount(({ cache }) => {\n        cache.requestedInsights = []\n    }),\n])\n", "import { afterMount, connect, kea, listeners, path, reducers, selectors } from 'kea'\nimport { combineUrl } from 'kea-router'\nimport { subscriptions } from 'kea-subscriptions'\nimport { groupsListLogic, GroupsPaginatedResponse } from 'scenes/groups/groupsListLogic'\nimport { groupDisplayId } from 'scenes/persons/GroupActorDisplay'\nimport { asDisplay, asLink } from 'scenes/persons/person-utils'\nimport { personsLogic } from 'scenes/persons/personsLogic'\nimport { sceneLogic } from 'scenes/sceneLogic'\nimport { Scene } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { groupsModel } from '~/models/groupsModel'\nimport { PersonType } from '~/types'\n\nimport { navigation3000Logic } from '../navigationLogic'\nimport { BasicListItem, SidebarCategory } from '../types'\nimport type { personsAndGroupsSidebarLogicType } from './personsAndGroupsType'\nimport { findSearchTermInItemName } from './utils'\n\nexport const personsAndGroupsSidebarLogic = kea<personsAndGroupsSidebarLogicType>([\n    path(['layout', 'navigation-3000', 'sidebars', 'personsAndGroupsSidebarLogic']),\n    connect(() => ({\n        values: [\n            personsLogic,\n            ['persons', 'personsLoading'],\n            groupsModel,\n            ['groupTypes'],\n            sceneLogic,\n            ['activeScene', 'sceneParams'],\n            navigation3000Logic,\n            ['searchTerm'],\n        ],\n        actions: [personsLogic, ['setListFilters as setPersonsListFilters', 'loadPersons']],\n    })),\n    reducers(() => ({\n        infinitePersons: [\n            [] as (PersonType | undefined)[],\n            {\n                [personsLogic.actionTypes.loadPersonsSuccess]: (state, { persons }) => {\n                    // Reset array if offset is 0\n                    const items: (PersonType | undefined)[] = persons.offset === 0 ? [] : state.slice()\n                    for (let i = 0; i < persons.results.length; i++) {\n                        items[persons.offset + i] = persons.results[i]\n                    }\n                    return items\n                },\n            },\n        ],\n    })),\n    selectors(({ values, cache }) => ({\n        contents: [\n            (s) => [s.persons, s.infinitePersons, s.personsLoading, s.groupTypes, s.groups, s.groupsLoading],\n            (persons, infinitePersons, personsLoading, groupTypes, groups, groupsLoading): SidebarCategory[] => {\n                return [\n                    {\n                        key: 'persons',\n                        noun: 'person',\n                        items: infinitePersons.map((person) => {\n                            if (!person) {\n                                return person\n                            }\n                            const name = asDisplay(person)\n                            // It is not typical to use `values` in a selector instead of a selector dependency,\n                            // but this is intentional: we only want to take the new search term into account AFTER\n                            // person results using it have been loaded.\n                            const { searchTerm } = values\n                            return {\n                                key: person.distinct_ids,\n                                name: asDisplay(person),\n                                url: asLink(person),\n                                searchMatch: findSearchTermInItemName(name, searchTerm),\n                            } as BasicListItem\n                        }),\n                        loading: personsLoading,\n                        remote: {\n                            isItemLoaded: (index) => !!(cache.requestedPersons[index] || infinitePersons[index]),\n                            loadMoreItems: async (startIndex, stopIndex) => {\n                                let moreUrl = persons.next || persons.previous\n                                if (!moreUrl) {\n                                    throw new Error('No URL for loading more persons is known')\n                                }\n                                for (let i = startIndex; i <= stopIndex; i++) {\n                                    cache.requestedPersons[i] = true\n                                }\n                                moreUrl = combineUrl(moreUrl, {\n                                    offset: startIndex,\n                                    limit: stopIndex - startIndex + 1,\n                                }).url\n                                await personsLogic.asyncActions.loadPersons(moreUrl)\n                            },\n                            itemCount: persons.count,\n                            minimumBatchSize: 100,\n                        },\n                    } as SidebarCategory,\n                    ...Array.from(groupTypes.values()).map(\n                        (groupType) =>\n                            ({\n                                key: `groups-${groupType.group_type_index}`,\n                                noun: [\n                                    groupType.name_singular || `${groupType.group_type} group`,\n                                    groupType.name_plural || `${groupType.group_type} groups`,\n                                ],\n                                items:\n                                    groups[groupType.group_type_index]?.results.map((group) => {\n                                        const { searchTerm } = values\n                                        const displayId = groupDisplayId(group.group_key, group.group_properties)\n                                        return {\n                                            key: group.group_key,\n                                            name: displayId,\n                                            url: urls.group(groupType.group_type_index, group.group_key),\n                                            searchMatch: findSearchTermInItemName(displayId, searchTerm),\n                                        } as BasicListItem\n                                    }) || [],\n                                loading: groupsLoading[groupType.group_type_index],\n                                // FIXME: Add remote\n                            } as SidebarCategory)\n                    ),\n                ]\n            },\n        ],\n        groups: [\n            (s) =>\n                Array(5)\n                    .fill(null)\n                    .map((_, groupTypeIndex) => (state) => {\n                        if (s.groupTypes(state)[groupTypeIndex]) {\n                            groupsListLogic({ groupTypeIndex }).mount()\n                            return groupsListLogic({ groupTypeIndex }).selectors.groups(state)\n                        }\n                    }),\n            (\n                groups0: GroupsPaginatedResponse,\n                groups1: GroupsPaginatedResponse,\n                groups2: GroupsPaginatedResponse,\n                groups3: GroupsPaginatedResponse,\n                groups4: GroupsPaginatedResponse\n            ) => {\n                return [groups0, groups1, groups2, groups3, groups4]\n            },\n        ],\n        groupsLoading: [\n            (s) =>\n                Array(5)\n                    .fill(null)\n                    .map((_, groupTypeIndex) => (state) => {\n                        if (s.groupTypes(state)[groupTypeIndex]) {\n                            groupsListLogic({ groupTypeIndex }).mount()\n                            return groupsListLogic({ groupTypeIndex }).selectors.groupsLoading(state)\n                        }\n                    }),\n            (\n                groupsLoading0: boolean,\n                groupsLoading1: boolean,\n                groupsLoading2: boolean,\n                groupsLoading3: boolean,\n                groupsLoading4: boolean\n            ) => {\n                return [groupsLoading0, groupsLoading1, groupsLoading2, groupsLoading3, groupsLoading4]\n            },\n        ],\n        activeListItemKey: [\n            (s) => [s.activeScene, s.sceneParams],\n            (activeScene, sceneParams): [string, string] | null => {\n                if (activeScene === Scene.Person) {\n                    const { _: personDistinctId } = sceneParams.params\n                    return personDistinctId ? ['persons', personDistinctId as string] : null\n                }\n                if (activeScene === Scene.Group) {\n                    const { groupKey, groupTypeIndex } = sceneParams.params\n                    return groupKey ? [`groups-${groupTypeIndex}`, decodeURIComponent(groupKey as string)] : null\n                }\n                return null\n            },\n        ],\n        // kea-typegen doesn't like selectors without deps, so searchTerm is just for appearances\n        debounceSearch: [(s) => [s.searchTerm], () => true],\n    })),\n    listeners(({ cache }) => ({\n        loadPersons: async ({ url }) => {\n            const offset = url ? parseInt(new URL(url).searchParams.get('offset') || '0') : 0\n            if (offset === 0) {\n                cache.requestedPersons = []\n            }\n        },\n    })),\n    subscriptions(({ actions, values }) => ({\n        searchTerm: (searchTerm) => {\n            actions.setPersonsListFilters({ search: searchTerm })\n            actions.loadPersons()\n            for (const { group_type_index: groupTypeIndex } of Object.values(values.groupTypes)) {\n                groupsListLogic({ groupTypeIndex }).actions.setSearch(searchTerm, false)\n            }\n        },\n    })),\n    afterMount(({ actions, cache }) => {\n        cache.requestedPersons = []\n        actions.loadPersons()\n    }),\n])\n", "import { Monaco } from '@monaco-editor/react'\nimport { LemonDialog, LemonInput, lemonToast } from '@posthog/lemon-ui'\nimport { actions, connect, kea, key, listeners, path, props, propsChanged, reducers, selectors } from 'kea'\nimport { router } from 'kea-router'\nimport { subscriptions } from 'kea-subscriptions'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { initModel } from 'lib/monaco/CodeEditor'\nimport { codeEditorLogic } from 'lib/monaco/codeEditorLogic'\nimport { editor, Uri } from 'monaco-editor'\nimport { insightsApi } from 'scenes/insights/utils/api'\nimport { urls } from 'scenes/urls'\n\nimport { dataNodeLogic } from '~/queries/nodes/DataNode/dataNodeLogic'\nimport { insightVizDataNodeKey } from '~/queries/nodes/InsightViz/InsightViz'\nimport { queryExportContext } from '~/queries/query'\nimport { DataVisualizationNode, HogQLMetadataResponse, HogQLQuery, NodeKind } from '~/queries/schema/schema-general'\nimport { DataWarehouseSavedQuery, ExportContext } from '~/types'\n\nimport { DATAWAREHOUSE_EDITOR_ITEM_ID } from '../external/dataWarehouseExternalSceneLogic'\nimport { dataWarehouseViewsLogic } from '../saved_queries/dataWarehouseViewsLogic'\nimport type { multitabEditorLogicType } from './multitabEditorLogicType'\n\nexport const dataNodeKey = insightVizDataNodeKey({\n    dashboardItemId: DATAWAREHOUSE_EDITOR_ITEM_ID,\n    cachedInsight: null,\n    doNotLoad: true,\n})\n\nexport interface MultitabEditorLogicProps {\n    key: string\n    monaco?: Monaco | null\n    editor?: editor.IStandaloneCodeEditor | null\n}\n\nexport const editorModelsStateKey = (key: string | number): string => `${key}/editorModelQueries`\nexport const activeModelStateKey = (key: string | number): string => `${key}/activeModelUri`\nexport const activeModelVariablesStateKey = (key: string | number): string => `${key}/activeModelVariables`\n\nexport const NEW_QUERY = 'Untitled'\n\nconst getNextUntitledNumber = (tabs: QueryTab[]): number => {\n    const untitledNumbers = tabs\n        .filter((tab) => tab.name.startsWith(NEW_QUERY))\n        .map((tab) => {\n            const match = tab.name.match(/Untitled (\\d+)/)\n            return match ? parseInt(match[1]) : 0\n        })\n        .filter((num) => !isNaN(num))\n\n    if (untitledNumbers.length === 0) {\n        return 1\n    }\n\n    // Find the first gap in the sequence or use the next number\n    for (let i = 1; i <= untitledNumbers.length + 1; i++) {\n        if (!untitledNumbers.includes(i)) {\n            return i\n        }\n    }\n    return untitledNumbers.length + 1\n}\n\nexport interface QueryTab {\n    uri: Uri\n    view?: DataWarehouseSavedQuery\n    name: string\n}\n\nexport const multitabEditorLogic = kea<multitabEditorLogicType>([\n    path(['data-warehouse', 'editor', 'multitabEditorLogic']),\n    props({} as MultitabEditorLogicProps),\n    key((props) => props.key),\n    connect({\n        actions: [\n            dataWarehouseViewsLogic,\n            [\n                'loadDataWarehouseSavedQueriesSuccess',\n                'deleteDataWarehouseSavedQuerySuccess',\n                'createDataWarehouseSavedQuerySuccess',\n                'runDataWarehouseSavedQuery',\n            ],\n        ],\n    }),\n    actions({\n        setQueryInput: (queryInput: string) => ({ queryInput }),\n        updateState: true,\n        runQuery: (queryOverride?: string, switchTab?: boolean) => ({ queryOverride, switchTab }),\n        setActiveQuery: (query: string) => ({ query }),\n        renameTab: (tab: QueryTab, newName: string) => ({ tab, newName }),\n        setTabs: (tabs: QueryTab[]) => ({ tabs }),\n        addTab: (tab: QueryTab) => ({ tab }),\n        createTab: (query?: string, view?: DataWarehouseSavedQuery) => ({ query, view }),\n        deleteTab: (tab: QueryTab) => ({ tab }),\n        _deleteTab: (tab: QueryTab) => ({ tab }),\n        removeTab: (tab: QueryTab) => ({ tab }),\n        selectTab: (tab: QueryTab) => ({ tab }),\n        setLocalState: (key: string, value: any) => ({ key, value }),\n        initialize: true,\n        saveAsView: true,\n        saveAsViewSubmit: (name: string) => ({ name }),\n        saveAsInsight: true,\n        saveAsInsightSubmit: (name: string) => ({ name }),\n        setCacheLoading: (loading: boolean) => ({ loading }),\n        setError: (error: string | null) => ({ error }),\n        setIsValidView: (isValidView: boolean) => ({ isValidView }),\n        setSourceQuery: (sourceQuery: DataVisualizationNode) => ({ sourceQuery }),\n        setMetadata: (metadata: HogQLMetadataResponse | null) => ({ metadata }),\n        setMetadataLoading: (loading: boolean) => ({ loading }),\n        editView: (query: string, view: DataWarehouseSavedQuery) => ({ query, view }),\n    }),\n    propsChanged(({ actions, props }, oldProps) => {\n        if (!oldProps.monaco && !oldProps.editor && props.monaco && props.editor) {\n            actions.initialize()\n        }\n    }),\n    reducers(({ props }) => ({\n        cacheLoading: [\n            true,\n            {\n                setCacheLoading: (_, { loading }) => loading,\n            },\n        ],\n        sourceQuery: [\n            {\n                kind: NodeKind.DataVisualizationNode,\n                source: {\n                    kind: NodeKind.HogQLQuery,\n                    query: '',\n                },\n            } as DataVisualizationNode,\n            { persist: true },\n            {\n                setSourceQuery: (_, { sourceQuery }) => sourceQuery,\n            },\n        ],\n        queryInput: [\n            '',\n            {\n                setQueryInput: (_, { queryInput }) => queryInput,\n            },\n        ],\n        activeQuery: [\n            null as string | null,\n            {\n                setActiveQuery: (_, { query }) => query,\n            },\n        ],\n        activeModelUri: [\n            null as QueryTab | null,\n            {\n                selectTab: (_, { tab }) => tab,\n            },\n        ],\n        editingView: [\n            null as DataWarehouseSavedQuery | null,\n            {\n                selectTab: (_, { tab }) => tab.view ?? null,\n            },\n        ],\n        allTabs: [\n            [] as QueryTab[],\n            {\n                addTab: (state, { tab }) => {\n                    return [...state, tab]\n                },\n                removeTab: (state, { tab: tabToRemove }) => {\n                    return state.filter((tab) => tab.uri.toString() !== tabToRemove.uri.toString())\n                },\n                setTabs: (_, { tabs }) => tabs,\n            },\n        ],\n        error: [\n            null as string | null,\n            {\n                setError: (_, { error }) => error,\n            },\n        ],\n        isValidView: [\n            false,\n            {\n                setIsValidView: (_, { isValidView }) => isValidView,\n            },\n        ],\n        metadataLoading: [\n            true,\n            {\n                setMetadataLoading: (_, { loading }) => loading,\n            },\n        ],\n        metadata: [\n            null as HogQLMetadataResponse | null,\n            {\n                setMetadata: (_, { metadata }) => metadata,\n            },\n        ],\n        editorKey: [props.key],\n    })),\n    listeners(({ values, props, actions, asyncActions }) => ({\n        editView: ({ query, view }) => {\n            const maybeExistingTab = values.allTabs.find((tab) => tab.view?.id === view.id)\n            if (maybeExistingTab) {\n                actions.selectTab(maybeExistingTab)\n            } else {\n                actions.createTab(query, view)\n            }\n        },\n        createTab: ({ query = '', view }) => {\n            const mountedCodeEditorLogic =\n                codeEditorLogic.findMounted() ||\n                codeEditorLogic({\n                    key: props.key,\n                    query: values.sourceQuery?.source.query ?? '',\n                    language: 'hogQL',\n                })\n\n            let currentModelCount = 1\n            const allNumbers = values.allTabs.map((tab) => parseInt(tab.uri.path.split('/').pop() || '0'))\n            while (allNumbers.includes(currentModelCount)) {\n                currentModelCount++\n            }\n\n            if (props.monaco) {\n                const uri = props.monaco.Uri.parse(currentModelCount.toString())\n                const model = props.monaco.editor.createModel(query, 'hogQL', uri)\n                props.editor?.setModel(model)\n\n                if (mountedCodeEditorLogic) {\n                    initModel(model, mountedCodeEditorLogic)\n                }\n\n                const nextUntitledNumber = getNextUntitledNumber(values.allTabs)\n                const tabName = view?.name || `${NEW_QUERY} ${nextUntitledNumber}`\n\n                actions.addTab({\n                    uri,\n                    view,\n                    name: tabName,\n                })\n                actions.selectTab({\n                    uri,\n                    view,\n                    name: tabName,\n                })\n\n                const queries = values.allTabs.map((tab) => {\n                    return {\n                        query: props.monaco?.editor.getModel(tab.uri)?.getValue() || '',\n                        path: tab.uri.path.split('/').pop(),\n                        view: uri.path === tab.uri.path ? view : tab.view,\n                        name: tab.name,\n                    }\n                })\n                actions.setLocalState(editorModelsStateKey(props.key), JSON.stringify(queries))\n            }\n        },\n        renameTab: ({ tab, newName }) => {\n            const updatedTabs = values.allTabs.map((t) => {\n                if (t.uri.toString() === tab.uri.toString()) {\n                    return {\n                        ...t,\n                        name: newName,\n                    }\n                }\n                return t\n            })\n            actions.setTabs(updatedTabs)\n            const activeTab = updatedTabs.find((t) => t.uri.toString() === tab.uri.toString())\n            if (activeTab) {\n                actions.selectTab(activeTab)\n            }\n            actions.updateState()\n        },\n        selectTab: ({ tab }) => {\n            if (props.monaco) {\n                const model = props.monaco.editor.getModel(tab.uri)\n                props.editor?.setModel(model)\n            }\n\n            const path = tab.uri.path.split('/').pop()\n            path && actions.setLocalState(activeModelStateKey(props.key), path)\n        },\n        deleteTab: ({ tab: tabToRemove }) => {\n            if (values.activeModelUri?.view && values.queryInput !== values.sourceQuery.source.query) {\n                LemonDialog.open({\n                    title: 'Close tab',\n                    description: 'Are you sure you want to close this tab? There are unsaved changes.',\n                    primaryButton: {\n                        children: 'Close',\n                        status: 'danger',\n                        onClick: () => actions._deleteTab(tabToRemove),\n                    },\n                })\n            } else if (values.queryInput !== '' && !values.activeModelUri?.view) {\n                LemonDialog.open({\n                    title: 'Delete query',\n                    description: 'There are unsaved changes. Are you sure you want to delete this query?',\n                    primaryButton: {\n                        children: 'Delete',\n                        status: 'danger',\n                        onClick: () => actions._deleteTab(tabToRemove),\n                    },\n                })\n            } else {\n                actions._deleteTab(tabToRemove)\n            }\n        },\n        _deleteTab: ({ tab: tabToRemove }) => {\n            if (props.monaco) {\n                const model = props.monaco.editor.getModel(tabToRemove.uri)\n                if (tabToRemove.uri.toString() === values.activeModelUri?.uri.toString()) {\n                    const indexOfModel = values.allTabs.findIndex(\n                        (tab) => tab.uri.toString() === tabToRemove.uri.toString()\n                    )\n                    const nextModel =\n                        values.allTabs[indexOfModel + 1] || values.allTabs[indexOfModel - 1] || values.allTabs[0] // there will always be one\n                    actions.selectTab(nextModel)\n                }\n                model?.dispose()\n                actions.removeTab(tabToRemove)\n                const queries = values.allTabs.map((tab) => {\n                    return {\n                        query: props.monaco?.editor.getModel(tab.uri)?.getValue() || '',\n                        path: tab.uri.path.split('/').pop(),\n                        view: tab.view,\n                    }\n                })\n                actions.setLocalState(editorModelsStateKey(props.key), JSON.stringify(queries))\n            }\n        },\n        setLocalState: ({ key, value }) => {\n            localStorage.setItem(key, value)\n        },\n        initialize: () => {\n            const allModelQueries = localStorage.getItem(editorModelsStateKey(props.key))\n            const activeModelUri = localStorage.getItem(activeModelStateKey(props.key))\n\n            const mountedCodeEditorLogic =\n                codeEditorLogic.findMounted() ||\n                codeEditorLogic({\n                    key: props.key,\n                    query: values.sourceQuery?.source.query ?? '',\n                    language: 'hogQL',\n                })\n\n            if (allModelQueries) {\n                // clear existing models\n                props.monaco?.editor.getModels().forEach((model: editor.ITextModel) => {\n                    model.dispose()\n                })\n\n                const models = JSON.parse(allModelQueries || '[]')\n                const newModels: QueryTab[] = []\n\n                models.forEach((model: Record<string, any>) => {\n                    if (props.monaco) {\n                        const uri = props.monaco.Uri.parse(model.path)\n                        const newModel = props.monaco.editor.createModel(model.query, 'hogQL', uri)\n                        props.editor?.setModel(newModel)\n                        newModels.push({\n                            uri,\n                            view: model.view,\n                            name: model.name,\n                        })\n                        mountedCodeEditorLogic && initModel(newModel, mountedCodeEditorLogic)\n                    }\n                })\n\n                actions.setTabs(newModels)\n\n                if (activeModelUri) {\n                    const uri = props.monaco?.Uri.parse(activeModelUri)\n                    const activeModel = props.monaco?.editor\n                        .getModels()\n                        .find((model: editor.ITextModel) => model.uri.path === uri?.path)\n                    activeModel && props.editor?.setModel(activeModel)\n                    const val = activeModel?.getValue()\n                    if (val) {\n                        actions.setQueryInput(val)\n                        actions.runQuery()\n                    }\n                    const activeTab = newModels.find((tab) => tab.uri.path.split('/').pop() === activeModelUri)\n                    const activeView = activeTab?.view\n\n                    if (uri && activeTab) {\n                        actions.selectTab({\n                            uri,\n                            view: activeView,\n                            name: activeView?.name || activeTab.name,\n                        })\n                    }\n                } else if (newModels.length) {\n                    actions.selectTab({\n                        uri: newModels[0].uri,\n                        name: newModels[0].view?.name || newModels[0].name,\n                    })\n                }\n            } else {\n                const model = props.editor?.getModel()\n\n                if (model) {\n                    actions.createTab()\n                }\n            }\n            actions.setCacheLoading(false)\n        },\n        setQueryInput: () => {\n            actions.updateState()\n        },\n        updateState: async (_, breakpoint) => {\n            await breakpoint(100)\n            const queries = values.allTabs.map((model) => {\n                return {\n                    query: props.monaco?.editor.getModel(model.uri)?.getValue() || '',\n                    path: model.uri.path.split('/').pop(),\n                    name: model.view?.name || model.name,\n                    view: model.view,\n                }\n            })\n            localStorage.setItem(editorModelsStateKey(props.key), JSON.stringify(queries))\n        },\n        runQuery: ({ queryOverride, switchTab }) => {\n            const query = queryOverride || values.queryInput\n\n            actions.setSourceQuery({\n                ...values.sourceQuery,\n                source: {\n                    ...values.sourceQuery.source,\n                    query,\n                },\n            })\n            dataNodeLogic({\n                key: dataNodeKey,\n                query: {\n                    ...values.sourceQuery.source,\n                    query,\n                },\n                autoLoad: false,\n            }).actions.loadData(!switchTab)\n        },\n        saveAsView: async () => {\n            LemonDialog.openForm({\n                title: 'Save as view',\n                initialValues: { viewName: values.activeModelUri?.name || '' },\n                description: `View names can only contain letters, numbers, '_', or '$'. Spaces are not allowed.`,\n                content: (\n                    <LemonField name=\"viewName\">\n                        <LemonInput placeholder=\"Please enter the name of the view\" autoFocus />\n                    </LemonField>\n                ),\n                errors: {\n                    viewName: (name) =>\n                        !name\n                            ? 'You must enter a name'\n                            : !/^[A-Za-z_$][A-Za-z0-9_$]*$/.test(name)\n                            ? 'Name must be valid'\n                            : undefined,\n                },\n                onSubmit: async ({ viewName }) => {\n                    await asyncActions.saveAsViewSubmit(viewName)\n                },\n                shouldAwaitSubmit: true,\n            })\n        },\n        saveAsViewSubmit: async ({ name }) => {\n            const query: HogQLQuery = values.sourceQuery.source\n\n            const queryToSave = {\n                ...query,\n                query: values.queryInput,\n            }\n\n            const logic = dataNodeLogic({\n                key: dataNodeKey,\n                query: queryToSave,\n            })\n\n            const types = logic.values.response?.types ?? []\n            try {\n                await dataWarehouseViewsLogic.asyncActions.createDataWarehouseSavedQuery({\n                    name,\n                    query: queryToSave,\n                    types,\n                })\n                actions.updateState()\n            } catch (e) {\n                lemonToast.error('Failed to save view')\n            }\n        },\n        saveAsInsight: async () => {\n            LemonDialog.openForm({\n                title: 'Save as new insight',\n                initialValues: {\n                    name: '',\n                },\n                content: (\n                    <LemonField name=\"name\">\n                        <LemonInput data-attr=\"insight-name\" placeholder=\"Please enter the new name\" autoFocus />\n                    </LemonField>\n                ),\n                errors: {\n                    name: (name) => (!name ? 'You must enter a name' : undefined),\n                },\n                onSubmit: async ({ name }) => actions.saveAsInsightSubmit(name),\n            })\n        },\n        saveAsInsightSubmit: async ({ name }) => {\n            const insight = await insightsApi.create({\n                name,\n                query: values.sourceQuery,\n                saved: true,\n            })\n\n            lemonToast.info(`You're now viewing ${insight.name || insight.derived_name || name}`)\n\n            router.actions.push(urls.insightView(insight.short_id))\n        },\n        loadDataWarehouseSavedQueriesSuccess: ({ dataWarehouseSavedQueries }) => {\n            // keep tab views up to date\n            const newTabs = values.allTabs.map((tab) => ({\n                ...tab,\n                view: dataWarehouseSavedQueries.find((v) => v.id === tab.view?.id),\n            }))\n            actions.setTabs(newTabs)\n            actions.updateState()\n        },\n        deleteDataWarehouseSavedQuerySuccess: ({ payload: viewId }) => {\n            const tabToRemove = values.allTabs.find((tab) => tab.view?.id === viewId)\n            if (tabToRemove) {\n                actions._deleteTab(tabToRemove)\n            }\n            lemonToast.success('View deleted')\n        },\n        createDataWarehouseSavedQuerySuccess: ({ dataWarehouseSavedQueries, payload: view }) => {\n            const newView = view && dataWarehouseSavedQueries.find((v) => v.name === view.name)\n            if (newView) {\n                const newTabs = values.allTabs.map((tab) => ({\n                    ...tab,\n                    view: tab.uri.path === values.activeModelUri?.uri.path ? newView : tab.view,\n                }))\n                const newTab = newTabs.find((tab) => tab.uri.path === values.activeModelUri?.uri.path)\n                actions.setTabs(newTabs)\n                newTab && actions.selectTab(newTab)\n                actions.updateState()\n            }\n        },\n        updateDataWarehouseSavedQuerySuccess: () => {\n            lemonToast.success('View updated')\n        },\n    })),\n    subscriptions(({ props, actions, values }) => ({\n        activeModelUri: (activeModelUri) => {\n            if (props.monaco) {\n                const _model = props.monaco.editor.getModel(activeModelUri.uri)\n                const val = _model?.getValue()\n                actions.setQueryInput(val ?? '')\n                actions.runQuery(undefined, true)\n            }\n        },\n        allTabs: () => {\n            // keep selected tab up to date\n            const activeTab = values.allTabs.find((tab) => tab.uri.path === values.activeModelUri?.uri.path)\n            if (activeTab && activeTab.uri.path != values.activeModelUri?.uri.path) {\n                actions.selectTab(activeTab)\n            }\n        },\n    })),\n    selectors({\n        exportContext: [\n            (s) => [s.sourceQuery],\n            (sourceQuery) => {\n                // TODO: use active tab at some point\n                const filename = 'export'\n\n                return {\n                    ...queryExportContext(sourceQuery.source, undefined, undefined),\n                    filename,\n                } as ExportContext\n            },\n        ],\n        isEditingMaterializedView: [\n            (s) => [s.editingView],\n            (editingView) => {\n                return !!editingView?.status\n            },\n        ],\n    }),\n])\n", "import { LemonInput } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { LogicWrapper, useActions, useValues } from 'kea'\nimport { Spinner } from 'lib/lemon-ui/Spinner'\nimport React, { useRef, useState } from 'react'\nimport { useDebouncedCallback } from 'use-debounce'\n\nimport { navigation3000Logic } from '../navigationLogic'\nimport { SidebarLogic, SidebarNavbarItem } from '../types'\nimport { SidebarAccordion } from './SidebarAccordion'\nimport { SidebarList } from './SidebarList'\n\n/** A small delay that prevents us from making a search request on each key press. */\nconst SEARCH_DEBOUNCE_MS = 300\n\ninterface SidebarProps {\n    navbarItem: SidebarNavbarItem // Sidebar can only be rendered if there's an active sidebar navbar item\n    sidebarOverlay?: React.ReactNode\n    sidebarOverlayProps?: SidebarOverlayProps\n}\n\ninterface SidebarOverlayProps {\n    className?: string\n    isOpen?: boolean\n}\n\nexport function Sidebar({ navbarItem, sidebarOverlay, sidebarOverlayProps }: SidebarProps): JSX.Element {\n    const inputElementRef = useRef<HTMLInputElement>(null)\n\n    const {\n        sidebarWidth: width,\n        isSidebarShown: isShown,\n        isResizeInProgress,\n        sidebarOverslideDirection: overslideDirection,\n        isSearchShown,\n    } = useValues(navigation3000Logic({ inputElement: inputElementRef.current }))\n    const { beginResize } = useActions(navigation3000Logic({ inputElement: inputElementRef.current }))\n    const { contents } = useValues(navbarItem.logic)\n\n    return (\n        <div\n            className={clsx(\n                'Sidebar3000',\n                isResizeInProgress && 'Sidebar3000--resizing',\n                overslideDirection && `Sidebar3000--overslide-${overslideDirection}`\n            )}\n            aria-hidden={!isShown}\n            // eslint-disable-next-line react/forbid-dom-props\n            style={\n                {\n                    '--sidebar-width': `${isShown ? width : 0}px`,\n                } as React.CSSProperties\n            }\n        >\n            <div className=\"Sidebar3000__content\">\n                {navbarItem?.logic && isSearchShown && (\n                    <SidebarSearchBar activeSidebarLogic={navbarItem.logic} inputElementRef={inputElementRef} />\n                )}\n                <div className=\"Sidebar3000__lists\">\n                    {navbarItem?.logic && <SidebarContent activeSidebarLogic={navbarItem.logic} />}\n                </div>\n                {contents\n                    .filter(({ modalContent }) => modalContent)\n                    .map((category) => (\n                        <React.Fragment key={category.key}>{category.modalContent}</React.Fragment>\n                    ))}\n            </div>\n            <div\n                className=\"Sidebar3000__slider\"\n                onMouseDown={(e) => {\n                    if (e.button === 0) {\n                        beginResize()\n                    }\n                }}\n            />\n            {sidebarOverlay && (\n                <SidebarOverlay {...sidebarOverlayProps} isOpen={sidebarOverlayProps?.isOpen && isShown} width={width}>\n                    {sidebarOverlay}\n                </SidebarOverlay>\n            )}\n        </div>\n    )\n}\n\nfunction SidebarSearchBar({\n    activeSidebarLogic,\n    inputElementRef,\n}: {\n    activeSidebarLogic: LogicWrapper<SidebarLogic>\n    inputElementRef: React.RefObject<HTMLInputElement>\n}): JSX.Element {\n    const { searchTerm } = useValues(navigation3000Logic)\n    const { setSearchTerm, focusNextItem, setLastFocusedItemIndex } = useActions(navigation3000Logic)\n    const { contents, debounceSearch } = useValues(activeSidebarLogic)\n\n    const [localSearchTerm, setLocalSearchTerm] = useState(searchTerm)\n    const setSearchTermDebounced = useDebouncedCallback(\n        (value: string) => setSearchTerm(value),\n        debounceSearch ? SEARCH_DEBOUNCE_MS : undefined\n    )\n\n    const isLoading = contents.some((item) => item.loading)\n\n    return (\n        <div className=\"h-10\">\n            <LemonInput\n                inputRef={inputElementRef}\n                type=\"search\"\n                value={localSearchTerm}\n                onChange={(value) => {\n                    setLocalSearchTerm(value)\n                    setSearchTermDebounced(value)\n                }}\n                size=\"small\"\n                // Show a loading spinner when search term is being debounced or just loading data\n                prefix={\n                    (localSearchTerm || searchTerm) && (localSearchTerm !== searchTerm || isLoading) ? (\n                        <Spinner textColored />\n                    ) : null\n                }\n                placeholder=\"Search...\"\n                onKeyDown={(e) => {\n                    if (e.key === 'ArrowDown') {\n                        focusNextItem()\n                        e.preventDefault()\n                    }\n                }}\n                onFocus={() => {\n                    setLastFocusedItemIndex(-1)\n                }}\n                autoFocus\n            />\n        </div>\n    )\n}\n\nfunction SidebarContent({\n    activeSidebarLogic,\n}: {\n    activeSidebarLogic: LogicWrapper<SidebarLogic>\n}): JSX.Element | null {\n    const { contents } = useValues(activeSidebarLogic)\n\n    return contents.length !== 1 ? (\n        <>\n            {contents.map((accordion) => (\n                <SidebarAccordion key={accordion.key} category={accordion} />\n            ))}\n        </>\n    ) : (\n        <SidebarList category={contents[0]} />\n    )\n}\n\nfunction SidebarOverlay({\n    className,\n    isOpen = false,\n    children,\n    width,\n}: SidebarOverlayProps & { children: React.ReactNode; width: number }): JSX.Element | null {\n    if (!isOpen) {\n        return null\n    }\n\n    return (\n        <div\n            className={clsx('absolute top-0 left-0 h-full bg-primary z-10', className)}\n            // eslint-disable-next-line react/forbid-dom-props\n            style={{ width: `${width}px` }}\n        >\n            {children}\n        </div>\n    )\n}\n", "import { useActions, useValues } from 'kea'\nimport { IconChevronRight } from 'lib/lemon-ui/icons'\nimport { Spinner } from 'lib/lemon-ui/Spinner'\nimport { capitalizeFirstLetter } from 'lib/utils'\n\nimport { navigation3000Logic } from '../navigationLogic'\nimport { SidebarCategory } from '../types'\nimport { NewItemButton } from './NewItemButton'\nimport { SidebarList } from './SidebarList'\n\ninterface SidebarAccordionProps {\n    category: SidebarCategory\n}\n\nexport function SidebarAccordion({ category }: SidebarAccordionProps): JSX.Element {\n    const { accordionCollapseMapping } = useValues(navigation3000Logic)\n    const { toggleAccordion } = useActions(navigation3000Logic)\n\n    const { key, items, loading } = category\n\n    const isEmpty = items.length === 0\n    const isEmptyDefinitively = !loading && isEmpty\n    const isExpanded = !accordionCollapseMapping[key] && !isEmpty\n\n    return (\n        <section className=\"Accordion\" aria-busy={loading} aria-disabled={isEmpty} aria-expanded={isExpanded}>\n            <div\n                className=\"Accordion__header\"\n                onClick={isExpanded || items.length > 0 ? () => toggleAccordion(key) : undefined}\n            >\n                {loading ? <Spinner /> : <IconChevronRight />}\n                <h4>\n                    {capitalizeFirstLetter(pluralizeCategory(category.noun))}\n                    {isEmptyDefinitively && (\n                        <>\n                            {' '}\n                            <i>(empty)</i>\n                        </>\n                    )}\n                </h4>\n                <NewItemButton category={category} />\n            </div>\n            {isExpanded && <SidebarList category={category} />}\n        </section>\n    )\n}\n\nexport function singularizeCategory(noun: SidebarCategory['noun']): string {\n    return Array.isArray(noun) ? noun[0] : noun\n}\n\nexport function pluralizeCategory(noun: SidebarCategory['noun']): string {\n    return Array.isArray(noun) ? noun[1] : `${noun}s`\n}\n", "import { IconPlus } from '@posthog/icons'\nimport { LemonButton } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\n\nimport { navigation3000Logic } from '../navigationLogic'\nimport { SidebarCategory } from '../types'\nimport { singularizeCategory } from './SidebarAccordion'\n\nexport function NewItemButton({ category }: { category: SidebarCategory }): JSX.Element | null {\n    const { newItemCategory } = useValues(navigation3000Logic)\n    const { initiateNewItemInCategory } = useActions(navigation3000Logic)\n\n    if (!category.onAdd) {\n        return null\n    }\n    return (\n        <LemonButton\n            icon={<IconPlus />}\n            size=\"small\"\n            noPadding\n            to={typeof category.onAdd === 'string' ? category.onAdd : undefined}\n            onClick={(e) => {\n                if (typeof category.onAdd === 'function') {\n                    initiateNewItemInCategory(category.key)\n                }\n                e.stopPropagation()\n            }}\n            active={newItemCategory === category.key}\n            tooltip={`New ${singularizeCategory(category.noun)}`}\n            tooltipPlacement=\"bottom\"\n        />\n    )\n}\n", "import { IconCheckCircle, IconEllipsis, IconX } from '@posthog/icons'\nimport { LemonButton, LemonTag, lemonToast } from '@posthog/lemon-ui'\nimport { captureException } from '@sentry/react'\nimport clsx from 'clsx'\nimport { useActions, useAsyncActions, useValues } from 'kea'\nimport { TZLabel } from 'lib/components/TZLabel'\nimport { isDayjs } from 'lib/dayjs'\nimport { IconChevronRight } from 'lib/lemon-ui/icons/icons'\nimport { LemonMenu } from 'lib/lemon-ui/LemonMenu'\nimport { LemonSkeleton } from 'lib/lemon-ui/LemonSkeleton'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { capitalizeFirstLetter } from 'lib/utils'\nimport React, { useEffect, useMemo, useRef, useState } from 'react'\nimport { AutoSizer } from 'react-virtualized/dist/es/AutoSizer'\nimport { InfiniteLoader } from 'react-virtualized/dist/es/InfiniteLoader'\nimport { List, ListProps } from 'react-virtualized/dist/es/List'\n\nimport SearchHighlight from '~/layout/navigation-3000/components/SearchHighlight'\n\nimport { ITEM_KEY_PART_SEPARATOR, navigation3000Logic } from '../navigationLogic'\nimport {\n    BasicListItem,\n    ButtonListItem,\n    ExtendedListItem,\n    ExtraListItemContext,\n    ListItemAccordion,\n    SidebarCategory,\n    SidebarCategoryBase,\n    TentativeListItem,\n} from '../types'\nimport { KeyboardShortcut } from './KeyboardShortcut'\nimport { pluralizeCategory } from './SidebarAccordion'\n\nconst isListItemAccordion = (\n    category: BasicListItem | ExtendedListItem | TentativeListItem | ButtonListItem | ListItemAccordion\n): category is ListItemAccordion => {\n    return 'items' in category\n}\n\nconst isSidebarCategory = (category: SidebarCategory | SidebarCategoryBase): category is SidebarCategory => {\n    return 'loading' in category\n}\n\nexport function SidebarList({ category }: { category: SidebarCategory | ListItemAccordion }): JSX.Element {\n    const listRef = useRef<List | null>(null)\n    const {\n        isListItemVisible,\n        listItemAccordionCollapseMapping,\n        normalizedActiveListItemKey,\n        sidebarWidth,\n        newItemInlineCategory,\n        savingNewItem,\n    } = useValues(navigation3000Logic)\n    const { cancelNewItem } = useActions(navigation3000Logic)\n    const { saveNewItem } = useAsyncActions(navigation3000Logic)\n\n    const emptyStateSkeletonCount = useMemo(() => 4 + Math.floor(Math.random() * 4), [])\n\n    const { items: _items } = category\n\n    const listItems = useMemo(() => {\n        const allItems: (BasicListItem | ExtendedListItem | ListItemAccordion)[] = []\n\n        const flatten = (\n            items: BasicListItem[] | ExtendedListItem[] | ListItemAccordion[],\n            depth: number = 1,\n            parentKey: string | number | string[] | null = null\n        ): void => {\n            items.forEach((item) => {\n                allItems.push({\n                    ...item,\n                    depth: depth,\n                    key: parentKey\n                        ? [\n                              Array.isArray(parentKey) ? parentKey.join(ITEM_KEY_PART_SEPARATOR) : parentKey,\n                              item.key,\n                          ].join(ITEM_KEY_PART_SEPARATOR)\n                        : item.key.toString(),\n                })\n                if (isListItemAccordion(item)) {\n                    flatten(\n                        item.items,\n                        depth + 1,\n                        parentKey ? `${parentKey}${ITEM_KEY_PART_SEPARATOR}${item.key}` : item.key\n                    )\n                }\n            })\n        }\n\n        flatten(_items, 1, category.key)\n\n        return allItems.filter((item) =>\n            isListItemVisible(Array.isArray(item.key) ? item.key.join(ITEM_KEY_PART_SEPARATOR) : item.key.toString())\n        )\n    }, [_items, isListItemVisible])\n\n    useEffect(() => {\n        if (listRef.current) {\n            listRef.current.recomputeRowHeights()\n            listRef.current.forceUpdateGrid()\n        }\n    }, [listItemAccordionCollapseMapping, listItems])\n\n    const remote = isSidebarCategory(category) ? category.remote : undefined\n    const loading = isSidebarCategory(category) ? category.loading : false\n    const validateName = isSidebarCategory(category) ? category.validateName : undefined\n\n    const addingNewItem = newItemInlineCategory === category.key\n    const firstItem = listItems.find(Boolean)\n    const usingExtendedItemFormat = !!firstItem && 'summary' in firstItem\n\n    const listProps = {\n        className: 'SidebarList',\n        width: sidebarWidth,\n        rowHeight: usingExtendedItemFormat ? 46 : 32,\n        rowRenderer: ({ index: rawIndex, style }) => {\n            const index = addingNewItem ? rawIndex - 1 : rawIndex // Adjusted for tentative item\n            if (index === -1) {\n                return (\n                    <SidebarListItem\n                        key={index}\n                        item={\n                            {\n                                key: '__tentative__',\n                                onSave: async (newName) => saveNewItem(newName),\n                                onCancel: cancelNewItem,\n                                loading: savingNewItem,\n                            } as TentativeListItem\n                        }\n                        validateName={validateName}\n                        style={style}\n                    />\n                )\n            }\n\n            const item = listItems[index]\n            if (!item) {\n                return <SidebarListItemSkeleton key={index} style={style} />\n            }\n\n            const normalizedItemKey = Array.isArray(item.key)\n                ? item.key.map((keyPart) => `${category.key}${ITEM_KEY_PART_SEPARATOR}${keyPart}`)\n                : `${category.key}${ITEM_KEY_PART_SEPARATOR}${item.key}`\n\n            let active: boolean\n            if (Array.isArray(normalizedItemKey)) {\n                active =\n                    typeof normalizedActiveListItemKey === 'string' &&\n                    normalizedItemKey.includes(normalizedActiveListItemKey)\n            } else {\n                active = normalizedItemKey === normalizedActiveListItemKey\n            }\n            return <SidebarListItem key={index} item={item} validateName={validateName} active={active} style={style} />\n        },\n        overscanRowCount: 20,\n        tabIndex: null,\n    } as ListProps\n    return (\n        // The div is for AutoSizer to work\n        <div className=\"flex-1\" aria-busy={loading}>\n            <AutoSizer disableWidth>\n                {({ height }) =>\n                    'loading' in category && category.items.length === 0 ? (\n                        Array(emptyStateSkeletonCount)\n                            .fill(null)\n                            .map((_, index) => <SidebarListItemSkeleton key={index} style={{ height: 32 }} />)\n                    ) : remote ? (\n                        <InfiniteLoader\n                            isRowLoaded={({ index }) => remote.isItemLoaded(index)}\n                            loadMoreRows={({ startIndex, stopIndex }) => remote.loadMoreItems(startIndex, stopIndex)}\n                            rowCount={remote.itemCount}\n                            minimumBatchSize={remote.minimumBatchSize || 100} // Sync default with the REST_FRAMEWORK PAGE_SIZE setting\n                        >\n                            {({ onRowsRendered, registerChild }) => (\n                                <List\n                                    {...listProps}\n                                    ref={registerChild}\n                                    height={height}\n                                    rowCount={remote.itemCount + Number(addingNewItem)}\n                                    onRowsRendered={onRowsRendered}\n                                />\n                            )}\n                        </InfiniteLoader>\n                    ) : (\n                        <List\n                            ref={listRef}\n                            {...listProps}\n                            height={height}\n                            rowCount={listItems.length + Number(addingNewItem)}\n                        />\n                    )\n                }\n            </AutoSizer>\n        </div>\n    )\n}\n\ninterface SidebarListItemProps {\n    item: BasicListItem | ExtendedListItem | TentativeListItem | ButtonListItem | ListItemAccordion\n    validateName?: SidebarCategory['validateName']\n    active?: boolean\n    style: React.CSSProperties\n}\n\nfunction isItemTentative(item: SidebarListItemProps['item']): item is TentativeListItem {\n    return 'onSave' in item\n}\n\nfunction isItemClickable(item: SidebarListItemProps['item']): item is ButtonListItem {\n    return 'onClick' in item\n}\n\nfunction SidebarListItem({ item, validateName, active, style }: SidebarListItemProps): JSX.Element {\n    const [isMenuOpen, setIsMenuOpen] = useState(false)\n    const [newName, setNewName] = useState<null | string>(null)\n    const [newNameValidationError, setNewNameValidationError] = useState<null | string>(null)\n    const [isSavingName, setIsSavingName] = useState(false)\n\n    const ref = useRef<HTMLElement | null>(null)\n    item.ref = ref // Inject ref for keyboard navigation\n\n    const isSaving = isItemTentative(item) ? item.loading : isSavingName\n\n    const menuItems = useMemo(() => {\n        if (isItemTentative(item) || isListItemAccordion(item)) {\n            return undefined\n        }\n        if (item.onRename) {\n            if (typeof item.menuItems !== 'function') {\n                throw new Error('menuItems must be a function for renamable items so that the \"Rename\" item is shown')\n            }\n            return item.menuItems(() => setNewName(item.name))\n        }\n        return typeof item.menuItems === 'function'\n            ? item.menuItems(() => console.error('Cannot rename item without onRename handler'))\n            : item.menuItems\n    }, [item, setNewName])\n\n    const cancel = (): void => {\n        if (isItemTentative(item)) {\n            item.onCancel()\n        }\n        setNewName(null)\n        setNewNameValidationError(null)\n    }\n    const validate = (name: string): boolean => {\n        if (validateName) {\n            const validation = validateName(name)\n            setNewNameValidationError(validation || null)\n            return !validation\n        }\n        return true\n    }\n    const save = isItemTentative(item)\n        ? async (name: string): Promise<void> => {\n              if (!validate(name)) {\n                  return\n              }\n              await item.onSave(name)\n          }\n        : !isListItemAccordion(item) && item.onRename\n        ? async (newName: string): Promise<void> => {\n              if (!newName || newName === item.name) {\n                  return cancel() // No change to be saved\n              }\n              if (!validate(newName)) {\n                  return\n              }\n              setIsSavingName(true)\n              try {\n                  await item.onRename?.(newName)\n              } catch (error) {\n                  captureException(error)\n                  lemonToast.error('Could not rename item')\n              } finally {\n                  setIsSavingName(false)\n                  cancel()\n              }\n          }\n        : null\n\n    useEffect(() => {\n        // Add double-click handler for renaming\n        if (!isItemTentative(item) && !isListItemAccordion(item) && save && newName === null) {\n            const onDoubleClick = (): void => {\n                setNewName(item.name)\n            }\n            const element = ref.current\n            if (element) {\n                element.addEventListener('dblclick', onDoubleClick)\n                return () => {\n                    element.removeEventListener('dblclick', onDoubleClick)\n                }\n            }\n        }\n    }) // Intentionally run on every render so that ref value changes are picked up\n\n    let content: JSX.Element\n    if (isListItemAccordion(item)) {\n        content = <SidebarListItemAccordion category={item} />\n    } else if (isItemClickable(item)) {\n        content = (\n            <div\n                className=\"SidebarListItem__button\"\n                onClick={item.onClick}\n                // eslint-disable-next-line react/forbid-dom-props\n                style={{ '--depth': item.depth } as React.CSSProperties}\n            >\n                {item.icon && <div className=\"SidebarListItem__icon\">{item.icon}</div>}\n                <SearchHighlight string={item.name} substring={navigation3000Logic.values.searchTerm} />\n            </div>\n        )\n    } else if (!save || (!isItemTentative(item) && newName === null)) {\n        if (isItemTentative(item)) {\n            throw new Error('Tentative items should not be rendered in read mode')\n        }\n        let formattedName = item.searchMatch?.nameHighlightRanges?.length ? (\n            <SearchHighlight string={item.name} substring={navigation3000Logic.values.searchTerm} />\n        ) : (\n            item.name\n        )\n        if (!item.url || item.isNamePlaceholder) {\n            formattedName = <i>{formattedName}</i>\n        }\n        if (item.tag) {\n            formattedName = (\n                <>\n                    {formattedName}\n                    <LemonTag type={item.tag.status} size=\"small\" className=\"ml-2\">\n                        {item.tag.text}\n                    </LemonTag>\n                </>\n            )\n        }\n        content = (\n            <Link\n                ref={ref as React.RefObject<HTMLAnchorElement>}\n                to={item.url || undefined}\n                className=\"SidebarListItem__link\"\n                onKeyDown={(e) => {\n                    if (e.key === 'ArrowDown') {\n                        if (e.metaKey || e.ctrlKey) {\n                            ;(e.target as HTMLElement).click()\n                        } else {\n                            navigation3000Logic.actions.focusNextItem()\n                            e.preventDefault()\n                        }\n                    } else if (e.key === 'ArrowUp') {\n                        navigation3000Logic.actions.focusPreviousItem()\n                        e.preventDefault()\n                    } else if (save && e.key === 'Enter') {\n                        setNewName(item.name)\n                        e.preventDefault()\n                    }\n                }}\n                onFocus={() => {\n                    navigation3000Logic.actions.setLastFocusedItemByKey(\n                        Array.isArray(item.key) ? item.key[0] : item.key\n                    )\n                }}\n            >\n                {'summary' in item ? (\n                    <>\n                        <div className=\"flex space-between gap-1\">\n                            <h5 className=\"flex-1\">{formattedName}</h5>\n                            <div>\n                                <ExtraContext data={item.extraContextTop} />\n                            </div>\n                        </div>\n                        <div className=\"flex space-between gap-1\">\n                            <div className=\"flex-1 overflow-hidden text-ellipsis\">\n                                {item.searchMatch?.matchingFields\n                                    ? `Matching fields: ${item.searchMatch.matchingFields\n                                          .map((field) => field.replace(/_/g, ' '))\n                                          .join(', ')}`\n                                    : item.summary}\n                            </div>\n                            <div>\n                                <ExtraContext data={item.extraContextBottom} />\n                            </div>\n                        </div>\n                    </>\n                ) : (\n                    <h5>{formattedName}</h5>\n                )}\n            </Link>\n        )\n    } else {\n        content = (\n            <>\n                <div className=\"SidebarListItem__rename\" ref={ref as React.RefObject<HTMLDivElement>}>\n                    <input\n                        value={newName || ''}\n                        onChange={(e) => setNewName(e.target.value)}\n                        onKeyDown={(e) => {\n                            if (e.key === 'ArrowDown') {\n                                navigation3000Logic.actions.focusNextItem()\n                                e.preventDefault()\n                            } else if (e.key === 'ArrowUp') {\n                                navigation3000Logic.actions.focusPreviousItem()\n                                e.preventDefault()\n                            } else if (e.key === 'Enter') {\n                                void save(newName || '').then(() => {\n                                    // In the keyboard nav experience, we need to refocus the item once it's a link again\n                                    setTimeout(() => ref.current?.focus(), 0)\n                                })\n                                e.preventDefault()\n                            } else if (e.key === 'Escape') {\n                                cancel()\n                                // In the keyboard nav experience, we need to refocus the item once it's a link again\n                                setTimeout(() => ref.current?.focus(), 0)\n                                e.preventDefault()\n                            }\n                        }}\n                        onFocus={(e) => {\n                            navigation3000Logic.actions.setLastFocusedItemByKey(\n                                Array.isArray(item.key) ? item.key[0] : item.key\n                            )\n                            ;(e.target as HTMLInputElement).select()\n                        }}\n                        onBlur={(e) => {\n                            if (e.relatedTarget?.ariaLabel === 'Save name') {\n                                void save(newName || '')\n                            } else {\n                                cancel()\n                            }\n                        }}\n                        placeholder={isItemTentative(item) ? 'Adding something new\u2026' : `Renaming ${item.name}\u2026`}\n                        disabled={isSaving}\n                        autoFocus\n                    />\n                </div>\n                {newNameValidationError && <div className=\"SidebarListItem__error\">{newNameValidationError}</div>}\n            </>\n        )\n    }\n\n    return (\n        <li\n            id={`sidebar-${item.key}`}\n            title={!isItemTentative(item) && !isListItemAccordion(item) ? item.name : 'New item'}\n            className={clsx(\n                'SidebarListItem',\n                'menuItems' in item && item.menuItems?.length && 'SidebarListItem--has-menu',\n                isMenuOpen && 'SidebarListItem--is-menu-open',\n                (isItemTentative(item) || newName !== null) && 'SidebarListItem--is-renaming',\n                'marker' in item && !!item.marker && `SidebarListItem--marker-${item.marker.type}`,\n                'marker' in item && !!item.marker?.status && `SidebarListItem--marker-status-${item.marker.status}`,\n                'summary' in item && 'SidebarListItem--extended'\n            )}\n            aria-disabled={!isItemTentative(item) && !isListItemAccordion(item) && !item.url}\n            aria-current={active ? 'page' : undefined}\n            aria-invalid={!!newNameValidationError}\n            style={style} // eslint-disable-line react/forbid-dom-props\n        >\n            {content}\n            {isItemTentative(item) || newName !== null ? (\n                <div className=\"SidebarListItem__actions\">\n                    {!isSaving && (\n                        <LemonButton // This has no onClick, as the action is actually handled in the input's onBlur\n                            size=\"small\"\n                            noPadding\n                            icon={<IconX />}\n                            tooltip={\n                                <>\n                                    Cancel <KeyboardShortcut escape />\n                                </>\n                            }\n                            aria-label=\"Cancel\"\n                        />\n                    )}\n                    <LemonButton // This has no onClick, as the action is actually handled in the input's onBlur\n                        size=\"small\"\n                        noPadding\n                        icon={<IconCheckCircle />}\n                        tooltip={\n                            !isSaving ? (\n                                <>\n                                    Save name <KeyboardShortcut enter />\n                                </>\n                            ) : null\n                        }\n                        loading={isSaving}\n                        aria-label=\"Save name\"\n                    />\n                </div>\n            ) : (\n                !!menuItems?.length && (\n                    <LemonMenu items={menuItems} onVisibilityChange={setIsMenuOpen}>\n                        <div className=\"SidebarListItem__actions\">\n                            <LemonButton size=\"small\" noPadding icon={<IconEllipsis />} />\n                        </div>\n                    </LemonMenu>\n                )\n            )}\n        </li>\n    )\n}\n\n/** Smart rendering of list item extra context. */\nfunction ExtraContext({ data }: { data: ExtraListItemContext }): JSX.Element {\n    return isDayjs(data) ? <TZLabel time={data} /> : <>{data}</>\n}\n\nfunction SidebarListItemSkeleton({ style }: { style: React.CSSProperties }): JSX.Element {\n    return (\n        <li\n            className=\"SidebarListItem SidebarListItem__link\"\n            style={style} // eslint-disable-line react/forbid-dom-props\n        >\n            <LemonSkeleton />\n        </li>\n    )\n}\n\nfunction SidebarListItemAccordion({ category }: { category: ListItemAccordion }): JSX.Element {\n    const { listItemAccordionCollapseMapping } = useValues(navigation3000Logic)\n    const { toggleListItemAccordion } = useActions(navigation3000Logic)\n\n    const { key, items } = category\n\n    const isEmpty = items.length === 0\n    const keyString = Array.isArray(key) ? key.join(ITEM_KEY_PART_SEPARATOR) : key.toString()\n    const isExpanded = !(keyString in listItemAccordionCollapseMapping) || !listItemAccordionCollapseMapping[keyString]\n\n    return (\n        <div className=\"SidebarListItemAccordion\" role=\"region\" aria-expanded={isExpanded}>\n            <div\n                id={`sidebar-list-item-accordion-${keyString}`}\n                className=\"SidebarListItemAccordion__header\"\n                role=\"button\"\n                aria-expanded={isExpanded}\n                // eslint-disable-next-line react/forbid-dom-props\n                style={{ '--depth': category.depth } as React.CSSProperties}\n                onClick={isExpanded || items.length > 0 ? () => toggleListItemAccordion(keyString) : undefined}\n            >\n                <IconChevronRight />\n                <h4>\n                    {capitalizeFirstLetter(pluralizeCategory(category.noun))}\n                    {isEmpty && (\n                        <>\n                            {' '}\n                            <i>(empty)</i>\n                        </>\n                    )}\n                </h4>\n            </div>\n        </div>\n    )\n}\n", "import InfiniteLoader from './InfiniteLoader';\nexport default InfiniteLoader;\nexport { InfiniteLoader };", "import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport createCallbackMemoizer from '../utils/createCallbackMemoizer';\n/**\n * Higher-order component that manages lazy-loading for \"infinite\" data.\n * This component decorates a virtual component and just-in-time prefetches rows as a user scrolls.\n * It is intended as a convenience component; fork it if you'd like finer-grained control over data-loading.\n */\n\nvar InfiniteLoader =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(InfiniteLoader, _React$PureComponent);\n\n  function InfiniteLoader(props, context) {\n    var _this;\n\n    _classCallCheck(this, InfiniteLoader);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InfiniteLoader).call(this, props, context));\n    _this._loadMoreRowsMemoizer = createCallbackMemoizer();\n    _this._onRowsRendered = _this._onRowsRendered.bind(_assertThisInitialized(_this));\n    _this._registerChild = _this._registerChild.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(InfiniteLoader, [{\n    key: \"resetLoadMoreRowsCache\",\n    value: function resetLoadMoreRowsCache(autoReload) {\n      this._loadMoreRowsMemoizer = createCallbackMemoizer();\n\n      if (autoReload) {\n        this._doStuff(this._lastRenderedStartIndex, this._lastRenderedStopIndex);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var children = this.props.children;\n      return children({\n        onRowsRendered: this._onRowsRendered,\n        registerChild: this._registerChild\n      });\n    }\n  }, {\n    key: \"_loadUnloadedRanges\",\n    value: function _loadUnloadedRanges(unloadedRanges) {\n      var _this2 = this;\n\n      var loadMoreRows = this.props.loadMoreRows;\n      unloadedRanges.forEach(function (unloadedRange) {\n        var promise = loadMoreRows(unloadedRange);\n\n        if (promise) {\n          promise.then(function () {\n            // Refresh the visible rows if any of them have just been loaded.\n            // Otherwise they will remain in their unloaded visual state.\n            if (isRangeVisible({\n              lastRenderedStartIndex: _this2._lastRenderedStartIndex,\n              lastRenderedStopIndex: _this2._lastRenderedStopIndex,\n              startIndex: unloadedRange.startIndex,\n              stopIndex: unloadedRange.stopIndex\n            })) {\n              if (_this2._registeredChild) {\n                forceUpdateReactVirtualizedComponent(_this2._registeredChild, _this2._lastRenderedStartIndex);\n              }\n            }\n          });\n        }\n      });\n    }\n  }, {\n    key: \"_onRowsRendered\",\n    value: function _onRowsRendered(_ref) {\n      var startIndex = _ref.startIndex,\n          stopIndex = _ref.stopIndex;\n      this._lastRenderedStartIndex = startIndex;\n      this._lastRenderedStopIndex = stopIndex;\n\n      this._doStuff(startIndex, stopIndex);\n    }\n  }, {\n    key: \"_doStuff\",\n    value: function _doStuff(startIndex, stopIndex) {\n      var _ref2,\n          _this3 = this;\n\n      var _this$props = this.props,\n          isRowLoaded = _this$props.isRowLoaded,\n          minimumBatchSize = _this$props.minimumBatchSize,\n          rowCount = _this$props.rowCount,\n          threshold = _this$props.threshold;\n      var unloadedRanges = scanForUnloadedRanges({\n        isRowLoaded: isRowLoaded,\n        minimumBatchSize: minimumBatchSize,\n        rowCount: rowCount,\n        startIndex: Math.max(0, startIndex - threshold),\n        stopIndex: Math.min(rowCount - 1, stopIndex + threshold)\n      }); // For memoize comparison\n\n      var squashedUnloadedRanges = (_ref2 = []).concat.apply(_ref2, _toConsumableArray(unloadedRanges.map(function (_ref3) {\n        var startIndex = _ref3.startIndex,\n            stopIndex = _ref3.stopIndex;\n        return [startIndex, stopIndex];\n      })));\n\n      this._loadMoreRowsMemoizer({\n        callback: function callback() {\n          _this3._loadUnloadedRanges(unloadedRanges);\n        },\n        indices: {\n          squashedUnloadedRanges: squashedUnloadedRanges\n        }\n      });\n    }\n  }, {\n    key: \"_registerChild\",\n    value: function _registerChild(registeredChild) {\n      this._registeredChild = registeredChild;\n    }\n  }]);\n\n  return InfiniteLoader;\n}(React.PureComponent);\n/**\n * Determines if the specified start/stop range is visible based on the most recently rendered range.\n */\n\n\n_defineProperty(InfiniteLoader, \"defaultProps\", {\n  minimumBatchSize: 10,\n  rowCount: 0,\n  threshold: 15\n});\n\nexport { InfiniteLoader as default };\nInfiniteLoader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * Function responsible for rendering a virtualized component.\n   * This function should implement the following signature:\n   * ({ onRowsRendered, registerChild }) => PropTypes.element\n   *\n   * The specified :onRowsRendered function should be passed through to the child's :onRowsRendered property.\n   * The :registerChild callback should be set as the virtualized component's :ref.\n   */\n  children: PropTypes.func.isRequired,\n\n  /**\n   * Function responsible for tracking the loaded state of each row.\n   * It should implement the following signature: ({ index: number }): boolean\n   */\n  isRowLoaded: PropTypes.func.isRequired,\n\n  /**\n   * Callback to be invoked when more rows must be loaded.\n   * It should implement the following signature: ({ startIndex, stopIndex }): Promise\n   * The returned Promise should be resolved once row data has finished loading.\n   * It will be used to determine when to refresh the list with the newly-loaded data.\n   * This callback may be called multiple times in reaction to a single scroll event.\n   */\n  loadMoreRows: PropTypes.func.isRequired,\n\n  /**\n   * Minimum number of rows to be loaded at a time.\n   * This property can be used to batch requests to reduce HTTP requests.\n   */\n  minimumBatchSize: PropTypes.number.isRequired,\n\n  /**\n   * Number of rows in list; can be arbitrary high number if actual number is unknown.\n   */\n  rowCount: PropTypes.number.isRequired,\n\n  /**\n   * Threshold at which to pre-fetch data.\n   * A threshold X means that data will start loading when a user scrolls within X rows.\n   * This value defaults to 15.\n   */\n  threshold: PropTypes.number.isRequired\n} : {};\nexport function isRangeVisible(_ref4) {\n  var lastRenderedStartIndex = _ref4.lastRenderedStartIndex,\n      lastRenderedStopIndex = _ref4.lastRenderedStopIndex,\n      startIndex = _ref4.startIndex,\n      stopIndex = _ref4.stopIndex;\n  return !(startIndex > lastRenderedStopIndex || stopIndex < lastRenderedStartIndex);\n}\n/**\n * Returns all of the ranges within a larger range that contain unloaded rows.\n */\n\nexport function scanForUnloadedRanges(_ref5) {\n  var isRowLoaded = _ref5.isRowLoaded,\n      minimumBatchSize = _ref5.minimumBatchSize,\n      rowCount = _ref5.rowCount,\n      startIndex = _ref5.startIndex,\n      stopIndex = _ref5.stopIndex;\n  var unloadedRanges = [];\n  var rangeStartIndex = null;\n  var rangeStopIndex = null;\n\n  for (var index = startIndex; index <= stopIndex; index++) {\n    var loaded = isRowLoaded({\n      index: index\n    });\n\n    if (!loaded) {\n      rangeStopIndex = index;\n\n      if (rangeStartIndex === null) {\n        rangeStartIndex = index;\n      }\n    } else if (rangeStopIndex !== null) {\n      unloadedRanges.push({\n        startIndex: rangeStartIndex,\n        stopIndex: rangeStopIndex\n      });\n      rangeStartIndex = rangeStopIndex = null;\n    }\n  } // If :rangeStopIndex is not null it means we haven't ran out of unloaded rows.\n  // Scan forward to try filling our :minimumBatchSize.\n\n\n  if (rangeStopIndex !== null) {\n    var potentialStopIndex = Math.min(Math.max(rangeStopIndex, rangeStartIndex + minimumBatchSize - 1), rowCount - 1);\n\n    for (var _index = rangeStopIndex + 1; _index <= potentialStopIndex; _index++) {\n      if (!isRowLoaded({\n        index: _index\n      })) {\n        rangeStopIndex = _index;\n      } else {\n        break;\n      }\n    }\n\n    unloadedRanges.push({\n      startIndex: rangeStartIndex,\n      stopIndex: rangeStopIndex\n    });\n  } // Check to see if our first range ended prematurely.\n  // In this case we should scan backwards to try filling our :minimumBatchSize.\n\n\n  if (unloadedRanges.length) {\n    var firstUnloadedRange = unloadedRanges[0];\n\n    while (firstUnloadedRange.stopIndex - firstUnloadedRange.startIndex + 1 < minimumBatchSize && firstUnloadedRange.startIndex > 0) {\n      var _index2 = firstUnloadedRange.startIndex - 1;\n\n      if (!isRowLoaded({\n        index: _index2\n      })) {\n        firstUnloadedRange.startIndex = _index2;\n      } else {\n        break;\n      }\n    }\n  }\n\n  return unloadedRanges;\n}\n/**\n * Since RV components use shallowCompare we need to force a render (even though props haven't changed).\n * However InfiniteLoader may wrap a Grid or it may wrap a Table or List.\n * In the first case the built-in React forceUpdate() method is sufficient to force a re-render,\n * But in the latter cases we need to use the RV-specific forceUpdateGrid() method.\n * Else the inner Grid will not be re-rendered and visuals may be stale.\n *\n * Additionally, while a Grid is scrolling the cells can be cached,\n * So it's important to invalidate that cache by recalculating sizes\n * before forcing a rerender.\n */\n\nexport function forceUpdateReactVirtualizedComponent(component) {\n  var currentIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var recomputeSize = typeof component.recomputeGridSize === 'function' ? component.recomputeGridSize : component.recomputeRowHeights;\n\n  if (recomputeSize) {\n    recomputeSize.call(component, currentIndex);\n  } else {\n    component.forceUpdate();\n  }\n}", "interface Props {\n    string: string\n    substring: string\n    className?: string\n}\n\n/**\n * Highlight a substring within a string (case-insensitive)\n * @param string - the aggregate string to search within (e.g. \"Hello, world!\")\n * @param substring - the substring to search for (e.g. \"world\")\n * @param className - additional classes to apply to the component\n */\nexport default function SearchHighlight({ string, substring, className }: Props): JSX.Element {\n    const parts = string.split(new RegExp(`(${substring})`, 'gi'))\n    return (\n        <div className={`truncate ${className}`}>\n            {parts.map((part, index) => (\n                <span\n                    key={index}\n                    className={`text-xs ${\n                        part.toLowerCase() === substring.toLowerCase() ? 'bg-accent-primary bg-opacity-60' : ''\n                    }`}\n                >\n                    {part}\n                </span>\n            ))}\n        </div>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "isDataWarehouseTable", "table", "isPostHogTable", "isViewTable", "isJoined", "field", "editorSceneLogic", "isOpen", "schema", "dataWarehouseJoinsLogic", "databaseTableListLogic", "dataWarehouseViewsLogic", "viewLinkLogic", "_", "actions", "s", "selectedSchema", "joins", "posthogTablesMap", "dataWarehouseTablesMap", "dataWarehouseSavedQueryMapById", "joinsByFieldName", "join", "acc", "menuItems", "deleteWithUndo", "api_default", "e", "lemonToast", "column", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "import_kea_subscriptions", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "import_kea_subscriptions", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_subscriptions", "import_jsx_runtime", "fuse", "Fuse", "dashboardsSidebarLogic", "dashboardsModel", "sceneLogic", "duplicateDashboardLogic", "deleteDashboardLogic", "newDashboardLogic", "actions", "s", "relevantDashboards", "dashboardsLoading", "NewDashboardModal", "dashboard", "matches", "urls", "match", "initiateRename", "dashboardLogic", "newName", "activeScene", "sceneParams", "navigation3000Logic", "pinSortedDashboards", "searchTerm", "result", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "import_kea_subscriptions", "init_dirname", "init_buffer", "init_process", "findSearchTermInItemName", "name", "searchTerm", "ranges", "workingName", "workingSearchTerm", "index", "dataManagementSidebarLogic", "sceneLogic", "navigation3000Logic", "actionsLogic", "startIndex", "stopIndex", "values", "cache", "i", "results", "api_default", "newItems", "actions", "s", "eventDefinitions", "eventDefinitionCount", "infiniteEventDefinitionsLoading", "propertyDefinitions", "propertyDefinitionCount", "infinitePropertyDefinitionsLoading", "relevantActions", "actionsLoading", "eventDefinition", "getFilterLabel", "urls", "findSearchTermInItemName", "index", "propertyDefinition", "action", "matches", "match", "activeScene", "sceneParams", "searchTerm", "actionsFuse", "result", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_subscriptions", "fuse", "Fuse", "EXPERIMENT_STATUS_TO_RIBBON_STATUS", "experimentsSidebarLogic", "experimentsLogic", "sceneLogic", "actions", "s", "relevantExperiments", "experimentsLoading", "experiment", "matches", "experimentStatus", "getExperimentStatus", "dayjs", "urls", "match", "activeScene", "sceneParams", "navigation3000Logic", "experiments", "searchTerm", "result", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_subscriptions", "import_jsx_runtime", "fuse", "Fuse", "featureFlagsSidebarLogic", "featureFlagsLogic", "projectLogic", "sceneLogic", "groupsModel", "actions", "s", "relevantFeatureFlags", "featureFlagsLoading", "currentProjectId", "aggregationLabel", "urls", "featureFlag", "matches", "query", "groupFilters", "dayjs", "match", "featureFlagLogic", "copyToClipboard", "deleteWithUndo", "e", "lemonToast", "activeScene", "sceneParams", "navigation3000Logic", "featureFlags", "searchTerm", "result", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_subscriptions", "insightsSidebarLogic", "savedInsightsLogic", "sceneLogic", "navigation3000Logic", "state", "insights", "items", "i", "actions", "values", "cache", "s", "projectLogic", "infiniteInsights", "insightsLoading", "currentProjectId", "urls", "insight", "findSearchTermInItemName", "initiateRename", "deleteInsightWithUndo", "newName", "updatedItem", "insightsApi", "insightsModel", "index", "startIndex", "INSIGHTS_PER_PAGE", "activeScene", "sceneParams", "searchTerm", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "import_kea_subscriptions", "personsAndGroupsSidebarLogic", "personsLogic", "groupsModel", "sceneLogic", "navigation3000Logic", "state", "persons", "items", "i", "values", "cache", "s", "infinitePersons", "personsLoading", "groupTypes", "groups", "groupsLoading", "person", "name", "asDisplay", "searchTerm", "asLink", "findSearchTermInItemName", "index", "startIndex", "stopIndex", "moreUrl", "groupType", "group", "displayId", "groupDisplayId", "urls", "_", "groupTypeIndex", "groupsListLogic", "groups0", "groups1", "groups2", "groups3", "groups4", "groupsLoading0", "groupsLoading1", "groupsLoading2", "groupsLoading3", "groupsLoading4", "activeScene", "sceneParams", "personDistinctId", "groupKey", "url", "actions", "import_jsx_runtime", "ITEM_KEY_PART_SEPARATOR", "MINIMUM_SIDEBAR_WIDTH_PX", "DEFAULT_SIDEBAR_WIDTH_PX", "MAXIMUM_SIDEBAR_WIDTH_PX", "MAXIMUM_SIDEBAR_WIDTH_PERCENTAGE", "navigation3000Logic", "sceneLogic", "navigationLogic", "teamLogic", "replayLandingPageLogic", "savedSessionRecordingPlaylistsLogic", "newNavbarItemId", "override", "width", "overslide", "delta", "isSearchShown", "searchTerm", "category", "itemName", "index", "key", "isSidebarShown", "_", "state", "actions", "values", "categoryKey", "item", "e", "captureException", "lemonToast", "newWidthRaw", "newWidth", "nextIndex", "s", "sceneConfig", "isNavShownMobile", "mobileLayout", "isNavCollapsedDesktop", "featureFlagLogic", "dashboardsModel", "featureFlags", "dashboardsLoading", "pinnedDashboards", "currentTeam", "hasOnboardedAnyProduct", "replayLandingPage", "playlists", "playlistsLoading", "isUsingSidebar", "FEATURE_FLAGS", "hasOnboardedFeatureFlags", "sectionOne", "IconHome", "urls", "IconDashboard", "dashboardsSidebarLogic", "LemonMenuOverlay", "dashboard", "Spinner", "IconNotebook", "IconDatabase", "dataManagementSidebarLogic", "IconPeople", "personsAndGroupsSidebarLogic", "IconLive", "IconLogomark", "IconSparkles", "IconArrowUpRight", "IconFeatures", "featureFlagsSidebarLogic", "IconGraph", "insightsSidebarLogic", "IconPlusSmall", "IconPieChart", "IconAI", "IconRewindPlay", "playlist", "IconWarning", "IconCursorClick", "IconToggle", "IconTestTube", "experimentsSidebarLogic", "IconMessage", "IconRocket", "IconServer", "editorSidebarLogic", "IconPlug", "IconMegaphone", "isNotNil", "navbarItems", "sidebarOverslide", "activeNavbarItemId", "navbarItemIdMapping", "internalSearchTerm", "sidebarContents", "flattenItems", "items", "activeListItemKey", "listItemAccordionCollapseMapping", "parts", "i", "parentKey", "activeNavbarItemIdRaw", "newItemInlineCategory", "location", "props", "cache", "isResizeInProgress", "sidebarContentsFlattened", "React", "lastFocusedItemIndex", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "import_kea_subscriptions", "import_jsx_runtime", "dataNodeKey", "insightVizDataNodeKey", "DATAWAREHOUSE_EDITOR_ITEM_ID", "editorModelsStateKey", "key", "activeModelStateKey", "NEW_QUERY", "getNextUntitledNumber", "tabs", "untitledNumbers", "tab", "match", "num", "multitabEditorLogic", "props", "dataWarehouseViewsLogic", "queryInput", "queryOverride", "switchTab", "query", "newName", "view", "key", "value", "name", "loading", "error", "isValidView", "sourceQuery", "metadata", "actions", "oldProps", "_", "state", "tabToRemove", "values", "asyncActions", "maybeExistingTab", "mountedCodeEditorLogic", "codeEditorLogic", "currentModelCount", "allNumbers", "uri", "model", "initModel", "nextUntitledNumber", "tabName", "queries", "editorModelsStateKey", "updatedTabs", "t", "activeTab", "path", "activeModelStateKey", "LemonDialog", "indexOfModel", "nextModel", "allModelQueries", "activeModelUri", "models", "newModels", "newModel", "activeModel", "val", "activeView", "breakpoint", "dataNodeLogic", "dataNodeKey", "LemonField", "LemonInput", "viewName", "queryToSave", "types", "lemonToast", "insight", "insightsApi", "urls", "dataWarehouseSavedQueries", "newTabs", "v", "viewId", "newView", "newTab", "s", "queryExportContext", "editingView", "import_jsx_runtime", "dataWarehouseTablesfuse", "Fuse", "posthogTablesfuse", "savedQueriesfuse", "editorSidebarLogic", "sceneLogic", "dataWarehouseViewsLogic", "databaseTableListLogic", "editorSceneLogic", "viewLinkLogic", "actions", "s", "relevantSavedQueries", "initialDataWarehouseSavedQueryLoading", "relevantPosthogTables", "relevantDataWarehouseTables", "dataWarehouseTablesBySourceType", "databaseLoading", "table", "matches", "match", "urls", "savedQuery", "Tooltip", "IconCalculate", "IconClipboardEdit", "multitabEditorLogic", "views", "view", "activeScene", "sceneParams", "dataWarehouseTables", "tablesBySourceType", "acc", "sourceType", "tables", "navigation3000Logic", "searchTerm", "result", "posthogTables", "dataWarehouseSavedQueries", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "NewItemButton", "category", "newItemCategory", "navigation3000Logic", "initiateNewItemInCategory", "LemonButton", "IconPlus", "e", "singularizeCategory", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "init_dirname", "init_buffer", "init_process", "React", "InfiniteLoader", "_React$PureComponent", "_inherits", "props", "context", "_this", "_classCallCheck", "_possibleConstructorReturn", "_getPrototypeOf", "createCallbackMemoizer", "_assertThisInitialized", "_createClass", "autoReload", "children", "unloadedRanges", "_this2", "loadMoreRows", "unloadedRange", "promise", "isRangeVisible", "forceUpdateReactVirtualizedComponent", "_ref", "startIndex", "stopIndex", "_ref2", "_this3", "_this$props", "isRowLoaded", "minimumBatchSize", "rowCount", "threshold", "scanForUnloadedRanges", "squashedUnloadedRanges", "_toConsumableArray", "_ref3", "registeredChild", "_defineProperty", "InfiniteLoader", "isRangeVisible", "_ref4", "lastRenderedStartIndex", "lastRenderedStopIndex", "startIndex", "stopIndex", "scanForUnloadedRanges", "_ref5", "isRowLoaded", "minimumBatchSize", "rowCount", "unloadedRanges", "rangeStartIndex", "rangeStopIndex", "index", "loaded", "potentialStopIndex", "_index", "firstUnloadedRange", "_index2", "forceUpdateReactVirtualizedComponent", "component", "currentIndex", "recomputeSize", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "SearchHighlight", "string", "substring", "className", "parts", "part", "index", "import_jsx_runtime", "isListItemAccordion", "category", "isSidebarCategory", "SidebarList", "listRef", "isListItemVisible", "listItemAccordionCollapseMapping", "normalizedActiveListItemKey", "sidebarWidth", "newItemInlineCategory", "savingNewItem", "navigation3000Logic", "cancelNewItem", "saveNewItem", "emptyStateSkeletonCount", "_items", "listItems", "allItems", "flatten", "items", "depth", "parentKey", "item", "ITEM_KEY_PART_SEPARATOR", "remote", "loading", "validateName", "addingNewItem", "firstItem", "usingExtendedItemFormat", "listProps", "rawIndex", "style", "index", "SidebarListItem", "newName", "SidebarListItemSkeleton", "normalizedItemKey", "keyPart", "active", "AutoSizer", "height", "_", "InfiniteLoader", "startIndex", "stopIndex", "onRowsRendered", "registerChild", "List", "isItemTentative", "isItemClickable", "isMenuOpen", "setIsMenuOpen", "setNewName", "newNameValidationError", "setNewNameValidationError", "isSavingName", "setIsSavingName", "ref", "isSaving", "menuItems", "cancel", "validate", "name", "validation", "save", "error", "captureException", "lemonToast", "onDoubleClick", "element", "content", "SidebarListItemAccordion", "SearchHighlight", "formattedName", "LemonTag", "Link", "e", "ExtraContext", "field", "clsx", "LemonButton", "IconX", "KeyboardShortcut", "IconCheckCircle", "LemonMenu", "IconEllipsis", "data", "TZLabel", "LemonSkeleton", "toggleListItemAccordion", "key", "isEmpty", "keyString", "isExpanded", "IconChevronRight", "capitalizeFirstLetter", "pluralizeCategory", "import_jsx_runtime", "SidebarAccordion", "category", "accordionCollapseMapping", "navigation3000Logic", "toggleAccordion", "key", "items", "loading", "isEmpty", "isEmptyDefinitively", "isExpanded", "Spinner", "IconChevronRight", "capitalizeFirstLetter", "pluralizeCategory", "NewItemButton", "SidebarList", "singularizeCategory", "noun", "import_jsx_runtime", "SEARCH_DEBOUNCE_MS", "Sidebar", "navbarItem", "sidebarOverlay", "sidebarOverlayProps", "inputElementRef", "width", "isShown", "isResizeInProgress", "overslideDirection", "isSearchShown", "navigation3000Logic", "beginResize", "contents", "clsx", "SidebarSearchBar", "SidebarContent", "modalContent", "category", "React", "e", "SidebarOverlay", "activeSidebarLogic", "searchTerm", "setSearchTerm", "focusNextItem", "setLastFocusedItemIndex", "debounceSearch", "localSearchTerm", "setLocalSearchTerm", "setSearchTermDebounced", "c", "value", "isLoading", "item", "LemonInput", "Spinner", "accordion", "SidebarAccordion", "SidebarList", "className", "isOpen", "children"]
}
