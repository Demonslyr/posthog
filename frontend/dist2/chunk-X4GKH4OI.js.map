{
  "version": 3,
  "sources": ["../src/scenes/pipeline/hogfunctions/integrations/IntegrationChoice.tsx"],
  "sourcesContent": ["import { IconExternal, IconX } from '@posthog/icons'\nimport { LemonButton, LemonMenu, LemonSkeleton } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport api from 'lib/api'\nimport { integrationsLogic } from 'lib/integrations/integrationsLogic'\nimport { IntegrationView } from 'lib/integrations/IntegrationView'\nimport { capitalizeFirstLetter } from 'lib/utils'\nimport { urls } from 'scenes/urls'\n\nimport { HogFunctionInputSchemaType } from '~/types'\n\nexport type IntegrationConfigureProps = {\n    value?: number\n    onChange?: (value: number | null) => void\n    redirectUrl?: string\n    schema?: HogFunctionInputSchemaType\n    integration?: string\n    beforeRedirect?: () => void\n}\n\nexport function IntegrationChoice({\n    onChange,\n    value,\n    schema,\n    integration,\n    redirectUrl,\n    beforeRedirect,\n}: IntegrationConfigureProps): JSX.Element | null {\n    const { integrationsLoading, integrations } = useValues(integrationsLogic)\n    const { newGoogleCloudKey } = useActions(integrationsLogic)\n    const kind = integration\n    const integrationsOfKind = integrations?.filter((x) => x.kind === kind)\n    const integrationKind = integrationsOfKind?.find((integration) => integration.id === value)\n\n    if (!kind) {\n        return null\n    }\n\n    if (integrationsLoading) {\n        return <LemonSkeleton className=\"h-10\" />\n    }\n\n    const kindName =\n        kind == 'google-pubsub'\n            ? 'Google Cloud Pub/Sub'\n            : kind == 'google-cloud-storage'\n            ? 'Google Cloud Storage'\n            : kind == 'google-ads'\n            ? 'Google Ads'\n            : capitalizeFirstLetter(kind)\n\n    function uploadKey(kind: string): void {\n        const input = document.createElement('input')\n        input.type = 'file'\n        input.accept = '.json'\n        input.onchange = async (e) => {\n            const file = (e.target as HTMLInputElement).files?.[0]\n            if (!file) {\n                return\n            }\n            newGoogleCloudKey(kind, file, (integration) => onChange?.(integration.id))\n        }\n        input.click()\n    }\n\n    const button = (\n        <LemonMenu\n            items={[\n                integrationsOfKind?.length\n                    ? {\n                          items: [\n                              ...(integrationsOfKind?.map((integration) => ({\n                                  icon: <img src={integration.icon_url} className=\"w-6 h-6 rounded\" />,\n                                  onClick: () => onChange?.(integration.id),\n                                  active: integration.id === value,\n                                  label: integration.display_name,\n                              })) || []),\n                          ],\n                      }\n                    : null,\n                ['google-pubsub', 'google-cloud-storage'].includes(kind)\n                    ? {\n                          items: [\n                              {\n                                  onClick: () => uploadKey(kind),\n                                  label: 'Upload Google Cloud .json key file',\n                              },\n                          ],\n                      }\n                    : {\n                          items: [\n                              {\n                                  to: api.integrations.authorizeUrl({\n                                      kind,\n                                      next: redirectUrl,\n                                  }),\n                                  disableClientSideRouting: true,\n                                  onClick: beforeRedirect,\n                                  label: integrationsOfKind?.length\n                                      ? `Connect to a different ${kind} integration`\n                                      : `Connect to ${kind}`,\n                              },\n                          ],\n                      },\n                {\n                    items: [\n                        {\n                            to: urls.settings('project-integrations'),\n                            label: 'Manage integrations',\n                            sideIcon: <IconExternal />,\n                        },\n                        value\n                            ? {\n                                  onClick: () => onChange?.(null),\n                                  label: 'Clear',\n                                  sideIcon: <IconX />,\n                              }\n                            : null,\n                    ],\n                },\n            ]}\n        >\n            {integrationKind ? (\n                <LemonButton type=\"secondary\">Change</LemonButton>\n            ) : (\n                <LemonButton type=\"secondary\">Choose {kindName} connection</LemonButton>\n            )}\n        </LemonMenu>\n    )\n\n    return (\n        <>\n            {integrationKind ? (\n                <IntegrationView schema={schema} integration={integrationKind} suffix={button} />\n            ) : (\n                button\n            )}\n        </>\n    )\n}\n"],
  "mappings": "2TAAAA,IAAAC,IAAAC,IAEA,IAAAC,EAAsC,OAqCvB,IAAAC,EAAA,OAnBR,SAASC,EAAkB,CAC9B,SAAAC,EACA,MAAAC,EACA,OAAAC,EACA,YAAAC,EACA,YAAAC,EACA,eAAAC,CACJ,EAAkD,CAC9C,GAAM,CAAE,oBAAAC,EAAqB,aAAAC,CAAa,KAAI,aAAUC,CAAiB,EACnE,CAAE,kBAAAC,CAAkB,KAAI,cAAWD,CAAiB,EACpDE,EAAOP,EACPQ,EAAqBJ,GAAc,OAAQK,GAAMA,EAAE,OAASF,CAAI,EAChEG,EAAkBF,GAAoB,KAAMR,GAAgBA,EAAY,KAAOF,CAAK,EAE1F,GAAI,CAACS,EACD,OAAO,KAGX,GAAIJ,EACA,SAAO,OAACQ,EAAA,CAAc,UAAU,OAAO,EAG3C,IAAMC,EACFL,GAAQ,gBACF,uBACAA,GAAQ,uBACR,uBACAA,GAAQ,aACR,aACAM,EAAsBN,CAAI,EAEpC,SAASO,EAAUP,EAAoB,CACnC,IAAMQ,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,KAAO,OACbA,EAAM,OAAS,QACfA,EAAM,SAAW,MAAOC,GAAM,CAC1B,IAAMC,EAAQD,EAAE,OAA4B,QAAQ,CAAC,EAChDC,GAGLX,EAAkBC,EAAMU,EAAOjB,GAAgBH,IAAWG,EAAY,EAAE,CAAC,CAC7E,EACAe,EAAM,MAAM,CAChB,CAEA,IAAMG,KACF,OAACC,EAAA,CACG,MAAO,CACHX,GAAoB,OACd,CACI,MAAO,CACH,GAAIA,GAAoB,IAAKR,IAAiB,CAC1C,QAAM,OAAC,OAAI,IAAKA,EAAY,SAAU,UAAU,kBAAkB,EAClE,QAAS,IAAMH,IAAWG,EAAY,EAAE,EACxC,OAAQA,EAAY,KAAOF,EAC3B,MAAOE,EAAY,YACvB,EAAE,GAAK,CAAC,CACZ,CACJ,EACA,KACN,CAAC,gBAAiB,sBAAsB,EAAE,SAASO,CAAI,EACjD,CACI,MAAO,CACH,CACI,QAAS,IAAMO,EAAUP,CAAI,EAC7B,MAAO,oCACX,CACJ,CACJ,EACA,CACI,MAAO,CACH,CACI,GAAIa,EAAI,aAAa,aAAa,CAC9B,KAAAb,EACA,KAAMN,CACV,CAAC,EACD,yBAA0B,GAC1B,QAASC,EACT,MAAOM,GAAoB,OACrB,0BAA0BD,CAAI,eAC9B,cAAcA,CAAI,EAC5B,CACJ,CACJ,EACN,CACI,MAAO,CACH,CACI,GAAIc,EAAK,SAAS,sBAAsB,EACxC,MAAO,sBACP,YAAU,OAACC,EAAA,EAAa,CAC5B,EACAxB,EACM,CACI,QAAS,IAAMD,IAAW,IAAI,EAC9B,MAAO,QACP,YAAU,OAAC0B,EAAA,EAAM,CACrB,EACA,IACV,CACJ,CACJ,EAEC,SAAAb,KACG,OAACc,EAAA,CAAY,KAAK,YAAY,kBAAM,KAEpC,QAACA,EAAA,CAAY,KAAK,YAAY,oBAAQZ,EAAS,eAAW,EAElE,EAGJ,SACI,mBACK,SAAAF,KACG,OAACe,EAAA,CAAgB,OAAQ1B,EAAQ,YAAaW,EAAiB,OAAQQ,EAAQ,EAE/EA,EAER,CAER",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "IntegrationChoice", "onChange", "value", "schema", "integration", "redirectUrl", "beforeRedirect", "integrationsLoading", "integrations", "integrationsLogic", "newGoogleCloudKey", "kind", "integrationsOfKind", "x", "integrationKind", "LemonSkeleton", "kindName", "capitalizeFirstLetter", "uploadKey", "input", "e", "file", "button", "LemonMenu", "api_default", "urls", "IconExternal", "IconX", "LemonButton", "IntegrationView"]
}
