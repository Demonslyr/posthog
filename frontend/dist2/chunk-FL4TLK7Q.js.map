{
  "version": 3,
  "sources": ["../src/scenes/max/Max.tsx", "../src/layout/navigation-3000/sidepanel/sidePanelLogic.tsx", "../src/layout/navigation-3000/sidepanel/panels/activity/sidePanelActivityLogic.tsx", "../src/layout/navigation-3000/sidepanel/panels/sidePanelContextLogic.ts", "../src/layout/navigation-3000/sidepanel/panels/sidePanelStatusLogic.tsx", "../src/scenes/max/Intro.tsx", "../src/scenes/max/maxLogic.ts", "../../node_modules/.pnpm/eventsource-parser@3.0.0/node_modules/eventsource-parser/src/errors.ts", "../../node_modules/.pnpm/eventsource-parser@3.0.0/node_modules/eventsource-parser/src/parse.ts", "../src/scenes/max/utils.ts", "../src/scenes/max/QuestionInput.tsx", "../src/scenes/max/QuestionSuggestions.tsx", "../src/scenes/max/Thread.tsx"],
  "sourcesContent": ["import { IconArrowLeft, IconGear, IconSidePanel } from '@posthog/icons'\nimport { BindLogic, useActions, useValues } from 'kea'\nimport { NotFound } from 'lib/components/NotFound'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { SceneExport } from 'scenes/sceneTypes'\n\nimport { sidePanelSettingsLogic } from '~/layout/navigation-3000/sidepanel/panels/sidePanelSettingsLogic'\nimport { sidePanelLogic } from '~/layout/navigation-3000/sidepanel/sidePanelLogic'\nimport { SidePanelTab } from '~/types'\n\nimport { Intro } from './Intro'\nimport { maxLogic } from './maxLogic'\nimport { QuestionInput } from './QuestionInput'\nimport { QuestionSuggestions } from './QuestionSuggestions'\nimport { Thread } from './Thread'\n\nexport const scene: SceneExport = {\n    component: Max,\n}\n\nexport function Max(): JSX.Element {\n    const { featureFlags } = useValues(featureFlagLogic)\n    const { sidePanelOpen, selectedTab } = useValues(sidePanelLogic)\n    const { closeSidePanel } = useActions(sidePanelLogic)\n\n    if (!featureFlags[FEATURE_FLAGS.ARTIFICIAL_HOG]) {\n        return <NotFound object=\"page\" caption=\"You don't have access to AI features yet.\" />\n    }\n\n    if (sidePanelOpen && selectedTab === SidePanelTab.Max) {\n        return (\n            <div className=\"flex flex-col items-center justify-center w-full grow\">\n                <IconSidePanel className=\"text-3xl text-muted mb-2\" />\n                <h3 className=\"text-xl font-bold mb-1\">Max is currently in the sidebar</h3>\n                <p className=\"text-sm text-muted mb-2\">You can navigate freely around the app, or\u2026</p>\n                <LemonButton\n                    type=\"secondary\"\n                    size=\"xsmall\"\n                    onClick={() => closeSidePanel()}\n                    sideIcon={<IconArrowLeft />}\n                >\n                    Get him in here\n                </LemonButton>\n            </div>\n        )\n    }\n\n    return (\n        <BindLogic logic={maxLogic} props={{ conversationId: null }}>\n            <MaxInstance />\n        </BindLogic>\n    )\n}\n\nexport function MaxInstance(): JSX.Element {\n    const { threadGrouped } = useValues(maxLogic)\n    const { openSettingsPanel } = useActions(sidePanelSettingsLogic)\n\n    const headerButtons = (\n        <LemonButton\n            type=\"secondary\"\n            size=\"small\"\n            icon={<IconGear />}\n            onClick={() => {\n                openSettingsPanel({ settingId: 'core-memory' })\n                setTimeout(() => document.getElementById('product-description-textarea')?.focus(), 1)\n            }}\n        >\n            Settings\n        </LemonButton>\n    )\n\n    return (\n        <>\n            <PageHeader delimited buttons={headerButtons} />\n            {!threadGrouped.length ? (\n                <div className=\"@container/max-welcome relative flex flex-col gap-3 px-4 pb-8 items-center grow justify-center\">\n                    <Intro />\n                    <QuestionInput />\n                    <QuestionSuggestions />\n                </div>\n            ) : (\n                <>\n                    <Thread />\n                    <QuestionInput />\n                </>\n            )}\n        </>\n    )\n}\n", "import { connect, kea, path, selectors } from 'kea'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { dayjs } from 'lib/dayjs'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { activationLogic } from '~/layout/navigation-3000/sidepanel/panels/activation/activationLogic'\nimport { AvailableFeature, SidePanelTab } from '~/types'\n\nimport { sidePanelActivityLogic } from './panels/activity/sidePanelActivityLogic'\nimport { sidePanelContextLogic } from './panels/sidePanelContextLogic'\nimport { sidePanelStatusLogic } from './panels/sidePanelStatusLogic'\nimport type { sidePanelLogicType } from './sidePanelLogicType'\nimport { sidePanelStateLogic } from './sidePanelStateLogic'\n\nconst ALWAYS_EXTRA_TABS = [\n    SidePanelTab.Settings,\n    SidePanelTab.FeaturePreviews,\n    SidePanelTab.Activity,\n    SidePanelTab.Status,\n    SidePanelTab.Exports,\n]\n\nexport const sidePanelLogic = kea<sidePanelLogicType>([\n    path(['scenes', 'navigation', 'sidepanel', 'sidePanelLogic']),\n    connect({\n        values: [\n            featureFlagLogic,\n            ['featureFlags'],\n            preflightLogic,\n            ['isCloudOrDev'],\n            activationLogic,\n            ['shouldShowActivationTab'],\n            sidePanelStateLogic,\n            ['selectedTab', 'sidePanelOpen'],\n            // We need to mount this to ensure that marking as read works when the panel closes\n            sidePanelActivityLogic,\n            ['unreadCount'],\n            sidePanelStatusLogic,\n            ['status'],\n            userLogic,\n            ['hasAvailableFeature'],\n            sidePanelContextLogic,\n            ['sceneSidePanelContext'],\n            teamLogic,\n            ['currentTeam'],\n        ],\n        actions: [sidePanelStateLogic, ['closeSidePanel', 'openSidePanel']],\n    }),\n\n    selectors({\n        enabledTabs: [\n            (s) => [s.isCloudOrDev, s.featureFlags, s.sceneSidePanelContext, s.currentTeam],\n            (isCloudOrDev, featureflags, sceneSidePanelContext, currentTeam) => {\n                const tabs: SidePanelTab[] = []\n\n                if (featureflags[FEATURE_FLAGS.ARTIFICIAL_HOG]) {\n                    tabs.push(SidePanelTab.Max)\n                }\n                tabs.push(SidePanelTab.Notebooks)\n                tabs.push(SidePanelTab.Docs)\n                if (isCloudOrDev) {\n                    tabs.push(SidePanelTab.Support)\n                }\n\n                if (currentTeam?.created_at) {\n                    const teamCreatedAt = dayjs(currentTeam.created_at)\n\n                    // TODO: Remove cutoff date condition after 2025-03-15\n                    if (dayjs().diff(teamCreatedAt, 'day') < 30 && teamCreatedAt.isAfter(dayjs('2025-02-13'))) {\n                        tabs.push(SidePanelTab.Activation)\n                    }\n                }\n\n                if (featureflags[FEATURE_FLAGS.DISCUSSIONS]) {\n                    tabs.push(SidePanelTab.Discussion)\n                }\n\n                if (\n                    featureflags[FEATURE_FLAGS.ROLE_BASED_ACCESS_CONTROL] &&\n                    sceneSidePanelContext.access_control_resource &&\n                    sceneSidePanelContext.access_control_resource_id\n                ) {\n                    tabs.push(SidePanelTab.AccessControl)\n                }\n                tabs.push(SidePanelTab.Exports)\n                tabs.push(SidePanelTab.FeaturePreviews)\n                tabs.push(SidePanelTab.Settings)\n\n                if (isCloudOrDev) {\n                    tabs.push(SidePanelTab.Status)\n                }\n\n                return tabs\n            },\n        ],\n\n        visibleTabs: [\n            (s) => [\n                s.enabledTabs,\n                s.selectedTab,\n                s.sidePanelOpen,\n                s.unreadCount,\n                s.status,\n                s.hasAvailableFeature,\n                s.shouldShowActivationTab,\n            ],\n            (\n                enabledTabs,\n                selectedTab,\n                sidePanelOpen,\n                unreadCount,\n                status,\n                hasAvailableFeature,\n                shouldShowActivationTab\n            ): SidePanelTab[] => {\n                return enabledTabs.filter((tab) => {\n                    if (tab === selectedTab && sidePanelOpen) {\n                        return true\n                    }\n\n                    if (\n                        tab === SidePanelTab.Activity &&\n                        unreadCount &&\n                        hasAvailableFeature(AvailableFeature.AUDIT_LOGS)\n                    ) {\n                        return true\n                    }\n\n                    if (tab === SidePanelTab.Status && status !== 'operational') {\n                        return true\n                    }\n\n                    if (tab === SidePanelTab.Activation && !shouldShowActivationTab) {\n                        return false\n                    }\n\n                    // Hide certain tabs unless they are selected\n                    if (ALWAYS_EXTRA_TABS.includes(tab)) {\n                        return false\n                    }\n\n                    return true\n                })\n            },\n        ],\n\n        extraTabs: [\n            (s) => [s.enabledTabs, s.visibleTabs],\n            (enabledTabs, visibleTabs): SidePanelTab[] => {\n                return enabledTabs.filter((tab: any) => !visibleTabs.includes(tab))\n            },\n        ],\n    }),\n])\n", "import { actions, afterMount, beforeUnmount, connect, kea, listeners, path, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport { subscriptions } from 'kea-subscriptions'\nimport api, { PaginatedResponse } from 'lib/api'\nimport { describerFor } from 'lib/components/ActivityLog/activityLogLogic'\nimport { ActivityLogItem, humanize, HumanizedActivityLogItem } from 'lib/components/ActivityLog/humanizeActivity'\nimport { dayjs } from 'lib/dayjs'\nimport { LemonMarkdown } from 'lib/lemon-ui/LemonMarkdown'\nimport { toParams } from 'lib/utils'\nimport posthog from 'posthog-js'\nimport { projectLogic } from 'scenes/projectLogic'\n\nimport { ActivityScope, UserBasicType } from '~/types'\n\nimport { sidePanelStateLogic } from '../../sidePanelStateLogic'\nimport { SidePanelSceneContext } from '../../types'\nimport { sidePanelContextLogic } from '../sidePanelContextLogic'\nimport type { sidePanelActivityLogicType } from './sidePanelActivityLogicType'\n\nconst POLL_TIMEOUT = 5 * 60 * 1000\n\nexport type ActivityFilters = {\n    scope?: ActivityScope\n    item_id?: ActivityLogItem['item_id']\n    user?: UserBasicType['id']\n}\n\nexport interface ChangelogFlagPayload {\n    notificationDate: dayjs.Dayjs\n    markdown: string\n}\n\nexport interface ChangesResponse {\n    results: ActivityLogItem[]\n    next: string | null\n    last_read: string\n}\n\nexport enum SidePanelActivityTab {\n    Unread = 'unread',\n    All = 'all',\n    Metalytics = 'metalytics',\n    Subscriptions = 'subscriptions',\n}\n\nexport const sidePanelActivityLogic = kea<sidePanelActivityLogicType>([\n    path(['scenes', 'navigation', 'sidepanel', 'sidePanelActivityLogic']),\n    connect({\n        values: [sidePanelContextLogic, ['sceneSidePanelContext'], projectLogic, ['currentProjectId']],\n        actions: [sidePanelStateLogic, ['openSidePanel']],\n    }),\n    actions({\n        togglePolling: (pageIsVisible: boolean) => ({ pageIsVisible }),\n        incrementErrorCount: true,\n        clearErrorCount: true,\n        markAllAsRead: true,\n        setActiveTab: (tab: SidePanelActivityTab) => ({ tab }),\n        loadAllActivity: true,\n        loadOlderActivity: true,\n        maybeLoadOlderActivity: true,\n        loadImportantChanges: (onlyUnread = true) => ({ onlyUnread }),\n        setFilters: (filters: ActivityFilters | null) => ({ filters }),\n        setFiltersForCurrentPage: (filters: ActivityFilters | null) => ({ filters }),\n        toggleShowDetails: (showing?: boolean) => ({ showing }),\n    }),\n    reducers({\n        activeTab: [\n            SidePanelActivityTab.Unread as SidePanelActivityTab,\n            { persist: true },\n            {\n                setActiveTab: (_, { tab }) => tab,\n            },\n        ],\n        errorCounter: [\n            0,\n            {\n                incrementErrorCount: (state) => (state >= 5 ? 5 : state + 1),\n                clearErrorCount: () => 0,\n            },\n        ],\n        filters: [\n            null as ActivityFilters | null,\n            {\n                setFilters: (_, { filters }) => filters,\n                setFiltersForCurrentPage: (_, { filters }) => filters,\n            },\n        ],\n        filtersForCurrentPage: [\n            null as ActivityFilters | null,\n            {\n                setFiltersForCurrentPage: (_, { filters }) => filters,\n            },\n        ],\n        showDetails: [\n            false,\n            { persist: true },\n            {\n                toggleShowDetails: (state, { showing }) => showing ?? !state,\n            },\n        ],\n    }),\n    loaders(({ actions, values, cache }) => ({\n        importantChanges: [\n            null as ChangesResponse | null,\n            {\n                markAllAsRead: async () => {\n                    const current = values.importantChanges\n                    if (!current) {\n                        return null\n                    }\n\n                    const latestNotification = values.notifications.reduce((a, b) =>\n                        a.created_at.isAfter(b.created_at) ? a : b\n                    )\n\n                    if (!latestNotification.unread) {\n                        return current\n                    }\n\n                    await api.create(\n                        `api/projects/${values.currentProjectId}/activity_log/bookmark_activity_notification`,\n                        {\n                            bookmark: latestNotification.created_at.toISOString(),\n                        }\n                    )\n\n                    return {\n                        last_read: latestNotification.created_at.toISOString(),\n                        next: current.next,\n                        results: current.results.map((ic) => ({ ...ic, unread: false })),\n                    }\n                },\n                loadImportantChanges: async ({ onlyUnread }, breakpoint) => {\n                    await breakpoint(1)\n\n                    clearTimeout(cache.pollTimeout)\n\n                    try {\n                        const response = await api.get<ChangesResponse>(\n                            `api/projects/${values.currentProjectId}/activity_log/important_changes?` +\n                                toParams({ unread: onlyUnread })\n                        )\n\n                        // we can't rely on automatic success action here because we swallow errors so always succeed\n                        actions.clearErrorCount()\n                        return response\n                    } catch (e) {\n                        // swallow errors as this isn't user initiated\n                        // increment a counter to backoff calling the API while errors persist\n                        actions.incrementErrorCount()\n                        return null\n                    } finally {\n                        const pollTimeoutMilliseconds = values.errorCounter\n                            ? POLL_TIMEOUT * values.errorCounter\n                            : POLL_TIMEOUT\n                        cache.pollTimeout = window.setTimeout(actions.loadImportantChanges, pollTimeoutMilliseconds)\n                    }\n                },\n            },\n        ],\n        allActivityResponse: [\n            null as PaginatedResponse<ActivityLogItem> | null,\n            {\n                loadAllActivity: async (_, breakpoint) => {\n                    const response = await api.activity.list(values.filters ?? {})\n\n                    breakpoint()\n                    return response\n                },\n\n                loadOlderActivity: async (_, breakpoint) => {\n                    await breakpoint(1)\n\n                    if (!values.allActivityResponse?.next) {\n                        return values.allActivityResponse\n                    }\n\n                    const response = await api.get<PaginatedResponse<ActivityLogItem>>(values.allActivityResponse.next)\n\n                    response.results = [...values.allActivityResponse.results, ...response.results]\n\n                    return response\n                },\n            },\n        ],\n    })),\n\n    listeners(({ values, actions, cache }) => ({\n        setActiveTab: ({ tab }) => {\n            if (tab === SidePanelActivityTab.All && !values.allActivityResponseLoading) {\n                actions.loadAllActivity()\n            }\n        },\n\n        maybeLoadOlderActivity: () => {\n            if (!values.allActivityResponseLoading && values.allActivityResponse?.next) {\n                actions.loadOlderActivity()\n            }\n        },\n        openSidePanel: ({ options }) => {\n            if (options) {\n                actions.setActiveTab(options as SidePanelActivityTab)\n            }\n        },\n        togglePolling: ({ pageIsVisible }) => {\n            if (pageIsVisible) {\n                actions.loadImportantChanges()\n            } else {\n                clearTimeout(cache.pollTimeout)\n            }\n        },\n    })),\n    selectors({\n        allActivity: [\n            (s) => [s.allActivityResponse],\n            (allActivityResponse): HumanizedActivityLogItem[] => {\n                return humanize(allActivityResponse?.results || [], describerFor, true)\n            },\n        ],\n        allActivityHasNext: [(s) => [s.allActivityResponse], (allActivityResponse) => !!allActivityResponse?.next],\n        notifications: [\n            (s) => [s.importantChanges],\n            (importantChanges): HumanizedActivityLogItem[] => {\n                try {\n                    const importantChangesHumanized = humanize(importantChanges?.results || [], describerFor, true)\n\n                    let changelogNotification: ChangelogFlagPayload | null = null\n                    const flagPayload = posthog.getFeatureFlagPayload('changelog-notification')\n                    if (flagPayload) {\n                        changelogNotification = {\n                            markdown: flagPayload['markdown'],\n                            notificationDate: dayjs(flagPayload['notificationDate']),\n                        } as ChangelogFlagPayload\n                    }\n\n                    if (changelogNotification) {\n                        const lastRead = importantChanges?.last_read ? dayjs(importantChanges.last_read) : null\n                        const changeLogIsUnread =\n                            !!lastRead &&\n                            (lastRead.isBefore(changelogNotification.notificationDate) ||\n                                lastRead == changelogNotification.notificationDate)\n\n                        const changelogNotificationHumanized: HumanizedActivityLogItem = {\n                            email: 'joe@posthog.com',\n                            name: 'Joe',\n                            isSystem: true,\n                            description: <LemonMarkdown>{changelogNotification.markdown}</LemonMarkdown>,\n                            created_at: changelogNotification.notificationDate,\n                            unread: changeLogIsUnread,\n                        }\n                        const notifications = [changelogNotificationHumanized, ...importantChangesHumanized]\n                        notifications.sort((a, b) => {\n                            if (a.created_at.isBefore(b.created_at)) {\n                                return 1\n                            } else if (a.created_at.isAfter(b.created_at)) {\n                                return -1\n                            }\n                            return 0\n                        })\n                        return notifications\n                    }\n\n                    return humanize(importantChanges?.results || [], describerFor, true)\n                } catch (e) {\n                    // swallow errors as this isn't user initiated\n                    return []\n                }\n            },\n        ],\n\n        hasNotifications: [(s) => [s.notifications], (notifications) => !!notifications.length],\n        unread: [\n            (s) => [s.notifications],\n            (notifications: HumanizedActivityLogItem[]) => notifications.filter((ic) => ic.unread),\n        ],\n        unreadCount: [(s) => [s.unread], (unread) => (unread || []).length],\n        hasUnread: [(s) => [s.unreadCount], (unreadCount) => unreadCount > 0],\n    }),\n\n    subscriptions(({ actions, values }) => ({\n        sceneSidePanelContext: (sceneSidePanelContext: SidePanelSceneContext) => {\n            actions.setFiltersForCurrentPage(\n                sceneSidePanelContext\n                    ? {\n                          ...values.filters,\n                          scope: sceneSidePanelContext.activity_scope,\n                          item_id: sceneSidePanelContext.activity_item_id,\n                      }\n                    : null\n            )\n        },\n        filters: () => {\n            if (values.activeTab === SidePanelActivityTab.All) {\n                actions.loadAllActivity()\n            }\n        },\n    })),\n\n    afterMount(({ actions, values }) => {\n        actions.loadImportantChanges()\n\n        const activityFilters = values.sceneSidePanelContext\n        actions.setFiltersForCurrentPage(activityFilters ? { ...values.filters, ...activityFilters } : null)\n    }),\n\n    beforeUnmount(({ cache }) => {\n        clearTimeout(cache.pollTimeout)\n    }),\n])\n", "import { connect, kea, path, selectors } from 'kea'\nimport { router } from 'kea-router'\nimport { objectsEqual } from 'kea-test-utils'\nimport { removeProjectIdIfPresent } from 'lib/utils/router-utils'\nimport { sceneLogic } from 'scenes/sceneLogic'\nimport { SceneConfig } from 'scenes/sceneTypes'\n\nimport { SidePanelSceneContext } from '../types'\nimport { SIDE_PANEL_CONTEXT_KEY } from '../types'\nimport type { sidePanelContextLogicType } from './sidePanelContextLogicType'\n\nexport const activityFiltersForScene = (sceneConfig: SceneConfig | null): SidePanelSceneContext | null => {\n    if (sceneConfig?.activityScope) {\n        // NOTE: - HACKY, we are just parsing the item_id from the url optimistically...\n        const pathParts = removeProjectIdIfPresent(router.values.currentLocation.pathname).split('/')\n        const item_id = pathParts[2]\n\n        // Loose check for the item_id being a number, a short_id (8 chars) or a uuid\n        if (item_id && (item_id.length === 8 || item_id.length === 36 || !isNaN(parseInt(item_id)))) {\n            return { activity_scope: sceneConfig.activityScope, activity_item_id: item_id }\n        }\n\n        return { activity_scope: sceneConfig.activityScope }\n    }\n    return null\n}\n\nexport const sidePanelContextLogic = kea<sidePanelContextLogicType>([\n    path(['scenes', 'navigation', 'sidepanel', 'sidePanelContextLogic']),\n    connect({\n        values: [sceneLogic, ['sceneConfig']],\n    }),\n\n    selectors({\n        sceneSidePanelContext: [\n            (s) => [\n                s.sceneConfig,\n                // Similar to \"breadcrumbs\"\n                (state, props) => {\n                    const activeSceneLogic = sceneLogic.selectors.activeSceneLogic(state, props)\n                    if (activeSceneLogic && SIDE_PANEL_CONTEXT_KEY in activeSceneLogic.selectors) {\n                        const activeLoadedScene = sceneLogic.selectors.activeLoadedScene(state, props)\n                        return activeSceneLogic.selectors[SIDE_PANEL_CONTEXT_KEY](\n                            state,\n                            activeLoadedScene?.paramsToProps?.(activeLoadedScene?.sceneParams) || props\n                        )\n                    }\n                    return null\n                },\n            ],\n            (sceneConfig, context): SidePanelSceneContext => {\n                return {\n                    ...(context ?? {}),\n                    ...(!context?.activity_scope ? activityFiltersForScene(sceneConfig) : {}),\n                }\n            },\n            { equalityCheck: objectsEqual },\n        ],\n    }),\n])\n", "import { actions, afterMount, beforeUnmount, connect, kea, listeners, path, reducers } from 'kea'\nimport { loaders } from 'kea-loaders'\n\nimport { sidePanelStateLogic } from '../sidePanelStateLogic'\nimport type { sidePanelStatusLogicType } from './sidePanelStatusLogicType'\n\nexport type SPIndicator = 'none' | 'minor' | 'major'\n\nexport type SPComponentStatus = 'operational' | 'degraded_performance' | 'partial_outage' | 'major_outage'\n\nexport interface SPSummary {\n    // page: SPPage\n    components: SPComponent[]\n    incidents: SPIncident[]\n    scheduled_maintenances: any[]\n    status: SPStatus\n}\n\nexport interface SPComponent {\n    id: string\n    name: string\n    status: SPComponentStatus\n    created_at: Date\n    updated_at: Date\n    position: number\n    description: null | string\n    showcase: boolean\n    start_date: Date | null\n    group_id: null | string\n    page_id: string\n    group: boolean\n    only_show_if_degraded: boolean\n    components?: string[]\n}\n\nexport interface SPIncident {\n    id: string\n    name: string\n    status: string\n    created_at: Date\n    updated_at: Date\n    monitoring_at: null\n    resolved_at: null\n    impact: string\n    shortlink: string\n    started_at: Date\n    page_id: string\n    incident_updates: SPIncidentUpdate[]\n    components: SPComponent[]\n    reminder_intervals: string\n}\n\nexport interface SPIncidentUpdate {\n    id: string\n    status: string\n    body: string\n    incident_id: string\n    created_at: Date\n    updated_at: Date\n    display_at: Date\n    affected_components: SPAffectedComponent[]\n    deliver_notifications: boolean\n    custom_tweet: null\n    tweet_id: null\n}\n\nexport interface SPAffectedComponent {\n    code: string\n    name: string\n    old_status: string\n    new_status: string\n}\n\nexport interface SPStatus {\n    indicator: SPIndicator\n    description: string\n}\n\nexport const STATUS_PAGE_BASE = 'https://status.posthog.com'\n\n// NOTE: Test account with some incidents - ask @benjackwhite for access\n// export const STATUS_PAGE_BASE = 'https://posthogtesting.statuspage.io'\n\n// Map the hostname to relevant groups (found via the summary.json endpoint)\nconst RELEVANT_GROUPS_MAP = {\n    'us.posthog.com': ['41df083ftqt6', 'z0y6m9kyvy3j'],\n    'eu.posthog.com': ['c4d9jd1jcx3f', 'nfknrn2bf3yz'],\n    localhost: ['f58xx1143yvt', 't3rdjq2z0x7p'], // localhost has IDs for the test status page - that way we really only show it if local dev and overridden to use the other status page\n}\n\nexport const REFRESH_INTERVAL = 60 * 1000 * 5 // 5 minutes\n\nexport const sidePanelStatusLogic = kea<sidePanelStatusLogicType>([\n    path(['scenes', 'navigation', 'sidepanel', 'sidePanelStatusLogic']),\n    connect({\n        actions: [sidePanelStateLogic, ['openSidePanel', 'closeSidePanel']],\n    }),\n\n    actions({\n        loadStatusPage: true,\n    }),\n\n    reducers(() => ({\n        // Persisted copy to avoid flash effect on page load\n        status: [\n            'operational' as SPComponentStatus,\n            { persist: true },\n            {\n                loadStatusPageSuccess: (_, { statusPage }) => {\n                    const relevantGroups = RELEVANT_GROUPS_MAP[window.location.hostname]\n                    if (!relevantGroups) {\n                        return 'operational'\n                    }\n\n                    const componentStatus = statusPage.components.find(\n                        ({ group_id, status }) =>\n                            group_id && relevantGroups.includes(group_id) && status !== 'operational'\n                    )?.status\n\n                    return componentStatus || 'operational'\n                },\n                loadStatusPageFailure: () => 'operational',\n            },\n        ],\n    })),\n\n    loaders(() => ({\n        statusPage: [\n            null as SPSummary | null,\n            {\n                loadStatusPage: async () => {\n                    const response = await fetch(`${STATUS_PAGE_BASE}/api/v2/summary.json`)\n                    const data: SPSummary = await response.json()\n\n                    return data\n                },\n            },\n        ],\n    })),\n\n    listeners(({ actions, cache }) => ({\n        loadStatusPageSuccess: () => {\n            clearTimeout(cache.timeout)\n            cache.timeout = setTimeout(() => actions.loadStatusPage(), REFRESH_INTERVAL)\n        },\n    })),\n\n    afterMount(({ actions }) => {\n        actions.loadStatusPage()\n    }),\n\n    beforeUnmount(({ cache }) => {\n        clearTimeout(cache.timeout)\n    }),\n])\n", "import { offset } from '@floating-ui/react'\nimport { useValues } from 'kea'\nimport { HedgehogBuddy } from 'lib/components/HedgehogBuddy/HedgehogBuddy'\nimport { hedgehogBuddyLogic } from 'lib/components/HedgehogBuddy/hedgehogBuddyLogic'\nimport { uuid } from 'lib/utils'\nimport { useMemo, useState } from 'react'\nimport { AIConsentPopoverWrapper } from 'scenes/settings/organization/AIConsentPopoverWrapper'\n\nimport { maxLogic } from './maxLogic'\n\nconst HEADLINES = [\n    'How can I help you build?',\n    'What are you curious about?',\n    'How can I help you understand users?',\n    'What do you want to know today?',\n]\n\nexport function Intro(): JSX.Element {\n    const { hedgehogConfig } = useValues(hedgehogBuddyLogic)\n    const { conversation } = useValues(maxLogic)\n\n    const [hedgehogDirection, setHedgehogDirection] = useState<'left' | 'right'>('right')\n\n    const headline = useMemo(() => {\n        if (process.env.STORYBOOK) {\n            return HEADLINES[0] // Preventing UI snapshots from being different every time\n        }\n        return HEADLINES[parseInt((conversation?.id || uuid()).split('-').at(-1) as string, 16) % HEADLINES.length]\n    }, [conversation?.id])\n\n    return (\n        <>\n            <div className=\"flex\">\n                <AIConsentPopoverWrapper\n                    placement={`${hedgehogDirection}-end`}\n                    fallbackPlacements={[`${hedgehogDirection === 'right' ? 'left' : 'right'}-end`]}\n                    middleware={[offset(-12)]}\n                    showArrow\n                >\n                    <HedgehogBuddy\n                        static\n                        hedgehogConfig={{\n                            ...hedgehogConfig,\n                            walking_enabled: false,\n                            controls_enabled: false,\n                        }}\n                        onClick={(actor) => {\n                            if (Math.random() < 0.01) {\n                                actor.setOnFire()\n                            } else {\n                                actor.setRandomAnimation()\n                            }\n                        }}\n                        onActorLoaded={(actor) =>\n                            setTimeout(() => {\n                                actor.setAnimation('wave')\n                                // Make the hedeghog face left, which looks better in the side panel\n                                actor.direction = 'left'\n                            }, 100)\n                        }\n                        onPositionChange={(actor) => setHedgehogDirection(actor.direction)}\n                    />\n                </AIConsentPopoverWrapper>\n            </div>\n            <div className=\"text-center mb-3\">\n                <h2 className=\"text-xl @md/max-welcome:text-2xl font-bold mb-2 text-balance\">{headline}</h2>\n                <div className=\"text-sm text-secondary text-balance\">\n                    I'm Max, here to help you build a successful&nbsp;product. Ask&nbsp;me about your product and\n                    your&nbsp;users.\n                </div>\n            </div>\n        </>\n    )\n}\n", "import { captureException } from '@sentry/react'\nimport { shuffle } from 'd3'\nimport { createParser } from 'eventsource-parser'\nimport { actions, afterMount, connect, kea, key, listeners, path, props, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api, { ApiError } from 'lib/api'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast/LemonToast'\nimport { uuid } from 'lib/utils'\nimport { permanentlyMount } from 'lib/utils/kea-logic-builders'\nimport { projectLogic } from 'scenes/projectLogic'\nimport { maxSettingsLogic } from 'scenes/settings/environment/maxSettingsLogic'\n\nimport {\n    AssistantEventType,\n    AssistantGenerationStatusEvent,\n    AssistantGenerationStatusType,\n    AssistantMessageType,\n    FailureMessage,\n    HumanMessage,\n    ReasoningMessage,\n    RootAssistantMessage,\n} from '~/queries/schema/schema-assistant-messages'\nimport { NodeKind, RefreshType, SuggestedQuestionsQuery } from '~/queries/schema/schema-general'\nimport { Conversation } from '~/types'\n\nimport { maxGlobalLogic } from './maxGlobalLogic'\nimport type { maxLogicType } from './maxLogicType'\nimport { isAssistantMessage, isHumanMessage, isReasoningMessage, isVisualizationMessage } from './utils'\n\nexport interface MaxLogicProps {\n    conversationId?: string\n}\n\nexport type MessageStatus = 'loading' | 'completed' | 'error'\n\nexport type ThreadMessage = RootAssistantMessage & {\n    status: MessageStatus\n}\n\nconst FAILURE_MESSAGE: FailureMessage & ThreadMessage = {\n    type: AssistantMessageType.Failure,\n    content: 'Oops! It looks like I\u2019m having trouble generating this insight. Could you please try again?',\n    status: 'completed',\n}\n\nexport const maxLogic = kea<maxLogicType>([\n    path(['scenes', 'max', 'maxLogic']),\n    props({} as MaxLogicProps),\n    key(({ conversationId }) => conversationId || 'new-conversation'),\n    connect({\n        values: [\n            projectLogic,\n            ['currentProject'],\n            maxGlobalLogic,\n            ['dataProcessingAccepted'],\n            maxSettingsLogic,\n            ['coreMemory'],\n        ],\n    }),\n    actions({\n        askMax: (prompt: string, generationAttempt: number = 0) => ({ prompt, generationAttempt }),\n        stopGeneration: true,\n        setThreadLoaded: (testOnlyOverride = false) => ({ testOnlyOverride }),\n        addMessage: (message: ThreadMessage) => ({ message }),\n        replaceMessage: (index: number, message: ThreadMessage) => ({ index, message }),\n        setMessageStatus: (index: number, status: MessageStatus) => ({ index, status }),\n        setQuestion: (question: string) => ({ question }),\n        setVisibleSuggestions: (suggestions: string[]) => ({ suggestions }),\n        shuffleVisibleSuggestions: true,\n        retryLastMessage: true,\n        scrollThreadToBottom: true,\n        setConversation: (conversation: Conversation) => ({ conversation }),\n        setTraceId: (traceId: string) => ({ traceId }),\n        resetThread: true,\n    }),\n    reducers({\n        question: [\n            '',\n            {\n                setQuestion: (_, { question }) => question,\n                askMax: () => '',\n            },\n        ],\n        conversation: [\n            (_, props) => (props.conversationId ? ({ id: props.conversationId } as Conversation) : null),\n            {\n                setConversation: (_, { conversation }) => conversation,\n            },\n        ],\n        threadRaw: [\n            [] as ThreadMessage[],\n            {\n                addMessage: (state, { message }) => [...state, message],\n                replaceMessage: (state, { message, index }) => [\n                    ...state.slice(0, index),\n                    message,\n                    ...state.slice(index + 1),\n                ],\n                setMessageStatus: (state, { index, status }) => [\n                    ...state.slice(0, index),\n                    {\n                        ...state[index],\n                        status,\n                    },\n                    ...state.slice(index + 1),\n                ],\n                resetThread: (state) => state.filter((message) => !isReasoningMessage(message)),\n            },\n        ],\n        threadLoading: [\n            false,\n            {\n                askMax: () => true,\n                setThreadLoaded: (_, { testOnlyOverride }) => testOnlyOverride,\n            },\n        ],\n        visibleSuggestions: [\n            null as string[] | null,\n            {\n                setVisibleSuggestions: (_, { suggestions }) => suggestions,\n            },\n        ],\n        traceId: [null as string | null, { setTraceId: (_, { traceId }) => traceId }],\n    }),\n    loaders({\n        // TODO: Move question suggestions to `maxGlobalLogic`, which will make this logic `maxThreadLogic`\n        allSuggestions: [\n            null as string[] | null,\n            {\n                loadSuggestions: async ({ refresh }: { refresh: RefreshType }) => {\n                    const response = await api.query<SuggestedQuestionsQuery>(\n                        { kind: NodeKind.SuggestedQuestionsQuery },\n                        undefined,\n                        undefined,\n                        refresh\n                    )\n                    return response.questions\n                },\n            },\n        ],\n    }),\n    listeners(({ actions, values, cache }) => ({\n        [maxSettingsLogic.actionTypes.updateCoreMemorySuccess]: () => {\n            actions.loadSuggestions({ refresh: 'blocking' })\n        },\n        [maxSettingsLogic.actionTypes.loadCoreMemorySuccess]: () => {\n            actions.loadSuggestions({ refresh: 'async_except_on_cache_miss' })\n        },\n        loadSuggestionsSuccess: () => {\n            actions.shuffleVisibleSuggestions()\n        },\n        shuffleVisibleSuggestions: () => {\n            if (!values.allSuggestions) {\n                throw new Error('No question suggestions to shuffle')\n            }\n            const allSuggestionsWithoutCurrentlyVisible = values.allSuggestions.filter(\n                (suggestion) => !values.visibleSuggestions?.includes(suggestion)\n            )\n            if (!process.env.STORYBOOK) {\n                // Randomize order, except in Storybook where we want to keep the order consistent for snapshots\n                shuffle(allSuggestionsWithoutCurrentlyVisible)\n            }\n            actions.setVisibleSuggestions(\n                // We show 3 suggestions, and put the longest one last, so that the suggestions _as a whole_\n                // look pleasant when the 3rd is wrapped to the next line (character count is imperfect but okay)\n                allSuggestionsWithoutCurrentlyVisible.slice(0, 3).sort((a, b) => a.length - b.length)\n            )\n        },\n        askMax: async ({ prompt, generationAttempt }, breakpoint) => {\n            if (generationAttempt === 0) {\n                actions.addMessage({\n                    type: AssistantMessageType.Human,\n                    content: prompt,\n                    status: 'completed',\n                })\n            }\n\n            try {\n                // Generate a trace ID for the conversation run\n                const traceId = uuid()\n                actions.setTraceId(traceId)\n\n                cache.generationController = new AbortController()\n\n                const response = await api.conversations.stream(\n                    {\n                        content: prompt,\n                        conversation: values.conversation?.id,\n                        trace_id: traceId,\n                    },\n                    {\n                        signal: cache.generationController.signal,\n                    }\n                )\n                const reader = response.body?.getReader()\n\n                if (!reader) {\n                    return\n                }\n\n                const decoder = new TextDecoder()\n\n                const parser = createParser({\n                    onEvent: ({ data, event }) => {\n                        if (event === AssistantEventType.Message) {\n                            const parsedResponse = parseResponse<RootAssistantMessage>(data)\n                            if (!parsedResponse) {\n                                return\n                            }\n\n                            if (isHumanMessage(parsedResponse)) {\n                                actions.replaceMessage(values.threadRaw.length - 1, {\n                                    ...parsedResponse,\n                                    status: 'completed',\n                                })\n                            } else if (values.threadRaw[values.threadRaw.length - 1].status === 'completed') {\n                                actions.addMessage({\n                                    ...parsedResponse,\n                                    status: !parsedResponse.id ? 'loading' : 'completed',\n                                })\n                            } else if (parsedResponse) {\n                                actions.replaceMessage(values.threadRaw.length - 1, {\n                                    ...parsedResponse,\n                                    status: !parsedResponse.id ? 'loading' : 'completed',\n                                })\n                            }\n                        } else if (event === AssistantEventType.Status) {\n                            const parsedResponse = parseResponse<AssistantGenerationStatusEvent>(data)\n                            if (!parsedResponse) {\n                                return\n                            }\n\n                            if (parsedResponse.type === AssistantGenerationStatusType.GenerationError) {\n                                actions.setMessageStatus(values.threadRaw.length - 1, 'error')\n                            }\n                        } else if (event === AssistantEventType.Conversation) {\n                            const parsedResponse = parseResponse<Conversation>(data)\n                            if (!parsedResponse) {\n                                return\n                            }\n                            actions.setConversation(parsedResponse)\n                        }\n                    },\n                })\n\n                while (true) {\n                    const { done, value } = await reader.read()\n                    parser.feed(decoder.decode(value))\n                    if (done) {\n                        break\n                    }\n                }\n            } catch (e) {\n                // Exclude AbortController exceptions\n                if (!(e instanceof DOMException) || e.name !== 'AbortError') {\n                    // Prevents parallel generation attempts. Total wait time is: 21 seconds.\n                    if (e instanceof ApiError && e.status === 409 && generationAttempt < 6) {\n                        await breakpoint(1000 * (generationAttempt + 1))\n                        actions.askMax(prompt, generationAttempt + 1)\n                        return\n                    }\n\n                    const relevantErrorMessage = { ...FAILURE_MESSAGE, id: uuid() } // Generic message by default\n                    if (e instanceof ApiError && e.status === 429) {\n                        relevantErrorMessage.content = \"You've reached my usage limit for now. Please try again later.\"\n                    } else {\n                        captureException(e) // Unhandled error, log to Sentry\n                    }\n\n                    if (values.threadRaw[values.threadRaw.length - 1]?.status === 'loading') {\n                        actions.replaceMessage(values.threadRaw.length - 1, relevantErrorMessage)\n                    } else if (values.threadRaw[values.threadRaw.length - 1]?.status !== 'error') {\n                        actions.addMessage(relevantErrorMessage)\n                    }\n                }\n            }\n\n            actions.setThreadLoaded()\n            cache.generationController = undefined\n        },\n        stopGeneration: async () => {\n            if (!values.conversation?.id) {\n                return\n            }\n\n            try {\n                await api.conversations.cancel(values.conversation.id)\n                cache.generationController?.abort()\n                actions.resetThread()\n            } catch (e: any) {\n                lemonToast.error(e?.data?.detail || 'Failed to cancel the generation.')\n            }\n        },\n        retryLastMessage: () => {\n            const lastMessage = values.threadRaw.filter(isHumanMessage).pop() as HumanMessage | undefined\n            if (lastMessage) {\n                actions.askMax(lastMessage.content)\n            }\n        },\n        addMessage: (payload) => {\n            if (isHumanMessage(payload.message) || isVisualizationMessage(payload.message)) {\n                actions.scrollThreadToBottom()\n            }\n        },\n        replaceMessage: (payload) => {\n            if (isVisualizationMessage(payload.message)) {\n                actions.scrollThreadToBottom()\n            }\n        },\n        scrollThreadToBottom: () => {\n            requestAnimationFrame(() => {\n                // On next frame so that the message has been rendered\n                const threadEl = document.getElementsByClassName('@container/thread')[0]\n                let scrollableEl = threadEl?.parentElement // .Navigation3000__scene or .SidePanel3000__content\n                if (scrollableEl && !scrollableEl.classList.contains('SidePanel3000__content')) {\n                    // In this case we need to go up to <main>, since .Navigation3000__scene is not scrollable\n                    scrollableEl = scrollableEl.parentElement\n                }\n                if (scrollableEl) {\n                    scrollableEl.scrollTo({\n                        top: threadEl.scrollHeight,\n                        behavior: 'smooth',\n                    })\n                }\n            })\n        },\n    })),\n    selectors({\n        threadGrouped: [\n            (s) => [s.threadRaw, s.threadLoading],\n            (thread, threadLoading): ThreadMessage[][] => {\n                const threadGrouped: ThreadMessage[][] = []\n                for (let i = 0; i < thread.length; i++) {\n                    const currentMessage: ThreadMessage = thread[i]\n                    const previousMessage: ThreadMessage | undefined = thread[i - 1]\n                    if (currentMessage.type.split('/')[0] === previousMessage?.type.split('/')[0]) {\n                        const lastThreadSoFar = threadGrouped[threadGrouped.length - 1]\n                        if (currentMessage.id && previousMessage.type === AssistantMessageType.Reasoning) {\n                            // Only preserve the latest reasoning message, and remove once reasoning is done\n                            lastThreadSoFar[lastThreadSoFar.length - 1] = currentMessage\n                        } else {\n                            lastThreadSoFar.push(currentMessage)\n                        }\n                    } else {\n                        threadGrouped.push([currentMessage])\n                    }\n                }\n                if (threadLoading) {\n                    const finalMessageSoFar = threadGrouped.at(-1)?.at(-1)\n                    if (finalMessageSoFar?.type === AssistantMessageType.Human || finalMessageSoFar?.id) {\n                        // If now waiting for the current node to start streaming, add \"Thinking\" message\n                        // so that there's _some_ indication of processing\n                        const thinkingMessage: ReasoningMessage & ThreadMessage = {\n                            type: AssistantMessageType.Reasoning,\n                            content: 'Thinking',\n                            status: 'completed',\n                            id: 'loader',\n                        }\n                        if (finalMessageSoFar.type === AssistantMessageType.Human) {\n                            // If the last message was human, we need to add a new \"ephemeral\" AI group\n                            threadGrouped.push([thinkingMessage])\n                        } else {\n                            // Otherwise, add to the last group\n                            threadGrouped[threadGrouped.length - 1].push(thinkingMessage)\n                        }\n                    }\n                }\n                return threadGrouped\n            },\n        ],\n        formPending: [\n            (s) => [s.threadRaw],\n            (threadRaw) => {\n                const lastMessage = threadRaw[threadRaw.length - 1]\n                if (lastMessage && isAssistantMessage(lastMessage)) {\n                    return !!lastMessage.meta?.form\n                }\n                return false\n            },\n        ],\n        inputDisabled: [(s) => [s.formPending], (formPending) => formPending],\n        submissionDisabledReason: [\n            (s) => [s.formPending, s.dataProcessingAccepted, s.question, s.threadLoading],\n            (formPending, dataProcessingAccepted, question, threadLoading): string | undefined => {\n                if (threadLoading) {\n                    return undefined\n                }\n\n                if (!dataProcessingAccepted) {\n                    return 'Please accept OpenAI processing data'\n                }\n\n                if (formPending) {\n                    return 'Please choose one of the options above'\n                }\n\n                if (!question) {\n                    return 'I need some input first'\n                }\n\n                return undefined\n            },\n        ],\n    }),\n    afterMount(({ actions, values }) => {\n        // We only load suggestions on mount if core memory is present\n        if (values.coreMemory) {\n            // In this case we're fine with even really old cached values\n            actions.loadSuggestions({ refresh: 'async_except_on_cache_miss' })\n        }\n    }),\n    permanentlyMount(), // Prevent state from being reset when Max is unmounted, especially key in the side panel\n])\n\n/**\n * Parses the generation result from the API. Some generation chunks might be sent in batches.\n * @param response\n */\nfunction parseResponse<T>(response: string): T | null | undefined {\n    try {\n        const parsed = JSON.parse(response)\n        return parsed as T | null | undefined\n    } catch {\n        return null\n    }\n}\n", "/**\n * The type of error that occurred.\n * @public\n */\nexport type ErrorType = 'invalid-retry' | 'unknown-field'\n\n/**\n * Error thrown when encountering an issue during parsing.\n *\n * @public\n */\nexport class ParseError extends Error {\n  /**\n   * The type of error that occurred.\n   */\n  type: ErrorType\n\n  /**\n   * In the case of an unknown field encountered in the stream, this will be the field name.\n   */\n  field?: string\n\n  /**\n   * In the case of an unknown field encountered in the stream, this will be the value of the field.\n   */\n  value?: string\n\n  /**\n   * The line that caused the error, if available.\n   */\n  line?: string\n\n  constructor(\n    message: string,\n    options: {type: ErrorType; field?: string; value?: string; line?: string},\n  ) {\n    super(message)\n    this.name = 'ParseError'\n    this.type = options.type\n    this.field = options.field\n    this.value = options.value\n    this.line = options.line\n  }\n}\n", "/**\n * EventSource/Server-Sent Events parser\n * @see https://html.spec.whatwg.org/multipage/server-sent-events.html\n */\nimport {ParseError} from './errors.ts'\nimport type {EventSourceParser, ParserCallbacks} from './types.ts'\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction noop(_arg: unknown) {\n  // intentional noop\n}\n\n/**\n * Creates a new EventSource parser.\n *\n * @param callbacks - Callbacks to invoke on different parsing events:\n *   - `onEvent` when a new event is parsed\n *   - `onError` when an error occurs\n *   - `onRetry` when a new reconnection interval has been sent from the server\n *   - `onComment` when a comment is encountered in the stream\n *\n * @returns A new EventSource parser, with `parse` and `reset` methods.\n * @public\n */\nexport function createParser(callbacks: ParserCallbacks): EventSourceParser {\n  const {onEvent = noop, onError = noop, onRetry = noop, onComment} = callbacks\n\n  let incompleteLine = ''\n\n  let isFirstChunk = true\n  let id: string | undefined\n  let data = ''\n  let eventType = ''\n\n  function feed(newChunk: string) {\n    // Strip any UTF8 byte order mark (BOM) at the start of the stream\n    const chunk = isFirstChunk ? newChunk.replace(/^\\xEF\\xBB\\xBF/, '') : newChunk\n\n    // If there was a previous incomplete line, append it to the new chunk,\n    // so we may process it together as a new (hopefully complete) chunk.\n    const [complete, incomplete] = splitLines(`${incompleteLine}${chunk}`)\n\n    for (const line of complete) {\n      parseLine(line)\n    }\n\n    incompleteLine = incomplete\n    isFirstChunk = false\n  }\n\n  function parseLine(line: string) {\n    // If the line is empty (a blank line), dispatch the event\n    if (line === '') {\n      dispatchEvent()\n      return\n    }\n\n    // If the line starts with a U+003A COLON character (:), ignore the line.\n    if (line.startsWith(':')) {\n      if (onComment) {\n        onComment(line.slice(line.startsWith(': ') ? 2 : 1))\n      }\n      return\n    }\n\n    // If the line contains a U+003A COLON character (:)\n    const fieldSeparatorIndex = line.indexOf(':')\n    if (fieldSeparatorIndex !== -1) {\n      // Collect the characters on the line before the first U+003A COLON character (:),\n      // and let `field` be that string.\n      const field = line.slice(0, fieldSeparatorIndex)\n\n      // Collect the characters on the line after the first U+003A COLON character (:),\n      // and let `value` be that string. If value starts with a U+0020 SPACE character,\n      // remove it from value.\n      const offset = line[fieldSeparatorIndex + 1] === ' ' ? 2 : 1\n      const value = line.slice(fieldSeparatorIndex + offset)\n\n      processField(field, value, line)\n      return\n    }\n\n    // Otherwise, the string is not empty but does not contain a U+003A COLON character (:)\n    // Process the field using the whole line as the field name, and an empty string as the field value.\n    // 👆 This is according to spec. That means that a line that has the value `data` will result in\n    // a newline being added to the current `data` buffer, for instance.\n    processField(line, '', line)\n  }\n\n  function processField(field: string, value: string, line: string) {\n    // Field names must be compared literally, with no case folding performed.\n    switch (field) {\n      case 'event':\n        // Set the `event type` buffer to field value\n        eventType = value\n        break\n      case 'data':\n        // Append the field value to the `data` buffer, then append a single U+000A LINE FEED(LF)\n        // character to the `data` buffer.\n        data = `${data}${value}\\n`\n        break\n      case 'id':\n        // If the field value does not contain U+0000 NULL, then set the `ID` buffer to\n        // the field value. Otherwise, ignore the field.\n        id = value.includes('\\0') ? undefined : value\n        break\n      case 'retry':\n        // If the field value consists of only ASCII digits, then interpret the field value as an\n        // integer in base ten, and set the event stream's reconnection time to that integer.\n        // Otherwise, ignore the field.\n        if (/^\\d+$/.test(value)) {\n          onRetry(parseInt(value, 10))\n        } else {\n          onError(\n            new ParseError(`Invalid \\`retry\\` value: \"${value}\"`, {\n              type: 'invalid-retry',\n              value,\n              line,\n            }),\n          )\n        }\n        break\n      default:\n        // Otherwise, the field is ignored.\n        onError(\n          new ParseError(\n            `Unknown field \"${field.length > 20 ? `${field.slice(0, 20)}…` : field}\"`,\n            {type: 'unknown-field', field, value, line},\n          ),\n        )\n        break\n    }\n  }\n\n  function dispatchEvent() {\n    const shouldDispatch = data.length > 0\n    if (shouldDispatch) {\n      onEvent({\n        id,\n        event: eventType || undefined,\n        // If the data buffer's last character is a U+000A LINE FEED (LF) character,\n        // then remove the last character from the data buffer.\n        data: data.endsWith('\\n') ? data.slice(0, -1) : data,\n      })\n    }\n\n    // Reset for the next event\n    id = undefined\n    data = ''\n    eventType = ''\n  }\n\n  function reset(options: {consume?: boolean} = {}) {\n    if (incompleteLine && options.consume) {\n      parseLine(incompleteLine)\n    }\n\n    id = undefined\n    data = ''\n    eventType = ''\n    incompleteLine = ''\n  }\n\n  return {feed, reset}\n}\n\n/**\n * For the given `chunk`, split it into lines according to spec, and return any remaining incomplete line.\n *\n * @param chunk - The chunk to split into lines\n * @returns A tuple containing an array of complete lines, and any remaining incomplete line\n * @internal\n */\nfunction splitLines(chunk: string): [Array<string>, string] {\n  /**\n   * According to the spec, a line is terminated by either:\n   * - U+000D CARRIAGE RETURN U+000A LINE FEED (CRLF) character pair\n   * - a single U+000A LINE FEED(LF) character not preceded by a U+000D CARRIAGE RETURN(CR) character\n   * - a single U+000D CARRIAGE RETURN(CR) character not followed by a U+000A LINE FEED(LF) character\n   */\n\n  const lines: Array<string> = []\n  let incompleteLine = ''\n\n  const totalLength = chunk.length\n  for (let i = 0; i < totalLength; i++) {\n    const char = chunk[i]\n\n    if (char === '\\r' && chunk[i + 1] === '\\n') {\n      // CRLF\n      lines.push(incompleteLine)\n      incompleteLine = ''\n      i++ // Skip the LF character\n    } else if (char === '\\r') {\n      // Standalone CR\n      lines.push(incompleteLine)\n      incompleteLine = ''\n    } else if (char === '\\n') {\n      // Standalone LF\n      lines.push(incompleteLine)\n      incompleteLine = ''\n    } else {\n      incompleteLine += char\n    }\n  }\n\n  return [lines, incompleteLine]\n}\n", "import {\n    AssistantMessage,\n    AssistantMessageType,\n    FailureMessage,\n    HumanMessage,\n    ReasoningMessage,\n    RootAssistantMessage,\n    VisualizationMessage,\n} from '~/queries/schema/schema-assistant-messages'\nimport {\n    AssistantFunnelsQuery,\n    AssistantRetentionQuery,\n    AssistantTrendsQuery,\n} from '~/queries/schema/schema-assistant-queries'\nimport { FunnelsQuery, RetentionQuery, TrendsQuery } from '~/queries/schema/schema-general'\nimport { isFunnelsQuery, isRetentionQuery, isTrendsQuery } from '~/queries/utils'\n\nexport function isReasoningMessage(message: RootAssistantMessage | undefined | null): message is ReasoningMessage {\n    return message?.type === AssistantMessageType.Reasoning\n}\n\nexport function isVisualizationMessage(\n    message: RootAssistantMessage | undefined | null\n): message is VisualizationMessage {\n    return message?.type === AssistantMessageType.Visualization\n}\n\nexport function isHumanMessage(message: RootAssistantMessage | undefined | null): message is HumanMessage {\n    return message?.type === AssistantMessageType.Human\n}\n\nexport function isAssistantMessage(message: RootAssistantMessage | undefined | null): message is AssistantMessage {\n    return message?.type === AssistantMessageType.Assistant\n}\n\nexport function isFailureMessage(message: RootAssistantMessage | undefined | null): message is FailureMessage {\n    return message?.type === AssistantMessageType.Failure\n}\n\n// The cast function below look like no-ops, but they're here to ensure AssistantFooQuery types stay compatible\n// with their respective FooQuery types. If an incompatibility arises, TypeScript will shout here\nfunction castAssistantTrendsQuery(query: AssistantTrendsQuery): TrendsQuery {\n    return query\n}\nfunction castAssistantFunnelsQuery(query: AssistantFunnelsQuery): FunnelsQuery {\n    return query\n}\nfunction castAssistantRetentionQuery(query: AssistantRetentionQuery): RetentionQuery {\n    return query\n}\nexport function castAssistantQuery(\n    query: AssistantTrendsQuery | AssistantFunnelsQuery | AssistantRetentionQuery\n): TrendsQuery | FunnelsQuery | RetentionQuery {\n    if (isTrendsQuery(query)) {\n        return castAssistantTrendsQuery(query)\n    } else if (isFunnelsQuery(query)) {\n        return castAssistantFunnelsQuery(query)\n    } else if (isRetentionQuery(query)) {\n        return castAssistantRetentionQuery(query)\n    }\n    throw new Error('Unsupported query type')\n}\n", "import { IconArrowRight, IconStopFilled } from '@posthog/icons'\nimport { LemonButton, LemonTextArea } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { useEffect, useRef } from 'react'\n\nimport { maxLogic } from './maxLogic'\n\nexport function QuestionInput(): JSX.Element {\n    const { question, threadGrouped, threadLoading, inputDisabled, submissionDisabledReason } = useValues(maxLogic)\n    const { askMax, setQuestion, stopGeneration } = useActions(maxLogic)\n\n    const textAreaRef = useRef<HTMLTextAreaElement | null>(null)\n\n    const isFloating = threadGrouped.length > 0\n\n    useEffect(() => {\n        if (threadLoading) {\n            textAreaRef.current?.focus() // Focus after submit\n        }\n    }, [threadLoading])\n\n    return (\n        <div\n            className={clsx(\n                'px-3',\n                !isFloating ? 'relative w-[min(44rem,100%)]' : 'sticky bottom-0 z-10 w-full max-w-[45rem] self-center'\n            )}\n        >\n            <div\n                className={clsx(\n                    'flex flex-col items-center gap-2',\n                    isFloating &&\n                        'p-1 mb-3 bottom-3 border border-[var(--border-primary)] rounded-lg backdrop-blur bg-[var(--glass-bg-3000)]'\n                )}\n            >\n                <LemonTextArea\n                    ref={textAreaRef}\n                    value={question}\n                    onChange={(value) => setQuestion(value)}\n                    placeholder={threadLoading ? 'Thinking\u2026' : isFloating ? 'Ask follow-up' : 'Ask away'}\n                    onPressEnter={() => {\n                        if (question && !submissionDisabledReason && !threadLoading) {\n                            askMax(question)\n                        }\n                    }}\n                    autoFocus\n                    disabled={inputDisabled}\n                    minRows={1}\n                    maxRows={10}\n                    className={clsx('p-3 pr-12', isFloating && 'border-border-bold')}\n                />\n                <div\n                    className={clsx(\n                        'absolute flex items-center',\n                        isFloating ? 'right-3 bottom-[11px]' : 'right-5 bottom-[7px]'\n                    )}\n                >\n                    <LemonButton\n                        type={(isFloating && !question) || threadLoading ? 'secondary' : 'primary'}\n                        onClick={() => {\n                            if (threadLoading) {\n                                stopGeneration()\n                            } else {\n                                askMax(question)\n                            }\n                        }}\n                        tooltip={threadLoading ? \"Let's bail\" : \"Let's go!\"}\n                        disabledReason={submissionDisabledReason}\n                        size=\"small\"\n                        icon={threadLoading ? <IconStopFilled /> : <IconArrowRight />}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n", "import { IconArrowUpRight, IconGear, IconShuffle } from '@posthog/icons'\nimport { LemonButton, LemonSkeleton } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { maxSettingsLogic } from 'scenes/settings/environment/maxSettingsLogic'\n\nimport { sidePanelSettingsLogic } from '~/layout/navigation-3000/sidepanel/panels/sidePanelSettingsLogic'\n\nimport { maxLogic } from './maxLogic'\n\nexport function QuestionSuggestions(): JSX.Element {\n    const { visibleSuggestions, allSuggestionsLoading, dataProcessingAccepted } = useValues(maxLogic)\n    const { askMax, shuffleVisibleSuggestions } = useActions(maxLogic)\n    const { coreMemory, coreMemoryLoading } = useValues(maxSettingsLogic)\n    const { openSettingsPanel } = useActions(sidePanelSettingsLogic)\n\n    if (!coreMemoryLoading && !coreMemory) {\n        return (\n            <LemonButton\n                size=\"xsmall\"\n                type=\"primary\"\n                onClick={() => askMax('Ready, steady, go!')}\n                disabledReason={!dataProcessingAccepted ? 'Please accept OpenAI processing data' : undefined}\n                center\n            >\n                Let's get started with me learning about your project!\n            </LemonButton>\n        )\n    }\n\n    return (\n        <div className=\"flex items-center justify-center flex-wrap gap-x-2 gap-y-1.5 w-[min(48rem,100%)]\">\n            {\n                coreMemoryLoading || allSuggestionsLoading ? (\n                    Array.from({ length: 3 }).map((_, index) => (\n                        <LemonButton\n                            key={index}\n                            size=\"xsmall\"\n                            type=\"secondary\"\n                            disabled\n                            style={{\n                                width: ['35%', '42.5%', '50%'][index],\n                            }}\n                        >\n                            <LemonSkeleton className=\"h-3 w-full\" />\n                        </LemonButton>\n                    ))\n                ) : visibleSuggestions ? (\n                    <>\n                        {visibleSuggestions.map((suggestion, index) => (\n                            <LemonButton\n                                key={index}\n                                onClick={() => askMax(suggestion)}\n                                size=\"xsmall\"\n                                type=\"secondary\"\n                                sideIcon={<IconArrowUpRight />}\n                                center\n                                className=\"shrink\"\n                                disabledReason={\n                                    !dataProcessingAccepted ? 'Please accept OpenAI processing data' : undefined\n                                }\n                            >\n                                {suggestion}\n                            </LemonButton>\n                        ))}\n                        <div className=\"flex gap-2\">\n                            <LemonButton\n                                onClick={shuffleVisibleSuggestions}\n                                size=\"xsmall\"\n                                type=\"secondary\"\n                                icon={<IconShuffle />}\n                                tooltip=\"Shuffle suggestions\"\n                            />\n                            <LemonButton\n                                onClick={() =>\n                                    openSettingsPanel({ sectionId: 'environment-max', settingId: 'core-memory' })\n                                }\n                                size=\"xsmall\"\n                                type=\"secondary\"\n                                icon={<IconGear />}\n                                tooltip=\"Edit Max's memory\"\n                            />\n                        </div>\n                    </>\n                ) : null /* Some error */\n            }\n        </div>\n    )\n}\n", "import {\n    IconCollapse,\n    IconExpand,\n    IconRefresh,\n    IconThumbsDown,\n    IconThumbsDownFilled,\n    IconThumbsUp,\n    IconThumbsUpFilled,\n    IconWarning,\n    IconX,\n} from '@posthog/icons'\nimport { LemonButton, LemonButtonPropsBase, LemonInput, ProfilePicture, Spinner, Tooltip } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { BreakdownSummary, PropertiesSummary, SeriesSummary } from 'lib/components/Cards/InsightCard/InsightDetails'\nimport { TopHeading } from 'lib/components/Cards/InsightCard/TopHeading'\nimport { IconOpenInNew } from 'lib/lemon-ui/icons'\nimport { LemonMarkdown } from 'lib/lemon-ui/LemonMarkdown'\nimport posthog from 'posthog-js'\nimport React, { useMemo, useState } from 'react'\nimport { urls } from 'scenes/urls'\nimport { userLogic } from 'scenes/userLogic'\nimport { twMerge } from 'tailwind-merge'\n\nimport { Query } from '~/queries/Query/Query'\nimport {\n    AssistantForm,\n    AssistantMessage,\n    FailureMessage,\n    VisualizationMessage,\n} from '~/queries/schema/schema-assistant-messages'\nimport { InsightVizNode, NodeKind } from '~/queries/schema/schema-general'\n\nimport { maxLogic, MessageStatus, ThreadMessage } from './maxLogic'\nimport {\n    castAssistantQuery,\n    isAssistantMessage,\n    isFailureMessage,\n    isHumanMessage,\n    isReasoningMessage,\n    isVisualizationMessage,\n} from './utils'\n\nexport function Thread(): JSX.Element | null {\n    const { threadGrouped } = useValues(maxLogic)\n\n    return (\n        <div className=\"@container/thread flex flex-col items-stretch w-full max-w-200 self-center gap-2 grow p-3\">\n            {threadGrouped.map((group, index) => (\n                <MessageGroup key={index} messages={group} index={index} isFinal={index === threadGrouped.length - 1} />\n            ))}\n        </div>\n    )\n}\n\ninterface MessageGroupProps {\n    messages: ThreadMessage[]\n    isFinal: boolean\n    index: number\n}\n\nfunction MessageGroup({ messages, isFinal: isFinalGroup }: MessageGroupProps): JSX.Element {\n    const { user } = useValues(userLogic)\n\n    const groupType = messages[0].type === 'human' ? 'human' : 'ai'\n\n    return (\n        <div\n            className={clsx(\n                'relative flex gap-2',\n                groupType === 'human' ? 'flex-row-reverse ml-4 @md/thread:ml-10 ' : 'mr-4 @md/thread:mr-10'\n            )}\n        >\n            <Tooltip title={groupType === 'human' ? 'You' : 'Max'}>\n                <ProfilePicture\n                    user={\n                        groupType === 'human'\n                            ? { ...user, hedgehog_config: undefined }\n                            : { hedgehog_config: { ...user?.hedgehog_config, use_as_profile: true } }\n                    }\n                    size=\"lg\"\n                    className=\"hidden @md/thread:flex mt-1 border\"\n                />\n            </Tooltip>\n            <div\n                className={clsx(\n                    'flex flex-col gap-2 min-w-0 w-full',\n                    groupType === 'human' ? 'items-end' : 'items-start'\n                )}\n            >\n                {messages.map((message, messageIndex) => {\n                    const key = message.id || messageIndex\n\n                    if (isHumanMessage(message)) {\n                        return (\n                            <MessageTemplate\n                                key={key}\n                                type=\"human\"\n                                boxClassName={message.status === 'error' ? 'border-danger' : undefined}\n                            >\n                                <LemonMarkdown>{message.content || '*No text.*'}</LemonMarkdown>\n                            </MessageTemplate>\n                        )\n                    } else if (isAssistantMessage(message) || isFailureMessage(message)) {\n                        return (\n                            <TextAnswer\n                                key={key}\n                                message={message}\n                                interactable={messageIndex === messages.length - 1}\n                                isFinalGroup={isFinalGroup}\n                            />\n                        )\n                    } else if (isVisualizationMessage(message)) {\n                        return <VisualizationAnswer key={messageIndex} message={message} status={message.status} />\n                    } else if (isReasoningMessage(message)) {\n                        return (\n                            <MessageTemplate key={key} type=\"ai\">\n                                <div className=\"flex items-center gap-2\">\n                                    <span>{message.content}\u2026</span>\n                                    <Spinner className=\"text-xl\" />\n                                </div>\n                                {message.substeps?.map((substep, substepIndex) => (\n                                    <LemonMarkdown\n                                        key={substepIndex}\n                                        className=\"mt-1.5 leading-6 px-1 text-[0.6875rem] font-semibold bg-surface-secondary rounded w-fit\"\n                                    >\n                                        {substep}\n                                    </LemonMarkdown>\n                                ))}\n                            </MessageTemplate>\n                        )\n                    }\n                    return null // We currently skip other types of messages\n                })}\n                {messages.at(-1)?.status === 'error' && (\n                    <MessageTemplate type=\"ai\" boxClassName=\"border-warning\">\n                        <div className=\"flex items-center gap-1.5\">\n                            <IconWarning className=\"text-xl text-warning\" />\n                            <i>Max is generating this answer one more time because the previous attempt has failed.</i>\n                        </div>\n                    </MessageTemplate>\n                )}\n            </div>\n        </div>\n    )\n}\n\ninterface MessageTemplateProps {\n    type: 'human' | 'ai'\n    action?: React.ReactNode\n    className?: string\n    boxClassName?: string\n    children: React.ReactNode\n}\n\nconst MessageTemplate = React.forwardRef<HTMLDivElement, MessageTemplateProps>(function MessageTemplate(\n    { type, children, className, boxClassName, action },\n    ref\n) {\n    return (\n        <div\n            className={twMerge(\n                'flex flex-col gap-px w-full break-words',\n                type === 'human' ? 'items-end' : 'items-start',\n                className\n            )}\n            ref={ref}\n        >\n            <div\n                className={twMerge(\n                    'border py-2 px-3 rounded-lg bg-surface-primary',\n                    type === 'human' && 'font-medium',\n                    boxClassName\n                )}\n            >\n                {children}\n            </div>\n            {action}\n        </div>\n    )\n})\n\ninterface TextAnswerProps {\n    message: (AssistantMessage | FailureMessage) & ThreadMessage\n    interactable?: boolean\n    isFinalGroup?: boolean\n}\n\nconst TextAnswer = React.forwardRef<HTMLDivElement, TextAnswerProps>(function TextAnswer(\n    { message, interactable, isFinalGroup },\n    ref\n) {\n    const retriable = !!(interactable && isFinalGroup)\n\n    const action = (() => {\n        if (message.status !== 'completed') {\n            return null\n        }\n\n        // Don't show retry button when rate-limited\n        if (\n            isFailureMessage(message) &&\n            !message.content?.includes('usage limit') && // Don't show retry button when rate-limited\n            retriable\n        ) {\n            return <RetriableFailureActions />\n        }\n\n        if (isAssistantMessage(message) && interactable) {\n            // Message has been interrupted with a form\n            if (message.meta?.form?.options && isFinalGroup) {\n                return <AssistantMessageForm form={message.meta.form} />\n            }\n\n            // Show answer actions if the assistant's response is complete at this point\n            return <SuccessActions retriable={retriable} />\n        }\n\n        return null\n    })()\n\n    return (\n        <MessageTemplate\n            type=\"ai\"\n            boxClassName={message.status === 'error' || message.type === 'ai/failure' ? 'border-danger' : undefined}\n            ref={ref}\n            action={action}\n        >\n            <LemonMarkdown>\n                {message.content || '*Max has failed to generate an answer. Please try again.*'}\n            </LemonMarkdown>\n        </MessageTemplate>\n    )\n})\n\ninterface AssistantMessageFormProps {\n    form: AssistantForm\n}\n\nfunction AssistantMessageForm({ form }: AssistantMessageFormProps): JSX.Element {\n    const { askMax } = useActions(maxLogic)\n    return (\n        <div className=\"flex flex-wrap gap-2 mt-1\">\n            {form.options.map((option) => (\n                <LemonButton\n                    key={option.value}\n                    onClick={() => askMax(option.value)}\n                    size=\"small\"\n                    type={\n                        option.variant && ['primary', 'secondary', 'tertiary'].includes(option.variant)\n                            ? (option.variant as LemonButtonPropsBase['type'])\n                            : 'secondary'\n                    }\n                >\n                    {option.value}\n                </LemonButton>\n            ))}\n        </div>\n    )\n}\n\nfunction VisualizationAnswer({\n    message,\n    status,\n}: {\n    message: VisualizationMessage\n    status?: MessageStatus\n}): JSX.Element | null {\n    const [isSummaryShown, setIsSummaryShown] = useState(false)\n\n    const query = useMemo<InsightVizNode | null>(() => {\n        if (message.answer) {\n            return {\n                kind: NodeKind.InsightVizNode,\n                source: castAssistantQuery(message.answer),\n                showHeader: true,\n            }\n        }\n\n        return null\n    }, [message])\n\n    return status !== 'completed'\n        ? null\n        : query && (\n              <>\n                  <MessageTemplate type=\"ai\" className=\"min-h-60 w-full\" boxClassName=\"w-full\">\n                      <Query query={query} readOnly embedded />\n                      <div className=\"flex items-center justify-between mt-2\">\n                          <LemonButton\n                              sideIcon={isSummaryShown ? <IconCollapse /> : <IconExpand />}\n                              onClick={() => setIsSummaryShown(!isSummaryShown)}\n                              size=\"xsmall\"\n                              className=\"-m-1\"\n                              tooltip={isSummaryShown ? 'Hide definition' : 'Show definition'}\n                          >\n                              <h5 className=\"m-0 leading-none\">\n                                  <TopHeading query={query} />\n                              </h5>\n                          </LemonButton>\n                          <LemonButton\n                              to={urls.insightNew({ query })}\n                              sideIcon={<IconOpenInNew />}\n                              size=\"xsmall\"\n                              targetBlank\n                          >\n                              Open as new insight\n                          </LemonButton>\n                      </div>\n                      {isSummaryShown && (\n                          <>\n                              <SeriesSummary query={query.source} heading={null} />\n                              <div className=\"flex flex-wrap gap-4 mt-1 *:grow\">\n                                  <PropertiesSummary properties={query.source.properties} />\n                                  <BreakdownSummary query={query.source} />\n                              </div>\n                          </>\n                      )}\n                  </MessageTemplate>\n              </>\n          )\n}\n\nfunction RetriableFailureActions(): JSX.Element {\n    const { retryLastMessage } = useActions(maxLogic)\n\n    return (\n        <LemonButton\n            icon={<IconRefresh />}\n            type=\"tertiary\"\n            size=\"xsmall\"\n            tooltip=\"Try again\"\n            onClick={() => retryLastMessage()}\n            className=\"ml-1 -mb-1\"\n        >\n            Try again\n        </LemonButton>\n    )\n}\n\nfunction SuccessActions({ retriable }: { retriable: boolean }): JSX.Element {\n    const { traceId } = useValues(maxLogic)\n    const { retryLastMessage } = useActions(maxLogic)\n\n    const [rating, setRating] = useState<'good' | 'bad' | null>(null)\n    const [feedback, setFeedback] = useState<string>('')\n    const [feedbackInputStatus, setFeedbackInputStatus] = useState<'hidden' | 'pending' | 'submitted'>('hidden')\n\n    function submitRating(newRating: 'good' | 'bad'): void {\n        if (rating) {\n            return // Already rated\n        }\n        setRating(newRating)\n        posthog.capture('$ai_metric', {\n            $ai_metric_name: 'quality',\n            $ai_metric_value: newRating,\n            $ai_trace_id: traceId,\n        })\n        if (newRating === 'bad') {\n            setFeedbackInputStatus('pending')\n        }\n    }\n\n    function submitFeedback(): void {\n        if (!feedback) {\n            return // Input is empty\n        }\n        posthog.capture('$ai_feedback', {\n            $ai_feedback_text: feedback,\n            $ai_trace_id: traceId,\n        })\n        setFeedbackInputStatus('submitted')\n    }\n\n    return (\n        <>\n            <div className=\"flex items-center ml-1 -mb-1\">\n                {rating !== 'bad' && (\n                    <LemonButton\n                        icon={rating === 'good' ? <IconThumbsUpFilled /> : <IconThumbsUp />}\n                        type=\"tertiary\"\n                        size=\"xsmall\"\n                        tooltip=\"Good answer\"\n                        onClick={() => submitRating('good')}\n                    />\n                )}\n                {rating !== 'good' && (\n                    <LemonButton\n                        icon={rating === 'bad' ? <IconThumbsDownFilled /> : <IconThumbsDown />}\n                        type=\"tertiary\"\n                        size=\"xsmall\"\n                        tooltip=\"Bad answer\"\n                        onClick={() => submitRating('bad')}\n                    />\n                )}\n                {retriable && (\n                    <LemonButton\n                        icon={<IconRefresh />}\n                        type=\"tertiary\"\n                        size=\"xsmall\"\n                        tooltip=\"Try again\"\n                        onClick={() => retryLastMessage()}\n                    />\n                )}\n            </div>\n            {feedbackInputStatus !== 'hidden' && (\n                <MessageTemplate type=\"ai\">\n                    <div className=\"flex items-center gap-1\">\n                        <h4 className=\"m-0 text-sm grow\">\n                            {feedbackInputStatus === 'pending'\n                                ? 'What disappointed you about the answer?'\n                                : 'Thank you for your feedback!'}\n                        </h4>\n                        <LemonButton\n                            icon={<IconX />}\n                            type=\"tertiary\"\n                            size=\"xsmall\"\n                            onClick={() => setFeedbackInputStatus('hidden')}\n                        />\n                    </div>\n                    {feedbackInputStatus === 'pending' && (\n                        <div className=\"flex w-full gap-2 items-center mt-1.5\">\n                            <LemonInput\n                                placeholder=\"Help us improve Max\u2026\"\n                                fullWidth\n                                value={feedback}\n                                onChange={(newValue) => setFeedback(newValue)}\n                                onPressEnter={() => submitFeedback()}\n                                autoFocus\n                            />\n                            <LemonButton\n                                type=\"primary\"\n                                onClick={() => submitFeedback()}\n                                disabledReason={!feedback ? 'Please type a few words!' : undefined}\n                            >\n                                Submit\n                            </LemonButton>\n                        </div>\n                    )}\n                </MessageTemplate>\n            )}\n        </>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "import_kea_subscriptions", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "import_kea_test_utils", "activityFiltersForScene", "sceneConfig", "item_id", "removeProjectIdIfPresent", "sidePanelContextLogic", "sceneLogic", "s", "state", "props", "activeSceneLogic", "SIDE_PANEL_CONTEXT_KEY", "activeLoadedScene", "context", "import_jsx_runtime", "POLL_TIMEOUT", "sidePanelActivityLogic", "sidePanelContextLogic", "projectLogic", "sidePanelStateLogic", "pageIsVisible", "tab", "onlyUnread", "filters", "showing", "_", "state", "actions", "values", "cache", "current", "latestNotification", "b", "api_default", "ic", "breakpoint", "response", "toParams", "pollTimeoutMilliseconds", "POLL_TIMEOUT", "options", "s", "allActivityResponse", "humanize", "describerFor", "importantChanges", "importantChangesHumanized", "changelogNotification", "flagPayload", "Co", "dayjs", "lastRead", "changeLogIsUnread", "notifications", "LemonMarkdown", "a", "unread", "unreadCount", "sceneSidePanelContext", "activityFilters", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "STATUS_PAGE_BASE", "RELEVANT_GROUPS_MAP", "REFRESH_INTERVAL", "sidePanelStatusLogic", "sidePanelStateLogic", "_", "statusPage", "relevantGroups", "group_id", "status", "actions", "cache", "ALWAYS_EXTRA_TABS", "sidePanelLogic", "featureFlagLogic", "preflightLogic", "activationLogic", "sidePanelStateLogic", "sidePanelActivityLogic", "sidePanelStatusLogic", "userLogic", "sidePanelContextLogic", "teamLogic", "s", "isCloudOrDev", "featureflags", "sceneSidePanelContext", "currentTeam", "tabs", "FEATURE_FLAGS", "teamCreatedAt", "dayjs", "enabledTabs", "selectedTab", "sidePanelOpen", "unreadCount", "status", "hasAvailableFeature", "shouldShowActivationTab", "tab", "visibleTabs", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "ParseError", "message", "options", "__publicField", "noop", "_arg", "createParser", "callbacks", "onEvent", "onError", "onRetry", "onComment", "incompleteLine", "isFirstChunk", "id", "data", "eventType", "feed", "newChunk", "chunk", "complete", "incomplete", "splitLines", "line", "parseLine", "dispatchEvent", "fieldSeparatorIndex", "field", "offset", "value", "processField", "reset", "lines", "totalLength", "i", "char", "import_kea", "import_kea_loaders", "init_dirname", "init_buffer", "init_process", "isReasoningMessage", "message", "isVisualizationMessage", "isHumanMessage", "isAssistantMessage", "isFailureMessage", "castAssistantQuery", "query", "isTrendsQuery", "isFunnelsQuery", "isRetentionQuery", "FAILURE_MESSAGE", "maxLogic", "conversationId", "projectLogic", "maxGlobalLogic", "maxSettingsLogic", "prompt", "generationAttempt", "testOnlyOverride", "message", "index", "status", "question", "suggestions", "conversation", "traceId", "_", "props", "state", "isReasoningMessage", "refresh", "api_default", "actions", "values", "cache", "allSuggestionsWithoutCurrentlyVisible", "suggestion", "process_exports", "shuffle_default", "a", "b", "breakpoint", "uuid", "reader", "decoder", "parser", "createParser", "data", "event", "parsedResponse", "parseResponse", "isHumanMessage", "done", "value", "e", "ApiError", "relevantErrorMessage", "captureException", "lemonToast", "lastMessage", "payload", "isVisualizationMessage", "threadEl", "scrollableEl", "s", "thread", "threadLoading", "threadGrouped", "i", "currentMessage", "previousMessage", "lastThreadSoFar", "finalMessageSoFar", "thinkingMessage", "threadRaw", "isAssistantMessage", "formPending", "dataProcessingAccepted", "permanentlyMount", "response", "import_jsx_runtime", "HEADLINES", "Intro", "hedgehogConfig", "hedgehogBuddyLogic", "conversation", "maxLogic", "hedgehogDirection", "setHedgehogDirection", "headline", "process_exports", "uuid", "AIConsentPopoverWrapper", "offset", "HedgehogBuddy", "actor", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_react", "import_jsx_runtime", "QuestionInput", "question", "threadGrouped", "threadLoading", "inputDisabled", "submissionDisabledReason", "maxLogic", "askMax", "setQuestion", "stopGeneration", "textAreaRef", "isFloating", "clsx", "LemonTextArea", "value", "LemonButton", "IconStopFilled", "IconArrowRight", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "QuestionSuggestions", "visibleSuggestions", "allSuggestionsLoading", "dataProcessingAccepted", "maxLogic", "askMax", "shuffleVisibleSuggestions", "coreMemory", "coreMemoryLoading", "maxSettingsLogic", "openSettingsPanel", "sidePanelSettingsLogic", "LemonButton", "_", "index", "LemonSkeleton", "suggestion", "IconArrowUpRight", "IconShuffle", "IconGear", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_react", "import_jsx_runtime", "Thread", "threadGrouped", "maxLogic", "group", "index", "MessageGroup", "messages", "isFinalGroup", "user", "userLogic", "groupType", "clsx", "Tooltip", "ProfilePicture", "message", "messageIndex", "key", "isHumanMessage", "MessageTemplate", "LemonMarkdown", "isAssistantMessage", "isFailureMessage", "TextAnswer", "isVisualizationMessage", "VisualizationAnswer", "isReasoningMessage", "Spinner", "substep", "substepIndex", "IconWarning", "React", "type", "children", "className", "boxClassName", "action", "ref", "twMerge", "interactable", "retriable", "RetriableFailureActions", "AssistantMessageForm", "SuccessActions", "form", "askMax", "option", "LemonButton", "status", "isSummaryShown", "setIsSummaryShown", "query", "castAssistantQuery", "Query", "IconCollapse", "IconExpand", "TopHeading", "urls", "IconOpenInNew", "SeriesSummary", "PropertiesSummary", "BreakdownSummary", "retryLastMessage", "IconRefresh", "traceId", "rating", "setRating", "feedback", "setFeedback", "feedbackInputStatus", "setFeedbackInputStatus", "submitRating", "newRating", "Co", "submitFeedback", "IconThumbsUpFilled", "IconThumbsUp", "IconThumbsDownFilled", "IconThumbsDown", "IconX", "LemonInput", "newValue", "import_jsx_runtime", "scene", "Max", "featureFlags", "featureFlagLogic", "sidePanelOpen", "selectedTab", "sidePanelLogic", "closeSidePanel", "FEATURE_FLAGS", "IconSidePanel", "LemonButton", "IconArrowLeft", "maxLogic", "MaxInstance", "NotFound", "threadGrouped", "openSettingsPanel", "sidePanelSettingsLogic", "PageHeader", "IconGear", "Thread", "QuestionInput", "Intro", "QuestionSuggestions"]
}
