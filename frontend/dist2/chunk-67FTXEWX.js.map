{
  "version": 3,
  "sources": ["../src/lib/integrations/SlackIntegrationHelpers.tsx", "../src/lib/integrations/slackIntegrationLogic.ts"],
  "sourcesContent": ["import { LemonBanner, LemonButton, LemonInputSelect, LemonInputSelectOption, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { IconSlackExternal } from 'lib/lemon-ui/icons'\nimport { useEffect, useMemo } from 'react'\n\nimport { IntegrationType, SlackChannelType } from '~/types'\n\nimport { slackIntegrationLogic } from './slackIntegrationLogic'\n\nconst getSlackChannelOptions = (slackChannels?: SlackChannelType[] | null): LemonInputSelectOption[] | null => {\n    return slackChannels\n        ? slackChannels.map((x) => ({\n              key: `${x.id}|#${x.name}`,\n              labelComponent: (\n                  <span className=\"flex items-center\">\n                      {x.is_private ? `\uD83D\uDD12${x.name}` : `#${x.name}`}\n                      {x.is_ext_shared ? <IconSlackExternal className=\"ml-2\" /> : null}\n                  </span>\n              ),\n              label: `${x.id} #${x.name}`,\n          }))\n        : null\n}\n\nexport type SlackChannelPickerProps = {\n    integration: IntegrationType\n    value?: string\n    onChange?: (value: string | null) => void\n    disabled?: boolean\n}\n\nexport function SlackChannelPicker({ onChange, value, integration, disabled }: SlackChannelPickerProps): JSX.Element {\n    const { slackChannels, slackChannelsLoading, isMemberOfSlackChannel } = useValues(\n        slackIntegrationLogic({ id: integration.id })\n    )\n    const { loadSlackChannels } = useActions(slackIntegrationLogic({ id: integration.id }))\n\n    // If slackChannels aren't loaded, make sure we display only the channel name and not the actual underlying value\n    const slackChannelOptions = useMemo(() => getSlackChannelOptions(slackChannels), [slackChannels])\n    const showSlackMembershipWarning = value && isMemberOfSlackChannel(value) === false\n\n    // Sometimes the parent will only store the channel ID and not the name, so we need to handle that\n\n    const modifiedValue = useMemo(() => {\n        if (value?.split('|').length === 1) {\n            const channel = slackChannels?.find((x) => x.id === value)\n\n            if (channel) {\n                return `${channel.id}|#${channel.name}`\n            }\n        }\n\n        return value\n    }, [value, slackChannels])\n\n    useEffect(() => {\n        if (!disabled) {\n            loadSlackChannels()\n        }\n    }, [loadSlackChannels, disabled])\n\n    return (\n        <>\n            <LemonInputSelect\n                onChange={(val) => onChange?.(val[0] ?? null)}\n                value={modifiedValue ? [modifiedValue] : []}\n                onFocus={() => !slackChannels && !slackChannelsLoading && loadSlackChannels()}\n                disabled={disabled}\n                mode=\"single\"\n                data-attr=\"select-slack-channel\"\n                placeholder=\"Select a channel...\"\n                options={\n                    slackChannelOptions ??\n                    (modifiedValue\n                        ? [\n                              {\n                                  key: modifiedValue,\n                                  label: modifiedValue?.split('|')[1] ?? modifiedValue,\n                              },\n                          ]\n                        : [])\n                }\n                loading={slackChannelsLoading}\n            />\n\n            {showSlackMembershipWarning ? (\n                <LemonBanner type=\"info\">\n                    <div className=\"flex gap-2 items-center\">\n                        <span>\n                            The PostHog Slack App is not in this channel. Please add it to the channel otherwise\n                            Subscriptions will fail to be delivered.{' '}\n                            <Link to=\"https://posthog.com/docs/webhooks/slack\" target=\"_blank\">\n                                See the Docs for more information\n                            </Link>\n                        </span>\n                        <LemonButton type=\"secondary\" onClick={loadSlackChannels} loading={slackChannelsLoading}>\n                            Check again\n                        </LemonButton>\n                    </div>\n                </LemonBanner>\n            ) : null}\n        </>\n    )\n}\n", "import { actions, connect, kea, key, path, props, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\n\nimport { SlackChannelType } from '~/types'\n\nimport type { slackIntegrationLogicType } from './slackIntegrationLogicType'\n\nexport const slackIntegrationLogic = kea<slackIntegrationLogicType>([\n    props({} as { id: number }),\n    key((props) => props.id),\n    path((key) => ['lib', 'integrations', 'slackIntegrationLogic', key]),\n    connect({\n        values: [preflightLogic, ['siteUrlMisconfigured', 'preflight']],\n    }),\n    actions({\n        loadSlackChannels: true,\n    }),\n\n    loaders(({ props }) => ({\n        slackChannels: [\n            null as SlackChannelType[] | null,\n            {\n                loadSlackChannels: async () => {\n                    const res = await api.integrations.slackChannels(props.id)\n                    return res.channels\n                },\n            },\n        ],\n    })),\n    selectors({\n        isMemberOfSlackChannel: [\n            (s) => [s.slackChannels],\n            (slackChannels) => {\n                return (channel: string) => {\n                    if (!slackChannels) {\n                        return null\n                    }\n\n                    const [channelId] = channel.split('|')\n\n                    return slackChannels.find((x) => x.id === channelId)?.is_member ?? false\n                }\n            },\n        ],\n    }),\n])\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "slackIntegrationLogic", "props", "key", "preflightLogic", "api_default", "s", "slackChannels", "channel", "channelId", "x", "import_jsx_runtime", "getSlackChannelOptions", "slackChannels", "x", "IconSlackExternal", "SlackChannelPicker", "onChange", "value", "integration", "disabled", "slackChannelsLoading", "isMemberOfSlackChannel", "slackIntegrationLogic", "loadSlackChannels", "slackChannelOptions", "showSlackMembershipWarning", "modifiedValue", "channel", "LemonInputSelect", "val", "LemonBanner", "Link", "LemonButton"]
}
