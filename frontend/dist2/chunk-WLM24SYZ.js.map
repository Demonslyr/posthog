{
  "version": 3,
  "sources": ["../src/scenes/dashboard/DashboardTemplateChooser.tsx", "../src/lib/components/FallbackCoverImage/FallbackCoverImage.tsx", "../src/lib/components/IframedToolbarBrowser/iframedToolbarBrowserLogic.ts", "../src/scenes/dashboard/dashboardTemplateVariablesLogic.ts"],
  "sourcesContent": ["import './DashboardTemplateChooser.scss'\n\nimport { LemonTag } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { FallbackCoverImage } from 'lib/components/FallbackCoverImage/FallbackCoverImage'\nimport { Spinner } from 'lib/lemon-ui/Spinner'\nimport BlankDashboardHog from 'public/blank-dashboard-hog.png'\nimport { useState } from 'react'\nimport {\n    DashboardTemplateProps,\n    dashboardTemplatesLogic,\n} from 'scenes/dashboard/dashboards/templates/dashboardTemplatesLogic'\nimport { newDashboardLogic } from 'scenes/dashboard/newDashboardLogic'\n\nimport { DashboardTemplateType, TemplateAvailabilityContext } from '~/types'\n\nexport function DashboardTemplateChooser({\n    scope = 'default',\n    onItemClick,\n    redirectAfterCreation = true,\n    availabilityContexts,\n}: DashboardTemplateProps): JSX.Element {\n    const templatesLogic = dashboardTemplatesLogic({ scope })\n    const { allTemplates, allTemplatesLoading } = useValues(templatesLogic)\n\n    const { isLoading, newDashboardModalVisible } = useValues(newDashboardLogic)\n    const {\n        setActiveDashboardTemplate,\n        createDashboardFromTemplate,\n        addDashboard,\n        setIsLoading,\n        showVariableSelectModal,\n    } = useActions(newDashboardLogic)\n\n    return (\n        <div>\n            <div className=\"DashboardTemplateChooser\">\n                {!availabilityContexts || availabilityContexts.includes(TemplateAvailabilityContext.GENERAL) ? (\n                    <TemplateItem\n                        template={{\n                            template_name: 'Blank dashboard',\n                            dashboard_description: 'Create a blank dashboard',\n                            image_url: BlankDashboardHog,\n                        }}\n                        onClick={() => {\n                            if (isLoading) {\n                                return\n                            }\n                            setIsLoading(true)\n                            addDashboard({\n                                name: 'New Dashboard',\n                                show: true,\n                            })\n                        }}\n                        index={0}\n                        data-attr=\"create-dashboard-blank\"\n                    />\n                ) : null}\n                {allTemplatesLoading ? (\n                    <Spinner className=\"text-6xl\" />\n                ) : (\n                    allTemplates\n                        .filter((template) => {\n                            if (availabilityContexts) {\n                                return availabilityContexts.some((context) =>\n                                    template.availability_contexts?.includes(context)\n                                )\n                            }\n                            return true\n                        })\n                        .map((template, index) => (\n                            <TemplateItem\n                                key={index}\n                                template={template}\n                                onClick={() => {\n                                    if (isLoading) {\n                                        return\n                                    }\n                                    setIsLoading(true)\n                                    // while we might receive templates from the external repository\n                                    // we need to handle templates that don't have variables\n                                    if ((template.variables || []).length === 0) {\n                                        if (template.variables === null) {\n                                            template.variables = []\n                                        }\n                                        createDashboardFromTemplate(\n                                            template,\n                                            template.variables || [],\n                                            redirectAfterCreation\n                                        )\n                                    } else {\n                                        if (!newDashboardModalVisible) {\n                                            showVariableSelectModal(template)\n                                        } else {\n                                            setActiveDashboardTemplate(template)\n                                        }\n                                    }\n                                    onItemClick?.(template)\n                                }}\n                                index={index + 1}\n                                data-attr=\"create-dashboard-from-template\"\n                            />\n                        ))\n                )}\n            </div>\n        </div>\n    )\n}\n\nfunction TemplateItem({\n    template,\n    onClick,\n    index,\n    'data-attr': dataAttr,\n}: {\n    template: Pick<DashboardTemplateType, 'template_name' | 'dashboard_description' | 'image_url' | 'tags'>\n    onClick: () => void\n    index: number\n    'data-attr': string\n}): JSX.Element {\n    const [isHovering, setIsHovering] = useState(false)\n\n    return (\n        <div\n            className=\"cursor-pointer border rounded TemplateItem flex flex-col transition-all\"\n            onClick={onClick}\n            onMouseEnter={() => setIsHovering(true)}\n            onMouseLeave={() => setIsHovering(false)}\n            data-attr={dataAttr}\n        >\n            <div\n                className={clsx('transition-all w-full overflow-hidden', isHovering ? 'h-4 min-h-4' : 'h-30 min-h-30')}\n            >\n                <FallbackCoverImage src={template?.image_url} alt=\"cover photo\" index={index} imageClassName=\"h-30\" />\n            </div>\n\n            <h5 className=\"px-2 mb-1\">{template?.template_name}</h5>\n            <div className=\"flex gap-x-1 px-2 mb-1\">\n                {template.tags?.map((tag, index) => (\n                    <LemonTag key={index} type=\"option\">\n                        {tag}\n                    </LemonTag>\n                ))}\n            </div>\n            <div className=\"px-2 py-1 overflow-y-auto grow\">\n                <p className={clsx('text-secondary text-xs', isHovering ? '' : 'line-clamp-2')}>\n                    {template?.dashboard_description ?? ' '}\n                </p>\n            </div>\n        </div>\n    )\n}\n", "import clsx from 'clsx'\nimport { getSeriesColor } from 'lib/colors'\nimport { useState } from 'react'\n\nexport function FallbackCoverImage({\n    src,\n    alt,\n    index,\n    className = '',\n    imageClassName = '',\n}: {\n    src: string | undefined\n    alt: string\n    index: number\n    className?: string\n    imageClassName?: string\n}): JSX.Element {\n    const [hasError, setHasError] = useState(false)\n\n    const handleImageError = (): void => {\n        setHasError(true)\n    }\n\n    return (\n        <>\n            {hasError || !src ? (\n                <div\n                    className={clsx('w-full h-full', className)}\n                    // dynamic color based on index\n                    // eslint-disable-next-line react/forbid-dom-props\n                    style={{\n                        background: getSeriesColor(index),\n                    }}\n                />\n            ) : (\n                <img\n                    className={clsx('object-cover w-full', imageClassName)}\n                    src={src}\n                    alt={alt}\n                    onError={handleImageError}\n                />\n            )}\n        </>\n    )\n}\n", "import { actions, afterMount, beforeUnmount, connect, kea, listeners, path, props, reducers, selectors } from 'kea'\nimport {\n    authorizedUrlListLogic,\n    AuthorizedUrlListType,\n    defaultAuthorizedUrlProperties,\n} from 'lib/components/AuthorizedUrlList/authorizedUrlListLogic'\nimport { CommonFilters, HeatmapFilters, HeatmapFixedPositionMode } from 'lib/components/heatmaps/types'\nimport {\n    calculateViewportRange,\n    DEFAULT_HEATMAP_FILTERS,\n    PostHogAppToolbarEvent,\n} from 'lib/components/IframedToolbarBrowser/utils'\nimport { LemonBannerProps } from 'lib/lemon-ui/LemonBanner'\nimport posthog from 'posthog-js'\nimport { RefObject } from 'react'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { ToolbarUserIntent } from '~/types'\n\nimport type { iframedToolbarBrowserLogicType } from './iframedToolbarBrowserLogicType'\n\nexport type IframedToolbarBrowserLogicProps = {\n    iframeRef: RefObject<HTMLIFrameElement | null>\n    clearBrowserUrlOnUnmount?: boolean\n    userIntent?: ToolbarUserIntent\n    automaticallyAuthorizeBrowserUrl?: boolean\n}\n\nexport interface IFrameBanner {\n    level: LemonBannerProps['type']\n    message: string | JSX.Element\n}\n\nexport const UserIntentVerb: {\n    [K in ToolbarUserIntent]: string\n} = {\n    heatmaps: 'view the heatmap',\n    'add-action': 'add actions',\n    'edit-action': 'edit the action',\n    'add-experiment': 'add web experiment',\n    'edit-experiment': 'edit the experiment',\n}\n\nexport const iframedToolbarBrowserLogic = kea<iframedToolbarBrowserLogicType>([\n    path(['lib', 'components', 'iframedToolbarBrowser', 'iframedToolbarBrowserLogic']),\n    props({\n        automaticallyAuthorizeBrowserUrl: false,\n    } as IframedToolbarBrowserLogicProps),\n\n    connect({\n        values: [\n            authorizedUrlListLogic({ ...defaultAuthorizedUrlProperties, type: AuthorizedUrlListType.TOOLBAR_URLS }),\n            ['urlsKeyed', 'checkUrlIsAuthorized'],\n            teamLogic,\n            ['currentTeam'],\n        ],\n        actions: [\n            authorizedUrlListLogic({ ...defaultAuthorizedUrlProperties, type: AuthorizedUrlListType.TOOLBAR_URLS }),\n            ['addUrl'],\n            teamLogic,\n            ['updateCurrentTeamSuccess'],\n        ],\n    }),\n\n    actions({\n        setBrowserUrl: (url: string | null) => ({ url }),\n        setProposedBrowserUrl: (url: string | null) => ({ url }),\n        onIframeLoad: true,\n        sendToolbarMessage: (type: PostHogAppToolbarEvent, payload?: Record<string, any>) => ({\n            type,\n            payload,\n        }),\n        // TRICKY: duplicated with the heatmapLogic so that we can share the settings picker\n        patchHeatmapFilters: (filters: Partial<HeatmapFilters>) => ({ filters }),\n        setHeatmapColorPalette: (Palette: string | null) => ({ Palette }),\n        setHeatmapFixedPositionMode: (mode: HeatmapFixedPositionMode) => ({ mode }),\n        setCommonFilters: (filters: CommonFilters) => ({ filters }),\n        // TRICKY: duplication ends\n        setIframeWidth: (width: number | null) => ({ width }),\n        setIframeBanner: (banner: IFrameBanner | null) => ({ banner }),\n        startTrackingLoading: true,\n        stopTrackingLoading: true,\n        enableElementSelector: true,\n        disableElementSelector: true,\n        setNewActionName: (name: string | null) => ({ name }),\n        toolbarMessageReceived: (type: PostHogAppToolbarEvent, payload: Record<string, any>) => ({ type, payload }),\n        setCurrentPath: (path: string) => ({ path }),\n        setInitialPath: (path: string) => ({ path }),\n    }),\n\n    reducers(({ props }) => ({\n        // they're called common filters in the toolbar because they're shared between heatmaps and clickmaps\n        // the name is continued here since they're passed down into the embedded iframe\n        commonFilters: [\n            { date_from: '-7d' } as CommonFilters,\n            {\n                setCommonFilters: (_, { filters }) => filters,\n            },\n        ],\n        heatmapColorPalette: [\n            'default' as string | null,\n            {\n                setHeatmapColorPalette: (_, { Palette }) => Palette,\n            },\n        ],\n        heatmapFilters: [\n            DEFAULT_HEATMAP_FILTERS,\n            {\n                patchHeatmapFilters: (state, { filters }) => ({ ...state, ...filters }),\n            },\n        ],\n        heatmapFixedPositionMode: [\n            'fixed' as HeatmapFixedPositionMode,\n            {\n                setHeatmapFixedPositionMode: (_, { mode }) => mode,\n            },\n        ],\n        iframeWidth: [\n            null as number | null,\n            {\n                setIframeWidth: (_, { width }) => width,\n            },\n        ],\n        browserUrl: [\n            null as string | null,\n            { persist: props.userIntent == 'heatmaps' },\n            {\n                setBrowserUrl: (_, { url }) => url,\n            },\n        ],\n        currentPath: [\n            // this does not have the leading / because we always need that to be a given since this value is user-editable\n            '' as string,\n            {\n                setCurrentPath: (_, { path }) => path,\n            },\n        ],\n        initialPath: [\n            // similar to currentPath, this also does not have the leading /\n            // this is used to set the initial browser URL if the user provides a path to navigate to\n            // we can't do this from within the iFrame with window.location.href = currentPath because we get XSS errors\n            '' as string,\n            {\n                setInitialPath: (_, { path }) => path,\n            },\n        ],\n        loading: [\n            false as boolean,\n            {\n                setBrowserUrl: (state, { url }) => (url?.trim().length ? true : state),\n                setIframeBanner: (state, { banner }) => (banner?.level == 'error' ? false : state),\n                startTrackingLoading: () => true,\n                stopTrackingLoading: () => false,\n            },\n        ],\n        iframeBanner: [\n            null as IFrameBanner | null,\n            {\n                setIframeBanner: (_, { banner }) => banner,\n            },\n        ],\n        proposedBrowserUrl: [\n            null as string | null,\n            {\n                setProposedBrowserUrl: (_, { url }) => url,\n            },\n        ],\n    })),\n\n    selectors({\n        isBrowserUrlAuthorized: [\n            (s) => [s.browserUrl, s.checkUrlIsAuthorized],\n            (browserUrl, checkUrlIsAuthorized) => {\n                if (!browserUrl) {\n                    return false\n                }\n                return checkUrlIsAuthorized(browserUrl)\n            },\n        ],\n        isProposedBrowserUrlAuthorized: [\n            (s) => [s.proposedBrowserUrl, s.checkUrlIsAuthorized],\n            (proposedBrowserUrl, checkUrlIsAuthorized) => {\n                if (!proposedBrowserUrl) {\n                    return false\n                }\n                return checkUrlIsAuthorized(proposedBrowserUrl)\n            },\n        ],\n\n        viewportRange: [\n            (s) => [s.heatmapFilters, s.iframeWidth],\n            (heatmapFilters, iframeWidth) => {\n                return iframeWidth ? calculateViewportRange(heatmapFilters, iframeWidth) : { min: 0, max: 1800 }\n            },\n        ],\n        currentFullUrl: [\n            (s) => [s.browserUrl, s.currentPath],\n            (browserUrl, currentPath) => {\n                if (!browserUrl) {\n                    return null\n                }\n                return browserUrl + '/' + currentPath\n            },\n        ],\n    }),\n\n    listeners(({ actions, cache, props, values }) => ({\n        sendToolbarMessage: ({ type, payload }) => {\n            props.iframeRef?.current?.contentWindow?.postMessage(\n                {\n                    type,\n                    payload,\n                },\n                '*'\n            )\n        },\n        setProposedBrowserUrl: ({ url }) => {\n            if (url) {\n                if (props.automaticallyAuthorizeBrowserUrl && !values.isProposedBrowserUrlAuthorized) {\n                    actions.addUrl(url)\n                } else {\n                    actions.setBrowserUrl(url)\n                }\n            }\n        },\n        // heatmaps\n        patchHeatmapFilters: ({ filters }) => {\n            actions.sendToolbarMessage(PostHogAppToolbarEvent.PH_PATCH_HEATMAP_FILTERS, { filters })\n        },\n\n        setHeatmapFixedPositionMode: ({ mode }) => {\n            actions.sendToolbarMessage(PostHogAppToolbarEvent.PH_HEATMAPS_FIXED_POSITION_MODE, {\n                fixedPositionMode: mode,\n            })\n        },\n\n        setHeatmapColorPalette: ({ Palette }) => {\n            actions.sendToolbarMessage(PostHogAppToolbarEvent.PH_HEATMAPS_COLOR_PALETTE, {\n                colorPalette: Palette,\n            })\n        },\n\n        setCommonFilters: ({ filters }) => {\n            actions.sendToolbarMessage(PostHogAppToolbarEvent.PH_HEATMAPS_COMMON_FILTERS, { commonFilters: filters })\n        },\n\n        // actions\n        enableElementSelector: () => {\n            actions.sendToolbarMessage(PostHogAppToolbarEvent.PH_ELEMENT_SELECTOR, { enabled: true })\n        },\n        disableElementSelector: () => {\n            actions.sendToolbarMessage(PostHogAppToolbarEvent.PH_ELEMENT_SELECTOR, { enabled: false })\n        },\n        setNewActionName: ({ name }) => {\n            actions.sendToolbarMessage(PostHogAppToolbarEvent.PH_NEW_ACTION_NAME, { name })\n        },\n\n        onIframeLoad: () => {\n            // we get this callback whether the iframe loaded successfully or not\n            // and don't get a signal if the load was successful, so we have to check\n            // but there's no slam dunk way to do that\n\n            const init = (): void => {\n                actions.sendToolbarMessage(PostHogAppToolbarEvent.PH_APP_INIT, {\n                    filters: values.heatmapFilters,\n                    colorPalette: values.heatmapColorPalette,\n                    fixedPositionMode: values.heatmapFixedPositionMode,\n                    commonFilters: values.commonFilters,\n                })\n                switch (props.userIntent) {\n                    case 'heatmaps':\n                        actions.sendToolbarMessage(PostHogAppToolbarEvent.PH_HEATMAPS_CONFIG, {\n                            enabled: true,\n                        })\n                        break\n                }\n            }\n\n            const onIframeMessage = (e: MessageEvent): void => {\n                const type: PostHogAppToolbarEvent = e?.data?.type\n                const payload = e?.data?.payload\n\n                actions.toolbarMessageReceived(type, payload)\n\n                if (!type || !type.startsWith('ph-')) {\n                    return\n                }\n                if (!values.checkUrlIsAuthorized(e.origin)) {\n                    console.warn(\n                        'ignoring message from iframe with origin not in authorized toolbar urls',\n                        e.origin,\n                        e.data\n                    )\n                    return\n                }\n\n                switch (type) {\n                    case PostHogAppToolbarEvent.PH_TOOLBAR_INIT:\n                        return init()\n                    case PostHogAppToolbarEvent.PH_TOOLBAR_READY:\n                        if (props.userIntent === 'heatmaps') {\n                            posthog.capture('in-app heatmap frame loaded', {\n                                inapp_heatmap_page_url_visited: values.browserUrl,\n                                inapp_heatmap_filters: values.heatmapFilters,\n                                inapp_heatmap_color_palette: values.heatmapColorPalette,\n                                inapp_heatmap_fixed_position_mode: values.heatmapFixedPositionMode,\n                            })\n                            // reset loading tracking - if we're e.g. slow this will avoid a flash of warning message\n                            return actions.startTrackingLoading()\n                        }\n                        return\n                    case PostHogAppToolbarEvent.PH_TOOLBAR_HEATMAP_LOADING:\n                        return actions.startTrackingLoading()\n                    case PostHogAppToolbarEvent.PH_TOOLBAR_HEATMAP_LOADED:\n                        posthog.capture('in-app heatmap loaded', {\n                            inapp_heatmap_page_url_visited: values.browserUrl,\n                            inapp_heatmap_filters: values.heatmapFilters,\n                            inapp_heatmap_color_palette: values.heatmapColorPalette,\n                            inapp_heatmap_fixed_position_mode: values.heatmapFixedPositionMode,\n                        })\n                        return actions.stopTrackingLoading()\n                    case PostHogAppToolbarEvent.PH_TOOLBAR_HEATMAP_FAILED:\n                        posthog.capture('in-app heatmap failed', {\n                            inapp_heatmap_page_url_visited: values.browserUrl,\n                            inapp_heatmap_filters: values.heatmapFilters,\n                            inapp_heatmap_color_palette: values.heatmapColorPalette,\n                            inapp_heatmap_fixed_position_mode: values.heatmapFixedPositionMode,\n                        })\n                        actions.stopTrackingLoading()\n                        actions.setIframeBanner({ level: 'error', message: 'The heatmap failed to load.' })\n                        return\n                    case PostHogAppToolbarEvent.PH_NEW_ACTION_CREATED:\n                        actions.setNewActionName(null)\n                        actions.disableElementSelector()\n                        return\n                    case PostHogAppToolbarEvent.PH_TOOLBAR_NAVIGATED:\n                        // remove leading / from path\n                        return actions.setCurrentPath(payload.path.replace(/^\\/+/, ''))\n                    default:\n                        console.warn(`[PostHog Heatmaps] Received unknown child window message: ${type}`)\n                }\n            }\n\n            window.addEventListener('message', onIframeMessage, false)\n            // We call init in case the toolbar got there first (unlikely)\n            init()\n        },\n\n        setBrowserUrl: ({ url }) => {\n            if (url?.trim().length) {\n                actions.startTrackingLoading()\n            }\n        },\n        startTrackingLoading: () => {\n            actions.setIframeBanner(null)\n\n            clearTimeout(cache.errorTimeout)\n            cache.errorTimeout = setTimeout(() => {\n                actions.setIframeBanner({ level: 'error', message: 'The heatmap failed to load (or is very slow).' })\n            }, 7500)\n\n            clearTimeout(cache.warnTimeout)\n            cache.warnTimeout = setTimeout(() => {\n                actions.setIframeBanner({ level: 'warning', message: 'Still waiting for the toolbar to load.' })\n            }, 3000)\n        },\n\n        stopTrackingLoading: () => {\n            actions.setIframeBanner(null)\n\n            clearTimeout(cache.errorTimeout)\n            clearTimeout(cache.warnTimeout)\n        },\n        setIframeBanner: ({ banner }) => {\n            posthog.capture('in-app iFrame banner set', {\n                level: banner?.level,\n                message: banner?.message,\n            })\n        },\n        updateCurrentTeamSuccess: () => {\n            if (\n                props.automaticallyAuthorizeBrowserUrl &&\n                values.proposedBrowserUrl &&\n                values.currentTeam?.app_urls?.includes(values.proposedBrowserUrl)\n            ) {\n                actions.setBrowserUrl(values.proposedBrowserUrl)\n                actions.setProposedBrowserUrl(null)\n            }\n        },\n    })),\n\n    afterMount(({ actions, values }) => {\n        if (values.browserUrl?.trim().length) {\n            actions.startTrackingLoading()\n        }\n    }),\n    beforeUnmount(({ actions, props }) => {\n        props.clearBrowserUrlOnUnmount && actions.setBrowserUrl('')\n    }),\n])\n", "import { actions, connect, kea, listeners, path, props, propsChanged, reducers, selectors } from 'kea'\nimport { iframedToolbarBrowserLogic } from 'lib/components/IframedToolbarBrowser/iframedToolbarBrowserLogic'\nimport { PostHogAppToolbarEvent } from 'lib/components/IframedToolbarBrowser/utils'\nimport { isEmptyObject } from 'lib/utils'\n\nimport {\n    ActionType,\n    BaseMathType,\n    DashboardTemplateVariableType,\n    EntityType,\n    EntityTypes,\n    FilterType,\n    Optional,\n    TemplateVariableStep,\n} from '~/types'\n\nimport type { dashboardTemplateVariablesLogicType } from './dashboardTemplateVariablesLogicType'\n\nexport interface DashboardTemplateVariablesLogicProps {\n    variables: DashboardTemplateVariableType[]\n}\n\nconst FALLBACK_EVENT = {\n    id: '$pageview',\n    math: BaseMathType.UniqueUsers,\n    type: EntityTypes.EVENTS,\n}\n\nexport const dashboardTemplateVariablesLogic = kea<dashboardTemplateVariablesLogicType>([\n    path(['scenes', 'dashboard', 'DashboardTemplateVariablesLogic']),\n    props({ variables: [] } as DashboardTemplateVariablesLogicProps),\n    connect({\n        actions: [iframedToolbarBrowserLogic, ['toolbarMessageReceived', 'disableElementSelector']],\n    }),\n    actions({\n        setVariables: (variables: DashboardTemplateVariableType[]) => ({ variables }),\n        setVariable: (variableName: string, filterGroup: Optional<FilterType, 'type'>) => ({\n            variable_name: variableName,\n            filterGroup,\n        }),\n        setVariableFromAction: (variableName: string, action: ActionType) => ({ variableName, action }),\n        setVariableForPageview: (variableName: string, url: string) => ({ variableName, url }),\n        setVariableForScreenview: (variableName: string) => ({ variableName }),\n        setActiveVariableIndex: (index: number) => ({ index }),\n        incrementActiveVariableIndex: true,\n        possiblyIncrementActiveVariableIndex: true,\n        resetVariable: (variableId: string) => ({ variableId }),\n        goToNextUntouchedActiveVariableIndex: true,\n        setIsCurrentlySelectingElement: (isSelecting: boolean) => ({ isSelecting }),\n        setActiveVariableCustomEventName: (customEventName?: string | null) => ({ customEventName }),\n        maybeResetActiveVariableCustomEventName: true,\n    }),\n    reducers({\n        variables: [\n            [] as DashboardTemplateVariableType[],\n            {\n                setVariables: (_, { variables }) => {\n                    return variables.map((v) => {\n                        if (v.default && !isEmptyObject(v.default)) {\n                            return v\n                        }\n                        return { ...v, default: FALLBACK_EVENT } as unknown as DashboardTemplateVariableType\n                    })\n                },\n                setVariable: (state, { variable_name: variableName, filterGroup }): DashboardTemplateVariableType[] => {\n                    // There is only one type with contents at a time\n                    // So iterate through the types to find the first one with contents\n                    const typeWithContents: EntityType = Object.keys(filterGroup).filter(\n                        (group) => (filterGroup[group as EntityType] || [])?.length > 0\n                    )?.[0] as EntityType\n\n                    if (!typeWithContents) {\n                        return state\n                    }\n\n                    return state.map((v: DashboardTemplateVariableType) => {\n                        if (\n                            v.name === variableName &&\n                            filterGroup?.[typeWithContents]?.length &&\n                            filterGroup?.[typeWithContents]?.[0]\n                        ) {\n                            return { ...v, default: filterGroup[typeWithContents]?.[0] || {}, touched: true }\n                        }\n                        return { ...v }\n                    })\n                },\n                resetVariable: (state, { variableId }) => {\n                    return state.map((v: DashboardTemplateVariableType) => {\n                        if (v.id === variableId) {\n                            return { ...v, default: FALLBACK_EVENT, touched: false }\n                        }\n                        return { ...v }\n                    })\n                },\n            },\n        ],\n        activeVariableIndex: [\n            0,\n            {\n                setActiveVariableIndex: (_, { index }) => index,\n                incrementActiveVariableIndex: (state) => state + 1,\n            },\n        ],\n        activeVariableCustomEventName: [\n            null as string | null | undefined,\n            {\n                setActiveVariableCustomEventName: (_, { customEventName }) => customEventName,\n            },\n        ],\n        isCurrentlySelectingElement: [\n            false as boolean,\n            {\n                setIsCurrentlySelectingElement: (_, { isSelecting }) => isSelecting,\n            },\n        ],\n    }),\n    selectors(() => ({\n        activeVariable: [\n            (s) => [s.variables, s.activeVariableIndex],\n            (variables: DashboardTemplateVariableType[], activeVariableIndex: number) => {\n                return variables[activeVariableIndex]\n            },\n        ],\n        allVariablesAreTouched: [\n            (s) => [s.variables],\n            (variables: DashboardTemplateVariableType[]) => {\n                return variables.every((v) => v.touched)\n            },\n        ],\n        hasTouchedAnyVariable: [\n            (s) => [s.variables],\n            (variables: DashboardTemplateVariableType[]) => {\n                return variables.some((v) => v.touched)\n            },\n        ],\n    })),\n    listeners(({ actions, props, values }) => ({\n        possiblyIncrementActiveVariableIndex: () => {\n            if (props.variables.length > 0 && values.activeVariableIndex < props.variables.length - 1) {\n                actions.incrementActiveVariableIndex()\n            }\n        },\n        goToNextUntouchedActiveVariableIndex: () => {\n            let nextIndex = values.variables.findIndex((v, i) => !v.touched && i > values.activeVariableIndex)\n            if (nextIndex !== -1) {\n                actions.setActiveVariableIndex(nextIndex)\n                return\n            }\n            if (nextIndex == -1) {\n                nextIndex = values.variables.findIndex((v) => !v.touched)\n                if (nextIndex == -1) {\n                    nextIndex = values.activeVariableIndex\n                }\n            }\n            actions.setActiveVariableIndex(nextIndex)\n        },\n        setVariableFromAction: ({ variableName, action }) => {\n            const originalVariableName = variableName.replace(/\\s-\\s\\d+/g, '')\n            const step: TemplateVariableStep = {\n                id: action.id.toString(),\n                math: BaseMathType.UniqueUsers,\n                name: action.name,\n                custom_name: originalVariableName,\n                order: 0,\n                type: EntityTypes.ACTIONS,\n                selector: action.steps?.[0]?.selector,\n                href: action.steps?.[0]?.href,\n                url: action.steps?.[0]?.url,\n            }\n            const filterGroup: FilterType = {\n                actions: [step],\n            }\n            actions.setVariable(originalVariableName, filterGroup)\n            actions.setIsCurrentlySelectingElement(false)\n        },\n        setVariableForPageview: ({ variableName, url }) => {\n            const step: TemplateVariableStep = {\n                id: '$pageview',\n                math: BaseMathType.UniqueUsers,\n                type: EntityTypes.EVENTS,\n                order: 0,\n                name: '$pageview',\n                custom_name: variableName,\n                properties: [\n                    {\n                        key: '$current_url',\n                        value: url,\n                        operator: 'icontains',\n                        type: 'event',\n                    },\n                ],\n            }\n            const filterGroup: FilterType = {\n                events: [step],\n            }\n            actions.setVariable(variableName, filterGroup)\n            actions.setIsCurrentlySelectingElement(false)\n        },\n        setVariableForScreenview: ({ variableName }) => {\n            const step: TemplateVariableStep = {\n                id: '$screenview',\n                math: BaseMathType.UniqueUsers,\n                type: EntityTypes.EVENTS,\n                order: 0,\n                name: '$screenview',\n                custom_name: variableName,\n            }\n            const filterGroup: FilterType = {\n                events: [step],\n            }\n            actions.setVariable(variableName, filterGroup)\n            actions.setIsCurrentlySelectingElement(false)\n        },\n        toolbarMessageReceived: ({ type, payload }) => {\n            if (type === PostHogAppToolbarEvent.PH_NEW_ACTION_CREATED) {\n                actions.setVariableFromAction(payload.action.name, payload.action as ActionType)\n                actions.disableElementSelector()\n            }\n        },\n        maybeResetActiveVariableCustomEventName: () => {\n            if (!values.activeVariable?.touched || !values.activeVariable?.default?.custom_event) {\n                actions.setActiveVariableCustomEventName(null)\n            } else if (values.activeVariable?.default?.custom_event) {\n                actions.setActiveVariableCustomEventName(values.activeVariable.default.id)\n            }\n        },\n    })),\n    propsChanged(({ actions, props }, oldProps) => {\n        if (props.variables !== oldProps.variables) {\n            actions.setVariables(props.variables)\n        }\n    }),\n])\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_react", "import_jsx_runtime", "FallbackCoverImage", "src", "alt", "index", "className", "imageClassName", "hasError", "setHasError", "handleImageError", "clsx", "getSeriesColor", "import_react", "import_jsx_runtime", "DashboardTemplateChooser", "scope", "onItemClick", "redirectAfterCreation", "availabilityContexts", "templatesLogic", "dashboardTemplatesLogic", "allTemplates", "allTemplatesLoading", "isLoading", "newDashboardModalVisible", "newDashboardLogic", "setActiveDashboardTemplate", "createDashboardFromTemplate", "addDashboard", "setIsLoading", "showVariableSelectModal", "TemplateItem", "blank_dashboard_hog_default", "Spinner", "template", "context", "index", "onClick", "dataAttr", "isHovering", "setIsHovering", "clsx", "FallbackCoverImage", "tag", "LemonTag", "init_dirname", "init_buffer", "init_process", "import_kea", "UserIntentVerb", "iframedToolbarBrowserLogic", "authorizedUrlListLogic", "defaultAuthorizedUrlProperties", "teamLogic", "url", "type", "payload", "filters", "Palette", "mode", "width", "banner", "name", "path", "props", "_", "DEFAULT_HEATMAP_FILTERS", "state", "s", "browserUrl", "checkUrlIsAuthorized", "proposedBrowserUrl", "heatmapFilters", "iframeWidth", "calculateViewportRange", "currentPath", "actions", "cache", "values", "init", "onIframeMessage", "e", "Co", "init_dirname", "init_buffer", "init_process", "import_kea", "FALLBACK_EVENT", "dashboardTemplateVariablesLogic", "iframedToolbarBrowserLogic", "variables", "variableName", "filterGroup", "action", "url", "index", "variableId", "isSelecting", "customEventName", "_", "v", "isEmptyObject", "state", "typeWithContents", "group", "s", "activeVariableIndex", "actions", "props", "values", "nextIndex", "i", "originalVariableName", "type", "payload", "oldProps"]
}
