{
  "version": 3,
  "sources": ["../src/scenes/project-homepage/ProjectHomepage.tsx", "../src/layout/navigation/TopBar/YearInHogButton.tsx", "../src/scenes/project-homepage/RecentPersons.tsx"],
  "sourcesContent": ["import './ProjectHomepage.scss'\n\nimport { IconHome } from '@posthog/icons'\nimport { Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { SceneDashboardChoiceModal } from 'lib/components/SceneDashboardChoice/SceneDashboardChoiceModal'\nimport { sceneDashboardChoiceModalLogic } from 'lib/components/SceneDashboardChoice/sceneDashboardChoiceModalLogic'\nimport { SceneDashboardChoiceRequired } from 'lib/components/SceneDashboardChoice/SceneDashboardChoiceRequired'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonDivider } from 'lib/lemon-ui/LemonDivider'\nimport { LemonSkeleton } from 'lib/lemon-ui/LemonSkeleton'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { Dashboard } from 'scenes/dashboard/Dashboard'\nimport { dashboardLogic, DashboardLogicProps } from 'scenes/dashboard/dashboardLogic'\nimport { projectHomepageLogic } from 'scenes/project-homepage/projectHomepageLogic'\nimport { WatchNextPanel } from 'scenes/project-homepage/WatchNextPanel'\nimport { Scene, SceneExport } from 'scenes/sceneTypes'\nimport { inviteLogic } from 'scenes/settings/organization/inviteLogic'\nimport { urls } from 'scenes/urls'\n\nimport { YearInHogButton } from '~/layout/navigation/TopBar/YearInHogButton'\nimport { DashboardPlacement } from '~/types'\n\nimport { RecentInsights } from './RecentInsights'\nimport { RecentPersons } from './RecentPersons'\n\nexport const scene: SceneExport = {\n    component: ProjectHomepage,\n    logic: projectHomepageLogic,\n}\n\nexport function ProjectHomepage(): JSX.Element {\n    const { dashboardLogicProps } = useValues(projectHomepageLogic)\n    const { showInviteModal } = useActions(inviteLogic)\n    const { showSceneDashboardChoiceModal } = useActions(\n        sceneDashboardChoiceModalLogic({ scene: Scene.ProjectHomepage })\n    )\n    const { featureFlags } = useValues(featureFlagLogic)\n\n    const headerButtons = (\n        <>\n            {!!featureFlags[FEATURE_FLAGS.YEAR_IN_HOG] && window.POSTHOG_APP_CONTEXT?.year_in_hog_url && (\n                <YearInHogButton url={`${window.location.origin}${window.POSTHOG_APP_CONTEXT.year_in_hog_url}`} />\n            )}\n            <LemonButton\n                type=\"secondary\"\n                size=\"small\"\n                data-attr=\"project-home-customize-homepage\"\n                onClick={showSceneDashboardChoiceModal}\n            >\n                Customize homepage\n            </LemonButton>\n            <LemonButton\n                data-attr=\"project-home-invite-team-members\"\n                onClick={() => {\n                    showInviteModal()\n                }}\n                type=\"secondary\"\n            >\n                Invite members\n            </LemonButton>\n        </>\n    )\n\n    return (\n        <div className=\"ProjectHomepage\">\n            <PageHeader delimited buttons={headerButtons} />\n            <div className=\"ProjectHomepage__lists\">\n                <RecentInsights />\n                <RecentPersons />\n                <WatchNextPanel />\n            </div>\n            {dashboardLogicProps ? (\n                <HomeDashboard dashboardLogicProps={dashboardLogicProps} />\n            ) : (\n                <SceneDashboardChoiceRequired\n                    open={() => {\n                        showSceneDashboardChoiceModal()\n                    }}\n                    scene={Scene.ProjectHomepage}\n                />\n            )}\n            <SceneDashboardChoiceModal scene={Scene.ProjectHomepage} />\n        </div>\n    )\n}\n\nfunction HomeDashboard({ dashboardLogicProps }: { dashboardLogicProps: DashboardLogicProps }): JSX.Element {\n    const { dashboard } = useValues(dashboardLogic(dashboardLogicProps))\n\n    return (\n        <>\n            <div className=\"ProjectHomepage__dashboardheader\">\n                <div className=\"ProjectHomepage__dashboardheader__title\">\n                    {!dashboard && <LemonSkeleton className=\"w-20 h-4\" />}\n                    {dashboard?.name && (\n                        <>\n                            <Link className=\"font-semibold text-xl text-text-3000\" to={urls.dashboard(dashboard.id)}>\n                                <IconHome className=\"mr-2 text-2xl opacity-50\" />\n                                {dashboard?.name}\n                            </Link>\n                        </>\n                    )}\n                </div>\n            </div>\n            <LemonDivider className=\"mt-3 mb-4\" />\n            <Dashboard id={dashboardLogicProps.id.toString()} placement={DashboardPlacement.ProjectHomepage} />\n        </>\n    )\n}\n", "import './YearInHogButton.scss'\n\nimport { LemonButton } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { HeartHog } from 'lib/components/hedgehogs'\nimport { IconXmasTree } from 'lib/lemon-ui/icons'\nimport { useState } from 'react'\n\nexport function YearInHogButton({ url }: { url: string | null }): JSX.Element | null {\n    const [isHovering, setIsHovering] = useState<boolean | null>(null)\n    return url ? (\n        <div className=\"relative\">\n            <HeartHog\n                width=\"36\"\n                height=\"36\"\n                className={clsx(\n                    'CheekyHog',\n                    isHovering && 'CheekyHog--peek',\n                    isHovering === false && 'CheekyHog--hide'\n                )}\n            />\n            <div className=\"absolute top-0 left-0 w-full h-full YearInHog__mask\" />\n            <LemonButton\n                icon={<IconXmasTree />}\n                type=\"secondary\"\n                to={url}\n                targetBlank={true}\n                size=\"small\"\n                onMouseEnter={() => setIsHovering(true)}\n                onMouseLeave={() => setIsHovering(false)}\n            >\n                PostHog Unwrapped\n            </LemonButton>\n        </div>\n    ) : null\n}\n", "import './ProjectHomepage.scss'\n\nimport { useActions, useValues } from 'kea'\nimport { CompactList } from 'lib/components/CompactList/CompactList'\nimport { dayjs } from 'lib/dayjs'\nimport { ProfilePicture } from 'lib/lemon-ui/ProfilePicture'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\nimport { asDisplay } from 'scenes/persons/person-utils'\nimport { urls } from 'scenes/urls'\n\nimport { PersonType } from '~/types'\n\nimport { ProjectHomePageCompactListItem } from './ProjectHomePageCompactListItem'\nimport { projectHomepageLogic } from './projectHomepageLogic'\n\nfunction PersonRow({ person }: { person: PersonType }): JSX.Element {\n    const { reportPersonOpenedFromNewlySeenPersonsList } = useActions(eventUsageLogic)\n\n    return (\n        <ProjectHomePageCompactListItem\n            to={urls.personByDistinctId(person.distinct_ids[0])}\n            title={asDisplay(person)}\n            subtitle={`First seen ${dayjs(person.created_at).fromNow()}`}\n            prefix={<ProfilePicture name={asDisplay(person)} />}\n            onClick={() => {\n                reportPersonOpenedFromNewlySeenPersonsList()\n            }}\n        />\n    )\n}\n\nexport function RecentPersons(): JSX.Element {\n    const { persons, personsLoading } = useValues(projectHomepageLogic)\n\n    return (\n        <CompactList\n            title=\"Newly seen people\"\n            viewAllURL={urls.persons()}\n            loading={personsLoading}\n            emptyMessage={{\n                title: 'There are no newly seen people',\n                description: 'Learn more about identifying people and ingesting data in the documentation.',\n                buttonText: 'Documentation',\n                buttonTo: 'https://posthog.com/docs/product-analytics/identify',\n            }}\n            items={persons.slice(0, 5)}\n            renderRow={(person: PersonType, index) => <PersonRow key={index} person={person} />}\n        />\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_react", "import_jsx_runtime", "YearInHogButton", "url", "isHovering", "setIsHovering", "HeartHog", "clsx", "LemonButton", "IconXmasTree", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "PersonRow", "person", "reportPersonOpenedFromNewlySeenPersonsList", "eventUsageLogic", "ProjectHomePageCompactListItem", "urls", "asDisplay", "dayjs", "ProfilePicture", "RecentPersons", "persons", "personsLoading", "projectHomepageLogic", "CompactList", "index", "import_jsx_runtime", "scene", "ProjectHomepage", "projectHomepageLogic", "dashboardLogicProps", "showInviteModal", "inviteLogic", "showSceneDashboardChoiceModal", "sceneDashboardChoiceModalLogic", "featureFlags", "featureFlagLogic", "headerButtons", "FEATURE_FLAGS", "YearInHogButton", "LemonButton", "PageHeader", "RecentInsights", "RecentPersons", "WatchNextPanel", "HomeDashboard", "SceneDashboardChoiceRequired", "SceneDashboardChoiceModal", "dashboard", "dashboardLogic", "LemonSkeleton", "Link", "urls", "IconHome", "LemonDivider", "Dashboard"]
}
