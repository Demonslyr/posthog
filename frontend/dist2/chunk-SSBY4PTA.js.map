{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/pug.js"],
  "sourcesContent": ["'use strict'\n\nmodule.exports = pug\npug.displayName = 'pug'\npug.aliases = []\nfunction pug(Prism) {\n  ;(function (Prism) {\n    // TODO:\n    // - Add CSS highlighting inside <style> tags\n    // - Add support for multi-line code blocks\n    // - Add support for interpolation #{} and !{}\n    // - Add support for tag interpolation #[]\n    // - Add explicit support for plain text using |\n    // - Add support for markup embedded in plain text\n    Prism.languages.pug = {\n      // Multiline stuff should appear before the rest\n      // This handles both single-line and multi-line comments\n      comment: {\n        pattern: /(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/m,\n        lookbehind: true\n      },\n      // All the tag-related part is in lookbehind\n      // so that it can be highlighted by the \"tag\" pattern\n      'multiline-script': {\n        pattern:\n          /(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      },\n      // See at the end of the file for known filters\n      filter: {\n        pattern:\n          /(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          },\n          text: /\\S[\\s\\S]*/\n        }\n      },\n      'multiline-plain-text': {\n        pattern:\n          /(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true\n      },\n      markup: {\n        pattern: /(^[\\t ]*)<.+/m,\n        lookbehind: true,\n        inside: Prism.languages.markup\n      },\n      doctype: {\n        pattern: /((?:^|\\n)[\\t ]*)doctype(?: .+)?/,\n        lookbehind: true\n      },\n      // This handle all conditional and loop keywords\n      'flow-control': {\n        pattern:\n          /(^[\\t ]*)(?:case|default|each|else|if|unless|when|while)\\b(?: .+)?/m,\n        lookbehind: true,\n        inside: {\n          each: {\n            pattern: /^each .+? in\\b/,\n            inside: {\n              keyword: /\\b(?:each|in)\\b/,\n              punctuation: /,/\n            }\n          },\n          branch: {\n            pattern: /^(?:case|default|else|if|unless|when|while)\\b/,\n            alias: 'keyword'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      keyword: {\n        pattern: /(^[\\t ]*)(?:append|block|extends|include|prepend)\\b.+/m,\n        lookbehind: true\n      },\n      mixin: [\n        // Declaration\n        {\n          pattern: /(^[\\t ]*)mixin .+/m,\n          lookbehind: true,\n          inside: {\n            keyword: /^mixin/,\n            function: /\\w+(?=\\s*\\(|\\s*$)/,\n            punctuation: /[(),.]/\n          }\n        }, // Usage\n        {\n          pattern: /(^[\\t ]*)\\+.+/m,\n          lookbehind: true,\n          inside: {\n            name: {\n              pattern: /^\\+\\w+/,\n              alias: 'function'\n            },\n            rest: Prism.languages.javascript\n          }\n        }\n      ],\n      script: {\n        pattern: /(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]).+/m,\n        lookbehind: true,\n        inside: Prism.languages.javascript\n      },\n      'plain-text': {\n        pattern:\n          /(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]).+/m,\n        lookbehind: true\n      },\n      tag: {\n        pattern: /(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,\n        lookbehind: true,\n        inside: {\n          attributes: [\n            {\n              pattern: /&[^(]+\\([^)]+\\)/,\n              inside: Prism.languages.javascript\n            },\n            {\n              pattern: /\\([^)]+\\)/,\n              inside: {\n                'attr-value': {\n                  pattern: /(=\\s*(?!\\s))(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,\n                  lookbehind: true,\n                  inside: Prism.languages.javascript\n                },\n                'attr-name': /[\\w-]+(?=\\s*!?=|\\s*[,)])/,\n                punctuation: /[!=(),]+/\n              }\n            }\n          ],\n          punctuation: /:/,\n          'attr-id': /#[\\w\\-]+/,\n          'attr-class': /\\.[\\w\\-]+/\n        }\n      },\n      code: [\n        {\n          pattern: /(^[\\t ]*(?:-|!?=)).+/m,\n          lookbehind: true,\n          inside: Prism.languages.javascript\n        }\n      ],\n      punctuation: /[.\\-!=|]+/\n    }\n    var filter_pattern =\n      /(^([\\t ]*)):<filter_name>(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/\n        .source // Non exhaustive list of available filters and associated languages\n    var filters = [\n      {\n        filter: 'atpl',\n        language: 'twig'\n      },\n      {\n        filter: 'coffee',\n        language: 'coffeescript'\n      },\n      'ejs',\n      'handlebars',\n      'less',\n      'livescript',\n      'markdown',\n      {\n        filter: 'sass',\n        language: 'scss'\n      },\n      'stylus'\n    ]\n    var all_filters = {}\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i]\n      filter =\n        typeof filter === 'string'\n          ? {\n              filter: filter,\n              language: filter\n            }\n          : filter\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(\n            filter_pattern.replace('<filter_name>', function () {\n              return filter.filter\n            }),\n            'm'\n          ),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'variable'\n            },\n            text: {\n              pattern: /\\S[\\s\\S]*/,\n              alias: [filter.language, 'language-' + filter.language],\n              inside: Prism.languages[filter.language]\n            }\n          }\n        }\n      }\n    }\n    Prism.languages.insertBefore('pug', 'filter', all_filters)\n  })(Prism)\n}\n"],
  "mappings": "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",
  "names": ["require_pug", "__commonJSMin", "exports", "module", "init_dirname", "init_buffer", "init_process", "pug", "Prism", "filter_pattern", "filters", "all_filters", "i", "l", "filter"]
}
