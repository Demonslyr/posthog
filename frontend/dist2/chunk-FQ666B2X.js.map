{
  "version": 3,
  "sources": ["../src/scenes/feature-flags/FeatureFlagReleaseConditions.tsx", "../src/lib/introductions/GroupsIntroductionOption.tsx", "../src/scenes/feature-flags/FeatureFlagReleaseConditionsLogic.ts"],
  "sourcesContent": ["import './FeatureFlag.scss'\n\nimport { IconCopy, IconPlus, IconTrash } from '@posthog/icons'\nimport { LemonInput, LemonSelect, LemonSnack, Link } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { router } from 'kea-router'\nimport { allOperatorsToHumanName } from 'lib/components/DefinitionPopover/utils'\nimport { PropertyFilters } from 'lib/components/PropertyFilters/PropertyFilters'\nimport { isPropertyFilterWithOperator } from 'lib/components/PropertyFilters/utils'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { INSTANTLY_AVAILABLE_PROPERTIES } from 'lib/constants'\nimport { groupsAccessLogic, GroupsAccessStatus } from 'lib/introductions/groupsAccessLogic'\nimport { GroupsIntroductionOption } from 'lib/introductions/GroupsIntroductionOption'\nimport { IconErrorOutline, IconOpenInNew, IconSubArrowRight } from 'lib/lemon-ui/icons'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonDivider } from 'lib/lemon-ui/LemonDivider'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { LemonSlider } from 'lib/lemon-ui/LemonSlider'\nimport { LemonTag } from 'lib/lemon-ui/LemonTag/LemonTag'\nimport { Spinner } from 'lib/lemon-ui/Spinner/Spinner'\nimport { getFilterLabel } from 'lib/taxonomy'\nimport { capitalizeFirstLetter, dateFilterToText, dateStringToComponents, humanFriendlyNumber } from 'lib/utils'\nimport { urls } from 'scenes/urls'\n\nimport { groupsModel } from '~/models/groupsModel'\nimport { AnyPropertyFilter, FeatureFlagGroupType, PropertyOperator } from '~/types'\n\nimport { featureFlagLogic } from './featureFlagLogic'\nimport {\n    featureFlagReleaseConditionsLogic,\n    FeatureFlagReleaseConditionsLogicProps,\n} from './FeatureFlagReleaseConditionsLogic'\n\nfunction PropertyValueComponent({ property }: { property: AnyPropertyFilter }): JSX.Element {\n    if (property.type === 'cohort') {\n        return (\n            <LemonButton\n                type=\"secondary\"\n                size=\"xsmall\"\n                to={urls.cohort(property.value)}\n                sideIcon={<IconOpenInNew />}\n                targetBlank\n            >\n                {property.cohort_name || `ID ${property.value}`}\n            </LemonButton>\n        )\n    }\n\n    if (property.value === PropertyOperator.IsNotSet || property.value === PropertyOperator.IsSet) {\n        return <></>\n    }\n    const propertyValues = Array.isArray(property.value) ? property.value : [property.value]\n\n    return (\n        <>\n            {propertyValues.map((val, idx) => (\n                <LemonSnack key={idx}>\n                    {val}\n                    <span>\n                        {isPropertyFilterWithOperator(property) &&\n                        ['is_date_before', 'is_date_after'].includes(property.operator) &&\n                        dateStringToComponents(String(val)) // check it's a relative date\n                            ? ` ( ${dateFilterToText(\n                                  String(val),\n                                  undefined,\n                                  '',\n                                  [],\n                                  false,\n                                  String(val).slice(-1) === 'h' ? 'MMMM D, YYYY HH:mm:ss' : 'MMMM D, YYYY',\n                                  true\n                              )}{' '}\n                                                            )`\n                            : ''}\n                    </span>\n                </LemonSnack>\n            ))}\n        </>\n    )\n}\n\nexport function FeatureFlagReleaseConditions({\n    id,\n    readOnly,\n    isSuper,\n    excludeTitle,\n    filters,\n    onChange,\n    hideMatchOptions,\n    nonEmptyFeatureFlagVariants,\n    showTrashIconWithOneCondition = false,\n    removedLastConditionCallback,\n}: FeatureFlagReleaseConditionsLogicProps & {\n    hideMatchOptions?: boolean\n    isSuper?: boolean\n    excludeTitle?: boolean\n    showTrashIconWithOneCondition?: boolean\n    removedLastConditionCallback?: () => void\n}): JSX.Element {\n    const releaseConditionsLogic = featureFlagReleaseConditionsLogic({\n        id,\n        readOnly,\n        isSuper,\n        excludeTitle,\n        filters,\n        onChange,\n    })\n    const {\n        taxonomicGroupTypes,\n        propertySelectErrors,\n        computeBlastRadiusPercentage,\n        affectedUsers,\n        totalUsers,\n        filtersTaxonomicOptions,\n        aggregationTargetName,\n    } = useValues(releaseConditionsLogic)\n\n    const {\n        setAggregationGroupTypeIndex,\n        updateConditionSet,\n        duplicateConditionSet,\n        removeConditionSet,\n        addConditionSet,\n    } = useActions(releaseConditionsLogic)\n\n    const { showGroupsOptions, groupTypes, aggregationLabel } = useValues(groupsModel)\n    const { earlyAccessFeaturesList, hasEarlyAccessFeatures, featureFlagKey, nonEmptyVariants } =\n        useValues(featureFlagLogic)\n\n    const { groupsAccessStatus } = useValues(groupsAccessLogic)\n\n    const featureFlagVariants = nonEmptyFeatureFlagVariants || nonEmptyVariants\n\n    const filterGroups: FeatureFlagGroupType[] = (isSuper ? filters?.super_groups : filters?.groups) || []\n    // :KLUDGE: Match by select only allows Select.Option as children, so render groups option directly rather than as a child\n    const matchByGroupsIntroductionOption = GroupsIntroductionOption()\n    const hasNonInstantProperty = (properties: AnyPropertyFilter[]): boolean => {\n        return !!properties.find(\n            (property) => property.type === 'cohort' || !INSTANTLY_AVAILABLE_PROPERTIES.includes(property.key || '')\n        )\n    }\n\n    const isEarlyAccessFeatureCondition = (group: FeatureFlagGroupType): boolean => {\n        return !!(\n            hasEarlyAccessFeatures &&\n            group.properties?.some((property) => property.key === '$feature_enrollment/' + featureFlagKey)\n        )\n    }\n\n    const includeGroupsIntroductionOption = (): boolean =>\n        [GroupsAccessStatus.HasAccess, GroupsAccessStatus.HasGroupTypes, GroupsAccessStatus.NoAccess].includes(\n            groupsAccessStatus\n        )\n\n    const renderReleaseConditionGroup = (group: FeatureFlagGroupType, index: number): JSX.Element => {\n        return (\n            <div className=\"w-full\" key={`${index}-${filterGroups.length}`}>\n                {index > 0 && <div className=\"condition-set-separator\">OR</div>}\n                <div className=\"mb-4 border rounded p-4 bg-surface-primary\">\n                    <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center\">\n                            <LemonSnack className=\"mr-2\">Set {index + 1}</LemonSnack>\n                            <div>\n                                {group.properties?.length ? (\n                                    <>\n                                        {readOnly ? (\n                                            <>\n                                                Match <b>{aggregationTargetName}</b> against <b>all</b> criteria\n                                            </>\n                                        ) : (\n                                            <>\n                                                Matching <b>{aggregationTargetName}</b> against the criteria\n                                            </>\n                                        )}\n                                    </>\n                                ) : (\n                                    <>\n                                        Condition set will match <b>all {aggregationTargetName}</b>\n                                    </>\n                                )}\n                            </div>\n                        </div>\n                        {!readOnly && (\n                            <div className=\"flex\">\n                                <LemonButton\n                                    icon={<IconCopy />}\n                                    noPadding\n                                    onClick={() => duplicateConditionSet(index)}\n                                />\n                                {!isEarlyAccessFeatureCondition(group) &&\n                                    (filterGroups.length > 1 || showTrashIconWithOneCondition) && (\n                                        <LemonButton\n                                            icon={<IconTrash />}\n                                            noPadding\n                                            onClick={() => {\n                                                removeConditionSet(index)\n                                                if (filterGroups.length === 1) {\n                                                    removedLastConditionCallback?.()\n                                                }\n                                            }}\n                                        />\n                                    )}\n                            </div>\n                        )}\n                    </div>\n                    <LemonDivider className=\"my-3\" />\n                    {!readOnly && hasNonInstantProperty(group.properties || []) && (\n                        <LemonBanner type=\"info\" className=\"mt-3 mb-3\">\n                            These properties aren't immediately available on first page load for unidentified persons.\n                            This feature flag requires that at least one event is sent prior to becoming available to\n                            your product or website.{' '}\n                            <Link to=\"https://posthog.com/docs/libraries/js#bootstrapping-flags\" target=\"_blank\">\n                                {' '}\n                                Learn more about how to make feature flags available instantly.\n                            </Link>\n                        </LemonBanner>\n                    )}\n\n                    {readOnly ? (\n                        <>\n                            {group.properties?.map((property, idx) => (\n                                <div className=\"feature-flag-property-display\" key={idx}>\n                                    {idx === 0 ? (\n                                        <LemonButton\n                                            icon={<IconSubArrowRight className=\"arrow-right\" />}\n                                            size=\"small\"\n                                        />\n                                    ) : (\n                                        <LemonButton icon={<span className=\"text-sm\">&</span>} size=\"small\" />\n                                    )}\n                                    {property?.type !== 'cohort' &&\n                                        getFilterLabel(\n                                            property.key,\n                                            property.type === 'person'\n                                                ? TaxonomicFilterGroupType.PersonProperties\n                                                : TaxonomicFilterGroupType.EventProperties\n                                        )}\n                                    <LemonSnack>{property.type === 'cohort' ? 'Cohort' : property.key} </LemonSnack>\n                                    {isPropertyFilterWithOperator(property) ? (\n                                        <span>{allOperatorsToHumanName(property.operator)} </span>\n                                    ) : null}\n\n                                    <PropertyValueComponent property={property} />\n                                </div>\n                            ))}\n                        </>\n                    ) : (\n                        <div>\n                            <PropertyFilters\n                                orFiltering={true}\n                                pageKey={`feature-flag-${id}-${index}-${filterGroups.length}-${\n                                    filters.aggregation_group_type_index ?? ''\n                                }`}\n                                propertyFilters={group?.properties}\n                                logicalRowDivider\n                                addText=\"Add condition\"\n                                onChange={(properties) => updateConditionSet(index, undefined, properties)}\n                                taxonomicGroupTypes={taxonomicGroupTypes}\n                                taxonomicFilterOptionsFromProp={filtersTaxonomicOptions}\n                                hasRowOperator={false}\n                                sendAllKeyUpdates\n                                allowRelativeDateOptions\n                                errorMessages={\n                                    propertySelectErrors?.[index]?.properties?.some((message) => !!message.value)\n                                        ? propertySelectErrors[index].properties?.map((message, index) => {\n                                              return message.value ? (\n                                                  <div\n                                                      key={index}\n                                                      className=\"text-danger flex items-center gap-1 text-sm Field--error\"\n                                                  >\n                                                      <IconErrorOutline className=\"text-xl\" /> {message.value}\n                                                  </div>\n                                              ) : (\n                                                  <></>\n                                              )\n                                          })\n                                        : null\n                                }\n                                exactMatchFeatureFlagCohortOperators={true}\n                                hideBehavioralCohorts={true}\n                            />\n                        </div>\n                    )}\n                    {(!readOnly || (readOnly && (group.properties?.length || 0) > 0)) && (\n                        <LemonDivider className=\"my-3\" />\n                    )}\n                    {readOnly ? (\n                        <LemonTag\n                            type={\n                                filterGroups.length == 1\n                                    ? group.rollout_percentage == null || group.rollout_percentage == 100\n                                        ? 'highlight'\n                                        : group.rollout_percentage == 0\n                                        ? 'caution'\n                                        : 'none'\n                                    : 'none'\n                            }\n                        >\n                            <div className=\"text-sm \">\n                                Rolled out to{' '}\n                                {group.rollout_percentage != null ? <b>{group.rollout_percentage}</b> : <b>100</b>}\n                                <b>%</b>\n                                <span> of </span>\n                                <b>{aggregationTargetName}</b> <span>in this set.</span>\n                            </div>\n                        </LemonTag>\n                    ) : (\n                        <div className=\"feature-flag-form-row gap-2\">\n                            <div className=\"flex flex-wrap items-center gap-1\">\n                                Roll out to{' '}\n                                <LemonSlider\n                                    value={group.rollout_percentage !== null ? group.rollout_percentage : 100}\n                                    onChange={(value) => {\n                                        updateConditionSet(index, value)\n                                    }}\n                                    min={0}\n                                    max={100}\n                                    step={1}\n                                    className=\"ml-1.5 w-20\"\n                                />\n                                <LemonField.Pure error={propertySelectErrors?.[index]?.rollout_percentage} inline>\n                                    <LemonInput\n                                        data-attr=\"rollout-percentage\"\n                                        type=\"number\"\n                                        className=\"ml-2 mr-1.5 max-w-30\"\n                                        onChange={(value): void => {\n                                            updateConditionSet(index, value === undefined ? 0 : value)\n                                        }}\n                                        value={group.rollout_percentage !== null ? group.rollout_percentage : 100}\n                                        min={0}\n                                        max={100}\n                                        step=\"any\"\n                                        suffix={<span>%</span>}\n                                    />\n                                </LemonField.Pure>{' '}\n                                <div\n                                    className={clsx(\n                                        propertySelectErrors?.[index]?.rollout_percentage ? 'basis-full h-0' : ''\n                                    )}\n                                />\n                                of <b>{aggregationTargetName}</b> in this set. Will match approximately{' '}\n                                {affectedUsers[index] !== undefined ? (\n                                    <b>\n                                        {`${\n                                            computeBlastRadiusPercentage(group.rollout_percentage, index).toPrecision(\n                                                2\n                                            ) * 1\n                                            // Multiplying by 1 removes trailing zeros after the decimal\n                                            // point added by toPrecision\n                                        }% `}\n                                    </b>\n                                ) : (\n                                    <Spinner className=\"mr-1\" />\n                                )}{' '}\n                                {(() => {\n                                    const affectedUserCount = affectedUsers[index]\n                                    if (\n                                        affectedUserCount !== undefined &&\n                                        affectedUserCount >= 0 &&\n                                        totalUsers !== null\n                                    ) {\n                                        return `(${humanFriendlyNumber(\n                                            Math.floor((affectedUserCount * (group.rollout_percentage ?? 100)) / 100)\n                                        )} / ${humanFriendlyNumber(totalUsers)})`\n                                    }\n                                    return ''\n                                })()}{' '}\n                                <span>of total {aggregationTargetName}.</span>\n                            </div>\n                        </div>\n                    )}\n                    {featureFlagVariants.length > 0 && (\n                        <>\n                            <LemonDivider className=\"my-3\" />\n                            {readOnly ? (\n                                <div>\n                                    All <b>{aggregationTargetName}</b> in this set{' '}\n                                    {group.variant ? (\n                                        <>\n                                            {' '}\n                                            will be in variant <b>{group.variant}</b>\n                                        </>\n                                    ) : (\n                                        <>have no variant override</>\n                                    )}\n                                </div>\n                            ) : (\n                                <div className=\"feature-flag-form-row\">\n                                    <div className=\"centered\">\n                                        <b>Optional override:</b> Set variant for all <b>{aggregationTargetName}</b> in\n                                        this set to{' '}\n                                        <LemonSelect\n                                            placeholder=\"Select variant\"\n                                            allowClear={true}\n                                            value={group.variant}\n                                            onChange={(value) => updateConditionSet(index, undefined, undefined, value)}\n                                            options={featureFlagVariants.map((variant) => ({\n                                                label: variant.key,\n                                                value: variant.key,\n                                            }))}\n                                            data-attr=\"feature-flags-variant-override-select\"\n                                        />\n                                    </div>\n                                </div>\n                            )}\n                        </>\n                    )}\n                </div>\n            </div>\n        )\n    }\n\n    const renderSuperReleaseConditionGroup = (group: FeatureFlagGroupType, index: number): JSX.Element => {\n        if (!readOnly) {\n            return <></>\n        }\n\n        // TODO: EarlyAccessFeatureType is not the correct type for featureFlag.features, hence bypassing TS check\n        const hasMatchingEarlyAccessFeature = earlyAccessFeaturesList?.find((f: any) => f.flagKey === featureFlagKey)\n\n        return (\n            <div className=\"w-full\" key={`${index}-${filterGroups.length}`}>\n                {index > 0 && <div className=\"condition-set-separator\">OR</div>}\n                <div className=\"mb-4 rounded p-4 bg-surface-primary\">\n                    <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center\">\n                            <div>\n                                {group.properties?.length ? (\n                                    <>\n                                        Match <b>{aggregationTargetName}</b> against value set on{' '}\n                                        <LemonSnack>{'$feature_enrollment/' + featureFlagKey}</LemonSnack>\n                                    </>\n                                ) : (\n                                    <>\n                                        Condition set will match <b>all {aggregationTargetName}</b>\n                                    </>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                    <LemonDivider className=\"my-3\" />\n\n                    {(group.properties?.length || 0) > 0 && (\n                        <>\n                            <div className=\"feature-flag-property-display\">\n                                <LemonButton icon={<IconSubArrowRight className=\"arrow-right\" />} size=\"small\" />\n                                <span>\n                                    If null, default to <b>Release conditions</b>\n                                </span>\n                            </div>\n                            <LemonDivider className=\"my-3\" />\n                        </>\n                    )}\n                    <div className=\"flex items-center justify-between\">\n                        <div />\n                        <LemonButton\n                            disabledReason={\n                                !hasMatchingEarlyAccessFeature &&\n                                'The matching Early Access Feature was not found. You can create it in the Early Access Management tab.'\n                            }\n                            aria-label=\"more\"\n                            data-attr=\"feature-flag-feature-list-button\"\n                            size=\"small\"\n                            onClick={() =>\n                                hasEarlyAccessFeatures &&\n                                router.actions.push(urls.earlyAccessFeature(earlyAccessFeaturesList[0].id))\n                            }\n                        >\n                            {hasMatchingEarlyAccessFeature ? 'View Early Access Feature' : 'No Early Access Feature'}\n                        </LemonButton>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <>\n            <div className={`feature-flag-form-row ${excludeTitle && 'mb-2'}`}>\n                <div data-attr=\"feature-flag-release-conditions\" className=\"w-full\">\n                    {readOnly ? (\n                        excludeTitle ? null : (\n                            <h3 className=\"l3\">{isSuper ? 'Super Release Conditions' : 'Release conditions'}</h3>\n                        )\n                    ) : (\n                        <>\n                            {!excludeTitle && (\n                                <>\n                                    <h3 className=\"l3\">Release conditions</h3>\n                                    <div className=\"text-secondary mb-4\">\n                                        Specify {aggregationTargetName} for flag release. Condition sets roll out\n                                        independently.\n                                        {aggregationTargetName === 'users' && (\n                                            <>\n                                                {' '}\n                                                Cohort-based targeting{' '}\n                                                <Link to=\"https://posthog.com/docs/data/cohorts#can-you-use-a-dynamic-behavioral-cohort-as-a-feature-flag-target\">\n                                                    doesn't support dynamic behavioral cohorts.\n                                                </Link>{' '}\n                                            </>\n                                        )}\n                                    </div>\n                                </>\n                            )}\n                        </>\n                    )}\n                    {!readOnly &&\n                        !filterGroups.every(\n                            (group) =>\n                                filterGroups.filter((g) => g.variant === group.variant && g.variant !== null).length < 2\n                        ) && (\n                            <LemonBanner type=\"info\" className=\"mt-3 mb-3\">\n                                Multiple variant overrides detected. We use the variant override for the first condition\n                                set that matches.\n                            </LemonBanner>\n                        )}\n                </div>\n                {!readOnly && showGroupsOptions && !hideMatchOptions && (\n                    <div className=\"centered\">\n                        Match by\n                        <LemonSelect\n                            dropdownMatchSelectWidth={false}\n                            className=\"ml-2\"\n                            data-attr=\"feature-flag-aggregation-filter\"\n                            onChange={(value) => {\n                                // MatchByGroupsIntroductionOption\n                                if (value == -2) {\n                                    return\n                                }\n\n                                const groupTypeIndex = value !== -1 ? value : null\n                                setAggregationGroupTypeIndex(groupTypeIndex)\n                            }}\n                            value={\n                                filters.aggregation_group_type_index != null ? filters.aggregation_group_type_index : -1\n                            }\n                            options={[\n                                { value: -1, label: 'Users' },\n                                ...Array.from(groupTypes.values()).map((groupType) => ({\n                                    value: groupType.group_type_index,\n                                    label: capitalizeFirstLetter(aggregationLabel(groupType.group_type_index).plural),\n                                    disabledReason: hasEarlyAccessFeatures\n                                        ? 'This feature flag cannot be group-based, because it is linked to an early access feature.'\n                                        : null,\n                                })),\n                                ...(includeGroupsIntroductionOption()\n                                    ? [\n                                          {\n                                              value: -2,\n                                              label: 'MatchByGroupsIntroductionOption',\n                                              labelInMenu: matchByGroupsIntroductionOption,\n                                          },\n                                      ]\n                                    : []),\n                            ]}\n                        />\n                    </div>\n                )}\n            </div>\n            <div className=\"FeatureConditionCard\">\n                {filterGroups.map((group, index) =>\n                    isSuper ? renderSuperReleaseConditionGroup(group, index) : renderReleaseConditionGroup(group, index)\n                )}\n            </div>\n            {!readOnly && (\n                <LemonButton type=\"secondary\" className=\"mt-0 w-max\" onClick={addConditionSet} icon={<IconPlus />}>\n                    Add condition set\n                </LemonButton>\n            )}\n        </>\n    )\n}\n", "import { IconLock } from '@posthog/icons'\nimport { Link } from 'lib/lemon-ui/Link'\n\nexport function GroupsIntroductionOption(): JSX.Element {\n    return (\n        <div className=\"cursor-default\">\n            <IconLock style={{ marginRight: 6, color: 'var(--warning)' }} />\n            Unique groups \u2013{' '}\n            <Link\n                to=\"https://posthog.com/docs/user-guides/group-analytics?utm_medium=in-product&utm_campaign=group-analytics-learn-more\"\n                target=\"_blank\"\n                data-attr=\"group-analytics-learn-more\"\n                className=\"font-semibold\"\n            >\n                Learn more\n            </Link>\n        </div>\n    )\n}\n", "import { actions, afterMount, connect, kea, key, listeners, path, props, propsChanged, reducers, selectors } from 'kea'\nimport { subscriptions } from 'kea-subscriptions'\nimport api from 'lib/api'\nimport { isEmptyProperty } from 'lib/components/PropertyFilters/utils'\nimport { TaxonomicFilterGroupType, TaxonomicFilterProps } from 'lib/components/TaxonomicFilter/types'\nimport { objectsEqual, range } from 'lib/utils'\nimport { projectLogic } from 'scenes/projectLogic'\n\nimport { groupsModel } from '~/models/groupsModel'\nimport {\n    AnyPropertyFilter,\n    FeatureFlagFilters,\n    FeatureFlagGroupType,\n    GroupTypeIndex,\n    MultivariateFlagVariant,\n    PropertyFilterType,\n    UserBlastRadiusType,\n} from '~/types'\n\nimport type { featureFlagReleaseConditionsLogicType } from './FeatureFlagReleaseConditionsLogicType'\n\n// TODO: Type onChange errors properly\nexport interface FeatureFlagReleaseConditionsLogicProps {\n    filters: FeatureFlagFilters\n    id?: string\n    readOnly?: boolean\n    onChange?: (filters: FeatureFlagFilters, errors: any) => void\n    nonEmptyFeatureFlagVariants?: MultivariateFlagVariant[]\n}\n\nexport const featureFlagReleaseConditionsLogic = kea<featureFlagReleaseConditionsLogicType>([\n    path(['scenes', 'feature-flags', 'featureFlagReleaseConditionsLogic']),\n    props({} as FeatureFlagReleaseConditionsLogicProps),\n    key(({ id }) => id ?? 'unknown'),\n    connect({\n        values: [projectLogic, ['currentProjectId'], groupsModel, ['groupTypes', 'aggregationLabel']],\n    }),\n    actions({\n        setFilters: (filters: FeatureFlagFilters) => ({ filters }),\n        setAggregationGroupTypeIndex: (value: number | null) => ({ value }),\n        addConditionSet: true,\n        removeConditionSet: (index: number) => ({ index }),\n        duplicateConditionSet: (index: number) => ({ index }),\n        updateConditionSet: (\n            index: number,\n            newRolloutPercentage?: number,\n            newProperties?: AnyPropertyFilter[],\n            newVariant?: string | null\n        ) => ({\n            index,\n            newRolloutPercentage,\n            newProperties,\n            newVariant,\n        }),\n        setAffectedUsers: (index: number, count?: number) => ({ index, count }),\n        setTotalUsers: (count: number) => ({ count }),\n        calculateBlastRadius: true,\n    }),\n    reducers(({ props }) => ({\n        filters: [\n            props.filters,\n            {\n                setFilters: (_, { filters }) => ({ ...filters }),\n                setAggregationGroupTypeIndex: (state, { value }) => {\n                    if (!state || state.aggregation_group_type_index == value) {\n                        return state\n                    }\n\n                    const originalRolloutPercentage = state.groups[0].rollout_percentage\n\n                    return {\n                        ...state,\n                        aggregation_group_type_index: value,\n                        // :TRICKY: We reset property filters after changing what you're aggregating by.\n                        groups: [{ properties: [], rollout_percentage: originalRolloutPercentage, variant: null }],\n                    }\n                },\n                addConditionSet: (state) => {\n                    if (!state) {\n                        return state\n                    }\n                    const groups = [\n                        ...(state?.groups || []),\n                        { properties: [], rollout_percentage: undefined, variant: null },\n                    ]\n                    return { ...state, groups }\n                },\n                updateConditionSet: (state, { index, newRolloutPercentage, newProperties, newVariant }) => {\n                    if (!state) {\n                        return state\n                    }\n\n                    const groups = [...(state?.groups || [])]\n                    if (newRolloutPercentage !== undefined) {\n                        groups[index] = { ...groups[index], rollout_percentage: newRolloutPercentage }\n                    }\n\n                    if (newProperties !== undefined) {\n                        groups[index] = { ...groups[index], properties: newProperties }\n                    }\n\n                    if (newVariant !== undefined) {\n                        groups[index] = { ...groups[index], variant: newVariant }\n                    }\n\n                    return { ...state, groups }\n                },\n                removeConditionSet: (state, { index }) => {\n                    if (!state) {\n                        return state\n                    }\n                    const groups = [...state.groups]\n                    groups.splice(index, 1)\n                    return { ...state, groups }\n                },\n                duplicateConditionSet: (state, { index }) => {\n                    if (!state) {\n                        return state\n                    }\n                    const groups = state.groups.concat([state.groups[index]])\n                    return { ...state, groups }\n                },\n            },\n        ],\n        affectedUsers: [\n            { 0: undefined } as Record<number, number | undefined>,\n            {\n                setAffectedUsers: (state, { index, count }) => ({\n                    ...state,\n                    [index]: count,\n                }),\n            },\n        ],\n        totalUsers: [\n            null as number | null,\n            {\n                setTotalUsers: (_, { count }) => count,\n            },\n        ],\n    })),\n    listeners(({ actions, values }) => ({\n        duplicateConditionSet: async ({ index }, breakpoint) => {\n            await breakpoint(1000) // in ms\n            const valueForSourceCondition = values.affectedUsers[index]\n            const newIndex = values.filters.groups.length - 1\n            actions.setAffectedUsers(newIndex, valueForSourceCondition)\n        },\n        updateConditionSet: async ({ index, newProperties }, breakpoint) => {\n            if (newProperties) {\n                // properties have changed, so we'll have to re-fetch affected users\n                actions.setAffectedUsers(index, undefined)\n            }\n\n            if (!newProperties || newProperties.some(isEmptyProperty)) {\n                return\n            }\n\n            await breakpoint(1000) // in ms\n            const response = await api.create(\n                `api/projects/${values.currentProjectId}/feature_flags/user_blast_radius`,\n                {\n                    condition: { properties: newProperties },\n                    group_type_index: values.filters?.aggregation_group_type_index ?? null,\n                }\n            )\n            actions.setAffectedUsers(index, response.users_affected)\n            actions.setTotalUsers(response.total_users)\n        },\n        addConditionSet: () => {\n            actions.setAffectedUsers(values.filters.groups.length - 1, values.totalUsers || -1)\n        },\n        removeConditionSet: ({ index }) => {\n            const previousLength = Object.keys(values.affectedUsers).length\n            range(index, previousLength).map((idx) => {\n                const count = previousLength - 1 === idx ? undefined : values.affectedUsers[idx + 1]\n                actions.setAffectedUsers(idx, count)\n            })\n        },\n        setAggregationGroupTypeIndex: () => {\n            actions.calculateBlastRadius()\n        },\n        calculateBlastRadius: async () => {\n            const usersAffected: Promise<UserBlastRadiusType>[] = []\n\n            values.filters?.groups?.forEach((condition, index) => {\n                actions.setAffectedUsers(index, undefined)\n\n                const properties = condition.properties\n                if (!properties || properties.some(isEmptyProperty)) {\n                    // don't compute for incomplete conditions\n                    usersAffected.push(Promise.resolve({ users_affected: -1, total_users: -1 }))\n                } else if (properties.length === 0) {\n                    // Request total users for empty condition sets\n                    const responsePromise = api.create(\n                        `api/projects/${values.currentProjectId}/feature_flags/user_blast_radius`,\n                        {\n                            condition: { properties: [] },\n                            group_type_index: values.filters?.aggregation_group_type_index ?? null,\n                        }\n                    )\n\n                    usersAffected.push(responsePromise)\n                } else {\n                    const responsePromise = api.create(\n                        `api/projects/${values.currentProjectId}/feature_flags/user_blast_radius`,\n                        {\n                            condition,\n                            group_type_index: values.filters?.aggregation_group_type_index ?? null,\n                        }\n                    )\n\n                    usersAffected.push(responsePromise)\n                }\n            })\n\n            const results = await Promise.all(usersAffected)\n            // Create action for all users affected\n            results.forEach((result, index) => {\n                actions.setAffectedUsers(index, result.users_affected)\n                if (result.total_users !== -1) {\n                    actions.setTotalUsers(result.total_users)\n                }\n            })\n        },\n    })),\n    selectors({\n        taxonomicGroupTypes: [\n            (s) => [s.filters, s.groupTypes],\n            (filters, groupTypes): TaxonomicFilterGroupType[] => {\n                const targetGroupTypes = []\n                const targetGroup =\n                    filters?.aggregation_group_type_index != null\n                        ? groupTypes.get(filters.aggregation_group_type_index as GroupTypeIndex)\n                        : undefined\n                if (targetGroup) {\n                    targetGroupTypes.push(\n                        `${TaxonomicFilterGroupType.GroupsPrefix}_${targetGroup?.group_type_index}` as unknown as TaxonomicFilterGroupType\n                    )\n\n                    targetGroupTypes.push(\n                        `${TaxonomicFilterGroupType.GroupNamesPrefix}_${filters.aggregation_group_type_index}` as unknown as TaxonomicFilterGroupType\n                    )\n                } else {\n                    targetGroupTypes.push(TaxonomicFilterGroupType.PersonProperties)\n                    targetGroupTypes.push(TaxonomicFilterGroupType.Cohorts)\n                    targetGroupTypes.push(TaxonomicFilterGroupType.Metadata)\n                }\n\n                return targetGroupTypes\n            },\n        ],\n        aggregationTargetName: [\n            (s) => [s.filters, s.aggregationLabel],\n            (filters, aggregationLabel): string => {\n                if (filters.aggregation_group_type_index != null) {\n                    return aggregationLabel(filters.aggregation_group_type_index).plural\n                }\n                return 'users'\n            },\n        ],\n        filtersTaxonomicOptions: [\n            (s) => [s.filters],\n            (filters) => {\n                if (filters && filters.aggregation_group_type_index != null) {\n                    return {}\n                }\n\n                const taxonomicOptions: TaxonomicFilterProps['optionsFromProp'] = {\n                    [TaxonomicFilterGroupType.Metadata]: [\n                        { name: 'distinct_id', propertyFilterType: PropertyFilterType.Person },\n                    ],\n                }\n                return taxonomicOptions\n            },\n        ],\n        propertySelectErrors: [\n            (s) => [s.filters],\n            (filters) => {\n                return filters?.groups?.map(({ properties, rollout_percentage }: FeatureFlagGroupType) => ({\n                    properties: properties?.map((property: AnyPropertyFilter) => ({\n                        value: isEmptyProperty(property) ? \"Property filters can't be empty\" : undefined,\n                    })),\n                    rollout_percentage:\n                        rollout_percentage === undefined ? 'You need to set a rollout % value' : undefined,\n                    variant: null,\n                }))\n            },\n        ],\n        computeBlastRadiusPercentage: [\n            (s) => [s.affectedUsers, s.totalUsers],\n            (affectedUsers, totalUsers) => (rolloutPercentage, index) => {\n                let effectiveRolloutPercentage = rolloutPercentage\n                if (\n                    rolloutPercentage === undefined ||\n                    rolloutPercentage === null ||\n                    (rolloutPercentage && rolloutPercentage > 100)\n                ) {\n                    effectiveRolloutPercentage = 100\n                }\n\n                if (\n                    affectedUsers[index] === -1 ||\n                    totalUsers === -1 ||\n                    !totalUsers ||\n                    affectedUsers[index] === undefined\n                ) {\n                    return effectiveRolloutPercentage\n                }\n\n                let effectiveTotalUsers = totalUsers\n                if (effectiveTotalUsers === 0) {\n                    effectiveTotalUsers = 1\n                }\n\n                return effectiveRolloutPercentage * ((affectedUsers[index] ?? 0) / effectiveTotalUsers)\n            },\n        ],\n    }),\n    propsChanged(({ props, values, actions }) => {\n        if (!objectsEqual(props.filters, values.filters)) {\n            actions.setFilters(props.filters)\n        }\n    }),\n    subscriptions(({ props, values }) => ({\n        filters: (value: FeatureFlagFilters, oldValue: FeatureFlagFilters): void => {\n            if (!objectsEqual(value, oldValue)) {\n                props.onChange?.(value, values.propertySelectErrors)\n            }\n        },\n    })),\n    afterMount(({ props, actions }) => {\n        if (!props.readOnly) {\n            actions.calculateBlastRadius()\n        }\n    }),\n])\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_kea_router", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "GroupsIntroductionOption", "IconLock", "Link", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_subscriptions", "featureFlagReleaseConditionsLogic", "id", "projectLogic", "groupsModel", "filters", "value", "index", "newRolloutPercentage", "newProperties", "newVariant", "count", "props", "_", "state", "originalRolloutPercentage", "groups", "actions", "values", "breakpoint", "valueForSourceCondition", "newIndex", "isEmptyProperty", "response", "api_default", "previousLength", "range", "idx", "usersAffected", "condition", "properties", "responsePromise", "result", "s", "groupTypes", "targetGroupTypes", "targetGroup", "aggregationLabel", "rollout_percentage", "property", "affectedUsers", "totalUsers", "rolloutPercentage", "effectiveRolloutPercentage", "effectiveTotalUsers", "objectsEqual", "oldValue", "import_jsx_runtime", "PropertyValueComponent", "property", "LemonButton", "urls", "IconOpenInNew", "propertyValues", "val", "idx", "LemonSnack", "isPropertyFilterWithOperator", "dateStringToComponents", "dateFilterToText", "FeatureFlagReleaseConditions", "id", "readOnly", "isSuper", "excludeTitle", "filters", "onChange", "hideMatchOptions", "nonEmptyFeatureFlagVariants", "showTrashIconWithOneCondition", "removedLastConditionCallback", "releaseConditionsLogic", "featureFlagReleaseConditionsLogic", "taxonomicGroupTypes", "propertySelectErrors", "computeBlastRadiusPercentage", "affectedUsers", "totalUsers", "filtersTaxonomicOptions", "aggregationTargetName", "setAggregationGroupTypeIndex", "updateConditionSet", "duplicateConditionSet", "removeConditionSet", "addConditionSet", "showGroupsOptions", "groupTypes", "aggregationLabel", "groupsModel", "earlyAccessFeaturesList", "hasEarlyAccessFeatures", "featureFlagKey", "nonEmptyVariants", "featureFlagLogic", "groupsAccessStatus", "groupsAccessLogic", "featureFlagVariants", "filterGroups", "matchByGroupsIntroductionOption", "GroupsIntroductionOption", "hasNonInstantProperty", "properties", "INSTANTLY_AVAILABLE_PROPERTIES", "isEarlyAccessFeatureCondition", "group", "includeGroupsIntroductionOption", "renderReleaseConditionGroup", "index", "IconCopy", "IconTrash", "LemonDivider", "LemonBanner", "Link", "IconSubArrowRight", "getFilterLabel", "allOperatorsToHumanName", "PropertyFilters", "message", "IconErrorOutline", "LemonTag", "LemonSlider", "value", "LemonField", "LemonInput", "clsx", "Spinner", "affectedUserCount", "humanFriendlyNumber", "LemonSelect", "variant", "renderSuperReleaseConditionGroup", "hasMatchingEarlyAccessFeature", "f", "g", "groupType", "capitalizeFirstLetter", "IconPlus"]
}
