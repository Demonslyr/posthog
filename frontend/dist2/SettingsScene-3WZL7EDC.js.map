{
  "version": 3,
  "sources": ["../src/scenes/settings/SettingsScene.tsx", "../src/lib/hooks/useAnchor.ts", "../src/scenes/settings/settingsSceneLogic.ts", "../src/scenes/settings/types.ts"],
  "sourcesContent": ["import { useValues } from 'kea'\nimport { router } from 'kea-router'\nimport { useAnchor } from 'lib/hooks/useAnchor'\nimport { SceneExport } from 'scenes/sceneTypes'\n\nimport { Settings } from './Settings'\nimport { settingsSceneLogic } from './settingsSceneLogic'\n\nexport const scene: SceneExport = {\n    component: SettingsScene,\n    logic: settingsSceneLogic,\n}\n\nexport function SettingsScene(): JSX.Element {\n    const { location } = useValues(router)\n    useAnchor(location.hash)\n\n    return <Settings logicKey=\"settingsScene\" handleLocally />\n}\n", "import { useEffect } from 'react'\n\nexport function useAnchor(hash: string): void {\n    useEffect(() => {\n        if (hash && document.getElementById(hash.slice(1))) {\n            // Allow time for layout and repainting\n            // (setTimeout because requestAnimationFrame resulted in final scroll position being slightly off)\n            setTimeout(() => {\n                // Check if there is a hash and if an element with that id exists\n                const element = document.getElementById(hash.slice(1))\n                if (!element) {\n                    return\n                }\n                element.classList.add('highlighted')\n                element.scrollIntoView()\n            }, 1000 / 60)\n        }\n    }, [hash])\n}\n", "import { connect, kea, listeners, path, selectors } from 'kea'\nimport { actionToUrl, router, urlToAction } from 'kea-router'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { capitalizeFirstLetter } from 'lib/utils'\nimport { copyToClipboard } from 'lib/utils/copyToClipboard'\nimport { Scene } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { Breadcrumb } from '~/types'\n\nimport { settingsLogic } from './settingsLogic'\nimport type { settingsSceneLogicType } from './settingsSceneLogicType'\nimport { SettingId, SettingLevelId, SettingLevelIds, SettingSectionId } from './types'\n\nexport const settingsSceneLogic = kea<settingsSceneLogicType>([\n    path(['scenes', 'settings', 'settingsSceneLogic']),\n    connect(() => ({\n        values: [\n            featureFlagLogic,\n            ['featureFlags'],\n            settingsLogic({ logicKey: 'settingsScene' }),\n            ['selectedLevel', 'selectedSectionId', 'sections', 'settings', 'sections'],\n        ],\n        actions: [settingsLogic({ logicKey: 'settingsScene' }), ['selectLevel', 'selectSection', 'selectSetting']],\n    })),\n\n    selectors({\n        breadcrumbs: [\n            (s) => [s.selectedLevel, s.selectedSectionId, s.sections],\n            (selectedLevel, selectedSectionId, sections): Breadcrumb[] => [\n                {\n                    key: Scene.Settings,\n                    name: `Settings`,\n                    path: urls.settings('project'),\n                },\n                {\n                    key: [Scene.Settings, selectedSectionId || selectedLevel],\n                    name: selectedSectionId\n                        ? sections.find((x) => x.id === selectedSectionId)?.title\n                        : capitalizeFirstLetter(selectedLevel),\n                },\n            ],\n        ],\n    }),\n\n    listeners(({ values }) => ({\n        async selectSetting({ setting }) {\n            const url = urls.absolute(\n                urls.currentProject(\n                    urls.settings(values.selectedSectionId ?? values.selectedLevel, setting as SettingId)\n                )\n            )\n            await copyToClipboard(url)\n        },\n    })),\n\n    urlToAction(({ actions, values }) => ({\n        '/settings/:section': ({ section }) => {\n            if (!section) {\n                return\n            }\n\n            // As of middle of September 2024, `details` and `danger-zone` are the only sections present\n            // at both Environment and Project levels. Others we want to redirect based on the feature flag.\n            // This is just for URLs, since analogous logic for _rendering_ settings is already in settingsLogic.\n            if (!section.endsWith('-details') && !section.endsWith('-danger-zone')) {\n                if (values.featureFlags[FEATURE_FLAGS.ENVIRONMENTS]) {\n                    section = section.replace(/^project/, 'environment')\n                } else {\n                    section = section.replace(/^environment/, 'project')\n                }\n            }\n\n            if (SettingLevelIds.includes(section as SettingLevelId)) {\n                if (section !== values.selectedLevel || values.selectedSectionId) {\n                    actions.selectLevel(section as SettingLevelId)\n                }\n            } else if (section !== values.selectedSectionId) {\n                actions.selectSection(\n                    section as SettingSectionId,\n                    values.sections.find((x) => x.id === section)?.level || 'user'\n                )\n            }\n        },\n    })),\n\n    actionToUrl(({ values }) => ({\n        // Replacing history item instead of pushing, so that the environments<>project redirect doesn't affect history\n        selectLevel({ level }) {\n            return [urls.settings(level), router.values.searchParams, router.values.hashParams, { replace: true }]\n        },\n        selectSection({ section }) {\n            return [urls.settings(section), router.values.searchParams, router.values.hashParams, { replace: true }]\n        },\n        selectSetting({ setting }) {\n            return [\n                urls.settings(values.selectedSectionId ?? values.selectedLevel, setting),\n                undefined,\n                undefined,\n                { replace: true },\n            ]\n        },\n    })),\n])\n", "import { EitherMembershipLevel, FEATURE_FLAGS } from 'lib/constants'\n\nimport { Realm, TeamPublicType, TeamType } from '~/types'\n\nexport type SettingsLogicProps = {\n    logicKey?: string\n    // Optional - if given, renders only the given level\n    settingLevelId?: SettingLevelId\n    // Optional - if given, renders only the given section\n    sectionId?: SettingSectionId\n    // Optional - if given, renders only the given setting\n    settingId?: SettingId\n}\n\nexport const SettingLevelIds = ['environment', 'project', 'organization', 'user'] as const\nexport type SettingLevelId = (typeof SettingLevelIds)[number]\n\nexport type SettingSectionId =\n    | 'environment-details'\n    | 'environment-autocapture'\n    | 'environment-product-analytics'\n    | 'environment-web-analytics'\n    | 'environment-replay'\n    | 'environment-surveys'\n    | 'environment-feature-flags'\n    | 'environment-error-tracking'\n    | 'environment-toolbar'\n    | 'environment-integrations'\n    | 'environment-access-control'\n    | 'environment-role-based-access-control'\n    | 'environment-danger-zone'\n    | 'environment-max'\n    | 'project-details'\n    | 'project-autocapture' // TODO: This section is for backward compat \u2013 remove when Environments are rolled out\n    | 'project-product-analytics' // TODO: This section is for backward compat \u2013 remove when Environments are rolled out\n    | 'project-replay' // TODO: This section is for backward compat \u2013 remove when Environments are rolled out\n    | 'project-surveys' // TODO: This section is for backward compat \u2013 remove when Environments are rolled out\n    | 'project-toolbar' // TODO: This section is for backward compat \u2013 remove when Environments are rolled out\n    | 'project-integrations' // TODO: This section is for backward compat \u2013 remove when Environments are rolled out\n    | 'project-access-control' // TODO: This section is for backward compat \u2013 remove when Environments are rolled out\n    | 'project-role-based-access-control' // TODO: This section is for backward compat \u2013 remove when Environments are rolled out\n    | 'project-danger-zone'\n    | 'organization-ai-consent'\n    | 'organization-details'\n    | 'organization-members'\n    | 'organization-billing'\n    | 'organization-authentication'\n    | 'organization-roles'\n    | 'organization-proxy'\n    | 'organization-danger-zone'\n    | 'user-profile'\n    | 'user-api-keys'\n    | 'user-customization'\n\nexport type SettingId =\n    | 'replay-triggers'\n    | 'display-name'\n    | 'snippet'\n    | 'bookmarklet'\n    | 'variables'\n    | 'autocapture'\n    | 'exception-autocapture'\n    | 'autocapture-data-attributes'\n    | 'date-and-time'\n    | 'internal-user-filtering'\n    | 'data-theme'\n    | 'correlation-analysis'\n    | 'person-display-name'\n    | 'path-cleaning'\n    | 'datacapture'\n    | 'human-friendly-comparison-periods'\n    | 'group-analytics'\n    | 'persons-on-events'\n    | 'replay'\n    | 'replay-network'\n    | 'replay-authorized-domains'\n    | 'replay-ingestion'\n    | 'surveys-interface'\n    | 'feature-flags-interface'\n    | 'error-tracking-user-groups'\n    | 'error-tracking-symbol-sets'\n    | 'error-tracking-alerting'\n    | 'authorized-toolbar-urls'\n    | 'integration-webhooks'\n    | 'integration-slack'\n    | 'integration-other'\n    | 'integration-ip-allowlist'\n    | 'environment-access-control'\n    | 'environment-role-based-access-control'\n    | 'environment-delete'\n    | 'project-delete'\n    | 'project-move'\n    | 'organization-logo'\n    | 'organization-display-name'\n    | 'invites'\n    | 'members'\n    | 'email-members'\n    | 'authentication-domains'\n    | 'organization-ai-consent'\n    | 'organization-roles'\n    | 'organization-delete'\n    | 'organization-proxy'\n    | 'details'\n    | 'change-password'\n    | '2fa'\n    | 'personal-api-keys'\n    | 'notifications'\n    | 'optout'\n    | 'theme'\n    | 'replay-ai-config'\n    | 'heatmaps'\n    | 'hedgehog-mode'\n    | 'persons-join-mode'\n    | 'bounce-rate-page-view-mode'\n    | 'bounce-rate-duration'\n    | 'session-table-version'\n    | 'web-vitals-autocapture'\n    | 'dead-clicks-autocapture'\n    | 'channel-type'\n    | 'cookieless-server-hash-mode'\n    | 'user-groups'\n    | 'web-revenue-events'\n    | 'core-memory'\n\ntype FeatureFlagKey = keyof typeof FEATURE_FLAGS\n\nexport type Setting = {\n    id: SettingId\n    title: JSX.Element | string\n    description?: JSX.Element | string\n    component: JSX.Element\n    /**\n     * Feature flag to gate the setting being shown.\n     * If prefixed with !, the condition is inverted - the setting will only be shown if the is flag false.\n     * When an array is provided, the setting will be shown if ALL of the conditions are met.\n     */\n    flag?: FeatureFlagKey | `!${FeatureFlagKey}` | (FeatureFlagKey | `!${FeatureFlagKey}`)[]\n    hideOn?: Realm[]\n    /**\n     * defaults to true if not provided\n     * can check if a team should have access to a setting and return false if not\n     */\n    allowForTeam?: (team: TeamType | TeamPublicType | null) => boolean\n}\n\nexport interface SettingSection extends Pick<Setting, 'flag'> {\n    id: SettingSectionId\n    to?: string\n    title: JSX.Element | string\n    hideSelfHost?: boolean\n    level: SettingLevelId\n    settings: Setting[]\n    minimumAccessLevel?: EitherMembershipLevel\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "init_dirname", "init_buffer", "init_process", "import_react", "useAnchor", "hash", "element", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "init_dirname", "init_buffer", "init_process", "SettingLevelIds", "settingsSceneLogic", "featureFlagLogic", "settingsLogic", "s", "selectedLevel", "selectedSectionId", "sections", "urls", "x", "capitalizeFirstLetter", "values", "setting", "url", "copyToClipboard", "actions", "section", "FEATURE_FLAGS", "SettingLevelIds", "level", "import_jsx_runtime", "scene", "SettingsScene", "settingsSceneLogic", "location", "useAnchor", "Settings"]
}
