{
  "version": 3,
  "sources": ["../src/lib/utils/semver.ts"],
  "sourcesContent": ["export interface SemanticVersion {\n    major: number\n    minor?: number\n    patch?: number\n    extra?: string\n}\n\nexport function parseVersion(version: string): SemanticVersion {\n    // Regex to parse a semver string, can be just major, major.minor or major.minor.patch\n    // if there is a hyphen thing ignore anything afterwards\n    // strip a leading v if it exists\n    const split = version.split('-', 2)\n    version = split[0]\n    const extra = split[1]\n    const match = version.match(/^v?(\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))?$/)\n    if (!match) {\n        throw new Error(`Invalid semver string: ${version}`)\n    }\n    const [, major, minor, patch] = match\n    const majorInt = parseInt(major, 10)\n    const minorInt = minor != null ? parseInt(minor, 10) : undefined\n    const patchInt = patch != null ? parseInt(patch, 10) : undefined\n\n    if (isNaN(majorInt) || (minorInt != null && isNaN(minorInt)) || (patchInt != null && isNaN(patchInt))) {\n        throw new Error(`Invalid semver string: ${version}`)\n    }\n    return { major: majorInt, minor: minorInt, patch: patchInt, extra }\n}\n\nexport function tryParseVersion(version: string): SemanticVersion | null {\n    try {\n        return parseVersion(version)\n    } catch {\n        return null\n    }\n}\n\nexport interface SemanticVersionDiff {\n    kind: 'major' | 'minor' | 'patch' | 'extra'\n    diff: number\n}\n\nexport function diffVersions(a: string | SemanticVersion, b: string | SemanticVersion): SemanticVersionDiff | null {\n    const pa = typeof a === 'string' ? parseVersion(a) : a\n    const pb = typeof b === 'string' ? parseVersion(b) : b\n\n    if (pa.major !== pb.major) {\n        return { kind: 'major', diff: pa.major - pb.major }\n    }\n    if (pa.minor !== pb.minor) {\n        return { kind: 'minor', diff: (pa.minor ?? 0) - (pb.minor ?? 0) }\n    }\n    if (pa.patch !== pb.patch) {\n        return { kind: 'patch', diff: (pa.patch ?? 0) - (pb.patch ?? 0) }\n    }\n    if (pa.extra !== pb.extra) {\n        // not having an extra is treated as a higher version than having an extra\n        if (pa.extra) {\n            if (pb.extra) {\n                // we don't really use these, if we ever do we should improve this logic to better compare them,\n                // for now just do a simple string comparison rather than trying to parse alpha/beta/rc/etc\n                return { kind: 'extra', diff: pa.extra.localeCompare(pb.extra) }\n            }\n\n            return { kind: 'extra', diff: -1 }\n        }\n        if (pb.extra) {\n            return { kind: 'extra', diff: 1 }\n        }\n        return null\n    }\n    return null\n}\n\nexport function compareVersion(a: string | SemanticVersion, b: string | SemanticVersion): number {\n    const diff = diffVersions(a, b)\n    if (!diff) {\n        return 0\n    }\n    return diff.diff\n}\n\nexport function lowestVersion(versions: (string | SemanticVersion)[]): SemanticVersion {\n    const parsed = versions.map((v) => (typeof v === 'string' ? parseVersion(v) : v))\n    // we expect this list to be small, so don't worry about nlogn vs n from using sort\n    parsed.sort(compareVersion)\n    return parsed[0]\n}\n\nexport function highestVersion(versions: (string | SemanticVersion)[]): SemanticVersion {\n    const parsed = versions.map((v) => (typeof v === 'string' ? parseVersion(v) : v))\n    parsed.sort(compareVersion)\n    return parsed[parsed.length - 1]\n}\n\nexport function isEqualVersion(a: string | SemanticVersion, b: string | SemanticVersion): boolean {\n    return diffVersions(a, b) === null\n}\n\nexport function versionToString(version: SemanticVersion): string {\n    const versionPart = `${version.major}${\n        version.minor != null ? `.${version.minor}${version.patch != null ? `.${version.patch}` : ''}` : ''\n    }`\n    if (version.extra) {\n        return `${versionPart}-${version.extra}`\n    }\n    return versionPart\n}\n\nexport function createVersionChecker(requiredVersion: string | SemanticVersion) {\n    return (version: string | SemanticVersion): boolean => {\n        const diff = diffVersions(version, requiredVersion)\n        return !diff || diff.diff > 0\n    }\n}\n"],
  "mappings": "4DAAAA,IAAAC,IAAAC,IAOO,SAASC,EAAaC,EAAkC,CAI3D,IAAMC,EAAQD,EAAQ,MAAM,IAAK,CAAC,EAClCA,EAAUC,EAAM,CAAC,EACjB,IAAMC,EAAQD,EAAM,CAAC,EACfE,EAAQH,EAAQ,MAAM,mCAAmC,EAC/D,GAAI,CAACG,EACD,MAAM,IAAI,MAAM,0BAA0BH,CAAO,EAAE,EAEvD,GAAM,CAAC,CAAEI,EAAOC,EAAOC,CAAK,EAAIH,EAC1BI,EAAW,SAASH,EAAO,EAAE,EAC7BI,EAAWH,GAAS,KAAO,SAASA,EAAO,EAAE,EAAI,OACjDI,EAAWH,GAAS,KAAO,SAASA,EAAO,EAAE,EAAI,OAEvD,GAAI,MAAMC,CAAQ,GAAMC,GAAY,MAAQ,MAAMA,CAAQ,GAAOC,GAAY,MAAQ,MAAMA,CAAQ,EAC/F,MAAM,IAAI,MAAM,0BAA0BT,CAAO,EAAE,EAEvD,MAAO,CAAE,MAAOO,EAAU,MAAOC,EAAU,MAAOC,EAAU,MAAAP,CAAM,CACtE,CAEO,SAASQ,EAAgBV,EAAyC,CACrE,GAAI,CACA,OAAOD,EAAaC,CAAO,CAC/B,MAAQ,CACJ,OAAO,IACX,CACJ,CAOO,SAASW,EAAaC,EAA6BC,EAAyD,CAC/G,IAAMC,EAAK,OAAOF,GAAM,SAAWb,EAAaa,CAAC,EAAIA,EAC/CG,EAAK,OAAOF,GAAM,SAAWd,EAAac,CAAC,EAAIA,EAErD,OAAIC,EAAG,QAAUC,EAAG,MACT,CAAE,KAAM,QAAS,KAAMD,EAAG,MAAQC,EAAG,KAAM,EAElDD,EAAG,QAAUC,EAAG,MACT,CAAE,KAAM,QAAS,MAAOD,EAAG,OAAS,IAAMC,EAAG,OAAS,EAAG,EAEhED,EAAG,QAAUC,EAAG,MACT,CAAE,KAAM,QAAS,MAAOD,EAAG,OAAS,IAAMC,EAAG,OAAS,EAAG,EAEhED,EAAG,QAAUC,EAAG,MAEZD,EAAG,MACCC,EAAG,MAGI,CAAE,KAAM,QAAS,KAAMD,EAAG,MAAM,cAAcC,EAAG,KAAK,CAAE,EAG5D,CAAE,KAAM,QAAS,KAAM,EAAG,EAEjCA,EAAG,MACI,CAAE,KAAM,QAAS,KAAM,CAAE,EAE7B,KAEJ,IACX,CAEO,SAASC,EAAeJ,EAA6BC,EAAqC,CAC7F,IAAMI,EAAON,EAAaC,EAAGC,CAAC,EAC9B,OAAKI,EAGEA,EAAK,KAFD,CAGf,CASO,SAASC,EAAeC,EAAyD,CACpF,IAAMC,EAASD,EAAS,IAAKE,GAAO,OAAOA,GAAM,SAAWC,EAAaD,CAAC,EAAIA,CAAE,EAChF,OAAAD,EAAO,KAAKG,CAAc,EACnBH,EAAOA,EAAO,OAAS,CAAC,CACnC,CAEO,SAASI,EAAeC,EAA6BC,EAAsC,CAC9F,OAAOC,EAAaF,EAAGC,CAAC,IAAM,IAClC,CAEO,SAASE,EAAgBC,EAAkC,CAC9D,IAAMC,EAAc,GAAGD,EAAQ,KAAK,GAChCA,EAAQ,OAAS,KAAO,IAAIA,EAAQ,KAAK,GAAGA,EAAQ,OAAS,KAAO,IAAIA,EAAQ,KAAK,GAAK,EAAE,GAAK,EACrG,GACA,OAAIA,EAAQ,MACD,GAAGC,CAAW,IAAID,EAAQ,KAAK,GAEnCC,CACX,CAEO,SAASC,EAAqBC,EAA2C,CAC5E,OAAQH,GAA+C,CACnD,IAAMI,EAAON,EAAaE,EAASG,CAAe,EAClD,MAAO,CAACC,GAAQA,EAAK,KAAO,CAChC,CACJ",
  "names": ["init_dirname", "init_buffer", "init_process", "parseVersion", "version", "split", "extra", "match", "major", "minor", "patch", "majorInt", "minorInt", "patchInt", "tryParseVersion", "diffVersions", "a", "b", "pa", "pb", "compareVersion", "diff", "highestVersion", "versions", "parsed", "v", "parseVersion", "compareVersion", "isEqualVersion", "a", "b", "diffVersions", "versionToString", "version", "versionPart", "createVersionChecker", "requiredVersion", "diff"]
}
