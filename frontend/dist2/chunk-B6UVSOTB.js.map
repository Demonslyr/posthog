{
  "version": 3,
  "sources": ["../src/scenes/instance/SystemStatus/systemStatusLogic.ts"],
  "sourcesContent": ["import { actions, events, kea, listeners, path, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport { actionToUrl, urlToAction } from 'kea-router'\nimport api from 'lib/api'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast/LemonToast'\nimport { isUserLoggedIn } from 'lib/utils'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { InstanceSetting, SystemStatus, SystemStatusQueriesResult, SystemStatusRow } from '~/types'\n\nimport type { systemStatusLogicType } from './systemStatusLogicType'\n\nexport enum ConfigMode {\n    View = 'view',\n    Edit = 'edit',\n    Saving = 'saving',\n}\n\nexport type InstanceStatusTabName = 'overview' | 'metrics' | 'settings' | 'staff_users'\n\n/**\n * We allow the specific instance settings that can be edited via the /instance/status page.\n * Even if some settings are editable in the frontend according to the API, we may don't want to expose them here.\n * For example: async migrations settings are handled in their own page.\n */\nconst EDITABLE_INSTANCE_SETTINGS = [\n    'RECORDINGS_TTL_WEEKS',\n    'RECORDINGS_PERFORMANCE_EVENTS_TTL_WEEKS',\n    'EMAIL_ENABLED',\n    'EMAIL_HOST',\n    'EMAIL_PORT',\n    'EMAIL_HOST_USER',\n    'EMAIL_HOST_PASSWORD',\n    'EMAIL_USE_TLS',\n    'EMAIL_USE_SSL',\n    'EMAIL_DEFAULT_FROM',\n    'EMAIL_REPLY_TO',\n    'AGGREGATE_BY_DISTINCT_IDS_TEAMS',\n    'PERSON_ON_EVENTS_ENABLED',\n    'STRICT_CACHING_TEAMS',\n    'SLACK_APP_CLIENT_ID',\n    'SLACK_APP_CLIENT_SECRET',\n    'SLACK_APP_SIGNING_SECRET',\n    'PARALLEL_DASHBOARD_ITEM_CACHE',\n    'RATE_LIMIT_ENABLED',\n    'RATE_LIMITING_ALLOW_LIST_TEAMS',\n    'SENTRY_AUTH_TOKEN',\n    'SENTRY_ORGANIZATION',\n    'HEATMAP_SAMPLE_N',\n]\n\n// Note: This logic does some heavy calculations - avoid connecting it outside of system status pages!\nexport const systemStatusLogic = kea<systemStatusLogicType>([\n    path(['scenes', 'instance', 'SystemStatus', 'systemStatusLogic']),\n    actions({\n        setTab: (tab: InstanceStatusTabName) => ({ tab }),\n        setOpenSections: (sections: string[]) => ({ sections }),\n        setInstanceConfigMode: (mode: ConfigMode) => ({ mode }),\n        updateInstanceConfigValue: (key: string, value?: string | boolean | number) => ({ key, value }),\n        clearInstanceConfigEditing: true,\n        saveInstanceConfig: true,\n        setUpdatedInstanceConfigCount: (count: number | null) => ({ count }),\n        increaseUpdatedInstanceConfigCount: true,\n    }),\n    loaders(() => ({\n        systemStatus: [\n            null as SystemStatus | null,\n            {\n                loadSystemStatus: async () => {\n                    if (!isUserLoggedIn()) {\n                        // If user is anonymous (i.e. viewing a shared dashboard logged out), don't load authenticated stuff\n                        return null\n                    }\n\n                    if (preflightLogic.values.preflight?.cloud && !userLogic.values.user?.is_staff) {\n                        return null\n                    }\n\n                    return (await api.get('api/instance_status')).results ?? null\n                },\n            },\n        ],\n        instanceSettings: [\n            [] as InstanceSetting[],\n            {\n                loadInstanceSettings: async () => {\n                    return (await api.get('api/instance_settings')).results ?? []\n                },\n            },\n        ],\n        queries: [\n            null as SystemStatusQueriesResult | null,\n            {\n                loadQueries: async () => (await api.get('api/instance_status/queries')).results,\n            },\n        ],\n    })),\n    reducers({\n        tab: [\n            'overview' as InstanceStatusTabName,\n            {\n                setTab: (_, { tab }) => tab,\n            },\n        ],\n        error: [\n            null as null | string,\n            {\n                loadSystemStatusFailure: (_, { error }) => error,\n            },\n        ],\n        openSections: [\n            ['0'] as string[],\n            { persist: true },\n            {\n                setOpenSections: (_, { sections }) => sections,\n            },\n        ],\n        instanceConfigMode: [\n            // Determines whether the Instance Configuration table on \"Configuration\" tab is on edit or view mode\n            ConfigMode.View as ConfigMode,\n            {\n                setInstanceConfigMode: (_, { mode }) => mode,\n            },\n        ],\n        instanceConfigEditingState: [\n            {} as Record<string, string | boolean | number>,\n            {\n                updateInstanceConfigValue: (s, { key, value }) => {\n                    if (value !== undefined) {\n                        return { ...s, [key]: value }\n                    }\n                    const newState = { ...s }\n                    delete newState[key]\n                    return newState\n                },\n                clearInstanceConfigEditing: () => ({}),\n            },\n        ],\n        updatedInstanceConfigCount: [\n            null as number | null, // Number of config items that have been updated; `null` means no update is in progress\n            {\n                setUpdatedInstanceConfigCount: (_, { count }) => count,\n                loadInstanceSettings: () => null,\n                increaseUpdatedInstanceConfigCount: (state) => (state ?? 0) + 1,\n            },\n        ],\n    }),\n    selectors(() => ({\n        overview: [\n            (s) => [s.systemStatus],\n            (status: SystemStatus | null): SystemStatusRow[] => (status ? status.overview : []),\n        ],\n        editableInstanceSettings: [\n            (s) => [s.instanceSettings],\n            (instanceSettings): InstanceSetting[] =>\n                instanceSettings.filter((item) => item.editable && EDITABLE_INSTANCE_SETTINGS.includes(item.key)),\n        ],\n    })),\n    listeners(({ actions, values }) => ({\n        setTab: ({ tab }: { tab: InstanceStatusTabName }) => {\n            if (tab === 'metrics') {\n                actions.loadQueries()\n            }\n            actions.setInstanceConfigMode(ConfigMode.View)\n        },\n        updateInstanceConfigValue: ({ key, value }) => {\n            const previousValue = values.editableInstanceSettings.find((item) => item.key === key)?.value\n            if (value && previousValue == value) {\n                actions.updateInstanceConfigValue(key, undefined)\n            }\n        },\n        saveInstanceConfig: async (_, breakpoint) => {\n            actions.setUpdatedInstanceConfigCount(0)\n            await Promise.all(\n                Object.entries(values.instanceConfigEditingState).map(async ([key, value]) => {\n                    await api.update(`api/instance_settings/${key}`, {\n                        value,\n                    })\n                    eventUsageLogic.actions.reportInstanceSettingChange(key, value)\n                    actions.increaseUpdatedInstanceConfigCount()\n                })\n            )\n            await breakpoint(1000)\n            if (values.updatedInstanceConfigCount === Object.keys(values.instanceConfigEditingState).length) {\n                actions.loadInstanceSettings()\n                actions.clearInstanceConfigEditing()\n                actions.setInstanceConfigMode(ConfigMode.View)\n                lemonToast.success('Instance settings updated')\n            }\n        },\n    })),\n    actionToUrl(({ values }) => ({\n        setTab: () => '/instance/' + (values.tab === 'overview' ? 'status' : values.tab),\n    })),\n    urlToAction(({ actions, values }) => ({\n        '/instance(/:tab)': ({ tab }: { tab?: InstanceStatusTabName }) => {\n            const currentTab = tab && ['metrics', 'settings', 'staff_users'].includes(tab) ? tab : 'overview'\n            if (currentTab !== values.tab) {\n                actions.setTab(currentTab)\n            }\n        },\n    })),\n    events(({ actions }) => ({\n        afterMount: () => {\n            actions.loadSystemStatus()\n        },\n    })),\n])\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "import_kea_router", "EDITABLE_INSTANCE_SETTINGS", "systemStatusLogic", "tab", "sections", "mode", "key", "value", "count", "isUserLoggedIn", "preflightLogic", "userLogic", "api_default", "_", "error", "s", "newState", "state", "status", "instanceSettings", "item", "actions", "values", "previousValue", "breakpoint", "eventUsageLogic", "lemonToast", "currentTab"]
}
