{
  "version": 3,
  "sources": ["../src/scenes/authentication/signup/SignupContainer.tsx", "../src/scenes/authentication/signup/signupForm/SignupForm.tsx", "../src/scenes/authentication/signup/signupForm/panels/SignupPanel1.tsx", "../src/scenes/authentication/signup/signupForm/signupLogic.ts", "../src/scenes/authentication/signup/signupForm/panels/SignupPanel2.tsx"],
  "sourcesContent": ["import { IconCheckCircle } from '@posthog/icons'\nimport { useValues } from 'kea'\nimport { router } from 'kea-router'\nimport { BridgePage } from 'lib/components/BridgePage/BridgePage'\nimport { CLOUD_HOSTNAMES } from 'lib/constants'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { Region } from '~/types'\n\nimport { SignupForm } from './signupForm/SignupForm'\n\nexport const scene: SceneExport = {\n    component: SignupContainer,\n}\n\nexport function SignupContainer(): JSX.Element | null {\n    const { preflight } = useValues(preflightLogic)\n    const { user } = useValues(userLogic)\n\n    const footerHighlights = {\n        cloud: ['Hosted & managed by PostHog', 'Pay per event, cancel anytime', 'Fast and reliable support'],\n        selfHosted: ['Fully featured product, unlimited events', 'Data in your own infrastructure', 'Community forum'],\n    }\n\n    return !user ? (\n        <BridgePage\n            view=\"signup\"\n            footer={\n                <div className=\"sm:flex sm:justify-center w-full gap-[10%]\">\n                    {footerHighlights[preflight?.cloud ? 'cloud' : 'selfHosted'].map((val, idx) => (\n                        <p key={idx} className=\"text-center mb-2\">\n                            {val}\n                        </p>\n                    ))}\n                </div>\n            }\n            sideLogo\n            leftContainerContent={<SignupLeftContainer />}\n        >\n            <SignupForm />\n        </BridgePage>\n    ) : null\n}\n\nconst productBenefits = [\n    {\n        benefit: 'Free usage every month - even on paid plans',\n        description: '1M free events, 5K free session recordings, and more. Every month. Forever.',\n    },\n    {\n        benefit: 'Start collecting data immediately',\n        description: 'Integrate with developer-friendly APIs or a low-code web snippet.',\n    },\n    {\n        benefit: 'Join industry leaders that run on PostHog',\n        description: 'Airbus, Hasura, Y Combinator, Staples, and thousands more trust PostHog as their Product OS.',\n    },\n]\n\nexport function SignupLeftContainer(): JSX.Element {\n    const { preflight } = useValues(preflightLogic)\n\n    const getRegionUrl = (region: string): string => {\n        const { pathname, search, hash } = router.values.currentLocation\n        return `https://${CLOUD_HOSTNAMES[region]}${pathname}${search}${hash}`\n    }\n\n    return (\n        <>\n            <div className=\"mb-16 max-w-100\">\n                {productBenefits.map((benefit, i) => (\n                    <div className=\"flex flex-row gap-3 mb-4\" key={i}>\n                        <div>\n                            <IconCheckCircle className=\"mt-0.5 w-5 h-5 text-link\" />\n                        </div>\n                        <div>\n                            <h3 className=\"mb-1 font-bold leading-6\">{benefit.benefit}</h3>\n                            <p className=\"m-0 text-sm\">{benefit.description}</p>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <div className=\"BridgePage__cta border rounded p-4 mt-8 text-center\">\n                Did you know?\n                {preflight?.cloud ? (\n                    <span>\n                        {' '}\n                        You can use our{' '}\n                        <Link to={getRegionUrl(preflight?.region === Region.EU ? Region.US : Region.EU)}>\n                            <strong>PostHog Cloud {preflight?.region === Region.EU ? 'US' : 'EU'}</strong>\n                        </Link>\n                        {preflight?.region === Region.EU ? ', too' : ' for a GDPR-ready deployment'}.\n                    </span>\n                ) : (\n                    <span>\n                        {' '}\n                        You can use our{' '}\n                        <Link to={getRegionUrl(Region.EU)}>\n                            <strong>{Region.EU} cloud</strong>\n                        </Link>{' '}\n                        or{' '}\n                        <Link to={getRegionUrl(Region.US)}>\n                            <strong>{Region.US} cloud</strong>\n                        </Link>{' '}\n                        and we'll take care of the hosting for you.\n                    </span>\n                )}\n            </div>\n        </>\n    )\n}\n", "import { IconArrowLeft } from '@posthog/icons'\nimport { LemonButton } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { SpinnerOverlay } from 'lib/lemon-ui/Spinner/Spinner'\nimport { useEffect, useState } from 'react'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\nimport { SceneExport } from 'scenes/sceneTypes'\n\nimport { userLogic } from '../../../userLogic'\nimport { SignupPanel1 } from './panels/SignupPanel1'\nimport { SignupPanel2 } from './panels/SignupPanel2'\nimport { signupLogic } from './signupLogic'\n\nexport const scene: SceneExport = {\n    component: SignupForm,\n    logic: signupLogic,\n}\n\nexport function SignupForm(): JSX.Element | null {\n    const { preflight } = useValues(preflightLogic)\n    const { user } = useValues(userLogic)\n    const { isSignupPanel2Submitting, signupPanel2ManualErrors, panel } = useValues(signupLogic)\n    const { setPanel } = useActions(signupLogic)\n    const [showSpinner, setShowSpinner] = useState(true)\n\n    useEffect(() => {\n        setShowSpinner(true)\n        const t = setTimeout(() => {\n            setShowSpinner(false)\n        }, 500)\n        return () => clearTimeout(t)\n    }, [panel])\n\n    return !user ? (\n        <div className=\"space-y-2\">\n            <h2>\n                {preflight?.demo\n                    ? 'Explore PostHog yourself'\n                    : panel === 0\n                    ? 'Get started'\n                    : 'Tell us a bit about yourself'}\n            </h2>\n            {!isSignupPanel2Submitting && signupPanel2ManualErrors?.generic && (\n                <LemonBanner type=\"error\">\n                    {signupPanel2ManualErrors.generic?.detail || 'Could not complete your signup. Please try again.'}\n                </LemonBanner>\n            )}\n            {panel === 0 ? (\n                <SignupPanel1 />\n            ) : (\n                <>\n                    <SignupPanel2 />\n                    <div className=\"flex justify-center\">\n                        <LemonButton\n                            icon={<IconArrowLeft />}\n                            onClick={() => setPanel(panel - 1)}\n                            size=\"small\"\n                            center\n                            data-attr=\"signup-go-back\"\n                        >\n                            or go back\n                        </LemonButton>\n                    </div>\n                </>\n            )}\n            {showSpinner ? <SpinnerOverlay sceneLevel /> : null}\n        </div>\n    ) : null\n}\n", "import { LemonButton, LemonInput } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport PasswordStrength from 'lib/components/PasswordStrength'\nimport { SocialLoginButtons } from 'lib/components/SocialLoginButton/SocialLoginButton'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { useEffect, useRef } from 'react'\nimport RegionSelect from 'scenes/authentication/RegionSelect'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\n\nimport { signupLogic } from '../signupLogic'\n\nexport function SignupPanel1(): JSX.Element | null {\n    const { preflight, socialAuthAvailable } = useValues(preflightLogic)\n    const { isSignupPanel1Submitting, validatedPassword } = useValues(signupLogic)\n    const emailInputRef = useRef<HTMLInputElement | null>(null)\n\n    useEffect(() => {\n        // There's no password in the demo environment\n        emailInputRef?.current?.focus()\n    }, [preflight?.demo])\n\n    return (\n        <div className=\"space-y-4 Signup__panel__1\">\n            <RegionSelect />\n            {!preflight?.demo && socialAuthAvailable && (\n                <>\n                    <SocialLoginButtons caption=\"Sign up with\" bottomDivider className=\"mt-6\" />\n                    <p className=\"text-secondary text-center mb-0\">Or use email & password</p>\n                </>\n            )}\n            <Form logic={signupLogic} formKey=\"signupPanel1\" className=\"space-y-4\" enableFormOnSubmit>\n                <LemonField name=\"email\" label=\"Email\">\n                    <LemonInput\n                        className=\"ph-ignore-input\"\n                        autoFocus\n                        data-attr=\"signup-email\"\n                        placeholder=\"email@yourcompany.com\"\n                        type=\"email\"\n                        inputRef={emailInputRef}\n                        disabled={isSignupPanel1Submitting}\n                    />\n                </LemonField>\n                {!preflight?.demo && (\n                    <LemonField\n                        name=\"password\"\n                        label={\n                            <div className=\"flex flex-1 items-center justify-between\">\n                                <span>Password</span>\n                                <PasswordStrength validatedPassword={validatedPassword} />\n                            </div>\n                        }\n                    >\n                        <LemonInput\n                            type=\"password\"\n                            autoComplete=\"new-password\"\n                            className=\"ph-ignore-input\"\n                            data-attr=\"password\"\n                            placeholder=\"\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\"\n                            disabled={isSignupPanel1Submitting}\n                        />\n                    </LemonField>\n                )}\n                <LemonButton\n                    fullWidth\n                    type=\"primary\"\n                    status=\"alt\"\n                    center\n                    htmlType=\"submit\"\n                    data-attr=\"signup-start\"\n                    loading={isSignupPanel1Submitting}\n                    disabled={isSignupPanel1Submitting}\n                    size=\"large\"\n                >\n                    Continue\n                </LemonButton>\n            </Form>\n            {!preflight?.demo && (preflight?.cloud || preflight?.initiated) && (\n                // If we're in the demo environment, login is unified with signup and it's passwordless\n                // For now, if you're not on Cloud, you wouldn't see this page,\n                // but future-proofing this (with `preflight.initiated`) in case this changes\n                <div className=\"text-center mt-4\">\n                    Already have an account?{' '}\n                    <Link to=\"/login\" data-attr=\"signup-login-link\" className=\"font-bold\">\n                        Log in\n                    </Link>\n                </div>\n            )}\n        </div>\n    )\n}\n", "import { lemonToast } from '@posthog/lemon-ui'\nimport { isString } from '@tiptap/core'\nimport { actions, connect, kea, path, reducers, selectors } from 'kea'\nimport { forms } from 'kea-forms'\nimport { urlToAction } from 'kea-router'\nimport api from 'lib/api'\nimport { ValidatedPasswordResult, validatePassword } from 'lib/components/PasswordStrength'\nimport { CLOUD_HOSTNAMES, FEATURE_FLAGS } from 'lib/constants'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport posthog from 'posthog-js'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\nimport { urls } from 'scenes/urls'\n\nimport type { signupLogicType } from './signupLogicType'\n\nexport interface AccountResponse {\n    success: boolean\n    redirect_url?: string\n    errorCode?: string\n    errorDetail?: string\n    errorAttribute?: string\n}\n\nexport interface SignupForm {\n    email: string\n    password: string\n    name: string\n    organization_name: string\n    role_at_organization: string\n    referral_source: string\n}\n\nexport const emailRegex: RegExp =\n    // eslint-disable-next-line no-control-regex\n    /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/\n\nexport const signupLogic = kea<signupLogicType>([\n    path(['scenes', 'authentication', 'signupLogic']),\n    connect({\n        values: [preflightLogic, ['preflight'], featureFlagLogic, ['featureFlags']],\n    }),\n    actions({\n        setPanel: (panel: number) => ({ panel }),\n    }),\n    reducers({\n        panel: [\n            0,\n            {\n                setPanel: (_, { panel }) => panel,\n            },\n        ],\n    }),\n    forms(({ actions, values }) => ({\n        signupPanel1: {\n            alwaysShowErrors: true,\n            showErrorsOnTouch: true,\n            defaults: {\n                email: '',\n                password: '',\n            } as SignupForm,\n            errors: ({ email, password }) => ({\n                email: !email\n                    ? 'Please enter your email to continue'\n                    : !emailRegex.test(email)\n                    ? 'Please use a valid email address'\n                    : undefined,\n                password: !values.preflight?.demo\n                    ? !password\n                        ? 'Please enter your password to continue'\n                        : values.validatedPassword.feedback || undefined\n                    : undefined,\n            }),\n            submit: async () => {\n                actions.setPanel(1)\n            },\n        },\n        signupPanel2: {\n            alwaysShowErrors: true,\n            showErrorsOnTouch: true,\n            defaults: {\n                name: '',\n                organization_name: '',\n                role_at_organization: '',\n                referral_source: '',\n            } as SignupForm,\n            errors: ({ name, role_at_organization }) => ({\n                name: !name ? 'Please enter your name' : undefined,\n                role_at_organization: !role_at_organization ? 'Please select your role in the organization' : undefined,\n            }),\n            submit: async (payload, breakpoint) => {\n                breakpoint()\n                try {\n                    const res = await api.create('api/signup/', {\n                        ...values.signupPanel1,\n                        ...payload,\n                        first_name: payload.name.split(' ')[0],\n                        last_name: payload.name.split(' ')[1] || undefined,\n                        organization_name: payload.organization_name || undefined,\n                    })\n                    if (!payload.organization_name) {\n                        posthog.capture('sign up organization name not provided')\n                    }\n                    location.href = res.redirect_url || '/'\n                } catch (e) {\n                    actions.setSignupPanel2ManualErrors({\n                        generic: {\n                            code: (e as Record<string, any>).code,\n                            detail: (e as Record<string, any>).detail,\n                        },\n                    })\n                    throw e\n                }\n            },\n        },\n    })),\n    selectors({\n        validatedPassword: [\n            (s) => [s.signupPanel1],\n            ({ password }): ValidatedPasswordResult => {\n                return validatePassword(password)\n            },\n        ],\n    }),\n    urlToAction(({ actions, values }) => ({\n        '/signup': (_, { email, maintenanceRedirect }) => {\n            if (values.preflight?.cloud) {\n                // Redirect to a different region if we are doing maintenance on one of them\n                const regionOverrideFlag = values.featureFlags[FEATURE_FLAGS.REDIRECT_SIGNUPS_TO_INSTANCE]\n                const regionsAllowList = ['eu', 'us']\n                const isRegionOverrideValid =\n                    isString(regionOverrideFlag) && regionsAllowList.includes(regionOverrideFlag)\n                // KLUDGE: the backend can technically return null\n                // but definitely does in Cypress tests\n                // and, we don't want to redirect to the app unless the preflight region is valid\n                const isPreflightRegionValid =\n                    values.preflight?.region && regionsAllowList.includes(values.preflight?.region)\n\n                if (\n                    isRegionOverrideValid &&\n                    isPreflightRegionValid &&\n                    regionOverrideFlag !== values.preflight?.region?.toLowerCase()\n                ) {\n                    window.location.href = `https://${\n                        CLOUD_HOSTNAMES[regionOverrideFlag.toUpperCase()]\n                    }${urls.signup()}?maintenanceRedirect=true`\n                }\n                if (maintenanceRedirect && isRegionOverrideValid) {\n                    lemonToast.info(\n                        `You've been redirected to signup on our ${regionOverrideFlag.toUpperCase()} instance while we perform maintenance on our other instance.`\n                    )\n                }\n            }\n            if (email) {\n                if (values.preflight?.demo) {\n                    // In demo mode no password is needed, so we can log in right away\n                    // This allows us to give a quick login link in the `generate_demo_data` command\n                    // X and Y are placeholders, irrelevant because the account should already exists\n                    actions.setSignupPanel1Values({\n                        email,\n                    })\n                    actions.setSignupPanel2Values({\n                        name: 'X',\n                        organization_name: 'Y',\n                    })\n                    actions.submitSignupPanel2()\n                } else {\n                    actions.setSignupPanel1Value('email', email)\n                }\n            }\n        },\n    })),\n])\n", "import { LemonButton, LemonInput, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport SignupReferralSource from 'lib/components/SignupReferralSource'\nimport SignupRoleSelect from 'lib/components/SignupRoleSelect'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\n\nimport { signupLogic } from '../signupLogic'\n\nconst UTM_TAGS = 'utm_campaign=in-product&utm_tag=signup-header'\n\nexport function SignupPanel2(): JSX.Element | null {\n    const { preflight } = useValues(preflightLogic)\n    const { setSignupPanel2ManualErrors } = useActions(signupLogic)\n    const { isSignupPanel2Submitting } = useValues(signupLogic)\n\n    return (\n        <div className=\"space-y-4 Signup__panel__2\">\n            <Form logic={signupLogic} formKey=\"signupPanel2\" className=\"space-y-4\" enableFormOnSubmit>\n                <LemonField name=\"name\" label=\"Your name\">\n                    <LemonInput\n                        className=\"ph-ignore-input\"\n                        data-attr=\"signup-name\"\n                        placeholder=\"Jane Doe\"\n                        disabled={isSignupPanel2Submitting}\n                    />\n                </LemonField>\n                <LemonField name=\"organization_name\" label=\"Organization name\">\n                    <LemonInput\n                        className=\"ph-ignore-input\"\n                        data-attr=\"signup-organization-name\"\n                        placeholder=\"Hogflix Movies\"\n                        disabled={isSignupPanel2Submitting}\n                    />\n                </LemonField>\n                <SignupRoleSelect />\n                <SignupReferralSource disabled={isSignupPanel2Submitting} />\n                <div className=\"divider\" />\n\n                <LemonButton\n                    fullWidth\n                    type=\"primary\"\n                    center\n                    htmlType=\"submit\"\n                    data-attr=\"signup-submit\"\n                    onClick={() => setSignupPanel2ManualErrors({})}\n                    loading={isSignupPanel2Submitting}\n                    disabled={isSignupPanel2Submitting}\n                    status=\"alt\"\n                    size=\"large\"\n                >\n                    {!preflight?.demo\n                        ? 'Create account'\n                        : !isSignupPanel2Submitting\n                        ? 'Enter the demo environment'\n                        : 'Preparing demo data\u2026'}\n                </LemonButton>\n            </Form>\n\n            <div className=\"text-center text-secondary\">\n                By {!preflight?.demo ? 'creating an account' : 'entering the demo environment'}, you agree to our{' '}\n                <Link to={`https://posthog.com/terms?${UTM_TAGS}`} target=\"_blank\">\n                    Terms\u00A0of\u00A0Service\n                </Link>{' '}\n                and{' '}\n                <Link to={`https://posthog.com/privacy?${UTM_TAGS}`} target=\"_blank\">\n                    Privacy\u00A0Policy\n                </Link>\n                .\n            </div>\n        </div>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_kea_router", "emailRegex", "signupLogic", "preflightLogic", "featureFlagLogic", "panel", "_", "actions", "values", "email", "password", "name", "role_at_organization", "payload", "breakpoint", "res", "api_default", "Co", "e", "s", "validatePassword", "maintenanceRedirect", "regionOverrideFlag", "FEATURE_FLAGS", "regionsAllowList", "isRegionOverrideValid", "isString", "isPreflightRegionValid", "CLOUD_HOSTNAMES", "urls", "lemonToast", "import_jsx_runtime", "SignupPanel1", "preflight", "socialAuthAvailable", "preflightLogic", "isSignupPanel1Submitting", "validatedPassword", "signupLogic", "emailInputRef", "RegionSelect_default", "SocialLoginButtons", "LemonField", "LemonInput", "PasswordStrength", "LemonButton", "Link", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_jsx_runtime", "UTM_TAGS", "SignupPanel2", "preflight", "preflightLogic", "setSignupPanel2ManualErrors", "signupLogic", "isSignupPanel2Submitting", "LemonField", "LemonInput", "SignupRoleSelect", "SignupReferralSource", "LemonButton", "Link", "import_jsx_runtime", "SignupForm", "preflight", "preflightLogic", "user", "userLogic", "isSignupPanel2Submitting", "signupPanel2ManualErrors", "panel", "signupLogic", "setPanel", "showSpinner", "setShowSpinner", "t", "LemonBanner", "SignupPanel1", "SignupPanel2", "LemonButton", "IconArrowLeft", "SpinnerOverlay", "import_jsx_runtime", "scene", "SignupContainer", "preflight", "preflightLogic", "user", "userLogic", "BridgePage", "val", "idx", "SignupLeftContainer", "SignupForm", "productBenefits", "getRegionUrl", "region", "pathname", "search", "hash", "CLOUD_HOSTNAMES", "benefit", "i", "IconCheckCircle", "Link"]
}
