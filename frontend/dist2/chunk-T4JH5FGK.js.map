{
  "version": 3,
  "sources": ["../src/scenes/notebooks/Notebook/NotebookMeta.tsx", "../src/scenes/notebooks/NotebookMenu.tsx"],
  "sourcesContent": ["import { LemonButton, LemonButtonProps, LemonTag } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { IconDocumentExpand } from 'lib/lemon-ui/icons'\nimport { Spinner } from 'lib/lemon-ui/Spinner'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { useCallback, useEffect, useState } from 'react'\n\nimport { NotebookSyncStatus } from '~/types'\n\nimport { notebookLogic, NotebookLogicProps } from './notebookLogic'\nimport { notebookSettingsLogic } from './notebookSettingsLogic'\n\nconst syncStatusMap: Record<NotebookSyncStatus, { content: React.ReactNode; tooltip: React.ReactNode }> = {\n    synced: {\n        content: 'Saved',\n        tooltip: 'All changes are saved.',\n    },\n    saving: {\n        content: (\n            <>\n                Saving <Spinner textColored />\n            </>\n        ),\n        tooltip: 'The changes are being saved to PostHog.',\n    },\n    unsaved: {\n        content: 'Edited',\n        tooltip:\n            'You have made changes that are saved to your browser. These will be persisted to PostHog periodically.',\n    },\n    local: {\n        content: 'Local',\n        tooltip: 'This notebook is just stored in your browser.',\n    },\n}\n\nexport const NotebookSyncInfo = (props: NotebookLogicProps): JSX.Element | null => {\n    const { syncStatus } = useValues(notebookLogic(props))\n    const [shown, setShown] = useState(false)\n    const [debounceTimeout, setDebounceTimeout] = useState<NodeJS.Timeout | null>(null)\n    const [debouncedSyncStatus, setDebouncedSyncStatus] = useState<NotebookSyncStatus | null>(null)\n\n    const clearDebounceTimeout = useCallback(() => {\n        if (debounceTimeout) {\n            clearTimeout(debounceTimeout)\n        }\n    }, [debounceTimeout])\n\n    useEffect(() => {\n        clearDebounceTimeout()\n\n        const debounceDelay = syncStatus === 'saving' ? 100 : 0\n        const timeout = setTimeout(() => setDebouncedSyncStatus(syncStatus), debounceDelay)\n        setDebounceTimeout(timeout)\n\n        if (syncStatus !== 'synced') {\n            return setShown(true)\n        }\n\n        if (shown === false) {\n            return\n        }\n\n        const t = setTimeout(() => setShown(false), 3000)\n\n        return () => {\n            clearTimeout(t)\n            clearDebounceTimeout()\n        }\n    }, [syncStatus])\n\n    if (!debouncedSyncStatus) {\n        return null\n    }\n\n    const content = syncStatusMap[debouncedSyncStatus]\n\n    return shown ? (\n        <Tooltip title={content.tooltip} placement=\"left\">\n            <LemonTag className=\"uppercase\">{content.content}</LemonTag>\n        </Tooltip>\n    ) : null\n}\n\nexport const NotebookExpandButton = (props: Pick<LemonButtonProps, 'size' | 'type'>): JSX.Element => {\n    const { isExpanded } = useValues(notebookSettingsLogic)\n    const { setIsExpanded } = useActions(notebookSettingsLogic)\n\n    return (\n        <LemonButton\n            {...props}\n            onClick={() => setIsExpanded(!isExpanded)}\n            icon={<IconDocumentExpand mode={isExpanded ? 'expand' : 'collapse'} />}\n            tooltip={isExpanded ? 'Fix content width' : 'Fill content width'}\n            tooltipPlacement=\"left\"\n        />\n    )\n}\n", "import './NotebookScene.scss'\n\nimport { IconClock, IconDownload, IconEllipsis, IconShare, IconTrash } from '@posthog/icons'\nimport { LemonButton } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { router } from 'kea-router'\nimport { LemonMenu } from 'lib/lemon-ui/LemonMenu'\nimport { urls } from 'scenes/urls'\n\nimport { notebooksModel } from '~/models/notebooksModel'\n\nimport { notebookLogic, NotebookLogicProps } from './Notebook/notebookLogic'\n\nexport function NotebookMenu({ shortId }: NotebookLogicProps): JSX.Element {\n    const { notebook, showHistory, isLocalOnly } = useValues(notebookLogic({ shortId }))\n    const { openShareModal } = useActions(notebookLogic({ shortId }))\n    const { exportJSON, setShowHistory } = useActions(notebookLogic({ shortId }))\n\n    return (\n        <LemonMenu\n            items={[\n                {\n                    label: 'Export JSON',\n                    icon: <IconDownload />,\n                    onClick: () => exportJSON(),\n                },\n                {\n                    label: 'History',\n                    icon: <IconClock />,\n                    onClick: () => setShowHistory(!showHistory),\n                },\n                {\n                    label: 'Share',\n                    icon: <IconShare />,\n                    onClick: () => openShareModal(),\n                },\n                !isLocalOnly &&\n                    !notebook?.is_template && {\n                        label: 'Delete',\n                        icon: <IconTrash />,\n                        status: 'danger',\n                        disabledReason:\n                            notebook?.user_access_level !== 'editor'\n                                ? 'You do not have permission to delete this notebook.'\n                                : undefined,\n                        onClick: () => {\n                            notebooksModel.actions.deleteNotebook(shortId, notebook?.title)\n                            router.actions.push(urls.notebooks())\n                        },\n                    },\n            ]}\n        >\n            <LemonButton aria-label=\"more\" icon={<IconEllipsis />} size=\"small\" />\n        </LemonMenu>\n    )\n}\n"],
  "mappings": "2UAAAA,IAAAC,IAAAC,IACA,IAAAC,EAAsC,OAItC,IAAAC,EAAiD,OAcrC,IAAAC,EAAA,OAPNC,EAAoG,CACtG,OAAQ,CACJ,QAAS,QACT,QAAS,wBACb,EACA,OAAQ,CACJ,WACI,oBAAE,uBACS,OAACC,EAAA,CAAQ,YAAW,GAAC,GAChC,EAEJ,QAAS,yCACb,EACA,QAAS,CACL,QAAS,SACT,QACI,wGACR,EACA,MAAO,CACH,QAAS,QACT,QAAS,+CACb,CACJ,EAEaC,GAAoBC,GAAkD,CAC/E,GAAM,CAAE,WAAAC,CAAW,KAAI,aAAUC,EAAcF,CAAK,CAAC,EAC/C,CAACG,EAAOC,CAAQ,KAAI,YAAS,EAAK,EAClC,CAACC,EAAiBC,CAAkB,KAAI,YAAgC,IAAI,EAC5E,CAACC,EAAqBC,CAAsB,KAAI,YAAoC,IAAI,EAExFC,KAAuB,eAAY,IAAM,CACvCJ,GACA,aAAaA,CAAe,CAEpC,EAAG,CAACA,CAAe,CAAC,EAyBpB,MAvBA,aAAU,IAAM,CACZI,EAAqB,EAGrB,IAAMC,EAAU,WAAW,IAAMF,EAAuBP,CAAU,EAD5CA,IAAe,SAAW,IAAM,CAC4B,EAGlF,GAFAK,EAAmBI,CAAO,EAEtBT,IAAe,SACf,OAAOG,EAAS,EAAI,EAGxB,GAAID,IAAU,GACV,OAGJ,IAAMQ,EAAI,WAAW,IAAMP,EAAS,EAAK,EAAG,GAAI,EAEhD,MAAO,IAAM,CACT,aAAaO,CAAC,EACdF,EAAqB,CACzB,CACJ,EAAG,CAACR,CAAU,CAAC,EAEX,CAACM,EACD,OAAO,KAGX,IAAMK,EAAUf,EAAcU,CAAmB,EAEjD,OAAOJ,KACH,OAACU,EAAA,CAAQ,MAAOD,EAAQ,QAAS,UAAU,OACvC,mBAACE,EAAA,CAAS,UAAU,YAAa,SAAAF,EAAQ,QAAQ,EACrD,EACA,IACR,EAEaG,GAAwBf,GAAgE,CACjG,GAAM,CAAE,WAAAgB,CAAW,KAAI,aAAUC,CAAqB,EAChD,CAAE,cAAAC,CAAc,KAAI,cAAWD,CAAqB,EAE1D,SACI,OAACE,EAAA,CACI,GAAGnB,EACJ,QAAS,IAAMkB,EAAc,CAACF,CAAU,EACxC,QAAM,OAACI,EAAA,CAAmB,KAAMJ,EAAa,SAAW,WAAY,EACpE,QAASA,EAAa,oBAAsB,qBAC5C,iBAAiB,OACrB,CAER,ECjGAK,IAAAC,IAAAC,IAIA,IAAAC,EAAsC,OACtCC,EAAuB,OAkBG,IAAAC,EAAA,OAVnB,SAASC,GAAa,CAAE,QAAAC,CAAQ,EAAoC,CACvE,GAAM,CAAE,SAAAC,EAAU,YAAAC,EAAa,YAAAC,CAAY,KAAI,aAAUC,EAAc,CAAE,QAAAJ,CAAQ,CAAC,CAAC,EAC7E,CAAE,eAAAK,CAAe,KAAI,cAAWD,EAAc,CAAE,QAAAJ,CAAQ,CAAC,CAAC,EAC1D,CAAE,WAAAM,EAAY,eAAAC,CAAe,KAAI,cAAWH,EAAc,CAAE,QAAAJ,CAAQ,CAAC,CAAC,EAE5E,SACI,OAACQ,EAAA,CACG,MAAO,CACH,CACI,MAAO,cACP,QAAM,OAACC,EAAA,EAAa,EACpB,QAAS,IAAMH,EAAW,CAC9B,EACA,CACI,MAAO,UACP,QAAM,OAACI,EAAA,EAAU,EACjB,QAAS,IAAMH,EAAe,CAACL,CAAW,CAC9C,EACA,CACI,MAAO,QACP,QAAM,OAACS,EAAA,EAAU,EACjB,QAAS,IAAMN,EAAe,CAClC,EACA,CAACF,GACG,CAACF,GAAU,aAAe,CACtB,MAAO,SACP,QAAM,OAACW,EAAA,EAAU,EACjB,OAAQ,SACR,eACIX,GAAU,oBAAsB,SAC1B,sDACA,OACV,QAAS,IAAM,CACXY,EAAe,QAAQ,eAAeb,EAASC,GAAU,KAAK,EAC9D,SAAO,QAAQ,KAAKa,EAAK,UAAU,CAAC,CACxC,CACJ,CACR,EAEA,mBAACC,EAAA,CAAY,aAAW,OAAO,QAAM,OAACC,EAAA,EAAa,EAAI,KAAK,QAAQ,EACxE,CAER",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "syncStatusMap", "Spinner", "NotebookSyncInfo", "props", "syncStatus", "notebookLogic", "shown", "setShown", "debounceTimeout", "setDebounceTimeout", "debouncedSyncStatus", "setDebouncedSyncStatus", "clearDebounceTimeout", "timeout", "t", "content", "Tooltip", "LemonTag", "NotebookExpandButton", "isExpanded", "notebookSettingsLogic", "setIsExpanded", "LemonButton", "IconDocumentExpand", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "import_jsx_runtime", "NotebookMenu", "shortId", "notebook", "showHistory", "isLocalOnly", "notebookLogic", "openShareModal", "exportJSON", "setShowHistory", "LemonMenu", "IconDownload", "IconClock", "IconShare", "IconTrash", "notebooksModel", "urls", "LemonButton", "IconEllipsis"]
}
