{
  "version": 3,
  "sources": ["../src/scenes/authentication/passwordResetLogic.ts"],
  "sourcesContent": ["import { captureException } from '@sentry/react'\nimport { kea, path, reducers, selectors } from 'kea'\nimport { forms } from 'kea-forms'\nimport { loaders } from 'kea-loaders'\nimport { urlToAction } from 'kea-router'\nimport api from 'lib/api'\nimport { ValidatedPasswordResult, validatePassword } from 'lib/components/PasswordStrength'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast/LemonToast'\n\nimport type { passwordResetLogicType } from './passwordResetLogicType'\n\nexport interface ResponseType {\n    success: boolean\n    errorCode?: string\n    errorDetail?: string\n}\nexport interface ResetResponseType extends ResponseType {\n    email?: string\n}\n\nexport interface ValidatedTokenResponseType extends ResponseType {\n    token?: string\n    uuid?: string\n}\n\nexport interface PasswordResetForm {\n    password: string\n    passwordConfirm: string\n}\n\nexport const passwordResetLogic = kea<passwordResetLogicType>([\n    path(['scenes', 'authentication', 'passwordResetLogic']),\n    loaders(() => ({\n        validatedResetToken: [\n            null as ValidatedTokenResponseType | null,\n            {\n                validateResetToken: async ({ uuid, token }: { uuid: string; token: string }) => {\n                    try {\n                        await api.get(`api/reset/${uuid}/?token=${token}`)\n                        return { success: true, token, uuid }\n                    } catch (e: any) {\n                        return { success: false, errorCode: e.code, errorDetail: e.detail }\n                    }\n                },\n            },\n        ],\n    })),\n    reducers({\n        requestPasswordResetSucceeded: [\n            false,\n            {\n                submitRequestPasswordResetSuccess: () => true,\n            },\n        ],\n        passwordResetSucceeded: [\n            false,\n            {\n                submitPasswordResetSuccess: () => true,\n            },\n        ],\n    }),\n    forms(({ values, actions }) => ({\n        requestPasswordReset: {\n            defaults: {} as unknown as { email: string },\n            errors: ({ email }) => ({\n                email: !email ? 'Please enter your email to continue' : undefined,\n            }),\n            submit: async ({ email }, breakpoint) => {\n                breakpoint()\n\n                try {\n                    await api.create('api/reset/', { email })\n                } catch (e: any) {\n                    actions.setRequestPasswordResetManualErrors({ email: e.detail ?? 'An error occurred' })\n                    captureException('Failed to reset password', { extra: { error: e } })\n                    throw e\n                }\n            },\n        },\n\n        passwordReset: {\n            defaults: {} as unknown as PasswordResetForm,\n            errors: ({ password, passwordConfirm }) => ({\n                password: !password ? 'Please enter your password to continue' : values.validatedPassword.feedback,\n                passwordConfirm: !passwordConfirm\n                    ? 'Please confirm your password to continue'\n                    : password !== passwordConfirm\n                    ? 'Passwords do not match'\n                    : undefined,\n            }),\n            submit: async ({ password }, breakpoint) => {\n                await breakpoint(150)\n\n                if (!values.validatedResetToken?.token || !values.validatedResetToken.uuid) {\n                    return\n                }\n                try {\n                    await api.create(`api/reset/${values.validatedResetToken.uuid}/`, {\n                        password,\n                        token: values.validatedResetToken.token,\n                    })\n                    lemonToast.success('Your password has been changed. Redirecting\u2026')\n                    await breakpoint(3000)\n                    window.location.href = '/' // We need the refresh\n                } catch (e: any) {\n                    actions.setPasswordResetManualErrors({ password: e.detail })\n                    throw e\n                }\n            },\n        },\n    })),\n    selectors({\n        validatedPassword: [\n            (s) => [s.passwordReset],\n            ({ password }): ValidatedPasswordResult => {\n                return validatePassword(password)\n            },\n        ],\n    }),\n    urlToAction(({ actions }) => ({\n        '/reset/:uuid/:token': ({ uuid, token }) => {\n            if (token && uuid) {\n                actions.validateResetToken({ uuid, token })\n            }\n        },\n    })),\n])\n"],
  "mappings": "+OAAAA,IAAAC,IAAAC,IACA,IAAAC,EAA+C,OAC/CC,EAAsB,OACtBC,EAAwB,OACxBC,EAA4B,OA0BrB,IAAMC,KAAqB,OAA4B,IAC1D,QAAK,CAAC,SAAU,iBAAkB,oBAAoB,CAAC,KACvD,WAAQ,KAAO,CACX,oBAAqB,CACjB,KACA,CACI,mBAAoB,MAAO,CAAE,KAAAC,EAAM,MAAAC,CAAM,IAAuC,CAC5E,GAAI,CACA,aAAMC,EAAI,IAAI,aAAaF,CAAI,WAAWC,CAAK,EAAE,EAC1C,CAAE,QAAS,GAAM,MAAAA,EAAO,KAAAD,CAAK,CACxC,OAASG,EAAQ,CACb,MAAO,CAAE,QAAS,GAAO,UAAWA,EAAE,KAAM,YAAaA,EAAE,MAAO,CACtE,CACJ,CACJ,CACJ,CACJ,EAAE,KACF,YAAS,CACL,8BAA+B,CAC3B,GACA,CACI,kCAAmC,IAAM,EAC7C,CACJ,EACA,uBAAwB,CACpB,GACA,CACI,2BAA4B,IAAM,EACtC,CACJ,CACJ,CAAC,KACD,SAAM,CAAC,CAAE,OAAAC,EAAQ,QAAAC,CAAQ,KAAO,CAC5B,qBAAsB,CAClB,SAAU,CAAC,EACX,OAAQ,CAAC,CAAE,MAAAC,CAAM,KAAO,CACpB,MAAQA,EAAgD,OAAxC,qCACpB,GACA,OAAQ,MAAO,CAAE,MAAAA,CAAM,EAAGC,IAAe,CACrCA,EAAW,EAEX,GAAI,CACA,MAAML,EAAI,OAAO,aAAc,CAAE,MAAAI,CAAM,CAAC,CAC5C,OAASH,EAAQ,CACb,MAAAE,EAAQ,oCAAoC,CAAE,MAAOF,EAAE,QAAU,mBAAoB,CAAC,EACtFK,EAAiB,2BAA4B,CAAE,MAAO,CAAE,MAAOL,CAAE,CAAE,CAAC,EAC9DA,CACV,CACJ,CACJ,EAEA,cAAe,CACX,SAAU,CAAC,EACX,OAAQ,CAAC,CAAE,SAAAM,EAAU,gBAAAC,CAAgB,KAAO,CACxC,SAAWD,EAAsDL,EAAO,kBAAkB,SAApE,yCACtB,gBAAkBM,EAEZD,IAAaC,EACb,yBACA,OAHA,0CAIV,GACA,OAAQ,MAAO,CAAE,SAAAD,CAAS,EAAGF,IAAe,CAGxC,GAFA,MAAMA,EAAW,GAAG,EAEhB,GAACH,EAAO,qBAAqB,OAAS,CAACA,EAAO,oBAAoB,MAGtE,GAAI,CACA,MAAMF,EAAI,OAAO,aAAaE,EAAO,oBAAoB,IAAI,IAAK,CAC9D,SAAAK,EACA,MAAOL,EAAO,oBAAoB,KACtC,CAAC,EACDO,EAAW,QAAQ,mDAA8C,EACjE,MAAMJ,EAAW,GAAI,EACrB,OAAO,SAAS,KAAO,GAC3B,OAASJ,EAAQ,CACb,MAAAE,EAAQ,6BAA6B,CAAE,SAAUF,EAAE,MAAO,CAAC,EACrDA,CACV,CACJ,CACJ,CACJ,EAAE,KACF,aAAU,CACN,kBAAmB,CACdS,GAAM,CAACA,EAAE,aAAa,EACvB,CAAC,CAAE,SAAAH,CAAS,IACDI,EAAiBJ,CAAQ,CAExC,CACJ,CAAC,KACD,eAAY,CAAC,CAAE,QAAAJ,CAAQ,KAAO,CAC1B,sBAAuB,CAAC,CAAE,KAAAL,EAAM,MAAAC,CAAM,IAAM,CACpCA,GAASD,GACTK,EAAQ,mBAAmB,CAAE,KAAAL,EAAM,MAAAC,CAAM,CAAC,CAElD,CACJ,EAAE,CACN,CAAC",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_kea_loaders", "import_kea_router", "passwordResetLogic", "uuid", "token", "api_default", "e", "values", "actions", "email", "breakpoint", "captureException", "password", "passwordConfirm", "lemonToast", "s", "validatePassword"]
}
