{
  "version": 3,
  "sources": ["../src/scenes/experiments/ExperimentImplementationDetails.tsx", "../src/scenes/experiments/ExperimentCodeSnippets.tsx"],
  "sourcesContent": ["import { LemonSelect, Link } from '@posthog/lemon-ui'\nimport {\n    IconAndroidOS,\n    IconAppleIOS,\n    IconFlutter,\n    IconGolang,\n    IconJavascript,\n    IconNodeJS,\n    IconPHP,\n    IconPython,\n    IconRuby,\n} from 'lib/lemon-ui/icons'\nimport { useState } from 'react'\n\nimport { Experiment, MultivariateFlagVariant, SDKKey } from '~/types'\n\nimport {\n    AndroidSnippet,\n    FlutterSnippet,\n    GolangSnippet,\n    IOSSnippet,\n    JSSnippet,\n    NodeJSSnippet,\n    PHPSnippet,\n    PythonSnippet,\n    ReactSnippet,\n    RNSnippet,\n    RubySnippet,\n} from './ExperimentCodeSnippets'\n\ninterface ExperimentImplementationDetailsProps {\n    experiment: Partial<Experiment> | null\n}\n\nconst UTM_TAGS = '?utm_medium=in-product&utm_campaign=experiment'\nconst DOC_BASE_URL = 'https://posthog.com/docs/'\nconst FF_ANCHOR = '#feature-flags'\n\nexport enum LibraryType {\n    Client = 'Client',\n    Server = 'Server',\n}\n\nexport const OPTIONS = [\n    {\n        value: 'JavaScript',\n        key: SDKKey.JS_WEB,\n        documentationLink: `${DOC_BASE_URL}libraries/js${UTM_TAGS}${FF_ANCHOR}`,\n        Icon: IconJavascript,\n        Snippet: JSSnippet,\n        type: LibraryType.Client,\n    },\n    {\n        value: 'Android',\n        key: SDKKey.ANDROID,\n        documentationLink: `${DOC_BASE_URL}libraries/android${UTM_TAGS}${FF_ANCHOR}`,\n        Icon: IconAndroidOS,\n        Snippet: AndroidSnippet,\n        type: LibraryType.Client,\n    },\n    {\n        value: 'Go',\n        key: SDKKey.GO,\n        documentationLink: `${DOC_BASE_URL}libraries/go${UTM_TAGS}${FF_ANCHOR}`,\n        Icon: IconGolang,\n        Snippet: GolangSnippet,\n        type: LibraryType.Server,\n    },\n    {\n        value: 'Flutter',\n        key: SDKKey.FLUTTER,\n        documentationLink: `${DOC_BASE_URL}libraries/flutter${UTM_TAGS}${FF_ANCHOR}`,\n        Icon: IconFlutter,\n        Snippet: FlutterSnippet,\n        type: LibraryType.Client,\n    },\n    {\n        value: 'iOS',\n        key: SDKKey.IOS,\n        documentationLink: `${DOC_BASE_URL}libraries/ios${UTM_TAGS}${FF_ANCHOR}`,\n        Icon: IconAppleIOS,\n        Snippet: IOSSnippet,\n        type: LibraryType.Client,\n    },\n    {\n        value: 'Node.js',\n        key: SDKKey.NODE_JS,\n        documentationLink: `${DOC_BASE_URL}libraries/node${UTM_TAGS}${FF_ANCHOR}`,\n        Icon: IconNodeJS,\n        Snippet: NodeJSSnippet,\n        type: LibraryType.Server,\n    },\n    {\n        value: 'PHP',\n        key: SDKKey.PHP,\n        documentationLink: `${DOC_BASE_URL}libraries/php${UTM_TAGS}${FF_ANCHOR}`,\n        Icon: IconPHP,\n        Snippet: PHPSnippet,\n        type: LibraryType.Server,\n    },\n    {\n        value: 'Python',\n        key: SDKKey.PYTHON,\n        documentationLink: `${DOC_BASE_URL}libraries/python${UTM_TAGS}${FF_ANCHOR}`,\n        Icon: IconPython,\n        Snippet: PythonSnippet,\n        type: LibraryType.Server,\n    },\n    {\n        value: 'React',\n        key: SDKKey.REACT,\n        documentationLink: `${DOC_BASE_URL}libraries/react${UTM_TAGS}${FF_ANCHOR}`,\n        Icon: IconJavascript,\n        Snippet: ReactSnippet,\n        type: LibraryType.Client,\n    },\n    {\n        value: 'ReactNative',\n        key: SDKKey.REACT_NATIVE,\n        documentationLink: `${DOC_BASE_URL}libraries/react-native${UTM_TAGS}${FF_ANCHOR}`,\n        Icon: IconJavascript,\n        Snippet: RNSnippet,\n        type: LibraryType.Client,\n    },\n    {\n        value: 'Ruby',\n        key: SDKKey.RUBY,\n        documentationLink: `${DOC_BASE_URL}libraries/ruby${UTM_TAGS}${FF_ANCHOR}`,\n        Icon: IconRuby,\n        Snippet: RubySnippet,\n        type: LibraryType.Server,\n    },\n]\n\nexport function CodeLanguageSelect({\n    selectedOptionValue,\n    selectOption,\n}: {\n    selectedOptionValue: string\n    selectOption: (selectedValue: string) => void\n}): JSX.Element {\n    return (\n        <LemonSelect\n            size=\"small\"\n            className=\"min-w-[7.5rem]\"\n            onSelect={selectOption}\n            value={selectedOptionValue}\n            options={[\n                {\n                    title: 'Client libraries',\n                    options: OPTIONS.filter((option) => option.type == LibraryType.Client).map(({ Icon, value }) => ({\n                        value,\n                        label: value,\n                        labelInMenu: (\n                            <div className=\"flex items-center space-x-2\">\n                                <Icon />\n                                <span>{value}</span>\n                            </div>\n                        ),\n                    })),\n                },\n                {\n                    title: 'Server libraries',\n                    options: OPTIONS.filter((option) => option.type == LibraryType.Server).map(({ Icon, value }) => ({\n                        value,\n                        label: value,\n                        labelInMenu: (\n                            <div className=\"flex items-center space-x-2\">\n                                <Icon />\n                                <span>{value}</span>\n                            </div>\n                        ),\n                    })),\n                },\n            ]}\n        />\n    )\n}\n\nexport function ExperimentImplementationDetails({ experiment }: ExperimentImplementationDetailsProps): JSX.Element {\n    const defaultVariant = experiment?.parameters?.feature_flag_variants?.[1]?.key ?? 'test'\n    const [currentVariant, setCurrentVariant] = useState(defaultVariant)\n    const [defaultSelectedOption] = OPTIONS\n    const [selectedOption, setSelectedOption] = useState(defaultSelectedOption)\n\n    const selectOption = (selectedValue: string): void => {\n        const option = OPTIONS.find((option) => option.value === selectedValue)\n\n        if (option) {\n            setSelectedOption(option)\n        }\n    }\n\n    return (\n        <div className=\"mb-4\">\n            <h2 className=\"font-semibold text-lg mb-2\">Implementation</h2>\n            <div className=\"border rounded bg-surface-primary\">\n                <div className=\"p-6 space-y-4\">\n                    <div className=\"flex justify-between\">\n                        <div className=\"flex items-center\">\n                            <span className=\"mr-2\">Variant group</span>\n                            <LemonSelect\n                                size=\"small\"\n                                className=\"min-w-[5rem]\"\n                                onSelect={setCurrentVariant}\n                                value={currentVariant}\n                                options={(experiment?.parameters?.feature_flag_variants || []).map(\n                                    (variant: MultivariateFlagVariant) => ({\n                                        value: variant.key,\n                                        label: variant.key,\n                                    })\n                                )}\n                            />\n                        </div>\n                        <div>\n                            <CodeLanguageSelect\n                                selectOption={selectOption}\n                                selectedOptionValue={selectedOption.value}\n                            />\n                        </div>\n                    </div>\n                    <div>\n                        <div className=\"mb-1\">\n                            <b>Implement your experiment in code</b>\n                        </div>\n                        <div className=\"mb-1\">\n                            <selectedOption.Snippet\n                                variant={currentVariant}\n                                flagKey={experiment?.feature_flag?.key ?? ''}\n                            />\n                        </div>\n\n                        <Link subtle to={selectedOption.documentationLink} target=\"_blank\">\n                            See the docs for more implementation information.\n                        </Link>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n", "import { Link } from '@posthog/lemon-ui'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\n\nfunction ServerSideWarning(): JSX.Element {\n    return (\n        <div className=\"warning\">\n            <p>\n                <b>Warning:</b> Server side experiment metrics require you to manually send the feature flag\n                information.{' '}\n                <Link to=\"https://posthog.com/tutorials/experiments#step-2-sending-the-right-events\" target=\"_blank\">\n                    See this tutorial for more information.\n                </Link>\n            </p>\n        </div>\n    )\n}\n\ninterface SnippetProps {\n    flagKey: string\n    variant: string\n}\n\nexport function AndroidSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.Kotlin} wrap>\n                {`if (PostHog.getFeatureFlag(\"${flagKey}\") == \"${variant}\") {\n    // do something\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function IOSSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.Swift} wrap>\n                {`if (PostHogSDK.shared.getFeatureFlag(\"${flagKey}\") as? String == \"${variant}\") {\n    // do something\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function NodeJSSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.JavaScript} wrap>\n                {`const experimentFlagValue = await client.getFeatureFlag('${flagKey}', 'user distinct id')\n\nif (experimentFlagValue === '${variant}' ) {\n    // Do something differently for this user\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n            <ServerSideWarning />\n        </>\n    )\n}\n\nexport function JSSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <div>\n            <CodeSnippet language={Language.JavaScript} wrap>\n                {`if (posthog.getFeatureFlag('${flagKey}') === '${variant}') {\n    // Do something differently for this user\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n            <div className=\"mt-4 mb-1\">\n                <b>Test that it works</b>\n            </div>\n            <CodeSnippet language={Language.JavaScript} wrap>\n                {`posthog.featureFlags.overrideFeatureFlags({ flags: {'${flagKey}': '${variant}'} })`}\n            </CodeSnippet>\n        </div>\n    )\n}\n\nexport function ReactSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.JavaScript} wrap>\n                {`// You can either use the useFeatureFlagVariantKey hook,\n// or you can use the feature flags component - https://posthog.com/docs/libraries/react#feature-flags-react-component\n\n// Method one: using the useFeatureFlagVariantKey hook\nimport { useFeatureFlagVariantKey } from 'posthog-js/react'\n\nfunction App() {\n    const variant = useFeatureFlagVariantKey('${flagKey}')\n    if (variant === '${variant}') {\n        // do something\n    }\n}\n\n// Method two: using the feature flags component\nimport { PostHogFeature } from 'posthog-js/react'\n\nfunction App() {\n    return (\n        <PostHogFeature flag='${flagKey}' match='${variant}'>\n            <div>\n                {/* the component to show */}\n            </div>\n        </PostHogFeature>\n    )\n}\n\n// You can also test your code by overriding the feature flag:\nposthog.featureFlags.overrideFeatureFlags({ flags: {'${flagKey}': '${variant}'} })`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function RNSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.JavaScript} wrap>\n                {`if (posthog.getFeatureFlag('${flagKey}') === '${variant}') {\n    // Do something differently for this user\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function PHPSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.PHP} wrap>\n                {`if (PostHog::getFeatureFlag('${flagKey}', 'user distinct id') == '${variant}') {\n    // Do something differently for this user\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n            <ServerSideWarning />\n        </>\n    )\n}\n\nexport function GolangSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.Go} wrap>\n                {`experimentFlagValue, err := client.GetFeatureFlag(\n                    FeatureFlagPayload{\n                        Key:        '${flagKey}',\n                        DistinctId: \"distinct-id\",\n                    })\n\nif (experimentFlagValue == '${variant}' ) {\n    // Do something differently for this user\n} else {\n    // It's a good idea to let control variant always be the default behaviour,\n    // so if something goes wrong with flag evaluation, you don't break your app.\n}`}\n            </CodeSnippet>\n            <ServerSideWarning />\n        </>\n    )\n}\n\nexport function FlutterSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    const clientSuffix = 'await Posthog().'\n    const flagFunction = 'getFeatureFlag'\n    const variantSuffix = ` == '${variant}'`\n\n    return (\n        <>\n            <CodeSnippet language={Language.Dart} wrap>\n                {`if (${clientSuffix}${flagFunction}('${flagKey}')${variantSuffix}) {\n  // Do something differently for this user\n} else {\n  // It's a good idea to let control variant always be the default behaviour,\n  // so if something goes wrong with flag evaluation, you don't break your app.\n}\n            `}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function RubySnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.Ruby} wrap>\n                {`experimentFlagValue = posthog.get_feature_flag('${flagKey}', 'user distinct id')\n\n\nif experimentFlagValue == '${variant}'\n    # Do something differently for this user\nelse\n    # It's a good idea to let control variant always be the default behaviour,\n    # so if something goes wrong with flag evaluation, you don't break your app.\nend\n`}\n            </CodeSnippet>\n            <ServerSideWarning />\n        </>\n    )\n}\n\nexport function PythonSnippet({ flagKey, variant }: SnippetProps): JSX.Element {\n    return (\n        <>\n            <CodeSnippet language={Language.Python} wrap>\n                {`experiment_flag_value = posthog.get_feature_flag(\"${flagKey}\", \"user_distinct_id\"):\n\nif experiment_flag_value == '${variant}':\n    # Do something differently for this user\nelse:\n    # It's a good idea to let control variant always be the default behaviour,\n    # so if something goes wrong with flag evaluation, you don't break your app.\n`}\n            </CodeSnippet>\n            <ServerSideWarning />\n        </>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_react", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "ServerSideWarning", "Link", "AndroidSnippet", "flagKey", "variant", "CodeSnippet", "IOSSnippet", "NodeJSSnippet", "JSSnippet", "ReactSnippet", "RNSnippet", "PHPSnippet", "GolangSnippet", "FlutterSnippet", "clientSuffix", "flagFunction", "variantSuffix", "RubySnippet", "PythonSnippet", "import_jsx_runtime", "UTM_TAGS", "DOC_BASE_URL", "FF_ANCHOR", "OPTIONS", "DOC_BASE_URL", "UTM_TAGS", "FF_ANCHOR", "IconJavascript", "JSSnippet", "IconAndroidOS", "AndroidSnippet", "IconGolang", "GolangSnippet", "IconFlutter", "FlutterSnippet", "IconAppleIOS", "IOSSnippet", "IconNodeJS", "NodeJSSnippet", "IconPHP", "PHPSnippet", "IconPython", "PythonSnippet", "ReactSnippet", "RNSnippet", "IconRuby", "RubySnippet", "CodeLanguageSelect", "selectedOptionValue", "selectOption", "LemonSelect", "option", "Icon", "value", "ExperimentImplementationDetails", "experiment", "defaultVariant", "currentVariant", "setCurrentVariant", "defaultSelectedOption", "selectedOption", "setSelectedOption", "selectedValue", "variant", "Link"]
}
