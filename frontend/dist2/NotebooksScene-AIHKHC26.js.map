{
  "version": 3,
  "sources": ["../src/scenes/notebooks/NotebooksScene.tsx", "../src/scenes/notebooks/NotebooksTable/NotebooksTable.tsx", "../src/scenes/notebooks/NotebooksTable/ContainsTypeFilter.tsx", "../src/scenes/notebooks/NotebooksTable/notebooksTableLogic.ts"],
  "sourcesContent": ["import './NotebookScene.scss'\n\nimport { IconEllipsis } from '@posthog/icons'\nimport { LemonButton, LemonMenu, lemonToast, Tooltip } from '@posthog/lemon-ui'\nimport { router } from 'kea-router'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { base64Encode } from 'lib/utils'\nimport { getTextFromFile, selectFiles } from 'lib/utils/file-utils'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { NotebooksTable } from './NotebooksTable/NotebooksTable'\n\nexport const scene: SceneExport = {\n    component: NotebooksScene,\n}\n\nexport function NotebooksScene(): JSX.Element {\n    return (\n        <div className=\"space-y-4\">\n            <PageHeader\n                buttons={\n                    <>\n                        <LemonMenu\n                            items={[\n                                {\n                                    label: 'Load from JSON',\n                                    onClick: () => {\n                                        void selectFiles({\n                                            contentType: 'application/json',\n                                            multiple: false,\n                                        })\n                                            .then((files) => getTextFromFile(files[0]))\n                                            .then((text) => {\n                                                const data = JSON.parse(text)\n                                                if (data.type !== 'doc') {\n                                                    throw new Error('Not a notebook')\n                                                }\n\n                                                // Looks like a notebook\n                                                router.actions.push(\n                                                    urls.canvas(),\n                                                    {},\n                                                    {\n                                                        '\uD83E\uDD94': base64Encode(text),\n                                                    }\n                                                )\n                                            })\n                                            .catch((e) => {\n                                                lemonToast.error(e.message)\n                                            })\n                                    },\n                                },\n                            ]}\n                        >\n                            <LemonButton icon={<IconEllipsis />} size=\"small\" />\n                        </LemonMenu>\n                        <Tooltip title=\"Like a Notebook but all your exploration is persisted to the URL for easy sharing.\">\n                            <LemonButton data-attr=\"new-canvas\" to={urls.canvas()} type=\"secondary\">\n                                New canvas\n                            </LemonButton>\n                        </Tooltip>\n                        <LemonButton data-attr=\"new-notebook\" to={urls.notebook('new')} type=\"primary\">\n                            New notebook\n                        </LemonButton>\n                    </>\n                }\n            />\n\n            <NotebooksTable />\n        </div>\n    )\n}\n", "import { IconEllipsis, IconTrash } from '@posthog/icons'\nimport { LemonButton, LemonInput, LemonTag } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { MemberSelect } from 'lib/components/MemberSelect'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { LemonMenu } from 'lib/lemon-ui/LemonMenu'\nimport { LemonTable, LemonTableColumn, LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { atColumn, createdByColumn } from 'lib/lemon-ui/LemonTable/columnUtils'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { useEffect } from 'react'\nimport { ContainsTypeFilters } from 'scenes/notebooks/NotebooksTable/ContainsTypeFilter'\nimport { notebooksTableLogic } from 'scenes/notebooks/NotebooksTable/notebooksTableLogic'\nimport { urls } from 'scenes/urls'\n\nimport { notebooksModel } from '~/models/notebooksModel'\nimport { NotebookListItemType } from '~/types'\n\nimport { notebookPanelLogic } from '../NotebookPanel/notebookPanelLogic'\n\nfunction titleColumn(): LemonTableColumn<NotebookListItemType, 'title'> {\n    return {\n        title: 'Title',\n        dataIndex: 'title',\n        width: '100%',\n        render: function Render(title, { short_id, is_template }) {\n            return (\n                <Link\n                    data-attr=\"notebook-title\"\n                    to={urls.notebook(short_id)}\n                    className=\"font-semibold flex items-center gap-2\"\n                >\n                    {title || 'Untitled'}\n                    {is_template && <LemonTag type=\"highlight\">TEMPLATE</LemonTag>}\n                </Link>\n            )\n        },\n        sorter: (a, b) => (a.title ?? 'Untitled').localeCompare(b.title ?? 'Untitled'),\n    }\n}\n\nexport function NotebooksTable(): JSX.Element {\n    const { notebooksAndTemplates, filters, notebooksResponseLoading, notebookTemplates, tableSorting, pagination } =\n        useValues(notebooksTableLogic)\n    const { loadNotebooks, setFilters, tableSortingChanged } = useActions(notebooksTableLogic)\n    const { selectNotebook } = useActions(notebookPanelLogic)\n\n    useEffect(() => {\n        loadNotebooks()\n    }, [])\n\n    const columns: LemonTableColumns<NotebookListItemType> = [\n        titleColumn() as LemonTableColumn<NotebookListItemType, keyof NotebookListItemType | undefined>,\n\n        createdByColumn<NotebookListItemType>() as LemonTableColumn<\n            NotebookListItemType,\n            keyof NotebookListItemType | undefined\n        >,\n        atColumn<NotebookListItemType>('created_at', 'Created') as LemonTableColumn<\n            NotebookListItemType,\n            keyof NotebookListItemType | undefined\n        >,\n        atColumn<NotebookListItemType>('last_modified_at', 'Last modified') as LemonTableColumn<\n            NotebookListItemType,\n            keyof NotebookListItemType | undefined\n        >,\n        {\n            render: function Render(_, notebook) {\n                if (notebook.is_template) {\n                    return null\n                }\n                return (\n                    <LemonMenu\n                        items={[\n                            {\n                                label: 'Delete',\n                                icon: <IconTrash />,\n                                status: 'danger',\n\n                                onClick: () => {\n                                    notebooksModel.actions.deleteNotebook(notebook.short_id, notebook?.title)\n                                },\n                            },\n                        ]}\n                    >\n                        <LemonButton aria-label=\"more\" icon={<IconEllipsis />} size=\"small\" />\n                    </LemonMenu>\n                )\n            },\n        },\n    ]\n\n    return (\n        <div className=\"space-y-4\">\n            <LemonBanner\n                type=\"info\"\n                action={{\n                    onClick: () => {\n                        selectNotebook(notebookTemplates[0].short_id)\n                    },\n                    children: 'Get started',\n                }}\n                dismissKey=\"notebooks-preview-banner\"\n            >\n                <b>Welcome to Notebooks</b> - a great way to bring Insights, Replays, Feature Flags and many more\n                PostHog products together into one place.\n            </LemonBanner>\n            <div className=\"flex justify-between gap-2 flex-wrap\">\n                <LemonInput\n                    type=\"search\"\n                    placeholder=\"Search for notebooks\"\n                    onChange={(s) => {\n                        setFilters({ search: s })\n                    }}\n                    value={filters.search}\n                    data-attr=\"notebooks-search\"\n                />\n                <div className=\"flex items-center gap-4 flex-wrap\">\n                    <ContainsTypeFilters filters={filters} setFilters={setFilters} />\n                    <div className=\"flex items-center gap-2\">\n                        <span>Created by:</span>\n                        <MemberSelect\n                            value={filters.createdBy}\n                            onChange={(user) => setFilters({ createdBy: user?.uuid || null })}\n                        />\n                    </div>\n                </div>\n            </div>\n            <LemonTable\n                data-attr=\"notebooks-table\"\n                pagination={pagination}\n                dataSource={notebooksAndTemplates}\n                rowKey=\"short_id\"\n                columns={columns}\n                loading={notebooksResponseLoading}\n                defaultSorting={tableSorting}\n                emptyState=\"No notebooks matching your filters!\"\n                nouns={['notebook', 'notebooks']}\n                onSort={tableSortingChanged}\n            />\n        </div>\n    )\n}\n", "import { LemonInputSelect } from 'lib/lemon-ui/LemonInputSelect'\nimport posthog from 'posthog-js'\nimport { NotebooksListFilters } from 'scenes/notebooks/NotebooksTable/notebooksTableLogic'\n\nimport { NotebookNodeType } from '~/types'\n\nexport const fromNodeTypeToLabel: Omit<\n    Record<NotebookNodeType, string>,\n    | NotebookNodeType.Backlink\n    | NotebookNodeType.PersonFeed\n    | NotebookNodeType.Properties\n    | NotebookNodeType.Map\n    | NotebookNodeType.Mention\n    | NotebookNodeType.Embed\n> = {\n    [NotebookNodeType.FeatureFlag]: 'Feature flags',\n    [NotebookNodeType.FeatureFlagCodeExample]: 'Feature flag Code Examples',\n    [NotebookNodeType.Experiment]: 'Experiments',\n    [NotebookNodeType.EarlyAccessFeature]: 'Early Access Features',\n    [NotebookNodeType.Survey]: 'Surveys',\n    [NotebookNodeType.Image]: 'Images',\n    [NotebookNodeType.Person]: 'Persons',\n    [NotebookNodeType.Query]: 'Queries',\n    [NotebookNodeType.Recording]: 'Session recordings',\n    [NotebookNodeType.RecordingPlaylist]: 'Session replay playlists',\n    [NotebookNodeType.ReplayTimestamp]: 'Session recording comments',\n    [NotebookNodeType.Cohort]: 'Cohorts',\n    [NotebookNodeType.Group]: 'Groups',\n}\n\nexport function ContainsTypeFilters({\n    filters,\n    setFilters,\n}: {\n    filters: NotebooksListFilters\n    setFilters: (selection: Partial<NotebooksListFilters>) => void\n}): JSX.Element {\n    return (\n        <div className=\"flex items-center gap-2\">\n            <span>Containing:</span>\n            <LemonInputSelect\n                mode=\"multiple\"\n                placeholder=\"Any content\"\n                options={Object.entries(fromNodeTypeToLabel)\n                    .filter((entry) => entry[1] !== '')\n                    .map(([type, label]) => ({ key: type, label }))}\n                value={filters.contains}\n                onChange={(newValue: string[]) => {\n                    posthog.capture('notebook containing filter applied')\n                    setFilters({ contains: newValue.map((x) => x as NotebookNodeType) })\n                }}\n                data-attr=\"notebooks-list-contains-filters\"\n            />\n        </div>\n    )\n}\n", "import { PaginationManual, Sorting } from '@posthog/lemon-ui'\nimport { actions, connect, kea, listeners, path, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api, { CountedPaginatedResponse } from 'lib/api'\nimport { objectClean, objectsEqual } from 'lib/utils'\n\nimport { notebooksModel } from '~/models/notebooksModel'\nimport { NotebookListItemType, NotebookNodeType } from '~/types'\n\nimport type { notebooksTableLogicType } from './notebooksTableLogicType'\n\nexport interface NotebooksListFilters {\n    search: string\n    // UUID of the user that created the notebook\n    createdBy: string | null\n    contains: NotebookNodeType[]\n}\n\nexport const DEFAULT_FILTERS: NotebooksListFilters = {\n    search: '',\n    createdBy: null,\n    contains: [],\n}\n\nconst RESULTS_PER_PAGE = 50\nconst DEFAULT_SORTING: Sorting = { columnKey: '-created_at', order: 1 }\n\nexport const notebooksTableLogic = kea<notebooksTableLogicType>([\n    path(['scenes', 'notebooks', 'NotebooksTable', 'notebooksTableLogic']),\n    actions({\n        loadNotebooks: true,\n        setFilters: (filters: Partial<NotebooksListFilters>) => ({ filters }),\n        tableSortingChanged: (sorting: Sorting | null) => ({\n            sorting,\n        }),\n        setPage: (page: number) => ({ page }),\n    }),\n    connect({\n        values: [notebooksModel, ['notebookTemplates']],\n        actions: [notebooksModel, ['deleteNotebookSuccess']],\n    }),\n    reducers({\n        filters: [\n            DEFAULT_FILTERS,\n            {\n                setFilters: (state, { filters }) =>\n                    objectClean({\n                        ...(state || {}),\n                        ...filters,\n                    }),\n            },\n        ],\n        sortValue: [\n            null as string | null,\n            {\n                setSortValue: (_, { sortValue }) => sortValue,\n            },\n        ],\n        page: [\n            1,\n            {\n                setPage: (_, { page }) => page,\n                setFilters: () => 1,\n                setSortValue: () => 1,\n            },\n        ],\n        tableSorting: [\n            DEFAULT_SORTING,\n            { persist: true },\n            {\n                tableSortingChanged: (_, { sorting }) => sorting || DEFAULT_SORTING,\n            },\n        ],\n    }),\n    loaders(({ values }) => ({\n        notebooksResponse: [\n            null as CountedPaginatedResponse<NotebookListItemType> | null,\n            {\n                loadNotebooks: async (_, breakpoint) => {\n                    // TODO: Support pagination\n                    await breakpoint(100)\n\n                    const contains = values.filters?.contains.map((type) => ({ type, attrs: {} })) || undefined\n\n                    const createdByForQuery =\n                        values.filters?.createdBy === DEFAULT_FILTERS.createdBy ? undefined : values.filters?.createdBy\n\n                    const res = await api.notebooks.list({\n                        contains,\n                        created_by: createdByForQuery ?? undefined,\n                        search: values.filters?.search || undefined,\n                        order: values.sortValue ?? '-last_modified_at',\n                        limit: RESULTS_PER_PAGE,\n                        offset: (values.page - 1) * RESULTS_PER_PAGE,\n                    })\n\n                    breakpoint()\n                    return res\n                },\n            },\n        ],\n    })),\n    listeners(({ actions }) => ({\n        setFilters: () => actions.loadNotebooks(),\n        setSortValue: () => actions.loadNotebooks(),\n        setPage: () => actions.loadNotebooks(),\n        deleteNotebookSuccess: () => actions.loadNotebooks(),\n    })),\n    selectors(({ actions }) => ({\n        notebooksAndTemplates: [\n            (s) => [s.notebooks, s.notebookTemplates, s.filters],\n            (notebooks, notebookTemplates, filters): NotebookListItemType[] => {\n                const includeTemplates = objectsEqual(filters, DEFAULT_FILTERS)\n                return [...(includeTemplates ? (notebookTemplates as NotebookListItemType[]) : []), ...notebooks]\n            },\n        ],\n\n        notebooks: [\n            (s) => [s.notebooksResponse],\n            (notebooksResponse): NotebookListItemType[] => {\n                return notebooksResponse?.results || []\n            },\n        ],\n\n        pagination: [\n            (s) => [s.page, s.notebooksResponse],\n            (page, notebooksResponse): PaginationManual => {\n                return {\n                    controlled: true,\n                    pageSize: RESULTS_PER_PAGE,\n                    currentPage: page,\n                    entryCount: notebooksResponse?.count ?? 0,\n                    onBackward: () => actions.setPage(page - 1),\n                    onForward: () => actions.setPage(page + 1),\n                }\n            },\n        ],\n    })),\n])\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea_router", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "fromNodeTypeToLabel", "ContainsTypeFilters", "filters", "setFilters", "LemonInputSelect", "entry", "type", "label", "newValue", "Co", "x", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "DEFAULT_FILTERS", "RESULTS_PER_PAGE", "DEFAULT_SORTING", "notebooksTableLogic", "filters", "sorting", "page", "notebooksModel", "state", "objectClean", "_", "sortValue", "values", "breakpoint", "contains", "type", "createdByForQuery", "res", "api_default", "actions", "s", "notebooks", "notebookTemplates", "objectsEqual", "notebooksResponse", "import_jsx_runtime", "titleColumn", "title", "short_id", "is_template", "Link", "urls", "LemonTag", "a", "b", "NotebooksTable", "notebooksAndTemplates", "filters", "notebooksResponseLoading", "notebookTemplates", "tableSorting", "pagination", "notebooksTableLogic", "loadNotebooks", "setFilters", "tableSortingChanged", "selectNotebook", "notebookPanelLogic", "columns", "createdByColumn", "atColumn", "_", "notebook", "LemonMenu", "IconTrash", "notebooksModel", "LemonButton", "IconEllipsis", "LemonBanner", "LemonInput", "s", "ContainsTypeFilters", "MemberSelect", "user", "LemonTable", "import_jsx_runtime", "scene", "NotebooksScene", "PageHeader", "LemonMenu", "selectFiles", "files", "getTextFromFile", "text", "urls", "base64Encode", "lemonToast", "LemonButton", "IconEllipsis", "Tooltip", "NotebooksTable"]
}
