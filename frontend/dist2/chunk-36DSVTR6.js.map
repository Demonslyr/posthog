{
  "version": 3,
  "sources": ["../src/scenes/experiments/ExperimentView/components.tsx"],
  "sourcesContent": ["import { IconFlask } from '@posthog/icons'\nimport {\n    LemonBanner,\n    LemonButton,\n    LemonDialog,\n    LemonDivider,\n    LemonModal,\n    LemonSelect,\n    LemonSkeleton,\n    LemonTag,\n    LemonTagType,\n    Link,\n    Tooltip,\n} from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { InsightLabel } from 'lib/components/InsightLabel'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { PropertyFilterButton } from 'lib/components/PropertyFilters/components/PropertyFilterButton'\nimport { IconAreaChart } from 'lib/lemon-ui/icons'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LoadingBar } from 'lib/lemon-ui/LoadingBar'\nimport { useEffect, useState } from 'react'\nimport { urls } from 'scenes/urls'\n\nimport { groupsModel } from '~/models/groupsModel'\nimport { Query } from '~/queries/Query/Query'\nimport {\n    ExperimentFunnelsQueryResponse,\n    ExperimentTrendsQueryResponse,\n    FunnelsQuery,\n    InsightQueryNode,\n    InsightVizNode,\n    NodeKind,\n    TrendsQuery,\n} from '~/queries/schema/schema-general'\nimport {\n    ActionFilter,\n    AnyPropertyFilter,\n    Experiment,\n    Experiment as ExperimentType,\n    ExperimentIdType,\n    InsightShortId,\n} from '~/types'\n\nimport { experimentLogic } from '../experimentLogic'\nimport { getExperimentStatus, getExperimentStatusColor } from '../experimentsLogic'\nimport { getExperimentInsightColour } from '../utils'\n\nexport function VariantTag({\n    experimentId,\n    variantKey,\n    muted = false,\n    fontSize,\n    className,\n}: {\n    experimentId: ExperimentIdType\n    variantKey: string\n    muted?: boolean\n    fontSize?: number\n    className?: string\n}): JSX.Element {\n    const { experiment, getIndexForVariant, metricResults } = useValues(experimentLogic({ experimentId }))\n\n    if (!metricResults) {\n        return <></>\n    }\n\n    if (experiment.holdout && variantKey === `holdout-${experiment.holdout_id}`) {\n        return (\n            <span className={clsx('flex items-center min-w-0', className)}>\n                <div\n                    className=\"w-2 h-2 rounded-full shrink-0\"\n                    // eslint-disable-next-line react/forbid-dom-props\n                    style={{\n                        backgroundColor: getExperimentInsightColour(getIndexForVariant(metricResults[0], variantKey)),\n                    }}\n                />\n                <LemonTag type=\"option\" className=\"ml-2\">\n                    {experiment.holdout.name}\n                </LemonTag>\n            </span>\n        )\n    }\n\n    return (\n        <span className={clsx('flex items-center min-w-0', className)}>\n            <div\n                className=\"w-2 h-2 rounded-full shrink-0\"\n                // eslint-disable-next-line react/forbid-dom-props\n                style={{\n                    backgroundColor: getExperimentInsightColour(getIndexForVariant(metricResults[0], variantKey)),\n                }}\n            />\n            <span\n                className={`ml-2 font-semibold truncate ${muted ? 'text-secondary' : ''}`}\n                // eslint-disable-next-line react/forbid-dom-props\n                style={fontSize ? { fontSize: `${fontSize}px` } : undefined}\n            >\n                {variantKey}\n            </span>\n        </span>\n    )\n}\n\nexport function ResultsTag({ metricIndex = 0 }: { metricIndex?: number }): JSX.Element {\n    const { isPrimaryMetricSignificant, significanceDetails } = useValues(experimentLogic)\n    const result: { color: LemonTagType; label: string } = isPrimaryMetricSignificant(metricIndex)\n        ? { color: 'success', label: 'Significant' }\n        : { color: 'primary', label: 'Not significant' }\n\n    if (significanceDetails(metricIndex)) {\n        return (\n            <Tooltip title={significanceDetails(metricIndex)}>\n                <LemonTag className=\"cursor-pointer\" type={result.color}>\n                    <b className=\"uppercase\">{result.label}</b>\n                </LemonTag>\n            </Tooltip>\n        )\n    }\n\n    return (\n        <LemonTag type={result.color}>\n            <b className=\"uppercase\">{result.label}</b>\n        </LemonTag>\n    )\n}\n\nexport function ResultsQuery({\n    result,\n    showTable,\n}: {\n    result: ExperimentTrendsQueryResponse | ExperimentFunnelsQueryResponse | null\n    showTable: boolean\n}): JSX.Element {\n    if (!result) {\n        return <></>\n    }\n\n    const query = result.kind === NodeKind.ExperimentTrendsQuery ? result.count_query : result.funnels_query\n    const fakeInsightId = Math.random().toString(36).substring(2, 15)\n\n    return (\n        <Query\n            query={{\n                kind: NodeKind.InsightVizNode,\n                source: query,\n                showTable,\n                showLastComputation: true,\n                showLastComputationRefresh: false,\n            }}\n            context={{\n                insightProps: {\n                    dashboardItemId: fakeInsightId as InsightShortId,\n                    cachedInsight: {\n                        short_id: fakeInsightId as InsightShortId,\n                        query: {\n                            kind: NodeKind.InsightVizNode,\n                            source: query,\n                        } as InsightVizNode,\n                        result: result?.insight,\n                        disable_baseline: true,\n                    },\n                    doNotLoad: true,\n                },\n            }}\n            readOnly\n        />\n    )\n}\n\nexport function ExploreButton({\n    result,\n    size = 'small',\n}: {\n    result: ExperimentTrendsQueryResponse | ExperimentFunnelsQueryResponse | null\n    size?: 'xsmall' | 'small' | 'large'\n}): JSX.Element {\n    if (!result) {\n        return <></>\n    }\n\n    const query: InsightVizNode = {\n        kind: NodeKind.InsightVizNode,\n        source: (result.kind === NodeKind.ExperimentTrendsQuery\n            ? result.count_query\n            : result.funnels_query) as InsightQueryNode,\n    }\n\n    return (\n        <LemonButton\n            className=\"ml-auto -translate-y-2\"\n            size={size}\n            type=\"primary\"\n            icon={<IconAreaChart />}\n            to={urls.insightNew({ query })}\n            targetBlank\n        >\n            Explore as Insight\n        </LemonButton>\n    )\n}\n\nexport function ResultsHeader(): JSX.Element {\n    const { metricResults } = useValues(experimentLogic)\n\n    const result = metricResults?.[0]\n\n    return (\n        <div className=\"flex\">\n            <div className=\"w-1/2\">\n                <div className=\"inline-flex items-center space-x-2 mb-2\">\n                    <h2 className=\"m-0 font-semibold text-lg\">Results</h2>\n                    <ResultsTag />\n                </div>\n            </div>\n\n            <div className=\"w-1/2 flex flex-col justify-end\">\n                <div className=\"ml-auto\">\n                    {/* TODO: Only show explore button if the metric is a trends or funnels query. Not supported yet with new query runner */}\n                    {result &&\n                        (result.kind === NodeKind.ExperimentTrendsQuery ||\n                            result.kind === NodeKind.ExperimentFunnelsQuery) && <ExploreButton result={result} />}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport function EllipsisAnimation(): JSX.Element {\n    const [ellipsis, setEllipsis] = useState('.')\n\n    useEffect(() => {\n        let count = 1\n        let direction = 1\n\n        const interval = setInterval(() => {\n            setEllipsis('.'.repeat(count))\n            count += direction\n\n            if (count === 3 || count === 1) {\n                direction *= -1\n            }\n        }, 300)\n\n        return () => clearInterval(interval)\n    }, [])\n\n    return <span>{ellipsis}</span>\n}\n\nexport function ExperimentLoadingAnimation(): JSX.Element {\n    return (\n        <div className=\"flex flex-col flex-1 justify-center items-center\">\n            <LoadingBar />\n            <div className=\"text-xs text-secondary w-44\">\n                <span className=\"mr-1\">Fetching experiment results</span>\n                <EllipsisAnimation />\n            </div>\n        </div>\n    )\n}\n\nexport function PageHeaderCustom(): JSX.Element {\n    const {\n        experimentId,\n        experiment,\n        isExperimentRunning,\n        isExperimentStopped,\n        isPrimaryMetricSignificant,\n        isSingleVariantShipped,\n        hasPrimaryMetricSet,\n        isCreatingExperimentDashboard,\n    } = useValues(experimentLogic)\n    const {\n        launchExperiment,\n        endExperiment,\n        archiveExperiment,\n        createExposureCohort,\n        openShipVariantModal,\n        createExperimentDashboard,\n    } = useActions(experimentLogic)\n\n    const exposureCohortId = experiment?.exposure_cohort\n\n    return (\n        <PageHeader\n            buttons={\n                <>\n                    {experiment && !isExperimentRunning && (\n                        <div className=\"flex items-center\">\n                            <LemonButton\n                                type=\"primary\"\n                                data-attr=\"launch-experiment\"\n                                onClick={() => launchExperiment()}\n                                disabledReason={\n                                    !hasPrimaryMetricSet\n                                        ? 'Add at least one primary metric before launching the experiment'\n                                        : undefined\n                                }\n                            >\n                                Launch\n                            </LemonButton>\n                        </div>\n                    )}\n                    {experiment && isExperimentRunning && (\n                        <div className=\"flex flex-row gap-2\">\n                            <>\n                                <More\n                                    overlay={\n                                        <>\n                                            <LemonButton\n                                                onClick={() => (exposureCohortId ? undefined : createExposureCohort())}\n                                                fullWidth\n                                                data-attr={`${exposureCohortId ? 'view' : 'create'}-exposure-cohort`}\n                                                to={exposureCohortId ? urls.cohort(exposureCohortId) : undefined}\n                                                targetBlank={!!exposureCohortId}\n                                            >\n                                                {exposureCohortId ? 'View' : 'Create'} exposure cohort\n                                            </LemonButton>\n                                            <LemonButton\n                                                onClick={() => createExperimentDashboard()}\n                                                fullWidth\n                                                disabled={isCreatingExperimentDashboard}\n                                            >\n                                                Create dashboard\n                                            </LemonButton>\n                                        </>\n                                    }\n                                />\n                                <LemonDivider vertical />\n                            </>\n                            <ResetButton experimentId={experiment.id} />\n                            {!experiment.end_date && (\n                                <LemonButton\n                                    type=\"secondary\"\n                                    data-attr=\"stop-experiment\"\n                                    status=\"danger\"\n                                    onClick={() => {\n                                        LemonDialog.open({\n                                            title: 'Stop this experiment?',\n                                            content: (\n                                                <div className=\"text-sm text-secondary\">\n                                                    This action will end data collection. The experiment can be\n                                                    restarted later if needed.\n                                                </div>\n                                            ),\n                                            primaryButton: {\n                                                children: 'Stop',\n                                                type: 'primary',\n                                                onClick: () => endExperiment(),\n                                                size: 'small',\n                                            },\n                                            secondaryButton: {\n                                                children: 'Cancel',\n                                                type: 'tertiary',\n                                                size: 'small',\n                                            },\n                                        })\n                                    }}\n                                >\n                                    Stop\n                                </LemonButton>\n                            )}\n                            {isExperimentStopped && (\n                                <LemonButton\n                                    type=\"secondary\"\n                                    status=\"danger\"\n                                    onClick={() => {\n                                        LemonDialog.open({\n                                            title: 'Archive this experiment?',\n                                            content: (\n                                                <div className=\"text-sm text-secondary\">\n                                                    This action will move the experiment to the archived tab. It can be\n                                                    restored at any time.\n                                                </div>\n                                            ),\n                                            primaryButton: {\n                                                children: 'Archive',\n                                                type: 'primary',\n                                                onClick: () => archiveExperiment(),\n                                                size: 'small',\n                                            },\n                                            secondaryButton: {\n                                                children: 'Cancel',\n                                                type: 'tertiary',\n                                                size: 'small',\n                                            },\n                                        })\n                                    }}\n                                >\n                                    <b>Archive</b>\n                                </LemonButton>\n                            )}\n                        </div>\n                    )}\n                    {isPrimaryMetricSignificant(0) && !isSingleVariantShipped && (\n                        <>\n                            <Tooltip title=\"Choose a variant and roll it out to all users\">\n                                <LemonButton type=\"primary\" icon={<IconFlask />} onClick={() => openShipVariantModal()}>\n                                    <b>Ship a variant</b>\n                                </LemonButton>\n                            </Tooltip>\n                            <ShipVariantModal experimentId={experimentId} />\n                        </>\n                    )}\n                </>\n            }\n        />\n    )\n}\n\nexport function ShipVariantModal({ experimentId }: { experimentId: Experiment['id'] }): JSX.Element {\n    const { experiment, isShipVariantModalOpen } = useValues(experimentLogic({ experimentId }))\n    const { closeShipVariantModal, shipVariant } = useActions(experimentLogic({ experimentId }))\n    const { aggregationLabel } = useValues(groupsModel)\n\n    const [selectedVariantKey, setSelectedVariantKey] = useState<string | null>()\n    useEffect(() => {\n        if (experiment.parameters?.feature_flag_variants?.length > 1) {\n            // First test variant selected by default\n            setSelectedVariantKey(experiment.parameters.feature_flag_variants[1].key)\n        }\n    }, [experiment])\n\n    const aggregationTargetName =\n        experiment.filters.aggregation_group_type_index != null\n            ? aggregationLabel(experiment.filters.aggregation_group_type_index).plural\n            : 'users'\n\n    return (\n        <LemonModal\n            isOpen={isShipVariantModalOpen}\n            onClose={closeShipVariantModal}\n            width={600}\n            title=\"Ship a variant\"\n            footer={\n                <div className=\"flex items-center gap-2\">\n                    <LemonButton type=\"secondary\" onClick={closeShipVariantModal}>\n                        Cancel\n                    </LemonButton>\n                    <LemonButton\n                        // TODO: revisit if it always makes sense to stop the experiment when shipping a variant\n                        // does it make sense to still *monitor* the experiment after shipping the variant?\n                        onClick={() => shipVariant({ selectedVariantKey, shouldStopExperiment: true })}\n                        type=\"primary\"\n                    >\n                        Ship variant\n                    </LemonButton>\n                </div>\n            }\n        >\n            <div className=\"space-y-6\">\n                <div className=\"text-sm\">\n                    This will roll out the selected variant to <b>100% of {aggregationTargetName}</b> and stop the\n                    experiment.\n                </div>\n                <div className=\"flex items-center\">\n                    <div className=\"w-1/2 pr-4\">\n                        <LemonSelect\n                            className=\"w-full\"\n                            data-attr=\"metrics-selector\"\n                            value={selectedVariantKey}\n                            onChange={(variantKey) => {\n                                setSelectedVariantKey(variantKey)\n                            }}\n                            options={\n                                experiment.parameters?.feature_flag_variants?.map(({ key }) => ({\n                                    value: key,\n                                    label: (\n                                        <div className=\"space-x-2 inline-flex\">\n                                            <VariantTag experimentId={experimentId} variantKey={key} />\n                                        </div>\n                                    ),\n                                })) || []\n                            }\n                        />\n                    </div>\n                </div>\n                <LemonBanner type=\"info\" className=\"mb-4\">\n                    For more precise control over your release, adjust the rollout percentage and release conditions in\n                    the{' '}\n                    <Link\n                        target=\"_blank\"\n                        className=\"font-semibold\"\n                        to={experiment.feature_flag ? urls.featureFlag(experiment.feature_flag.id) : undefined}\n                    >\n                        {experiment.feature_flag?.key}\n                    </Link>{' '}\n                    feature flag.\n                </LemonBanner>\n            </div>\n        </LemonModal>\n    )\n}\n\nexport const ResetButton = ({ experimentId }: { experimentId: ExperimentIdType }): JSX.Element => {\n    const { experiment } = useValues(experimentLogic({ experimentId }))\n    const { resetRunningExperiment } = useActions(experimentLogic)\n\n    const onClickReset = (): void => {\n        LemonDialog.open({\n            title: 'Reset this experiment?',\n            content: (\n                <>\n                    <div className=\"text-sm text-secondary max-w-md\">\n                        <p>\n                            The experiment start and end dates will be reset and the experiment will go back to draft\n                            mode.\n                        </p>\n                        <p>\n                            All events collected thus far will still exist, but won't be applied to the experiment\n                            unless you manually change the start date after launching the experiment again.\n                        </p>\n                    </div>\n                    {experiment.archived && (\n                        <div className=\"text-sm text-secondary\">Resetting will also unarchive the experiment.</div>\n                    )}\n                </>\n            ),\n            primaryButton: {\n                children: 'Confirm',\n                type: 'primary',\n                onClick: resetRunningExperiment,\n                size: 'small',\n            },\n            secondaryButton: {\n                children: 'Cancel',\n                type: 'tertiary',\n                size: 'small',\n            },\n        })\n    }\n\n    return (\n        <LemonButton type=\"secondary\" onClick={onClickReset}>\n            Reset\n        </LemonButton>\n    )\n}\n\nexport function StatusTag({ experiment }: { experiment: ExperimentType }): JSX.Element {\n    const status = getExperimentStatus(experiment)\n    return (\n        <LemonTag type={getExperimentStatusColor(status)}>\n            <b className=\"uppercase\">{status}</b>\n        </LemonTag>\n    )\n}\n\nexport function LoadingState(): JSX.Element {\n    return (\n        <div className=\"space-y-4\">\n            <LemonSkeleton className=\"w-1/3 h-4\" />\n            <LemonSkeleton />\n            <LemonSkeleton />\n            <LemonSkeleton className=\"w-2/3 h-4\" />\n        </div>\n    )\n}\n\nexport function MetricDisplayTrends({ query }: { query: TrendsQuery | undefined }): JSX.Element {\n    const event = query?.series?.[0] as unknown as ActionFilter\n\n    if (!event) {\n        return <></>\n    }\n\n    return (\n        <>\n            <div className=\"mb-2\">\n                <div className=\"flex mb-1\">\n                    <b>\n                        <InsightLabel action={event} showCountedByTag={true} hideIcon showEventName />\n                    </b>\n                </div>\n                <div className=\"space-y-1\">\n                    {event.properties?.map((prop: AnyPropertyFilter) => (\n                        <PropertyFilterButton key={prop.key} item={prop} />\n                    ))}\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport function MetricDisplayFunnels({ query }: { query: FunnelsQuery }): JSX.Element {\n    return (\n        <>\n            {(query.series || []).map((event: any, idx: number) => (\n                <div key={idx} className=\"mb-2\">\n                    <div className=\"flex mb-1\">\n                        <div\n                            className=\"shrink-0 w-6 h-6 mr-2 font-bold text-center text-primary-alt border rounded\"\n                            // eslint-disable-next-line react/forbid-dom-props\n                            style={{ backgroundColor: 'var(--bg-table)' }}\n                        >\n                            {idx + 1}\n                        </div>\n                        <b>\n                            <InsightLabel action={event} hideIcon showEventName />\n                        </b>\n                    </div>\n                    <div className=\"space-y-1\">\n                        {event.properties?.map((prop: AnyPropertyFilter) => (\n                            <PropertyFilterButton key={prop.key} item={prop} />\n                        ))}\n                    </div>\n                </div>\n            ))}\n        </>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_react", "import_jsx_runtime", "VariantTag", "experimentId", "variantKey", "muted", "fontSize", "className", "experiment", "getIndexForVariant", "metricResults", "experimentLogic", "clsx", "getExperimentInsightColour", "LemonTag", "ResultsTag", "metricIndex", "isPrimaryMetricSignificant", "significanceDetails", "result", "Tooltip", "ResultsQuery", "showTable", "query", "fakeInsightId", "Query", "ExploreButton", "size", "LemonButton", "IconAreaChart", "urls", "EllipsisAnimation", "ellipsis", "setEllipsis", "count", "direction", "interval", "PageHeaderCustom", "experimentId", "experiment", "isExperimentRunning", "isExperimentStopped", "isPrimaryMetricSignificant", "isSingleVariantShipped", "hasPrimaryMetricSet", "isCreatingExperimentDashboard", "experimentLogic", "launchExperiment", "endExperiment", "archiveExperiment", "createExposureCohort", "openShipVariantModal", "createExperimentDashboard", "exposureCohortId", "PageHeader", "LemonButton", "More", "urls", "LemonDivider", "ResetButton", "LemonDialog", "Tooltip", "IconFlask", "ShipVariantModal", "isShipVariantModalOpen", "closeShipVariantModal", "shipVariant", "aggregationLabel", "groupsModel", "selectedVariantKey", "setSelectedVariantKey", "aggregationTargetName", "LemonModal", "LemonSelect", "variantKey", "key", "VariantTag", "LemonBanner", "Link", "resetRunningExperiment", "StatusTag", "status", "getExperimentStatus", "LemonTag", "getExperimentStatusColor", "LoadingState", "LemonSkeleton", "MetricDisplayTrends", "query", "event", "InsightLabel", "prop", "PropertyFilterButton", "MetricDisplayFunnels", "idx"]
}
