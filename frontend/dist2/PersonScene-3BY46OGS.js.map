{
  "version": 3,
  "sources": ["../src/scenes/persons/PersonScene.tsx", "../src/scenes/persons/MergeSplitPerson.tsx", "../src/scenes/persons/mergeSplitPersonLogic.ts", "../src/scenes/persons/PersonCohorts.tsx", "../src/scenes/persons/PersonDashboard.tsx", "../src/scenes/persons/personDashboardLogic.ts", "../src/scenes/persons/PersonFeedCanvas.tsx"],
  "sourcesContent": ["import { IconChevronDown, IconCopy, IconInfo } from '@posthog/icons'\nimport { LemonButton, LemonDivider, LemonMenu, LemonSelect, LemonTag, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { ActivityLog } from 'lib/components/ActivityLog/ActivityLog'\nimport { CopyToClipboardInline } from 'lib/components/CopyToClipboard'\nimport { NotFound } from 'lib/components/NotFound'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { PropertiesTable } from 'lib/components/PropertiesTable'\nimport { TZLabel } from 'lib/components/TZLabel'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { groupsAccessLogic } from 'lib/introductions/groupsAccessLogic'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { LemonTabs } from 'lib/lemon-ui/LemonTabs'\nimport { SpinnerOverlay } from 'lib/lemon-ui/Spinner/Spinner'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { copyToClipboard } from 'lib/utils/copyToClipboard'\nimport { RelatedGroups } from 'scenes/groups/RelatedGroups'\nimport { NotebookSelectButton } from 'scenes/notebooks/NotebookSelectButton/NotebookSelectButton'\nimport { PersonDeleteModal } from 'scenes/persons/PersonDeleteModal'\nimport { personDeleteModalLogic } from 'scenes/persons/personDeleteModalLogic'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { SessionRecordingsPlaylist } from 'scenes/session-recordings/playlist/SessionRecordingsPlaylist'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { urls } from 'scenes/urls'\n\nimport { defaultDataTableColumns } from '~/queries/nodes/DataTable/utils'\nimport { Query } from '~/queries/Query/Query'\nimport { NodeKind } from '~/queries/schema/schema-general'\nimport { ActivityScope, NotebookNodeType, PersonsTabType, PersonType, PropertyDefinitionType } from '~/types'\n\nimport { MergeSplitPerson } from './MergeSplitPerson'\nimport { PersonCohorts } from './PersonCohorts'\nimport { PersonDashboard } from './PersonDashboard'\nimport PersonFeedCanvas from './PersonFeedCanvas'\nimport { personsLogic } from './personsLogic'\nimport { RelatedFeatureFlags } from './RelatedFeatureFlags'\n\nexport const scene: SceneExport = {\n    component: PersonScene,\n    logic: personsLogic,\n    paramsToProps: ({ params: { _: rawUrlId } }): (typeof personsLogic)['props'] => ({\n        syncWithUrl: true,\n        urlId: decodeURIComponent(rawUrlId),\n    }),\n}\n\nfunction PersonCaption({ person }: { person: PersonType }): JSX.Element {\n    return (\n        <div className=\"flex flex-wrap items-center gap-2\">\n            <div className=\"flex space-x-1\">\n                <div>\n                    <span className=\"text-secondary\">IDs:</span>{' '}\n                    <CopyToClipboardInline\n                        tooltipMessage={null}\n                        description=\"person distinct ID\"\n                        style={{ justifyContent: 'flex-end' }}\n                    >\n                        {person.distinct_ids[0]}\n                    </CopyToClipboardInline>\n                </div>\n                {person.distinct_ids.length > 1 && (\n                    <LemonMenu\n                        items={person.distinct_ids.slice(1).map((distinct_id: string) => ({\n                            label: distinct_id,\n                            sideIcon: <IconCopy className=\"text-primary-3000\" />,\n                            onClick: () => copyToClipboard(distinct_id, 'distinct id'),\n                        }))}\n                    >\n                        <LemonTag type=\"primary\" className=\"inline-flex\">\n                            <span>+{person.distinct_ids.length - 1}</span>\n                            <IconChevronDown className=\"w-4 h-4\" />\n                        </LemonTag>\n                    </LemonMenu>\n                )}\n            </div>\n            <div>\n                <span className=\"text-secondary\">First seen:</span>{' '}\n                {person.created_at ? <TZLabel time={person.created_at} /> : 'unknown'}\n            </div>\n            <div>\n                <span className=\"text-secondary\">Merge restrictions:</span> {person.is_identified ? 'applied' : 'none'}\n                <Link to=\"https://posthog.com/docs/data/identify#alias-assigning-multiple-distinct-ids-to-the-same-user\">\n                    <Tooltip\n                        title={\n                            <>\n                                {person.is_identified ? <strong>Cannot</strong> : 'Can'} be used as `alias_id` - click\n                                for more info.\n                            </>\n                        }\n                    >\n                        <IconInfo className=\"ml-1 text-base shrink-0\" />\n                    </Tooltip>\n                </Link>\n            </div>\n        </div>\n    )\n}\n\nexport function PersonScene(): JSX.Element | null {\n    const {\n        showCustomerSuccessDashboards,\n        feedEnabled,\n        person,\n        personLoading,\n        personError,\n        currentTab,\n        splitMergeModalShown,\n        urlId,\n        distinctId,\n        primaryDistinctId,\n    } = useValues(personsLogic)\n    const { loadPersons, editProperty, deleteProperty, navigateToTab, setSplitMergeModalShown, setDistinctId } =\n        useActions(personsLogic)\n    const { showPersonDeleteModal } = useActions(personDeleteModalLogic)\n    const { deletedPersonLoading } = useValues(personDeleteModalLogic)\n    const { groupsEnabled } = useValues(groupsAccessLogic)\n    const { currentTeam } = useValues(teamLogic)\n    const { featureFlags } = useValues(featureFlagLogic)\n\n    if (personError) {\n        throw new Error(personError)\n    }\n    if (!person) {\n        return personLoading ? <SpinnerOverlay sceneLevel /> : <NotFound object=\"Person\" />\n    }\n\n    const url = urls.personByDistinctId(urlId || person.distinct_ids[0] || String(person.id))\n    const settingLevel = featureFlags[FEATURE_FLAGS.ENVIRONMENTS] ? 'environment' : 'project'\n\n    return (\n        <>\n            <PageHeader\n                caption={<PersonCaption person={person} />}\n                notebookProps={\n                    url\n                        ? {\n                              href: url,\n                          }\n                        : undefined\n                }\n                buttons={\n                    <div className=\"flex gap-2\">\n                        <NotebookSelectButton\n                            resource={{\n                                type: NotebookNodeType.Person,\n                                attrs: { id: person?.distinct_ids[0] },\n                            }}\n                            type=\"secondary\"\n                        />\n                        <LemonButton\n                            onClick={() => showPersonDeleteModal(person, () => loadPersons())}\n                            disabled={deletedPersonLoading}\n                            loading={deletedPersonLoading}\n                            type=\"secondary\"\n                            status=\"danger\"\n                            data-attr=\"delete-person\"\n                        >\n                            Delete person\n                        </LemonButton>\n\n                        {person.distinct_ids.length > 1 && (\n                            <LemonButton\n                                onClick={() => setSplitMergeModalShown(true)}\n                                data-attr=\"merge-person-button\"\n                                type=\"secondary\"\n                            >\n                                Split IDs\n                            </LemonButton>\n                        )}\n                    </div>\n                }\n            />\n\n            <PersonDeleteModal />\n\n            <LemonTabs\n                activeKey={currentTab}\n                onChange={(tab) => {\n                    navigateToTab(tab as PersonsTabType)\n                }}\n                data-attr=\"persons-tabs\"\n                tabs={[\n                    feedEnabled\n                        ? {\n                              key: PersonsTabType.FEED,\n                              label: <span data-attr=\"persons-feed-tab\">Feed</span>,\n                              content: <PersonFeedCanvas person={person} />,\n                          }\n                        : false,\n                    {\n                        key: PersonsTabType.PROPERTIES,\n                        label: <span data-attr=\"persons-properties-tab\">Properties</span>,\n                        content: (\n                            <PropertiesTable\n                                type={PropertyDefinitionType.Person}\n                                properties={person.properties || {}}\n                                searchable\n                                onEdit={editProperty}\n                                sortProperties\n                                embedded={false}\n                                onDelete={(key) => deleteProperty(key)}\n                                filterable\n                            />\n                        ),\n                    },\n                    {\n                        key: PersonsTabType.EVENTS,\n                        label: <span data-attr=\"persons-events-tab\">Events</span>,\n                        content: (\n                            <Query\n                                query={{\n                                    kind: NodeKind.DataTableNode,\n                                    full: true,\n                                    hiddenColumns: ['person'],\n                                    source: {\n                                        kind: NodeKind.EventsQuery,\n                                        select: defaultDataTableColumns(NodeKind.EventsQuery),\n                                        personId: person.id,\n                                        after: '-24h',\n                                    },\n                                }}\n                            />\n                        ),\n                    },\n                    {\n                        key: PersonsTabType.SESSION_RECORDINGS,\n                        label: <span data-attr=\"person-session-recordings-tab\">Recordings</span>,\n                        content: (\n                            <>\n                                {!currentTeam?.session_recording_opt_in ? (\n                                    <div className=\"mb-4\">\n                                        <LemonBanner type=\"info\">\n                                            Session recordings are currently disabled for this {settingLevel}. To use\n                                            this feature, please go to your{' '}\n                                            <Link to={`${urls.settings('project')}#recordings`}>project settings</Link>{' '}\n                                            and enable it.\n                                        </LemonBanner>\n                                    </div>\n                                ) : null}\n                                <div className=\"SessionRecordingPlaylistHeightWrapper\">\n                                    <SessionRecordingsPlaylist\n                                        logicKey={`person-scene-${person.uuid}`}\n                                        personUUID={person.uuid}\n                                        updateSearchParams\n                                    />\n                                </div>\n                            </>\n                        ),\n                    },\n                    {\n                        key: PersonsTabType.COHORTS,\n                        label: <span data-attr=\"persons-cohorts-tab\">Cohorts</span>,\n                        content: <PersonCohorts />,\n                    },\n                    groupsEnabled && person.uuid\n                        ? {\n                              key: PersonsTabType.RELATED,\n                              label: (\n                                  <span className=\"flex items-center\" data-attr=\"persons-related-tab\">\n                                      Related groups\n                                      <Tooltip title=\"People and groups that have shared events with this person in the last 90 days.\">\n                                          <IconInfo className=\"ml-1 text-base shrink-0\" />\n                                      </Tooltip>\n                                  </span>\n                              ),\n                              content: <RelatedGroups id={person.uuid} groupTypeIndex={null} />,\n                          }\n                        : false,\n                    person.uuid\n                        ? {\n                              key: PersonsTabType.FEATURE_FLAGS,\n                              tooltip: `Only shows feature flags with targeting conditions based on person properties.`,\n                              label: <span data-attr=\"persons-related-flags-tab\">Feature flags</span>,\n                              content: (\n                                  <>\n                                      <div className=\"flex space-x-2 items-center mb-2\">\n                                          <div className=\"flex items-center\">\n                                              Choose ID:\n                                              <Tooltip\n                                                  title={\n                                                      <div className=\"space-y-2\">\n                                                          <div>\n                                                              Feature flags values can depend on a person's distinct ID.\n                                                          </div>\n                                                          <div>\n                                                              If you want your flag values to stay consistent for each\n                                                              user, you can enable flag persistence in the feature flag\n                                                              settings.\n                                                          </div>\n                                                          <div>\n                                                              This option may depend on your specific setup and isn't\n                                                              always suitable. Read more in the{' '}\n                                                              <Link to=\"https://posthog.com/docs/feature-flags/creating-feature-flags#persisting-feature-flags-across-authentication-steps\">\n                                                                  documentation.\n                                                              </Link>\n                                                          </div>\n                                                      </div>\n                                                  }\n                                              >\n                                                  <IconInfo className=\"ml-1 text-base\" />\n                                              </Tooltip>\n                                          </div>\n                                          <LemonSelect\n                                              value={distinctId || primaryDistinctId}\n                                              onChange={(value) => value && setDistinctId(value)}\n                                              options={person.distinct_ids.map((distinct_id) => ({\n                                                  label: distinct_id,\n                                                  value: distinct_id,\n                                              }))}\n                                              data-attr=\"person-feature-flags-select\"\n                                          />\n                                      </div>\n                                      <LemonDivider className=\"mb-4\" />\n                                      <RelatedFeatureFlags distinctId={distinctId || person.distinct_ids[0]} />\n                                  </>\n                              ),\n                          }\n                        : false,\n                    {\n                        key: PersonsTabType.HISTORY,\n                        label: 'History',\n                        content: (\n                            <ActivityLog\n                                scope={ActivityScope.PERSON}\n                                id={person.id}\n                                caption={\n                                    <LemonBanner type=\"info\">\n                                        This page only shows changes made by users in the PostHog site. Automatic\n                                        changes from the API aren't shown here.\n                                    </LemonBanner>\n                                }\n                            />\n                        ),\n                    },\n                    showCustomerSuccessDashboards\n                        ? {\n                              key: PersonsTabType.DASHBOARD,\n                              label: 'Dashboard',\n                              content: <PersonDashboard person={person} />,\n                          }\n                        : false,\n                ]}\n            />\n\n            {splitMergeModalShown && person && <MergeSplitPerson person={person} />}\n        </>\n    )\n}\n", "import { LemonButton, LemonModal, LemonSelect } from '@posthog/lemon-ui'\nimport { BindLogic, useActions, useValues } from 'kea'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { pluralize } from 'lib/utils'\n\nimport { PersonType } from '~/types'\n\nimport { mergeSplitPersonLogic } from './mergeSplitPersonLogic'\n\nexport function MergeSplitPerson({ person }: { person: PersonType }): JSX.Element {\n    const logicProps = { person }\n    const { executedLoading } = useValues(mergeSplitPersonLogic(logicProps))\n    const { execute, cancel } = useActions(mergeSplitPersonLogic(logicProps))\n\n    return (\n        <LemonModal\n            isOpen\n            width=\"40rem\"\n            title=\"Split persons\"\n            footer={\n                <div className=\"flex items-center gap-2\">\n                    <LemonButton onClick={cancel} disabledReason={executedLoading && 'Splitting the user'}>\n                        Cancel\n                    </LemonButton>\n                    <LemonButton type=\"primary\" onClick={execute} loading={executedLoading}>\n                        Split persons\n                    </LemonButton>\n                </div>\n            }\n            onClose={cancel}\n        >\n            {person.distinct_ids.length < 2 ? (\n                'Only persons with more than two distinct IDs can be split.'\n            ) : (\n                <BindLogic logic={mergeSplitPersonLogic} props={logicProps}>\n                    <SplitPerson />\n                </BindLogic>\n            )}\n        </LemonModal>\n    )\n}\n\nfunction SplitPerson(): JSX.Element | null {\n    const { person, selectedPersonToAssignSplit, executedLoading } = useValues(mergeSplitPersonLogic)\n    const { setSelectedPersonToAssignSplit } = useActions(mergeSplitPersonLogic)\n\n    if (!person) {\n        return null\n    }\n\n    const options = person.distinct_ids.map((distinctId: string) => ({\n        label: distinctId,\n        value: distinctId,\n    }))\n\n    return (\n        <>\n            <p>This will split all Distinct IDs for this person into unique persons.</p>\n            <p>\n                You can select a distinct ID for which all the current properties will be assigned (<i>optional</i>).\n                All other new users will start without any properties.\n            </p>\n            <LemonSelect\n                fullWidth\n                options={options}\n                placeholder=\"Select a distinct ID to which to assign all properties (optional)\"\n                disabledReason={executedLoading && 'Splitting user'}\n                value={selectedPersonToAssignSplit}\n                onChange={(value) => setSelectedPersonToAssignSplit(value as string)}\n            />\n            <LemonBanner type=\"warning\" className=\"mt-4\">\n                This will create <strong>{person.distinct_ids.length - 1}</strong>{' '}\n                {pluralize(person.distinct_ids.length - 1, 'new\u00A0person', undefined, false)}. This might change the\n                numbers in your charts, even historically. Please be certain.\n            </LemonBanner>\n        </>\n    )\n}\n", "import { actions, connect, events, kea, key, listeners, path, props, reducers } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport { router } from 'kea-router'\nimport api from 'lib/api'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast/LemonToast'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\n\nimport { PersonType } from '~/types'\n\nimport type { mergeSplitPersonLogicType } from './mergeSplitPersonLogicType'\nimport { personsLogic } from './personsLogic'\n\nexport interface SplitPersonLogicProps {\n    person: PersonType\n}\n\nexport type PersonUuids = NonNullable<PersonType['uuid']>[]\n\nexport const mergeSplitPersonLogic = kea<mergeSplitPersonLogicType>([\n    props({} as SplitPersonLogicProps),\n    key((props) => props.person.id ?? 'new'),\n    path((key) => ['scenes', 'persons', 'mergeSplitPersonLogic', key]),\n    connect(() => ({\n        actions: [\n            personsLogic({ syncWithUrl: true }),\n            ['setListFilters', 'loadPersons', 'setPerson', 'setSplitMergeModalShown'],\n        ],\n        values: [personsLogic({ syncWithUrl: true }), ['persons']],\n    })),\n    actions({\n        setSelectedPersonToAssignSplit: (id: string) => ({ id }),\n        cancel: true,\n    }),\n    loaders(({ values, actions }) => ({\n        executed: [\n            false,\n            {\n                execute: async () => {\n                    const splitAction = await api.create('api/person/' + values.person.id + '/split/', {\n                        ...(values.selectedPersonToAssignSplit\n                            ? { main_distinct_id: values.selectedPersonToAssignSplit }\n                            : {}),\n                    })\n                    if (splitAction.success) {\n                        lemonToast.success(\n                            'Person succesfully split. This may take up to a couple of minutes to complete.'\n                        )\n                        eventUsageLogic.actions.reportPersonSplit(values.person.distinct_ids.length)\n                        actions.setSplitMergeModalShown(false)\n                        router.actions.push('/persons')\n                        return true\n                    }\n                    return false\n                },\n            },\n        ],\n    })),\n    reducers(({ props }) => ({\n        person: [props.person, {}],\n        selectedPersonToAssignSplit: [\n            null as null | string,\n            {\n                setSelectedPersonToAssignSplit: (_, { id }) => id,\n            },\n        ],\n    })),\n    listeners(({ actions, values }) => ({\n        setListFilters: () => {\n            actions.loadPersons()\n        },\n        cancel: () => {\n            if (!values.executedLoading) {\n                actions.setSplitMergeModalShown(false)\n            }\n        },\n    })),\n    events(({ actions }) => ({\n        afterMount: [actions.loadPersons],\n    })),\n])\n", "import { useActions, useValues } from 'kea'\nimport { LemonTable, LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { useEffect } from 'react'\nimport { urls } from 'scenes/urls'\n\nimport { CohortType } from '~/types'\n\nimport { personsLogic } from './personsLogic'\n\nexport function PersonCohorts(): JSX.Element {\n    const { cohorts, cohortsLoading, person } = useValues(personsLogic)\n    const { loadCohorts } = useActions(personsLogic)\n\n    useEffect(() => {\n        loadCohorts()\n    }, [person])\n\n    const columns: LemonTableColumns<CohortType> = [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            className: 'ph-no-capture',\n            render: function RenderName(_, cohort) {\n                return (\n                    <Link to={urls.cohort(cohort.id)}>\n                        <strong>{cohort.name}</strong>\n                    </Link>\n                )\n            },\n            sorter: (a, b) => (a.name || '').localeCompare(b.name || ''),\n        },\n        {\n            title: 'Users in cohort',\n            render: function RenderCount(count) {\n                return (count as number)?.toLocaleString()\n            },\n            dataIndex: 'count',\n            sorter: (a, b) => (a.count || 0) - (b.count || 0),\n        },\n    ]\n\n    return (\n        <LemonTable\n            dataSource={cohorts || []}\n            loading={cohortsLoading}\n            columns={columns}\n            rowKey=\"id\"\n            pagination={{ pageSize: 30, hideOnSinglePage: true }}\n            emptyState=\"This person doesn't belong to any cohort\"\n        />\n    )\n}\n", "import { useActions, useValues } from 'kea'\nimport { SceneDashboardChoiceModal } from 'lib/components/SceneDashboardChoice/SceneDashboardChoiceModal'\nimport { sceneDashboardChoiceModalLogic } from 'lib/components/SceneDashboardChoice/sceneDashboardChoiceModalLogic'\nimport { SceneDashboardChoiceRequired } from 'lib/components/SceneDashboardChoice/SceneDashboardChoiceRequired'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { useEffect } from 'react'\nimport { Dashboard } from 'scenes/dashboard/Dashboard'\nimport { dashboardLogic, DashboardLogicProps } from 'scenes/dashboard/dashboardLogic'\nimport { personDashboardLogic } from 'scenes/persons/personDashboardLogic'\nimport { Scene } from 'scenes/sceneTypes'\n\nimport { HogQLPropertyFilter, PersonType, PropertyFilterType } from '~/types'\n\nexport function PersonDashboard({ person }: { person: PersonType }): JSX.Element {\n    const { showSceneDashboardChoiceModal } = useActions(sceneDashboardChoiceModalLogic({ scene: Scene.Person }))\n    const { dashboardLogicProps } = useValues(personDashboardLogic)\n\n    return (\n        <>\n            {dashboardLogicProps?.id !== undefined ? (\n                <PersonDashboardExisting person={person} dashboardLogicProps={dashboardLogicProps} />\n            ) : (\n                <SceneDashboardChoiceRequired\n                    open={() => {\n                        showSceneDashboardChoiceModal()\n                    }}\n                    scene={Scene.Person}\n                />\n            )}\n            <SceneDashboardChoiceModal scene={Scene.Person} />\n        </>\n    )\n}\n\nfunction PersonDashboardExisting({\n    person,\n    dashboardLogicProps,\n}: {\n    person: PersonType\n    dashboardLogicProps: DashboardLogicProps\n}): JSX.Element {\n    const { showSceneDashboardChoiceModal } = useActions(sceneDashboardChoiceModalLogic({ scene: Scene.Person }))\n    const { dashboard } = useValues(dashboardLogic(dashboardLogicProps))\n    const { setProperties } = useActions(dashboardLogic(dashboardLogicProps))\n\n    useEffect(() => {\n        if (dashboard && person) {\n            // `dashboard?.filters.properties` is typed as `any` but it's a list...\n            const current = Array.isArray(dashboard?.filters.properties) ? dashboard?.filters.properties : []\n            // TODO: needs https://github.com/PostHog/posthog/pull/16653 so we can filter by person ID\n            const hogQLPersonFilter = `person.properties.email = '${person.properties.email}'`\n            const desired: HogQLPropertyFilter = {\n                type: PropertyFilterType.HogQL,\n                key: hogQLPersonFilter,\n            }\n\n            const hasDesired = current.some(\n                (item) => item.type === PropertyFilterType.HogQL && item.key === hogQLPersonFilter\n            )\n            if (!hasDesired) {\n                setProperties([\n                    ...current.filter(\n                        (item) =>\n                            item.type === PropertyFilterType.HogQL && !item.key.startsWith('person.properties.email')\n                    ),\n                    desired,\n                ])\n            }\n        }\n    }, [dashboard, person])\n\n    return (\n        <>\n            <div className=\"flex items-center justify-end mb-2\">\n                <LemonButton\n                    type=\"secondary\"\n                    size=\"small\"\n                    data-attr=\"person-dashboard-change-dashboard\"\n                    onClick={showSceneDashboardChoiceModal}\n                >\n                    Change dashboard\n                </LemonButton>\n            </div>\n            <Dashboard id={dashboardLogicProps.id.toString()} placement={dashboardLogicProps.placement} />\n        </>\n    )\n}\n", "import { connect, kea, path, selectors } from 'kea'\nimport { DashboardLogicProps } from 'scenes/dashboard/dashboardLogic'\nimport { Scene } from 'scenes/sceneTypes'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { DashboardPlacement, PersonType } from '~/types'\n\nimport type { personDashboardLogicType } from './personDashboardLogicType'\n\nexport interface PersonDashboardLogicProps {\n    person: PersonType\n}\n\nexport const personDashboardLogic = kea<personDashboardLogicType>([\n    path(['scenes', 'persons', 'personDashboardLogic']),\n    connect({\n        values: [userLogic, ['user']],\n    }),\n    selectors(() => ({\n        personDashboardId: [\n            (s) => [s.user],\n            (user) => {\n                const currentDashboard = user?.scene_personalisation?.find(\n                    (choice) => choice.scene === Scene.Person\n                )?.dashboard\n                return typeof currentDashboard === 'number' ? currentDashboard : currentDashboard?.id\n            },\n        ],\n        dashboardLogicProps: [\n            (s) => [s.personDashboardId],\n            (personDashboardId): DashboardLogicProps | null =>\n                personDashboardId\n                    ? {\n                          id: personDashboardId,\n                          placement: DashboardPlacement.Person,\n                      }\n                    : null,\n        ],\n    })),\n])\n", "import { useValues } from 'kea'\nimport { uuid } from 'lib/utils'\nimport { Notebook } from 'scenes/notebooks/Notebook/Notebook'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\n\nimport { PersonType } from '~/types'\n\ntype PersonFeedCanvasProps = {\n    person: PersonType\n}\n\nconst PersonFeedCanvas = ({ person }: PersonFeedCanvasProps): JSX.Element => {\n    const { isCloudOrDev } = useValues(preflightLogic)\n\n    const id = person.id\n\n    const personId = person.distinct_ids[0]\n\n    return (\n        <Notebook\n            editable={false}\n            shortId={`canvas-${id}`}\n            mode=\"canvas\"\n            initialContent={{\n                type: 'doc',\n                content: [\n                    {\n                        type: 'ph-person-feed',\n                        attrs: {\n                            height: null,\n                            title: null,\n                            nodeId: uuid(),\n                            id: personId,\n                            __init: null,\n                            children: [\n                                {\n                                    type: 'ph-person',\n                                    attrs: { id: personId, nodeId: uuid(), title: 'Info' },\n                                },\n                                ...(isCloudOrDev\n                                    ? [\n                                          {\n                                              type: 'ph-map',\n                                              attrs: { id: personId, nodeId: uuid() },\n                                          },\n                                      ]\n                                    : []),\n                                {\n                                    type: 'ph-properties',\n                                    attrs: { id: personId, nodeId: uuid() },\n                                },\n                            ],\n                        },\n                    },\n                ],\n            }}\n        />\n    )\n}\n\nexport default PersonFeedCanvas\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "import_kea_router", "mergeSplitPersonLogic", "props", "key", "personsLogic", "id", "values", "actions", "api_default", "lemonToast", "eventUsageLogic", "_", "import_jsx_runtime", "MergeSplitPerson", "person", "logicProps", "executedLoading", "mergeSplitPersonLogic", "execute", "cancel", "LemonModal", "LemonButton", "SplitPerson", "selectedPersonToAssignSplit", "setSelectedPersonToAssignSplit", "options", "distinctId", "LemonSelect", "value", "LemonBanner", "pluralize", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "PersonCohorts", "cohorts", "cohortsLoading", "person", "personsLogic", "loadCohorts", "LemonTable", "_", "cohort", "Link", "urls", "a", "b", "count", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "personDashboardLogic", "userLogic", "s", "user", "currentDashboard", "choice", "personDashboardId", "import_jsx_runtime", "PersonDashboard", "person", "showSceneDashboardChoiceModal", "sceneDashboardChoiceModalLogic", "dashboardLogicProps", "personDashboardLogic", "PersonDashboardExisting", "SceneDashboardChoiceRequired", "SceneDashboardChoiceModal", "dashboard", "dashboardLogic", "setProperties", "current", "hogQLPersonFilter", "desired", "item", "LemonButton", "Dashboard", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "PersonFeedCanvas", "person", "isCloudOrDev", "preflightLogic", "id", "personId", "Notebook", "uuid", "PersonFeedCanvas_default", "import_jsx_runtime", "scene", "PersonScene", "personsLogic", "rawUrlId", "PersonCaption", "person", "CopyToClipboardInline", "LemonMenu", "distinct_id", "IconCopy", "copyToClipboard", "LemonTag", "IconChevronDown", "TZLabel", "Link", "Tooltip", "IconInfo", "showCustomerSuccessDashboards", "feedEnabled", "personLoading", "personError", "currentTab", "splitMergeModalShown", "urlId", "distinctId", "primaryDistinctId", "loadPersons", "editProperty", "deleteProperty", "navigateToTab", "setSplitMergeModalShown", "setDistinctId", "showPersonDeleteModal", "personDeleteModalLogic", "deletedPersonLoading", "groupsEnabled", "groupsAccessLogic", "currentTeam", "teamLogic", "featureFlags", "featureFlagLogic", "SpinnerOverlay", "NotFound", "url", "urls", "settingLevel", "FEATURE_FLAGS", "PageHeader", "NotebookSelectButton", "LemonButton", "PersonDeleteModal", "LemonTabs", "tab", "PersonFeedCanvas_default", "PropertiesTable", "key", "Query", "defaultDataTableColumns", "LemonBanner", "SessionRecordingsPlaylist", "PersonCohorts", "RelatedGroups", "LemonSelect", "value", "LemonDivider", "RelatedFeatureFlags", "ActivityLog", "PersonDashboard", "MergeSplitPerson"]
}
