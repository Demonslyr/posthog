{
  "version": 3,
  "sources": ["../src/scenes/web-analytics/webAnalyticsLogic.tsx", "../src/scenes/error-tracking/queries.ts", "../src/scenes/data-warehouse/external/DataWarehouseTables.tsx", "../src/queries/Query/Query.tsx", "../src/scenes/debug/HogDebug.tsx", "../src/queries/nodes/DataNode/DataNode.tsx", "../src/queries/nodes/WebOverview/WebOverview.tsx", "../src/queries/nodes/WebOverview/EvenlyDistributedRows.tsx", "../src/queries/nodes/WebVitals/WebVitals.tsx", "../src/queries/nodes/WebVitals/WebVitalsContent.tsx", "../src/queries/nodes/WebVitals/WebVitalsTab.tsx", "../src/queries/nodes/WebVitals/WebVitalsProgressBar.tsx", "../src/queries/QueryEditor/QueryEditor.tsx", "../src/queries/QueryEditor/queryEditorLogic.ts", "../src/queries/nodes/DataVisualization/DataVisualization.tsx", "../src/queries/nodes/SavedInsight/SavedInsight.tsx", "../src/queries/nodes/WebVitals/WebVitalsPathBreakdown.tsx", "../src/scenes/data-warehouse/external/TableData.tsx", "../src/scenes/data-management/database/DatabaseTable.tsx"],
  "sourcesContent": ["import { IconGear } from '@posthog/icons'\nimport { actions, afterMount, BreakPointFunction, connect, kea, listeners, path, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport { actionToUrl, urlToAction } from 'kea-router'\nimport { windowValues } from 'kea-window-values'\nimport api from 'lib/api'\nimport { FEATURE_FLAGS, RETENTION_FIRST_TIME } from 'lib/constants'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { Link, PostHogComDocsURL } from 'lib/lemon-ui/Link/Link'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { getDefaultInterval, isNotNil, objectsEqual, updateDatesWithInterval } from 'lib/utils'\nimport { isDefinitionStale } from 'lib/utils/definitions'\nimport { errorTrackingQuery } from 'scenes/error-tracking/queries'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\nimport { Scene } from 'scenes/sceneTypes'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { urls } from 'scenes/urls'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { WEB_VITALS_COLORS, WEB_VITALS_THRESHOLDS } from '~/queries/nodes/WebVitals/definitions'\nimport { hogqlQuery } from '~/queries/query'\nimport {\n    ActionConversionGoal,\n    ActionsNode,\n    AnyEntityNode,\n    CompareFilter,\n    CustomEventConversionGoal,\n    EventsNode,\n    InsightVizNode,\n    NodeKind,\n    QuerySchema,\n    TrendsFilter,\n    TrendsQuery,\n    WebAnalyticsConversionGoal,\n    WebAnalyticsOrderBy,\n    WebAnalyticsOrderByDirection,\n    WebAnalyticsOrderByFields,\n    WebAnalyticsPropertyFilter,\n    WebAnalyticsPropertyFilters,\n    WebStatsBreakdown,\n    WebStatsTableQuery,\n    WebVitalsMetric,\n} from '~/queries/schema/schema-general'\nimport { isWebAnalyticsPropertyFilters } from '~/queries/schema-guards'\nimport {\n    AvailableFeature,\n    BaseMathType,\n    Breadcrumb,\n    ChartDisplayType,\n    EventDefinitionType,\n    FilterLogicalOperator,\n    InsightLogicProps,\n    InsightType,\n    IntervalType,\n    PropertyFilterType,\n    PropertyMathType,\n    PropertyOperator,\n    RecordingUniversalFilters,\n    RetentionPeriod,\n    UniversalFiltersGroupValue,\n} from '~/types'\n\nimport type { webAnalyticsLogicType } from './webAnalyticsLogicType'\n\nexport interface WebTileLayout {\n    /** The class has to be spelled out without interpolation, as otherwise Tailwind can't pick it up. */\n    colSpanClassName?: `md:col-span-${number}` | 'md:col-span-full'\n    /** The class has to be spelled out without interpolation, as otherwise Tailwind can't pick it up. */\n    rowSpanClassName?: `md:row-span-${number}`\n    /** The class has to be spelled out without interpolation, as otherwise Tailwind can't pick it up. */\n    orderWhenLargeClassName?: `xxl:order-${number}`\n    className?: string\n}\n\nexport enum TileId {\n    OVERVIEW = 'OVERVIEW',\n    GRAPHS = 'GRAPHS',\n    PATHS = 'PATHS',\n    SOURCES = 'SOURCES',\n    DEVICES = 'DEVICES',\n    GEOGRAPHY = 'GEOGRAPHY',\n    RETENTION = 'RETENTION',\n    REPLAY = 'REPLAY',\n    ERROR_TRACKING = 'ERROR_TRACKING',\n    GOALS = 'GOALS',\n    WEB_VITALS = 'WEB_VITALS',\n    WEB_VITALS_PATH_BREAKDOWN = 'WEB_VITALS_PATH_BREAKDOWN',\n}\n\nexport enum ProductTab {\n    ANALYTICS = 'analytics',\n    WEB_VITALS = 'web-vitals',\n    SESSION_ATTRIBUTION_EXPLORER = 'session-attribution-explorer',\n}\n\nexport type WebVitalsPercentile = PropertyMathType.P75 | PropertyMathType.P90 | PropertyMathType.P99\n\nconst loadPriorityMap: Record<TileId, number> = {\n    [TileId.OVERVIEW]: 1,\n    [TileId.GRAPHS]: 2,\n    [TileId.PATHS]: 3,\n    [TileId.SOURCES]: 4,\n    [TileId.DEVICES]: 5,\n    [TileId.GEOGRAPHY]: 6,\n    [TileId.RETENTION]: 7,\n    [TileId.REPLAY]: 8,\n    [TileId.ERROR_TRACKING]: 9,\n    [TileId.GOALS]: 10,\n    [TileId.WEB_VITALS]: 11,\n    [TileId.WEB_VITALS_PATH_BREAKDOWN]: 12,\n}\n\nexport interface BaseTile {\n    tileId: TileId\n    layout: WebTileLayout\n    docs?: Docs\n}\n\nexport interface Docs {\n    url?: PostHogComDocsURL\n    title: string\n    description: string | JSX.Element\n}\n\nexport interface QueryTile extends BaseTile {\n    kind: 'query'\n    title?: string\n    query: QuerySchema\n    showIntervalSelect?: boolean\n    control?: JSX.Element\n    insightProps: InsightLogicProps\n    canOpenModal?: boolean\n    canOpenInsight?: boolean\n}\n\nexport interface TabsTileTab {\n    id: string\n    title: string\n    linkText: string\n    query: QuerySchema\n    showIntervalSelect?: boolean\n    control?: JSX.Element\n    insightProps: InsightLogicProps\n    canOpenModal?: boolean\n    canOpenInsight?: boolean\n    docs?: Docs\n}\n\nexport interface TabsTile extends BaseTile {\n    kind: 'tabs'\n    activeTabId: string\n    setTabId: (id: string) => void\n    tabs: TabsTileTab[]\n}\n\nexport interface ReplayTile extends BaseTile {\n    kind: 'replay'\n}\n\nexport interface ErrorTrackingTile extends BaseTile {\n    kind: 'error_tracking'\n    query: QuerySchema\n}\n\nexport type WebAnalyticsTile = QueryTile | TabsTile | ReplayTile | ErrorTrackingTile\n\nexport interface WebAnalyticsModalQuery {\n    tileId: TileId\n    tabId?: string\n    title?: string\n    query: QuerySchema\n    insightProps: InsightLogicProps\n    showIntervalSelect?: boolean\n    control?: JSX.Element\n    canOpenInsight?: boolean\n}\n\nexport enum GraphsTab {\n    UNIQUE_USERS = 'UNIQUE_USERS',\n    PAGE_VIEWS = 'PAGE_VIEWS',\n    NUM_SESSION = 'NUM_SESSION',\n    UNIQUE_CONVERSIONS = 'UNIQUE_CONVERSIONS',\n    TOTAL_CONVERSIONS = 'TOTAL_CONVERSIONS',\n    CONVERSION_RATE = 'CONVERSION_RATE',\n    REVENUE_EVENTS = 'REVENUE_EVENTS',\n    CONVERSION_REVENUE = 'CONVERSION_REVENUE',\n}\n\nexport enum SourceTab {\n    CHANNEL = 'CHANNEL',\n    REFERRING_DOMAIN = 'REFERRING_DOMAIN',\n    UTM_SOURCE = 'UTM_SOURCE',\n    UTM_MEDIUM = 'UTM_MEDIUM',\n    UTM_CAMPAIGN = 'UTM_CAMPAIGN',\n    UTM_CONTENT = 'UTM_CONTENT',\n    UTM_TERM = 'UTM_TERM',\n    UTM_SOURCE_MEDIUM_CAMPAIGN = 'UTM_SOURCE_MEDIUM_CAMPAIGN',\n}\n\nexport enum DeviceTab {\n    BROWSER = 'BROWSER',\n    OS = 'OS',\n    DEVICE_TYPE = 'DEVICE_TYPE',\n    VIEWPORT = 'VIEWPORT',\n}\n\nexport enum PathTab {\n    PATH = 'PATH',\n    INITIAL_PATH = 'INITIAL_PATH',\n    END_PATH = 'END_PATH',\n    EXIT_CLICK = 'EXIT_CLICK',\n    SCREEN_NAME = 'SCREEN_NAME',\n}\n\nexport enum GeographyTab {\n    MAP = 'MAP',\n    COUNTRIES = 'COUNTRIES',\n    REGIONS = 'REGIONS',\n    CITIES = 'CITIES',\n    TIMEZONES = 'TIMEZONES',\n    LANGUAGES = 'LANGUAGES',\n}\n\nexport enum ConversionGoalWarning {\n    CustomEventWithNoSessionId = 'CustomEventWithNoSessionId',\n}\n\nexport interface WebAnalyticsStatusCheck {\n    isSendingWebVitals: boolean\n    isSendingPageViews: boolean\n    isSendingPageLeaves: boolean\n    isSendingPageLeavesScroll: boolean\n}\n\nconst GEOIP_TEMPLATE_IDS = ['template-geoip', 'plugin-posthog-plugin-geoip']\n\nexport const WEB_ANALYTICS_DATA_COLLECTION_NODE_ID = 'web-analytics'\n\nconst INITIAL_WEB_ANALYTICS_FILTER = [] as WebAnalyticsPropertyFilters\nconst INITIAL_DATE_FROM = '-7d' as string | null\nconst INITIAL_DATE_TO = null as string | null\nconst INITIAL_INTERVAL = getDefaultInterval(INITIAL_DATE_FROM, INITIAL_DATE_TO)\n\nconst getDashboardItemId = (section: TileId, tab: string | undefined, isModal?: boolean): `new-${string}` => {\n    // pretend to be a new-AdHoc to get the correct behaviour elsewhere\n    return `new-AdHoc.web-analytics.${section}.${tab || 'default'}.${isModal ? 'modal' : 'default'}`\n}\n\nconst teamId = window.POSTHOG_APP_CONTEXT?.current_team?.id\nconst persistConfig = { persist: true, prefix: `${teamId}__` }\nexport const webAnalyticsLogic = kea<webAnalyticsLogicType>([\n    path(['scenes', 'webAnalytics', 'webAnalyticsSceneLogic']),\n    connect(() => ({\n        values: [\n            featureFlagLogic,\n            ['featureFlags'],\n            teamLogic,\n            ['currentTeam'],\n            userLogic,\n            ['hasAvailableFeature'],\n            preflightLogic,\n            ['isDev'],\n        ],\n    })),\n    actions({\n        setWebAnalyticsFilters: (webAnalyticsFilters: WebAnalyticsPropertyFilters) => ({ webAnalyticsFilters }),\n        togglePropertyFilter: (\n            type: PropertyFilterType.Event | PropertyFilterType.Person | PropertyFilterType.Session,\n            key: string,\n            value: string | number | null,\n            tabChange?: {\n                graphsTab?: string\n                sourceTab?: string\n                deviceTab?: string\n                pathTab?: string\n                geographyTab?: string\n            }\n        ) => ({ type, key, value, tabChange }),\n        setGraphsTab: (tab: string) => ({ tab }),\n        setSourceTab: (tab: string) => ({ tab }),\n        setDeviceTab: (tab: string) => ({ tab }),\n        setPathTab: (tab: string) => ({ tab }),\n        setGeographyTab: (tab: string) => ({ tab }),\n        clearTablesOrderBy: () => true,\n        setTablesOrderBy: (orderBy: WebAnalyticsOrderByFields, direction: WebAnalyticsOrderByDirection) => ({\n            orderBy,\n            direction,\n        }),\n        setDates: (dateFrom: string | null, dateTo: string | null) => ({ dateFrom, dateTo }),\n        setInterval: (interval: IntervalType) => ({ interval }),\n        setDatesAndInterval: (dateFrom: string | null, dateTo: string | null, interval: IntervalType) => ({\n            dateFrom,\n            dateTo,\n            interval,\n        }),\n        setIsPathCleaningEnabled: (isPathCleaningEnabled: boolean) => ({ isPathCleaningEnabled }),\n        setShouldFilterTestAccounts: (shouldFilterTestAccounts: boolean) => ({ shouldFilterTestAccounts }),\n        setShouldStripQueryParams: (shouldStripQueryParams: boolean) => ({ shouldStripQueryParams }),\n        setConversionGoal: (conversionGoal: WebAnalyticsConversionGoal | null) => ({ conversionGoal }),\n        openModal: (tileId: TileId, tabId?: string) => ({ tileId, tabId }),\n        closeModal: () => true,\n        openAsNewInsight: (tileId: TileId, tabId?: string) => ({ tileId, tabId }),\n        setConversionGoalWarning: (warning: ConversionGoalWarning | null) => ({ warning }),\n        setCompareFilter: (compareFilter: CompareFilter) => ({ compareFilter }),\n        setProductTab: (tab: ProductTab) => ({ tab }),\n        setWebVitalsPercentile: (percentile: WebVitalsPercentile) => ({ percentile }),\n        setWebVitalsTab: (tab: WebVitalsMetric) => ({ tab }),\n    }),\n    reducers({\n        _webAnalyticsFilters: [\n            INITIAL_WEB_ANALYTICS_FILTER,\n            persistConfig,\n            {\n                setWebAnalyticsFilters: (_, { webAnalyticsFilters }) => webAnalyticsFilters,\n                togglePropertyFilter: (oldPropertyFilters, { key, value, type }): WebAnalyticsPropertyFilters => {\n                    if (value === null) {\n                        // if there's already an isNotSet filter, remove it\n                        const isNotSetFilterExists = oldPropertyFilters.some(\n                            (f) => f.type === type || f.key === key || f.operator === PropertyOperator.IsNotSet\n                        )\n                        if (isNotSetFilterExists) {\n                            return oldPropertyFilters.filter(\n                                (f) => f.type !== type || f.key !== key || f.operator !== PropertyOperator.IsNotSet\n                            )\n                        }\n                        return [\n                            ...oldPropertyFilters,\n                            {\n                                type,\n                                key,\n                                operator: PropertyOperator.IsNotSet,\n                            },\n                        ]\n                    }\n                    const similarFilterExists = oldPropertyFilters.some(\n                        (f) => f.type === type && f.key === key && f.operator === PropertyOperator.Exact\n                    )\n                    if (similarFilterExists) {\n                        // if there's already a matching property, turn it off or merge them\n                        return oldPropertyFilters\n                            .map((f) => {\n                                if (\n                                    f.key !== key ||\n                                    f.type !== type ||\n                                    ![PropertyOperator.Exact, PropertyOperator.IsNotSet].includes(f.operator)\n                                ) {\n                                    return f\n                                }\n                                const oldValue = (Array.isArray(f.value) ? f.value : [f.value]).filter(isNotNil)\n                                let newValue: (string | number | bigint)[]\n                                if (oldValue.includes(value)) {\n                                    // If there are multiple values for this filter, reduce that to just the one being clicked\n                                    if (oldValue.length > 1) {\n                                        newValue = [value]\n                                    } else {\n                                        return null\n                                    }\n                                } else {\n                                    newValue = [...oldValue, value]\n                                }\n                                return {\n                                    type: PropertyFilterType.Event,\n                                    key,\n                                    operator: PropertyOperator.Exact,\n                                    value: newValue,\n                                } as const\n                            })\n                            .filter(isNotNil)\n                    }\n                    // no matching property, so add one\n                    const newFilter: WebAnalyticsPropertyFilter = {\n                        type,\n                        key,\n                        value,\n                        operator: PropertyOperator.Exact,\n                    }\n\n                    return [...oldPropertyFilters, newFilter]\n                },\n            },\n        ],\n        _graphsTab: [\n            null as string | null,\n            persistConfig,\n            {\n                setGraphsTab: (_, { tab }) => tab,\n                togglePropertyFilter: (oldTab, { tabChange }) => tabChange?.graphsTab || oldTab,\n                setConversionGoal: (oldTab, { conversionGoal }) => {\n                    if (conversionGoal) {\n                        return GraphsTab.UNIQUE_CONVERSIONS\n                    }\n                    return oldTab\n                },\n            },\n        ],\n        _sourceTab: [\n            null as string | null,\n            persistConfig,\n            {\n                setSourceTab: (_, { tab }) => tab,\n                togglePropertyFilter: (oldTab, { tabChange }) => tabChange?.sourceTab || oldTab,\n            },\n        ],\n        _deviceTab: [\n            null as string | null,\n            persistConfig,\n            {\n                setDeviceTab: (_, { tab }) => tab,\n                togglePropertyFilter: (oldTab, { tabChange }) => tabChange?.deviceTab || oldTab,\n            },\n        ],\n        _pathTab: [\n            null as string | null,\n            persistConfig,\n            {\n                setPathTab: (_, { tab }) => tab,\n                togglePropertyFilter: (oldTab, { tabChange }) => tabChange?.pathTab || oldTab,\n            },\n        ],\n        _geographyTab: [\n            null as string | null,\n            persistConfig,\n            {\n                setGeographyTab: (_, { tab }) => tab,\n                togglePropertyFilter: (oldTab, { tabChange }) => tabChange?.geographyTab || oldTab,\n            },\n        ],\n        _isPathCleaningEnabled: [\n            true as boolean,\n            persistConfig,\n            {\n                setIsPathCleaningEnabled: (_, { isPathCleaningEnabled }) => isPathCleaningEnabled,\n            },\n        ],\n        _modalTileAndTab: [\n            null as { tileId: TileId; tabId?: string } | null,\n            {\n                openModal: (_, { tileId, tabId }) => ({\n                    tileId,\n                    tabId,\n                }),\n                closeModal: () => null,\n            },\n        ],\n        tablesOrderBy: [\n            null as WebAnalyticsOrderBy | null,\n            persistConfig,\n            {\n                setTablesOrderBy: (_, { orderBy, direction }) => [orderBy, direction],\n                clearTablesOrderBy: () => null,\n\n                // Reset the order by when the conversion goal changes because most of the columns are different\n                setConversionGoal: () => null,\n            },\n        ],\n        dateFilter: [\n            {\n                dateFrom: INITIAL_DATE_FROM,\n                dateTo: INITIAL_DATE_TO,\n                interval: INITIAL_INTERVAL,\n            },\n            persistConfig,\n            {\n                setDates: (_, { dateTo, dateFrom }) => ({\n                    dateTo,\n                    dateFrom,\n                    interval: getDefaultInterval(dateFrom, dateTo),\n                }),\n                setInterval: ({ dateFrom: oldDateFrom, dateTo: oldDateTo }, { interval }) => {\n                    const { dateFrom, dateTo } = updateDatesWithInterval(interval, oldDateFrom, oldDateTo)\n                    return {\n                        dateTo,\n                        dateFrom,\n                        interval,\n                    }\n                },\n                setDatesAndInterval: (_, { dateTo, dateFrom, interval }) => {\n                    if (!dateFrom && !dateTo) {\n                        dateFrom = INITIAL_DATE_FROM\n                        dateTo = INITIAL_DATE_TO\n                    }\n                    return {\n                        dateTo,\n                        dateFrom,\n                        interval: interval || getDefaultInterval(dateFrom, dateTo),\n                    }\n                },\n            },\n        ],\n        shouldFilterTestAccounts: [\n            false as boolean,\n            persistConfig,\n            {\n                setShouldFilterTestAccounts: (_, { shouldFilterTestAccounts }) => shouldFilterTestAccounts,\n            },\n        ],\n        shouldStripQueryParams: [\n            false as boolean,\n            persistConfig,\n            {\n                setShouldStripQueryParams: (_, { shouldStripQueryParams }) => shouldStripQueryParams,\n            },\n        ],\n        conversionGoal: [\n            null as WebAnalyticsConversionGoal | null,\n            persistConfig,\n            {\n                setConversionGoal: (_, { conversionGoal }) => conversionGoal,\n            },\n        ],\n        conversionGoalWarning: [\n            null as ConversionGoalWarning | null,\n            {\n                setConversionGoalWarning: (_, { warning }) => warning,\n            },\n        ],\n        compareFilter: [\n            { compare: true } as CompareFilter,\n            persistConfig,\n            {\n                setCompareFilter: (_, { compareFilter }) => compareFilter,\n            },\n        ],\n        productTab: [\n            ProductTab.ANALYTICS as ProductTab,\n            {\n                setProductTab: (_, { tab }) => tab,\n            },\n        ],\n        webVitalsPercentile: [\n            PropertyMathType.P90 as WebVitalsPercentile,\n            persistConfig,\n            {\n                setWebVitalsPercentile: (_, { percentile }) => percentile,\n            },\n        ],\n        webVitalsTab: [\n            'INP' as WebVitalsMetric,\n            {\n                setWebVitalsTab: (_, { tab }) => tab,\n            },\n        ],\n    }),\n    selectors(({ actions, values }) => ({\n        breadcrumbs: [\n            (s) => [s.productTab],\n            (productTab: ProductTab): Breadcrumb[] => {\n                const breadcrumbs: Breadcrumb[] = [\n                    {\n                        key: Scene.WebAnalytics,\n                        name: `Web analytics`,\n                        path: urls.webAnalytics(),\n                    },\n                ]\n\n                if (productTab === ProductTab.WEB_VITALS) {\n                    breadcrumbs.push({\n                        key: Scene.WebAnalyticsWebVitals,\n                        name: `Web vitals`,\n                        path: urls.webAnalyticsWebVitals(),\n                    })\n                }\n\n                return breadcrumbs\n            },\n        ],\n        graphsTab: [(s) => [s._graphsTab], (graphsTab: string | null) => graphsTab || GraphsTab.UNIQUE_USERS],\n        sourceTab: [(s) => [s._sourceTab], (sourceTab: string | null) => sourceTab || SourceTab.CHANNEL],\n        deviceTab: [(s) => [s._deviceTab], (deviceTab: string | null) => deviceTab || DeviceTab.DEVICE_TYPE],\n        pathTab: [(s) => [s._pathTab], (pathTab: string | null) => pathTab || PathTab.PATH],\n        geographyTab: [(s) => [s._geographyTab], (geographyTab: string | null) => geographyTab || GeographyTab.MAP],\n        isPathCleaningEnabled: [\n            (s) => [s._isPathCleaningEnabled, s.hasAvailableFeature],\n            (isPathCleaningEnabled, hasAvailableFeature) =>\n                hasAvailableFeature(AvailableFeature.PATHS_ADVANCED) && isPathCleaningEnabled,\n        ],\n        webAnalyticsFilters: [\n            (s) => [s._webAnalyticsFilters, s.isPathCleaningEnabled, () => values.featureFlags],\n            (webAnalyticsFilters: WebAnalyticsPropertyFilters, isPathCleaningEnabled: boolean, featureFlags) => {\n                if (!featureFlags[FEATURE_FLAGS.WEB_ANALYTICS_IMPROVED_PATH_CLEANING] || !isPathCleaningEnabled) {\n                    return webAnalyticsFilters\n                }\n\n                // Translate exact path filters to cleaned path filters\n                return webAnalyticsFilters.map((filter) => ({\n                    ...filter,\n                    operator:\n                        filter.operator === PropertyOperator.Exact\n                            ? PropertyOperator.IsCleanedPathExact\n                            : filter.operator,\n                }))\n            },\n        ],\n        tabs: [\n            (s) => [\n                s.graphsTab,\n                s.sourceTab,\n                s.deviceTab,\n                s.pathTab,\n                s.geographyTab,\n                () => values.shouldShowGeographyTile,\n            ],\n            (graphsTab, sourceTab, deviceTab, pathTab, geographyTab, shouldShowGeographyTile) => ({\n                graphsTab,\n                sourceTab,\n                deviceTab,\n                pathTab,\n                geographyTab,\n                shouldShowGeographyTile,\n            }),\n        ],\n        controls: [\n            (s) => [s.isPathCleaningEnabled, s.shouldFilterTestAccounts, s.shouldStripQueryParams],\n            (isPathCleaningEnabled, filterTestAccounts, shouldStripQueryParams) => ({\n                isPathCleaningEnabled,\n                filterTestAccounts,\n                shouldStripQueryParams,\n            }),\n        ],\n        filters: [\n            (s) => [\n                s.webAnalyticsFilters,\n                s.replayFilters,\n                s.dateFilter,\n                s.compareFilter,\n                s.webVitalsTab,\n                s.webVitalsPercentile,\n                s.tablesOrderBy,\n                () => values.conversionGoal,\n            ],\n            (\n                webAnalyticsFilters,\n                replayFilters,\n                dateFilter,\n                compareFilter,\n                webVitalsTab,\n                webVitalsPercentile,\n                tablesOrderBy,\n                conversionGoal\n            ) => ({\n                webAnalyticsFilters,\n                replayFilters,\n                dateFilter,\n                compareFilter,\n                webVitalsTab,\n                webVitalsPercentile,\n                tablesOrderBy,\n                conversionGoal,\n            }),\n        ],\n        tiles: [\n            (s) => [\n                s.productTab,\n                s.tabs,\n                s.controls,\n                s.filters,\n                () => values.featureFlags,\n                () => values.isGreaterThanMd,\n                () => values.currentTeam,\n            ],\n            (\n                productTab,\n                { graphsTab, sourceTab, deviceTab, pathTab, geographyTab, shouldShowGeographyTile },\n                { isPathCleaningEnabled, filterTestAccounts, shouldStripQueryParams },\n                {\n                    webAnalyticsFilters,\n                    replayFilters,\n                    dateFilter: { dateFrom, dateTo, interval },\n                    conversionGoal,\n                    compareFilter,\n                    webVitalsPercentile,\n                    webVitalsTab,\n                    tablesOrderBy,\n                },\n                featureFlags,\n                isGreaterThanMd,\n                currentTeam\n            ): WebAnalyticsTile[] => {\n                const dateRange = { date_from: dateFrom, date_to: dateTo }\n                const sampling = { enabled: false, forceSamplingRate: { numerator: 1, denominator: 10 } }\n\n                const uniqueUserSeries: EventsNode = {\n                    event: featureFlags[FEATURE_FLAGS.WEB_ANALYTICS_FOR_MOBILE] ? '$screen' : '$pageview',\n                    kind: NodeKind.EventsNode,\n                    math: BaseMathType.UniqueUsers,\n                    name: 'Pageview',\n                    custom_name: 'Unique visitors',\n                }\n\n                const pageViewsSeries = {\n                    ...uniqueUserSeries,\n                    math: BaseMathType.TotalCount,\n                    custom_name: featureFlags[FEATURE_FLAGS.WEB_ANALYTICS_FOR_MOBILE] ? 'Screen Views' : 'Page views',\n                }\n\n                const sessionsSeries = {\n                    ...uniqueUserSeries,\n                    math: BaseMathType.UniqueSessions,\n                    custom_name: 'Sessions',\n                }\n\n                const uniqueConversionsSeries: ActionsNode | EventsNode | undefined = !conversionGoal\n                    ? undefined\n                    : 'actionId' in conversionGoal\n                    ? {\n                          kind: NodeKind.ActionsNode,\n                          id: conversionGoal.actionId,\n                          math: BaseMathType.UniqueUsers,\n                          name: 'Unique conversions',\n                          custom_name: 'Unique conversions',\n                      }\n                    : {\n                          kind: NodeKind.EventsNode,\n                          event: conversionGoal.customEventName,\n                          math: BaseMathType.UniqueUsers,\n                          name: 'Unique conversions',\n                          custom_name: 'Unique conversions',\n                      }\n                const totalConversionSeries = uniqueConversionsSeries\n                    ? {\n                          ...uniqueConversionsSeries,\n                          math: BaseMathType.TotalCount,\n                          name: 'Total conversions',\n                          custom_name: 'Total conversions',\n                      }\n                    : undefined\n\n                // the queries don't currently include revenue when the conversion goal is an action\n                const includeRevenue =\n                    !!featureFlags[FEATURE_FLAGS.WEB_REVENUE_TRACKING] &&\n                    !(conversionGoal && 'actionId' in conversionGoal)\n\n                const revenueEventsSeries: EventsNode[] =\n                    includeRevenue && currentTeam?.revenue_tracking_config\n                        ? currentTeam.revenue_tracking_config.events.map((e) => ({\n                              math: PropertyMathType.Sum,\n                              name: e.eventName,\n                              event: e.eventName,\n                              kind: NodeKind.EventsNode,\n                              custom_name: e.eventName,\n                              math_property: e.revenueProperty,\n                          }))\n                        : []\n\n                const conversionRevenueSeries =\n                    conversionGoal && 'customEventName' in conversionGoal && includeRevenue\n                        ? revenueEventsSeries.filter((e) => e.event === conversionGoal.customEventName)\n                        : []\n\n                const createInsightProps = (tile: TileId, tab?: string): InsightLogicProps => {\n                    return {\n                        dashboardItemId: getDashboardItemId(tile, tab, false),\n                        loadPriority: loadPriorityMap[tile],\n                        dataNodeCollectionId: WEB_ANALYTICS_DATA_COLLECTION_NODE_ID,\n                    }\n                }\n\n                const createGraphsTrendsTab = (\n                    id: GraphsTab,\n                    title: string,\n                    linkText: string,\n                    series: AnyEntityNode[],\n                    trendsFilter?: Partial<TrendsFilter>,\n                    trendsQueryProperties?: Partial<TrendsQuery>\n                ): TabsTileTab => ({\n                    id,\n                    title,\n                    linkText,\n                    query: {\n                        kind: NodeKind.InsightVizNode,\n                        source: {\n                            kind: NodeKind.TrendsQuery,\n                            dateRange,\n                            interval,\n                            series: series,\n                            trendsFilter: {\n                                display: ChartDisplayType.ActionsLineGraph,\n                                ...trendsFilter,\n                            },\n                            compareFilter,\n                            filterTestAccounts,\n                            conversionGoal,\n                            properties: webAnalyticsFilters,\n                            ...trendsQueryProperties,\n                        },\n                        hidePersonsModal: true,\n                        embedded: true,\n                    },\n                    showIntervalSelect: true,\n                    insightProps: createInsightProps(TileId.GRAPHS, id),\n                    canOpenInsight: true,\n                })\n\n                const createTableTab = (\n                    tileId: TileId,\n                    tabId: string,\n                    title: string,\n                    linkText: string,\n                    breakdownBy: WebStatsBreakdown,\n                    source?: Partial<WebStatsTableQuery>,\n                    tab?: Partial<TabsTileTab>\n                ): TabsTileTab => {\n                    const columns = [\n                        'breakdown_value',\n                        'visitors',\n                        'views',\n                        source?.includeBounceRate ? 'bounce_rate' : null,\n                        'cross_sell',\n                    ].filter(isNotNil)\n\n                    return {\n                        id: tabId,\n                        title,\n                        linkText,\n                        query: {\n                            full: true,\n                            kind: NodeKind.DataTableNode,\n                            source: {\n                                kind: NodeKind.WebStatsTableQuery,\n                                properties: webAnalyticsFilters,\n                                breakdownBy: breakdownBy,\n                                dateRange,\n                                sampling,\n                                compareFilter,\n                                limit: 10,\n                                filterTestAccounts,\n                                conversionGoal,\n                                orderBy: tablesOrderBy ?? undefined,\n                                ...(source || {}),\n                            },\n                            embedded: false,\n                            showActions: true,\n                            columns,\n                        },\n                        insightProps: createInsightProps(tileId, tabId),\n                        canOpenModal: true,\n                        ...(tab || {}),\n                    }\n                }\n\n                if (featureFlags[FEATURE_FLAGS.WEB_VITALS] && productTab === ProductTab.WEB_VITALS) {\n                    const createSeries = (name: WebVitalsMetric, math: PropertyMathType): AnyEntityNode => ({\n                        kind: NodeKind.EventsNode,\n                        event: '$web_vitals',\n                        name: '$web_vitals',\n                        custom_name: name,\n                        math: math,\n                        math_property: `$web_vitals_${name}_value`,\n                    })\n\n                    return [\n                        {\n                            kind: 'query',\n                            tileId: TileId.WEB_VITALS,\n                            layout: {\n                                colSpanClassName: 'md:col-span-full',\n                                orderWhenLargeClassName: 'xxl:order-0',\n                            },\n                            query: {\n                                kind: NodeKind.WebVitalsQuery,\n                                properties: webAnalyticsFilters,\n                                source: {\n                                    kind: NodeKind.TrendsQuery,\n                                    dateRange,\n                                    interval,\n                                    series: (['INP', 'LCP', 'CLS', 'FCP'] as WebVitalsMetric[]).flatMap((metric) =>\n                                        [PropertyMathType.P75, PropertyMathType.P90, PropertyMathType.P99].map((math) =>\n                                            createSeries(metric, math)\n                                        )\n                                    ),\n                                    trendsFilter: { display: ChartDisplayType.ActionsLineGraph },\n                                    compareFilter,\n                                    filterTestAccounts,\n                                    properties: webAnalyticsFilters,\n                                },\n                            },\n                            insightProps: {\n                                dashboardItemId: getDashboardItemId(TileId.WEB_VITALS, 'web-vitals-overview', false),\n                                loadPriority: loadPriorityMap[TileId.WEB_VITALS],\n                                dataNodeCollectionId: WEB_ANALYTICS_DATA_COLLECTION_NODE_ID,\n                            },\n                            showIntervalSelect: true,\n                        },\n                        {\n                            kind: 'query',\n                            tileId: TileId.WEB_VITALS_PATH_BREAKDOWN,\n                            layout: {\n                                colSpanClassName: 'md:col-span-full',\n                                orderWhenLargeClassName: 'xxl:order-0',\n                            },\n                            query: {\n                                kind: NodeKind.WebVitalsPathBreakdownQuery,\n                                dateRange,\n                                filterTestAccounts,\n                                properties: webAnalyticsFilters,\n                                percentile: webVitalsPercentile,\n                                metric: webVitalsTab,\n                                doPathCleaning: isPathCleaningEnabled,\n                                thresholds: [\n                                    WEB_VITALS_THRESHOLDS[webVitalsTab].good,\n                                    WEB_VITALS_THRESHOLDS[webVitalsTab].poor,\n                                ],\n                            },\n                            insightProps: {\n                                dashboardItemId: getDashboardItemId(\n                                    TileId.WEB_VITALS_PATH_BREAKDOWN,\n                                    'web-vitals-path-breakdown',\n                                    false\n                                ),\n                                loadPriority: loadPriorityMap[TileId.WEB_VITALS_PATH_BREAKDOWN],\n                                dataNodeCollectionId: WEB_ANALYTICS_DATA_COLLECTION_NODE_ID,\n                            },\n                        },\n                    ]\n                }\n\n                const allTiles: (WebAnalyticsTile | null)[] = [\n                    {\n                        kind: 'query',\n                        tileId: TileId.OVERVIEW,\n                        layout: {\n                            colSpanClassName: 'md:col-span-full',\n                            orderWhenLargeClassName: 'xxl:order-0',\n                        },\n                        query: {\n                            kind: NodeKind.WebOverviewQuery,\n                            properties: webAnalyticsFilters,\n                            dateRange,\n                            sampling,\n                            compareFilter,\n                            filterTestAccounts,\n                            conversionGoal,\n                            includeRevenue,\n                        },\n                        insightProps: createInsightProps(TileId.OVERVIEW),\n                    },\n                    {\n                        kind: 'tabs',\n                        tileId: TileId.GRAPHS,\n                        layout: {\n                            colSpanClassName: `md:col-span-2`,\n                            orderWhenLargeClassName: 'xxl:order-1',\n                        },\n                        activeTabId: graphsTab,\n                        setTabId: actions.setGraphsTab,\n                        tabs: (\n                            [\n                                createGraphsTrendsTab(GraphsTab.UNIQUE_USERS, 'Unique visitors', 'Visitors', [\n                                    uniqueUserSeries,\n                                ]),\n                                !conversionGoal\n                                    ? createGraphsTrendsTab(GraphsTab.PAGE_VIEWS, 'Page views', 'Views', [\n                                          pageViewsSeries,\n                                      ])\n                                    : null,\n                                !conversionGoal\n                                    ? createGraphsTrendsTab(GraphsTab.NUM_SESSION, 'Unique sessions', 'Sessions', [\n                                          sessionsSeries,\n                                      ])\n                                    : null,\n                                !conversionGoal && revenueEventsSeries?.length\n                                    ? createGraphsTrendsTab(\n                                          GraphsTab.REVENUE_EVENTS,\n                                          'Revenue',\n                                          'Revenue',\n                                          revenueEventsSeries,\n                                          {\n                                              display:\n                                                  revenueEventsSeries.length > 1\n                                                      ? ChartDisplayType.ActionsAreaGraph\n                                                      : ChartDisplayType.ActionsLineGraph,\n                                          },\n                                          {\n                                              compareFilter: revenueEventsSeries.length > 1 ? undefined : compareFilter,\n                                          }\n                                      )\n                                    : null,\n                                conversionGoal && uniqueConversionsSeries\n                                    ? createGraphsTrendsTab(\n                                          GraphsTab.UNIQUE_CONVERSIONS,\n                                          'Unique conversions',\n                                          'Unique conversions',\n                                          [uniqueConversionsSeries]\n                                      )\n                                    : null,\n                                conversionGoal && totalConversionSeries\n                                    ? createGraphsTrendsTab(\n                                          GraphsTab.TOTAL_CONVERSIONS,\n                                          'Total conversions',\n                                          'Total conversions',\n                                          [totalConversionSeries]\n                                      )\n                                    : null,\n                                conversionGoal && uniqueUserSeries && uniqueConversionsSeries\n                                    ? createGraphsTrendsTab(\n                                          GraphsTab.CONVERSION_RATE,\n                                          'Conversion rate',\n                                          'Conversion rate',\n                                          [uniqueConversionsSeries, uniqueUserSeries],\n                                          {\n                                              formula: 'A / B',\n                                              aggregationAxisFormat: 'percentage_scaled',\n                                          }\n                                      )\n                                    : null,\n                                conversionGoal && conversionRevenueSeries.length\n                                    ? createGraphsTrendsTab(\n                                          GraphsTab.CONVERSION_REVENUE,\n                                          'Conversion revenue',\n                                          'Conversion revenue',\n                                          conversionRevenueSeries\n                                      )\n                                    : null,\n                            ] as (TabsTileTab | null)[]\n                        ).filter(isNotNil),\n                    },\n                    {\n                        kind: 'tabs',\n                        tileId: TileId.PATHS,\n                        layout: {\n                            colSpanClassName: `md:col-span-2`,\n                            orderWhenLargeClassName: 'xxl:order-4',\n                        },\n                        activeTabId: pathTab,\n                        setTabId: actions.setPathTab,\n                        tabs: featureFlags[FEATURE_FLAGS.WEB_ANALYTICS_FOR_MOBILE]\n                            ? [\n                                  createTableTab(\n                                      TileId.PATHS,\n                                      PathTab.SCREEN_NAME,\n                                      'Screens',\n                                      'Screen',\n                                      WebStatsBreakdown.ScreenName,\n                                      {},\n                                      {}\n                                  ),\n                              ]\n                            : (\n                                  [\n                                      createTableTab(\n                                          TileId.PATHS,\n                                          PathTab.PATH,\n                                          'Paths',\n                                          'Path',\n                                          WebStatsBreakdown.Page,\n                                          {\n                                              includeScrollDepth: false, // TODO needs some perf work before it can be enabled\n                                              includeBounceRate: true,\n                                              doPathCleaning: isPathCleaningEnabled,\n                                          },\n                                          {\n                                              docs: {\n                                                  url: 'https://posthog.com/docs/web-analytics/dashboard#paths',\n                                                  title: 'Paths',\n                                                  description: (\n                                                      <div>\n                                                          <p>\n                                                              In this view you can validate all of the paths that were\n                                                              accessed in your application, regardless of when they were\n                                                              accessed through the lifetime of a user session.\n                                                          </p>\n                                                          {conversionGoal ? (\n                                                              <p>\n                                                                  The conversion rate is the percentage of users who\n                                                                  completed the conversion goal in this specific path.\n                                                              </p>\n                                                          ) : (\n                                                              <p>\n                                                                  The{' '}\n                                                                  <Link to=\"https://posthog.com/docs/web-analytics/dashboard#bounce-rate\">\n                                                                      bounce rate\n                                                                  </Link>{' '}\n                                                                  indicates the percentage of users who left your page\n                                                                  immediately after visiting without capturing any\n                                                                  event.\n                                                              </p>\n                                                          )}\n                                                      </div>\n                                                  ),\n                                              },\n                                          }\n                                      ),\n                                      createTableTab(\n                                          TileId.PATHS,\n                                          PathTab.INITIAL_PATH,\n                                          'Entry paths',\n                                          'Entry path',\n                                          WebStatsBreakdown.InitialPage,\n                                          {\n                                              includeBounceRate: true,\n                                              includeScrollDepth: false,\n                                              doPathCleaning: isPathCleaningEnabled,\n                                          },\n                                          {\n                                              docs: {\n                                                  url: 'https://posthog.com/docs/web-analytics/dashboard#paths',\n                                                  title: 'Entry Path',\n                                                  description: (\n                                                      <div>\n                                                          <p>\n                                                              Entry paths are the paths a user session started, i.e. the\n                                                              first path they saw when they opened your website.\n                                                          </p>\n                                                          {conversionGoal && (\n                                                              <p>\n                                                                  The conversion rate is the percentage of users who\n                                                                  completed the conversion goal after the first path in\n                                                                  their session being this path.\n                                                              </p>\n                                                          )}\n                                                      </div>\n                                                  ),\n                                              },\n                                          }\n                                      ),\n                                      createTableTab(\n                                          TileId.PATHS,\n                                          PathTab.END_PATH,\n                                          'End paths',\n                                          'End path',\n                                          WebStatsBreakdown.ExitPage,\n                                          {\n                                              includeBounceRate: false,\n                                              includeScrollDepth: false,\n                                              doPathCleaning: isPathCleaningEnabled,\n                                          },\n                                          {\n                                              docs: {\n                                                  url: 'https://posthog.com/docs/web-analytics/dashboard#paths',\n                                                  title: 'End Path',\n                                                  description: (\n                                                      <div>\n                                                          End paths are the last path a user visited before their\n                                                          session ended, i.e. the last path they saw before leaving your\n                                                          website/closing the browser/turning their computer off.\n                                                      </div>\n                                                  ),\n                                              },\n                                          }\n                                      ),\n                                      {\n                                          id: PathTab.EXIT_CLICK,\n                                          title: 'Outbound link clicks',\n                                          linkText: 'Outbound clicks',\n                                          query: {\n                                              full: true,\n                                              kind: NodeKind.DataTableNode,\n                                              source: {\n                                                  kind: NodeKind.WebExternalClicksTableQuery,\n                                                  properties: webAnalyticsFilters,\n                                                  dateRange,\n                                                  compareFilter,\n                                                  sampling,\n                                                  limit: 10,\n                                                  filterTestAccounts,\n                                                  conversionGoal,\n                                                  orderBy: tablesOrderBy ?? undefined,\n                                                  stripQueryParams: shouldStripQueryParams,\n                                              },\n                                              embedded: false,\n                                              showActions: true,\n                                              columns: ['url', 'visitors', 'clicks', 'cross_sell'],\n                                          },\n                                          insightProps: createInsightProps(TileId.PATHS, PathTab.END_PATH),\n                                          canOpenModal: true,\n                                          docs: {\n                                              title: 'Outbound Clicks',\n                                              description: (\n                                                  <div>\n                                                      You'll be able to verify when someone leaves your website by\n                                                      clicking an outbound link (to a separate domain)\n                                                  </div>\n                                              ),\n                                          },\n                                      },\n                                  ] as (TabsTileTab | undefined)[]\n                              ).filter(isNotNil),\n                    },\n                    {\n                        kind: 'tabs',\n                        tileId: TileId.SOURCES,\n                        layout: {\n                            colSpanClassName: `md:col-span-1`,\n                            orderWhenLargeClassName: 'xxl:order-2',\n                        },\n                        activeTabId: sourceTab,\n                        setTabId: actions.setSourceTab,\n                        tabs: [\n                            createTableTab(\n                                TileId.SOURCES,\n                                SourceTab.CHANNEL,\n                                'Channels',\n                                'Channel',\n                                WebStatsBreakdown.InitialChannelType,\n                                {},\n                                {\n                                    control: (\n                                        <div className=\"flex flex-row space-x-2 font-medium\">\n                                            <span>Customize channel types</span>\n                                            <LemonButton\n                                                icon={<IconGear />}\n                                                type=\"tertiary\"\n                                                status=\"alt\"\n                                                size=\"small\"\n                                                noPadding={true}\n                                                tooltip=\"Customize channel types\"\n                                                to={urls.settings('environment-web-analytics', 'channel-type')}\n                                            />\n                                        </div>\n                                    ),\n                                    docs: {\n                                        url: 'https://posthog.com/docs/data/channel-type',\n                                        title: 'Channels',\n                                        description: (\n                                            <div>\n                                                <p>\n                                                    Channels are the different sources that bring traffic to your\n                                                    website, e.g. Paid Search, Organic Social, Direct, etc.\n                                                </p>\n                                                <p>\n                                                    You can also{' '}\n                                                    <Link\n                                                        to={urls.settings('environment-web-analytics', 'channel-type')}\n                                                    >\n                                                        create custom channel types\n                                                    </Link>\n                                                    , allowing you to further categorize your channels.\n                                                </p>\n                                                <p>\n                                                    Something unexpected? Try the{' '}\n                                                    <Link to={urls.sessionAttributionExplorer()}>\n                                                        Session attribution explorer\n                                                    </Link>\n                                                </p>\n                                            </div>\n                                        ),\n                                    },\n                                }\n                            ),\n                            createTableTab(\n                                TileId.SOURCES,\n                                SourceTab.REFERRING_DOMAIN,\n                                'Referrers',\n                                'Referring domain',\n                                WebStatsBreakdown.InitialReferringDomain,\n                                {},\n                                {\n                                    docs: {\n                                        url: 'https://posthog.com/docs/web-analytics/dashboard#referrers-channels-utms',\n                                        title: 'Referrers',\n                                        description: 'Understand where your users are coming from',\n                                    },\n                                }\n                            ),\n                            createTableTab(\n                                TileId.SOURCES,\n                                SourceTab.UTM_SOURCE,\n                                'UTM sources',\n                                'UTM source',\n                                WebStatsBreakdown.InitialUTMSource,\n                                {},\n                                {\n                                    docs: {\n                                        url: 'https://posthog.com/docs/web-analytics/dashboard#utms',\n                                        title: 'UTM source',\n                                        description: (\n                                            <>\n                                                Understand where your users are coming from - filtered down by their{' '}\n                                                <code>utm_source</code> parameter\n                                            </>\n                                        ),\n                                    },\n                                }\n                            ),\n                            createTableTab(\n                                TileId.SOURCES,\n                                SourceTab.UTM_MEDIUM,\n                                'UTM medium',\n                                'UTM medium',\n                                WebStatsBreakdown.InitialUTMMedium,\n                                {},\n                                {\n                                    docs: {\n                                        url: 'https://posthog.com/docs/web-analytics/dashboard#utms',\n                                        title: 'UTM medium',\n                                        description: (\n                                            <>\n                                                Understand where your users are coming from - filtered down by their{' '}\n                                                <code>utm_medium</code> parameter\n                                            </>\n                                        ),\n                                    },\n                                }\n                            ),\n                            createTableTab(\n                                TileId.SOURCES,\n                                SourceTab.UTM_CAMPAIGN,\n                                'UTM campaigns',\n                                'UTM campaign',\n                                WebStatsBreakdown.InitialUTMCampaign,\n                                {},\n                                {\n                                    docs: {\n                                        url: 'https://posthog.com/docs/web-analytics/dashboard#utms',\n                                        title: 'UTM campaign',\n                                        description: (\n                                            <>\n                                                Understand where your users are coming from - filtered down by their{' '}\n                                                <code>utm_campaign</code> parameter\n                                            </>\n                                        ),\n                                    },\n                                }\n                            ),\n                            createTableTab(\n                                TileId.SOURCES,\n                                SourceTab.UTM_CONTENT,\n                                'UTM content',\n                                'UTM content',\n                                WebStatsBreakdown.InitialUTMContent,\n                                {},\n                                {\n                                    docs: {\n                                        url: 'https://posthog.com/docs/web-analytics/dashboard#utms',\n                                        title: 'UTM content',\n                                        description: (\n                                            <>\n                                                Understand where your users are coming from - filtered down by their{' '}\n                                                <code>utm_content</code> parameter\n                                            </>\n                                        ),\n                                    },\n                                }\n                            ),\n                            createTableTab(\n                                TileId.SOURCES,\n                                SourceTab.UTM_TERM,\n                                'UTM terms',\n                                'UTM term',\n                                WebStatsBreakdown.InitialUTMTerm,\n                                {},\n                                {\n                                    docs: {\n                                        url: 'https://posthog.com/docs/web-analytics/dashboard#utms',\n                                        title: 'UTM term',\n                                        description: (\n                                            <>\n                                                Understand where your users are coming from - filtered down by their{' '}\n                                                <code>utm_term</code> parameter\n                                            </>\n                                        ),\n                                    },\n                                }\n                            ),\n                            createTableTab(\n                                TileId.SOURCES,\n                                SourceTab.UTM_SOURCE_MEDIUM_CAMPAIGN,\n                                'Source / Medium / Campaign',\n                                'UTM s/m/c',\n                                WebStatsBreakdown.InitialUTMSourceMediumCampaign,\n                                {},\n                                {\n                                    docs: {\n                                        url: 'https://posthog.com/docs/web-analytics/dashboard#utms',\n                                        title: 'UTM parameters',\n                                        description: (\n                                            <>\n                                                Understand where your users are coming from - filtered down by a tuple\n                                                of their <code>utm_source</code>, <code>utm_medium</code>, and{' '}\n                                                <code>utm_campaign</code> parameters\n                                            </>\n                                        ),\n                                    },\n                                }\n                            ),\n                        ],\n                    },\n                    {\n                        kind: 'tabs',\n                        tileId: TileId.DEVICES,\n                        layout: {\n                            colSpanClassName: `md:col-span-1`,\n                            orderWhenLargeClassName: 'xxl:order-3',\n                        },\n                        activeTabId: deviceTab,\n                        setTabId: actions.setDeviceTab,\n                        tabs: [\n                            createTableTab(\n                                TileId.DEVICES,\n                                DeviceTab.DEVICE_TYPE,\n                                'Device type',\n                                'Device type',\n                                WebStatsBreakdown.DeviceType\n                            ),\n                            createTableTab(\n                                TileId.DEVICES,\n                                DeviceTab.BROWSER,\n                                'Browsers',\n                                'Browser',\n                                WebStatsBreakdown.Browser\n                            ),\n                            createTableTab(TileId.DEVICES, DeviceTab.OS, 'OS', 'OS', WebStatsBreakdown.OS),\n                            createTableTab(\n                                TileId.DEVICES,\n                                DeviceTab.VIEWPORT,\n                                'Viewports',\n                                'Viewport',\n                                WebStatsBreakdown.Viewport\n                            ),\n                        ],\n                    },\n                    shouldShowGeographyTile\n                        ? {\n                              kind: 'tabs',\n                              tileId: TileId.GEOGRAPHY,\n                              layout: {\n                                  colSpanClassName: 'md:col-span-full',\n                              },\n                              activeTabId: geographyTab || GeographyTab.MAP,\n                              setTabId: actions.setGeographyTab,\n                              tabs: [\n                                  {\n                                      id: GeographyTab.MAP,\n                                      title: 'World map',\n                                      linkText: 'Map',\n                                      query: {\n                                          kind: NodeKind.InsightVizNode,\n                                          source: {\n                                              kind: NodeKind.TrendsQuery,\n                                              breakdownFilter: {\n                                                  // use the event level country code rather than person, to work better with personless users\n                                                  breakdown: '$geoip_country_code',\n                                                  breakdown_type: 'event',\n                                              },\n                                              dateRange,\n                                              series: [\n                                                  {\n                                                      event: '$pageview',\n                                                      name: 'Pageview',\n                                                      kind: NodeKind.EventsNode,\n                                                      math: BaseMathType.UniqueUsers,\n                                                  },\n                                              ],\n                                              trendsFilter: {\n                                                  display: ChartDisplayType.WorldMap,\n                                              },\n                                              conversionGoal,\n                                              filterTestAccounts,\n                                              properties: webAnalyticsFilters,\n                                          },\n                                          hidePersonsModal: true,\n                                          embedded: true,\n                                      },\n                                      insightProps: createInsightProps(TileId.GEOGRAPHY, GeographyTab.MAP),\n                                      canOpenInsight: true,\n                                  },\n                                  createTableTab(\n                                      TileId.GEOGRAPHY,\n                                      GeographyTab.COUNTRIES,\n                                      'Countries',\n                                      'Countries',\n                                      WebStatsBreakdown.Country\n                                  ),\n                                  createTableTab(\n                                      TileId.GEOGRAPHY,\n                                      GeographyTab.REGIONS,\n                                      'Regions',\n                                      'Regions',\n                                      WebStatsBreakdown.Region\n                                  ),\n                                  createTableTab(\n                                      TileId.GEOGRAPHY,\n                                      GeographyTab.CITIES,\n                                      'Cities',\n                                      'Cities',\n                                      WebStatsBreakdown.City\n                                  ),\n                                  createTableTab(\n                                      TileId.GEOGRAPHY,\n                                      GeographyTab.TIMEZONES,\n                                      'Timezones',\n                                      'Timezones',\n                                      WebStatsBreakdown.Timezone\n                                  ),\n                                  createTableTab(\n                                      TileId.GEOGRAPHY,\n                                      GeographyTab.LANGUAGES,\n                                      'Languages',\n                                      'Languages',\n                                      WebStatsBreakdown.Language\n                                  ),\n                              ],\n                          }\n                        : null,\n                    !conversionGoal\n                        ? {\n                              kind: 'query',\n                              tileId: TileId.RETENTION,\n                              title: 'Retention',\n                              layout: {\n                                  colSpanClassName: 'md:col-span-2',\n                              },\n                              query: {\n                                  kind: NodeKind.InsightVizNode,\n                                  source: {\n                                      kind: NodeKind.RetentionQuery,\n                                      properties: webAnalyticsFilters,\n                                      dateRange,\n                                      filterTestAccounts,\n                                      retentionFilter: {\n                                          retentionType: RETENTION_FIRST_TIME,\n                                          retentionReference: 'total',\n                                          totalIntervals: isGreaterThanMd ? 8 : 5,\n                                          period: RetentionPeriod.Week,\n                                      },\n                                  },\n                                  vizSpecificOptions: {\n                                      [InsightType.RETENTION]: {\n                                          hideLineGraph: true,\n                                          hideSizeColumn: !isGreaterThanMd,\n                                          useSmallLayout: !isGreaterThanMd,\n                                      },\n                                  },\n                                  embedded: true,\n                              },\n                              insightProps: createInsightProps(TileId.RETENTION),\n                              canOpenInsight: false,\n                              canOpenModal: true,\n                              docs: {\n                                  url: 'https://posthog.com/docs/web-analytics/dashboard#retention',\n                                  title: 'Retention',\n                                  description: (\n                                      <>\n                                          <div>\n                                              <p>\n                                                  Retention creates a cohort of unique users who performed any event for\n                                                  the first time in the last week. It then tracks the percentage of\n                                                  users who return to perform any event in the following weeks.\n                                              </p>\n                                              <p>\n                                                  You want the numbers to be the highest possible, suggesting that\n                                                  people that come to your page continue coming to your page - and\n                                                  performing an actions. Also, the further down the table the higher the\n                                                  numbers should be (or at least as high), which would indicate that\n                                                  you're either increasing or keeping your retention at the same level.\n                                              </p>\n                                          </div>\n                                      </>\n                                  ),\n                              },\n                          }\n                        : null,\n                    // Hiding if conversionGoal is set already because values aren't representative\n                    !conversionGoal\n                        ? {\n                              kind: 'query',\n                              tileId: TileId.GOALS,\n                              title: 'Goals',\n                              layout: {\n                                  colSpanClassName: 'md:col-span-2',\n                              },\n                              query: {\n                                  full: true,\n                                  kind: NodeKind.DataTableNode,\n                                  source: {\n                                      kind: NodeKind.WebGoalsQuery,\n                                      properties: webAnalyticsFilters,\n                                      dateRange,\n                                      compareFilter,\n                                      sampling,\n                                      limit: 10,\n                                      orderBy: tablesOrderBy ?? undefined,\n                                      filterTestAccounts,\n                                  },\n                                  embedded: true,\n                                  showActions: true,\n                                  columns: ['breakdown_value', 'visitors', 'views', 'cross_sell'],\n                              },\n                              insightProps: createInsightProps(TileId.GOALS),\n                              canOpenInsight: false,\n                              docs: {\n                                  url: 'https://posthog.com/docs/web-analytics/dashboard#goals',\n                                  title: 'Goals',\n                                  description: (\n                                      <>\n                                          <div>\n                                              <p>\n                                                  Goals shows your pinned or most recently created actions and the\n                                                  number of conversions they've had. You can set a custom event or\n                                                  action as a{' '}\n                                                  <Link to=\"https://posthog.com/docs/web-analytics/conversion-goals\">\n                                                      conversion goal\n                                                  </Link>{' '}\n                                                  at the top of the dashboard for more specific metrics.\n                                              </p>\n                                          </div>\n                                      </>\n                                  ),\n                              },\n                          }\n                        : null,\n                    !conversionGoal\n                        ? {\n                              kind: 'replay',\n                              tileId: TileId.REPLAY,\n                              layout: {\n                                  colSpanClassName: conversionGoal ? 'md:col-span-full' : 'md:col-span-1',\n                              },\n                              docs: {\n                                  url: 'https://posthog.com/docs/session-replay',\n                                  title: 'Session Replay',\n                                  description:\n                                      'Play back sessions to diagnose UI issues, improve support, and get context for nuanced user behavior.',\n                              },\n                          }\n                        : null,\n                    !conversionGoal && featureFlags[FEATURE_FLAGS.ERROR_TRACKING]\n                        ? {\n                              kind: 'error_tracking',\n                              tileId: TileId.ERROR_TRACKING,\n                              layout: {\n                                  colSpanClassName: 'md:col-span-1',\n                              },\n                              query: errorTrackingQuery({\n                                  orderBy: 'users',\n                                  dateRange: dateRange,\n                                  filterTestAccounts: filterTestAccounts,\n                                  filterGroup: replayFilters.filter_group,\n                                  columns: ['error', 'users', 'occurrences'],\n                                  limit: 4,\n                              }),\n                              docs: {\n                                  url: 'https://posthog.com/docs/error-tracking',\n                                  title: 'Error Tracking',\n                                  description: (\n                                      <>\n                                          <div>\n                                              <p>\n                                                  Error tracking allows you to track, investigate, and resolve\n                                                  exceptions your customers face.\n                                              </p>\n                                              <p>\n                                                  Errors are captured as <code>$exception</code> events which means that\n                                                  you can create insights, filter recordings and trigger surveys based\n                                                  on them exactly the same way you can for any other type of event.\n                                              </p>\n                                          </div>\n                                      </>\n                                  ),\n                              },\n                          }\n                        : null,\n                ]\n                return allTiles.filter(isNotNil)\n            },\n        ],\n        modal: [\n            (s) => [s.tiles, s._modalTileAndTab],\n            (tiles, modalTileAndTab): WebAnalyticsModalQuery | null => {\n                if (!modalTileAndTab) {\n                    return null\n                }\n                const { tileId, tabId } = modalTileAndTab\n                const tile: WebAnalyticsTile | undefined = tiles.find((tile) => tile.tileId === tileId)\n                if (!tile) {\n                    return null\n                }\n\n                const extendQuery = (query: QuerySchema): QuerySchema => {\n                    if (\n                        query.kind === NodeKind.DataTableNode &&\n                        (query.source.kind === NodeKind.WebStatsTableQuery ||\n                            query.source.kind === NodeKind.WebExternalClicksTableQuery ||\n                            query.source.kind === NodeKind.WebGoalsQuery)\n                    ) {\n                        return {\n                            ...query,\n                            source: {\n                                ...query.source,\n                                limit: 50,\n                            },\n                        }\n                    }\n                    return query\n                }\n\n                if (tile.kind === 'tabs') {\n                    const tab = tile.tabs.find((tab) => tab.id === tabId)\n                    if (!tab) {\n                        return null\n                    }\n                    return {\n                        tileId,\n                        tabId,\n                        title: tab.title,\n                        showIntervalSelect: tab.showIntervalSelect,\n                        control: tab.control,\n                        insightProps: {\n                            dashboardItemId: getDashboardItemId(tileId, tabId, true),\n                            loadPriority: 0,\n                            doNotLoad: false,\n                            dataNodeCollectionId: WEB_ANALYTICS_DATA_COLLECTION_NODE_ID,\n                        },\n                        query: extendQuery(tab.query),\n                        canOpenInsight: tab.canOpenInsight,\n                    }\n                } else if (tile.kind === 'query') {\n                    return {\n                        tileId,\n                        title: tile.title,\n                        showIntervalSelect: tile.showIntervalSelect,\n                        control: tile.control,\n                        insightProps: {\n                            dashboardItemId: getDashboardItemId(tileId, undefined, true),\n                            loadPriority: 0,\n                            dataNodeCollectionId: WEB_ANALYTICS_DATA_COLLECTION_NODE_ID,\n                        },\n                        query: extendQuery(tile.query),\n                    }\n                }\n                return null\n            },\n        ],\n        hasCountryFilter: [\n            (s) => [s.webAnalyticsFilters],\n            (webAnalyticsFilters: WebAnalyticsPropertyFilters) => {\n                return webAnalyticsFilters.some((filter) => filter.key === '$geoip_country_code')\n            },\n        ],\n        hasDeviceTypeFilter: [\n            (s) => [s.webAnalyticsFilters],\n            (webAnalyticsFilters: WebAnalyticsPropertyFilters) => {\n                return webAnalyticsFilters.some((filter) => filter.key === '$device_type')\n            },\n        ],\n        hasBrowserFilter: [\n            (s) => [s.webAnalyticsFilters],\n            (webAnalyticsFilters: WebAnalyticsPropertyFilters) => {\n                return webAnalyticsFilters.some((filter) => filter.key === '$browser')\n            },\n        ],\n        hasOSFilter: [\n            (s) => [s.webAnalyticsFilters],\n            (webAnalyticsFilters: WebAnalyticsPropertyFilters) => {\n                return webAnalyticsFilters.some((filter) => filter.key === '$os')\n            },\n        ],\n        replayFilters: [\n            (s) => [s.webAnalyticsFilters, s.dateFilter, s.shouldFilterTestAccounts, s.conversionGoal],\n            (\n                webAnalyticsFilters: WebAnalyticsPropertyFilters,\n                dateFilter,\n                shouldFilterTestAccounts,\n                conversionGoal\n            ): RecordingUniversalFilters => {\n                const filters: UniversalFiltersGroupValue[] = [...webAnalyticsFilters]\n                if (conversionGoal) {\n                    if ('actionId' in conversionGoal) {\n                        filters.push({\n                            id: conversionGoal.actionId,\n                            name: String(conversionGoal.actionId),\n                            type: 'actions',\n                        })\n                    } else if ('customEventName' in conversionGoal) {\n                        filters.push({\n                            id: conversionGoal.customEventName,\n                            name: conversionGoal.customEventName,\n                            type: 'events',\n                        })\n                    }\n                }\n\n                return {\n                    filter_test_accounts: shouldFilterTestAccounts,\n\n                    date_from: dateFilter.dateFrom,\n                    date_to: dateFilter.dateTo,\n                    filter_group: {\n                        type: FilterLogicalOperator.And,\n                        values: [\n                            {\n                                type: FilterLogicalOperator.And,\n                                values: filters,\n                            },\n                        ],\n                    },\n                    duration: [\n                        {\n                            type: PropertyFilterType.Recording,\n                            key: 'active_seconds',\n                            operator: PropertyOperator.GreaterThan,\n                            value: 1,\n                        },\n                    ],\n                }\n            },\n        ],\n        webVitalsMetricQuery: [\n            (s) => [\n                s.webVitalsPercentile,\n                s.webVitalsTab,\n                s.dateFilter,\n                s.webAnalyticsFilters,\n                s.shouldFilterTestAccounts,\n            ],\n            (\n                webVitalsPercentile,\n                webVitalsTab,\n                { dateFrom, dateTo, interval },\n                webAnalyticsFilters,\n                filterTestAccounts\n            ): InsightVizNode<TrendsQuery> => ({\n                kind: NodeKind.InsightVizNode,\n                source: {\n                    kind: NodeKind.TrendsQuery,\n                    dateRange: {\n                        date_from: dateFrom,\n                        date_to: dateTo,\n                    },\n                    interval,\n                    series: [\n                        {\n                            kind: NodeKind.EventsNode,\n                            event: '$web_vitals',\n                            name: '$web_vitals',\n                            custom_name: webVitalsTab,\n                            math: webVitalsPercentile,\n                            math_property: `$web_vitals_${webVitalsTab}_value`,\n                        },\n                    ],\n                    trendsFilter: {\n                        display: ChartDisplayType.ActionsLineGraph,\n                        aggregationAxisFormat: webVitalsTab === 'CLS' ? 'numeric' : 'duration_ms',\n                        goalLines: [\n                            {\n                                label: 'Good',\n                                value: WEB_VITALS_THRESHOLDS[webVitalsTab].good,\n                                displayLabel: false,\n                                borderColor: WEB_VITALS_COLORS.good,\n                            },\n                            {\n                                label: 'Poor',\n                                value: WEB_VITALS_THRESHOLDS[webVitalsTab].poor,\n                                displayLabel: false,\n                                borderColor: WEB_VITALS_COLORS.needs_improvements,\n                            },\n                        ],\n                    } as TrendsFilter,\n                    filterTestAccounts,\n                    properties: webAnalyticsFilters,\n                },\n                embedded: false,\n            }),\n        ],\n        getNewInsightUrl: [\n            (s) => [s.tiles],\n            (tiles) => {\n                return function getNewInsightUrl(tileId: TileId, tabId?: string): string | undefined {\n                    const formatQueryForNewInsight = (query: QuerySchema): QuerySchema => {\n                        if (query.kind === NodeKind.InsightVizNode) {\n                            return {\n                                ...query,\n                                embedded: undefined,\n                                hidePersonsModal: undefined,\n                            }\n                        }\n                        return query\n                    }\n\n                    const tile: WebAnalyticsTile | undefined = tiles.find((tile) => tile.tileId === tileId)\n                    if (!tile) {\n                        return undefined\n                    }\n\n                    if (tile.kind === 'tabs') {\n                        const tab = tile.tabs.find((tab) => tab.id === tabId)\n                        if (!tab) {\n                            return undefined\n                        }\n                        return urls.insightNew({ query: formatQueryForNewInsight(tab.query) })\n                    } else if (tile.kind === 'query') {\n                        return urls.insightNew({ query: formatQueryForNewInsight(tile.query) })\n                    } else if (tile.kind === 'replay') {\n                        return urls.replay()\n                    }\n                }\n            },\n        ],\n    })),\n    loaders(({ values }) => ({\n        // load the status check query here and pass the response into the component, so the response\n        // is accessible in this logic\n        statusCheck: {\n            __default: null as WebAnalyticsStatusCheck | null,\n            loadStatusCheck: async (): Promise<WebAnalyticsStatusCheck> => {\n                const [webVitalsResult, pageviewResult, pageleaveResult, pageleaveScroll] = await Promise.allSettled([\n                    api.eventDefinitions.list({\n                        event_type: EventDefinitionType.Event,\n                        search: '$web_vitals',\n                    }),\n                    api.eventDefinitions.list({\n                        event_type: EventDefinitionType.Event,\n                        search: '$pageview',\n                    }),\n                    api.eventDefinitions.list({\n                        event_type: EventDefinitionType.Event,\n                        search: '$pageleave',\n                    }),\n                    api.propertyDefinitions.list({\n                        event_names: ['$pageleave'],\n                        properties: ['$prev_pageview_max_content_percentage'],\n                    }),\n                ])\n\n                // no need to worry about pagination here, event names beginning with $ are reserved, and we're not\n                // going to add enough reserved event names that match this search term to cause problems\n                const webVitalsEntry =\n                    webVitalsResult.status === 'fulfilled'\n                        ? webVitalsResult.value.results.find((r) => r.name === '$web_vitals')\n                        : undefined\n\n                const pageviewEntry =\n                    pageviewResult.status === 'fulfilled'\n                        ? pageviewResult.value.results.find((r) => r.name === '$pageview')\n                        : undefined\n\n                const pageleaveEntry =\n                    pageleaveResult.status === 'fulfilled'\n                        ? pageleaveResult.value.results.find((r) => r.name === '$pageleave')\n                        : undefined\n\n                const pageleaveScrollEntry =\n                    pageleaveScroll.status === 'fulfilled'\n                        ? pageleaveScroll.value.results.find((r) => r.name === '$prev_pageview_max_content_percentage')\n                        : undefined\n\n                const isSendingWebVitals = !!webVitalsEntry && !isDefinitionStale(webVitalsEntry)\n                const isSendingPageViews = !!pageviewEntry && !isDefinitionStale(pageviewEntry)\n                const isSendingPageLeaves = !!pageleaveEntry && !isDefinitionStale(pageleaveEntry)\n                const isSendingPageLeavesScroll = !!pageleaveScrollEntry && !isDefinitionStale(pageleaveScrollEntry)\n\n                return {\n                    isSendingWebVitals,\n                    isSendingPageViews,\n                    isSendingPageLeaves,\n                    isSendingPageLeavesScroll,\n                }\n            },\n        },\n        shouldShowGeographyTile: {\n            _default: null as boolean | null,\n            loadShouldShowGeographyTile: async (): Promise<boolean> => {\n                // Always display on dev mode, we don't always have events and/or hogQL functions\n                // but we want the map to be there for debugging purposes\n                if (values.isDev) {\n                    return true\n                }\n\n                const [propertiesResponse, hogFunctionsResponse] = await Promise.allSettled([\n                    api.propertyDefinitions.list({\n                        event_names: ['$pageview'],\n                        properties: ['$geoip_country_code'],\n                    }),\n                    api.hogFunctions.list({ types: ['transformation'] }),\n                ])\n\n                const hasNonStaleCountryCodeDefinition =\n                    propertiesResponse.status === 'fulfilled' &&\n                    propertiesResponse.value.results.some(\n                        (property) => property.name === '$geoip_country_code' && !isDefinitionStale(property)\n                    )\n\n                if (!hasNonStaleCountryCodeDefinition) {\n                    return false\n                }\n\n                if (hogFunctionsResponse.status !== 'fulfilled') {\n                    return false\n                }\n\n                const enabledGeoIPHogFunction = hogFunctionsResponse.value.results.find((hogFunction) => {\n                    const isFromTemplate = GEOIP_TEMPLATE_IDS.includes(hogFunction.template?.id ?? '')\n                    const matchesName = hogFunction.name === 'GeoIP' // Failsafe in case someone implements their custom GeoIP function\n\n                    return (isFromTemplate || matchesName) && hogFunction.enabled\n                })\n\n                return Boolean(enabledGeoIPHogFunction)\n            },\n        },\n    })),\n\n    // start the loaders after mounting the logic\n    afterMount(({ actions }) => {\n        actions.loadStatusCheck()\n        actions.loadShouldShowGeographyTile()\n    }),\n    windowValues({\n        isGreaterThanMd: (window: Window) => window.innerWidth > 768,\n    }),\n\n    actionToUrl(({ values }) => {\n        const stateToUrl = (): string => {\n            const {\n                webAnalyticsFilters,\n                conversionGoal,\n                dateFilter: { dateTo, dateFrom, interval },\n                _sourceTab,\n                _deviceTab,\n                _pathTab,\n                _geographyTab,\n                _graphsTab,\n                isPathCleaningEnabled,\n                shouldFilterTestAccounts,\n                compareFilter,\n                productTab,\n                webVitalsPercentile,\n            } = values\n\n            const urlParams = new URLSearchParams()\n            if (webAnalyticsFilters.length > 0) {\n                urlParams.set('filters', JSON.stringify(webAnalyticsFilters))\n            }\n            if (conversionGoal) {\n                if ('actionId' in conversionGoal) {\n                    urlParams.set('conversionGoal.actionId', conversionGoal.actionId.toString())\n                } else {\n                    urlParams.set('conversionGoal.customEventName', conversionGoal.customEventName)\n                }\n            }\n            if (dateFrom !== INITIAL_DATE_FROM || dateTo !== INITIAL_DATE_TO || interval !== INITIAL_INTERVAL) {\n                urlParams.set('date_from', dateFrom ?? '')\n                urlParams.set('date_to', dateTo ?? '')\n                urlParams.set('interval', interval ?? '')\n            }\n            if (_deviceTab) {\n                urlParams.set('device_tab', _deviceTab)\n            }\n            if (_sourceTab) {\n                urlParams.set('source_tab', _sourceTab)\n            }\n            if (_graphsTab) {\n                urlParams.set('graphs_tab', _graphsTab)\n            }\n            if (_pathTab) {\n                urlParams.set('path_tab', _pathTab)\n            }\n            if (_geographyTab) {\n                urlParams.set('geography_tab', _geographyTab)\n            }\n            if (isPathCleaningEnabled != null) {\n                urlParams.set('path_cleaning', isPathCleaningEnabled.toString())\n            }\n            if (shouldFilterTestAccounts != null) {\n                urlParams.set('filter_test_accounts', shouldFilterTestAccounts.toString())\n            }\n            if (compareFilter) {\n                urlParams.set('compare_filter', JSON.stringify(compareFilter))\n            }\n            if (productTab !== ProductTab.ANALYTICS) {\n                urlParams.set('product_tab', productTab)\n            }\n            if (productTab === ProductTab.WEB_VITALS) {\n                urlParams.set('percentile', webVitalsPercentile)\n            }\n\n            const basePath = productTab === ProductTab.WEB_VITALS ? '/web/web-vitals' : '/web'\n            return `${basePath}${urlParams.toString() ? '?' + urlParams.toString() : ''}`\n        }\n\n        return {\n            setWebAnalyticsFilters: stateToUrl,\n            togglePropertyFilter: stateToUrl,\n            setConversionGoal: stateToUrl,\n            setDates: stateToUrl,\n            setInterval: stateToUrl,\n            setDeviceTab: stateToUrl,\n            setSourceTab: stateToUrl,\n            setGraphsTab: stateToUrl,\n            setPathTab: stateToUrl,\n            setGeographyTab: stateToUrl,\n            setCompareFilter: stateToUrl,\n            setProductTab: stateToUrl,\n            setWebVitalsPercentile: stateToUrl,\n            setIsPathCleaningEnabled: stateToUrl,\n        }\n    }),\n\n    urlToAction(({ actions, values }) => {\n        const toAction = (\n            { productTab = ProductTab.ANALYTICS }: { productTab?: ProductTab },\n            {\n                filters,\n                'conversionGoal.actionId': conversionGoalActionId,\n                'conversionGoal.customEventName': conversionGoalCustomEventName,\n                date_from,\n                date_to,\n                interval,\n                device_tab,\n                source_tab,\n                graphs_tab,\n                path_tab,\n                geography_tab,\n                path_cleaning,\n                filter_test_accounts,\n                compare_filter,\n                percentile,\n            }: Record<string, any>\n        ): void => {\n            if (![ProductTab.ANALYTICS, ProductTab.WEB_VITALS].includes(productTab)) {\n                return\n            }\n\n            const parsedFilters = isWebAnalyticsPropertyFilters(filters) ? filters : undefined\n\n            if (parsedFilters && !objectsEqual(parsedFilters, values.webAnalyticsFilters)) {\n                actions.setWebAnalyticsFilters(parsedFilters)\n            }\n            if (\n                conversionGoalActionId &&\n                conversionGoalActionId !== (values.conversionGoal as ActionConversionGoal)?.actionId\n            ) {\n                actions.setConversionGoal({ actionId: parseInt(conversionGoalActionId, 10) })\n            } else if (\n                conversionGoalCustomEventName &&\n                conversionGoalCustomEventName !== (values.conversionGoal as CustomEventConversionGoal)?.customEventName\n            ) {\n                actions.setConversionGoal({ customEventName: conversionGoalCustomEventName })\n            }\n            if (\n                (date_from && date_from !== values.dateFilter.dateFrom) ||\n                (date_to && date_to !== values.dateFilter.dateTo) ||\n                (interval && interval !== values.dateFilter.interval)\n            ) {\n                actions.setDatesAndInterval(date_from, date_to, interval)\n            }\n            if (device_tab && device_tab !== values._deviceTab) {\n                actions.setDeviceTab(device_tab)\n            }\n            if (source_tab && source_tab !== values._sourceTab) {\n                actions.setSourceTab(source_tab)\n            }\n            if (graphs_tab && graphs_tab !== values._graphsTab) {\n                actions.setGraphsTab(graphs_tab)\n            }\n            if (path_tab && path_tab !== values._pathTab) {\n                actions.setPathTab(path_tab)\n            }\n            if (geography_tab && geography_tab !== values._geographyTab) {\n                actions.setGeographyTab(geography_tab)\n            }\n            if (path_cleaning && path_cleaning !== values.isPathCleaningEnabled) {\n                actions.setIsPathCleaningEnabled([true, 'true', 1, '1'].includes(path_cleaning))\n            }\n            if (filter_test_accounts && filter_test_accounts !== values.shouldFilterTestAccounts) {\n                actions.setShouldFilterTestAccounts([true, 'true', 1, '1'].includes(filter_test_accounts))\n            }\n            if (compare_filter && !objectsEqual(compare_filter, values.compareFilter)) {\n                actions.setCompareFilter(compare_filter)\n            }\n            if (productTab && productTab !== values.productTab) {\n                actions.setProductTab(productTab)\n            }\n            if (percentile && percentile !== values.webVitalsPercentile) {\n                actions.setWebVitalsPercentile(percentile as WebVitalsPercentile)\n            }\n        }\n\n        return { '/web': toAction, '/web/:productTab': toAction }\n    }),\n\n    listeners(({ values, actions }) => {\n        const checkGraphsTabIsCompatibleWithConversionGoal = (\n            tab: string,\n            conversionGoal: WebAnalyticsConversionGoal | null\n        ): void => {\n            if (conversionGoal) {\n                if (tab === GraphsTab.PAGE_VIEWS || tab === GraphsTab.NUM_SESSION) {\n                    actions.setGraphsTab(GraphsTab.UNIQUE_USERS)\n                }\n            } else {\n                if (\n                    tab === GraphsTab.TOTAL_CONVERSIONS ||\n                    tab === GraphsTab.CONVERSION_RATE ||\n                    tab === GraphsTab.UNIQUE_CONVERSIONS\n                ) {\n                    actions.setGraphsTab(GraphsTab.UNIQUE_USERS)\n                }\n            }\n        }\n\n        return {\n            setGraphsTab: ({ tab }) => {\n                checkGraphsTabIsCompatibleWithConversionGoal(tab, values.conversionGoal)\n            },\n            setConversionGoal: [\n                ({ conversionGoal }) => {\n                    checkGraphsTabIsCompatibleWithConversionGoal(values.graphsTab, conversionGoal)\n                },\n                ({ conversionGoal }, breakpoint) =>\n                    checkCustomEventConversionGoalHasSessionIdsHelper(\n                        conversionGoal,\n                        breakpoint,\n                        actions.setConversionGoalWarning\n                    ),\n            ],\n        }\n    }),\n    afterMount(({ actions, values }) => {\n        checkCustomEventConversionGoalHasSessionIdsHelper(\n            values.conversionGoal,\n            undefined,\n            actions.setConversionGoalWarning\n        ).catch(() => {\n            // ignore, this warning is just a nice-to-have, no point showing an error to the user\n        })\n    }),\n])\n\nconst checkCustomEventConversionGoalHasSessionIdsHelper = async (\n    conversionGoal: WebAnalyticsConversionGoal | null,\n    breakpoint: BreakPointFunction | undefined,\n    setConversionGoalWarning: (warning: ConversionGoalWarning | null) => void\n): Promise<void> => {\n    if (!conversionGoal || !('customEventName' in conversionGoal) || !conversionGoal.customEventName) {\n        setConversionGoalWarning(null)\n        return\n    }\n    const { customEventName } = conversionGoal\n    // check if we have any conversion events from the last week without sessions ids\n\n    const response = await hogqlQuery(\n        `select count() from events where timestamp >= (now() - toIntervalHour(24)) AND ($session_id IS NULL OR $session_id = '') AND event = {event}`,\n        { event: customEventName }\n    )\n    breakpoint?.()\n    const row = response.results[0]\n    if (row[0]) {\n        setConversionGoalWarning(ConversionGoalWarning.CustomEventWithNoSessionId)\n    } else {\n        setConversionGoalWarning(null)\n    }\n}\n", "import {\n    DataTableNode,\n    DateRange,\n    ErrorTrackingIssue,\n    ErrorTrackingQuery,\n    ErrorTrackingSparklineConfig,\n    EventsQuery,\n    InsightVizNode,\n    NodeKind,\n} from '~/queries/schema/schema-general'\nimport { AnyPropertyFilter, BaseMathType, ChartDisplayType, PropertyGroupFilter, UniversalFiltersGroup } from '~/types'\n\nexport const errorTrackingQuery = ({\n    orderBy,\n    status,\n    dateRange,\n    assignee,\n    filterTestAccounts,\n    filterGroup,\n    searchQuery,\n    customVolume,\n    columns,\n    limit = 50,\n}: Pick<\n    ErrorTrackingQuery,\n    'orderBy' | 'status' | 'dateRange' | 'assignee' | 'filterTestAccounts' | 'limit' | 'searchQuery'\n> & {\n    filterGroup: UniversalFiltersGroup\n    customVolume?: ErrorTrackingSparklineConfig | null\n    columns: ('error' | 'volume' | 'occurrences' | 'sessions' | 'users' | 'assignee')[]\n}): DataTableNode => {\n    return {\n        kind: NodeKind.DataTableNode,\n        source: {\n            kind: NodeKind.ErrorTrackingQuery,\n            orderBy,\n            status,\n            dateRange,\n            assignee,\n            customVolume,\n            filterGroup: filterGroup as PropertyGroupFilter,\n            filterTestAccounts: filterTestAccounts,\n            searchQuery: searchQuery,\n            limit: limit,\n        },\n        showActions: false,\n        showTimings: false,\n        columns: columns,\n    }\n}\n\nexport const errorTrackingIssueQuery = ({\n    issueId,\n    dateRange,\n    customVolume,\n}: {\n    issueId: string\n    dateRange: DateRange\n    customVolume?: ErrorTrackingSparklineConfig | null\n}): ErrorTrackingQuery => {\n    return {\n        kind: NodeKind.ErrorTrackingQuery,\n        issueId,\n        dateRange,\n        filterTestAccounts: false,\n        customVolume,\n    }\n}\n\nexport const errorTrackingIssueEventsQuery = ({\n    issue,\n    filterTestAccounts,\n    filterGroup,\n    dateRange,\n}: {\n    issue: ErrorTrackingIssue | null\n    filterTestAccounts: boolean\n    filterGroup: UniversalFiltersGroup\n    dateRange: DateRange\n}): DataTableNode | null => {\n    if (!issue) {\n        return null\n    }\n\n    // const select = ['person', 'timestamp', 'recording_button(properties.$session_id)']\n    // row expansion only works when you fetch the entire event with '*'\n    const columns = ['*', 'person', 'timestamp', 'recording_button(properties.$session_id)']\n\n    const group = filterGroup.values[0] as UniversalFiltersGroup\n    const properties = group.values as AnyPropertyFilter[]\n    const where = [`'${issue.id}' == issue_id`]\n\n    const eventsQuery: EventsQuery = {\n        kind: NodeKind.EventsQuery,\n        event: '$exception',\n        select: columns,\n        where,\n        properties,\n        filterTestAccounts: filterTestAccounts,\n        after: dateRange.date_from || issue.first_seen,\n        before: dateRange.date_to || undefined,\n    }\n\n    return {\n        kind: NodeKind.DataTableNode,\n        source: eventsQuery,\n        showActions: false,\n        showTimings: false,\n        columns: columns,\n        expandable: true,\n        embedded: true,\n    }\n}\n\nexport const errorTrackingIssueBreakdownQuery = ({\n    breakdownProperty,\n    dateRange,\n    filterTestAccounts,\n    filterGroup,\n}: {\n    breakdownProperty: string\n    dateRange: DateRange\n    filterTestAccounts: boolean\n    filterGroup: UniversalFiltersGroup\n}): InsightVizNode => {\n    return {\n        kind: NodeKind.InsightVizNode,\n        source: {\n            kind: NodeKind.TrendsQuery,\n            trendsFilter: {\n                display: ChartDisplayType.ActionsBarValue,\n            },\n            breakdownFilter: {\n                breakdown_type: 'event',\n                breakdown: breakdownProperty,\n                breakdown_limit: 10,\n            },\n            series: [\n                {\n                    kind: NodeKind.EventsNode,\n                    event: '$exception',\n                    math: BaseMathType.TotalCount,\n                },\n            ],\n            dateRange: dateRange,\n            properties: filterGroup.values as AnyPropertyFilter[],\n            filterTestAccounts,\n        },\n    }\n}\n", "import { IconBrackets, IconDatabase } from '@posthog/icons'\nimport { LemonButton, LemonModal } from '@posthog/lemon-ui'\nimport { clsx } from 'clsx'\nimport { BindLogic, useActions, useValues } from 'kea'\nimport { router } from 'kea-router'\nimport { DatabaseTableTree, TreeItem } from 'lib/components/DatabaseTableTree/DatabaseTableTree'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { copyToClipboard } from 'lib/utils/copyToClipboard'\nimport { useState } from 'react'\nimport { insightDataLogic } from 'scenes/insights/insightDataLogic'\nimport { insightLogic } from 'scenes/insights/insightLogic'\nimport { urls } from 'scenes/urls'\n\nimport { Query } from '~/queries/Query/Query'\nimport { DatabaseSchemaTable } from '~/queries/schema/schema-general'\nimport { ExternalDataSourceType, InsightLogicProps } from '~/types'\n\nimport { SOURCE_DETAILS } from '../new/sourceWizardLogic'\nimport { dataWarehouseViewsLogic } from '../saved_queries/dataWarehouseViewsLogic'\nimport { dataWarehouseSceneLogic } from '../settings/dataWarehouseSceneLogic'\nimport { viewLinkLogic } from '../viewLinkLogic'\nimport { ViewLinkModal } from '../ViewLinkModal'\nimport { DeleteTableModal, TableData } from './TableData'\n\ninterface DataWarehousetTablesProps {\n    insightProps: InsightLogicProps\n}\n\nexport const DataWarehouseTables = ({ insightProps }: DataWarehousetTablesProps): JSX.Element => {\n    const { query } = useValues(insightDataLogic(insightProps))\n    const { setQuery: setInsightQuery } = useActions(insightDataLogic(insightProps))\n\n    return (\n        <>\n            <BindLogic logic={insightLogic} props={insightProps}>\n                <div className=\"Insight\">\n                    <Query\n                        query={query}\n                        setQuery={setInsightQuery}\n                        readOnly={false}\n                        context={{\n                            showOpenEditorButton: false,\n                            showQueryEditor: false,\n                            showQueryHelp: false,\n                            insightProps,\n                        }}\n                    />\n                </div>\n            </BindLogic>\n        </>\n    )\n}\n\ninterface DatabaseTableTreeProps {\n    inline?: boolean\n    collapsible?: boolean\n}\n\nexport const DatabaseTableTreeWithItems = ({ inline, collapsible = true }: DatabaseTableTreeProps): JSX.Element => {\n    const {\n        dataWarehouseTablesBySourceType,\n        posthogTables,\n        databaseLoading,\n        nonMaterializedViews,\n        materializedViews,\n        views,\n        selectedRow,\n        schemaModalIsOpen,\n        dataWarehouseSavedQueriesLoading,\n    } = useValues(dataWarehouseSceneLogic)\n    const { selectRow, deleteDataWarehouseSavedQuery, deleteDataWarehouseTable, toggleSchemaModal } =\n        useActions(dataWarehouseSceneLogic)\n    const [collapsed, setCollapsed] = useState(false)\n    const { toggleJoinTableModal, selectSourceTable } = useActions(viewLinkLogic)\n    const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false)\n    const { runDataWarehouseSavedQuery } = useActions(dataWarehouseViewsLogic)\n    const { featureFlags } = useValues(featureFlagLogic)\n\n    const deleteButton = (table: DatabaseSchemaTable | null): JSX.Element => {\n        if (!table) {\n            return <></>\n        }\n\n        if (table.type === 'view' || table.type === 'materialized_view') {\n            return (\n                <LemonButton\n                    data-attr=\"schema-list-item-delete\"\n                    status=\"danger\"\n                    onClick={() => {\n                        selectRow(table)\n                        setIsDeleteModalOpen(true)\n                    }}\n                    fullWidth\n                >\n                    Delete\n                </LemonButton>\n            )\n        }\n\n        return <></>\n    }\n\n    const dropdownOverlay = (table: DatabaseSchemaTable): JSX.Element => (\n        <>\n            <LemonButton\n                onClick={() => {\n                    void copyToClipboard(table.name, table.name)\n                }}\n                fullWidth\n                data-attr=\"schema-list-item-copy\"\n            >\n                Copy table name\n            </LemonButton>\n            <LemonButton\n                onClick={() => {\n                    selectRow(table)\n                    toggleSchemaModal()\n                }}\n                data-attr=\"schema-list-item-schema\"\n                fullWidth\n            >\n                View table schema\n            </LemonButton>\n            <LemonButton\n                onClick={() => {\n                    selectSourceTable(table.name)\n                    toggleJoinTableModal()\n                }}\n                data-attr=\"schema-list-item-join\"\n                fullWidth\n            >\n                Add join\n            </LemonButton>\n            {(table.type == 'view' || table.type == 'materialized_view') && (\n                <LemonButton\n                    onClick={() => {\n                        router.actions.push(urls.dataWarehouseView(table.id))\n                    }}\n                    data-attr=\"schema-list-item-edit\"\n                    fullWidth\n                >\n                    Edit view definition\n                </LemonButton>\n            )}\n            {featureFlags[FEATURE_FLAGS.DATA_MODELING] && table.type === 'view' && (\n                <LemonButton\n                    onClick={() => {\n                        runDataWarehouseSavedQuery(table.id)\n                    }}\n                    data-attr=\"schema-list-item-materialize\"\n                    fullWidth\n                >\n                    Materialize\n                </LemonButton>\n            )}\n            {featureFlags[FEATURE_FLAGS.DATA_MODELING] && table.type === 'materialized_view' && (\n                <LemonButton\n                    onClick={() => {\n                        runDataWarehouseSavedQuery(table.id)\n                    }}\n                    data-attr=\"schema-list-item-run\"\n                    fullWidth\n                >\n                    Run\n                </LemonButton>\n            )}\n            {deleteButton(table)}\n        </>\n    )\n\n    const treeItems = (): TreeItem[] => {\n        if (inline) {\n            const items: TreeItem[] = [\n                {\n                    name: 'External',\n                    items: Object.keys(dataWarehouseTablesBySourceType).map((source_type) => ({\n                        name: SOURCE_DETAILS[source_type as ExternalDataSourceType]?.label ?? source_type,\n                        items: dataWarehouseTablesBySourceType[source_type].map((table) => ({\n                            name: table.name,\n                            table: table,\n                            dropdownOverlay: dropdownOverlay(table),\n                            items: Object.values(table.fields).map((column) => ({\n                                name: column.name,\n                                type: column.type,\n                                icon: <IconDatabase />,\n                            })),\n                        })),\n                    })),\n                    emptyLabel: <span className=\"text-secondary\">No tables found</span>,\n                    isLoading: databaseLoading,\n                },\n                {\n                    name: 'PostHog',\n                    items: posthogTables.map((table) => ({\n                        name: table.name,\n                        table: table,\n                        dropdownOverlay: dropdownOverlay(table),\n                        items: Object.values(table.fields).map((column) => ({\n                            name: column.name,\n                            type: column.type,\n                            icon: <IconDatabase />,\n                        })),\n                    })),\n                    isLoading: databaseLoading,\n                },\n                {\n                    name: 'Views',\n                    items: (featureFlags[FEATURE_FLAGS.DATA_MODELING] ? nonMaterializedViews : views).map((table) => ({\n                        name: table.name,\n                        table: table,\n                        dropdownOverlay: dropdownOverlay(table),\n                        items: Object.values(table.fields).map((column) => ({\n                            name: column.name,\n                            type: column.type,\n                            icon: <IconDatabase />,\n                        })),\n                    })),\n                    emptyLabel: <span className=\"text-secondary\">No views found</span>,\n                    isLoading: databaseLoading || dataWarehouseSavedQueriesLoading,\n                },\n                ...(featureFlags[FEATURE_FLAGS.DATA_MODELING]\n                    ? [\n                          {\n                              name: 'Materialized views',\n                              items: materializedViews.map((table) => ({\n                                  name: table.name,\n                                  table: table,\n                                  dropdownOverlay: dropdownOverlay(table),\n                                  items: Object.values(table.fields).map((column) => ({\n                                      name: column.name,\n                                      type: column.type,\n                                      icon: <IconDatabase />,\n                                  })),\n                              })),\n                              emptyLabel: <span className=\"text-secondary\">No materialized views found</span>,\n                              isLoading: databaseLoading || dataWarehouseSavedQueriesLoading,\n                          },\n                      ]\n                    : []),\n            ]\n\n            return items\n        }\n\n        const items: TreeItem[] = [\n            {\n                name: 'External',\n                items: Object.keys(dataWarehouseTablesBySourceType).map((source_type) => ({\n                    name: source_type,\n                    items: dataWarehouseTablesBySourceType[source_type].map((table) => ({\n                        table: table,\n                        icon: <IconDatabase />,\n                    })),\n                })),\n                emptyLabel: <span className=\"text-secondary\">No tables found</span>,\n                isLoading: databaseLoading,\n            },\n            {\n                name: 'PostHog',\n                items: posthogTables.map((table) => ({\n                    table: table,\n                    icon: <IconDatabase />,\n                })),\n                isLoading: databaseLoading,\n            },\n            {\n                name: 'Views',\n                items: nonMaterializedViews.map((table) => ({\n                    table: table,\n                    icon: <IconBrackets />,\n                })),\n                emptyLabel: <span className=\"text-secondary\">No views found</span>,\n                isLoading: databaseLoading || dataWarehouseSavedQueriesLoading,\n            },\n            ...(featureFlags[FEATURE_FLAGS.DATA_MODELING]\n                ? [\n                      {\n                          name: 'Materialized views',\n                          items: materializedViews.map((table) => ({\n                              table: table,\n                              icon: <IconBrackets />,\n                          })),\n                          emptyLabel: <span className=\"text-secondary\">No materialized views found</span>,\n                          isLoading: databaseLoading || dataWarehouseSavedQueriesLoading,\n                      },\n                  ]\n                : []),\n        ]\n\n        return items\n    }\n\n    return (\n        <div\n            className={clsx(\n                `bg-surface-primary rounded space-y-px border p-2 overflow-y-auto`,\n                !collapsed ? 'min-w-80 flex-1' : ''\n            )}\n        >\n            {collapsed ? (\n                <LemonButton icon={<IconDatabase />} onClick={() => setCollapsed(false)} />\n            ) : collapsible ? (\n                <>\n                    <LemonButton\n                        size=\"xsmall\"\n                        onClick={() => setCollapsed(true)}\n                        fullWidth\n                        icon={<IconDatabase />}\n                        className=\"font-normal\"\n                    >\n                        <span className=\"uppercase text-secondary tracking-wider\">Sources</span>\n                    </LemonButton>\n                    <DatabaseTableTree onSelectRow={selectRow} items={treeItems()} selectedRow={selectedRow} />\n                </>\n            ) : (\n                <>\n                    <span className=\"text-secondary tracking-wider font-normal\">Sources</span>\n                    <DatabaseTableTree onSelectRow={selectRow} items={treeItems()} selectedRow={selectedRow} />\n                </>\n            )}\n            <LemonModal\n                width=\"50rem\"\n                isOpen={!!selectedRow && schemaModalIsOpen}\n                onClose={() => {\n                    selectRow(null)\n                    toggleSchemaModal()\n                }}\n                title=\"Table Schema\"\n            >\n                <TableData />\n            </LemonModal>\n            <ViewLinkModal />\n            {selectedRow && (\n                <DeleteTableModal\n                    table={selectedRow}\n                    isOpen={isDeleteModalOpen}\n                    setIsOpen={setIsDeleteModalOpen}\n                    onDelete={() => {\n                        if (selectedRow) {\n                            if (selectedRow.type === 'view' || selectedRow.type === 'materialized_view') {\n                                deleteDataWarehouseSavedQuery(selectedRow.id)\n                            } else {\n                                deleteDataWarehouseTable(selectedRow.id)\n                            }\n                        }\n                    }}\n                />\n            )}\n        </div>\n    )\n}\n", "import { LemonDivider } from 'lib/lemon-ui/LemonDivider'\nimport { useEffect, useState } from 'react'\nimport { HogDebug } from 'scenes/debug/HogDebug'\n\nimport { ErrorBoundary } from '~/layout/ErrorBoundary'\nimport { DataNode } from '~/queries/nodes/DataNode/DataNode'\nimport { DataTable } from '~/queries/nodes/DataTable/DataTable'\nimport { InsightViz, insightVizDataNodeKey } from '~/queries/nodes/InsightViz/InsightViz'\nimport { WebOverview } from '~/queries/nodes/WebOverview/WebOverview'\nimport { WebVitals } from '~/queries/nodes/WebVitals/WebVitals'\nimport { QueryEditor } from '~/queries/QueryEditor/QueryEditor'\nimport {\n    AnyResponseType,\n    DashboardFilter,\n    DataTableNode,\n    DataVisualizationNode,\n    HogQLVariable,\n    InsightVizNode,\n    Node,\n} from '~/queries/schema/schema-general'\nimport { QueryContext } from '~/queries/types'\n\nimport { DataTableVisualization } from '../nodes/DataVisualization/DataVisualization'\nimport { SavedInsight } from '../nodes/SavedInsight/SavedInsight'\nimport { WebVitalsPathBreakdown } from '../nodes/WebVitals/WebVitalsPathBreakdown'\nimport {\n    isDataTableNode,\n    isDataVisualizationNode,\n    isHogQuery,\n    isInsightVizNode,\n    isSavedInsightNode,\n    isWebOverviewQuery,\n    isWebVitalsPathBreakdownQuery,\n    isWebVitalsQuery,\n} from '../utils'\n\nexport interface QueryProps<Q extends Node> {\n    /** An optional key to identify the query */\n    uniqueKey?: string | number\n    /** The query to render */\n    query: Q | string | null\n    /** Set this if you're controlling the query parameter */\n    setQuery?: (query: Q, isSourceUpdate?: boolean) => void\n\n    /** Custom components passed down to a few query nodes (e.g. custom table columns) */\n    context?: QueryContext<any>\n    /* Cached Results are provided when shared or exported,\n    the data node logic becomes read only implicitly */\n    cachedResults?: AnyResponseType\n    /** Disable any changes to the query */\n    readOnly?: boolean\n    /** Reduce UI elements to only show data */\n    embedded?: boolean\n    /** Disables modals and other things */\n    inSharedMode?: boolean\n    /** Dashboard filters to override the ones in the query */\n    filtersOverride?: DashboardFilter | null\n    /** Dashboard variables to override the ones in the query */\n    variablesOverride?: Record<string, HogQLVariable> | null\n}\n\nexport function Query<Q extends Node>(props: QueryProps<Q>): JSX.Element | null {\n    const {\n        query: propsQuery,\n        setQuery: propsSetQuery,\n        readOnly,\n        embedded,\n        filtersOverride,\n        variablesOverride,\n        inSharedMode,\n    } = props\n\n    const [localQuery, localSetQuery] = useState(propsQuery)\n    useEffect(() => {\n        if (propsQuery !== localQuery) {\n            localSetQuery(propsQuery)\n        }\n    }, [propsQuery]) // eslint-disable-line react-hooks/exhaustive-deps\n\n    const query = readOnly ? propsQuery : localQuery\n    const setQuery = propsSetQuery ?? localSetQuery\n\n    const queryContext = props.context || {}\n\n    const uniqueKey =\n        props.uniqueKey ?? (props.context?.insightProps && insightVizDataNodeKey(props.context.insightProps))\n\n    if (query === null) {\n        return null\n    }\n\n    if (typeof query === 'string') {\n        try {\n            return <Query {...props} query={JSON.parse(query)} />\n        } catch (e: any) {\n            return <div className=\"border border-danger p-4 text-danger\">Error parsing JSON: {e.message}</div>\n        }\n    }\n\n    let component: JSX.Element\n    if (isDataTableNode(query)) {\n        component = (\n            <DataTable\n                query={query}\n                setQuery={setQuery as unknown as (query: DataTableNode) => void}\n                context={queryContext}\n                cachedResults={props.cachedResults}\n                uniqueKey={uniqueKey}\n                readOnly={readOnly}\n            />\n        )\n    } else if (isDataVisualizationNode(query)) {\n        component = (\n            <DataTableVisualization\n                query={query}\n                setQuery={setQuery as unknown as (query: DataVisualizationNode) => void}\n                cachedResults={props.cachedResults}\n                uniqueKey={uniqueKey}\n                context={queryContext}\n                readOnly={readOnly}\n                variablesOverride={props.variablesOverride}\n            />\n        )\n    } else if (isSavedInsightNode(query)) {\n        component = <SavedInsight query={query} context={queryContext} readOnly={readOnly} embedded={embedded} />\n    } else if (isInsightVizNode(query)) {\n        component = (\n            <InsightViz\n                query={query}\n                setQuery={setQuery as unknown as (query: InsightVizNode) => void}\n                context={queryContext}\n                readOnly={readOnly}\n                uniqueKey={uniqueKey}\n                embedded={embedded}\n                inSharedMode={inSharedMode}\n                filtersOverride={filtersOverride}\n                variablesOverride={variablesOverride}\n            />\n        )\n    } else if (isWebOverviewQuery(query)) {\n        component = <WebOverview query={query} cachedResults={props.cachedResults} context={queryContext} />\n    } else if (isWebVitalsQuery(query)) {\n        component = <WebVitals query={query} cachedResults={props.cachedResults} context={queryContext} />\n    } else if (isWebVitalsPathBreakdownQuery(query)) {\n        component = <WebVitalsPathBreakdown query={query} cachedResults={props.cachedResults} context={queryContext} />\n    } else if (isHogQuery(query)) {\n        component = <HogDebug query={query} setQuery={setQuery as (query: any) => void} queryKey={String(uniqueKey)} />\n    } else {\n        component = <DataNode query={query} cachedResults={props.cachedResults} />\n    }\n\n    return (\n        <ErrorBoundary>\n            <>\n                {queryContext.showQueryEditor ? (\n                    <>\n                        <QueryEditor\n                            query={JSON.stringify(query)}\n                            setQuery={(stringQuery) => setQuery?.(JSON.parse(stringQuery), true)}\n                            context={queryContext}\n                        />\n                        <div className=\"my-4\">\n                            <LemonDivider />\n                        </div>\n                    </>\n                ) : null}\n                {component}\n            </>\n        </ErrorBoundary>\n    )\n}\n", "import clsx from 'clsx'\nimport { BindLogic, useValues } from 'kea'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonDivider } from 'lib/lemon-ui/LemonDivider'\nimport { LemonTabs } from 'lib/lemon-ui/LemonTabs'\nimport { CodeEditor } from 'lib/monaco/CodeEditor'\nimport type { IDisposable } from 'monaco-editor'\nimport { useEffect, useRef, useState } from 'react'\n\nimport { dataNodeLogic, DataNodeLogicProps } from '~/queries/nodes/DataNode/dataNodeLogic'\nimport { ElapsedTime } from '~/queries/nodes/DataNode/ElapsedTime'\nimport { Reload } from '~/queries/nodes/DataNode/Reload'\nimport { HogQuery, HogQueryResponse } from '~/queries/schema/schema-general'\n\nexport interface HogQueryEditorProps {\n    query: HogQuery\n    setQuery?: (query: HogQuery) => void\n    queryKey?: string\n}\n\nlet uniqueNode = 0\n\nexport function HogQueryEditor(props: HogQueryEditorProps): JSX.Element {\n    // Using useRef, not useState, as we don't want to reload the component when this changes.\n    const monacoDisposables = useRef([] as IDisposable[])\n    useEffect(() => {\n        return () => {\n            monacoDisposables.current.forEach((d) => d?.dispose())\n        }\n    }, [])\n    const [queryInput, setQueryInput] = useState(props.query.code)\n    useEffect(() => {\n        setQueryInput(props.query?.code)\n    }, [props.query?.code])\n    const [realKey] = useState(() => uniqueNode++)\n\n    function saveQuery(): void {\n        if (props.setQuery) {\n            props.setQuery({ ...props.query, code: queryInput })\n        }\n    }\n\n    return (\n        <div className=\"space-y-2\">\n            <div data-attr=\"hogql-query-editor\" className={clsx('flex flex-col rounded space-y-2 w-full p-2 border')}>\n                <div className=\"relative flex-1 overflow-hidden\">\n                    <div className=\"resize-y overflow-hidden h-[222px]\">\n                        <CodeEditor\n                            queryKey={props.queryKey ?? `new/${realKey}`}\n                            className=\"border rounded overflow-hidden h-full\"\n                            language=\"hog\"\n                            value={queryInput}\n                            onChange={(v) => setQueryInput(v ?? '')}\n                            height=\"100%\"\n                            onMount={(editor, monaco) => {\n                                monacoDisposables.current.push(\n                                    editor.addAction({\n                                        id: 'saveAndRunPostHog',\n                                        label: 'Save and run query',\n                                        keybindings: [monaco.KeyMod.CtrlCmd | monaco.KeyCode.Enter],\n                                        run: () => saveQuery(),\n                                    })\n                                )\n                            }}\n                            options={{\n                                minimap: {\n                                    enabled: false,\n                                },\n                                wordWrap: 'on',\n                                scrollBeyondLastLine: false,\n                                automaticLayout: true,\n                                fixedOverflowWidgets: true,\n                                suggest: {\n                                    showInlineDetails: true,\n                                },\n                                quickSuggestionsDelay: 300,\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className=\"flex flex-row\">\n                    <div className=\"flex-1\">\n                        <LemonButton\n                            onClick={saveQuery}\n                            type=\"primary\"\n                            disabledReason={!props.setQuery ? 'No permission to update' : undefined}\n                            center\n                            fullWidth\n                            data-attr=\"hogql-query-editor-save\"\n                        >\n                            {!props.setQuery ? 'No permission to update' : 'Update and run'}\n                        </LemonButton>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\ninterface HogDebugProps {\n    queryKey: string\n    query: HogQuery\n    setQuery: (query: HogQuery) => void\n    debug?: boolean\n}\n\nexport function HogDebug({ query, setQuery, queryKey, debug }: HogDebugProps): JSX.Element {\n    const dataNodeLogicProps: DataNodeLogicProps = { query, key: queryKey, dataNodeCollectionId: queryKey }\n    const { dataLoading, response: _response } = useValues(dataNodeLogic(dataNodeLogicProps))\n    const response = _response as HogQueryResponse | null\n    const [tab, setTab] = useState('results' as 'results' | 'bytecode' | 'coloredBytecode' | 'stdout')\n\n    return (\n        <BindLogic logic={dataNodeLogic} props={dataNodeLogicProps}>\n            <div className=\"space-y-2\">\n                {setQuery ? (\n                    <>\n                        <HogQueryEditor query={query} setQuery={setQuery} queryKey={queryKey} />\n                        <LemonDivider className=\"my-4\" />\n                        <div className=\"flex gap-2\">\n                            <Reload />\n                        </div>\n                    </>\n                ) : null}\n                {dataLoading ? (\n                    <>\n                        <h2>Running query...</h2>\n                        <div className=\"flex\">\n                            Time elapsed:&nbsp;\n                            <ElapsedTime />\n                        </div>\n                    </>\n                ) : (\n                    <>\n                        {debug ? (\n                            <LemonTabs\n                                tabs={[\n                                    { label: 'Results', key: 'results' },\n                                    { label: 'Stdout', key: 'stdout' },\n                                    { label: 'Bytecode', key: 'coloredBytecode' },\n                                    { label: 'Raw bytecode', key: 'bytecode' },\n                                ]}\n                                activeKey={tab}\n                                onChange={(key) => setTab(String(key) as any)}\n                            />\n                        ) : null}\n                        {tab === 'bytecode' && debug ? (\n                            <CodeEditor\n                                className=\"border\"\n                                language=\"json\"\n                                value={\n                                    response?.bytecode\n                                        ? JSON.stringify(response?.bytecode)\n                                        : 'No bytecode returned with response'\n                                }\n                                height={500}\n                                path={`debug/${queryKey}/hog-bytecode.json`}\n                                options={{ wordWrap: 'on' }}\n                            />\n                        ) : tab === 'coloredBytecode' && debug ? (\n                            <CodeEditor\n                                className=\"border\"\n                                language=\"swift\"\n                                value={\n                                    response?.coloredBytecode && Array.isArray(response?.coloredBytecode)\n                                        ? response?.coloredBytecode\n                                              .map((a) => (a.startsWith('op.') ? a : `    ${a}`))\n                                              .join('\\n')\n                                        : 'No bytecode returned with response'\n                                }\n                                height={500}\n                                path={`debug/${queryKey}/hog-bytecode.json`}\n                                options={{ wordWrap: 'on', lineNumbers: (nr) => String(nr - 1) }}\n                            />\n                        ) : tab === 'stdout' ? (\n                            <CodeEditor\n                                className=\"border\"\n                                language=\"text\"\n                                value={String(response?.stdout ?? 'No bytecode returned with response')}\n                                height={500}\n                                path={`debug/${queryKey}/hog-stdout.txt`}\n                                options={{ wordWrap: 'on' }}\n                            />\n                        ) : (\n                            <CodeEditor\n                                className=\"border\"\n                                language={typeof response?.results === 'object' ? 'json' : 'text'}\n                                value={\n                                    typeof response?.results === 'object'\n                                        ? JSON.stringify(response?.results ?? '', null, 2)\n                                        : String(response?.results ?? '')\n                                }\n                                height={500}\n                                path={`debug/${queryKey}/hog-result.json`}\n                                options={{ wordWrap: 'on' }}\n                            />\n                        )}\n                    </>\n                )}\n            </div>\n        </BindLogic>\n    )\n}\n", "import { useValues } from 'kea'\nimport { Spinner } from 'lib/lemon-ui/Spinner/Spinner'\nimport { CodeEditor } from 'lib/monaco/CodeEditor'\nimport { useState } from 'react'\nimport { AutoSizer } from 'react-virtualized/dist/es/AutoSizer'\n\nimport { dataNodeLogic } from '~/queries/nodes/DataNode/dataNodeLogic'\nimport { OpenEditorButton } from '~/queries/nodes/Node/OpenEditorButton'\nimport { AnyResponseType, DataNode as DataNodeType, DataTableNode } from '~/queries/schema/schema-general'\n\ninterface DataNodeProps {\n    query: DataNodeType\n    setQuery?: (query: DataTableNode) => void\n    /* Cached Results are provided when shared or exported,\n    the data node logic becomes read only implicitly */\n    cachedResults?: AnyResponseType\n}\n\nlet uniqueNode = 0\n\n/** Default renderer for data nodes. Display the JSON in a Monaco editor.  */\nexport function DataNode(props: DataNodeProps): JSX.Element {\n    const [key] = useState(() => `DataNode.${uniqueNode++}`)\n    const logic = dataNodeLogic({ ...props, key, cachedResults: props.cachedResults, dataNodeCollectionId: key })\n    const { response, responseLoading, responseErrorObject } = useValues(logic)\n\n    return (\n        <div className=\"relative\">\n            <div className=\"absolute right-0 z-10 p-1 mr-3\">\n                <OpenEditorButton query={props.query} />\n            </div>\n            {responseLoading ? (\n                <div className=\"text-2xl\">\n                    <Spinner />\n                </div>\n            ) : (\n                <AutoSizer disableWidth>\n                    {({ height }) => (\n                        <CodeEditor\n                            className=\"border\"\n                            language=\"json\"\n                            value={JSON.stringify(response ?? responseErrorObject, null, 2)}\n                            height={Math.max(height, 300)}\n                        />\n                    )}\n                </AutoSizer>\n            )}\n        </div>\n    )\n}\n", "import { IconGear, IconTrending } from '@posthog/icons'\nimport { LemonButton, LemonSkeleton } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { getColorVar } from 'lib/colors'\nimport { useFeatureFlag } from 'lib/hooks/useFeatureFlag'\nimport { IconTrendingDown, IconTrendingFlat } from 'lib/lemon-ui/icons'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { humanFriendlyDuration, humanFriendlyLargeNumber, isNotNil, range } from 'lib/utils'\nimport { useState } from 'react'\nimport { urls } from 'scenes/urls'\n\nimport { EvenlyDistributedRows } from '~/queries/nodes/WebOverview/EvenlyDistributedRows'\nimport {\n    AnyResponseType,\n    WebOverviewItem,\n    WebOverviewItemKind,\n    WebOverviewQuery,\n    WebOverviewQueryResponse,\n} from '~/queries/schema/schema-general'\nimport { QueryContext } from '~/queries/types'\n\nimport { dataNodeLogic } from '../DataNode/dataNodeLogic'\n\nconst OVERVIEW_ITEM_CELL_MIN_WIDTH_REMS = 10\n\n// Keep min-w-[10rem] in sync with OVERVIEW_ITEM_CELL_MIN_WIDTH_REMS\nconst OVERVIEW_ITEM_CELL_CLASSES = `flex-1 border p-2 bg-surface-primary rounded min-w-[10rem] h-30 flex flex-col items-center text-center justify-between`\n\nlet uniqueNode = 0\nexport function WebOverview(props: {\n    query: WebOverviewQuery\n    cachedResults?: AnyResponseType\n    context: QueryContext\n}): JSX.Element | null {\n    const { onData, loadPriority, dataNodeCollectionId } = props.context.insightProps ?? {}\n    const [key] = useState(() => `WebOverview.${uniqueNode++}`)\n    const logic = dataNodeLogic({\n        query: props.query,\n        key,\n        cachedResults: props.cachedResults,\n        loadPriority,\n        onData,\n        dataNodeCollectionId: dataNodeCollectionId ?? key,\n    })\n    const { response, responseLoading } = useValues(logic)\n\n    const webOverviewQueryResponse = response as WebOverviewQueryResponse | undefined\n\n    const samplingRate = webOverviewQueryResponse?.samplingRate\n\n    let numSkeletons = props.query.conversionGoal ? 4 : 5\n    if (useFeatureFlag('WEB_REVENUE_TRACKING')) {\n        numSkeletons += 1\n    }\n\n    return (\n        <>\n            <EvenlyDistributedRows\n                className=\"flex justify-center items-center flex-wrap w-full gap-2\"\n                minWidthRems={OVERVIEW_ITEM_CELL_MIN_WIDTH_REMS + 2}\n            >\n                {responseLoading\n                    ? range(numSkeletons).map((i) => <WebOverviewItemCellSkeleton key={i} />)\n                    : webOverviewQueryResponse?.results?.map((item) => (\n                          <WebOverviewItemCell key={item.key} item={item} />\n                      )) || []}\n            </EvenlyDistributedRows>\n            {samplingRate && !(samplingRate.numerator === 1 && (samplingRate.denominator ?? 1) === 1) ? (\n                <LemonBanner type=\"info\" className=\"my-4\">\n                    These results are using a sampling factor of {samplingRate.numerator}\n                    {samplingRate.denominator ?? 1 !== 1 ? `/${samplingRate.denominator}` : ''}. Sampling is currently\n                    in beta.\n                </LemonBanner>\n            ) : null}\n        </>\n    )\n}\n\nconst WebOverviewItemCellSkeleton = (): JSX.Element => {\n    return (\n        <div className={OVERVIEW_ITEM_CELL_CLASSES}>\n            <LemonSkeleton className=\"h-2 w-10\" />\n            <LemonSkeleton className=\"h-6 w-20\" />\n            <LemonSkeleton className=\"h-2 w-10\" />\n        </div>\n    )\n}\n\nconst WebOverviewItemCell = ({ item }: { item: WebOverviewItem }): JSX.Element => {\n    const label = labelFromKey(item.key)\n    const trend = isNotNil(item.changeFromPreviousPct)\n        ? item.changeFromPreviousPct === 0\n            ? { Icon: IconTrendingFlat, color: getColorVar('muted') }\n            : item.changeFromPreviousPct > 0\n            ? {\n                  Icon: IconTrending,\n                  color: !item.isIncreaseBad ? getColorVar('success') : getColorVar('danger'),\n              }\n            : {\n                  Icon: IconTrendingDown,\n                  color: !item.isIncreaseBad ? getColorVar('danger') : getColorVar('success'),\n              }\n        : undefined\n\n    const docsUrl = settingsLinkFromKey(item.key)\n\n    // If current === previous, say \"increased by 0%\"\n    const tooltip =\n        isNotNil(item.value) && isNotNil(item.previous) && isNotNil(item.changeFromPreviousPct)\n            ? `${label}: ${item.value >= item.previous ? 'increased' : 'decreased'} by ${formatPercentage(\n                  Math.abs(item.changeFromPreviousPct),\n                  { precise: true }\n              )}, to ${formatItem(item.value, item.kind, { precise: true })} from ${formatItem(\n                  item.previous,\n                  item.kind,\n                  { precise: true }\n              )}`\n            : isNotNil(item.value)\n            ? `${label}: ${formatItem(item.value, item.kind, { precise: true })}`\n            : 'No data'\n\n    return (\n        <Tooltip title={tooltip}>\n            <div className={OVERVIEW_ITEM_CELL_CLASSES}>\n                <div className=\"flex flex-row w-full\">\n                    <div className=\"flex-1\" />\n                    <div className=\"font-bold uppercase text-xs py-1\">{label}</div>\n                    <div className=\"flex flex-1 flex-row justify-end items-start\">\n                        {docsUrl && <LemonButton to={docsUrl} icon={<IconGear />} size=\"xsmall\" />}\n                    </div>\n                </div>\n                <div className=\"w-full flex-1 flex items-center justify-center\">\n                    <div className=\"text-2xl\">{formatItem(item.value, item.kind)}</div>\n                </div>\n                {trend && isNotNil(item.changeFromPreviousPct) ? (\n                    // eslint-disable-next-line react/forbid-dom-props\n                    <div style={{ color: trend.color }}>\n                        <trend.Icon color={trend.color} /> {formatPercentage(item.changeFromPreviousPct)}\n                    </div>\n                ) : (\n                    <div />\n                )}\n            </div>\n        </Tooltip>\n    )\n}\n\nconst formatPercentage = (x: number, options?: { precise?: boolean }): string => {\n    if (options?.precise) {\n        return (x / 100).toLocaleString(undefined, { style: 'percent', maximumFractionDigits: 1 })\n    } else if (x >= 1000) {\n        return humanFriendlyLargeNumber(x) + '%'\n    }\n    return (x / 100).toLocaleString(undefined, { style: 'percent', maximumSignificantDigits: 2 })\n}\n\nconst formatUnit = (x: number, options?: { precise?: boolean }): string => {\n    if (options?.precise) {\n        return x.toLocaleString()\n    }\n    return humanFriendlyLargeNumber(x)\n}\n\nconst getCurrencySymbol = (currency: string): { symbol: string; isPrefix: boolean } => {\n    const formatter = new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: currency,\n    })\n    const parts = formatter.formatToParts(0)\n    const symbol = parts.find((part) => part.type === 'currency')?.value\n\n    const isPrefix = symbol ? parts[0].type === 'currency' : true\n\n    return { symbol: symbol ?? currency, isPrefix }\n}\n\nconst formatItem = (\n    value: number | undefined,\n    kind: WebOverviewItemKind,\n    options?: { precise?: boolean; currency?: string }\n): string => {\n    if (value == null) {\n        return '-'\n    } else if (kind === 'percentage') {\n        return formatPercentage(value, { precise: options?.precise })\n    } else if (kind === 'duration_s') {\n        return humanFriendlyDuration(value, { secondsPrecision: 3 })\n    } else if (kind === 'currency') {\n        const { symbol, isPrefix } = getCurrencySymbol(options?.currency ?? 'USD')\n        return `${isPrefix ? symbol : ''}${formatUnit(value, { precise: options?.precise })}${\n            isPrefix ? '' : ' ' + symbol\n        }`\n    }\n    return formatUnit(value, options)\n}\n\nconst labelFromKey = (key: string): string => {\n    switch (key) {\n        case 'visitors':\n            return 'Visitors'\n        case 'views':\n            return 'Page views'\n        case 'sessions':\n            return 'Sessions'\n        case 'session duration':\n            return 'Session duration'\n        case 'bounce rate':\n            return 'Bounce rate'\n        case 'lcp score':\n            return 'LCP Score'\n        case 'conversion rate':\n            return 'Conversion rate'\n        case 'total conversions':\n            return 'Total conversions'\n        case 'unique conversions':\n            return 'Unique conversions'\n        default:\n            return key\n                .split(' ')\n                .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n                .join(' ')\n    }\n}\n\nconst settingsLinkFromKey = (key: string): string | null => {\n    switch (key) {\n        case 'revenue':\n        case 'conversion revenue':\n            return urls.revenue()\n        default:\n            return null\n    }\n}\n", "import clsx from 'clsx'\nimport React, { useCallback, useEffect, useRef, useState } from 'react'\n\n// see https://github.com/PostHog/posthog/pull/20359/files#r1490894232 for a visual example of what this is trying to\n// solve\n// if 5 items are to be evenly distributed across a container that has space for 4, just naively using flex will result\n// in a 4-1 split, whereas this component will distribute them 3-2\n// Sadly, the technology to do this with pure CSS has not been invented or discovered yet.\n\nexport const EvenlyDistributedRows = ({\n    children,\n    minWidthRems,\n    className,\n}: {\n    children: React.ReactNode[]\n    minWidthRems: number\n    className: string\n}): JSX.Element => {\n    const [rowLayout, setRowLayout] = useState<{ itemsPerRow: number; numRows: number }>()\n    const elementRef = useRef<HTMLDivElement>(null)\n\n    const updateSize = useCallback((): void => {\n        if (!elementRef.current) {\n            return\n        }\n        const pxPerRem = parseFloat(getComputedStyle(document.documentElement).fontSize)\n        const minWidthPx = minWidthRems * pxPerRem\n        const containerWidthPx = elementRef.current.offsetWidth\n\n        const maxItemsPerRow = Math.floor(containerWidthPx / minWidthPx)\n        // Distribute items evenly\n        // e.g. if we can have 4 elements per row and have 9 items\n        // prefer 3,3,3 to 4,4,1\n        const numRows = Math.ceil(children.length / maxItemsPerRow)\n        const itemsPerRow = Math.ceil(children.length / numRows)\n\n        setRowLayout({\n            numRows,\n            itemsPerRow,\n        })\n    }, [setRowLayout, elementRef, minWidthRems, children.length])\n\n    useEffect(() => {\n        const element = elementRef.current\n        if (!element) {\n            return\n        }\n\n        updateSize()\n\n        let resizeObserver: ResizeObserver | undefined\n        if (typeof ResizeObserver !== 'undefined') {\n            resizeObserver = new ResizeObserver(updateSize)\n        }\n        resizeObserver?.observe(element)\n\n        return () => {\n            resizeObserver?.unobserve(element)\n        }\n    }, [updateSize])\n\n    return (\n        <div\n            className={clsx('grid', className)}\n            // eslint-disable-next-line react/forbid-dom-props\n            style={{ gridTemplateColumns: `repeat(${rowLayout?.itemsPerRow ?? 1}, 1fr)` }}\n            ref={elementRef}\n        >\n            {rowLayout ? children : null}\n        </div>\n    )\n}\n", "import { useActions, useValues } from 'kea'\nimport { IconOpenInNew } from 'lib/lemon-ui/icons'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { addProductIntentForCrossSell, ProductIntentContext } from 'lib/utils/product-intents'\nimport { useMemo, useState } from 'react'\nimport { urls } from 'scenes/urls'\nimport { webAnalyticsLogic } from 'scenes/web-analytics/webAnalyticsLogic'\n\nimport { Query } from '~/queries/Query/Query'\nimport { AnyResponseType, WebVitalsQuery, WebVitalsQueryResponse } from '~/queries/schema/schema-general'\nimport { QueryContext } from '~/queries/types'\nimport { ProductKey } from '~/types'\n\nimport { dataNodeLogic } from '../DataNode/dataNodeLogic'\nimport { getMetric } from './definitions'\nimport { WebVitalsContent } from './WebVitalsContent'\nimport { WebVitalsTab } from './WebVitalsTab'\n\nlet uniqueNode = 0\nexport function WebVitals(props: {\n    query: WebVitalsQuery\n    cachedResults?: AnyResponseType\n    context: QueryContext\n}): JSX.Element | null {\n    const { onData, loadPriority, dataNodeCollectionId } = props.context.insightProps ?? {}\n    const [key] = useState(() => `WebVitals.${uniqueNode++}`)\n\n    const logic = dataNodeLogic({\n        query: props.query,\n        key,\n        cachedResults: props.cachedResults,\n        loadPriority,\n        onData,\n        dataNodeCollectionId: dataNodeCollectionId ?? key,\n    })\n\n    const { webVitalsPercentile, webVitalsTab, webVitalsMetricQuery } = useValues(webAnalyticsLogic)\n    const { setWebVitalsTab } = useActions(webAnalyticsLogic)\n    const { response, responseLoading } = useValues(logic)\n\n    // Manually handle loading state when loading to avoid showing stale data while refreshing\n    const webVitalsQueryResponse = responseLoading ? undefined : (response as WebVitalsQueryResponse | undefined)\n\n    const INP = useMemo(\n        () => getMetric(webVitalsQueryResponse?.results, 'INP', webVitalsPercentile),\n        [webVitalsQueryResponse, webVitalsPercentile]\n    )\n    const LCP = useMemo(\n        () => getMetric(webVitalsQueryResponse?.results, 'LCP', webVitalsPercentile),\n        [webVitalsQueryResponse, webVitalsPercentile]\n    )\n    const CLS = useMemo(\n        () => getMetric(webVitalsQueryResponse?.results, 'CLS', webVitalsPercentile),\n        [webVitalsQueryResponse, webVitalsPercentile]\n    )\n    const FCP = useMemo(\n        () => getMetric(webVitalsQueryResponse?.results, 'FCP', webVitalsPercentile),\n        [webVitalsQueryResponse, webVitalsPercentile]\n    )\n\n    return (\n        <div className=\"flex flex-col flex-1 gap-4\">\n            <div className=\"grid gap-2 grid-cols-1 sm:grid-cols-2 xl:grid-cols-4\">\n                <WebVitalsTab\n                    metric=\"INP\"\n                    value={INP}\n                    isActive={webVitalsTab === 'INP'}\n                    setTab={() => setWebVitalsTab('INP')}\n                />\n                <WebVitalsTab\n                    metric=\"LCP\"\n                    value={LCP}\n                    isActive={webVitalsTab === 'LCP'}\n                    setTab={() => setWebVitalsTab('LCP')}\n                />\n                <WebVitalsTab\n                    metric=\"FCP\"\n                    value={FCP}\n                    isActive={webVitalsTab === 'FCP'}\n                    setTab={() => setWebVitalsTab('FCP')}\n                />\n                <WebVitalsTab\n                    metric=\"CLS\"\n                    value={CLS}\n                    isActive={webVitalsTab === 'CLS'}\n                    setTab={() => setWebVitalsTab('CLS')}\n                />\n            </div>\n\n            <div className=\"flex flex-col sm:flex-row gap-2\">\n                <WebVitalsContent webVitalsQueryResponse={webVitalsQueryResponse} />\n                <div className=\"flex flex-col flex-1 bg-surface-primary rounded border p-4\">\n                    <Query\n                        query={webVitalsMetricQuery}\n                        readOnly\n                        embedded\n                        context={{ renderEmptyStateAsSkeleton: true }}\n                    />\n\n                    <div className=\"flex w-full justify-end\">\n                        <LemonButton\n                            to={urls.insightNew({ query: webVitalsMetricQuery })}\n                            icon={<IconOpenInNew />}\n                            size=\"small\"\n                            type=\"secondary\"\n                            onClick={() => {\n                                void addProductIntentForCrossSell({\n                                    from: ProductKey.WEB_ANALYTICS,\n                                    to: ProductKey.PRODUCT_ANALYTICS,\n                                    intent_context: ProductIntentContext.WEB_VITALS_INSIGHT,\n                                })\n                            }}\n                        >\n                            Open as new Insight\n                        </LemonButton>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n", "import { IconInfo } from '@posthog/icons'\nimport { LemonSkeleton, Tooltip } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { useMemo } from 'react'\nimport { webAnalyticsLogic } from 'scenes/web-analytics/webAnalyticsLogic'\n\nimport { WebVitalsQueryResponse } from '~/queries/schema/schema-general'\n\nimport {\n    EXPERIENCE_PER_BAND,\n    getMetric,\n    getMetricBand,\n    getThresholdColor,\n    GRADE_PER_BAND,\n    ICON_PER_BAND,\n    LONG_METRIC_NAME,\n    METRIC_DESCRIPTION,\n    POSITIONING_PER_BAND,\n    QUANTIFIER_PER_BAND,\n    VALUES_PER_BAND,\n    WEB_VITALS_THRESHOLDS,\n} from './definitions'\n\ntype WebVitalsContentProps = {\n    webVitalsQueryResponse?: WebVitalsQueryResponse\n}\n\nexport const WebVitalsContent = ({ webVitalsQueryResponse }: WebVitalsContentProps): JSX.Element => {\n    const { webVitalsTab, webVitalsPercentile } = useValues(webAnalyticsLogic)\n\n    const value = useMemo(\n        () => getMetric(webVitalsQueryResponse?.results, webVitalsTab, webVitalsPercentile),\n        [webVitalsQueryResponse, webVitalsPercentile, webVitalsTab]\n    )\n\n    const withMilliseconds = (values: number[]): string =>\n        webVitalsTab === 'CLS' ? values.join(' and ') : values.map((value) => `${value}ms`).join(' and ')\n\n    const color = getThresholdColor(value, webVitalsTab)\n    const band = getMetricBand(value, webVitalsTab)\n\n    // NOTE: `band` will only return `none` if the value is undefined,\n    // so this is basically the same check twice, but we need that to make TS happy\n    if (value === undefined || band === 'none') {\n        return <LemonSkeleton fade className=\"w-full h-40 rounded sm:w-[30%]\" />\n    }\n\n    const grade = GRADE_PER_BAND[band]\n    const threshold = WEB_VITALS_THRESHOLDS[webVitalsTab]\n\n    const Icon = ICON_PER_BAND[band]\n    const positioning = POSITIONING_PER_BAND[band]\n    const values = withMilliseconds(VALUES_PER_BAND[band](threshold))\n\n    const quantifier = QUANTIFIER_PER_BAND[band](webVitalsPercentile)\n    const experience = EXPERIENCE_PER_BAND[band]\n\n    const unit = webVitalsTab === 'CLS' ? '' : 'ms'\n\n    return (\n        <div className=\"w-full p-4 sm:w-[30%] flex flex-col gap-2 bg-surface-primary rounded border\">\n            <span className=\"text-lg\">\n                <strong>{LONG_METRIC_NAME[webVitalsTab]}</strong>\n            </span>\n\n            <div className=\"flex flex-col\">\n                <Tooltip\n                    title={\n                        <div>\n                            Great: Below {threshold.good}\n                            {unit} <br />\n                            Needs Improvement: Between {threshold.good}\n                            {unit} and {threshold.poor}\n                            {unit} <br />\n                            Poor: Above {threshold.poor}\n                            {unit}\n                        </div>\n                    }\n                >\n                    <strong>{grade}</strong>\n                    <IconInfo className=\"inline-block ml-1\" />\n                </Tooltip>\n\n                <span>\n                    <Icon className=\"inline-block mr-1\" style={{ color }} />\n                    {positioning} {values}\n                </span>\n            </div>\n\n            <div className=\"text-xs text-secondary-foreground\">\n                {quantifier} {experience}\n            </div>\n\n            <hr className=\"my-2\" />\n\n            <span>{METRIC_DESCRIPTION[webVitalsTab]}</span>\n        </div>\n    )\n}\n", "import { IconInfo } from '@posthog/icons'\nimport { LemonSkeleton, Tooltip } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\n\nimport { WebVitalsMetric } from '~/queries/schema/schema-general'\n\nimport { getThresholdColor, getValueWithUnit, LONG_METRIC_NAME, METRIC_DESCRIPTION } from './definitions'\nimport { WebVitalsProgressBar } from './WebVitalsProgressBar'\n\ntype WebVitalsTabProps = {\n    value: number | undefined\n    metric: WebVitalsMetric\n    isActive: boolean\n    setTab?: () => void\n}\n\nexport function WebVitalsTab({ value, metric, isActive, setTab }: WebVitalsTabProps): JSX.Element {\n    const label = LONG_METRIC_NAME[metric]\n\n    const { value: parsedValue, unit } = getValueWithUnit(value, metric)\n    const color = getThresholdColor(value, metric)\n\n    return (\n        <div\n            onClick={setTab}\n            className={clsx(\n                'flex-1 gap-2 border p-2 bg-surface-primary rounded items-center sm:items-start flex flex-col justify-between cursor-pointer',\n                isActive && 'border-accent-primary border-2'\n            )}\n        >\n            <div className=\"text-sm hidden sm:flex w-full flex-row justify-between\">\n                <span>\n                    {label} ({metric})\n                </span>\n                <Tooltip title={METRIC_DESCRIPTION[metric]}>\n                    <IconInfo />\n                </Tooltip>\n            </div>\n            <div className=\"flex flex-col items-center sm:hidden\">\n                <span className=\"text-sm font-bold\">{metric}</span>\n                <span className=\"text-xs\">{label}</span>\n            </div>\n\n            <div className=\"flex flex-row items-end\">\n                <span\n                    // eslint-disable-next-line react/forbid-dom-props\n                    style={{ color }}\n                    className=\"text-2xl\"\n                >\n                    {parsedValue || <LemonSkeleton fade className=\"w-20 h-8\" />}\n                </span>\n                <span className=\"text-xs ml-1 mb-1\">{unit}</span>\n            </div>\n\n            <div className=\"w-full mt-2 hidden sm:block\">\n                <WebVitalsProgressBar value={value} metric={metric} />\n            </div>\n        </div>\n    )\n}\n", "import { WebVitalsMetric, WebVitalsMetricBand } from '~/queries/schema/schema-general'\n\nimport {\n    computePositionInBand,\n    getMetricBand,\n    getThresholdColor,\n    WEB_VITALS_COLORS,\n    WEB_VITALS_THRESHOLDS,\n} from './definitions'\n\ninterface WebVitalsProgressBarProps {\n    value?: number\n    metric: WebVitalsMetric\n}\n\nexport function WebVitalsProgressBar({ value, metric }: WebVitalsProgressBarProps): JSX.Element {\n    const band = getMetricBand(value, metric)\n\n    const threshold = WEB_VITALS_THRESHOLDS[metric]\n    const goodWidth = (threshold.good / threshold.end) * 100\n    const improvementsWidth = ((threshold.poor - threshold.good) / threshold.end) * 100\n    const poorWidth = 100 - goodWidth - improvementsWidth\n\n    return (\n        <div className=\"w-full h-1 rounded-full relative\">\n            {/* Green segment up to \"good\" threshold */}\n            <div\n                // eslint-disable-next-line react/forbid-dom-props\n                style={{\n                    width: `${goodWidth}%`,\n                    backgroundColor: band === 'good' ? `${WEB_VITALS_COLORS.good} !important` : undefined,\n                }}\n                className=\"absolute h-full rounded-full bg-surface-secondary\"\n            >\n                <IndicatorLine value={value} metric={metric} band=\"good\" />\n            </div>\n\n            {/* Yellow segment up to \"poor\" threshold */}\n            <div\n                // eslint-disable-next-line react/forbid-dom-props\n                style={{\n                    left: `${goodWidth + 1}%`,\n                    width: `${improvementsWidth - 1}%`,\n                    backgroundColor:\n                        band === 'needs_improvements'\n                            ? `${WEB_VITALS_COLORS.needs_improvements} !important`\n                            : undefined,\n                }}\n                className=\"absolute h-full rounded-full bg-surface-secondary\"\n            >\n                <IndicatorLine value={value} metric={metric} band=\"needs_improvements\" />\n            </div>\n\n            {/* Red segment after \"poor\" threshold */}\n            <div\n                // eslint-disable-next-line react/forbid-dom-props\n                style={{\n                    left: `${goodWidth + improvementsWidth + 1}%`,\n                    width: `${poorWidth - 1}%`,\n                    backgroundColor: band === 'poor' ? `${WEB_VITALS_COLORS.poor} !important` : undefined,\n                }}\n                className=\"absolute h-full rounded-full bg-surface-secondary\"\n            >\n                <IndicatorLine value={value} metric={metric} band=\"poor\" />\n            </div>\n        </div>\n    )\n}\n\ntype IndicatorLineProps = {\n    value: number | undefined\n    metric: WebVitalsMetric\n    band: WebVitalsMetricBand | 'none'\n}\n\nconst IndicatorLine = ({ value, metric, band }: IndicatorLineProps): JSX.Element | null => {\n    if (!value) {\n        return null\n    }\n\n    const thisBand = getMetricBand(value, metric)\n    if (thisBand !== band) {\n        return null\n    }\n\n    const positionInBand = computePositionInBand(value, metric)\n    const backgroundColor = getThresholdColor(value, metric)\n\n    return (\n        <div\n            // eslint-disable-next-line react/forbid-dom-props\n            style={{ left: `${positionInBand * 100}%`, backgroundColor }}\n            className=\"absolute w-0.5 h-3 -top-1\"\n        />\n    )\n}\n", "import clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { CodeEditor } from 'lib/monaco/CodeEditor'\nimport { useState } from 'react'\nimport { AutoSizer } from 'react-virtualized/dist/es/AutoSizer'\nimport { urls } from 'scenes/urls'\n\nimport { queryEditorLogic } from '~/queries/QueryEditor/queryEditorLogic'\nimport schema from '~/queries/schema.json'\nimport { QueryContext } from '~/queries/types'\n\nexport interface QueryEditorProps {\n    query: string\n    setQuery?: (query: string) => void\n    className?: string\n    aboveButton?: JSX.Element\n    context?: QueryContext\n}\n\nlet i = 0\n\nexport function QueryEditor(props: QueryEditorProps): JSX.Element {\n    const [key] = useState(() => i++)\n    const { queryInput, error, inputChanged } = useValues(queryEditorLogic({ ...props, key }))\n    const { setQueryInput, saveQuery } = useActions(queryEditorLogic({ ...props, key }))\n\n    return (\n        <>\n            {props.context?.showQueryHelp ? (\n                <div className=\"mb-2 flex flex-row flex-wrap justify-between items-center\">\n                    <div>\n                        Insight configurations follow a declarative schema. Edit them as code here. Open under{' '}\n                        <Link to={urls.debugQuery(queryInput)}>/debug</Link>.\n                    </div>\n                </div>\n            ) : null}\n            <div\n                data-attr=\"query-editor\"\n                className={clsx(\n                    'flex flex-col p-2 bg-primary space-y-2 resize-y overflow-auto h-80 rounded',\n                    props.className\n                )}\n            >\n                <div className=\"flex-1\">\n                    <AutoSizer disableWidth>\n                        {({ height }) => (\n                            <CodeEditor\n                                className=\"border\"\n                                language=\"json\"\n                                value={queryInput}\n                                onChange={(v) => setQueryInput(v ?? '')}\n                                height={height}\n                                schema={schema}\n                            />\n                        )}\n                    </AutoSizer>\n                </div>\n                {error ? (\n                    <div className=\"bg-danger text-white p-2\">\n                        <strong>Error parsing JSON:</strong> {error}\n                    </div>\n                ) : null}\n                {props.aboveButton}\n                <LemonButton\n                    onClick={saveQuery}\n                    type=\"primary\"\n                    status={error ? 'danger' : 'default'}\n                    disabled={!props.setQuery || !!error || !inputChanged}\n                    fullWidth\n                    center\n                    data-attr=\"query-editor-save\"\n                >\n                    {!props.setQuery ? 'No permission to update' : 'Update and run'}\n                </LemonButton>\n            </div>\n        </>\n    )\n}\n", "import { actions, kea, key, listeners, path, props, propsChanged, reducers, selectors } from 'kea'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast/LemonToast'\n\nimport { QueryEditorProps } from '~/queries/QueryEditor/QueryEditor'\nimport { Node } from '~/queries/schema/schema-general'\n\nimport type { queryEditorLogicType } from './queryEditorLogicType'\n\nfunction prettyJSON(source: string): string {\n    try {\n        return JSON.stringify(JSON.parse(source), null, 2) + '\\n'\n    } catch (e) {\n        return source\n    }\n}\n\nexport interface QueryEditorLogicProps extends QueryEditorProps {\n    key: number\n}\n\nexport const queryEditorLogic = kea<queryEditorLogicType>([\n    path(['queries', 'QueryEditor', 'queryEditorLogic']),\n    props({} as QueryEditorLogicProps),\n    key((props) => props.key),\n    propsChanged(({ actions, props }, oldProps) => {\n        if (props.query !== oldProps.query) {\n            actions.setQueryInput(prettyJSON(props.query))\n        }\n    }),\n    actions({\n        saveQuery: true,\n        setQueryInput: (queryInput: string) => ({ queryInput }),\n    }),\n    reducers(({ props }) => ({\n        queryInput: [prettyJSON(props.query), { setQueryInput: (_, { queryInput }) => queryInput }],\n    })),\n    selectors({\n        parsedQuery: [\n            (s) => [s.queryInput],\n            (query): { JSONQuery: Node | null; error: string | null } => {\n                let JSONQuery: Node | null = null\n                let error = null\n                try {\n                    JSONQuery = JSON.parse(query)\n                } catch (e: any) {\n                    error = e.message\n                }\n                return { JSONQuery, error }\n            },\n        ],\n        JSONQuery: [(s) => [s.parsedQuery], ({ JSONQuery }): Node | null => JSONQuery],\n        error: [(s) => [s.parsedQuery], ({ error }): string | null => error],\n        inputChanged: [(s, p) => [p.query, s.queryInput], (query, queryInput) => query !== queryInput],\n    }),\n    listeners(({ actions, props, values }) => ({\n        saveQuery: () => {\n            if (values.error) {\n                lemonToast.error(`Error parsing JSON: ${values.error}`)\n            } else {\n                const withoutFormatting = JSON.stringify(JSON.parse(values.queryInput))\n                actions.setQueryInput(prettyJSON(withoutFormatting))\n                props.setQuery?.(withoutFormatting)\n            }\n        },\n    })),\n])\n", "import './Components/Chart.scss'\n\nimport { IconGear } from '@posthog/icons'\nimport { LemonButton, LemonDivider } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { BindLogic, useActions, useValues } from 'kea'\nimport { router } from 'kea-router'\nimport { ExportButton } from 'lib/components/ExportButton/ExportButton'\nimport { LoadingBar } from 'lib/lemon-ui/LoadingBar'\nimport { useCallback, useState } from 'react'\nimport { DatabaseTableTreeWithItems } from 'scenes/data-warehouse/external/DataWarehouseTables'\nimport { InsightErrorState } from 'scenes/insights/EmptyStates'\nimport { insightDataLogic } from 'scenes/insights/insightDataLogic'\nimport { insightLogic } from 'scenes/insights/insightLogic'\nimport { insightSceneLogic } from 'scenes/insights/insightSceneLogic'\nimport { HogQLBoldNumber } from 'scenes/insights/views/BoldNumber/BoldNumber'\nimport { urls } from 'scenes/urls'\n\nimport { insightVizDataCollectionId, insightVizDataNodeKey } from '~/queries/nodes/InsightViz/InsightViz'\nimport {\n    AnyResponseType,\n    DataVisualizationNode,\n    HogQLQuery,\n    HogQLQueryResponse,\n    HogQLVariable,\n    NodeKind,\n} from '~/queries/schema/schema-general'\nimport { QueryContext } from '~/queries/types'\nimport { ChartDisplayType, ExportContext, ExporterFormat, InsightLogicProps } from '~/types'\n\nimport { dataNodeLogic, DataNodeLogicProps } from '../DataNode/dataNodeLogic'\nimport { DateRange } from '../DataNode/DateRange'\nimport { ElapsedTime } from '../DataNode/ElapsedTime'\nimport { Reload } from '../DataNode/Reload'\nimport { QueryFeature } from '../DataTable/queryFeatures'\nimport { HogQLQueryEditor } from '../HogQLQuery/HogQLQueryEditor'\nimport { LineGraph } from './Components/Charts/LineGraph'\nimport { SideBar } from './Components/SideBar'\nimport { Table } from './Components/Table'\nimport { TableDisplay } from './Components/TableDisplay'\nimport { AddVariableButton } from './Components/Variables/AddVariableButton'\nimport { variableModalLogic } from './Components/Variables/variableModalLogic'\nimport { VariablesForInsight } from './Components/Variables/Variables'\nimport { variablesLogic } from './Components/Variables/variablesLogic'\nimport { dataVisualizationLogic, DataVisualizationLogicProps } from './dataVisualizationLogic'\nimport { displayLogic } from './displayLogic'\n\nexport interface DataTableVisualizationProps {\n    uniqueKey?: string | number\n    query: DataVisualizationNode\n    setQuery: (query: DataVisualizationNode) => void\n    context?: QueryContext<DataVisualizationNode>\n    /* Cached Results are provided when shared or exported,\n    the data node logic becomes read only implicitly */\n    cachedResults?: AnyResponseType\n    readOnly?: boolean\n    exportContext?: ExportContext\n    /** Dashboard variables to override the ones in the query */\n    variablesOverride?: Record<string, HogQLVariable> | null\n}\n\nlet uniqueNode = 0\n\nexport function DataTableVisualization({\n    uniqueKey,\n    query,\n    setQuery,\n    context,\n    cachedResults,\n    readOnly,\n    variablesOverride,\n}: DataTableVisualizationProps): JSX.Element {\n    const [key] = useState(`DataVisualizationNode.${uniqueKey ?? uniqueNode++}`)\n    const insightProps: InsightLogicProps<DataVisualizationNode> = context?.insightProps || {\n        dashboardItemId: `new-AdHoc.${key}`,\n        query,\n        setQuery,\n        dataNodeCollectionId: key,\n    }\n\n    const vizKey = insightVizDataNodeKey(insightProps)\n    const dataNodeCollectionId = insightVizDataCollectionId(insightProps, key)\n    const { insightMode } = useValues(insightSceneLogic)\n    const dataVisualizationLogicProps: DataVisualizationLogicProps = {\n        key: vizKey,\n        query,\n        dashboardId: insightProps.dashboardId,\n        dataNodeCollectionId,\n        loadPriority: insightProps.loadPriority,\n        insightMode,\n        setQuery,\n        cachedResults,\n        variablesOverride,\n    }\n\n    const dataNodeLogicProps: DataNodeLogicProps = {\n        query: query.source,\n        key: vizKey,\n        cachedResults,\n        loadPriority: insightProps.loadPriority,\n        dataNodeCollectionId,\n        variablesOverride,\n    }\n\n    const { insightProps: insightLogicProps } = useValues(insightLogic)\n    const { exportContext } = useValues(insightDataLogic(insightLogicProps))\n\n    return (\n        <BindLogic logic={dataNodeLogic} props={dataNodeLogicProps}>\n            <BindLogic logic={dataVisualizationLogic} props={dataVisualizationLogicProps}>\n                <BindLogic logic={displayLogic} props={{ key: dataVisualizationLogicProps.key }}>\n                    <BindLogic\n                        logic={variablesLogic}\n                        props={{\n                            key: dataVisualizationLogicProps.key,\n                            readOnly: readOnly ?? false,\n                            dashboardId: insightProps.dashboardId,\n                        }}\n                    >\n                        <BindLogic logic={variableModalLogic} props={{ key: dataVisualizationLogicProps.key }}>\n                            <InternalDataTableVisualization\n                                uniqueKey={key}\n                                query={query}\n                                setQuery={setQuery}\n                                context={context}\n                                cachedResults={cachedResults}\n                                readOnly={readOnly}\n                                exportContext={exportContext}\n                            />\n                        </BindLogic>\n                    </BindLogic>\n                </BindLogic>\n            </BindLogic>\n        </BindLogic>\n    )\n}\n\nfunction InternalDataTableVisualization(props: DataTableVisualizationProps): JSX.Element {\n    const { readOnly } = props\n\n    const {\n        query,\n        visualizationType,\n        showEditingUI,\n        showResultControls,\n        sourceFeatures,\n        response,\n        responseLoading,\n        responseError,\n        queryCancelled,\n        isChartSettingsPanelOpen,\n    } = useValues(dataVisualizationLogic)\n    const { setEditorQuery } = useActions(variablesLogic)\n\n    const { toggleChartSettingsPanel } = useActions(dataVisualizationLogic)\n\n    const setQuerySource = useCallback(\n        (source: HogQLQuery) => props.setQuery?.({ ...props.query, source }),\n        [props.setQuery, props.query]\n    )\n\n    let component: JSX.Element | null = null\n\n    // TODO(@Gilbert09): Better loading support for all components - e.g. using the `loading` param of `Table`\n    if (!showEditingUI && (!response || responseLoading)) {\n        component = (\n            <div className=\"flex flex-col flex-1 justify-center items-center bg-surface-primary h-full\">\n                <LoadingBar />\n            </div>\n        )\n    } else if (visualizationType === ChartDisplayType.ActionsTable) {\n        component = (\n            <Table\n                uniqueKey={props.uniqueKey}\n                query={query}\n                context={props.context}\n                cachedResults={props.cachedResults as HogQLQueryResponse | undefined}\n            />\n        )\n    } else if (\n        visualizationType === ChartDisplayType.ActionsLineGraph ||\n        visualizationType === ChartDisplayType.ActionsBar ||\n        visualizationType === ChartDisplayType.ActionsAreaGraph ||\n        visualizationType === ChartDisplayType.ActionsStackedBar\n    ) {\n        component = <LineGraph />\n    } else if (visualizationType === ChartDisplayType.BoldNumber) {\n        component = <HogQLBoldNumber />\n    }\n\n    return (\n        <div className=\"DataVisualization flex flex-1 gap-2\">\n            {!readOnly && showEditingUI && (\n                <div className=\"max-sm:hidden max-w-xs\">\n                    <DatabaseTableTreeWithItems inline />\n                </div>\n            )}\n            <div className=\"relative w-full flex flex-col gap-4 flex-1 overflow-hidden\">\n                {!readOnly && showEditingUI && (\n                    <>\n                        <HogQLQueryEditor\n                            query={query.source}\n                            queryResponse={response ?? undefined}\n                            setQuery={setQuerySource}\n                            embedded\n                            onChange={setEditorQuery}\n                        />\n                    </>\n                )}\n                {!readOnly && showResultControls && (\n                    <>\n                        <LemonDivider className=\"my-0\" />\n                        <div className=\"flex gap-4 justify-between flex-wrap px-px\">\n                            <div className=\"flex gap-4 items-center\">\n                                <Reload />\n                                <ElapsedTime />\n                            </div>\n                            <div className=\"flex gap-4 items-center\">\n                                <div className=\"flex gap-4 items-center flex-wrap\">\n                                    <AddVariableButton />\n\n                                    {sourceFeatures.has(QueryFeature.dateRangePicker) &&\n                                        !router.values.location.pathname.includes(urls.dataWarehouse()) && ( // decouple this component from insights tab and datawarehouse scene\n                                            <DateRange\n                                                key=\"date-range\"\n                                                query={query.source}\n                                                setQuery={(query) => {\n                                                    if (query.kind === NodeKind.HogQLQuery) {\n                                                        setQuerySource(query)\n                                                    }\n                                                }}\n                                            />\n                                        )}\n\n                                    <TableDisplay />\n\n                                    <LemonButton\n                                        icon={<IconGear />}\n                                        type={isChartSettingsPanelOpen ? 'primary' : 'secondary'}\n                                        onClick={() => toggleChartSettingsPanel()}\n                                        tooltip=\"Visualization settings\"\n                                    />\n\n                                    {props.exportContext && (\n                                        <ExportButton\n                                            disabledReason={\n                                                visualizationType != ChartDisplayType.ActionsTable &&\n                                                'Only table results are exportable'\n                                            }\n                                            type=\"secondary\"\n                                            items={[\n                                                {\n                                                    export_format: ExporterFormat.CSV,\n                                                    export_context: props.exportContext,\n                                                },\n                                                {\n                                                    export_format: ExporterFormat.XLSX,\n                                                    export_context: props.exportContext,\n                                                },\n                                            ]}\n                                        />\n                                    )}\n                                </div>\n                            </div>\n                        </div>\n                    </>\n                )}\n\n                <VariablesForInsight />\n\n                <div className=\"flex flex-1 flex-row gap-4\">\n                    {showEditingUI && isChartSettingsPanelOpen && (\n                        <div className=\"h-full\">\n                            <SideBar />\n                        </div>\n                    )}\n                    <div className={clsx('w-full h-full flex-1 overflow-auto')}>\n                        {visualizationType !== ChartDisplayType.ActionsTable && responseError ? (\n                            <div\n                                className={clsx('rounded bg-surface-primary relative flex flex-1 flex-col p-2', {\n                                    border: showEditingUI,\n                                })}\n                            >\n                                <InsightErrorState\n                                    query={props.query}\n                                    excludeDetail\n                                    title={\n                                        queryCancelled\n                                            ? 'The query was cancelled'\n                                            : response && 'error' in response\n                                            ? (response as any).error\n                                            : responseError\n                                    }\n                                />\n                            </div>\n                        ) : (\n                            component\n                        )}\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n", "import { useValues } from 'kea'\nimport { LoadingBar } from 'lib/lemon-ui/LoadingBar'\nimport { insightDataLogic } from 'scenes/insights/insightDataLogic'\nimport { insightLogic } from 'scenes/insights/insightLogic'\n\nimport { Query } from '~/queries/Query/Query'\nimport { SavedInsightNode } from '~/queries/schema/schema-general'\nimport { QueryContext } from '~/queries/types'\nimport { InsightLogicProps } from '~/types'\n\ninterface InsightProps {\n    query: SavedInsightNode\n    context?: QueryContext\n    embedded?: boolean\n    readOnly?: boolean\n}\n\nexport function SavedInsight({ query: propsQuery, context, embedded, readOnly }: InsightProps): JSX.Element {\n    const insightProps: InsightLogicProps = { dashboardItemId: propsQuery.shortId }\n    const { insight, insightLoading } = useValues(insightLogic(insightProps))\n    const { query: dataQuery } = useValues(insightDataLogic(insightProps))\n\n    if (insightLoading) {\n        return (\n            <div className=\"text-center\">\n                <LoadingBar />\n            </div>\n        )\n    }\n\n    const query = { ...propsQuery, ...dataQuery, full: propsQuery.full }\n\n    return (\n        <Query\n            query={query}\n            cachedResults={insight}\n            context={{ ...context, insightProps }}\n            embedded={embedded}\n            readOnly={readOnly}\n        />\n    )\n}\n", "import clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { parseAliasToReadable } from 'lib/components/PathCleanFilters/PathCleanFilterItem'\nimport { LemonSkeleton } from 'lib/lemon-ui/LemonSkeleton'\nimport { useMemo, useState } from 'react'\nimport { webAnalyticsLogic } from 'scenes/web-analytics/webAnalyticsLogic'\n\nimport {\n    AnyResponseType,\n    WebVitalsMetricBand,\n    WebVitalsPathBreakdownQuery,\n    WebVitalsPathBreakdownQueryResponse,\n} from '~/queries/schema/schema-general'\nimport { QueryContext } from '~/queries/types'\nimport { PropertyFilterType } from '~/types'\n\nimport { dataNodeLogic } from '../DataNode/dataNodeLogic'\nimport {\n    computePositionInBand,\n    getValueWithUnit,\n    ICON_PER_BAND,\n    WEB_VITALS_COLORS,\n    WEB_VITALS_THRESHOLDS,\n} from './definitions'\n\nlet uniqueNode = 0\nexport function WebVitalsPathBreakdown(props: {\n    query: WebVitalsPathBreakdownQuery\n    cachedResults?: AnyResponseType\n    context: QueryContext\n}): JSX.Element | null {\n    const { onData, loadPriority, dataNodeCollectionId } = props.context.insightProps ?? {}\n    const [key] = useState(() => `WebVitalsPathBreakdown.${uniqueNode++}`)\n\n    const logic = dataNodeLogic({\n        query: props.query,\n        key,\n        cachedResults: props.cachedResults,\n        loadPriority,\n        onData,\n        dataNodeCollectionId: dataNodeCollectionId ?? key,\n    })\n\n    const { response, responseLoading } = useValues(logic)\n\n    // Properly type it before passing to Content\n    const webVitalsQueryResponse = response as WebVitalsPathBreakdownQueryResponse | undefined\n\n    return (\n        <div className=\"border rounded bg-surface-primary grid grid-cols-1 md:grid-cols-3 divide-y md:divide-y-0 md:divide-x min-h-60 h-full\">\n            <div className=\"p-4\">\n                <Header band=\"good\" label=\"Good\" />\n                <Content band=\"good\" response={webVitalsQueryResponse} responseLoading={responseLoading} />\n            </div>\n            <div className=\"p-4\">\n                <Header band=\"needs_improvements\" label=\"Needs Improvements\" />\n                <Content\n                    band=\"needs_improvements\"\n                    response={webVitalsQueryResponse}\n                    responseLoading={responseLoading}\n                />\n            </div>\n            <div className=\"p-4\">\n                <Header band=\"poor\" label=\"Poor\" />\n                <Content band=\"poor\" response={webVitalsQueryResponse} responseLoading={responseLoading} />\n            </div>\n        </div>\n    )\n}\n\nconst Header = ({ band, label }: { band: WebVitalsMetricBand; label: string }): JSX.Element => {\n    const { webVitalsTab } = useValues(webAnalyticsLogic)\n\n    const Icon = ICON_PER_BAND[band]\n\n    const thresholdText = useMemo(() => {\n        const threshold = WEB_VITALS_THRESHOLDS[webVitalsTab]\n\n        const { value: poorValue, unit: poorUnit } = getValueWithUnit(threshold.poor, webVitalsTab)\n        const { value: goodValue, unit: goodUnit } = getValueWithUnit(threshold.good, webVitalsTab)\n\n        if (band === 'poor') {\n            return (\n                <>\n                    &gt; {poorValue}\n                    {poorUnit}\n                </>\n            )\n        }\n\n        if (band === 'needs_improvements') {\n            return (\n                <>\n                    {goodValue}\n                    {goodUnit} - {poorValue}\n                    {poorUnit}\n                </>\n            )\n        }\n\n        if (band === 'good') {\n            return (\n                <>\n                    &lt; {goodValue}\n                    {goodUnit}\n                </>\n            )\n        }\n\n        return null\n    }, [band, webVitalsTab])\n\n    return (\n        <div className=\"flex flex-row justify-between\">\n            {/* eslint-disable-next-line react/forbid-dom-props */}\n            <span className=\"flex flex-row gap-1 items-center font-semibold\" style={{ color: WEB_VITALS_COLORS[band] }}>\n                <Icon className=\"w-6 h-6\" />\n                {label}\n            </span>\n            <span className=\"text-sm text-secondary\">{thresholdText}</span>\n        </div>\n    )\n}\n\nconst SKELETON_HEIGHT = {\n    good: 'h-40',\n    needs_improvements: 'h-60',\n    poor: 'h-20',\n} as const\n\nconst Content = ({\n    band,\n    response,\n    responseLoading,\n}: {\n    band: WebVitalsMetricBand\n    response: WebVitalsPathBreakdownQueryResponse | undefined\n    responseLoading: boolean\n}): JSX.Element => {\n    const { webVitalsTab, isPathCleaningEnabled } = useValues(webAnalyticsLogic)\n    const { togglePropertyFilter } = useActions(webAnalyticsLogic)\n\n    const values = response?.results[0][band]\n\n    const loadedValues = values != null\n    const hasNoValues = values?.length === 0\n\n    return (\n        <div className={clsx('pt-4', { 'h-full': loadedValues })}>\n            <div className={clsx('flex flex-col gap-1', { 'justify-center': hasNoValues, 'h-full': loadedValues })}>\n                {responseLoading ? (\n                    <LemonSkeleton fade className={clsx('w-full', SKELETON_HEIGHT[band])} />\n                ) : values?.length ? (\n                    values?.map(({ path, value }) => {\n                        const width = computePositionInBand(value, webVitalsTab) * 100\n\n                        const { value: parsedValue, unit } = getValueWithUnit(value, webVitalsTab)\n\n                        return (\n                            <div\n                                className=\"flex flex-row items-center justify-between relative w-full p-2 py-1\"\n                                key={path}\n                            >\n                                <div\n                                    className=\"absolute top-0 left-0 h-full opacity-80 bg-surface-secondary\"\n                                    // eslint-disable-next-line react/forbid-dom-props\n                                    style={{ width }}\n                                />\n                                <span\n                                    title={path}\n                                    className=\"relative z-10 truncate mr-2 flex-1 cursor-pointer hover:underline\"\n                                    onClick={() => {\n                                        togglePropertyFilter(PropertyFilterType.Event, '$pathname', path)\n                                    }}\n                                >\n                                    {isPathCleaningEnabled ? parseAliasToReadable(path) : path}\n                                </span>\n                                <span className=\"relative z-10 flex-shrink-0\">\n                                    {parsedValue}\n                                    {unit}\n                                </span>\n                            </div>\n                        )\n                    })\n                ) : (\n                    <div className=\"text-center\">\n                        <span>{band === 'good' ? '\uD83D\uDE3F' : '\uD83D\uDE80'}</span>\n                        <span className=\"text-secondary\">No scores in this band</span>\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}\n", "import { IconDatabase } from '@posthog/icons'\nimport { LemonButton, LemonModal } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { capitalizeFirstLetter } from 'kea-forms'\nimport { humanFriendlyDetailedTime } from 'lib/utils'\nimport { Dispatch, SetStateAction } from 'react'\nimport { DatabaseTable } from 'scenes/data-management/database/DatabaseTable'\n\nimport { DatabaseSchemaTable } from '~/queries/schema/schema-general'\n\nimport { dataWarehouseSceneLogic } from '../settings/dataWarehouseSceneLogic'\n\nexport function TableData(): JSX.Element {\n    const {\n        selectedRow: table,\n        isEditingSavedQuery,\n        inEditSchemaMode,\n        editSchemaIsLoading,\n    } = useValues(dataWarehouseSceneLogic)\n    const { setIsEditingSavedQuery, toggleEditSchemaMode, updateSelectedSchema, saveSchema, cancelEditSchema } =\n        useActions(dataWarehouseSceneLogic)\n\n    const isExternalTable = table?.type === 'data_warehouse'\n    const isManuallyLinkedTable = isExternalTable && !table.source\n\n    return (\n        <div className=\"border rounded p-3 bg-surface-primary\">\n            {table ? (\n                <>\n                    <div className=\"flex flex-row justify-between items-center gap-2\">\n                        <h2 className=\"flex-1 text-wrap break-all leading-4\">\n                            <IconDatabase /> {table.name}\n                        </h2>\n                        {isEditingSavedQuery && (\n                            <div className=\"flex flex-row gap-2 justify-between\">\n                                <LemonButton type=\"secondary\" onClick={() => setIsEditingSavedQuery(false)}>\n                                    Cancel\n                                </LemonButton>\n                            </div>\n                        )}\n                        {inEditSchemaMode && (\n                            <div className=\"flex flex-row gap-2 justify-between\">\n                                <LemonButton\n                                    type=\"primary\"\n                                    loading={editSchemaIsLoading}\n                                    onClick={() => {\n                                        saveSchema()\n                                    }}\n                                >\n                                    Save schema\n                                </LemonButton>\n                                <LemonButton\n                                    type=\"secondary\"\n                                    disabledReason={editSchemaIsLoading && 'Schema is saving...'}\n                                    onClick={() => {\n                                        cancelEditSchema()\n                                    }}\n                                >\n                                    Cancel edit\n                                </LemonButton>\n                            </div>\n                        )}\n                        {!inEditSchemaMode && !isEditingSavedQuery && (\n                            <div className=\"flex flex-row gap-2 justify-between\">\n                                {isManuallyLinkedTable && (\n                                    <LemonButton\n                                        type=\"primary\"\n                                        onClick={() => {\n                                            toggleEditSchemaMode()\n                                        }}\n                                    >\n                                        Edit schema\n                                    </LemonButton>\n                                )}\n                            </div>\n                        )}\n                    </div>\n                    {table.type == 'data_warehouse' && (\n                        <div className=\"flex flex-col\">\n                            {table.source && table.schema && (\n                                <>\n                                    <span className=\"card-secondary mt-2\">Last Synced At</span>\n                                    <span>\n                                        {table.schema.last_synced_at\n                                            ? humanFriendlyDetailedTime(\n                                                  table.schema.last_synced_at,\n                                                  'MMMM DD, YYYY',\n                                                  'h:mm A'\n                                              )\n                                            : 'Not yet synced'}\n                                    </span>\n                                </>\n                            )}\n\n                            {!table.source && (\n                                <>\n                                    <span className=\"card-secondary mt-2\">Files URL pattern</span>\n                                    <span className=\"break-all\">{table.url_pattern}</span>\n\n                                    <span className=\"card-secondary mt-2\">File format</span>\n                                    <span>{table.format}</span>\n                                </>\n                            )}\n                        </div>\n                    )}\n\n                    {!isEditingSavedQuery && (\n                        <div className=\"mt-2\">\n                            <span className=\"card-secondary\">Columns</span>\n                            <DatabaseTable\n                                table={table.name}\n                                tables={[table]}\n                                inEditSchemaMode={inEditSchemaMode}\n                                schemaOnChange={(key, type) => updateSelectedSchema(key, type)}\n                            />\n                        </div>\n                    )}\n                </>\n            ) : (\n                <div className=\"px-4 py-3 h-100 col-span-2 flex justify-center items-center\" />\n            )}\n        </div>\n    )\n}\n\nexport function DeleteTableModal({\n    table,\n    isOpen,\n    setIsOpen,\n    onDelete,\n}: {\n    table: DatabaseSchemaTable\n    isOpen: boolean\n    onDelete: () => void\n    setIsOpen: Dispatch<SetStateAction<boolean>>\n}): JSX.Element {\n    let subject\n\n    if (table.type === 'view') {\n        subject = 'view'\n    } else {\n        subject = 'table'\n    }\n\n    return (\n        <LemonModal\n            title={`Delete ${subject}?`}\n            onClose={() => setIsOpen(false)}\n            footer={\n                <>\n                    <LemonButton type=\"secondary\" onClick={() => setIsOpen(false)}>\n                        Cancel\n                    </LemonButton>\n                    <LemonButton\n                        type=\"secondary\"\n                        status=\"danger\"\n                        onClick={() => onDelete()}\n                    >{`Delete ${table.name}`}</LemonButton>\n                </>\n            }\n            isOpen={isOpen}\n        >\n            <p>\n                {capitalizeFirstLetter(subject)} deletion <b>cannot be undone</b>. All{' '}\n                {table.type === 'view' ? 'joins' : 'views and joins'} related to this {subject} will be deleted\n            </p>\n        </LemonModal>\n    )\n}\n", "import { LemonButton, LemonSelect, lemonToast, Spinner } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonTable } from 'lib/lemon-ui/LemonTable'\nimport { LemonTag, LemonTagType } from 'lib/lemon-ui/LemonTag/LemonTag'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { deleteWithUndo } from 'lib/utils/deleteWithUndo'\nimport { useCallback } from 'react'\nimport { dataWarehouseJoinsLogic } from 'scenes/data-warehouse/external/dataWarehouseJoinsLogic'\nimport { dataWarehouseSceneLogic } from 'scenes/data-warehouse/settings/dataWarehouseSceneLogic'\nimport { viewLinkLogic } from 'scenes/data-warehouse/viewLinkLogic'\nimport { projectLogic } from 'scenes/projectLogic'\nimport { urls } from 'scenes/urls'\n\nimport { DatabaseSchemaTable, DatabaseSerializedFieldType } from '~/queries/schema/schema-general'\n\ninterface DatabaseTableProps {\n    table: string\n    tables: DatabaseSchemaTable[]\n    inEditSchemaMode: boolean\n    schemaOnChange?: (columnKey: string, columnType: DatabaseSerializedFieldType) => void\n}\n\nconst nonEditableSchemaTypes = [\n    'lazy_table',\n    'virtual_table',\n    'field_traverser',\n    'expression',\n    'view',\n    'materialized_view',\n] as const\ntype NonEditableSchemaTypes = Extract<DatabaseSerializedFieldType, (typeof nonEditableSchemaTypes)[number]>\nconst editSchemaOptions: Record<Exclude<DatabaseSerializedFieldType, NonEditableSchemaTypes>, string> = {\n    integer: 'Integer',\n    float: 'Float',\n    string: 'String',\n    datetime: 'DateTime',\n    date: 'Date',\n    boolean: 'Boolean',\n    array: 'Array',\n    json: 'JSON',\n}\nconst editSchemaOptionsAsArray = Object.keys(editSchemaOptions).map((n) => ({ value: n, label: editSchemaOptions[n] }))\n\nconst isNonEditableSchemaType = (schemaType: unknown): schemaType is NonEditableSchemaTypes => {\n    return typeof schemaType === 'string' && nonEditableSchemaTypes.includes(schemaType as NonEditableSchemaTypes)\n}\nconst JoinsMoreMenu = ({ tableName, fieldName }: { tableName: string; fieldName: string }): JSX.Element => {\n    const { currentProjectId } = useValues(projectLogic)\n    const { toggleEditJoinModal } = useActions(viewLinkLogic)\n    const { joins, joinsLoading } = useValues(dataWarehouseJoinsLogic)\n    const { loadJoins } = useActions(dataWarehouseJoinsLogic)\n    const { loadDatabase } = useActions(dataWarehouseSceneLogic)\n\n    const join = joins.find((n) => n.source_table_name === tableName && n.field_name === fieldName)\n\n    const overlay = useCallback(\n        () =>\n            joinsLoading || !join ? (\n                <Spinner />\n            ) : (\n                <>\n                    <LemonButton fullWidth onClick={() => void toggleEditJoinModal(join)}>\n                        Edit\n                    </LemonButton>\n                    <LemonButton\n                        status=\"danger\"\n                        fullWidth\n                        onClick={() => {\n                            void deleteWithUndo({\n                                endpoint: `projects/${currentProjectId}/warehouse_view_link`,\n                                object: {\n                                    id: join.id,\n                                    name: `${join.field_name} on ${join.source_table_name}`,\n                                },\n                                callback: () => {\n                                    loadDatabase()\n                                    loadJoins()\n                                },\n                            }).catch((e) => {\n                                lemonToast.error(`Failed to delete warehouse view link: ${e.detail}`)\n                            })\n                        }}\n                    >\n                        Delete\n                    </LemonButton>\n                </>\n            ),\n        [joinsLoading, join]\n    )\n\n    return <More overlay={overlay()} />\n}\n\nexport function DatabaseTable({ table, tables, inEditSchemaMode, schemaOnChange }: DatabaseTableProps): JSX.Element {\n    const dataSource = Object.values(tables.find(({ name }) => name === table)?.fields ?? {})\n    const { dataWarehouseTables, databaseLoading } = useValues(dataWarehouseSceneLogic)\n\n    return (\n        <LemonTable\n            dataSource={dataSource}\n            loading={databaseLoading}\n            disableTableWhileLoading={false}\n            columns={[\n                {\n                    title: 'Column',\n                    key: 'key',\n                    dataIndex: 'name',\n                    render: function RenderColumn(column) {\n                        return <code>{column}</code>\n                    },\n                },\n                {\n                    title: 'Type',\n                    key: 'type',\n                    dataIndex: 'type',\n                    render: function RenderType(_, { name, type, schema_valid }) {\n                        if (inEditSchemaMode && !isNonEditableSchemaType(type)) {\n                            return (\n                                <LemonSelect\n                                    options={editSchemaOptionsAsArray}\n                                    value={type}\n                                    onChange={(newValue) => {\n                                        if (schemaOnChange) {\n                                            schemaOnChange(name, newValue as DatabaseSerializedFieldType)\n                                        }\n                                    }}\n                                />\n                            )\n                        }\n\n                        if (type === 'virtual_table') {\n                            return (\n                                <LemonTag type=\"default\" className=\"uppercase\">\n                                    Virtual Table\n                                </LemonTag>\n                            )\n                        } else if (type === 'lazy_table') {\n                            return (\n                                <LemonTag type=\"default\" className=\"uppercase\">\n                                    Reference\n                                </LemonTag>\n                            )\n                        } else if (type === 'field_traverser') {\n                            return (\n                                <LemonTag type=\"default\" className=\"uppercase\">\n                                    Expression\n                                </LemonTag>\n                            )\n                        }\n\n                        const tagType: LemonTagType = schema_valid ? 'default' : 'danger'\n\n                        return (\n                            <LemonTag type={tagType} className=\"uppercase\">\n                                {type}\n                            </LemonTag>\n                        )\n                    },\n                },\n                {\n                    title: 'Info',\n                    key: 'info',\n                    dataIndex: 'type',\n                    render: function RenderInfo(type, field) {\n                        if (type === 'virtual_table' || type === 'view') {\n                            return (\n                                <>\n                                    Fields: <code>{(field as any).fields.join(', ')}</code>\n                                </>\n                            )\n                        } else if (type === 'lazy_table') {\n                            return (\n                                <>\n                                    To table: <code>{String((field as any).table)}</code>\n                                </>\n                            )\n                        } else if (type === 'field_traverser' && Array.isArray((field as any).chain)) {\n                            return <code>{(field as any).chain.join('.')}</code>\n                        } else if (table == 'events' && type == 'json' && field.name == 'properties') {\n                            return <Link to={urls.propertyDefinitions('event')}>Manage event properties</Link>\n                        } else if (table == 'persons' && type == 'json' && field.name == 'properties') {\n                            return <Link to={urls.propertyDefinitions('person')}>Manage person properties</Link>\n                        }\n\n                        if (!field.schema_valid && !inEditSchemaMode) {\n                            return (\n                                <>\n                                    <code>{field.name}</code> can't be parsed as a <code>{field.type}</code>. It will\n                                    not be queryable until this is fixed.\n                                </>\n                            )\n                        }\n\n                        return ''\n                    },\n                },\n                {\n                    width: 0,\n                    dataIndex: 'type',\n                    render: function RenderActions(_, data) {\n                        if (data.type === 'view') {\n                            return <JoinsMoreMenu tableName={table} fieldName={data.name} />\n                        }\n\n                        if (data.type === 'lazy_table' && data.table) {\n                            const isJoiningTableExternalTable = !!dataWarehouseTables.find((n) => n.name === data.table)\n                            const isSourceExternalTable = !!dataWarehouseTables.find((n) => n.name === table)\n\n                            if (isJoiningTableExternalTable || isSourceExternalTable) {\n                                return <JoinsMoreMenu tableName={table} fieldName={data.name} />\n                            }\n                        }\n\n                        return null\n                    },\n                },\n            ]}\n        />\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "import_kea_router", "import_kea_window_values", "init_dirname", "init_buffer", "init_process", "errorTrackingQuery", "orderBy", "status", "dateRange", "assignee", "filterTestAccounts", "filterGroup", "searchQuery", "customVolume", "columns", "limit", "errorTrackingIssueQuery", "issueId", "errorTrackingIssueEventsQuery", "issue", "properties", "where", "eventsQuery", "import_jsx_runtime", "loadPriorityMap", "GEOIP_TEMPLATE_IDS", "WEB_ANALYTICS_DATA_COLLECTION_NODE_ID", "INITIAL_WEB_ANALYTICS_FILTER", "INITIAL_DATE_FROM", "INITIAL_DATE_TO", "INITIAL_INTERVAL", "getDefaultInterval", "getDashboardItemId", "section", "tab", "isModal", "teamId", "persistConfig", "webAnalyticsLogic", "featureFlagLogic", "teamLogic", "userLogic", "preflightLogic", "webAnalyticsFilters", "type", "key", "value", "tabChange", "orderBy", "direction", "dateFrom", "dateTo", "interval", "isPathCleaningEnabled", "shouldFilterTestAccounts", "shouldStripQueryParams", "conversionGoal", "tileId", "tabId", "warning", "compareFilter", "percentile", "_", "oldPropertyFilters", "f", "oldValue", "isNotNil", "newValue", "newFilter", "oldTab", "oldDateFrom", "oldDateTo", "updateDatesWithInterval", "actions", "values", "s", "productTab", "breadcrumbs", "urls", "graphsTab", "sourceTab", "deviceTab", "pathTab", "geographyTab", "hasAvailableFeature", "featureFlags", "FEATURE_FLAGS", "filter", "shouldShowGeographyTile", "filterTestAccounts", "replayFilters", "dateFilter", "webVitalsTab", "webVitalsPercentile", "tablesOrderBy", "isGreaterThanMd", "currentTeam", "dateRange", "sampling", "uniqueUserSeries", "pageViewsSeries", "sessionsSeries", "uniqueConversionsSeries", "totalConversionSeries", "includeRevenue", "revenueEventsSeries", "e", "conversionRevenueSeries", "createInsightProps", "tile", "loadPriorityMap", "createGraphsTrendsTab", "id", "title", "linkText", "series", "trendsFilter", "trendsQueryProperties", "createTableTab", "breakdownBy", "source", "columns", "createSeries", "name", "math", "metric", "WEB_VITALS_THRESHOLDS", "Link", "LemonButton", "IconGear", "RETENTION_FIRST_TIME", "errorTrackingQuery", "tiles", "modalTileAndTab", "extendQuery", "query", "filters", "WEB_VITALS_COLORS", "formatQueryForNewInsight", "webVitalsResult", "pageviewResult", "pageleaveResult", "pageleaveScroll", "api_default", "webVitalsEntry", "r", "pageviewEntry", "pageleaveEntry", "pageleaveScrollEntry", "isSendingWebVitals", "isDefinitionStale", "isSendingPageViews", "isSendingPageLeaves", "isSendingPageLeavesScroll", "propertiesResponse", "hogFunctionsResponse", "property", "hogFunction", "isFromTemplate", "matchesName", "window", "stateToUrl", "_sourceTab", "_deviceTab", "_pathTab", "_geographyTab", "_graphsTab", "urlParams", "toAction", "conversionGoalActionId", "conversionGoalCustomEventName", "date_from", "date_to", "device_tab", "source_tab", "graphs_tab", "path_tab", "geography_tab", "path_cleaning", "filter_test_accounts", "compare_filter", "parsedFilters", "isWebAnalyticsPropertyFilters", "objectsEqual", "checkGraphsTabIsCompatibleWithConversionGoal", "breakpoint", "checkCustomEventConversionGoalHasSessionIdsHelper", "setConversionGoalWarning", "customEventName", "response", "hogqlQuery", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_kea_router", "import_react", "init_dirname", "init_buffer", "init_process", "import_react", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_react", "import_jsx_runtime", "uniqueNode", "HogQueryEditor", "props", "monacoDisposables", "d", "queryInput", "setQueryInput", "realKey", "saveQuery", "clsx", "CodeEditor", "v", "editor", "monaco", "LemonButton", "HogDebug", "query", "setQuery", "queryKey", "debug", "dataNodeLogicProps", "dataLoading", "_response", "dataNodeLogic", "response", "tab", "setTab", "LemonDivider", "Reload", "ElapsedTime", "LemonTabs", "key", "a", "nr", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "uniqueNode", "DataNode", "props", "key", "logic", "dataNodeLogic", "response", "responseLoading", "responseErrorObject", "OpenEditorButton", "Spinner", "AutoSizer", "height", "CodeEditor", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_react", "import_jsx_runtime", "EvenlyDistributedRows", "children", "minWidthRems", "className", "rowLayout", "setRowLayout", "elementRef", "updateSize", "pxPerRem", "minWidthPx", "containerWidthPx", "maxItemsPerRow", "numRows", "itemsPerRow", "element", "resizeObserver", "clsx", "import_jsx_runtime", "OVERVIEW_ITEM_CELL_MIN_WIDTH_REMS", "OVERVIEW_ITEM_CELL_CLASSES", "uniqueNode", "WebOverview", "props", "onData", "loadPriority", "dataNodeCollectionId", "key", "logic", "dataNodeLogic", "response", "responseLoading", "webOverviewQueryResponse", "samplingRate", "numSkeletons", "useFeatureFlag", "EvenlyDistributedRows", "range", "i", "WebOverviewItemCellSkeleton", "item", "WebOverviewItemCell", "LemonBanner", "LemonSkeleton", "label", "labelFromKey", "trend", "isNotNil", "IconTrendingFlat", "getColorVar", "IconTrending", "IconTrendingDown", "docsUrl", "settingsLinkFromKey", "tooltip", "formatPercentage", "formatItem", "Tooltip", "LemonButton", "IconGear", "x", "options", "humanFriendlyLargeNumber", "formatUnit", "getCurrencySymbol", "currency", "parts", "symbol", "part", "isPrefix", "value", "kind", "humanFriendlyDuration", "word", "urls", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "WebVitalsContent", "webVitalsQueryResponse", "webVitalsTab", "webVitalsPercentile", "webAnalyticsLogic", "value", "getMetric", "withMilliseconds", "values", "color", "getThresholdColor", "band", "getMetricBand", "LemonSkeleton", "grade", "GRADE_PER_BAND", "threshold", "WEB_VITALS_THRESHOLDS", "Icon", "ICON_PER_BAND", "positioning", "POSITIONING_PER_BAND", "VALUES_PER_BAND", "quantifier", "QUANTIFIER_PER_BAND", "experience", "EXPERIENCE_PER_BAND", "unit", "LONG_METRIC_NAME", "Tooltip", "IconInfo", "METRIC_DESCRIPTION", "init_dirname", "init_buffer", "init_process", "import_clsx", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "WebVitalsProgressBar", "value", "metric", "band", "getMetricBand", "threshold", "WEB_VITALS_THRESHOLDS", "goodWidth", "improvementsWidth", "poorWidth", "WEB_VITALS_COLORS", "IndicatorLine", "positionInBand", "computePositionInBand", "backgroundColor", "getThresholdColor", "import_jsx_runtime", "WebVitalsTab", "value", "metric", "isActive", "setTab", "label", "LONG_METRIC_NAME", "parsedValue", "unit", "getValueWithUnit", "color", "getThresholdColor", "clsx", "Tooltip", "METRIC_DESCRIPTION", "IconInfo", "LemonSkeleton", "WebVitalsProgressBar", "import_jsx_runtime", "uniqueNode", "WebVitals", "props", "onData", "loadPriority", "dataNodeCollectionId", "key", "logic", "dataNodeLogic", "webVitalsPercentile", "webVitalsTab", "webVitalsMetricQuery", "webAnalyticsLogic", "setWebVitalsTab", "response", "responseLoading", "webVitalsQueryResponse", "INP", "getMetric", "LCP", "CLS", "FCP", "WebVitalsTab", "WebVitalsContent", "Query", "LemonButton", "urls", "IconOpenInNew", "addProductIntentForCrossSell", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "prettyJSON", "source", "queryEditorLogic", "props", "actions", "oldProps", "queryInput", "_", "s", "query", "JSONQuery", "error", "e", "p", "values", "lemonToast", "withoutFormatting", "import_jsx_runtime", "i", "QueryEditor", "props", "key", "queryInput", "error", "inputChanged", "queryEditorLogic", "setQueryInput", "saveQuery", "Link", "urls", "clsx", "AutoSizer", "height", "CodeEditor", "v", "schema_default", "LemonButton", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_kea_router", "import_react", "import_jsx_runtime", "uniqueNode", "DataTableVisualization", "uniqueKey", "query", "setQuery", "context", "cachedResults", "readOnly", "variablesOverride", "key", "insightProps", "vizKey", "insightVizDataNodeKey", "dataNodeCollectionId", "insightVizDataCollectionId", "insightMode", "insightSceneLogic", "dataVisualizationLogicProps", "dataNodeLogicProps", "insightLogicProps", "insightLogic", "exportContext", "insightDataLogic", "dataNodeLogic", "dataVisualizationLogic", "displayLogic", "variablesLogic", "variableModalLogic", "InternalDataTableVisualization", "props", "visualizationType", "showEditingUI", "showResultControls", "sourceFeatures", "response", "responseLoading", "responseError", "queryCancelled", "isChartSettingsPanelOpen", "setEditorQuery", "toggleChartSettingsPanel", "setQuerySource", "source", "component", "LoadingBar", "Table", "LineGraph", "HogQLBoldNumber", "DatabaseTableTreeWithItems", "HogQLQueryEditor", "LemonDivider", "Reload", "ElapsedTime", "AddVariableButton", "urls", "DateRange", "TableDisplay", "LemonButton", "IconGear", "ExportButton", "VariablesForInsight", "SideBar", "clsx", "InsightErrorState", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "SavedInsight", "propsQuery", "context", "embedded", "readOnly", "insightProps", "insight", "insightLoading", "insightLogic", "dataQuery", "insightDataLogic", "LoadingBar", "query", "Query", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_react", "import_jsx_runtime", "uniqueNode", "WebVitalsPathBreakdown", "props", "onData", "loadPriority", "dataNodeCollectionId", "key", "logic", "dataNodeLogic", "response", "responseLoading", "webVitalsQueryResponse", "Header", "Content", "band", "label", "webVitalsTab", "webAnalyticsLogic", "Icon", "ICON_PER_BAND", "thresholdText", "threshold", "WEB_VITALS_THRESHOLDS", "poorValue", "poorUnit", "getValueWithUnit", "goodValue", "goodUnit", "WEB_VITALS_COLORS", "SKELETON_HEIGHT", "isPathCleaningEnabled", "togglePropertyFilter", "values", "loadedValues", "hasNoValues", "clsx", "LemonSkeleton", "path", "value", "width", "computePositionInBand", "parsedValue", "unit", "parseAliasToReadable", "import_jsx_runtime", "Query", "props", "propsQuery", "propsSetQuery", "readOnly", "embedded", "filtersOverride", "variablesOverride", "inSharedMode", "localQuery", "localSetQuery", "query", "setQuery", "queryContext", "uniqueKey", "insightVizDataNodeKey", "e", "component", "isDataTableNode", "DataTable", "isDataVisualizationNode", "DataTableVisualization", "isSavedInsightNode", "SavedInsight", "isInsightVizNode", "InsightViz", "isWebOverviewQuery", "WebOverview", "isWebVitalsQuery", "WebVitals", "isWebVitalsPathBreakdownQuery", "WebVitalsPathBreakdown", "isHogQuery", "HogDebug", "DataNode", "ErrorBoundary", "QueryEditor", "stringQuery", "LemonDivider", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "nonEditableSchemaTypes", "editSchemaOptions", "editSchemaOptionsAsArray", "n", "isNonEditableSchemaType", "schemaType", "JoinsMoreMenu", "tableName", "fieldName", "currentProjectId", "projectLogic", "toggleEditJoinModal", "viewLinkLogic", "joins", "joinsLoading", "dataWarehouseJoinsLogic", "loadJoins", "loadDatabase", "dataWarehouseSceneLogic", "join", "overlay", "Spinner", "LemonButton", "deleteWithUndo", "e", "lemonToast", "More", "DatabaseTable", "table", "tables", "inEditSchemaMode", "schemaOnChange", "dataSource", "name", "dataWarehouseTables", "databaseLoading", "LemonTable", "column", "_", "type", "schema_valid", "LemonSelect", "newValue", "LemonTag", "field", "Link", "urls", "data", "isJoiningTableExternalTable", "isSourceExternalTable", "import_jsx_runtime", "TableData", "table", "isEditingSavedQuery", "inEditSchemaMode", "editSchemaIsLoading", "dataWarehouseSceneLogic", "setIsEditingSavedQuery", "toggleEditSchemaMode", "updateSelectedSchema", "saveSchema", "cancelEditSchema", "isManuallyLinkedTable", "IconDatabase", "LemonButton", "humanFriendlyDetailedTime", "DatabaseTable", "key", "type", "DeleteTableModal", "isOpen", "setIsOpen", "onDelete", "subject", "LemonModal", "import_jsx_runtime", "DataWarehouseTables", "insightProps", "query", "insightDataLogic", "setInsightQuery", "insightLogic", "Query", "DatabaseTableTreeWithItems", "inline", "collapsible", "dataWarehouseTablesBySourceType", "posthogTables", "databaseLoading", "nonMaterializedViews", "materializedViews", "views", "selectedRow", "schemaModalIsOpen", "dataWarehouseSavedQueriesLoading", "dataWarehouseSceneLogic", "selectRow", "deleteDataWarehouseSavedQuery", "deleteDataWarehouseTable", "toggleSchemaModal", "collapsed", "setCollapsed", "toggleJoinTableModal", "selectSourceTable", "viewLinkLogic", "isDeleteModalOpen", "setIsDeleteModalOpen", "runDataWarehouseSavedQuery", "dataWarehouseViewsLogic", "featureFlags", "featureFlagLogic", "deleteButton", "table", "LemonButton", "dropdownOverlay", "copyToClipboard", "urls", "FEATURE_FLAGS", "treeItems", "source_type", "SOURCE_DETAILS", "column", "IconDatabase", "IconBrackets", "DatabaseTableTree", "LemonModal", "TableData", "ViewLinkModal", "DeleteTableModal"]
}
