{
  "version": 3,
  "sources": ["../src/scenes/debug/DebugScene.tsx", "../src/scenes/debug/DebugSceneQuery.tsx", "../src/scenes/debug/HogQLDebug.tsx", "../src/scenes/debug/Modifiers.tsx", "../src/scenes/debug/QueryTabs.tsx", "../src/scenes/debug/debugSceneLogic.ts"],
  "sourcesContent": ["import { useActions, useValues } from 'kea'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonLabel } from 'lib/lemon-ui/LemonLabel/LemonLabel'\nimport { LemonSelect } from 'lib/lemon-ui/LemonSelect'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { DebugSceneQuery } from 'scenes/debug/DebugSceneQuery'\nimport { SceneExport } from 'scenes/sceneTypes'\n\nimport { stringifiedExamples } from '~/queries/examples'\n\nimport { debugSceneLogic } from './debugSceneLogic'\n\nexport function DebugScene(): JSX.Element {\n    const { query1, query2 } = useValues(debugSceneLogic)\n    const { setQuery1, setQuery2 } = useActions(debugSceneLogic)\n    const { featureFlags } = useValues(featureFlagLogic)\n\n    return (\n        <div className=\"QueryScene\">\n            <PageHeader\n                buttons={\n                    <>\n                        <LemonButton active={!!query2} onClick={() => (query2 ? setQuery2('') : setQuery2(query1))}>\n                            Split\n                        </LemonButton>\n                        <LemonButton\n                            active={query1 === stringifiedExamples.HogQLRaw}\n                            onClick={() => setQuery1(stringifiedExamples.HogQLRaw)}\n                        >\n                            HogQL Debug\n                        </LemonButton>\n                        {featureFlags[FEATURE_FLAGS.HOG] ? (\n                            <LemonButton\n                                active={query1 === stringifiedExamples.Hoggonacci}\n                                onClick={() => setQuery1(stringifiedExamples.Hoggonacci)}\n                            >\n                                Hog\n                            </LemonButton>\n                        ) : null}\n                        <LemonButton\n                            active={query1 === stringifiedExamples.HogQLTable}\n                            onClick={() => setQuery1(stringifiedExamples.HogQLTable)}\n                        >\n                            HogQL Table\n                        </LemonButton>\n                        <LemonButton\n                            active={query1 === stringifiedExamples.Events}\n                            onClick={() => setQuery1(stringifiedExamples.Events)}\n                        >\n                            Any Query\n                        </LemonButton>\n                        <LemonLabel>\n                            <LemonSelect\n                                placeholder=\"More sample queries\"\n                                options={Object.entries(stringifiedExamples)\n                                    .filter(([k]) => k !== 'HogQLTable' && k !== 'HogQLRaw')\n                                    .map(([k, v]) => {\n                                        return { label: k, value: v }\n                                    })}\n                                onChange={(v) => {\n                                    if (v) {\n                                        setQuery1(v)\n                                    }\n                                }}\n                            />\n                        </LemonLabel>\n                    </>\n                }\n            />\n            <div className=\"flex gap-2\">\n                <div className=\"flex-1 w-1/2\">\n                    <DebugSceneQuery query={query1} setQuery={setQuery1} queryKey=\"new-hogql-debug-1\" />\n                </div>\n                {query2 ? (\n                    <div className=\"flex-1 w-1/2\">\n                        <DebugSceneQuery query={query2} setQuery={setQuery2} queryKey=\"new-hogql-debug-2\" />\n                    </div>\n                ) : null}\n            </div>\n        </div>\n    )\n}\n\nexport const scene: SceneExport = {\n    component: DebugScene,\n    logic: debugSceneLogic,\n}\n", "import { useValues } from 'kea'\nimport { HogDebug } from 'scenes/debug/HogDebug'\nimport { HogQLDebug } from 'scenes/debug/HogQLDebug'\nimport { Modifiers } from 'scenes/debug/Modifiers'\nimport { QueryTabs } from 'scenes/debug/QueryTabs'\n\nimport { dataNodeLogic, DataNodeLogicProps } from '~/queries/nodes/DataNode/dataNodeLogic'\nimport { insightVizDataNodeKey } from '~/queries/nodes/InsightViz/InsightViz'\nimport { QueryEditor } from '~/queries/QueryEditor/QueryEditor'\nimport { Node } from '~/queries/schema/schema-general'\nimport { isDataTableNode, isHogQLQuery, isHogQuery, isInsightVizNode } from '~/queries/utils'\n\ninterface DebugSceneQueryProps {\n    queryKey: `new-${string}`\n    query: string\n    setQuery: (query: string) => void\n}\n\nexport function DebugSceneQuery({ query, setQuery, queryKey }: DebugSceneQueryProps): JSX.Element {\n    let parsed: Record<string, any> | null = null\n    try {\n        parsed = JSON.parse(query)\n    } catch (e) {\n        // do nothing\n    }\n    const dataNode = parsed && (isInsightVizNode(parsed) || isDataTableNode(parsed)) ? parsed.source : (parsed as Node)\n\n    const dataNodeKey = insightVizDataNodeKey({ dashboardItemId: queryKey })\n    const dataNodeLogicProps: DataNodeLogicProps = {\n        query: dataNode,\n        key: dataNodeKey,\n        dataNodeCollectionId: queryKey,\n        modifiers: { debug: true },\n    }\n    const { response } = useValues(dataNodeLogic(dataNodeLogicProps))\n\n    return (\n        <>\n            {isHogQuery(parsed) ? (\n                <HogDebug\n                    queryKey={queryKey}\n                    query={parsed}\n                    setQuery={(query) => setQuery(JSON.stringify(query, null, 2))}\n                    debug\n                />\n            ) : isHogQLQuery(parsed) ? (\n                <HogQLDebug\n                    queryKey={queryKey}\n                    query={parsed}\n                    setQuery={(query) => setQuery(JSON.stringify(query, null, 2))}\n                />\n            ) : (\n                <div className=\"space-y-4\">\n                    <QueryEditor\n                        query={query}\n                        setQuery={setQuery}\n                        aboveButton={\n                            <Modifiers\n                                setQuery={\n                                    parsed && 'source' in parsed && parsed?.source\n                                        ? (query) => setQuery(JSON.stringify({ ...parsed, source: query }, null, 2))\n                                        : (query) => setQuery(JSON.stringify(query, null, 2))\n                                }\n                                query={parsed?.source ?? parsed}\n                                response={response}\n                            />\n                        }\n                    />\n                    {parsed ? (\n                        <QueryTabs\n                            query={parsed as Node}\n                            queryKey={queryKey}\n                            response={response}\n                            setQuery={(query) => setQuery(JSON.stringify(query, null, 2))}\n                        />\n                    ) : null}\n                </div>\n            )}\n        </>\n    )\n}\n", "import { BindLogic, useValues } from 'kea'\nimport { LemonDivider } from 'lib/lemon-ui/LemonDivider'\nimport { Modifiers } from 'scenes/debug/Modifiers'\n\nimport { dataNodeLogic, DataNodeLogicProps } from '~/queries/nodes/DataNode/dataNodeLogic'\nimport { DateRange } from '~/queries/nodes/DataNode/DateRange'\nimport { ElapsedTime } from '~/queries/nodes/DataNode/ElapsedTime'\nimport { Reload } from '~/queries/nodes/DataNode/Reload'\nimport { EventPropertyFilters } from '~/queries/nodes/EventsNode/EventPropertyFilters'\nimport { HogQLQueryEditor } from '~/queries/nodes/HogQLQuery/HogQLQueryEditor'\nimport { HogQLQuery, HogQLQueryResponse } from '~/queries/schema/schema-general'\n\nimport { QueryTabs } from './QueryTabs'\n\ninterface HogQLDebugProps {\n    queryKey: `new-${string}`\n    query: HogQLQuery\n    setQuery: (query: HogQLQuery) => void\n}\n\nexport function HogQLDebug({ query, setQuery, queryKey }: HogQLDebugProps): JSX.Element {\n    const dataNodeLogicProps: DataNodeLogicProps = { query, key: queryKey, dataNodeCollectionId: queryKey }\n    const { dataLoading, response: _response } = useValues(dataNodeLogic(dataNodeLogicProps))\n    const response = _response as HogQLQueryResponse | null\n\n    return (\n        <BindLogic logic={dataNodeLogic} props={dataNodeLogicProps}>\n            <div className=\"space-y-2\">\n                <HogQLQueryEditor query={query} setQuery={setQuery} />\n                <Modifiers setQuery={setQuery} query={query} response={response} />\n                <LemonDivider className=\"my-4\" />\n                <div className=\"flex flex-wrap gap-2 \">\n                    <Reload />\n                    <DateRange key=\"date-range\" query={query} setQuery={setQuery} />\n                    <EventPropertyFilters key=\"event-property\" query={query} setQuery={setQuery} />\n                </div>\n                {dataLoading ? (\n                    <>\n                        <h2>Running query...</h2>\n                        <div className=\"flex\">\n                            Time elapsed:&nbsp;\n                            <ElapsedTime />\n                        </div>\n                    </>\n                ) : (\n                    <>\n                        <QueryTabs query={query} response={response} setQuery={setQuery} queryKey={queryKey} />\n                    </>\n                )}\n            </div>\n        </BindLogic>\n    )\n}\n", "import { LemonLabel } from 'lib/lemon-ui/LemonLabel'\nimport { LemonSelect } from 'lib/lemon-ui/LemonSelect'\n\nimport { HogQLQueryModifiers } from '~/queries/schema/schema-general'\n\nexport interface ModifiersProps<Q extends { response?: Record<string, any>; modifiers?: HogQLQueryModifiers }> {\n    setQuery: (query: Q) => void\n    query: Q | null\n    response: Required<Q>['response'] | null\n}\n\nexport function Modifiers<Q extends { response?: Record<string, any>; modifiers?: HogQLQueryModifiers }>({\n    setQuery,\n    query,\n    response = null,\n}: ModifiersProps<Q>): JSX.Element | null {\n    if (query === null) {\n        return null\n    }\n    const labelClassName = 'flex flex-col gap-1 items-start'\n    return (\n        <div className=\"flex gap-2\">\n            <LemonLabel className={labelClassName}>\n                <div>POE:</div>\n                <LemonSelect\n                    options={[\n                        { value: 'disabled', label: 'Disabled' },\n                        {\n                            value: 'person_id_no_override_properties_on_events',\n                            label: 'Properties: Events, Person ID: Events',\n                        },\n                        {\n                            value: 'person_id_override_properties_on_events',\n                            label: 'Properties: Events, Person ID: Overrides (v2)',\n                        },\n                        {\n                            value: 'person_id_override_properties_joined',\n                            label: 'Properties: Person, Person ID: Overrides (v3)',\n                        },\n                    ]}\n                    onChange={(value) =>\n                        setQuery({\n                            ...query,\n                            modifiers: { ...query.modifiers, personsOnEventsMode: value },\n                        })\n                    }\n                    value={query.modifiers?.personsOnEventsMode ?? response?.modifiers?.personsOnEventsMode}\n                />\n            </LemonLabel>\n            <LemonLabel className={labelClassName}>\n                <div>Persons ArgMax:</div>\n                <LemonSelect\n                    options={[\n                        { value: 'v1', label: 'V1' },\n                        { value: 'v2', label: 'V2' },\n                    ]}\n                    onChange={(value) =>\n                        setQuery({\n                            ...query,\n                            modifiers: { ...query.modifiers, personsArgMaxVersion: value },\n                        })\n                    }\n                    value={query.modifiers?.personsArgMaxVersion ?? response?.modifiers?.personsArgMaxVersion}\n                />\n            </LemonLabel>\n            <LemonLabel className={labelClassName}>\n                <div>In Cohort Via:</div>\n                <LemonSelect\n                    options={[\n                        { value: 'auto', label: 'auto' },\n                        { value: 'leftjoin', label: 'leftjoin' },\n                        { value: 'subquery', label: 'subquery' },\n                        { value: 'leftjoin_conjoined', label: 'leftjoin conjoined' },\n                    ]}\n                    onChange={(value) =>\n                        setQuery({\n                            ...query,\n                            modifiers: { ...query.modifiers, inCohortVia: value },\n                        })\n                    }\n                    value={query.modifiers?.inCohortVia ?? response?.modifiers?.inCohortVia}\n                />\n            </LemonLabel>\n            <LemonLabel className={labelClassName}>\n                <div>Materialization Mode:</div>\n                <LemonSelect\n                    options={[\n                        { value: 'auto', label: 'auto' },\n                        { value: 'legacy_null_as_string', label: 'legacy_null_as_string' },\n                        { value: 'legacy_null_as_null', label: 'legacy_null_as_null' },\n                        { value: 'disabled', label: 'disabled' },\n                    ]}\n                    onChange={(value) =>\n                        setQuery({\n                            ...query,\n                            modifiers: { ...query.modifiers, materializationMode: value },\n                        })\n                    }\n                    value={query.modifiers?.materializationMode ?? response?.modifiers?.materializationMode}\n                />\n            </LemonLabel>\n            <LemonLabel className={labelClassName}>\n                <div>Optimize joined filters:</div>\n                <LemonSelect\n                    options={[\n                        { value: true, label: 'true' },\n                        { value: false, label: 'false' },\n                    ]}\n                    onChange={(value) =>\n                        setQuery({\n                            ...query,\n                            modifiers: { ...query.modifiers, optimizeJoinedFilters: value },\n                        })\n                    }\n                    value={query.modifiers?.optimizeJoinedFilters ?? response?.modifiers?.optimizeJoinedFilters}\n                />\n            </LemonLabel>\n            <LemonLabel className={labelClassName}>\n                <div>Property Groups:</div>\n                <LemonSelect\n                    options={[\n                        { value: 'enabled', label: 'Enabled' },\n                        { value: 'disabled', label: 'Disabled' },\n                        { value: 'optimized', label: 'Enabled, with Optimizations' },\n                    ]}\n                    onChange={(value) =>\n                        setQuery({\n                            ...query,\n                            modifiers: { ...query.modifiers, propertyGroupsMode: value },\n                        })\n                    }\n                    value={query.modifiers?.propertyGroupsMode ?? response?.modifiers?.propertyGroupsMode}\n                />\n            </LemonLabel>\n        </div>\n    )\n}\n", "import { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { LemonTable } from 'lib/lemon-ui/LemonTable'\nimport { LemonTabs, LemonTabsProps } from 'lib/lemon-ui/LemonTabs'\nimport { LemonTag } from 'lib/lemon-ui/LemonTag'\nimport { CodeEditor } from 'lib/monaco/CodeEditor'\nimport { useState } from 'react'\n\nimport { ErrorBoundary } from '~/layout/ErrorBoundary'\nimport { Timings } from '~/queries/nodes/DataNode/ElapsedTime'\nimport { Query } from '~/queries/Query/Query'\nimport { HogQLMetadataResponse, InsightVizNode, Node, NodeKind, QueryTiming } from '~/queries/schema/schema-general'\nimport { isDataTableNode, isInsightQueryNode, isInsightVizNode } from '~/queries/utils'\n\nfunction toLineColumn(hogql: string, position: number): { line: number; column: number } {\n    const lines = hogql.split('\\n')\n    let line = 0\n    let column = 0\n    for (let i = 0; i < lines.length; i++) {\n        if (position < lines[i].length) {\n            line = i + 1\n            column = position + 1\n            break\n        }\n        position -= lines[i].length + 1\n    }\n    return { line, column }\n}\n\nfunction toLine(hogql: string, position: number): number {\n    return toLineColumn(hogql, position).line\n}\n\nfunction toColumn(hogql: string, position: number): number {\n    return toLineColumn(hogql, position).column\n}\ninterface QueryTabsProps<Q extends Node> {\n    query: Q\n    queryKey: `new-${string}`\n    response?: Q['response'] | null\n    setQuery: (query: Q) => void\n}\nexport function QueryTabs<Q extends Node>({ query, queryKey, setQuery, response }: QueryTabsProps<Q>): JSX.Element {\n    const [tab, setTab] = useState<string | null>(null)\n    const clickHouseTime = (response?.timings as QueryTiming[])?.find(({ k }) => k === './clickhouse_execute')?.t ?? 0\n    const explainTime = (response?.timings as QueryTiming[])?.find(({ k }) => k === './explain')?.t ?? 0\n    const totalTime = (response?.timings as QueryTiming[])?.find(({ k }) => k === '.')?.t ?? 0\n    const hogQLTime = totalTime - explainTime - clickHouseTime\n    const tabs: LemonTabsProps<string>['tabs'] = query\n        ? [\n              response?.error && {\n                  key: 'error',\n                  label: 'Error',\n                  content: (\n                      <>\n                          <h2 className=\"text-danger\">Error Running Query!</h2>\n                          <CodeSnippet language={Language.Text} wrap>\n                              {response.error}\n                          </CodeSnippet>\n                      </>\n                  ),\n              },\n              isInsightVizNode(query) && {\n                  key: 'viz',\n                  label: 'Visualization',\n                  content: (\n                      <Query\n                          uniqueKey={queryKey}\n                          query={query}\n                          setQuery={(query) => setQuery(query)}\n                          context={{\n                              insightProps: {\n                                  dashboardItemId: queryKey,\n                                  query,\n                                  setQuery: (query) => setQuery(query),\n                                  dataNodeCollectionId: queryKey,\n                              },\n                          }}\n                      />\n                  ),\n              },\n              isInsightQueryNode(query) && {\n                  key: 'insight',\n                  label: 'Insight',\n                  content: (\n                      <Query\n                          uniqueKey={queryKey}\n                          query={{ kind: NodeKind.InsightVizNode, source: query, full: true } as InsightVizNode}\n                          // @ts-expect-error - TS is wary of `setQuery` being different later, but we're OK\n                          setQuery={(query) => setQuery(query)}\n                      />\n                  ),\n              },\n              isDataTableNode(query) && {\n                  key: 'table',\n                  label: 'Data Table',\n                  content: <Query uniqueKey={queryKey} query={query} setQuery={(query) => setQuery(query)} />,\n              },\n\n              (response?.result || response?.results) && {\n                  key: 'result',\n                  label: 'Result JSON',\n                  content: (\n                      <CodeEditor\n                          className=\"border\"\n                          language=\"json\"\n                          value={JSON.stringify(response?.result || response?.results, null, 2)}\n                          height={500}\n                          path={`debug/${queryKey}/result.json`}\n                      />\n                  ),\n              },\n              response?.hogql && {\n                  key: 'hogql',\n                  label: (\n                      <>\n                          HogQL\n                          {hogQLTime && <LemonTag className=\"ml-2\">{Math.floor(hogQLTime * 10) / 10}s</LemonTag>}\n                      </>\n                  ),\n                  content: (\n                      <CodeEditor\n                          className=\"border\"\n                          language=\"sql\"\n                          value={String(response.hogql)}\n                          height={500}\n                          path={`debug/${queryKey}/hogql.sql`}\n                      />\n                  ),\n              },\n              response?.clickhouse && {\n                  key: 'clickhouse',\n                  label: (\n                      <>\n                          Clickhouse\n                          {clickHouseTime && (\n                              <LemonTag className=\"ml-2\">{Math.floor(clickHouseTime * 10) / 10}s</LemonTag>\n                          )}\n                      </>\n                  ),\n                  content: (\n                      <CodeEditor\n                          className=\"border\"\n                          language=\"sql\"\n                          value={String(response.clickhouse)}\n                          height={500}\n                          path={`debug/${queryKey}/hogql.sql`}\n                      />\n                  ),\n              },\n              response?.explain && {\n                  key: 'explain',\n                  label: 'Explain',\n                  content: <CodeSnippet wrap>{response.explain.join('\\n')}</CodeSnippet>,\n              },\n              response?.timings && {\n                  key: 'timings',\n                  label: 'Timings',\n                  content: <Timings timings={response?.timings} elapsedTime={response?.elapsedTime} />,\n              },\n              response && {\n                  key: 'response',\n                  label: 'Full response',\n                  content: (\n                      <CodeEditor\n                          className=\"border\"\n                          language=\"json\"\n                          value={JSON.stringify(response, null, 2)}\n                          height={500}\n                          path={`debug/${queryKey}/response.json`}\n                      />\n                  ),\n              },\n              response?.metadata && {\n                  key: 'metadata',\n                  label: 'Metadata',\n                  content: (\n                      <LemonTable\n                          dataSource={[\n                              ...(response.metadata as HogQLMetadataResponse).errors.map((error) => ({\n                                  type: 'error',\n                                  line: toLine(response.hogql ?? '', error.start ?? 0),\n                                  column: toColumn(response.hogql ?? '', error.start ?? 0),\n                                  ...error,\n                              })),\n                              ...(response.metadata as HogQLMetadataResponse).warnings.map((warn) => ({\n                                  type: 'warning',\n                                  line: toLine(response.hogql ?? '', warn.start ?? 0),\n                                  column: toColumn(response.hogql ?? '', warn.start ?? 0),\n                                  ...warn,\n                              })),\n                              ...(response.metadata as HogQLMetadataResponse).notices.map((notice) => ({\n                                  type: 'notice',\n                                  line: toLine(response.hogql ?? '', notice.start ?? 0),\n                                  column: toColumn(response.hogql ?? '', notice.start ?? 0),\n                                  ...notice,\n                              })),\n                          ].sort((a, b) => (a.start ?? 0) - (b.start ?? 0))}\n                          columns={[\n                              { title: 'Line', dataIndex: 'line', key: 'line', width: '40px' },\n                              { title: 'Column', dataIndex: 'column', key: 'column', width: '40px' },\n                              { title: 'Type', dataIndex: 'type', key: 'type', width: '80px' },\n                              { title: 'Message', dataIndex: 'message', key: 'message' },\n                          ]}\n                      />\n                  ),\n              },\n          ]\n              .filter(Boolean)\n              .map((tab) => ({ ...tab, content: <ErrorBoundary>{tab.content}</ErrorBoundary> }))\n        : []\n\n    return (\n        <ErrorBoundary>\n            <LemonTabs\n                activeKey={tab && tabs.find((t) => t && t.key === tab) ? tab : (tabs[0] && tabs[0].key) || 'response'}\n                onChange={(t) => setTab(t)}\n                tabs={tabs}\n            />\n        </ErrorBoundary>\n    )\n}\n", "import { actions, kea, path, reducers } from 'kea'\nimport { actionToUrl, urlToAction } from 'kea-router'\nimport { urls } from 'scenes/urls'\n\nimport { stringifiedExamples } from '~/queries/examples'\n\nimport type { debugSceneLogicType } from './debugSceneLogicType'\n\nconst DEFAULT_QUERY: string = stringifiedExamples['HogQLRaw']\n\nexport const debugSceneLogic = kea<debugSceneLogicType>([\n    path(['scenes', 'query', 'debugSceneLogic']),\n    actions({\n        setQuery1: (query: string) => ({ query: query }),\n        setQuery2: (query: string) => ({ query: query }),\n    }),\n    reducers({\n        query1: [DEFAULT_QUERY, { setQuery1: (_, { query }) => query }],\n        query2: [DEFAULT_QUERY, { setQuery2: (_, { query }) => query }],\n    }),\n    actionToUrl(({ values }) => ({\n        setQuery1: ({ query }) => {\n            return [\n                urls.debugQuery(),\n                {},\n                { ...{ q: query }, ...(values.query2 ? { q2: values.query2 } : {}) },\n                { replace: true },\n            ]\n        },\n        setQuery2: () => {\n            return [urls.debugQuery(), {}, { q: values.query1, q2: values.query2 }, { replace: true }]\n        },\n    })),\n    urlToAction(({ actions, values }) => ({\n        [urls.debugQuery()]: (_, __, { q, q2 }) => {\n            if (q && q !== values.query1) {\n                actions.setQuery1(q)\n            }\n            if ((q2 ?? '') !== (values.query2 ?? '')) {\n                actions.setQuery2(q2 ?? '')\n            }\n        },\n    })),\n])\n"],
  "mappings": "qhDAAAA,IAAAC,IAAAC,IAAA,IAAAC,EAAsC,OCAtCC,IAAAC,IAAAC,IAAA,IAAAC,GAA0B,OCA1BC,IAAAC,IAAAC,IAAA,IAAAC,EAAqC,OCArCC,IAAAC,IAAAC,IAsBY,IAAAC,EAAA,OAXL,SAASC,EAAyF,CACrG,SAAAC,EACA,MAAAC,EACA,SAAAC,EAAW,IACf,EAA0C,CACtC,GAAID,IAAU,KACV,OAAO,KAEX,IAAME,EAAiB,kCACvB,SACI,QAAC,OAAI,UAAU,aACX,qBAACC,EAAA,CAAW,UAAWD,EACnB,oBAAC,OAAI,gBAAI,KACT,OAACE,EAAA,CACG,QAAS,CACL,CAAE,MAAO,WAAY,MAAO,UAAW,EACvC,CACI,MAAO,6CACP,MAAO,uCACX,EACA,CACI,MAAO,0CACP,MAAO,+CACX,EACA,CACI,MAAO,uCACP,MAAO,+CACX,CACJ,EACA,SAAWC,GACPN,EAAS,CACL,GAAGC,EACH,UAAW,CAAE,GAAGA,EAAM,UAAW,oBAAqBK,CAAM,CAChE,CAAC,EAEL,MAAOL,EAAM,WAAW,qBAAuBC,GAAU,WAAW,oBACxE,GACJ,KACA,QAACE,EAAA,CAAW,UAAWD,EACnB,oBAAC,OAAI,2BAAe,KACpB,OAACE,EAAA,CACG,QAAS,CACL,CAAE,MAAO,KAAM,MAAO,IAAK,EAC3B,CAAE,MAAO,KAAM,MAAO,IAAK,CAC/B,EACA,SAAWC,GACPN,EAAS,CACL,GAAGC,EACH,UAAW,CAAE,GAAGA,EAAM,UAAW,qBAAsBK,CAAM,CACjE,CAAC,EAEL,MAAOL,EAAM,WAAW,sBAAwBC,GAAU,WAAW,qBACzE,GACJ,KACA,QAACE,EAAA,CAAW,UAAWD,EACnB,oBAAC,OAAI,0BAAc,KACnB,OAACE,EAAA,CACG,QAAS,CACL,CAAE,MAAO,OAAQ,MAAO,MAAO,EAC/B,CAAE,MAAO,WAAY,MAAO,UAAW,EACvC,CAAE,MAAO,WAAY,MAAO,UAAW,EACvC,CAAE,MAAO,qBAAsB,MAAO,oBAAqB,CAC/D,EACA,SAAWC,GACPN,EAAS,CACL,GAAGC,EACH,UAAW,CAAE,GAAGA,EAAM,UAAW,YAAaK,CAAM,CACxD,CAAC,EAEL,MAAOL,EAAM,WAAW,aAAeC,GAAU,WAAW,YAChE,GACJ,KACA,QAACE,EAAA,CAAW,UAAWD,EACnB,oBAAC,OAAI,iCAAqB,KAC1B,OAACE,EAAA,CACG,QAAS,CACL,CAAE,MAAO,OAAQ,MAAO,MAAO,EAC/B,CAAE,MAAO,wBAAyB,MAAO,uBAAwB,EACjE,CAAE,MAAO,sBAAuB,MAAO,qBAAsB,EAC7D,CAAE,MAAO,WAAY,MAAO,UAAW,CAC3C,EACA,SAAWC,GACPN,EAAS,CACL,GAAGC,EACH,UAAW,CAAE,GAAGA,EAAM,UAAW,oBAAqBK,CAAM,CAChE,CAAC,EAEL,MAAOL,EAAM,WAAW,qBAAuBC,GAAU,WAAW,oBACxE,GACJ,KACA,QAACE,EAAA,CAAW,UAAWD,EACnB,oBAAC,OAAI,oCAAwB,KAC7B,OAACE,EAAA,CACG,QAAS,CACL,CAAE,MAAO,GAAM,MAAO,MAAO,EAC7B,CAAE,MAAO,GAAO,MAAO,OAAQ,CACnC,EACA,SAAWC,GACPN,EAAS,CACL,GAAGC,EACH,UAAW,CAAE,GAAGA,EAAM,UAAW,sBAAuBK,CAAM,CAClE,CAAC,EAEL,MAAOL,EAAM,WAAW,uBAAyBC,GAAU,WAAW,sBAC1E,GACJ,KACA,QAACE,EAAA,CAAW,UAAWD,EACnB,oBAAC,OAAI,4BAAgB,KACrB,OAACE,EAAA,CACG,QAAS,CACL,CAAE,MAAO,UAAW,MAAO,SAAU,EACrC,CAAE,MAAO,WAAY,MAAO,UAAW,EACvC,CAAE,MAAO,YAAa,MAAO,6BAA8B,CAC/D,EACA,SAAWC,GACPN,EAAS,CACL,GAAGC,EACH,UAAW,CAAE,GAAGA,EAAM,UAAW,mBAAoBK,CAAM,CAC/D,CAAC,EAEL,MAAOL,EAAM,WAAW,oBAAsBC,GAAU,WAAW,mBACvE,GACJ,GACJ,CAER,CCxIAK,IAAAC,IAAAC,IAKA,IAAAC,GAAyB,QAgDH,IAAAC,EAAA,OAxCtB,SAASC,GAAaC,EAAeC,EAAoD,CACrF,IAAMC,EAAQF,EAAM,MAAM;AAAA,CAAI,EAC1BG,EAAO,EACPC,EAAS,EACb,QAASC,EAAI,EAAGA,EAAIH,EAAM,OAAQG,IAAK,CACnC,GAAIJ,EAAWC,EAAMG,CAAC,EAAE,OAAQ,CAC5BF,EAAOE,EAAI,EACXD,EAASH,EAAW,EACpB,KACJ,CACAA,GAAYC,EAAMG,CAAC,EAAE,OAAS,CAClC,CACA,MAAO,CAAE,KAAAF,EAAM,OAAAC,CAAO,CAC1B,CAEA,SAASE,EAAON,EAAeC,EAA0B,CACrD,OAAOF,GAAaC,EAAOC,CAAQ,EAAE,IACzC,CAEA,SAASM,EAASP,EAAeC,EAA0B,CACvD,OAAOF,GAAaC,EAAOC,CAAQ,EAAE,MACzC,CAOO,SAASO,EAA0B,CAAE,MAAAC,EAAO,SAAAC,EAAU,SAAAC,EAAU,SAAAC,CAAS,EAAmC,CAC/G,GAAM,CAACC,EAAKC,CAAM,KAAI,aAAwB,IAAI,EAC5CC,EAAkBH,GAAU,SAA2B,KAAK,CAAC,CAAE,EAAAI,CAAE,IAAMA,IAAM,sBAAsB,GAAG,GAAK,EAC3GC,EAAeL,GAAU,SAA2B,KAAK,CAAC,CAAE,EAAAI,CAAE,IAAMA,IAAM,WAAW,GAAG,GAAK,EAE7FE,GADaN,GAAU,SAA2B,KAAK,CAAC,CAAE,EAAAI,CAAE,IAAMA,IAAM,GAAG,GAAG,GAAK,GAC3DC,EAAcF,EACtCI,EAAuCV,EACvC,CACIG,GAAU,OAAS,CACf,IAAK,QACL,MAAO,QACP,WACI,oBACI,oBAAC,MAAG,UAAU,cAAc,gCAAoB,KAChD,OAACQ,EAAA,CAAY,gBAAyB,KAAI,GACrC,SAAAR,EAAS,MACd,GACJ,CAER,EACAS,EAAiBZ,CAAK,GAAK,CACvB,IAAK,MACL,MAAO,gBACP,WACI,OAACa,EAAA,CACG,UAAWZ,EACX,MAAOD,EACP,SAAWA,GAAUE,EAASF,CAAK,EACnC,QAAS,CACL,aAAc,CACV,gBAAiBC,EACjB,MAAAD,EACA,SAAWA,GAAUE,EAASF,CAAK,EACnC,qBAAsBC,CAC1B,CACJ,EACJ,CAER,EACAa,GAAmBd,CAAK,GAAK,CACzB,IAAK,UACL,MAAO,UACP,WACI,OAACa,EAAA,CACG,UAAWZ,EACX,MAAO,CAAE,sBAA+B,OAAQD,EAAO,KAAM,EAAK,EAElE,SAAWA,GAAUE,EAASF,CAAK,EACvC,CAER,EACAe,EAAgBf,CAAK,GAAK,CACtB,IAAK,QACL,MAAO,aACP,WAAS,OAACa,EAAA,CAAM,UAAWZ,EAAU,MAAOD,EAAO,SAAWA,GAAUE,EAASF,CAAK,EAAG,CAC7F,GAECG,GAAU,QAAUA,GAAU,UAAY,CACvC,IAAK,SACL,MAAO,cACP,WACI,OAACa,EAAA,CACG,UAAU,SACV,SAAS,OACT,MAAO,KAAK,UAAUb,GAAU,QAAUA,GAAU,QAAS,KAAM,CAAC,EACpE,OAAQ,IACR,KAAM,SAASF,CAAQ,eAC3B,CAER,EACAE,GAAU,OAAS,CACf,IAAK,QACL,SACI,oBAAE,kBAEGM,MAAa,QAACQ,EAAA,CAAS,UAAU,OAAQ,eAAK,MAAMR,EAAY,EAAE,EAAI,GAAG,KAAC,GAC/E,EAEJ,WACI,OAACO,EAAA,CACG,UAAU,SACV,SAAS,MACT,MAAO,OAAOb,EAAS,KAAK,EAC5B,OAAQ,IACR,KAAM,SAASF,CAAQ,aAC3B,CAER,EACAE,GAAU,YAAc,CACpB,IAAK,aACL,SACI,oBAAE,uBAEGG,MACG,QAACW,EAAA,CAAS,UAAU,OAAQ,eAAK,MAAMX,EAAiB,EAAE,EAAI,GAAG,KAAC,GAE1E,EAEJ,WACI,OAACU,EAAA,CACG,UAAU,SACV,SAAS,MACT,MAAO,OAAOb,EAAS,UAAU,EACjC,OAAQ,IACR,KAAM,SAASF,CAAQ,aAC3B,CAER,EACAE,GAAU,SAAW,CACjB,IAAK,UACL,MAAO,UACP,WAAS,OAACQ,EAAA,CAAY,KAAI,GAAE,SAAAR,EAAS,QAAQ,KAAK;AAAA,CAAI,EAAE,CAC5D,EACAA,GAAU,SAAW,CACjB,IAAK,UACL,MAAO,UACP,WAAS,OAACe,GAAA,CAAQ,QAASf,GAAU,QAAS,YAAaA,GAAU,YAAa,CACtF,EACAA,GAAY,CACR,IAAK,WACL,MAAO,gBACP,WACI,OAACa,EAAA,CACG,UAAU,SACV,SAAS,OACT,MAAO,KAAK,UAAUb,EAAU,KAAM,CAAC,EACvC,OAAQ,IACR,KAAM,SAASF,CAAQ,iBAC3B,CAER,EACAE,GAAU,UAAY,CAClB,IAAK,WACL,MAAO,WACP,WACI,OAACgB,EAAA,CACG,WAAY,CACR,GAAIhB,EAAS,SAAmC,OAAO,IAAKiB,IAAW,CACnE,KAAM,QACN,KAAMvB,EAAOM,EAAS,OAAS,GAAIiB,EAAM,OAAS,CAAC,EACnD,OAAQtB,EAASK,EAAS,OAAS,GAAIiB,EAAM,OAAS,CAAC,EACvD,GAAGA,CACP,EAAE,EACF,GAAIjB,EAAS,SAAmC,SAAS,IAAKkB,IAAU,CACpE,KAAM,UACN,KAAMxB,EAAOM,EAAS,OAAS,GAAIkB,EAAK,OAAS,CAAC,EAClD,OAAQvB,EAASK,EAAS,OAAS,GAAIkB,EAAK,OAAS,CAAC,EACtD,GAAGA,CACP,EAAE,EACF,GAAIlB,EAAS,SAAmC,QAAQ,IAAKmB,IAAY,CACrE,KAAM,SACN,KAAMzB,EAAOM,EAAS,OAAS,GAAImB,EAAO,OAAS,CAAC,EACpD,OAAQxB,EAASK,EAAS,OAAS,GAAImB,EAAO,OAAS,CAAC,EACxD,GAAGA,CACP,EAAE,CACN,EAAE,KAAK,CAACC,EAAGC,MAAOD,EAAE,OAAS,IAAMC,GAAE,OAAS,EAAE,EAChD,QAAS,CACL,CAAE,MAAO,OAAQ,UAAW,OAAQ,IAAK,OAAQ,MAAO,MAAO,EAC/D,CAAE,MAAO,SAAU,UAAW,SAAU,IAAK,SAAU,MAAO,MAAO,EACrE,CAAE,MAAO,OAAQ,UAAW,OAAQ,IAAK,OAAQ,MAAO,MAAO,EAC/D,CAAE,MAAO,UAAW,UAAW,UAAW,IAAK,SAAU,CAC7D,EACJ,CAER,CACJ,EACK,OAAO,OAAO,EACd,IAAKpB,IAAS,CAAE,GAAGA,EAAK,WAAS,OAACqB,EAAA,CAAe,SAAArB,EAAI,QAAQ,CAAiB,EAAE,EACrF,CAAC,EAEP,SACI,OAACqB,EAAA,CACG,mBAACC,EAAA,CACG,UAAWtB,GAAOM,EAAK,KAAM,GAAM,GAAK,EAAE,MAAQN,CAAG,EAAIA,EAAOM,EAAK,CAAC,GAAKA,EAAK,CAAC,EAAE,KAAQ,WAC3F,SAAW,GAAML,EAAO,CAAC,EACzB,KAAMK,EACV,EACJ,CAER,CFhMgB,IAAAiB,EAAA,OART,SAASC,GAAW,CAAE,MAAAC,EAAO,SAAAC,EAAU,SAAAC,CAAS,EAAiC,CACpF,IAAMC,EAAyC,CAAE,MAAAH,EAAO,IAAKE,EAAU,qBAAsBA,CAAS,EAChG,CAAE,YAAAE,EAAa,SAAUC,CAAU,KAAI,aAAUC,EAAcH,CAAkB,CAAC,EAClFI,EAAWF,EAEjB,SACI,OAAC,aAAU,MAAOC,EAAe,MAAOH,EACpC,oBAAC,OAAI,UAAU,YACX,oBAACK,GAAA,CAAiB,MAAOR,EAAO,SAAUC,EAAU,KACpD,OAACQ,EAAA,CAAU,SAAUR,EAAU,MAAOD,EAAO,SAAUO,EAAU,KACjE,OAACG,EAAA,CAAa,UAAU,OAAO,KAC/B,QAAC,OAAI,UAAU,wBACX,oBAACC,GAAA,EAAO,KACR,OAACC,GAAA,CAA2B,MAAOZ,EAAO,SAAUC,GAArC,YAA+C,KAC9D,OAACY,GAAA,CAA0C,MAAOb,EAAO,SAAUC,GAAzC,gBAAmD,GACjF,EACCG,KACG,oBACI,oBAAC,MAAG,4BAAgB,KACpB,QAAC,OAAI,UAAU,OAAO,iCAElB,OAACU,GAAA,EAAY,GACjB,GACJ,KAEA,mBACI,mBAACC,EAAA,CAAU,MAAOf,EAAO,SAAUO,EAAU,SAAUN,EAAU,SAAUC,EAAU,EACzF,GAER,EACJ,CAER,CDfQ,IAAAc,EAAA,OAnBD,SAASC,EAAgB,CAAE,MAAAC,EAAO,SAAAC,EAAU,SAAAC,CAAS,EAAsC,CAC9F,IAAIC,EAAqC,KACzC,GAAI,CACAA,EAAS,KAAK,MAAMH,CAAK,CAC7B,MAAY,CAEZ,CACA,IAAMI,EAAWD,IAAWE,EAAiBF,CAAM,GAAKG,EAAgBH,CAAM,GAAKA,EAAO,OAAUA,EAE9FI,EAAcC,GAAsB,CAAE,gBAAiBN,CAAS,CAAC,EACjEO,EAAyC,CAC3C,MAAOL,EACP,IAAKG,EACL,qBAAsBL,EACtB,UAAW,CAAE,MAAO,EAAK,CAC7B,EACM,CAAE,SAAAQ,CAAS,KAAI,cAAUC,EAAcF,CAAkB,CAAC,EAEhE,SACI,mBACK,SAAAG,GAAWT,CAAM,KACd,OAACU,GAAA,CACG,SAAUX,EACV,MAAOC,EACP,SAAWH,GAAUC,EAAS,KAAK,UAAUD,EAAO,KAAM,CAAC,CAAC,EAC5D,MAAK,GACT,EACAc,GAAaX,CAAM,KACnB,OAACY,GAAA,CACG,SAAUb,EACV,MAAOC,EACP,SAAWH,GAAUC,EAAS,KAAK,UAAUD,EAAO,KAAM,CAAC,CAAC,EAChE,KAEA,QAAC,OAAI,UAAU,YACX,oBAACgB,GAAA,CACG,MAAOhB,EACP,SAAUC,EACV,eACI,OAACgB,EAAA,CACG,SACId,GAAU,WAAYA,GAAUA,GAAQ,OACjCH,GAAUC,EAAS,KAAK,UAAU,CAAE,GAAGE,EAAQ,OAAQH,CAAM,EAAG,KAAM,CAAC,CAAC,EACxEA,GAAUC,EAAS,KAAK,UAAUD,EAAO,KAAM,CAAC,CAAC,EAE5D,MAAOG,GAAQ,QAAUA,EACzB,SAAUO,EACd,EAER,EACCP,KACG,OAACe,EAAA,CACG,MAAOf,EACP,SAAUD,EACV,SAAUQ,EACV,SAAWV,GAAUC,EAAS,KAAK,UAAUD,EAAO,KAAM,CAAC,CAAC,EAChE,EACA,MACR,EAER,CAER,CIhFAmB,IAAAC,IAAAC,IAAA,IAAAC,EAA6C,OAC7CC,EAAyC,QAOzC,IAAMC,GAAwBC,EAAoB,SAErCC,KAAkB,OAAyB,IACpD,QAAK,CAAC,SAAU,QAAS,iBAAiB,CAAC,KAC3C,WAAQ,CACJ,UAAYC,IAAmB,CAAE,MAAOA,CAAM,GAC9C,UAAYA,IAAmB,CAAE,MAAOA,CAAM,EAClD,CAAC,KACD,YAAS,CACL,OAAQ,CAACH,GAAe,CAAE,UAAW,CAACI,EAAG,CAAE,MAAAD,CAAM,IAAMA,CAAM,CAAC,EAC9D,OAAQ,CAACH,GAAe,CAAE,UAAW,CAACI,EAAG,CAAE,MAAAD,CAAM,IAAMA,CAAM,CAAC,CAClE,CAAC,KACD,eAAY,CAAC,CAAE,OAAAE,CAAO,KAAO,CACzB,UAAW,CAAC,CAAE,MAAAF,CAAM,IACT,CACHG,EAAK,WAAW,EAChB,CAAC,EACD,CAAO,EAAGH,EAAS,GAAIE,EAAO,OAAS,CAAE,GAAIA,EAAO,MAAO,EAAI,CAAC,CAAG,EACnE,CAAE,QAAS,EAAK,CACpB,EAEJ,UAAW,IACA,CAACC,EAAK,WAAW,EAAG,CAAC,EAAG,CAAE,EAAGD,EAAO,OAAQ,GAAIA,EAAO,MAAO,EAAG,CAAE,QAAS,EAAK,CAAC,CAEjG,EAAE,KACF,eAAY,CAAC,CAAE,QAAAE,EAAS,OAAAF,CAAO,KAAO,CAClC,CAACC,EAAK,WAAW,CAAC,EAAG,CAACF,EAAGI,EAAI,CAAE,EAAAC,EAAG,GAAAC,CAAG,IAAM,CACnCD,GAAKA,IAAMJ,EAAO,QAClBE,EAAQ,UAAUE,CAAC,GAElBC,GAAM,OAASL,EAAO,QAAU,KACjCE,EAAQ,UAAUG,GAAM,EAAE,CAElC,CACJ,EAAE,CACN,CAAC,ELpBmB,IAAAC,EAAA,OATb,SAASC,IAA0B,CACtC,GAAM,CAAE,OAAAC,EAAQ,OAAAC,CAAO,KAAI,aAAUC,CAAe,EAC9C,CAAE,UAAAC,EAAW,UAAAC,CAAU,KAAI,cAAWF,CAAe,EACrD,CAAE,aAAAG,CAAa,KAAI,aAAUC,CAAgB,EAEnD,SACI,QAAC,OAAI,UAAU,aACX,oBAACC,GAAA,CACG,WACI,oBACI,oBAACC,EAAA,CAAY,OAAQ,CAAC,CAACP,EAAQ,QAAS,IAAgBG,EAATH,EAAmB,GAAgBD,CAAd,EAAwB,iBAE5F,KACA,OAACQ,EAAA,CACG,OAAQR,IAAWS,EAAoB,SACvC,QAAS,IAAMN,EAAUM,EAAoB,QAAQ,EACxD,uBAED,EACCJ,EAAaK,EAAc,GAAG,KAC3B,OAACF,EAAA,CACG,OAAQR,IAAWS,EAAoB,WACvC,QAAS,IAAMN,EAAUM,EAAoB,UAAU,EAC1D,eAED,EACA,QACJ,OAACD,EAAA,CACG,OAAQR,IAAWS,EAAoB,WACvC,QAAS,IAAMN,EAAUM,EAAoB,UAAU,EAC1D,uBAED,KACA,OAACD,EAAA,CACG,OAAQR,IAAWS,EAAoB,OACvC,QAAS,IAAMN,EAAUM,EAAoB,MAAM,EACtD,qBAED,KACA,OAACE,EAAA,CACG,mBAACC,EAAA,CACG,YAAY,sBACZ,QAAS,OAAO,QAAQH,CAAmB,EACtC,OAAO,CAAC,CAACI,CAAC,IAAMA,IAAM,cAAgBA,IAAM,UAAU,EACtD,IAAI,CAAC,CAACA,EAAG,CAAC,KACA,CAAE,MAAOA,EAAG,MAAO,CAAE,EAC/B,EACL,SAAWC,GAAM,CACTA,GACAX,EAAUW,CAAC,CAEnB,EACJ,EACJ,GACJ,EAER,KACA,QAAC,OAAI,UAAU,aACX,oBAAC,OAAI,UAAU,eACX,mBAACC,EAAA,CAAgB,MAAOf,EAAQ,SAAUG,EAAW,SAAS,oBAAoB,EACtF,EACCF,KACG,OAAC,OAAI,UAAU,eACX,mBAACc,EAAA,CAAgB,MAAOd,EAAQ,SAAUG,EAAW,SAAS,oBAAoB,EACtF,EACA,MACR,GACJ,CAER,CAEO,IAAMY,GAAqB,CAC9B,UAAWjB,GACX,MAAOG,CACX",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "Modifiers", "setQuery", "query", "response", "labelClassName", "LemonLabel", "LemonSelect", "value", "init_dirname", "init_buffer", "init_process", "import_react", "import_jsx_runtime", "toLineColumn", "hogql", "position", "lines", "line", "column", "i", "toLine", "toColumn", "QueryTabs", "query", "queryKey", "setQuery", "response", "tab", "setTab", "clickHouseTime", "k", "explainTime", "hogQLTime", "tabs", "CodeSnippet", "isInsightVizNode", "Query", "isInsightQueryNode", "isDataTableNode", "CodeEditor", "LemonTag", "Timings", "LemonTable", "error", "warn", "notice", "a", "b", "ErrorBoundary", "LemonTabs", "import_jsx_runtime", "HogQLDebug", "query", "setQuery", "queryKey", "dataNodeLogicProps", "dataLoading", "_response", "dataNodeLogic", "response", "HogQLQueryEditor", "Modifiers", "LemonDivider", "Reload", "DateRange", "EventPropertyFilters", "ElapsedTime", "QueryTabs", "import_jsx_runtime", "DebugSceneQuery", "query", "setQuery", "queryKey", "parsed", "dataNode", "isInsightVizNode", "isDataTableNode", "dataNodeKey", "insightVizDataNodeKey", "dataNodeLogicProps", "response", "dataNodeLogic", "isHogQuery", "HogDebug", "isHogQLQuery", "HogQLDebug", "QueryEditor", "Modifiers", "QueryTabs", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "DEFAULT_QUERY", "stringifiedExamples", "debugSceneLogic", "query", "_", "values", "urls", "actions", "__", "q", "q2", "import_jsx_runtime", "DebugScene", "query1", "query2", "debugSceneLogic", "setQuery1", "setQuery2", "featureFlags", "featureFlagLogic", "PageHeader", "LemonButton", "stringifiedExamples", "FEATURE_FLAGS", "LemonLabel", "LemonSelect", "k", "v", "DebugSceneQuery", "scene"]
}
