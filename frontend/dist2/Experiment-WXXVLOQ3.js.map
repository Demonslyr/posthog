{
  "version": 3,
  "sources": ["../src/scenes/experiments/Experiment.tsx", "../src/scenes/experiments/ExperimentForm.tsx", "../src/scenes/experiments/ExperimentView/ExperimentView.tsx", "../src/scenes/experiments/WebExperimentImplementationDetails.tsx", "../src/scenes/experiments/Metrics/ExperimentMetricModal.tsx", "../src/scenes/experiments/Metrics/LegacyMetricModal.tsx", "../src/scenes/experiments/Metrics/FunnelsMetricForm.tsx", "../src/scenes/experiments/Metrics/TrendsMetricForm.tsx", "../src/scenes/experiments/Metrics/MetricSourceModal.tsx", "../src/scenes/experiments/Metrics/SharedMetricModal.tsx", "../src/scenes/experiments/MetricsView/const.tsx", "../src/scenes/experiments/MetricsView/MetricsView.tsx", "../src/scenes/experiments/MetricsView/DeltaChart.tsx", "../src/scenes/experiments/ExperimentView/Overview.tsx", "../src/scenes/experiments/MetricsView/NoResultEmptyState.tsx", "../src/scenes/experiments/MetricsView/VariantDeltaTimeseries.tsx", "../../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/auto/auto.js", "../src/scenes/experiments/ExperimentView/DataCollection.tsx", "../src/scenes/experiments/ExperimentView/DataCollectionCalculator.tsx", "../src/scenes/experiments/ExperimentView/DistributionTable.tsx", "../src/scenes/experiments/ExperimentView/HoldoutSelector.tsx", "../src/scenes/experiments/ExperimentView/VariantScreenshot.tsx", "../src/scenes/experiments/ExperimentView/Exposures.tsx", "../src/scenes/experiments/ExperimentView/ReleaseConditionsTable.tsx"],
  "sourcesContent": ["import { useValues } from 'kea'\nimport { NotFound } from 'lib/components/NotFound'\nimport { SceneExport } from 'scenes/sceneTypes'\n\nimport { ExperimentForm } from './ExperimentForm'\nimport { experimentLogic, ExperimentLogicProps } from './experimentLogic'\nimport { ExperimentView } from './ExperimentView/ExperimentView'\n\nexport const scene: SceneExport = {\n    component: Experiment,\n    logic: experimentLogic,\n    paramsToProps: ({ params: { id } }): ExperimentLogicProps => ({\n        experimentId: id === 'new' ? 'new' : parseInt(id),\n    }),\n}\n\nexport function Experiment(): JSX.Element {\n    const { experimentId, editingExistingExperiment, experimentMissing } = useValues(experimentLogic)\n\n    if (experimentMissing) {\n        return <NotFound object=\"experiment\" />\n    }\n\n    return experimentId === 'new' || editingExistingExperiment ? <ExperimentForm /> : <ExperimentView />\n}\n", "import { IconPlusSmall, IconSparkles, IconToggle, IconTrash } from '@posthog/icons'\nimport { LemonBanner, LemonDivider, LemonInput, LemonModal, LemonTextArea, Link, Tooltip } from '@posthog/lemon-ui'\nimport { LemonTable } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { Form, Group } from 'kea-forms'\nimport { ExperimentVariantNumber } from 'lib/components/SeriesGlyph'\nimport { MAX_EXPERIMENT_VARIANTS } from 'lib/constants'\nimport { groupsAccessLogic, GroupsAccessStatus } from 'lib/introductions/groupsAccessLogic'\nimport { IconOpenInNew } from 'lib/lemon-ui/icons'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { LemonRadio } from 'lib/lemon-ui/LemonRadio'\nimport { LemonSelect } from 'lib/lemon-ui/LemonSelect'\nimport { capitalizeFirstLetter } from 'lib/utils'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\nimport { useState } from 'react'\nimport { experimentsLogic } from 'scenes/experiments/experimentsLogic'\nimport { urls } from 'scenes/urls'\n\nimport { experimentLogic } from './experimentLogic'\nimport { featureFlagEligibleForExperiment } from './utils'\n\nconst ExperimentFormFields = (): JSX.Element => {\n    const { experiment, groupTypes, aggregationLabel, hasPrimaryMetricSet, validExistingFeatureFlag } =\n        useValues(experimentLogic)\n    const {\n        addVariant,\n        removeExperimentGroup,\n        setExperiment,\n        createExperiment,\n        setExperimentType,\n        validateFeatureFlag,\n    } = useActions(experimentLogic)\n    const { webExperimentsAvailable, unavailableFeatureFlagKeys } = useValues(experimentsLogic)\n    const { groupsAccessStatus } = useValues(groupsAccessLogic)\n\n    const { reportExperimentFeatureFlagModalOpened, reportExperimentFeatureFlagSelected } = useActions(eventUsageLogic)\n\n    const [showFeatureFlagSelector, setShowFeatureFlagSelector] = useState(false)\n\n    return (\n        <div>\n            {hasPrimaryMetricSet && (\n                <LemonBanner type=\"info\" className=\"my-4\">\n                    Fill out the details below to create your experiment based off of the insight.\n                </LemonBanner>\n            )}\n            <div className=\"space-y-8\">\n                <div className=\"space-y-6 max-w-120\">\n                    <LemonField name=\"name\" label=\"Name\">\n                        <LemonInput placeholder=\"Pricing page conversion\" data-attr=\"experiment-name\" />\n                    </LemonField>\n                    <LemonField\n                        name=\"feature_flag_key\"\n                        label=\"Feature flag key\"\n                        help={\n                            <div className=\"flex items-center space-x-2\">\n                                <span>\n                                    Each experiment is backed by a feature flag. Create a new one by entering a key, or\n                                    choose an existing feature flag with multiple variants.\n                                </span>\n                                <LemonButton\n                                    type=\"secondary\"\n                                    size=\"xsmall\"\n                                    onClick={() => {\n                                        reportExperimentFeatureFlagModalOpened()\n                                        setShowFeatureFlagSelector(true)\n                                    }}\n                                >\n                                    <IconToggle className=\"mr-1\" /> Choose\n                                </LemonButton>\n                                <LemonButton\n                                    type=\"secondary\"\n                                    size=\"xsmall\"\n                                    disabledReason={\n                                        experiment.name\n                                            ? undefined\n                                            : 'Fill out the experiment name first to generate a key from it.'\n                                    }\n                                    tooltip={experiment.name ? 'Generate a key from the experiment name' : undefined}\n                                    onClick={() => {\n                                        setExperiment({\n                                            feature_flag_key: generateFeatureFlagKey(\n                                                experiment.name,\n                                                unavailableFeatureFlagKeys\n                                            ),\n                                        })\n                                    }}\n                                >\n                                    <IconSparkles className=\"mr-1\" /> Generate\n                                </LemonButton>\n                            </div>\n                        }\n                    >\n                        <LemonInput placeholder=\"pricing-page-conversion\" data-attr=\"experiment-feature-flag-key\" />\n                    </LemonField>\n                    <LemonField name=\"description\" label=\"Description\">\n                        <LemonTextArea\n                            placeholder=\"The goal of this experiment is ...\"\n                            data-attr=\"experiment-description\"\n                        />\n                    </LemonField>\n                </div>\n                <SelectExistingFeatureFlagModal\n                    isOpen={showFeatureFlagSelector}\n                    onClose={() => setShowFeatureFlagSelector(false)}\n                    onSelect={(key) => {\n                        reportExperimentFeatureFlagSelected(key)\n                        setExperiment({ feature_flag_key: key })\n                        validateFeatureFlag(key)\n                        setShowFeatureFlagSelector(false)\n                    }}\n                />\n                {webExperimentsAvailable && (\n                    <div className=\"mt-10\">\n                        <h3 className=\"mb-1\">Experiment type</h3>\n                        <div className=\"text-xs text-secondary font-medium tracking-normal\">\n                            Select your experiment setup, this cannot be changed once saved.\n                        </div>\n                        <LemonDivider />\n                        <LemonRadio\n                            value={experiment.type}\n                            className=\"space-y-2 -mt-2\"\n                            onChange={(type) => {\n                                setExperimentType(type)\n                            }}\n                            options={[\n                                {\n                                    value: 'product',\n                                    label: (\n                                        <div className=\"translate-y-2\">\n                                            <div>Product experiment</div>\n                                            <div className=\"text-xs text-secondary\">\n                                                Use custom code to manage how variants modify your product.\n                                            </div>\n                                        </div>\n                                    ),\n                                },\n                                {\n                                    value: 'web',\n                                    label: (\n                                        <div className=\"translate-y-2\">\n                                            <div>No-code web experiment</div>\n                                            <div className=\"text-xs text-secondary\">\n                                                Define variants on your website using the PostHog toolbar, no coding\n                                                required.\n                                            </div>\n                                        </div>\n                                    ),\n                                },\n                            ]}\n                        />\n                    </div>\n                )}\n                {groupsAccessStatus === GroupsAccessStatus.AlreadyUsing && (\n                    <div>\n                        <h3 className=\"mt-10\">Participant type</h3>\n                        <div className=\"text-xs text-secondary\">\n                            The type on which to aggregate metrics. You can change this at any time during the\n                            experiment.\n                        </div>\n                        <LemonDivider />\n                        <LemonRadio\n                            value={\n                                experiment.parameters.aggregation_group_type_index != undefined\n                                    ? experiment.parameters.aggregation_group_type_index\n                                    : -1\n                            }\n                            onChange={(rawGroupTypeIndex) => {\n                                const groupTypeIndex = rawGroupTypeIndex !== -1 ? rawGroupTypeIndex : undefined\n\n                                setExperiment({\n                                    parameters: {\n                                        ...experiment.parameters,\n                                        aggregation_group_type_index: groupTypeIndex ?? undefined,\n                                    },\n                                })\n                            }}\n                            options={[\n                                { value: -1, label: 'Persons' },\n                                ...Array.from(groupTypes.values()).map((groupType) => ({\n                                    value: groupType.group_type_index,\n                                    label: capitalizeFirstLetter(aggregationLabel(groupType.group_type_index).plural),\n                                })),\n                            ]}\n                        />\n                    </div>\n                )}\n                {validExistingFeatureFlag && (\n                    <div className=\"mt-10\">\n                        <h3 className=\"mb-1\">Variants</h3>\n                        <LemonDivider />\n                        <LemonBanner type=\"info\" className=\"mb-8\">\n                            <div className=\"flex items-center\">\n                                <div>Existing feature flag configuration will be applied to the experiment.</div>\n                                <Link\n                                    to={urls.featureFlag(validExistingFeatureFlag.id as number)}\n                                    target=\"_blank\"\n                                    className=\"flex items-center\"\n                                >\n                                    <IconOpenInNew className=\"ml-1\" />\n                                </Link>\n                            </div>\n                        </LemonBanner>\n                    </div>\n                )}\n                {!validExistingFeatureFlag && (\n                    <>\n                        <div className=\"mt-10\">\n                            <h3 className=\"mb-1\">Variants</h3>\n                            <div className=\"text-xs text-secondary\">\n                                Add up to {MAX_EXPERIMENT_VARIANTS - 1} variants to test against your control.\n                            </div>\n                            <LemonDivider />\n                            <div className=\"grid grid-cols-2 gap-4 max-w-160\">\n                                <div className=\"max-w-60\">\n                                    <h3>Control</h3>\n                                    <div className=\"flex items-center\">\n                                        <Group key={0} name={['parameters', 'feature_flag_variants', 0]}>\n                                            <ExperimentVariantNumber index={0} className=\"h-7 w-7 text-base\" />\n                                            <LemonField name=\"key\" className=\"ml-2 flex-grow\">\n                                                <LemonInput\n                                                    disabled\n                                                    data-attr=\"experiment-variant-key\"\n                                                    data-key-index={0}\n                                                    className=\"ph-ignore-input\"\n                                                    fullWidth\n                                                    autoComplete=\"off\"\n                                                    autoCapitalize=\"off\"\n                                                    autoCorrect=\"off\"\n                                                    spellCheck={false}\n                                                />\n                                            </LemonField>\n                                        </Group>\n                                    </div>\n                                    <div className=\"text-muted text-xs mt-2\">\n                                        Included automatically, cannot be edited or removed\n                                    </div>\n                                </div>\n                                <div className=\"max-w-100\">\n                                    <h3>Test(s)</h3>\n                                    {experiment.parameters.feature_flag_variants?.map((_, index) => {\n                                        if (index === 0) {\n                                            return null\n                                        }\n\n                                        return (\n                                            <Group key={index} name={['parameters', 'feature_flag_variants', index]}>\n                                                <div\n                                                    key={`variant-${index}`}\n                                                    className={`flex items-center space-x-2 ${index > 1 && 'mt-2'}`}\n                                                >\n                                                    <ExperimentVariantNumber\n                                                        index={index}\n                                                        className=\"h-7 w-7 text-base\"\n                                                    />\n                                                    <LemonField name=\"key\" className=\"flex-grow\">\n                                                        <LemonInput\n                                                            data-attr=\"experiment-variant-key\"\n                                                            data-key-index={index.toString()}\n                                                            className=\"ph-ignore-input\"\n                                                            fullWidth\n                                                            autoComplete=\"off\"\n                                                            autoCapitalize=\"off\"\n                                                            autoCorrect=\"off\"\n                                                            spellCheck={false}\n                                                        />\n                                                    </LemonField>\n                                                    <div className={`${index === 1 && 'pr-9'}`}>\n                                                        {index !== 1 && (\n                                                            <Tooltip title=\"Delete this variant\" placement=\"top-start\">\n                                                                <LemonButton\n                                                                    size=\"small\"\n                                                                    icon={<IconTrash />}\n                                                                    onClick={() => removeExperimentGroup(index)}\n                                                                />\n                                                            </Tooltip>\n                                                        )}\n                                                    </div>\n                                                </div>\n                                            </Group>\n                                        )\n                                    })}\n                                    <div className=\"text-secondary text-xs ml-9 mr-20 mt-2\">\n                                        Alphanumeric, hyphens and underscores only\n                                    </div>\n                                    {(experiment.parameters.feature_flag_variants.length ?? 0) <\n                                        MAX_EXPERIMENT_VARIANTS && (\n                                        <LemonButton\n                                            className=\"ml-9 mt-2\"\n                                            type=\"secondary\"\n                                            onClick={() => addVariant()}\n                                            icon={<IconPlusSmall />}\n                                            data-attr=\"add-test-variant\"\n                                        >\n                                            Add test variant\n                                        </LemonButton>\n                                    )}\n                                </div>\n                            </div>\n                        </div>\n                    </>\n                )}\n            </div>\n            <LemonButton\n                className=\"mt-2\"\n                type=\"primary\"\n                data-attr=\"save-experiment\"\n                onClick={() => createExperiment(true)}\n            >\n                Save as draft\n            </LemonButton>\n        </div>\n    )\n}\n\nexport const HoldoutSelector = (): JSX.Element => {\n    const { experiment, holdouts } = useValues(experimentLogic)\n    const { setExperiment } = useActions(experimentLogic)\n\n    const holdoutOptions = holdouts.map((holdout) => ({\n        value: holdout.id,\n        label: holdout.name,\n    }))\n    holdoutOptions.unshift({ value: null, label: 'No holdout' })\n\n    return (\n        <div className=\"mt-4 mb-8\">\n            <LemonSelect\n                options={holdoutOptions}\n                value={experiment.holdout_id || null}\n                onChange={(value) => {\n                    setExperiment({\n                        ...experiment,\n                        holdout_id: value,\n                    })\n                }}\n                data-attr=\"experiment-holdout-selector\"\n            />\n        </div>\n    )\n}\n\nexport function ExperimentForm(): JSX.Element {\n    const { props } = useValues(experimentLogic)\n\n    return (\n        <div>\n            <Form\n                id=\"experiment-step\"\n                logic={experimentLogic}\n                formKey=\"experiment\"\n                props={props}\n                enableFormOnSubmit\n                className=\"space-y-6 experiment-form\"\n            >\n                <ExperimentFormFields />\n            </Form>\n        </div>\n    )\n}\n\nconst generateFeatureFlagKey = (name: string, unavailableFeatureFlagKeys: Set<string>): string => {\n    const baseKey = name\n        .toLowerCase()\n        .replace(/[^A-Za-z0-9-_]+/g, '-')\n        .replace(/-+$/, '')\n        .replace(/^-+/, '')\n\n    let key = baseKey\n    let counter = 1\n\n    while (unavailableFeatureFlagKeys.has(key)) {\n        key = `${baseKey}-${counter}`\n        counter++\n    }\n    return key\n}\n\nconst SelectExistingFeatureFlagModal = ({\n    isOpen,\n    onClose,\n    onSelect,\n}: {\n    isOpen: boolean\n    onClose: () => void\n    onSelect: (key: string) => void\n}): JSX.Element => {\n    const { featureFlags } = useValues(experimentsLogic)\n\n    return (\n        <LemonModal isOpen={isOpen} onClose={onClose} title=\"Choose an existing feature flag\">\n            <div className=\"space-y-2\">\n                <div className=\"text-muted mb-2 max-w-xl\">\n                    Select an existing feature flag to use with this experiment. The feature flag must use multiple\n                    variants with <code>'control'</code> as the first, and not be associated with an existing\n                    experiment.\n                </div>\n                <LemonTable\n                    dataSource={featureFlags.results}\n                    useURLForSorting={false}\n                    columns={[\n                        {\n                            title: 'Key',\n                            dataIndex: 'key',\n                            sorter: (a, b) => (a.key || '').localeCompare(b.key || ''),\n                            render: (key, flag) => (\n                                <div className=\"flex items-center\">\n                                    <div className=\"font-semibold\">{key}</div>\n                                    <Link\n                                        to={urls.featureFlag(flag.id as number)}\n                                        target=\"_blank\"\n                                        className=\"flex items-center\"\n                                    >\n                                        <IconOpenInNew className=\"ml-1\" />\n                                    </Link>\n                                </div>\n                            ),\n                        },\n                        {\n                            title: 'Name',\n                            dataIndex: 'name',\n                            sorter: (a, b) => (a.name || '').localeCompare(b.name || ''),\n                        },\n                        {\n                            title: null,\n                            render: function RenderActions(_, flag) {\n                                let disabledReason: string | undefined = undefined\n                                try {\n                                    featureFlagEligibleForExperiment(flag)\n                                } catch (error) {\n                                    disabledReason = (error as Error).message\n                                }\n                                return (\n                                    <LemonButton\n                                        size=\"xsmall\"\n                                        type=\"primary\"\n                                        disabledReason={disabledReason}\n                                        onClick={() => {\n                                            onSelect(flag.key)\n                                            onClose()\n                                        }}\n                                    >\n                                        Select\n                                    </LemonButton>\n                                )\n                            },\n                        },\n                    ]}\n                />\n            </div>\n        </LemonModal>\n    )\n}\n", "import { LemonTabs } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { WebExperimentImplementationDetails } from 'scenes/experiments/WebExperimentImplementationDetails'\n\nimport { ExperimentImplementationDetails } from '../ExperimentImplementationDetails'\nimport { experimentLogic } from '../experimentLogic'\nimport { ExperimentMetricModal } from '../Metrics/ExperimentMetricModal'\nimport { LegacyMetricModal } from '../Metrics/LegacyMetricModal'\nimport { MetricSourceModal } from '../Metrics/MetricSourceModal'\nimport { SharedMetricModal } from '../Metrics/SharedMetricModal'\nimport { MetricsView } from '../MetricsView/MetricsView'\nimport { VariantDeltaTimeseries } from '../MetricsView/VariantDeltaTimeseries'\nimport { ExploreButton, LoadingState, PageHeaderCustom, ResultsQuery } from './components'\nimport { DataCollection } from './DataCollection'\nimport { DistributionModal, DistributionTable } from './DistributionTable'\nimport { Exposures } from './Exposures'\nimport { Info } from './Info'\nimport { Overview } from './Overview'\nimport { ReleaseConditionsModal, ReleaseConditionsTable } from './ReleaseConditionsTable'\nimport { SummaryTable } from './SummaryTable'\n\nconst ResultsTab = (): JSX.Element => {\n    const {\n        experiment,\n        metricResults,\n        firstPrimaryMetric,\n        primaryMetricsLengthWithSharedMetrics,\n        metricResultsLoading,\n    } = useValues(experimentLogic)\n    const hasSomeResults = metricResults?.some((result) => result?.insight)\n\n    const hasSinglePrimaryMetric = primaryMetricsLengthWithSharedMetrics === 1\n\n    return (\n        <>\n            {!hasSomeResults && !metricResultsLoading && (\n                <>\n                    {experiment.type === 'web' ? (\n                        <WebExperimentImplementationDetails experiment={experiment} />\n                    ) : (\n                        <ExperimentImplementationDetails experiment={experiment} />\n                    )}\n                </>\n            )}\n            {/* Show overview if there's only a single primary metric */}\n            {hasSinglePrimaryMetric && (\n                <div className=\"mb-4 mt-2\">\n                    <Overview />\n                </div>\n            )}\n            <MetricsView isSecondary={false} />\n            {/* Show detailed results if there's only a single primary metric */}\n            {hasSomeResults && hasSinglePrimaryMetric && firstPrimaryMetric && (\n                <div>\n                    <div className=\"pb-4\">\n                        <SummaryTable metric={firstPrimaryMetric} metricIndex={0} isSecondary={false} />\n                    </div>\n                    {/* TODO: Only show explore button results viz if the metric is a trends or funnels query. Not supported yet with new query runner */}\n                    {metricResults?.[0] &&\n                        (metricResults[0].kind === 'ExperimentTrendsQuery' ||\n                            metricResults[0].kind === 'ExperimentFunnelsQuery') && (\n                            <>\n                                <div className=\"flex justify-end\">\n                                    <ExploreButton result={metricResults[0]} size=\"xsmall\" />\n                                </div>\n                                <div className=\"pb-4\">\n                                    <ResultsQuery result={metricResults?.[0] || null} showTable={true} />\n                                </div>\n                            </>\n                        )}\n                </div>\n            )}\n            <MetricsView isSecondary={true} />\n        </>\n    )\n}\n\nconst VariantsTab = (): JSX.Element => {\n    const { shouldUseExperimentMetrics, isExperimentRunning } = useValues(experimentLogic)\n    return (\n        <div className=\"space-y-8 mt-2\">\n            {shouldUseExperimentMetrics && isExperimentRunning && <Exposures />}\n            <ReleaseConditionsTable />\n            <DistributionTable />\n        </div>\n    )\n}\n\nexport function ExperimentView(): JSX.Element {\n    const { experimentLoading, experimentId, tabKey, shouldUseExperimentMetrics } = useValues(experimentLogic)\n\n    const { setTabKey } = useActions(experimentLogic)\n\n    return (\n        <>\n            <PageHeaderCustom />\n            <div className=\"space-y-8 experiment-view\">\n                {experimentLoading ? (\n                    <LoadingState />\n                ) : (\n                    <>\n                        <Info />\n                        <div className=\"xl:flex\">\n                            <div className=\"w-1/2 mt-8 xl:mt-0\">\n                                <DataCollection />\n                            </div>\n                        </div>\n                        <LemonTabs\n                            activeKey={tabKey}\n                            onChange={(key) => setTabKey(key)}\n                            tabs={[\n                                {\n                                    key: 'results',\n                                    label: 'Results',\n                                    content: <ResultsTab />,\n                                },\n                                {\n                                    key: 'variants',\n                                    label: 'Variants',\n                                    content: <VariantsTab />,\n                                },\n                            ]}\n                        />\n\n                        <MetricSourceModal experimentId={experimentId} isSecondary={true} />\n                        <MetricSourceModal experimentId={experimentId} isSecondary={false} />\n\n                        {shouldUseExperimentMetrics ? (\n                            <>\n                                <ExperimentMetricModal experimentId={experimentId} isSecondary={true} />\n                                <ExperimentMetricModal experimentId={experimentId} isSecondary={false} />\n                            </>\n                        ) : (\n                            <>\n                                <LegacyMetricModal experimentId={experimentId} isSecondary={true} />\n                                <LegacyMetricModal experimentId={experimentId} isSecondary={false} />\n                            </>\n                        )}\n\n                        <SharedMetricModal experimentId={experimentId} isSecondary={true} />\n                        <SharedMetricModal experimentId={experimentId} isSecondary={false} />\n\n                        <DistributionModal experimentId={experimentId} />\n                        <ReleaseConditionsModal experimentId={experimentId} />\n\n                        <VariantDeltaTimeseries />\n                    </>\n                )}\n            </div>\n        </>\n    )\n}\n", "import { AuthorizedUrlList } from 'lib/components/AuthorizedUrlList/AuthorizedUrlList'\nimport { AuthorizedUrlListType } from 'lib/components/AuthorizedUrlList/authorizedUrlListLogic'\nimport { IconOpenInApp } from 'lib/lemon-ui/icons'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonDialog } from 'lib/lemon-ui/LemonDialog'\n\nimport { Experiment } from '~/types'\n\ninterface WebExperimentImplementationDetails {\n    experiment: Partial<Experiment> | null\n}\nexport function WebExperimentImplementationDetails({ experiment }: WebExperimentImplementationDetails): JSX.Element {\n    const onSelectElement = (): void => {\n        LemonDialog.open({\n            title: 'Select a domain',\n            description: experiment?.id\n                ? 'Choose the domain on which to edit this experiment'\n                : 'Choose the domain on which to create this experiment',\n            content: (\n                <>\n                    <AuthorizedUrlList experimentId={experiment?.id} type={AuthorizedUrlListType.TOOLBAR_URLS} />\n                </>\n            ),\n            primaryButton: {\n                children: 'Close',\n                type: 'secondary',\n            },\n        })\n    }\n\n    return (\n        <>\n            <div>\n                <h2 className=\"font-semibold text-lg mb-2\">Implementation</h2>\n                <div className=\"border p-6 rounded bg-surface-primary space-y-2\">\n                    <div className=\"font-semibold leading-tight text-base text-current\">\n                        Define variant changes directly on your website\n                    </div>\n                    <div className=\"text-sm text-secondary\">\n                        Use our toolbar to select elements and apply transformations for each variant.\n                    </div>\n                    <div>\n                        <LemonButton\n                            size=\"small\"\n                            type=\"secondary\"\n                            onClick={onSelectElement}\n                            sideIcon={<IconOpenInApp />}\n                        >\n                            Launch toolbar on your website\n                        </LemonButton>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n", "import { LemonButton, LemonDialog, LemonInput, LemonLabel, LemonModal } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\n\nimport { ExperimentMetric } from '~/queries/schema/schema-general'\nimport { Experiment } from '~/types'\n\nimport { experimentLogic } from '../experimentLogic'\nimport { ExperimentMetricForm } from '../ExperimentMetricForm'\n\nexport function ExperimentMetricModal({\n    experimentId,\n    isSecondary,\n}: {\n    experimentId: Experiment['id']\n    isSecondary?: boolean\n}): JSX.Element {\n    const {\n        experiment,\n        experimentLoading,\n        isPrimaryMetricModalOpen,\n        isSecondaryMetricModalOpen,\n        editingPrimaryMetricIndex,\n        editingSecondaryMetricIndex,\n    } = useValues(experimentLogic({ experimentId }))\n    const {\n        setMetric,\n        updateExperimentGoal,\n        setExperiment,\n        closePrimaryMetricModal,\n        closeSecondaryMetricModal,\n        restoreUnmodifiedExperiment,\n    } = useActions(experimentLogic({ experimentId }))\n\n    const metricIdx = isSecondary ? editingSecondaryMetricIndex : editingPrimaryMetricIndex\n    const metricsField = isSecondary ? 'metrics_secondary' : 'metrics'\n\n    if (!metricIdx && metricIdx !== 0) {\n        return <></>\n    }\n\n    const metrics = experiment[metricsField]\n    const metric = metrics[metricIdx] as ExperimentMetric\n\n    const onClose = (): void => {\n        restoreUnmodifiedExperiment()\n        isSecondary ? closeSecondaryMetricModal() : closePrimaryMetricModal()\n    }\n\n    return (\n        <LemonModal\n            isOpen={isSecondary ? isSecondaryMetricModalOpen : isPrimaryMetricModalOpen}\n            onClose={onClose}\n            width={1000}\n            title=\"Edit experiment metric\"\n            footer={\n                <div className=\"flex items-center w-full\">\n                    <LemonButton\n                        type=\"secondary\"\n                        status=\"danger\"\n                        onClick={() => {\n                            LemonDialog.open({\n                                title: 'Delete this metric?',\n                                content: <div className=\"text-sm text-muted\">This action cannot be undone.</div>,\n                                primaryButton: {\n                                    children: 'Delete',\n                                    type: 'primary',\n                                    onClick: () => {\n                                        const newMetrics = metrics.filter((_, idx) => idx !== metricIdx)\n                                        setExperiment({\n                                            [metricsField]: newMetrics,\n                                        })\n                                        updateExperimentGoal()\n                                        isSecondary ? closeSecondaryMetricModal() : closePrimaryMetricModal()\n                                    },\n                                    size: 'small',\n                                },\n                                secondaryButton: {\n                                    children: 'Cancel',\n                                    type: 'tertiary',\n                                    size: 'small',\n                                },\n                            })\n                        }}\n                    >\n                        Delete\n                    </LemonButton>\n                    <div className=\"flex items-center gap-2 ml-auto\">\n                        <LemonButton form=\"edit-experiment-metric-form\" type=\"secondary\" onClick={onClose}>\n                            Cancel\n                        </LemonButton>\n                        <LemonButton\n                            form=\"edit-experiment-metric-form\"\n                            onClick={() => {\n                                updateExperimentGoal()\n                                isSecondary ? closeSecondaryMetricModal() : closePrimaryMetricModal()\n                            }}\n                            type=\"primary\"\n                            loading={experimentLoading}\n                            data-attr=\"save-experiment-metric\"\n                        >\n                            Save\n                        </LemonButton>\n                    </div>\n                </div>\n            }\n        >\n            <div className=\"mb-4\">\n                <LemonLabel>Name (optional)</LemonLabel>\n                <LemonInput\n                    value={metric.name}\n                    onChange={(newName) => {\n                        setMetric({\n                            metricIdx,\n                            metric: {\n                                ...metric,\n                                name: newName,\n                            },\n                            isSecondary,\n                        })\n                    }}\n                />\n            </div>\n            <ExperimentMetricForm\n                metric={metric}\n                handleSetMetric={({ newMetric }: { newMetric: ExperimentMetric }) => {\n                    setMetric({ metricIdx, metric: newMetric, isSecondary })\n                }}\n            />\n        </LemonModal>\n    )\n}\n", "import { LemonButton, LemonDialog, LemonModal, LemonSelect } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\n\nimport { ExperimentFunnelsQuery, ExperimentTrendsQuery } from '~/queries/schema/schema-general'\nimport { Experiment, InsightType } from '~/types'\n\nimport { experimentLogic } from '../experimentLogic'\nimport { getDefaultFunnelsMetric, getDefaultTrendsMetric } from '../utils'\nimport { FunnelsMetricForm } from './FunnelsMetricForm'\nimport { TrendsMetricForm } from './TrendsMetricForm'\n\nexport function LegacyMetricModal({\n    experimentId,\n    isSecondary,\n}: {\n    experimentId: Experiment['id']\n    isSecondary?: boolean\n}): JSX.Element {\n    const {\n        experiment,\n        experimentLoading,\n        getMetricType,\n        isPrimaryMetricModalOpen,\n        isSecondaryMetricModalOpen,\n        editingPrimaryMetricIndex,\n        editingSecondaryMetricIndex,\n    } = useValues(experimentLogic({ experimentId }))\n    const {\n        updateExperimentGoal,\n        setExperiment,\n        closePrimaryMetricModal,\n        closeSecondaryMetricModal,\n        restoreUnmodifiedExperiment,\n    } = useActions(experimentLogic({ experimentId }))\n\n    const metricIdx = isSecondary ? editingSecondaryMetricIndex : editingPrimaryMetricIndex\n    const metricsField = isSecondary ? 'metrics_secondary' : 'metrics'\n\n    if (!metricIdx && metricIdx !== 0) {\n        return <></>\n    }\n\n    const metrics = experiment[metricsField]\n    const metric = metrics[metricIdx] as ExperimentTrendsQuery | ExperimentFunnelsQuery\n    const metricType = getMetricType(metric)\n    const funnelStepsLength = (metric as ExperimentFunnelsQuery)?.funnels_query?.series?.length || 0\n\n    const onClose = (): void => {\n        restoreUnmodifiedExperiment()\n        isSecondary ? closeSecondaryMetricModal() : closePrimaryMetricModal()\n    }\n\n    return (\n        <LemonModal\n            isOpen={isSecondary ? isSecondaryMetricModalOpen : isPrimaryMetricModalOpen}\n            onClose={onClose}\n            width={1000}\n            title=\"Edit experiment metric\"\n            footer={\n                <div className=\"flex items-center w-full\">\n                    <LemonButton\n                        type=\"secondary\"\n                        status=\"danger\"\n                        onClick={() => {\n                            LemonDialog.open({\n                                title: 'Delete this metric?',\n                                content: <div className=\"text-sm text-secondary\">This action cannot be undone.</div>,\n                                primaryButton: {\n                                    children: 'Delete',\n                                    type: 'primary',\n                                    onClick: () => {\n                                        const newMetrics = metrics.filter((_, idx) => idx !== metricIdx)\n                                        setExperiment({\n                                            [metricsField]: newMetrics,\n                                        })\n                                        updateExperimentGoal()\n                                        isSecondary ? closeSecondaryMetricModal() : closePrimaryMetricModal()\n                                    },\n                                    size: 'small',\n                                },\n                                secondaryButton: {\n                                    children: 'Cancel',\n                                    type: 'tertiary',\n                                    size: 'small',\n                                },\n                            })\n                        }}\n                    >\n                        Delete\n                    </LemonButton>\n                    <div className=\"flex items-center gap-2 ml-auto\">\n                        <LemonButton form=\"edit-experiment-goal-form\" type=\"secondary\" onClick={onClose}>\n                            Cancel\n                        </LemonButton>\n                        <LemonButton\n                            disabledReason={\n                                metricType === InsightType.FUNNELS &&\n                                funnelStepsLength < 2 &&\n                                'The experiment needs at least two funnel steps.'\n                            }\n                            form=\"edit-experiment-goal-form\"\n                            onClick={() => {\n                                updateExperimentGoal()\n                                isSecondary ? closeSecondaryMetricModal() : closePrimaryMetricModal()\n                            }}\n                            type=\"primary\"\n                            loading={experimentLoading}\n                            data-attr=\"create-annotation-submit\"\n                        >\n                            Save\n                        </LemonButton>\n                    </div>\n                </div>\n            }\n        >\n            <div className=\"flex items-center w-full gap-2 mb-4\">\n                <span>Metric type</span>\n                <LemonSelect\n                    data-attr=\"metrics-selector\"\n                    value={metricType}\n                    onChange={(newMetricType) => {\n                        setExperiment({\n                            ...experiment,\n                            [metricsField]: [\n                                ...metrics.slice(0, metricIdx),\n                                newMetricType === InsightType.TRENDS\n                                    ? getDefaultTrendsMetric()\n                                    : getDefaultFunnelsMetric(),\n                                ...metrics.slice(metricIdx + 1),\n                            ],\n                        })\n                    }}\n                    options={[\n                        { value: InsightType.TRENDS, label: <b>Trends</b> },\n                        { value: InsightType.FUNNELS, label: <b>Funnels</b> },\n                    ]}\n                />\n            </div>\n            {metricType === InsightType.TRENDS ? (\n                <TrendsMetricForm isSecondary={isSecondary} />\n            ) : (\n                <FunnelsMetricForm isSecondary={isSecondary} />\n            )}\n        </LemonModal>\n    )\n}\n", "import { LemonLabel } from '@posthog/lemon-ui'\nimport { LemonInput } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { TestAccountFilterSwitch } from 'lib/components/TestAccountFiltersSwitch'\nimport { EXPERIMENT_DEFAULT_DURATION } from 'lib/constants'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { ActionFilter } from 'scenes/insights/filters/ActionFilter/ActionFilter'\nimport { MathAvailability } from 'scenes/insights/filters/ActionFilter/ActionFilterRow/ActionFilterRow'\nimport { getHogQLValue } from 'scenes/insights/filters/AggregationSelect'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { actionsAndEventsToSeries } from '~/queries/nodes/InsightQuery/utils/filtersToQueryNode'\nimport { queryNodeToFilter } from '~/queries/nodes/InsightQuery/utils/queryNodeToFilter'\nimport { Query } from '~/queries/Query/Query'\nimport { ExperimentFunnelsQuery, NodeKind } from '~/queries/schema/schema-general'\nimport { BreakdownAttributionType, FilterType } from '~/types'\n\nimport { experimentLogic } from '../experimentLogic'\nimport {\n    commonActionFilterProps,\n    FunnelAggregationSelect,\n    FunnelAttributionSelect,\n    FunnelConversionWindowFilter,\n} from './Selectors'\nexport function FunnelsMetricForm({ isSecondary = false }: { isSecondary?: boolean }): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n    const { experiment, isExperimentRunning, editingPrimaryMetricIndex, editingSecondaryMetricIndex } =\n        useValues(experimentLogic)\n    const { setFunnelsMetric } = useActions(experimentLogic)\n    const hasFilters = (currentTeam?.test_account_filters || []).length > 0\n\n    const metrics = isSecondary ? experiment.metrics_secondary : experiment.metrics\n    const metricIdx = isSecondary ? editingSecondaryMetricIndex : editingPrimaryMetricIndex\n\n    if (!metricIdx && metricIdx !== 0) {\n        return <></>\n    }\n\n    const currentMetric = metrics[metricIdx] as ExperimentFunnelsQuery\n\n    const actionFilterProps = {\n        ...commonActionFilterProps,\n        actionsTaxonomicGroupTypes: [TaxonomicFilterGroupType.Events, TaxonomicFilterGroupType.Actions],\n    }\n\n    return (\n        <>\n            <div className=\"mb-4\">\n                <LemonLabel>Name (optional)</LemonLabel>\n                <LemonInput\n                    value={currentMetric.name}\n                    onChange={(newName) => {\n                        setFunnelsMetric({\n                            metricIdx,\n                            name: newName,\n                            isSecondary,\n                        })\n                    }}\n                />\n            </div>\n            <ActionFilter\n                bordered\n                filters={queryNodeToFilter(currentMetric.funnels_query)}\n                setFilters={({ actions, events, data_warehouse }: Partial<FilterType>): void => {\n                    const series = actionsAndEventsToSeries(\n                        { actions, events, data_warehouse } as any,\n                        true,\n                        MathAvailability.None\n                    )\n\n                    setFunnelsMetric({\n                        metricIdx,\n                        series,\n                        isSecondary,\n                    })\n                }}\n                typeKey=\"experiment-metric\"\n                mathAvailability={MathAvailability.None}\n                buttonCopy=\"Add funnel step\"\n                showSeriesIndicator={true}\n                seriesIndicatorType=\"numeric\"\n                sortable={true}\n                showNestedArrow={true}\n                {...actionFilterProps}\n            />\n            <div className=\"mt-4 space-y-4\">\n                <FunnelAggregationSelect\n                    value={getHogQLValue(\n                        currentMetric.funnels_query.aggregation_group_type_index ?? undefined,\n                        currentMetric.funnels_query.funnelsFilter?.funnelAggregateByHogQL ?? undefined\n                    )}\n                    onChange={(value) => {\n                        setFunnelsMetric({\n                            metricIdx,\n                            funnelAggregateByHogQL: value,\n                            isSecondary,\n                        })\n                    }}\n                />\n                <FunnelConversionWindowFilter\n                    funnelWindowInterval={currentMetric.funnels_query?.funnelsFilter?.funnelWindowInterval}\n                    funnelWindowIntervalUnit={currentMetric.funnels_query?.funnelsFilter?.funnelWindowIntervalUnit}\n                    onFunnelWindowIntervalChange={(funnelWindowInterval) => {\n                        setFunnelsMetric({\n                            metricIdx,\n                            funnelWindowInterval: funnelWindowInterval,\n                            isSecondary,\n                        })\n                    }}\n                    onFunnelWindowIntervalUnitChange={(funnelWindowIntervalUnit) => {\n                        setFunnelsMetric({\n                            metricIdx,\n                            funnelWindowIntervalUnit: funnelWindowIntervalUnit || undefined,\n                            isSecondary,\n                        })\n                    }}\n                />\n                <FunnelAttributionSelect\n                    value={(() => {\n                        const breakdownAttributionType =\n                            currentMetric.funnels_query?.funnelsFilter?.breakdownAttributionType\n                        const breakdownAttributionValue =\n                            currentMetric.funnels_query?.funnelsFilter?.breakdownAttributionValue\n\n                        const currentValue: BreakdownAttributionType | `${BreakdownAttributionType.Step}/${number}` =\n                            !breakdownAttributionType\n                                ? BreakdownAttributionType.FirstTouch\n                                : breakdownAttributionType === BreakdownAttributionType.Step\n                                ? `${breakdownAttributionType}/${breakdownAttributionValue || 0}`\n                                : breakdownAttributionType\n\n                        return currentValue\n                    })()}\n                    onChange={(value) => {\n                        const [breakdownAttributionType, breakdownAttributionValue] = (value || '').split('/')\n                        setFunnelsMetric({\n                            metricIdx,\n                            breakdownAttributionType: breakdownAttributionType as BreakdownAttributionType,\n                            breakdownAttributionValue: breakdownAttributionValue\n                                ? parseInt(breakdownAttributionValue)\n                                : undefined,\n                            isSecondary,\n                        })\n                    }}\n                    stepsLength={currentMetric.funnels_query?.series?.length}\n                />\n                <TestAccountFilterSwitch\n                    checked={(() => {\n                        const val = currentMetric.funnels_query?.filterTestAccounts\n                        return hasFilters ? !!val : false\n                    })()}\n                    onChange={(checked: boolean) => {\n                        setFunnelsMetric({\n                            metricIdx,\n                            filterTestAccounts: checked,\n                            isSecondary,\n                        })\n                    }}\n                    fullWidth\n                />\n            </div>\n            {isExperimentRunning && (\n                <LemonBanner type=\"info\" className=\"mt-3 mb-3\">\n                    Preview insights are generated based on {EXPERIMENT_DEFAULT_DURATION} days of data. This can cause a\n                    mismatch between the preview and the actual results.\n                </LemonBanner>\n            )}\n            <div className=\"mt-4\">\n                <Query\n                    query={{\n                        kind: NodeKind.InsightVizNode,\n                        source: currentMetric.funnels_query,\n                        showTable: false,\n                        showLastComputation: true,\n                        showLastComputationRefresh: false,\n                    }}\n                    readOnly\n                />\n            </div>\n        </>\n    )\n}\n", "import './TrendsMetricForm.scss'\n\nimport { IconCheckCircle } from '@posthog/icons'\nimport { LemonButton, LemonInput, LemonLabel, LemonTabs, LemonTag } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { TestAccountFilterSwitch } from 'lib/components/TestAccountFiltersSwitch'\nimport { EXPERIMENT_DEFAULT_DURATION } from 'lib/constants'\nimport { dayjs } from 'lib/dayjs'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { useState } from 'react'\nimport { ActionFilter } from 'scenes/insights/filters/ActionFilter/ActionFilter'\nimport { MathAvailability } from 'scenes/insights/filters/ActionFilter/ActionFilterRow/ActionFilterRow'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { actionsAndEventsToSeries } from '~/queries/nodes/InsightQuery/utils/filtersToQueryNode'\nimport { queryNodeToFilter } from '~/queries/nodes/InsightQuery/utils/queryNodeToFilter'\nimport { Query } from '~/queries/Query/Query'\nimport { ExperimentTrendsQuery, InsightQueryNode, NodeKind } from '~/queries/schema/schema-general'\nimport { BaseMathType, ChartDisplayType, FilterType } from '~/types'\n\nimport { LEGACY_EXPERIMENT_ALLOWED_MATH_TYPES } from '../constants'\nimport { experimentLogic } from '../experimentLogic'\nimport { commonActionFilterProps } from './Selectors'\n\nexport function TrendsMetricForm({ isSecondary = false }: { isSecondary?: boolean }): JSX.Element {\n    const { experiment, isExperimentRunning, editingPrimaryMetricIndex, editingSecondaryMetricIndex } =\n        useValues(experimentLogic)\n    const { setTrendsMetric, setTrendsExposureMetric, setExperiment } = useActions(experimentLogic)\n    const { currentTeam } = useValues(teamLogic)\n    const hasFilters = (currentTeam?.test_account_filters || []).length > 0\n    const [activeTab, setActiveTab] = useState('main')\n\n    const metrics = isSecondary ? experiment.metrics_secondary : experiment.metrics\n    const metricIdx = isSecondary ? editingSecondaryMetricIndex : editingPrimaryMetricIndex\n\n    if (!metricIdx && metricIdx !== 0) {\n        return <></>\n    }\n\n    const currentMetric = metrics[metricIdx] as ExperimentTrendsQuery\n\n    const isDataWarehouseMetric = currentMetric.count_query?.series[0]?.kind === NodeKind.DataWarehouseNode\n\n    return (\n        <>\n            <LemonTabs\n                activeKey={activeTab}\n                onChange={(newKey) => setActiveTab(newKey)}\n                tabs={[\n                    {\n                        key: 'main',\n                        label: 'Main metric',\n                        content: (\n                            <>\n                                <div className=\"mb-4\">\n                                    <LemonLabel>Name (optional)</LemonLabel>\n                                    <LemonInput\n                                        value={currentMetric.name}\n                                        onChange={(newName) => {\n                                            setTrendsMetric({\n                                                metricIdx,\n                                                name: newName,\n                                                isSecondary,\n                                            })\n                                        }}\n                                    />\n                                </div>\n                                <ActionFilter\n                                    bordered\n                                    filters={queryNodeToFilter(currentMetric.count_query)}\n                                    setFilters={({ actions, events, data_warehouse }: Partial<FilterType>): void => {\n                                        const series = actionsAndEventsToSeries(\n                                            { actions, events, data_warehouse } as any,\n                                            true,\n                                            MathAvailability.All\n                                        )\n\n                                        // Custom exposure metrics are not supported for data warehouse metrics\n                                        if (series[0].kind === NodeKind.DataWarehouseNode) {\n                                            const metricsField = isSecondary ? 'metrics_secondary' : 'metrics'\n                                            setExperiment({\n                                                ...experiment,\n                                                [metricsField]: metrics.map((metric, idx) =>\n                                                    idx === metricIdx\n                                                        ? { ...metric, exposure_query: undefined }\n                                                        : metric\n                                                ),\n                                            })\n                                        }\n\n                                        setTrendsMetric({\n                                            metricIdx,\n                                            series,\n                                            isSecondary,\n                                        })\n                                    }}\n                                    typeKey=\"experiment-metric\"\n                                    buttonCopy=\"Add graph series\"\n                                    showSeriesIndicator={true}\n                                    entitiesLimit={1}\n                                    showNumericalPropsOnly={true}\n                                    allowedMathTypes={LEGACY_EXPERIMENT_ALLOWED_MATH_TYPES}\n                                    {...commonActionFilterProps}\n                                />\n                                <div className=\"mt-4 space-y-4\">\n                                    <TestAccountFilterSwitch\n                                        checked={hasFilters ? !!currentMetric.count_query?.filterTestAccounts : false}\n                                        onChange={(checked: boolean) => {\n                                            setTrendsMetric({\n                                                metricIdx,\n                                                filterTestAccounts: checked,\n                                                isSecondary,\n                                            })\n                                        }}\n                                        fullWidth\n                                    />\n                                </div>\n                                {isExperimentRunning && (\n                                    <LemonBanner type=\"info\" className=\"mt-3 mb-3\">\n                                        Preview insights are generated based on {EXPERIMENT_DEFAULT_DURATION} days of\n                                        data. This can cause a mismatch between the preview and the actual results.\n                                    </LemonBanner>\n                                )}\n                                <div className=\"mt-4\">\n                                    <Query\n                                        query={{\n                                            kind: NodeKind.InsightVizNode,\n                                            source: currentMetric.count_query,\n                                            showTable: false,\n                                            showLastComputation: true,\n                                            showLastComputationRefresh: false,\n                                        }}\n                                        readOnly\n                                    />\n                                </div>\n                            </>\n                        ),\n                    },\n                    {\n                        key: 'exposure',\n                        label: 'Exposure',\n                        content: (\n                            <>\n                                <div className=\"flex gap-4 mb-4\">\n                                    <LemonButton\n                                        className={`trends-metric-form__exposure-button flex-1 cursor-pointer p-4 rounded border ${\n                                            !currentMetric.exposure_query\n                                                ? 'border-accent-primary bg-accent-primary-highlight'\n                                                : 'border-border'\n                                        }`}\n                                        onClick={() => {\n                                            const metricsField = isSecondary ? 'metrics_secondary' : 'metrics'\n                                            setExperiment({\n                                                ...experiment,\n                                                [metricsField]: metrics.map((metric, idx) =>\n                                                    idx === metricIdx\n                                                        ? { ...metric, exposure_query: undefined }\n                                                        : metric\n                                                ),\n                                            })\n                                        }}\n                                    >\n                                        <div className=\"font-semibold flex justify-between items-center\">\n                                            <span>Default</span>\n                                            {!currentMetric.exposure_query && (\n                                                <IconCheckCircle fontSize={18} color=\"var(--accent-primary)\" />\n                                            )}\n                                        </div>\n                                        <div className=\"text-secondary text-sm leading-relaxed mt-1\">\n                                            Uses the number of unique users who trigger the{' '}\n                                            <LemonTag>$feature_flag_called</LemonTag> event as your exposure count. This\n                                            is the recommended setting for most experiments, as it accurately tracks\n                                            variant exposure.\n                                        </div>\n                                    </LemonButton>\n                                    <LemonButton\n                                        className={`trends-metric-form__exposure-button flex-1 cursor-pointer p-4 rounded border ${\n                                            currentMetric.exposure_query\n                                                ? 'border-accent-primary bg-accent-primary-highlight'\n                                                : 'border-border'\n                                        }`}\n                                        disabledReason={\n                                            isDataWarehouseMetric\n                                                ? 'Custom exposure events are not supported for data warehouse metrics. Please contact support if you need this feature.'\n                                                : undefined\n                                        }\n                                        onClick={() => {\n                                            const metricsField = isSecondary ? 'metrics_secondary' : 'metrics'\n                                            setExperiment({\n                                                ...experiment,\n                                                [metricsField]: metrics.map((metric, idx) =>\n                                                    idx === metricIdx\n                                                        ? {\n                                                              ...metric,\n                                                              exposure_query: {\n                                                                  kind: NodeKind.TrendsQuery,\n                                                                  series: [\n                                                                      {\n                                                                          kind: NodeKind.EventsNode,\n                                                                          name: '$feature_flag_called',\n                                                                          event: '$feature_flag_called',\n                                                                          math: BaseMathType.UniqueUsers,\n                                                                      },\n                                                                  ],\n                                                                  interval: 'day',\n                                                                  dateRange: {\n                                                                      date_from: dayjs()\n                                                                          .subtract(EXPERIMENT_DEFAULT_DURATION, 'day')\n                                                                          .format('YYYY-MM-DDTHH:mm'),\n                                                                      date_to: dayjs()\n                                                                          .endOf('d')\n                                                                          .format('YYYY-MM-DDTHH:mm'),\n                                                                      explicitDate: true,\n                                                                  },\n                                                                  trendsFilter: {\n                                                                      display: ChartDisplayType.ActionsLineGraph,\n                                                                  },\n                                                                  filterTestAccounts: true,\n                                                              },\n                                                          }\n                                                        : metric\n                                                ),\n                                            })\n                                        }}\n                                    >\n                                        <div className=\"font-semibold flex justify-between items-center\">\n                                            <span>Custom</span>\n                                            {currentMetric.exposure_query && (\n                                                <IconCheckCircle fontSize={18} color=\"var(--accent-primary)\" />\n                                            )}\n                                        </div>\n                                        <div className=\"text-secondary text-sm leading-relaxed mt-1\">\n                                            Define your own exposure metric for specific use cases, such as counting by\n                                            sessions instead of users. This gives you full control but requires careful\n                                            configuration.\n                                        </div>\n                                    </LemonButton>\n                                </div>\n                                {currentMetric.exposure_query && (\n                                    <>\n                                        <ActionFilter\n                                            bordered\n                                            filters={queryNodeToFilter(\n                                                currentMetric.exposure_query as InsightQueryNode\n                                            )}\n                                            setFilters={({\n                                                actions,\n                                                events,\n                                                data_warehouse,\n                                            }: Partial<FilterType>): void => {\n                                                const series = actionsAndEventsToSeries(\n                                                    { actions, events, data_warehouse } as any,\n                                                    true,\n                                                    MathAvailability.All\n                                                )\n\n                                                setTrendsExposureMetric({\n                                                    metricIdx,\n                                                    series,\n                                                    isSecondary,\n                                                })\n                                            }}\n                                            typeKey=\"experiment-metric\"\n                                            buttonCopy=\"Add graph series\"\n                                            showSeriesIndicator={true}\n                                            entitiesLimit={1}\n                                            showNumericalPropsOnly={true}\n                                            {...commonActionFilterProps}\n                                        />\n                                        <div className=\"mt-4 space-y-4\">\n                                            <TestAccountFilterSwitch\n                                                checked={(() => {\n                                                    const val = currentMetric.exposure_query?.filterTestAccounts\n                                                    return hasFilters ? !!val : false\n                                                })()}\n                                                onChange={(checked: boolean) => {\n                                                    setTrendsExposureMetric({\n                                                        metricIdx,\n                                                        filterTestAccounts: checked,\n                                                        isSecondary,\n                                                    })\n                                                }}\n                                                fullWidth\n                                            />\n                                        </div>\n                                        {isExperimentRunning && (\n                                            <LemonBanner type=\"info\" className=\"mt-3 mb-3\">\n                                                Preview insights are generated based on {EXPERIMENT_DEFAULT_DURATION}{' '}\n                                                days of data. This can cause a mismatch between the preview and the\n                                                actual results.\n                                            </LemonBanner>\n                                        )}\n                                        <div className=\"mt-4\">\n                                            <Query\n                                                query={{\n                                                    kind: NodeKind.InsightVizNode,\n                                                    source: currentMetric.exposure_query,\n                                                    showTable: false,\n                                                    showLastComputation: true,\n                                                    showLastComputationRefresh: false,\n                                                }}\n                                                readOnly\n                                            />\n                                        </div>\n                                    </>\n                                )}\n                            </>\n                        ),\n                    },\n                ]}\n            />\n        </>\n    )\n}\n", "import { LemonModal } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\n\nimport { Experiment } from '~/types'\n\nimport { experimentLogic } from '../experimentLogic'\nimport { getDefaultBinomialMetric, getDefaultFunnelsMetric } from '../utils'\n\nexport function MetricSourceModal({\n    experimentId,\n    isSecondary,\n}: {\n    experimentId: Experiment['id']\n    isSecondary?: boolean\n}): JSX.Element {\n    const { experiment, isPrimaryMetricSourceModalOpen, isSecondaryMetricSourceModalOpen, shouldUseExperimentMetrics } =\n        useValues(experimentLogic({ experimentId }))\n    const {\n        setExperiment,\n        closePrimaryMetricSourceModal,\n        closeSecondaryMetricSourceModal,\n        openPrimaryMetricModal,\n        openSecondaryMetricModal,\n        openPrimarySharedMetricModal,\n        openSecondarySharedMetricModal,\n    } = useActions(experimentLogic({ experimentId }))\n\n    const metricsField = isSecondary ? 'metrics_secondary' : 'metrics'\n    const isOpen = isSecondary ? isSecondaryMetricSourceModalOpen : isPrimaryMetricSourceModalOpen\n    const closeCurrentModal = isSecondary ? closeSecondaryMetricSourceModal : closePrimaryMetricSourceModal\n    const openMetricModal = isSecondary ? openSecondaryMetricModal : openPrimaryMetricModal\n    const openSharedMetricModal = isSecondary ? openSecondarySharedMetricModal : openPrimarySharedMetricModal\n\n    return (\n        <LemonModal isOpen={isOpen} onClose={closeCurrentModal} width={1000} title=\"Choose metric source\">\n            <div className=\"flex gap-4 mb-4\">\n                <div\n                    className=\"flex-1 cursor-pointer p-4 rounded border hover:border-accent-primary\"\n                    onClick={() => {\n                        closeCurrentModal()\n\n                        const defaultMetric = shouldUseExperimentMetrics\n                            ? getDefaultBinomialMetric()\n                            : getDefaultFunnelsMetric()\n                        const newMetrics = [...experiment[metricsField], defaultMetric]\n                        setExperiment({\n                            [metricsField]: newMetrics,\n                        })\n                        openMetricModal(newMetrics.length - 1)\n                    }}\n                >\n                    <div className=\"font-semibold\">\n                        <span>Single-use</span>\n                    </div>\n                    <div className=\"text-secondary text-sm leading-relaxed\">\n                        Create a new metric specific to this experiment.\n                    </div>\n                </div>\n                <div\n                    className=\"flex-1 cursor-pointer p-4 rounded border hover:border-accent-primary\"\n                    onClick={() => {\n                        closeCurrentModal()\n                        openSharedMetricModal(null)\n                    }}\n                >\n                    <div className=\"font-semibold\">\n                        <span>Shared</span>\n                    </div>\n                    <div className=\"text-secondary text-sm leading-relaxed\">\n                        Use a pre-configured metric that can be reused across experiments.\n                    </div>\n                </div>\n            </div>\n        </LemonModal>\n    )\n}\n", "import { LemonBanner, LemonButton, LemonLabel, LemonModal, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { ObjectTags } from 'lib/components/ObjectTags/ObjectTags'\nimport { IconOpenInNew } from 'lib/lemon-ui/icons'\nimport { LemonTable } from 'lib/lemon-ui/LemonTable'\nimport { useState } from 'react'\nimport { urls } from 'scenes/urls'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { NodeKind } from '~/queries/schema/schema-general'\nimport { AvailableFeature, Experiment } from '~/types'\n\nimport { experimentLogic } from '../experimentLogic'\nimport { MetricDisplayFunnels, MetricDisplayTrends } from '../ExperimentView/components'\nimport { MAX_PRIMARY_METRICS, MAX_SECONDARY_METRICS } from '../MetricsView/const'\nimport { SharedMetric } from '../SharedMetrics/sharedMetricLogic'\n\nexport function SharedMetricModal({\n    experimentId,\n    isSecondary,\n}: {\n    experimentId: Experiment['id']\n    isSecondary?: boolean\n}): JSX.Element {\n    const {\n        experiment,\n        compatibleSharedMetrics,\n        isPrimarySharedMetricModalOpen,\n        isSecondarySharedMetricModalOpen,\n        editingSharedMetricId,\n        primaryMetricsLengthWithSharedMetrics,\n        secondaryMetricsLengthWithSharedMetrics,\n    } = useValues(experimentLogic({ experimentId }))\n    const {\n        closePrimarySharedMetricModal,\n        closeSecondarySharedMetricModal,\n        addSharedMetricsToExperiment,\n        removeSharedMetricFromExperiment,\n        restoreUnmodifiedExperiment,\n    } = useActions(experimentLogic({ experimentId }))\n\n    const [selectedMetricIds, setSelectedMetricIds] = useState<SharedMetric['id'][]>([])\n    const mode = editingSharedMetricId ? 'edit' : 'create'\n\n    const { hasAvailableFeature } = useValues(userLogic)\n\n    if (!compatibleSharedMetrics) {\n        return <></>\n    }\n\n    const isOpen = isSecondary ? isSecondarySharedMetricModalOpen : isPrimarySharedMetricModalOpen\n    const onClose = (): void => {\n        restoreUnmodifiedExperiment()\n        isSecondary ? closeSecondarySharedMetricModal() : closePrimarySharedMetricModal()\n    }\n\n    const addSharedMetricDisabledReason = (): string | undefined => {\n        if (selectedMetricIds.length === 0) {\n            return 'Please select at least one metric'\n        }\n        if (!isSecondary && primaryMetricsLengthWithSharedMetrics + selectedMetricIds.length > MAX_PRIMARY_METRICS) {\n            return `You can only add up to ${MAX_PRIMARY_METRICS} primary metrics.`\n        }\n        if (isSecondary && secondaryMetricsLengthWithSharedMetrics + selectedMetricIds.length > MAX_SECONDARY_METRICS) {\n            return `You can only add up to ${MAX_SECONDARY_METRICS} secondary metrics.`\n        }\n    }\n\n    const availableSharedMetrics = compatibleSharedMetrics.filter(\n        (metric: SharedMetric) =>\n            !experiment.saved_metrics.some((savedMetric) => savedMetric.saved_metric === metric.id)\n    )\n\n    const availableTags = Array.from(\n        new Set(\n            availableSharedMetrics\n                .filter((metric: SharedMetric) => metric.tags)\n                .flatMap((metric: SharedMetric) => metric.tags)\n                .filter(Boolean)\n        )\n    ).sort()\n\n    return (\n        <LemonModal\n            isOpen={isOpen}\n            onClose={onClose}\n            width={500}\n            title={mode === 'create' ? 'Select one or more shared metrics' : 'Shared metric'}\n            footer={\n                <div className=\"flex justify-between w-full\">\n                    <div>\n                        {editingSharedMetricId && (\n                            <LemonButton\n                                status=\"danger\"\n                                onClick={() => {\n                                    removeSharedMetricFromExperiment(editingSharedMetricId)\n                                    isSecondary ? closeSecondarySharedMetricModal() : closePrimarySharedMetricModal()\n                                }}\n                                type=\"secondary\"\n                            >\n                                Remove from experiment\n                            </LemonButton>\n                        )}\n                    </div>\n                    <div className=\"flex gap-2\">\n                        <LemonButton onClick={onClose} type=\"secondary\">\n                            Cancel\n                        </LemonButton>\n                        {/* Changing the existing metric is a pain because saved metrics are stored separately */}\n                        {/* Only allow deletion for now */}\n                        {mode === 'create' && (\n                            <LemonButton\n                                onClick={() => {\n                                    addSharedMetricsToExperiment(selectedMetricIds, {\n                                        type: isSecondary ? 'secondary' : 'primary',\n                                    })\n                                    isSecondary ? closeSecondarySharedMetricModal() : closePrimarySharedMetricModal()\n                                }}\n                                type=\"primary\"\n                                disabledReason={addSharedMetricDisabledReason()}\n                            >\n                                {selectedMetricIds.length < 2 ? 'Add metric' : 'Add metrics'}\n                            </LemonButton>\n                        )}\n                    </div>\n                </div>\n            }\n        >\n            {mode === 'create' && (\n                <div className=\"space-y-2\">\n                    {availableSharedMetrics.length > 0 ? (\n                        <>\n                            {experiment.saved_metrics.length > 0 && (\n                                <LemonBanner type=\"info\">\n                                    {`Hiding ${experiment.saved_metrics.length} shared ${\n                                        experiment.saved_metrics.length > 1 ? 'metrics' : 'metric'\n                                    } already in use with this experiment.`}\n                                </LemonBanner>\n                            )}\n                            {hasAvailableFeature(AvailableFeature.TAGGING) && availableTags.length > 0 && (\n                                <div className=\"flex flex-wrap gap-2\">\n                                    <LemonLabel>Quick select:</LemonLabel>\n                                    {availableTags.map((tag: string, index: number) => (\n                                        <LemonButton\n                                            key={index}\n                                            size=\"xsmall\"\n                                            type=\"secondary\"\n                                            onClick={() => {\n                                                setSelectedMetricIds(\n                                                    availableSharedMetrics\n                                                        .filter((metric: SharedMetric) => metric.tags?.includes(tag))\n                                                        .map((metric: SharedMetric) => metric.id)\n                                                )\n                                            }}\n                                        >\n                                            {tag}\n                                        </LemonButton>\n                                    ))}\n                                </div>\n                            )}\n                            <LemonTable\n                                dataSource={availableSharedMetrics}\n                                columns={[\n                                    {\n                                        title: '',\n                                        key: 'checkbox',\n                                        render: (_, metric: SharedMetric) => (\n                                            <input\n                                                type=\"checkbox\"\n                                                checked={selectedMetricIds.includes(metric.id)}\n                                                onChange={(e) => {\n                                                    if (e.target.checked) {\n                                                        setSelectedMetricIds([...selectedMetricIds, metric.id])\n                                                    } else {\n                                                        setSelectedMetricIds(\n                                                            selectedMetricIds.filter((id) => id !== metric.id)\n                                                        )\n                                                    }\n                                                }}\n                                            />\n                                        ),\n                                    },\n                                    {\n                                        title: 'Name',\n                                        dataIndex: 'name',\n                                        key: 'name',\n                                    },\n                                    {\n                                        title: 'Description',\n                                        dataIndex: 'description',\n                                        key: 'description',\n                                    },\n                                    ...(hasAvailableFeature(AvailableFeature.TAGGING)\n                                        ? [\n                                              {\n                                                  title: 'Tags',\n                                                  dataIndex: 'tags' as keyof SharedMetric,\n                                                  key: 'tags',\n                                                  render: (_: any, metric: SharedMetric) => (\n                                                      <ObjectTags tags={metric.tags || []} staticOnly />\n                                                  ),\n                                              },\n                                          ]\n                                        : []),\n                                    {\n                                        title: 'Type',\n                                        key: 'type',\n                                        render: (_, metric: SharedMetric) => {\n                                            if (metric.query.kind === NodeKind.ExperimentMetric) {\n                                                return metric.query.metric_type\n                                            }\n                                            return metric.query.kind === NodeKind.ExperimentTrendsQuery\n                                                ? 'Trend'\n                                                : 'Funnel'\n                                        },\n                                    },\n                                ]}\n                                footer={\n                                    <div className=\"flex items-center justify-center m-2\">\n                                        <LemonButton to={urls.experimentsSharedMetrics()} size=\"xsmall\" type=\"tertiary\">\n                                            See all shared metrics\n                                        </LemonButton>\n                                    </div>\n                                }\n                            />\n                        </>\n                    ) : (\n                        <LemonBanner\n                            className=\"w-full\"\n                            type=\"info\"\n                            action={{\n                                children: 'New shared metric',\n                                to: urls.experimentsSharedMetric('new'),\n                            }}\n                        >\n                            {compatibleSharedMetrics.length > 0\n                                ? 'All of your shared metrics are already in this experiment.'\n                                : \"You don't have any shared metrics that match the experiment type. Shared metrics let you create reusable metrics that you can quickly add to any experiment.\"}\n                        </LemonBanner>\n                    )}\n                </div>\n            )}\n\n            {editingSharedMetricId && (\n                <div>\n                    {(() => {\n                        const metric = compatibleSharedMetrics.find((m: SharedMetric) => m.id === editingSharedMetricId)\n                        if (!metric) {\n                            return <></>\n                        }\n\n                        return (\n                            <div className=\"space-y-2\">\n                                <div className=\"flex items-center gap-2\">\n                                    <h3 className=\"font-semibold m-0 flex items-center\">{metric.name}</h3>\n                                    <Link\n                                        target=\"_blank\"\n                                        className=\"font-semibold flex items-center\"\n                                        to={urls.experimentsSharedMetric(metric.id)}\n                                    >\n                                        <IconOpenInNew fontSize=\"18\" />\n                                    </Link>\n                                </div>\n                                {metric.description && <p className=\"mt-2\">{metric.description}</p>}\n                                {metric.query.kind === 'ExperimentTrendsQuery' && (\n                                    <MetricDisplayTrends query={metric.query.count_query} />\n                                )}\n                                {metric.query.kind === 'ExperimentFunnelsQuery' && (\n                                    <MetricDisplayFunnels query={metric.query.funnels_query} />\n                                )}\n                            </div>\n                        )\n                    })()}\n                </div>\n            )}\n        </LemonModal>\n    )\n}\n", "export const MAX_PRIMARY_METRICS = 10\nexport const MAX_SECONDARY_METRICS = 10\n", "import { IconInfo, IconPlus } from '@posthog/icons'\nimport { LemonButton, LemonDivider, Tooltip } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { IconAreaChart } from 'lib/lemon-ui/icons'\n\nimport { experimentLogic } from '../experimentLogic'\nimport { MAX_PRIMARY_METRICS, MAX_SECONDARY_METRICS } from './const'\nimport { DeltaChart } from './DeltaChart'\n\n// Helper function to find nice round numbers for ticks\nexport function getNiceTickValues(maxAbsValue: number): number[] {\n    // Round up maxAbsValue to ensure we cover all values\n    maxAbsValue = Math.ceil(maxAbsValue * 10) / 10\n\n    const magnitude = Math.floor(Math.log10(maxAbsValue))\n    const power = Math.pow(10, magnitude)\n\n    let baseUnit\n    const normalizedMax = maxAbsValue / power\n    if (normalizedMax <= 1) {\n        baseUnit = 0.2 * power\n    } else if (normalizedMax <= 2) {\n        baseUnit = 0.5 * power\n    } else if (normalizedMax <= 5) {\n        baseUnit = 1 * power\n    } else {\n        baseUnit = 2 * power\n    }\n\n    // Calculate how many baseUnits we need to exceed maxAbsValue\n    const unitsNeeded = Math.ceil(maxAbsValue / baseUnit)\n\n    // Determine appropriate number of decimal places based on magnitude\n    const decimalPlaces = Math.max(0, -magnitude + 1)\n\n    const ticks: number[] = []\n    for (let i = -unitsNeeded; i <= unitsNeeded; i++) {\n        // Round each tick value to avoid floating point precision issues\n        const tickValue = Number((baseUnit * i).toFixed(decimalPlaces))\n        ticks.push(tickValue)\n    }\n    return ticks\n}\n\nfunction AddPrimaryMetric(): JSX.Element {\n    const { primaryMetricsLengthWithSharedMetrics } = useValues(experimentLogic)\n    const { openPrimaryMetricSourceModal } = useActions(experimentLogic)\n\n    return (\n        <LemonButton\n            icon={<IconPlus />}\n            type=\"secondary\"\n            size=\"xsmall\"\n            onClick={() => {\n                openPrimaryMetricSourceModal()\n            }}\n            disabledReason={\n                primaryMetricsLengthWithSharedMetrics >= MAX_PRIMARY_METRICS\n                    ? `You can only add up to ${MAX_PRIMARY_METRICS} primary metrics.`\n                    : undefined\n            }\n        >\n            Add primary metric\n        </LemonButton>\n    )\n}\n\nexport function AddSecondaryMetric(): JSX.Element {\n    const { secondaryMetricsLengthWithSharedMetrics } = useValues(experimentLogic)\n    const { openSecondaryMetricSourceModal } = useActions(experimentLogic)\n    return (\n        <LemonButton\n            icon={<IconPlus />}\n            type=\"secondary\"\n            size=\"xsmall\"\n            onClick={() => {\n                openSecondaryMetricSourceModal()\n            }}\n            disabledReason={\n                secondaryMetricsLengthWithSharedMetrics >= MAX_SECONDARY_METRICS\n                    ? `You can only add up to ${MAX_SECONDARY_METRICS} secondary metrics.`\n                    : undefined\n            }\n        >\n            Add secondary metric\n        </LemonButton>\n    )\n}\n\nexport function MetricsView({ isSecondary }: { isSecondary?: boolean }): JSX.Element {\n    const {\n        experiment,\n        getMetricType,\n        metricResults,\n        secondaryMetricResults,\n        primaryMetricsResultErrors,\n        secondaryMetricsResultErrors,\n        credibleIntervalForVariant,\n    } = useValues(experimentLogic)\n\n    const variants = experiment?.feature_flag?.filters?.multivariate?.variants\n    if (!variants) {\n        return <></>\n    }\n    const results = isSecondary ? secondaryMetricResults : metricResults\n    const errors = isSecondary ? secondaryMetricsResultErrors : primaryMetricsResultErrors\n    const hasSomeResults = results?.some((result) => result?.insight)\n\n    let metrics = isSecondary ? experiment.metrics_secondary : experiment.metrics\n    const sharedMetrics = experiment.saved_metrics\n        .filter((sharedMetric) => sharedMetric.metadata.type === (isSecondary ? 'secondary' : 'primary'))\n        .map((sharedMetric) => ({\n            ...sharedMetric.query,\n            name: sharedMetric.name,\n            sharedMetricId: sharedMetric.saved_metric,\n            isSharedMetric: true,\n        }))\n\n    if (sharedMetrics) {\n        metrics = [...metrics, ...sharedMetrics]\n    }\n\n    // Calculate the maximum absolute value across ALL metrics\n    const maxAbsValue = Math.max(\n        ...metrics.flatMap((metric, metricIndex) => {\n            const result = results?.[metricIndex]\n            if (!result) {\n                return []\n            }\n            return variants.flatMap((variant) => {\n                const metricType = getMetricType(metric)\n                const interval = credibleIntervalForVariant(result, variant.key, metricType)\n                return interval ? [Math.abs(interval[0] / 100), Math.abs(interval[1] / 100)] : []\n            })\n        })\n    )\n\n    const padding = Math.max(maxAbsValue * 0.05, 0.1)\n    const chartBound = maxAbsValue + padding\n\n    const commonTickValues = getNiceTickValues(chartBound)\n\n    return (\n        <div className=\"mb-4 -mt-2\">\n            <div className=\"flex\">\n                <div className=\"w-1/2 pt-5\">\n                    <div className=\"inline-flex items-center space-x-2 mb-0\">\n                        <h2 className=\"mb-0 font-semibold text-lg leading-6\">\n                            {isSecondary ? 'Secondary metrics' : 'Primary metrics'}\n                        </h2>\n                        {metrics.length > 0 && (\n                            <Tooltip\n                                title={\n                                    isSecondary\n                                        ? 'Secondary metrics capture additional outcomes or behaviors affected by your experiment. They help you understand broader impacts and potential side effects beyond the primary goal.'\n                                        : 'Primary metrics represent the main goal of your experiment. They directly measure whether your hypothesis was successful and are the key factor in deciding if the test achieved its primary objective.'\n                                }\n                            >\n                                <IconInfo className=\"text-secondary text-lg\" />\n                            </Tooltip>\n                        )}\n                        {hasSomeResults && !isSecondary && (\n                            <>\n                                <LemonDivider vertical className=\"mx-2\" />\n                                <Tooltip\n                                    title={\n                                        <div className=\"p-2\">\n                                            <p className=\"mb-4\">\n                                                Each bar shows how a variant is performing compared to the control (the\n                                                gray bar) for this metric, using a{' '}\n                                                <strong>95% credible interval.</strong> That means there's a 95% chance\n                                                the true difference for that variant falls within this range. The\n                                                vertical \"0%\" line is your baseline:\n                                            </p>\n                                            <ul className=\"mb-4 list-disc pl-4\">\n                                                <li>\n                                                    <strong>To the right (green):</strong> The metric is higher (an\n                                                    improvement).\n                                                </li>\n                                                <li>\n                                                    <strong>To the left (red):</strong> The metric is lower (a\n                                                    decrease).\n                                                </li>\n                                            </ul>\n                                            <p className=\"mb-4\">\n                                                The shape of each bar represents the probability distribution. The true\n                                                value is more likely to be near the center (where the bar is wider) than\n                                                at the edges (where it tapers off).\n                                            </p>\n                                            <p className=\"mb-4\">\n                                                The control (baseline) is always shown in gray. Other bars will be green\n                                                or red\u2014or even a mix\u2014depending on whether the change is positive or\n                                                negative.\n                                            </p>\n                                            <img\n                                                src=\"https://res.cloudinary.com/dmukukwp6/image/upload/violin_plot_screenshot_acca775d36.png\"\n                                                width={700}\n                                                className=\"rounded border object-contain\"\n                                                alt=\"How to read metrics\"\n                                            />\n                                        </div>\n                                    }\n                                >\n                                    <span className=\"text-xs text-secondary cursor-help\">How to read</span>\n                                </Tooltip>\n                            </>\n                        )}\n                    </div>\n                </div>\n\n                <div className=\"w-1/2 flex flex-col justify-end\">\n                    <div className=\"ml-auto\">\n                        {metrics.length > 0 && (\n                            <div className=\"mb-2 mt-4 justify-end\">\n                                {isSecondary ? <AddSecondaryMetric /> : <AddPrimaryMetric />}\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </div>\n            {metrics.length > 0 ? (\n                <div className=\"w-full overflow-x-auto\">\n                    <div className=\"min-w-[1000px]\">\n                        {metrics.map((metric, metricIndex) => {\n                            const result = results?.[metricIndex]\n                            const isFirstMetric = metricIndex === 0\n\n                            return (\n                                <div\n                                    key={metricIndex}\n                                    className={`w-full border border-border bg-light ${\n                                        metrics.length === 1\n                                            ? 'rounded'\n                                            : isFirstMetric\n                                            ? 'rounded-t'\n                                            : metricIndex === metrics.length - 1\n                                            ? 'rounded-b'\n                                            : ''\n                                    }`}\n                                >\n                                    <DeltaChart\n                                        isSecondary={!!isSecondary}\n                                        result={result}\n                                        error={errors?.[metricIndex]}\n                                        variants={variants}\n                                        metricType={getMetricType(metric)}\n                                        metricIndex={metricIndex}\n                                        isFirstMetric={isFirstMetric}\n                                        metric={metric}\n                                        tickValues={commonTickValues}\n                                        chartBound={chartBound}\n                                    />\n                                </div>\n                            )\n                        })}\n                    </div>\n                </div>\n            ) : (\n                <div className=\"border rounded bg-surface-primary pt-6 pb-8 text-secondary mt-2\">\n                    <div className=\"flex flex-col items-center mx-auto space-y-3\">\n                        <IconAreaChart fontSize=\"30\" />\n                        <div className=\"text-sm text-center text-balance max-w-sm\">\n                            <p>\n                                Add up to {MAX_PRIMARY_METRICS} {isSecondary ? 'secondary' : 'primary'} metrics.\n                            </p>\n                            <p>\n                                {isSecondary\n                                    ? 'Secondary metrics provide additional context and help detect unintended side effects.'\n                                    : 'Primary metrics represent the main goal of the experiment and directly measure if your hypothesis was successful.'}\n                            </p>\n                        </div>\n                        {isSecondary ? <AddSecondaryMetric /> : <AddPrimaryMetric />}\n                    </div>\n                </div>\n            )}\n        </div>\n    )\n}\n", "import {\n    IconActivity,\n    IconArrowRight,\n    IconClock,\n    IconFunnels,\n    IconGraph,\n    IconMinus,\n    IconPencil,\n    IconTrending,\n} from '@posthog/icons'\nimport { LemonBanner, LemonButton, LemonModal, LemonTag, LemonTagType, Tooltip } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { LemonProgress } from 'lib/lemon-ui/LemonProgress'\nimport { humanFriendlyNumber } from 'lib/utils'\nimport { useEffect, useRef, useState } from 'react'\n\nimport { themeLogic } from '~/layout/navigation-3000/themeLogic'\nimport {\n    ExperimentFunnelsQuery,\n    ExperimentMetric,\n    ExperimentTrendsQuery,\n    NodeKind,\n} from '~/queries/schema/schema-general'\nimport { InsightType, TrendExperimentVariant } from '~/types'\n\nimport { experimentLogic } from '../experimentLogic'\nimport { ExploreButton, ResultsQuery, VariantTag } from '../ExperimentView/components'\nimport { SignificanceText, WinningVariantText } from '../ExperimentView/Overview'\nimport { SummaryTable } from '../ExperimentView/SummaryTable'\nimport { NoResultEmptyState } from './NoResultEmptyState'\n\nexport function getMetricTag(metric: ExperimentMetric | ExperimentTrendsQuery | ExperimentFunnelsQuery): string {\n    if (metric.kind === NodeKind.ExperimentMetric) {\n        return metric.metric_type.charAt(0).toUpperCase() + metric.metric_type.slice(1).toLowerCase()\n    } else if (metric.kind === NodeKind.ExperimentFunnelsQuery) {\n        return 'Funnel'\n    }\n    return 'Trend'\n}\n\nexport function getDefaultMetricTitle(metric: ExperimentMetric): string {\n    if (metric.metric_config.kind === NodeKind.ExperimentEventMetricConfig) {\n        return metric.metric_config.event\n    } else if (metric.metric_config.kind === NodeKind.ExperimentActionMetricConfig) {\n        return metric.metric_config.name || `Action ${metric.metric_config.action}`\n    }\n    return 'Untitled metric'\n}\n\nfunction formatTickValue(value: number): string {\n    if (value === 0) {\n        return '0%'\n    }\n\n    // Determine number of decimal places needed\n    const absValue = Math.abs(value)\n    let decimals = 0\n\n    if (absValue < 0.01) {\n        decimals = 3\n    } else if (absValue < 0.1) {\n        decimals = 2\n    } else if (absValue < 1) {\n        decimals = 1\n    } else {\n        decimals = 0\n    }\n\n    return `${(value * 100).toFixed(decimals)}%`\n}\nconst getMetricTitle = (metric: any, metricType: InsightType): JSX.Element => {\n    if (metric.name) {\n        return <span className=\"truncate\">{metric.name}</span>\n    }\n\n    if (metric.kind === NodeKind.ExperimentMetric) {\n        return <span className=\"truncate\">{getDefaultMetricTitle(metric)}</span>\n    }\n\n    if (metricType === InsightType.TRENDS && metric.count_query?.series?.[0]?.name) {\n        return <span className=\"truncate\">{metric.count_query.series[0].name}</span>\n    }\n\n    if (metricType === InsightType.FUNNELS && metric.funnels_query?.series) {\n        const series = metric.funnels_query.series\n        if (series.length > 0) {\n            const firstStep = series[0]?.name\n            const lastStep = series[series.length - 1]?.name\n\n            return (\n                <span className=\"inline-flex items-center gap-1 min-w-0\">\n                    <IconFunnels className=\"text-secondary flex-shrink-0\" fontSize=\"14\" />\n                    <span className=\"truncate\">{firstStep}</span>\n                    <IconArrowRight className=\"text-secondary flex-shrink-0\" fontSize=\"14\" />\n                    <span className=\"truncate\">{lastStep}</span>\n                </span>\n            )\n        }\n    }\n\n    return <span className=\"text-secondary truncate\">Untitled metric</span>\n}\n\nexport function generateViolinPath(x1: number, x2: number, y: number, height: number, deltaX: number): string {\n    // Create points for the violin curve\n    const points: [number, number][] = []\n    const steps = 20\n    const maxWidth = height / 2\n\n    // Generate left side points (x1 to deltaX)\n    for (let i = 0; i <= steps; i++) {\n        const t = i / steps\n        const x = x1 + (deltaX - x1) * t\n        // Standard normal distribution PDF from x1 to deltaX\n        const z = (t - 1) * 2 // Reduced scale factor from 2.5 to 2 for thicker tails\n        const width = Math.exp(-0.5 * z * z) * maxWidth\n        points.push([x, y + height / 2 - width])\n    }\n\n    // Generate right side points (deltaX to x2)\n    for (let i = 0; i <= steps; i++) {\n        const t = i / steps\n        const x = deltaX + (x2 - deltaX) * t\n        // Standard normal distribution PDF from deltaX to x2\n        const z = t * 2 // Reduced scale factor from 2.5 to 2 for thicker tails\n        const width = Math.exp(-0.5 * z * z) * maxWidth\n        points.push([x, y + height / 2 - width])\n    }\n\n    // Generate bottom curve points (mirror of top)\n    for (let i = steps; i >= 0; i--) {\n        const t = i / steps\n        const x = deltaX + (x2 - deltaX) * t\n        const z = t * 2\n        const width = Math.exp(-0.5 * z * z) * maxWidth\n        points.push([x, y + height / 2 + width])\n    }\n    for (let i = steps; i >= 0; i--) {\n        const t = i / steps\n        const x = x1 + (deltaX - x1) * t\n        const z = (t - 1) * 2\n        const width = Math.exp(-0.5 * z * z) * maxWidth\n        points.push([x, y + height / 2 + width])\n    }\n\n    // Create SVG path\n    return `\n        M ${points[0][0]} ${points[0][1]}\n        ${points.map((point) => `L ${point[0]} ${point[1]}`).join(' ')}\n        Z\n    `\n}\n\nexport function DeltaChart({\n    isSecondary,\n    result,\n    error,\n    variants,\n    metricType,\n    metricIndex,\n    isFirstMetric,\n    metric,\n    tickValues,\n    chartBound,\n}: {\n    isSecondary: boolean\n    result: any\n    error: any\n    variants: any[]\n    metricType: InsightType\n    metricIndex: number\n    isFirstMetric: boolean\n    metric: any\n    tickValues: number[]\n    chartBound: number\n}): JSX.Element {\n    const {\n        credibleIntervalForVariant,\n        conversionRateForVariant,\n        experimentId,\n        experiment,\n        countDataForVariant,\n        exposureCountDataForVariant,\n        metricResultsLoading,\n        secondaryMetricResultsLoading,\n        featureFlags,\n        primaryMetricsLengthWithSharedMetrics,\n    } = useValues(experimentLogic)\n\n    const {\n        openPrimaryMetricModal,\n        openSecondaryMetricModal,\n        openPrimarySharedMetricModal,\n        openSecondarySharedMetricModal,\n        openVariantDeltaTimeseriesModal,\n    } = useActions(experimentLogic)\n    const [tooltipData, setTooltipData] = useState<{ x: number; y: number; variant: string } | null>(null)\n    const [emptyStateTooltipVisible, setEmptyStateTooltipVisible] = useState(true)\n    const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 })\n    const [isModalOpen, setIsModalOpen] = useState(false)\n\n    const getScaleAddition = (variantCount: number): number => {\n        if (variantCount < 3) {\n            return 6\n        }\n        if (variantCount < 4) {\n            return 3\n        }\n        if (variantCount < 5) {\n            return 1\n        }\n        return 0\n    }\n\n    const resultsLoading = isSecondary ? secondaryMetricResultsLoading : metricResultsLoading\n\n    const BAR_HEIGHT = 10 + getScaleAddition(variants.length)\n    const BAR_PADDING = 10 + getScaleAddition(variants.length)\n    const TICK_PANEL_HEIGHT = 20\n    const VIEW_BOX_WIDTH = 800\n    const HORIZONTAL_PADDING = 20\n    const CONVERSION_RATE_RECT_WIDTH = 2\n    const TICK_FONT_SIZE = 9\n    const CHART_MAX_WIDTH = 1000\n\n    const { isDarkModeOn } = useValues(themeLogic)\n    const COLORS = {\n        TICK_TEXT_COLOR: 'var(--text-tertiary)',\n        BOUNDARY_LINES: 'var(--border-primary)',\n        ZERO_LINE: 'var(--border-bold)',\n        BAR_NEGATIVE: isDarkModeOn ? '#c32f45' : '#f84257',\n        BAR_POSITIVE: isDarkModeOn ? '#12a461' : '#36cd6f',\n        BAR_DEFAULT: isDarkModeOn ? 'rgb(121 121 121)' : 'rgb(217 217 217)',\n        BAR_CONTROL: isDarkModeOn ? 'rgba(217, 217, 217, 0.2)' : 'rgba(217, 217, 217, 0.4)',\n        BAR_MIDDLE_POINT: 'black',\n        BAR_MIDDLE_POINT_CONTROL: 'rgba(0, 0, 0, 0.4)',\n    }\n\n    // Update chart height calculation to include only one BAR_PADDING for each space between bars\n    const chartHeight = BAR_PADDING + (BAR_HEIGHT + BAR_PADDING) * variants.length\n\n    const valueToX = (value: number): number => {\n        // Scale the value to fit within the padded area\n        const percentage = (value / chartBound + 1) / 2\n        return HORIZONTAL_PADDING + percentage * (VIEW_BOX_WIDTH - 2 * HORIZONTAL_PADDING)\n    }\n\n    const metricTitlePanelWidth = '20%'\n\n    const ticksSvgRef = useRef<SVGSVGElement>(null)\n    const chartSvgRef = useRef<SVGSVGElement>(null)\n    // :TRICKY: We need to track SVG heights dynamically because\n    // we're fitting regular divs to match SVG viewports. SVGs scale\n    // based on their viewBox and the viewport size, making it challenging\n    // to match their effective rendered heights with regular div elements.\n    const [ticksSvgHeight, setTicksSvgHeight] = useState<number>(0)\n    const [chartSvgHeight, setChartSvgHeight] = useState<number>(0)\n\n    useEffect(() => {\n        const ticksSvg = ticksSvgRef.current\n        const chartSvg = chartSvgRef.current\n\n        // eslint-disable-next-line compat/compat\n        const resizeObserver = new ResizeObserver((entries) => {\n            for (const entry of entries) {\n                if (entry.target === ticksSvg) {\n                    setTicksSvgHeight(entry.contentRect.height)\n                } else if (entry.target === chartSvg) {\n                    setChartSvgHeight(entry.contentRect.height)\n                }\n            }\n        })\n\n        if (ticksSvg) {\n            resizeObserver.observe(ticksSvg)\n        }\n        if (chartSvg) {\n            resizeObserver.observe(chartSvg)\n        }\n\n        return () => {\n            resizeObserver.disconnect()\n        }\n    }, [result])\n\n    return (\n        <div className=\"rounded bg-[var(--bg-table)]\">\n            {/* Metric title panel */}\n            {/* eslint-disable-next-line react/forbid-dom-props */}\n            <div style={{ width: metricTitlePanelWidth, verticalAlign: 'top', display: 'inline-block' }}>\n                {isFirstMetric && (\n                    <svg\n                        // eslint-disable-next-line react/forbid-dom-props\n                        style={{ height: `${ticksSvgHeight}px` }}\n                    />\n                )}\n                {isFirstMetric && <div className=\"w-full border-t border-border\" />}\n                <div\n                    // eslint-disable-next-line react/forbid-dom-props\n                    style={{ height: `${chartSvgHeight}px`, borderRight: `1px solid ${COLORS.BOUNDARY_LINES}` }}\n                    className=\"p-2 overflow-auto\"\n                >\n                    <div className=\"text-xs font-semibold whitespace-nowrap overflow-hidden\">\n                        <div className=\"space-y-1\">\n                            <div className=\"flex items-center gap-2\">\n                                <div className=\"cursor-default text-xs font-semibold whitespace-nowrap overflow-hidden text-ellipsis flex-grow flex items-center\">\n                                    <span className=\"mr-1\">{metricIndex + 1}.</span>\n                                    {getMetricTitle(metric, metricType)}\n                                </div>\n                                <LemonButton\n                                    className=\"flex-shrink-0\"\n                                    type=\"secondary\"\n                                    size=\"xsmall\"\n                                    icon={<IconPencil fontSize=\"12\" />}\n                                    onClick={() => {\n                                        if (metric.isSharedMetric) {\n                                            if (isSecondary) {\n                                                openSecondarySharedMetricModal(metric.sharedMetricId)\n                                            } else {\n                                                openPrimarySharedMetricModal(metric.sharedMetricId)\n                                            }\n                                            return\n                                        }\n                                        isSecondary\n                                            ? openSecondaryMetricModal(metricIndex)\n                                            : openPrimaryMetricModal(metricIndex)\n                                    }}\n                                />\n                            </div>\n                            <div className=\"space-x-1\">\n                                <LemonTag type=\"muted\" size=\"small\">\n                                    {getMetricTag(metric)}\n                                </LemonTag>\n                                {metric.isSharedMetric && (\n                                    <LemonTag type=\"option\" size=\"small\">\n                                        Shared\n                                    </LemonTag>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            {/* SVGs container */}\n            <div\n                // eslint-disable-next-line react/forbid-dom-props\n                style={{\n                    width: `calc(100% - ${metricTitlePanelWidth})`,\n                    verticalAlign: 'top',\n                    display: 'inline-block',\n                    minWidth: '780px',\n                }}\n            >\n                {/* Ticks */}\n                {isFirstMetric && (\n                    <div className=\"flex justify-center\">\n                        <svg\n                            ref={ticksSvgRef}\n                            viewBox={`0 0 ${VIEW_BOX_WIDTH} ${TICK_PANEL_HEIGHT}`}\n                            preserveAspectRatio=\"xMidYMid meet\"\n                            className={result ? 'ml-12' : undefined}\n                            // eslint-disable-next-line react/forbid-dom-props\n                            style={{ minHeight: `${TICK_PANEL_HEIGHT}px`, maxWidth: `${CHART_MAX_WIDTH}px` }}\n                        >\n                            {tickValues.map((value, index) => {\n                                const x = valueToX(value)\n                                return (\n                                    <g key={index}>\n                                        <text\n                                            x={x}\n                                            y={TICK_PANEL_HEIGHT / 2}\n                                            textAnchor=\"middle\"\n                                            dominantBaseline=\"middle\"\n                                            fontSize={TICK_FONT_SIZE}\n                                            fill={COLORS.TICK_TEXT_COLOR}\n                                            fontWeight=\"600\"\n                                        >\n                                            {formatTickValue(value)}\n                                        </text>\n                                    </g>\n                                )\n                            })}\n                        </svg>\n                    </div>\n                )}\n                {isFirstMetric && <div className=\"w-full border-t border-border\" />}\n                {/* Chart */}\n                {result ? (\n                    <div className=\"relative\">\n                        {/* Chart is z-index 100, so we need to be above it */}\n                        {/* eslint-disable-next-line react/forbid-dom-props */}\n                        <div className=\"absolute top-2 left-2\" style={{ zIndex: 102 }}>\n                            <SignificanceHighlight metricIndex={metricIndex} isSecondary={isSecondary} />\n                        </div>\n                        {(isSecondary || (!isSecondary && primaryMetricsLengthWithSharedMetrics > 1)) && (\n                            <div\n                                className=\"absolute bottom-2 left-2 flex justify-center bg-[var(--bg-table)]\"\n                                // Chart is z-index 100, so we need to be above it\n                                // eslint-disable-next-line react/forbid-dom-props\n                                style={{ zIndex: 101 }}\n                            >\n                                <LemonButton\n                                    type=\"secondary\"\n                                    size=\"xsmall\"\n                                    icon={<IconGraph />}\n                                    onClick={() => setIsModalOpen(true)}\n                                >\n                                    Details\n                                </LemonButton>\n                            </div>\n                        )}\n                        <div className=\"flex justify-center\">\n                            <svg\n                                ref={chartSvgRef}\n                                viewBox={`0 0 ${VIEW_BOX_WIDTH} ${chartHeight}`}\n                                preserveAspectRatio=\"xMidYMid meet\"\n                                className=\"ml-12\"\n                                // eslint-disable-next-line react/forbid-dom-props\n                                style={{ minHeight: `${chartHeight}px`, maxWidth: `${CHART_MAX_WIDTH}px` }}\n                            >\n                                {/* Vertical grid lines */}\n                                {tickValues.map((value, index) => {\n                                    const x = valueToX(value)\n                                    return (\n                                        <line\n                                            key={index}\n                                            x1={x}\n                                            y1={0}\n                                            x2={x}\n                                            y2={chartSvgHeight + 20}\n                                            stroke={value === 0 ? COLORS.ZERO_LINE : COLORS.BOUNDARY_LINES}\n                                            strokeWidth={value === 0 ? 1 : 0.5}\n                                        />\n                                    )\n                                })}\n\n                                {variants.map((variant, index) => {\n                                    const interval = credibleIntervalForVariant(result, variant.key, metricType)\n                                    const [lower, upper] = interval ? [interval[0] / 100, interval[1] / 100] : [0, 0]\n\n                                    let delta: number\n                                    if (metricType === InsightType.TRENDS) {\n                                        const controlVariant = result.variants.find(\n                                            (v: TrendExperimentVariant) => v.key === 'control'\n                                        ) as TrendExperimentVariant\n\n                                        const variantData = result.variants.find(\n                                            (v: TrendExperimentVariant) => v.key === variant.key\n                                        ) as TrendExperimentVariant\n\n                                        if (\n                                            !variantData?.count ||\n                                            !variantData?.absolute_exposure ||\n                                            !controlVariant?.count ||\n                                            !controlVariant?.absolute_exposure\n                                        ) {\n                                            delta = 0\n                                        } else {\n                                            const controlMean = controlVariant.count / controlVariant.absolute_exposure\n                                            const variantMean = variantData.count / variantData.absolute_exposure\n                                            delta = (variantMean - controlMean) / controlMean\n                                        }\n                                    } else {\n                                        const variantRate = conversionRateForVariant(result, variant.key)\n                                        const controlRate = conversionRateForVariant(result, 'control')\n                                        delta =\n                                            variantRate && controlRate ? (variantRate - controlRate) / controlRate : 0\n                                    }\n\n                                    const y = BAR_PADDING + (BAR_HEIGHT + BAR_PADDING) * index\n                                    const x1 = valueToX(lower)\n                                    const x2 = valueToX(upper)\n                                    const deltaX = valueToX(delta)\n\n                                    return (\n                                        <g\n                                            key={variant.key}\n                                            onMouseEnter={(e) => {\n                                                const rect = e.currentTarget.getBoundingClientRect()\n                                                setTooltipData({\n                                                    x: rect.left + rect.width / 2,\n                                                    y: rect.top - 10,\n                                                    variant: variant.key,\n                                                })\n                                            }}\n                                            onMouseLeave={() => setTooltipData(null)}\n                                            onClick={() => {\n                                                if (featureFlags[FEATURE_FLAGS.EXPERIMENT_INTERVAL_TIMESERIES]) {\n                                                    openVariantDeltaTimeseriesModal()\n                                                }\n                                            }}\n                                            className={\n                                                featureFlags[FEATURE_FLAGS.EXPERIMENT_INTERVAL_TIMESERIES]\n                                                    ? 'cursor-pointer'\n                                                    : ''\n                                            }\n                                        >\n                                            {/* Add variant name using VariantTag */}\n                                            <foreignObject\n                                                x={x1 - 8} // Keep same positioning as the text element\n                                                y={y + BAR_HEIGHT / 2 - 10}\n                                                width=\"90\"\n                                                height=\"16\"\n                                                transform=\"translate(-90, 0)\" // Move left to accommodate tag width\n                                            >\n                                                <VariantTag\n                                                    className=\"justify-end mt-0.5\"\n                                                    experimentId={experimentId}\n                                                    variantKey={variant.key}\n                                                    fontSize={10}\n                                                    muted\n                                                />\n                                            </foreignObject>\n\n                                            {variant.key === 'control' ? (\n                                                // Control variant - dashed violin\n                                                <path\n                                                    d={generateViolinPath(x1, x2, y, BAR_HEIGHT, deltaX)}\n                                                    fill={COLORS.BAR_CONTROL}\n                                                    stroke={COLORS.BOUNDARY_LINES}\n                                                    strokeWidth={1}\n                                                    strokeDasharray=\"2,2\"\n                                                />\n                                            ) : (\n                                                // Test variants - single violin with gradient fill\n                                                <>\n                                                    <defs>\n                                                        <linearGradient\n                                                            id={`gradient-${metricIndex}-${variant.key}-${\n                                                                isSecondary ? 'secondary' : 'primary'\n                                                            }`}\n                                                            x1=\"0\"\n                                                            x2=\"1\"\n                                                            y1=\"0\"\n                                                            y2=\"0\"\n                                                        >\n                                                            {lower < 0 && upper > 0 ? (\n                                                                <>\n                                                                    <stop offset=\"0%\" stopColor={COLORS.BAR_NEGATIVE} />\n                                                                    <stop\n                                                                        offset={`${(-lower / (upper - lower)) * 100}%`}\n                                                                        stopColor={COLORS.BAR_NEGATIVE}\n                                                                    />\n                                                                    <stop\n                                                                        offset={`${(-lower / (upper - lower)) * 100}%`}\n                                                                        stopColor={COLORS.BAR_POSITIVE}\n                                                                    />\n                                                                    <stop\n                                                                        offset=\"100%\"\n                                                                        stopColor={COLORS.BAR_POSITIVE}\n                                                                    />\n                                                                </>\n                                                            ) : (\n                                                                <stop\n                                                                    offset=\"100%\"\n                                                                    stopColor={\n                                                                        upper <= 0\n                                                                            ? COLORS.BAR_NEGATIVE\n                                                                            : COLORS.BAR_POSITIVE\n                                                                    }\n                                                                />\n                                                            )}\n                                                        </linearGradient>\n                                                    </defs>\n                                                    <path\n                                                        d={generateViolinPath(x1, x2, y, BAR_HEIGHT, deltaX)}\n                                                        fill={`url(#gradient-${metricIndex}-${variant.key}-${\n                                                            isSecondary ? 'secondary' : 'primary'\n                                                        })`}\n                                                    />\n                                                </>\n                                            )}\n                                            {/* Delta marker */}\n                                            <g transform={`translate(${deltaX}, 0)`}>\n                                                <line\n                                                    x1={0}\n                                                    y1={y}\n                                                    x2={0}\n                                                    y2={y + BAR_HEIGHT}\n                                                    stroke={\n                                                        variant.key === 'control'\n                                                            ? COLORS.BAR_MIDDLE_POINT_CONTROL\n                                                            : COLORS.BAR_MIDDLE_POINT\n                                                    }\n                                                    strokeWidth={CONVERSION_RATE_RECT_WIDTH}\n                                                    vectorEffect=\"non-scaling-stroke\"\n                                                    shapeRendering=\"crispEdges\"\n                                                />\n                                            </g>\n                                        </g>\n                                    )\n                                })}\n                            </svg>\n                        </div>\n                    </div>\n                ) : resultsLoading ? (\n                    <svg\n                        ref={chartSvgRef}\n                        viewBox={`0 0 ${VIEW_BOX_WIDTH} ${chartHeight}`}\n                        preserveAspectRatio=\"xMidYMid meet\"\n                    >\n                        <foreignObject\n                            x={VIEW_BOX_WIDTH / 2 - 100} // Center the 200px wide container\n                            y={chartHeight / 2 - 10} // Roughly center vertically\n                            width=\"200\"\n                            height=\"20\"\n                        >\n                            <div\n                                className=\"flex items-center justify-center text-secondary cursor-default\"\n                                // eslint-disable-next-line react/forbid-dom-props\n                                style={{ fontSize: '10px', fontWeight: 400 }}\n                            >\n                                <span>Results loading&hellip;</span>\n                            </div>\n                        </foreignObject>\n                    </svg>\n                ) : (\n                    <svg\n                        ref={chartSvgRef}\n                        viewBox={`0 0 ${VIEW_BOX_WIDTH} ${chartHeight}`}\n                        preserveAspectRatio=\"xMidYMid meet\"\n                    >\n                        {!experiment.start_date ? (\n                            <foreignObject x=\"0\" y={chartHeight / 2 - 10} width={VIEW_BOX_WIDTH} height=\"20\">\n                                <div\n                                    className=\"flex items-center ml-2 xl:ml-0 xl:justify-center text-secondary cursor-default\"\n                                    // eslint-disable-next-line react/forbid-dom-props\n                                    style={{ fontSize: '10px', fontWeight: 400 }}\n                                >\n                                    <LemonTag size=\"small\" className=\"mr-2\">\n                                        <IconClock fontSize=\"1em\" />\n                                    </LemonTag>\n                                    <span>Waiting for experiment to start&hellip;</span>\n                                </div>\n                            </foreignObject>\n                        ) : (\n                            <foreignObject\n                                x={0}\n                                y={chartHeight / 2 - 10}\n                                width={VIEW_BOX_WIDTH}\n                                height=\"20\"\n                                onMouseEnter={(e) => {\n                                    const rect = e.currentTarget.getBoundingClientRect()\n                                    setTooltipPosition({\n                                        x: rect.left + rect.width / 2,\n                                        y: rect.top,\n                                    })\n                                    setEmptyStateTooltipVisible(true)\n                                }}\n                                onMouseLeave={() => setEmptyStateTooltipVisible(false)}\n                            >\n                                <div\n                                    className=\"flex items-center ml-2 xl:ml-0 xl:justify-center text-secondary cursor-default\"\n                                    // eslint-disable-next-line react/forbid-dom-props\n                                    style={{ fontSize: '10px', fontWeight: 400 }}\n                                >\n                                    {error?.hasDiagnostics ? (\n                                        <LemonTag size=\"small\" type=\"highlight\" className=\"mr-2\">\n                                            <IconActivity className=\"mr-1\" fontSize=\"1em\" />\n                                            <span className=\"font-semibold\">\n                                                {(() => {\n                                                    try {\n                                                        return Object.values(error.detail).filter((v) => v === false)\n                                                            .length\n                                                    } catch {\n                                                        return '0'\n                                                    }\n                                                })()}\n                                            </span>\n                                            /\n                                            <span className=\"font-semibold\">\n                                                {metricType === InsightType.TRENDS ? '3' : '2'}\n                                            </span>\n                                        </LemonTag>\n                                    ) : (\n                                        <LemonTag size=\"small\" type=\"danger\" className=\"mr-1\">\n                                            Error\n                                        </LemonTag>\n                                    )}\n                                    <span>Results not yet available</span>\n                                </div>\n                            </foreignObject>\n                        )}\n                    </svg>\n                )}\n\n                {/* Variant result tooltip */}\n                {tooltipData && (\n                    <div\n                        // eslint-disable-next-line react/forbid-dom-props\n                        style={{\n                            position: 'fixed',\n                            left: tooltipData.x,\n                            top: tooltipData.y,\n                            transform: 'translate(-50%, -100%)',\n                            backgroundColor: 'var(--bg-surface-primary)',\n                            border: '1px solid var(--border-primary)',\n                            padding: '8px 12px',\n                            borderRadius: '6px',\n                            fontSize: '13px',\n                            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)',\n                            pointerEvents: 'none',\n                            zIndex: 100,\n                            minWidth: '300px',\n                        }}\n                    >\n                        <div className=\"flex flex-col gap-1\">\n                            <VariantTag experimentId={experimentId} variantKey={tooltipData.variant} />\n                            <div className=\"inline-flex\">\n                                <span className=\"text-secondary font-semibold mb-1\">Win probability:</span>\n                                {result?.probability?.[tooltipData.variant] !== undefined ? (\n                                    <span className=\"flex items-center justify-between flex-1 pl-6\">\n                                        <LemonProgress\n                                            className=\"w-3/4 mr-4\"\n                                            percent={result.probability[tooltipData.variant] * 100}\n                                        />\n                                        <span className=\"font-semibold\">\n                                            {(result.probability[tooltipData.variant] * 100).toFixed(2)}%\n                                        </span>\n                                    </span>\n                                ) : (\n                                    '\u2014'\n                                )}\n                            </div>\n                            {metricType === InsightType.TRENDS ? (\n                                <>\n                                    <div className=\"flex justify-between items-center\">\n                                        <span className=\"text-secondary font-semibold\">\n                                            {metricType === InsightType.TRENDS &&\n                                            result.exposure_query?.series?.[0]?.math\n                                                ? 'Total'\n                                                : 'Count'}\n                                            :\n                                        </span>\n                                        <span className=\"font-semibold\">\n                                            {(() => {\n                                                const count = countDataForVariant(result, tooltipData.variant)\n                                                return count !== null ? humanFriendlyNumber(count) : '\u2014'\n                                            })()}\n                                        </span>\n                                    </div>\n                                    <div className=\"flex justify-between items-center\">\n                                        <span className=\"text-secondary font-semibold\">Exposure:</span>\n                                        <span className=\"font-semibold\">\n                                            {(() => {\n                                                const exposure = exposureCountDataForVariant(\n                                                    result,\n                                                    tooltipData.variant\n                                                )\n                                                return exposure !== null ? humanFriendlyNumber(exposure) : '\u2014'\n                                            })()}\n                                        </span>\n                                    </div>\n                                    <div className=\"flex justify-between items-center\">\n                                        <span className=\"text-secondary font-semibold\">Mean:</span>\n                                        <span className=\"font-semibold\">\n                                            {(() => {\n                                                const variant = result.variants.find(\n                                                    (v: TrendExperimentVariant) => v.key === tooltipData.variant\n                                                )\n                                                return variant?.count && variant?.absolute_exposure\n                                                    ? (variant.count / variant.absolute_exposure).toFixed(2)\n                                                    : '\u2014'\n                                            })()}\n                                        </span>\n                                    </div>\n                                </>\n                            ) : (\n                                <div className=\"flex justify-between items-center\">\n                                    <span className=\"text-secondary font-semibold\">Conversion rate:</span>\n                                    <span className=\"font-semibold\">\n                                        {conversionRateForVariant(result, tooltipData.variant)?.toFixed(2)}%\n                                    </span>\n                                </div>\n                            )}\n                            <div className=\"flex justify-between items-center\">\n                                <span className=\"text-secondary font-semibold\">Delta:</span>\n                                <span className=\"font-semibold\">\n                                    {tooltipData.variant === 'control' ? (\n                                        <em className=\"text-secondary\">Baseline</em>\n                                    ) : (\n                                        (() => {\n                                            if (metricType === InsightType.TRENDS) {\n                                                const controlVariant = result.variants.find(\n                                                    (v: TrendExperimentVariant) => v.key === 'control'\n                                                )\n                                                const variant = result.variants.find(\n                                                    (v: TrendExperimentVariant) => v.key === tooltipData.variant\n                                                )\n\n                                                if (\n                                                    !variant?.count ||\n                                                    !variant?.absolute_exposure ||\n                                                    !controlVariant?.count ||\n                                                    !controlVariant?.absolute_exposure\n                                                ) {\n                                                    return '\u2014'\n                                                }\n\n                                                const controlMean =\n                                                    controlVariant.count / controlVariant.absolute_exposure\n                                                const variantMean = variant.count / variant.absolute_exposure\n                                                const delta = (variantMean - controlMean) / controlMean\n                                                return delta ? (\n                                                    <span className={delta > 0 ? 'text-success' : 'text-danger'}>\n                                                        {`${delta > 0 ? '+' : ''}${(delta * 100).toFixed(2)}%`}\n                                                    </span>\n                                                ) : (\n                                                    '\u2014'\n                                                )\n                                            }\n\n                                            const variantRate = conversionRateForVariant(result, tooltipData.variant)\n                                            const controlRate = conversionRateForVariant(result, 'control')\n                                            const delta =\n                                                variantRate && controlRate\n                                                    ? (variantRate - controlRate) / controlRate\n                                                    : 0\n                                            return delta ? (\n                                                <span className={delta > 0 ? 'text-success' : 'text-danger'}>\n                                                    {`${delta > 0 ? '+' : ''}${(delta * 100).toFixed(2)}%`}\n                                                </span>\n                                            ) : (\n                                                '\u2014'\n                                            )\n                                        })()\n                                    )}\n                                </span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                                <span className=\"text-secondary font-semibold\">Credible interval:</span>\n                                <span className=\"font-semibold\">\n                                    {(() => {\n                                        const interval = credibleIntervalForVariant(\n                                            result,\n                                            tooltipData.variant,\n                                            metricType\n                                        )\n                                        const [lower, upper] = interval\n                                            ? [interval[0] / 100, interval[1] / 100]\n                                            : [0, 0]\n                                        return `[${lower > 0 ? '+' : ''}${(lower * 100).toFixed(2)}%, ${\n                                            upper > 0 ? '+' : ''\n                                        }${(upper * 100).toFixed(2)}%]`\n                                    })()}\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                )}\n\n                {/* Empty state tooltip */}\n                {emptyStateTooltipVisible && (\n                    <div\n                        // eslint-disable-next-line react/forbid-dom-props\n                        style={{\n                            position: 'fixed',\n                            left: tooltipPosition.x,\n                            top: tooltipPosition.y,\n                            transform: 'translate(-50%, -100%)',\n                            backgroundColor: 'var(--bg-surface-primary)',\n                            border: '1px solid var(--border-primary)',\n                            padding: '8px 12px',\n                            borderRadius: '6px',\n                            fontSize: '13px',\n                            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)',\n                            zIndex: 100,\n                            minWidth: '200px',\n                        }}\n                        onMouseEnter={() => setEmptyStateTooltipVisible(true)}\n                        onMouseLeave={() => setEmptyStateTooltipVisible(false)}\n                    >\n                        <NoResultEmptyState error={error} metric={metric} />\n                    </div>\n                )}\n            </div>\n\n            <LemonModal\n                isOpen={isModalOpen}\n                onClose={() => setIsModalOpen(false)}\n                width={1200}\n                title={`Metric results: ${metric.name || 'Untitled metric'}`}\n                footer={\n                    <LemonButton\n                        form=\"secondary-metric-modal-form\"\n                        type=\"secondary\"\n                        onClick={() => setIsModalOpen(false)}\n                    >\n                        Close\n                    </LemonButton>\n                }\n            >\n                {/* TODO: Only show explore button if the metric is a trends or funnels query. Not supported yet with new query runner */}\n                {result &&\n                    (result.kind === NodeKind.ExperimentTrendsQuery ||\n                        result.kind === NodeKind.ExperimentFunnelsQuery) && (\n                        <div className=\"flex justify-end\">\n                            <ExploreButton result={result} />\n                        </div>\n                    )}\n                <LemonBanner type={result?.significant ? 'success' : 'info'} className=\"mb-4\">\n                    <div className=\"items-center inline-flex flex-wrap\">\n                        <WinningVariantText result={result} experimentId={experimentId} />\n                        <SignificanceText metricIndex={metricIndex} />\n                    </div>\n                </LemonBanner>\n                <SummaryTable metric={metric} metricIndex={metricIndex} isSecondary={isSecondary} />\n                {/* TODO: Only show results query if the metric is a trends or funnels query. Not supported yet with new query runner */}\n                {result &&\n                    (result.kind === NodeKind.ExperimentTrendsQuery ||\n                        result.kind === NodeKind.ExperimentFunnelsQuery) && (\n                        <ResultsQuery result={result} showTable={true} />\n                    )}\n            </LemonModal>\n        </div>\n    )\n}\n\nfunction SignificanceHighlight({\n    metricIndex = 0,\n    isSecondary = false,\n    className = '',\n}: {\n    metricIndex?: number\n    isSecondary?: boolean\n    className?: string\n}): JSX.Element {\n    const { isPrimaryMetricSignificant, isSecondaryMetricSignificant, significanceDetails } = useValues(experimentLogic)\n    const isSignificant = isSecondary\n        ? isSecondaryMetricSignificant(metricIndex)\n        : isPrimaryMetricSignificant(metricIndex)\n    const result: { color: LemonTagType; label: string } = isSignificant\n        ? { color: 'success', label: 'Significant' }\n        : { color: 'primary', label: 'Not significant' }\n\n    const inner = isSignificant ? (\n        <div className=\"bg-success-highlight text-success-light px-1.5 py-0.5 flex items-center gap-1 rounded border border-success-light\">\n            <IconTrending fontSize={20} fontWeight={600} />\n            <span className=\"text-xs font-semibold\">{result.label}</span>\n        </div>\n    ) : (\n        <div className=\"bg-warning-highlight text-warning-dark px-1.5 py-0.5 flex items-center gap-1 rounded border border-warning\">\n            <IconMinus fontSize={20} fontWeight={600} />\n            <span className=\"text-xs font-semibold\">{result.label}</span>\n        </div>\n    )\n\n    const details = significanceDetails(metricIndex)\n\n    return details ? (\n        <Tooltip title={details}>\n            <div\n                className={clsx({\n                    'cursor-default': true,\n                    'bg-[var(--bg-table)]': true,\n                    [className]: true,\n                })}\n            >\n                {inner}\n            </div>\n        </Tooltip>\n    ) : (\n        <div className={clsx({ 'bg-[var(--bg-table)]': true, [className]: true })}>{inner}</div>\n    )\n}\n", "import { useValues } from 'kea'\n\nimport {\n    CachedExperimentFunnelsQueryResponse,\n    CachedExperimentQueryResponse,\n    CachedExperimentTrendsQueryResponse,\n} from '~/queries/schema/schema-general'\nimport { ExperimentIdType } from '~/types'\n\nimport { experimentLogic } from '../experimentLogic'\nimport { VariantTag } from './components'\n\nexport function WinningVariantText({\n    result,\n    experimentId,\n}: {\n    result: CachedExperimentQueryResponse | CachedExperimentFunnelsQueryResponse | CachedExperimentTrendsQueryResponse\n    experimentId: ExperimentIdType\n}): JSX.Element {\n    const { getIndexForVariant, getHighestProbabilityVariant } = useValues(experimentLogic)\n\n    const highestProbabilityVariant = getHighestProbabilityVariant(result)\n    const index = getIndexForVariant(result, highestProbabilityVariant || '')\n    if (highestProbabilityVariant && index !== null && result) {\n        const { probability } = result\n\n        return (\n            <div className=\"items-center inline-flex flex-wrap\">\n                <VariantTag experimentId={experimentId} variantKey={highestProbabilityVariant} />\n                <span>&nbsp;is winning with a&nbsp;</span>\n                <span className=\"font-semibold items-center\">\n                    {`${(probability[highestProbabilityVariant] * 100).toFixed(2)}% probability`}&nbsp;\n                </span>\n                <span>of being best.&nbsp;</span>\n            </div>\n        )\n    }\n\n    return <></>\n}\n\nexport function SignificanceText({\n    metricIndex,\n    isSecondary = false,\n}: {\n    metricIndex: number\n    isSecondary?: boolean\n}): JSX.Element {\n    const { isPrimaryMetricSignificant, isSecondaryMetricSignificant } = useValues(experimentLogic)\n\n    return (\n        <div className=\"flex-wrap\">\n            <span>Your results are&nbsp;</span>\n            <span className=\"font-semibold\">\n                {`${\n                    isSecondary\n                        ? isSecondaryMetricSignificant(metricIndex)\n                        : isPrimaryMetricSignificant(metricIndex)\n                        ? 'significant'\n                        : 'not significant'\n                }`}\n                .\n            </span>\n        </div>\n    )\n}\n\nexport function Overview({ metricIndex = 0 }: { metricIndex?: number }): JSX.Element {\n    const { experimentId, metricResults } = useValues(experimentLogic)\n\n    const result = metricResults?.[metricIndex]\n    if (!result) {\n        return <></>\n    }\n\n    return (\n        <div>\n            <div className=\"items-center inline-flex flex-wrap\">\n                <WinningVariantText result={result} experimentId={experimentId} />\n                <SignificanceText metricIndex={metricIndex} />\n            </div>\n        </div>\n    )\n}\n", "import { IconCheck, IconX } from '@posthog/icons'\nimport { Link, Tooltip } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { combineUrl } from 'kea-router/lib/utils'\nimport { IconOpenInNew } from 'lib/lemon-ui/icons'\nimport { urls } from 'scenes/urls'\n\nimport { NodeKind } from '~/queries/schema/schema-general'\nimport { ActivityTab, InsightType } from '~/types'\n\nimport { experimentLogic } from '../experimentLogic'\n\nexport enum ResultErrorCode {\n    NO_CONTROL_VARIANT = 'no-control-variant',\n    NO_TEST_VARIANT = 'no-test-variant',\n    NO_EXPOSURES = 'no-exposures',\n}\n\nexport function NoResultEmptyState({ error, metric }: { error: any; metric: any }): JSX.Element {\n    const { experiment, variants, getMetricType } = useValues(experimentLogic)\n\n    if (!error) {\n        return <></>\n    }\n\n    const { statusCode, hasDiagnostics } = error\n\n    function ChecklistItem({ errorCode, value }: { errorCode: ResultErrorCode; value: boolean }): JSX.Element {\n        const failureText: Record<ResultErrorCode, string> = {\n            [ResultErrorCode.NO_CONTROL_VARIANT]: 'Events with the control variant not received',\n            [ResultErrorCode.NO_TEST_VARIANT]: 'Events with at least one test variant not received',\n            [ResultErrorCode.NO_EXPOSURES]: 'Exposure events not received',\n        }\n\n        const successText: Record<ResultErrorCode, string> = {\n            [ResultErrorCode.NO_CONTROL_VARIANT]: 'Events with the control variant received',\n            [ResultErrorCode.NO_TEST_VARIANT]: 'Events with at least one test variant received',\n            [ResultErrorCode.NO_EXPOSURES]: 'Exposure events have been received',\n        }\n\n        const metricType = getMetricType(metric)\n        const hasMissingExposure = errorCode === ResultErrorCode.NO_EXPOSURES\n\n        const requiredEvent =\n            metricType === InsightType.TRENDS\n                ? hasMissingExposure\n                    ? metric.exposure_query?.series[0]?.event || '$feature_flag_called'\n                    : metric.count_query?.series[0]?.event\n                : metric.funnels_query?.series[0]?.event\n\n        const query = {\n            kind: NodeKind.DataTableNode,\n            full: true,\n            source: {\n                kind: NodeKind.EventsQuery,\n                select: ['*', 'event', `properties.\"$feature/${experiment.feature_flag?.key}\"`, 'timestamp'],\n                orderBy: ['timestamp DESC'],\n                after: experiment.start_date,\n                event: requiredEvent,\n                properties: [\n                    {\n                        key: `$feature/${experiment.feature_flag?.key}`,\n                        value: hasMissingExposure\n                            ? variants.map((variant) => variant.key)\n                            : errorCode === ResultErrorCode.NO_CONTROL_VARIANT\n                            ? ['control']\n                            : variants.slice(1).map((variant) => variant.key),\n                        operator: 'exact',\n                        type: 'event',\n                    },\n                    ...(hasMissingExposure\n                        ? [\n                              {\n                                  key: '$feature_flag',\n                                  value: [experiment.feature_flag?.key],\n                                  operator: 'exact',\n                                  type: 'event',\n                              },\n                          ]\n                        : []),\n                ],\n                filterTestAccounts: metric.count_query?.filter_test_accounts,\n            },\n            propertiesViaUrl: true,\n            showPersistentColumnConfigurator: true,\n        }\n\n        return (\n            <div className=\"flex items-center space-x-2\">\n                {value === false ? (\n                    <span className=\"flex items-center space-x-2\">\n                        <IconCheck className=\"text-success\" fontSize={16} />\n                        <span className=\"text-secondary\">{successText[errorCode]}</span>\n                    </span>\n                ) : (\n                    <span className=\"flex items-center space-x-2\">\n                        <IconX className=\"text-danger\" fontSize={16} />\n                        <span>{failureText[errorCode]}</span>\n                        <Tooltip title=\"Verify missing events in the Activity tab\">\n                            <Link\n                                target=\"_blank\"\n                                className=\"font-semibold\"\n                                to={combineUrl(urls.activity(ActivityTab.ExploreEvents), {}, { q: query }).url}\n                            >\n                                <IconOpenInNew fontSize=\"16\" className=\"-ml-1\" />\n                            </Link>\n                        </Tooltip>\n                    </span>\n                )}\n            </div>\n        )\n    }\n\n    if (hasDiagnostics) {\n        const checklistItems = []\n        for (const [errorCode, value] of Object.entries(error.detail as Record<ResultErrorCode, boolean>)) {\n            // Check if the error code is valid (cached response might still have old error codes)\n            if (!Object.values(ResultErrorCode).includes(errorCode as ResultErrorCode)) {\n                continue\n            }\n            checklistItems.push(\n                <ChecklistItem key={errorCode} errorCode={errorCode as ResultErrorCode} value={value} />\n            )\n        }\n\n        return <div>{checklistItems}</div>\n    }\n\n    if (statusCode === 504) {\n        return (\n            <>\n                <h2 className=\"text-xl font-semibold leading-tight\">Experiment results timed out</h2>\n                <div className=\"text-sm text-center text-balance\">\n                    This may occur when the experiment has a large amount of data or is particularly complex. We are\n                    actively working on fixing this. In the meantime, please try refreshing the experiment to retrieve\n                    the results.\n                </div>\n            </>\n        )\n    }\n\n    // Other unexpected errors\n    return <div>{error.detail}</div>\n}\n", "import { Chart, ChartConfiguration } from 'chart.js/auto'\nimport { useActions, useValues } from 'kea'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonModal } from 'lib/lemon-ui/LemonModal'\nimport { useEffect } from 'react'\n\nimport { experimentLogic } from '../experimentLogic'\n\nconst DELTA = [0.16, 0.17, 0.15, 0.16, 0.14, 0.15, 0.145, 0.15, 0.155, 0.148, 0.15, 0.147, 0.152, 0.15]\nconst UPPER_BOUND = [0.26, 0.27, 0.24, 0.24, 0.21, 0.21, 0.2, 0.2, 0.195, 0.183, 0.182, 0.177, 0.182, 0.18]\nconst LOWER_BOUND = [0.06, 0.07, 0.06, 0.08, 0.07, 0.09, 0.09, 0.1, 0.115, 0.113, 0.118, 0.117, 0.122, 0.12]\n\nexport const VariantDeltaTimeseries = (): JSX.Element => {\n    const { closeVariantDeltaTimeseriesModal } = useActions(experimentLogic)\n    const { isVariantDeltaTimeseriesModalOpen } = useValues(experimentLogic)\n\n    useEffect(() => {\n        if (isVariantDeltaTimeseriesModalOpen) {\n            setTimeout(() => {\n                const ctx = document.getElementById('variantDeltaChart') as HTMLCanvasElement\n                if (!ctx) {\n                    console.error('Canvas element not found')\n                    return\n                }\n\n                const existingChart = Chart.getChart(ctx)\n                if (existingChart) {\n                    existingChart.destroy()\n                }\n\n                ctx.style.width = '100%'\n                ctx.style.height = '100%'\n\n                const data = {\n                    labels: [\n                        'Day 1',\n                        'Day 2',\n                        'Day 3',\n                        'Day 4',\n                        'Day 5',\n                        'Day 6',\n                        'Day 7',\n                        'Day 8',\n                        'Day 9',\n                        'Day 10',\n                        'Day 11',\n                        'Day 12',\n                        'Day 13',\n                        'Day 14',\n                    ],\n                    datasets: [\n                        {\n                            label: 'Upper Bound',\n                            data: UPPER_BOUND,\n                            borderColor: 'rgba(200, 200, 200, 1)',\n                            fill: false,\n                            tension: 0,\n                            pointRadius: 0,\n                        },\n                        {\n                            label: 'Lower Bound',\n                            data: LOWER_BOUND,\n                            borderColor: 'rgba(200, 200, 200, 1)',\n                            fill: '-1',\n                            backgroundColor: 'rgba(200, 200, 200, 0.2)',\n                            tension: 0,\n                            pointRadius: 0,\n                        },\n                        {\n                            label: 'Delta',\n                            data: DELTA,\n                            borderColor: 'rgba(0, 100, 255, 1)',\n                            borderWidth: 2,\n                            fill: false,\n                            tension: 0,\n                            pointRadius: 0,\n                        },\n                    ],\n                }\n\n                const config: ChartConfiguration = {\n                    type: 'line',\n                    data: data,\n                    options: {\n                        responsive: true,\n                        maintainAspectRatio: false,\n                        interaction: {\n                            intersect: false,\n                            mode: 'nearest',\n                            axis: 'x',\n                        },\n                        scales: {\n                            y: {\n                                beginAtZero: true,\n                                grid: {\n                                    display: false,\n                                },\n                                ticks: {\n                                    count: 6,\n                                    callback: (value) => `${(Number(value) * 100).toFixed(1)}%`,\n                                },\n                            },\n                        },\n                        plugins: {\n                            legend: {\n                                display: false,\n                            },\n                            tooltip: {\n                                callbacks: {\n                                    labelPointStyle: function () {\n                                        return {\n                                            pointStyle: 'circle',\n                                            rotation: 0,\n                                        }\n                                    },\n                                },\n                                usePointStyle: true,\n                                boxWidth: 16,\n                                boxHeight: 1,\n                            },\n                            // @ts-expect-error Types of library are out of date\n                            crosshair: false,\n                        },\n                    },\n                }\n\n                new Chart(ctx, config)\n            }, 0)\n        }\n    }, [isVariantDeltaTimeseriesModalOpen])\n\n    return (\n        <LemonModal\n            isOpen={isVariantDeltaTimeseriesModalOpen}\n            onClose={() => {\n                closeVariantDeltaTimeseriesModal()\n            }}\n            width={800}\n            title=\"Variant performance over time\"\n            footer={\n                <LemonButton form=\"secondary-metric-modal-form\" type=\"secondary\" onClick={() => {}}>\n                    Close\n                </LemonButton>\n            }\n        >\n            <div className=\"relative h-[400px]\">\n                <canvas id=\"variantDeltaChart\" />\n            </div>\n        </LemonModal>\n    )\n}\n", "import {Chart, registerables} from '../dist/chart.js';\n\nChart.register(...registerables);\n\nexport * from '../dist/chart.js';\nexport default Chart;\n", "import { IconInfo } from '@posthog/icons'\nimport { LemonButton, LemonDivider, LemonModal, Link, Tooltip } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { LemonProgress } from 'lib/lemon-ui/LemonProgress'\nimport { LoadingBar } from 'lib/lemon-ui/LoadingBar'\nimport { humanFriendlyNumber } from 'lib/utils'\n\nimport { Experiment, InsightType } from '~/types'\n\nimport { experimentLogic } from '../experimentLogic'\nimport { formatUnitByQuantity } from '../utils'\nimport { EllipsisAnimation } from './components'\nimport { DataCollectionCalculator } from './DataCollectionCalculator'\n\nexport function DataCollection(): JSX.Element {\n    const {\n        experimentId,\n        experiment,\n        getMetricType,\n        funnelResultsPersonsTotal,\n        actualRunningTime,\n        minimumDetectableEffect,\n        firstPrimaryMetric,\n    } = useValues(experimentLogic)\n\n    const { openExperimentCollectionGoalModal } = useActions(experimentLogic)\n\n    const metricType = getMetricType(firstPrimaryMetric)\n\n    const recommendedRunningTime = experiment?.parameters?.recommended_running_time || 1\n    const recommendedSampleSize = experiment?.parameters?.recommended_sample_size || 100\n\n    const experimentProgressPercent =\n        metricType === InsightType.FUNNELS\n            ? (funnelResultsPersonsTotal(0) / recommendedSampleSize) * 100\n            : (actualRunningTime / recommendedRunningTime) * 100\n\n    const hasHighRunningTime = recommendedRunningTime > 62\n    const GoalTooltip = (): JSX.Element => {\n        if (!experiment?.parameters?.minimum_detectable_effect) {\n            return <></>\n        }\n\n        return (\n            <Tooltip\n                title={\n                    <div>\n                        <div>{`Based on the Minimum detectable effect of ${experiment.parameters.minimum_detectable_effect}%.`}</div>\n                        {hasHighRunningTime && (\n                            <div className=\"mt-2\">\n                                Given the current data, this experiment might take a while to reach statistical\n                                significance. Please make sure events are being tracked correctly and consider if this\n                                timeline works for you.\n                            </div>\n                        )}\n                    </div>\n                }\n            >\n                <IconInfo className=\"text-secondary text-base\" />\n            </Tooltip>\n        )\n    }\n\n    return (\n        <div>\n            <div className=\"inline-flex items-center space-x-2\">\n                <h2 className=\"font-semibold text-lg mb-0\">Data collection</h2>\n                <Tooltip\n                    title=\"Estimated target for the number of participants. Actual data may reveal significance earlier or later\n                    than predicted.\"\n                >\n                    <IconInfo className=\"text-secondary text-base\" />\n                </Tooltip>\n            </div>\n            <div className=\"flex\">\n                <div className=\"w-3/5 pr-4\">\n                    <div className=\"mt-2 mb-1 font-semibold\">{`${\n                        experimentProgressPercent > 100 ? 100 : experimentProgressPercent.toFixed(2)\n                    }% complete`}</div>\n                    <LemonProgress\n                        className=\"w-full border\"\n                        bgColor=\"var(--bg-table)\"\n                        size=\"medium\"\n                        percent={experimentProgressPercent}\n                    />\n                    {metricType === InsightType.TRENDS && (\n                        <div className=\"flex justify-between mt-0\">\n                            <span className=\"flex items-center text-xs\">\n                                Completed&nbsp;\n                                <b>{actualRunningTime} of</b>\n                                {hasHighRunningTime ? (\n                                    <b>&nbsp; &gt; 60 days</b>\n                                ) : (\n                                    <span>\n                                        &nbsp;\n                                        <b>{recommendedRunningTime}</b>{' '}\n                                        {formatUnitByQuantity(recommendedRunningTime, 'day')}\n                                    </span>\n                                )}\n                                <span className=\"ml-1 text-xs\">\n                                    <GoalTooltip />\n                                </span>\n                            </span>\n                        </div>\n                    )}\n                    {metricType === InsightType.FUNNELS && (\n                        <div className=\"flex justify-between mt-0\">\n                            <div className=\"space-x-1 flex items-center text-xs\">\n                                <span>\n                                    Saw&nbsp;\n                                    <b>\n                                        {humanFriendlyNumber(funnelResultsPersonsTotal(0))} of{' '}\n                                        {humanFriendlyNumber(recommendedSampleSize)}{' '}\n                                    </b>{' '}\n                                    {formatUnitByQuantity(recommendedSampleSize, 'participant')}\n                                </span>\n                                <GoalTooltip />\n                            </div>\n                        </div>\n                    )}\n                </div>\n                <LemonDivider className=\"my-0\" vertical />\n                <div className=\"w-2/5 pl-4\">\n                    <div className={`text-lg font-semibold ${experiment.end_date ? 'mt-4' : ''}`}>\n                        {minimumDetectableEffect}%\n                    </div>\n                    <div className=\"text-xs space-x-1 text-sm flex\">\n                        <span>Minimum detectable effect</span>\n                        <Tooltip\n                            title={\n                                <div className=\"space-y-2\">\n                                    <div>\n                                        The Minimum detectable effect represents the smallest change that you want to be\n                                        able to detect in your experiment.\n                                    </div>\n                                    <div>\n                                        To make things easier, we initially set this value to a reasonable default.\n                                        However, we encourage you to review and adjust it based on your specific goals.\n                                    </div>\n                                    <div>\n                                        Read more in the{' '}\n                                        <Link to=\"https://posthog.com/docs/experiments/sample-size-running-time#minimum-detectable-effect-mde\">\n                                            documentation.\n                                        </Link>\n                                    </div>\n                                </div>\n                            }\n                            closeDelayMs={200}\n                        >\n                            <IconInfo className=\"text-secondary text-base\" />\n                        </Tooltip>\n                    </div>\n                    {!experiment.end_date && (\n                        <div className=\"w-24\">\n                            <LemonButton\n                                className=\"mt-2\"\n                                size=\"xsmall\"\n                                type=\"secondary\"\n                                onClick={openExperimentCollectionGoalModal}\n                            >\n                                <span className=\"px-0\">Edit</span>\n                            </LemonButton>\n                        </div>\n                    )}\n                    <DataCollectionGoalModal experimentId={experimentId} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport function DataCollectionGoalModal({ experimentId }: { experimentId: Experiment['id'] }): JSX.Element {\n    const {\n        isExperimentCollectionGoalModalOpen,\n        getMetricType,\n        firstPrimaryMetric,\n        trendMetricInsightLoading,\n        funnelMetricInsightLoading,\n    } = useValues(experimentLogic({ experimentId }))\n    const { closeExperimentCollectionGoalModal, updateExperimentCollectionGoal, restoreUnmodifiedExperiment } =\n        useActions(experimentLogic({ experimentId }))\n\n    const isInsightLoading =\n        getMetricType(firstPrimaryMetric) === InsightType.TRENDS\n            ? trendMetricInsightLoading\n            : funnelMetricInsightLoading\n\n    return (\n        <LemonModal\n            isOpen={isExperimentCollectionGoalModalOpen}\n            onClose={closeExperimentCollectionGoalModal}\n            width={550}\n            title=\"Recalculate estimated sample size\"\n            footer={\n                <div className=\"flex items-center gap-2\">\n                    <LemonButton\n                        form=\"edit-experiment-exposure-form\"\n                        type=\"secondary\"\n                        onClick={() => {\n                            restoreUnmodifiedExperiment()\n                            closeExperimentCollectionGoalModal()\n                        }}\n                    >\n                        Cancel\n                    </LemonButton>\n                    <LemonButton\n                        form=\"edit-experiment-exposure-form\"\n                        onClick={() => {\n                            updateExperimentCollectionGoal()\n                            closeExperimentCollectionGoalModal()\n                        }}\n                        type=\"primary\"\n                        data-attr=\"create-annotation-submit\"\n                    >\n                        Save\n                    </LemonButton>\n                </div>\n            }\n        >\n            {isInsightLoading ? (\n                <div className=\"flex flex-col flex-1 justify-center items-center mb-6\">\n                    <LoadingBar />\n                    <div className=\"text-xs text-secondary w-60\">\n                        <span className=\"mr-1\">Fetching past events for the estimation</span>\n                        <EllipsisAnimation />\n                    </div>\n                </div>\n            ) : (\n                <DataCollectionCalculator experimentId={experimentId} />\n            )}\n        </LemonModal>\n    )\n}\n", "import { IconInfo } from '@posthog/icons'\nimport { LemonBanner, LemonInput, Link, Tooltip } from '@posthog/lemon-ui'\nimport { BindLogic, useActions, useValues } from 'kea'\nimport { LemonSlider } from 'lib/lemon-ui/LemonSlider'\nimport { humanFriendlyNumber } from 'lib/utils'\nimport { insightLogic } from 'scenes/insights/insightLogic'\n\nimport { Query } from '~/queries/Query/Query'\nimport { ExperimentFunnelsQuery, ExperimentTrendsQuery, NodeKind } from '~/queries/schema/schema-general'\nimport { ExperimentIdType, InsightType } from '~/types'\n\nimport { MetricInsightId } from '../constants'\nimport { experimentLogic } from '../experimentLogic'\ninterface ExperimentCalculatorProps {\n    experimentId: ExperimentIdType\n}\n\nfunction FunnelCalculation({ experimentId }: ExperimentCalculatorProps): JSX.Element {\n    const {\n        minimumDetectableEffect,\n        experiment,\n        conversionMetrics,\n        minimumSampleSizePerVariant,\n        recommendedRunningTime,\n        variants,\n    } = useValues(experimentLogic({ experimentId }))\n\n    const funnelConversionRate = conversionMetrics?.totalRate * 100 || 0\n    const conversionRate = conversionMetrics.totalRate * 100\n    const sampleSizePerVariant = minimumSampleSizePerVariant(conversionRate)\n    const funnelSampleSize = sampleSizePerVariant * variants.length\n\n    // Displayed values\n    const baselineConversionRate = funnelConversionRate.toFixed(1)\n    const minimumAcceptableConversionRate = (funnelConversionRate + (minimumDetectableEffect || 5)).toFixed(1)\n    const recommendedSampleSize = humanFriendlyNumber(funnelSampleSize || 0)\n\n    return (\n        <div className=\"flex flex-wrap\">\n            {!experiment?.start_date && (\n                <>\n                    <div className=\"mb-4 w-1/2\">\n                        <div className=\"card-secondary\">Baseline Conversion Rate</div>\n                        <div className=\"l4\">{baselineConversionRate}%</div>\n                    </div>\n                    <div className=\"mb-4 w-1/2\">\n                        <div className=\"card-secondary\">Minimum Acceptable Conversion Rate</div>\n                        <div className=\"l4\">{minimumAcceptableConversionRate}%</div>\n                    </div>\n                </>\n            )}\n            <div className=\"w-1/2\">\n                <div className=\"card-secondary\">Recommended Sample Size</div>\n                <div className=\"pb-4\">\n                    <span className=\"l4\">~{recommendedSampleSize}</span> persons\n                </div>\n            </div>\n            {!experiment?.start_date && (\n                <div className=\"w-1/2\">\n                    <div className=\"card-secondary\">Recommended running time</div>\n                    <div>\n                        <span className=\"l4\">~{recommendedRunningTime}</span> days\n                    </div>\n                </div>\n            )}\n        </div>\n    )\n}\n\nfunction TrendCalculation({ experimentId }: ExperimentCalculatorProps): JSX.Element {\n    const { minimumDetectableEffect, experiment, trendResults, recommendedExposureForCountData } = useValues(\n        experimentLogic({ experimentId })\n    )\n\n    const trendCount = trendResults[0]?.count || 0\n    const trendExposure = recommendedExposureForCountData(trendCount)\n\n    // Displayed values\n    const baselineCount = humanFriendlyNumber(trendCount || 0)\n    const minimumAcceptableCount = humanFriendlyNumber(\n        trendCount + Math.ceil(trendCount * ((minimumDetectableEffect || 5) / 100)) || 0\n    )\n    const recommendedRunningTime = humanFriendlyNumber(trendExposure || 0)\n\n    return (\n        <div className=\"flex flex-wrap\">\n            {!experiment?.start_date && (\n                <>\n                    <div className=\"mb-4 w-1/2\">\n                        <div className=\"card-secondary\">Baseline Count</div>\n                        <div className=\"l4\">{baselineCount}</div>\n                    </div>\n                    <div className=\"mb-4 w-1/2\">\n                        <div className=\"card-secondary\">Minimum Acceptable Count</div>\n                        <div className=\"l4\">{minimumAcceptableCount}</div>\n                    </div>\n                </>\n            )}\n            <div className=\"w-1/2\">\n                <div className=\"card-secondary\">Recommended running time</div>\n                <div>\n                    <span className=\"l4\">~{recommendedRunningTime}</span> days\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport function DataCollectionCalculator({ experimentId }: ExperimentCalculatorProps): JSX.Element {\n    const { getMetricType, firstPrimaryMetric, minimumDetectableEffect, experiment, conversionMetrics } = useValues(\n        experimentLogic({ experimentId })\n    )\n    const { setExperiment } = useActions(experimentLogic({ experimentId }))\n\n    const metricType = getMetricType(firstPrimaryMetric)\n\n    // :KLUDGE: need these to mount the Query component to load the insight */\n    const insightLogicInstance = insightLogic({\n        dashboardItemId: metricType === InsightType.FUNNELS ? MetricInsightId.Funnels : MetricInsightId.Trends,\n        syncWithUrl: false,\n    })\n    const { insightProps } = useValues(insightLogicInstance)\n    let query = null\n    if (experiment.metrics.length > 0) {\n        query = {\n            kind: NodeKind.InsightVizNode,\n            source:\n                metricType === InsightType.FUNNELS\n                    ? (firstPrimaryMetric as ExperimentFunnelsQuery).funnels_query\n                    : (firstPrimaryMetric as ExperimentTrendsQuery).count_query,\n        }\n    }\n\n    const funnelConversionRate = conversionMetrics?.totalRate * 100 || 0\n\n    let sliderMaxValue = 0\n    if (metricType === InsightType.FUNNELS) {\n        if (100 - funnelConversionRate < 50) {\n            sliderMaxValue = 100 - funnelConversionRate\n        } else {\n            sliderMaxValue = 50\n        }\n    } else {\n        sliderMaxValue = 100\n    }\n\n    return (\n        <div className=\"flex\">\n            <div className=\"w-full\">\n                <div className=\"mb-4 experiment-preview-row\">\n                    <div className=\"flex items-center\">\n                        <b>Minimum detectable effect</b>\n                        <Tooltip\n                            title={\n                                <div className=\"space-y-2\">\n                                    <div>\n                                        The Minimum detectable effect represents the smallest change that you want to be\n                                        able to detect in your experiment.\n                                    </div>\n                                    <div>\n                                        To make things easier, we initially set this value to a reasonable default.\n                                        However, we encourage you to review and adjust it based on your specific goals.\n                                    </div>\n                                    <div>\n                                        Read more in the{' '}\n                                        <Link to=\"https://posthog.com/docs/experiments/sample-size-running-time#minimum-detectable-effect-mde\">\n                                            documentation.\n                                        </Link>\n                                    </div>\n                                </div>\n                            }\n                            closeDelayMs={200}\n                        >\n                            <IconInfo className=\"text-secondary text-base ml-1\" />\n                        </Tooltip>\n                    </div>\n                    <div className=\"flex gap-4\">\n                        <LemonSlider\n                            value={minimumDetectableEffect}\n                            min={1}\n                            max={sliderMaxValue}\n                            step={1}\n                            onChange={(value) => {\n                                setExperiment({\n                                    parameters: {\n                                        ...experiment.parameters,\n                                        minimum_detectable_effect: value,\n                                    },\n                                })\n                            }}\n                            className=\"w-5/6\"\n                        />\n                        <LemonInput\n                            className=\"w-1/6\"\n                            data-attr=\"min-detectable-effect\"\n                            type=\"number\"\n                            min={1}\n                            max={sliderMaxValue}\n                            defaultValue={5}\n                            suffix={<span>%</span>}\n                            value={minimumDetectableEffect}\n                            onChange={(value) => {\n                                if (value) {\n                                    setExperiment({\n                                        parameters: {\n                                            ...experiment.parameters,\n                                            minimum_detectable_effect: value,\n                                        },\n                                    })\n                                }\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className=\"flex flex-col experiment-preview-row\">\n                    <LemonBanner type=\"info\" className=\"mb-4\">\n                        The calculations are based on the events received in the last 14 days. This event count may\n                        differ from what was considered in earlier estimates.\n                    </LemonBanner>\n                    {getMetricType(firstPrimaryMetric) === InsightType.TRENDS ? (\n                        <TrendCalculation experimentId={experimentId} />\n                    ) : (\n                        <FunnelCalculation experimentId={experimentId} />\n                    )}\n                    {/* :KLUDGE: mounting the query component to ensure the goal insight is loaded for the calculations */}\n                    <div className=\"hidden\">\n                        <BindLogic logic={insightLogic} props={insightProps}>\n                            <Query query={query} context={{ insightProps }} readOnly />\n                        </BindLogic>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n", "import { IconBalance, IconFlag } from '@posthog/icons'\nimport {\n    LemonBanner,\n    LemonButton,\n    LemonDialog,\n    LemonInput,\n    LemonModal,\n    LemonTable,\n    LemonTableColumns,\n} from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { AuthorizedUrlList } from 'lib/components/AuthorizedUrlList/AuthorizedUrlList'\nimport { AuthorizedUrlListType } from 'lib/components/AuthorizedUrlList/authorizedUrlListLogic'\nimport { IconOpenInApp } from 'lib/lemon-ui/icons'\nimport { featureFlagLogic, FeatureFlagLogicProps } from 'scenes/feature-flags/featureFlagLogic'\n\nimport { themeLogic } from '~/layout/navigation-3000/themeLogic'\nimport { Experiment, MultivariateFlagVariant } from '~/types'\n\nimport { experimentLogic } from '../experimentLogic'\nimport { VariantTag } from './components'\nimport { HoldoutSelector } from './HoldoutSelector'\nimport { VariantScreenshot } from './VariantScreenshot'\n\nexport function DistributionModal({ experimentId }: { experimentId: Experiment['id'] }): JSX.Element {\n    const { experiment, experimentLoading, isDistributionModalOpen } = useValues(experimentLogic({ experimentId }))\n    const { closeDistributionModal, updateDistributionModal } = useActions(experimentLogic({ experimentId }))\n\n    const _featureFlagLogic = featureFlagLogic({ id: experiment.feature_flag?.id ?? null } as FeatureFlagLogicProps)\n    const { featureFlag, areVariantRolloutsValid, variantRolloutSum } = useValues(_featureFlagLogic)\n    const { setFeatureFlagFilters, distributeVariantsEqually } = useActions(_featureFlagLogic)\n\n    const handleRolloutPercentageChange = (index: number, value: number | undefined): void => {\n        if (!featureFlag?.filters?.multivariate) {\n            return\n        }\n\n        const numericValue = value || 0\n\n        const updatedVariants = featureFlag.filters.multivariate.variants.map((variant, i) =>\n            i === index ? { ...variant, rollout_percentage: numericValue } : variant\n        )\n\n        setFeatureFlagFilters(\n            {\n                ...featureFlag.filters,\n                multivariate: { ...featureFlag.filters.multivariate, variants: updatedVariants },\n            },\n            null\n        )\n    }\n\n    return (\n        <LemonModal\n            isOpen={isDistributionModalOpen}\n            onClose={closeDistributionModal}\n            width={600}\n            title=\"Change experiment distribution\"\n            footer={\n                <div className=\"flex items-center gap-2\">\n                    <LemonButton type=\"secondary\" onClick={closeDistributionModal}>\n                        Cancel\n                    </LemonButton>\n                    <LemonButton\n                        onClick={() => {\n                            updateDistributionModal(featureFlag)\n                            closeDistributionModal()\n                        }}\n                        type=\"primary\"\n                        loading={experimentLoading}\n                        disabled={!areVariantRolloutsValid}\n                    >\n                        Save\n                    </LemonButton>\n                </div>\n            }\n        >\n            <div className=\"space-y-4\">\n                <LemonBanner type=\"info\">\n                    Adjusting variant distribution may impact the validity of your results. Adjust only if you're aware\n                    of how changes will affect your experiment.\n                </LemonBanner>\n\n                <div>\n                    <div className=\"flex justify-between items-center mb-2\">\n                        <h3 className=\"font-semibold mb-0\">Variant distribution</h3>\n                        <LemonButton\n                            size=\"small\"\n                            onClick={distributeVariantsEqually}\n                            tooltip=\"Redistribute variant rollout percentages equally\"\n                            icon={<IconBalance />}\n                        >\n                            Distribute equally\n                        </LemonButton>\n                    </div>\n\n                    <LemonTable\n                        dataSource={featureFlag?.filters?.multivariate?.variants || []}\n                        columns={[\n                            {\n                                title: 'Variant',\n                                dataIndex: 'key',\n                                render: (value) => <span className=\"font-semibold\">{value}</span>,\n                            },\n                            {\n                                title: 'Rollout Percentage',\n                                dataIndex: 'rollout_percentage',\n                                render: (_, record, index) => (\n                                    <LemonInput\n                                        type=\"number\"\n                                        value={record.rollout_percentage}\n                                        onChange={(value) => handleRolloutPercentageChange(index, value)}\n                                        min={0}\n                                        max={100}\n                                        suffix={<span>%</span>}\n                                    />\n                                ),\n                            },\n                        ]}\n                    />\n\n                    {!areVariantRolloutsValid && (\n                        <p className=\"text-danger mt-2\">\n                            Percentage rollouts must sum to 100 (currently {variantRolloutSum}).\n                        </p>\n                    )}\n                </div>\n                <HoldoutSelector />\n            </div>\n        </LemonModal>\n    )\n}\n\nexport function DistributionTable(): JSX.Element {\n    const { openDistributionModal } = useActions(experimentLogic)\n    const { experimentId, experiment, metricResults } = useValues(experimentLogic)\n    const { reportExperimentReleaseConditionsViewed } = useActions(experimentLogic)\n    const { isDarkModeOn } = useValues(themeLogic)\n\n    const result = metricResults?.[0]\n\n    const onSelectElement = (variant: string): void => {\n        LemonDialog.open({\n            title: 'Select a domain',\n            description: 'Choose the domain on which to preview this experiment variant',\n            content: (\n                <>\n                    <AuthorizedUrlList\n                        query={'?__experiment_id=' + experiment?.id + '&__experiment_variant=' + variant}\n                        experimentId={experiment?.id}\n                        type={AuthorizedUrlListType.WEB_EXPERIMENTS}\n                    />\n                </>\n            ),\n            primaryButton: {\n                children: 'Close',\n                type: 'secondary',\n            },\n        })\n    }\n    const className = experiment?.type === 'web' ? 'w-1/2.5' : 'w-1/3'\n    const columns: LemonTableColumns<MultivariateFlagVariant> = [\n        {\n            className: className,\n            key: 'key',\n            title: 'Variant',\n            render: function Key(_, item): JSX.Element {\n                if (!result || !result.insight) {\n                    return <span className=\"font-semibold\">{item.key}</span>\n                }\n                return <VariantTag experimentId={experimentId} variantKey={item.key} />\n            },\n        },\n        {\n            className: className,\n            key: 'rollout_percentage',\n            title: 'Rollout',\n            render: function Key(_, item): JSX.Element {\n                return <div>{`${item.rollout_percentage}%`}</div>\n            },\n        },\n        {\n            className: className,\n            key: 'variant_screenshot',\n            title: 'Screenshot',\n            render: function Key(_, item): JSX.Element {\n                if (item.key === `holdout-${experiment.holdout?.id}`) {\n                    return <div className=\"h-16\" />\n                }\n                return (\n                    <div className=\"my-2\">\n                        <VariantScreenshot variantKey={item.key} rolloutPercentage={item.rollout_percentage} />\n                    </div>\n                )\n            },\n        },\n    ]\n\n    if (experiment.type === 'web') {\n        columns.push({\n            className: className,\n            key: 'preview_web_experiment',\n            title: 'Preview',\n            render: function Key(_, item): JSX.Element {\n                return (\n                    <div className=\"my-2\">\n                        <LemonButton\n                            size=\"small\"\n                            type=\"secondary\"\n                            onClick={(e) => {\n                                e.preventDefault()\n                                onSelectElement(item.key)\n                            }}\n                            sideIcon={<IconOpenInApp />}\n                        >\n                            Preview variant\n                        </LemonButton>\n                    </div>\n                )\n            },\n        })\n    }\n\n    const holdoutData = experiment.holdout\n        ? [\n              {\n                  key: `holdout-${experiment.holdout.id}`,\n                  rollout_percentage: experiment.holdout.filters[0].rollout_percentage,\n              } as MultivariateFlagVariant,\n          ]\n        : []\n\n    const variantData = (experiment.feature_flag?.filters.multivariate?.variants || []).map((variant) => ({\n        ...variant,\n        rollout_percentage:\n            variant.rollout_percentage * ((100 - (experiment.holdout?.filters[0].rollout_percentage || 0)) / 100),\n    }))\n\n    const tableData = [...variantData, ...holdoutData]\n\n    return (\n        <div>\n            <div className=\"flex\">\n                <div className=\"w-1/2\">\n                    <h2 className=\"font-semibold text-lg\">Distribution</h2>\n                </div>\n\n                <div className=\"w-1/2 flex flex-col justify-end\">\n                    <div className=\"ml-auto mb-2\">\n                        <LemonButton\n                            icon={<IconFlag />}\n                            onClick={() => {\n                                openDistributionModal()\n                                reportExperimentReleaseConditionsViewed(experiment.id)\n                            }}\n                            type=\"secondary\"\n                            size=\"xsmall\"\n                            className=\"font-semibold\"\n                        >\n                            Manage distribution\n                        </LemonButton>\n                    </div>\n                </div>\n            </div>\n            {experiment.holdout && (\n                <LemonBanner type=\"info\" className=\"mb-4\">\n                    This experiment has a holdout group of {experiment.holdout.filters[0].rollout_percentage}%. The\n                    variants are modified to show their relative rollout percentage.\n                </LemonBanner>\n            )}\n            <LemonTable\n                loading={false}\n                columns={columns}\n                dataSource={tableData}\n                rowClassName={(item) =>\n                    item.key === `holdout-${experiment.holdout?.id}`\n                        ? isDarkModeOn\n                            ? 'bg-fill-primary'\n                            : 'bg-mid'\n                        : ''\n                }\n            />\n        </div>\n    )\n}\n", "import { IconInfo } from '@posthog/icons'\nimport { LemonSelect, Tooltip } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\n\nimport { experimentLogic } from '../experimentLogic'\n\nexport function HoldoutSelector(): JSX.Element {\n    const { experiment, holdouts, isExperimentRunning } = useValues(experimentLogic)\n    const { setExperiment, reportExperimentHoldoutAssigned } = useActions(experimentLogic)\n\n    const holdoutOptions = holdouts.map((holdout) => ({\n        value: holdout.id,\n        label: holdout.name,\n    }))\n    holdoutOptions.unshift({ value: null, label: 'No holdout' })\n\n    return (\n        <div className=\"mt-3\">\n            <div className=\"inline-flex space-x-1\">\n                <h4 className=\"font-semibold mb-0\">Holdout group</h4>\n                <Tooltip title=\"Exclude a stable group of users from the experiment. This cannot be changed once the experiment is launched.\">\n                    <IconInfo className=\"text-secondary text-base\" />\n                </Tooltip>\n            </div>\n            <div className=\"mt-1\">\n                <LemonSelect\n                    disabledReason={\n                        isExperimentRunning &&\n                        !experiment.end_date &&\n                        'The holdout group cannot be changed once the experiment is launched.'\n                    }\n                    size=\"xsmall\"\n                    options={holdoutOptions}\n                    value={experiment.holdout_id || null}\n                    onChange={(value) => {\n                        setExperiment({\n                            ...experiment,\n                            holdout_id: value,\n                        })\n                        reportExperimentHoldoutAssigned({ experimentId: experiment.id, holdoutId: value })\n                    }}\n                    data-attr=\"experiment-holdout-selector\"\n                />\n            </div>\n        </div>\n    )\n}\n", "import { IconX } from '@posthog/icons'\nimport { LemonButton, LemonDivider, LemonFileInput, LemonModal, LemonSkeleton, lemonToast } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { useUploadFiles } from 'lib/hooks/useUploadFiles'\nimport { useState } from 'react'\n\nimport { experimentLogic } from '../experimentLogic'\nimport { VariantTag } from './components'\n\nexport function VariantScreenshot({\n    variantKey,\n    rolloutPercentage,\n}: {\n    variantKey: string\n    rolloutPercentage: number\n}): JSX.Element {\n    const { experiment } = useValues(experimentLogic)\n    const { updateExperimentVariantImages, reportExperimentVariantScreenshotUploaded } = useActions(experimentLogic)\n\n    const getInitialMediaIds = (): string[] => {\n        const variantImages = experiment.parameters?.variant_screenshot_media_ids?.[variantKey]\n        if (!variantImages) {\n            return []\n        }\n\n        return Array.isArray(variantImages) ? variantImages : [variantImages]\n    }\n\n    const [mediaIds, setMediaIds] = useState<string[]>(getInitialMediaIds())\n    const [loadingImages, setLoadingImages] = useState<Record<string, boolean>>({})\n    const [selectedImageIndex, setSelectedImageIndex] = useState<number | null>(null)\n\n    const { setFilesToUpload, filesToUpload, uploading } = useUploadFiles({\n        onUpload: (_, __, id) => {\n            if (id && mediaIds.length < 5) {\n                const newMediaIds = [...mediaIds, id]\n                setMediaIds(newMediaIds)\n\n                const updatedVariantImages = {\n                    ...experiment.parameters?.variant_screenshot_media_ids,\n                    [variantKey]: newMediaIds,\n                }\n\n                updateExperimentVariantImages(updatedVariantImages)\n                reportExperimentVariantScreenshotUploaded(experiment.id)\n            } else if (mediaIds.length >= 5) {\n                lemonToast.error('Maximum of 5 images allowed')\n            }\n        },\n        onError: (detail) => {\n            lemonToast.error(`Error uploading image: ${detail}`)\n        },\n    })\n\n    const handleImageLoad = (mediaId: string): void => {\n        setLoadingImages((prev) => ({ ...prev, [mediaId]: false }))\n    }\n\n    const handleImageError = (mediaId: string): void => {\n        setLoadingImages((prev) => ({ ...prev, [mediaId]: false }))\n    }\n\n    const handleDelete = (indexToDelete: number): void => {\n        const newMediaIds = mediaIds.filter((_, index) => index !== indexToDelete)\n        setMediaIds(newMediaIds)\n\n        const updatedVariantImages = {\n            ...experiment.parameters?.variant_screenshot_media_ids,\n            [variantKey]: newMediaIds,\n        }\n\n        updateExperimentVariantImages(updatedVariantImages)\n    }\n\n    const getThumbnailWidth = (): string => {\n        const totalItems = mediaIds.length < 5 ? mediaIds.length + 1 : mediaIds.length\n        switch (totalItems) {\n            case 1:\n                return 'w-20'\n            case 2:\n                return 'w-20'\n            case 3:\n                return 'w-16'\n            case 4:\n                return 'w-14'\n            case 5:\n                return 'w-12'\n            default:\n                return 'w-20'\n        }\n    }\n\n    const widthClass = getThumbnailWidth()\n\n    return (\n        <div className=\"space-y-4\">\n            <div className=\"flex gap-4 items-start\">\n                {mediaIds.map((mediaId, index) => (\n                    <div key={mediaId} className=\"relative\">\n                        <div className=\"text-secondary inline-flex flow-row items-center gap-1 cursor-pointer\">\n                            <div onClick={() => setSelectedImageIndex(index)} className=\"cursor-zoom-in relative\">\n                                <div\n                                    className={`relative flex overflow-hidden select-none ${widthClass} h-16 rounded before:absolute before:inset-0 before:border before:rounded`}\n                                >\n                                    {loadingImages[mediaId] && <LemonSkeleton className=\"absolute inset-0\" />}\n                                    <img\n                                        className=\"w-full h-full object-cover\"\n                                        src={mediaId.startsWith('data:') ? mediaId : `/uploaded_media/${mediaId}`}\n                                        onError={() => handleImageError(mediaId)}\n                                        onLoad={() => handleImageLoad(mediaId)}\n                                    />\n                                </div>\n                                <div className=\"absolute -inset-2 group\">\n                                    <LemonButton\n                                        icon={<IconX />}\n                                        onClick={(e) => {\n                                            e.stopPropagation()\n                                            handleDelete(index)\n                                        }}\n                                        size=\"small\"\n                                        tooltip=\"Remove\"\n                                        tooltipPlacement=\"right\"\n                                        noPadding\n                                        className=\"group-hover:flex hidden absolute right-0 top-0\"\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                ))}\n\n                {mediaIds.length < 5 && (\n                    <div className={`relative ${widthClass} h-16`}>\n                        <LemonFileInput\n                            accept=\"image/*\"\n                            multiple={false}\n                            onChange={setFilesToUpload}\n                            loading={uploading}\n                            value={filesToUpload}\n                            callToAction={\n                                <div className=\"flex items-center justify-center w-full h-16 border border-dashed rounded cursor-pointer hover:border-accent-primary\">\n                                    <span className=\"text-2xl text-secondary\">+</span>\n                                </div>\n                            }\n                        />\n                    </div>\n                )}\n            </div>\n\n            <LemonModal\n                isOpen={selectedImageIndex !== null}\n                onClose={() => setSelectedImageIndex(null)}\n                title={\n                    <div className=\"flex items-center gap-2\">\n                        <span>Screenshot {selectedImageIndex !== null ? selectedImageIndex + 1 : ''}</span>\n                        <LemonDivider className=\"my-0 mx-1\" vertical />\n                        <VariantTag experimentId={experiment.id} variantKey={variantKey} />\n                        {rolloutPercentage !== undefined && (\n                            <span className=\"text-secondary text-sm\">({rolloutPercentage}% rollout)</span>\n                        )}\n                    </div>\n                }\n            >\n                {selectedImageIndex !== null && mediaIds[selectedImageIndex] && (\n                    <img\n                        src={\n                            mediaIds[selectedImageIndex]?.startsWith('data:')\n                                ? mediaIds[selectedImageIndex]\n                                : `/uploaded_media/${mediaIds[selectedImageIndex]}`\n                        }\n                        alt={`Screenshot ${selectedImageIndex + 1}: ${variantKey}`}\n                        className=\"max-w-full max-h-[80vh] overflow-auto\"\n                    />\n                )}\n            </LemonModal>\n        </div>\n    )\n}\n\nexport default VariantScreenshot\n", "import { IconArchive, IconInfo } from '@posthog/icons'\nimport { LemonTable, Spinner, Tooltip } from '@posthog/lemon-ui'\nimport { Chart, ChartConfiguration } from 'chart.js/auto'\nimport { useValues } from 'kea'\nimport { humanFriendlyNumber } from 'lib/utils'\nimport { useEffect } from 'react'\n\nimport { experimentLogic } from '../experimentLogic'\nimport { VariantTag } from './components'\n\nexport function Exposures(): JSX.Element {\n    const { experimentId, exposures, exposuresLoading } = useValues(experimentLogic)\n\n    useEffect(() => {\n        if (!exposures || !exposures.timeseries.length) {\n            return\n        }\n\n        const ctx = document.getElementById('exposuresChart') as HTMLCanvasElement\n        if (!ctx) {\n            console.error('Canvas element not found')\n            return\n        }\n\n        const existingChart = Chart.getChart(ctx)\n        if (existingChart) {\n            existingChart.destroy()\n        }\n\n        const data = exposures.timeseries\n\n        const config: ChartConfiguration = {\n            type: 'line',\n            data: {\n                labels: data[0].days,\n                datasets: data.map((series: Record<string, any>) => ({\n                    label: series.variant,\n                    data: series.exposure_counts,\n                    borderColor: 'rgb(17 17 17 / 60%)',\n                    backgroundColor: 'rgb(17 17 17 / 40%)',\n                    fill: true,\n                    tension: 0.4,\n                    stack: 'stack1',\n                    borderWidth: 2,\n                    pointRadius: 0,\n                })),\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                interaction: {\n                    intersect: false,\n                    mode: 'nearest',\n                    axis: 'x',\n                },\n                scales: {\n                    y: {\n                        stacked: true,\n                        beginAtZero: true,\n                        grid: {\n                            display: true,\n                        },\n                    },\n                },\n                plugins: {\n                    legend: {\n                        display: false,\n                        labels: {\n                            boxWidth: 4,\n                            boxPadding: 20,\n                            pointStyle: 'dash',\n                        },\n                    },\n                    // @ts-expect-error\n                    crosshair: false,\n                },\n            },\n        }\n\n        new Chart(ctx, config)\n    }, [exposures])\n\n    return (\n        <div>\n            <div className=\"flex items-center space-x-2 mb-2\">\n                <h2 className=\"mb-0 font-semibold text-lg leading-6\">Exposures</h2>\n                <Tooltip title=\"Shows the daily cumulative count of unique users exposed to each variant throughout the experiment duration.\">\n                    <IconInfo className=\"text-secondary text-lg\" />\n                </Tooltip>\n            </div>\n            {exposuresLoading ? (\n                <div className=\"h-[200px] bg-white rounded border flex items-center justify-center\">\n                    <Spinner className=\"text-5xl\" />\n                </div>\n            ) : !exposures.timeseries.length ? (\n                <div className=\"h-[200px] bg-white rounded border flex items-center justify-center\">\n                    <div className=\"text-center\">\n                        <IconArchive className=\"text-3xl mb-2 text-tertiary\" />\n                        <h2 className=\"text-lg leading-tight\">No exposures yet</h2>\n                        <p className=\"text-sm text-center text-balance text-tertiary mb-0\">\n                            Exposures will appear here once the first participant has been exposed.\n                        </p>\n                    </div>\n                </div>\n            ) : (\n                <div className=\"flex gap-2\">\n                    <div className=\"relative h-[200px] border rounded bg-white p-4 w-2/3\">\n                        <canvas id=\"exposuresChart\" />\n                    </div>\n                    <LemonTable\n                        dataSource={exposures?.timeseries || []}\n                        className=\"w-1/3 h-[200px]\"\n                        columns={[\n                            {\n                                title: 'Variant',\n                                key: 'variant',\n                                render: function Variant(_, series) {\n                                    return <VariantTag experimentId={experimentId} variantKey={series.variant} />\n                                },\n                            },\n                            {\n                                title: 'Exposures',\n                                key: 'exposures',\n                                render: function Exposures(_, series) {\n                                    return humanFriendlyNumber(exposures?.total_exposures[series.variant])\n                                },\n                            },\n                            {\n                                title: '%',\n                                key: 'percentage',\n                                render: function Percentage(_, series) {\n                                    const total = exposures?.total_exposures.test + exposures?.total_exposures.control\n                                    return (\n                                        <span className=\"font-semibold\">\n                                            {((exposures?.total_exposures[series.variant] / total) * 100).toFixed(1)}%\n                                        </span>\n                                    )\n                                },\n                            },\n                        ]}\n                    />\n                </div>\n            )}\n        </div>\n    )\n}\n", "import { IconFlag } from '@posthog/icons'\nimport { LemonBanner, LemonButton, LemonModal, LemonTable, LemonTableColumns, LemonTag } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { featureFlagLogic, FeatureFlagLogicProps } from 'scenes/feature-flags/featureFlagLogic'\nimport { FeatureFlagReleaseConditions } from 'scenes/feature-flags/FeatureFlagReleaseConditions'\n\nimport { groupsModel } from '~/models/groupsModel'\nimport { Experiment, FeatureFlagGroupType } from '~/types'\n\nimport { experimentLogic } from '../experimentLogic'\n\nexport function ReleaseConditionsModal({ experimentId }: { experimentId: Experiment['id'] }): JSX.Element {\n    const { experiment, isReleaseConditionsModalOpen } = useValues(experimentLogic({ experimentId }))\n    const { closeReleaseConditionsModal } = useActions(experimentLogic({ experimentId }))\n\n    const _featureFlagLogic = featureFlagLogic({ id: experiment.feature_flag?.id ?? null } as FeatureFlagLogicProps)\n    const { featureFlag, nonEmptyVariants } = useValues(_featureFlagLogic)\n    const { setFeatureFlagFilters, saveSidebarExperimentFeatureFlag } = useActions(_featureFlagLogic)\n\n    return (\n        <LemonModal\n            isOpen={isReleaseConditionsModalOpen}\n            onClose={closeReleaseConditionsModal}\n            width={600}\n            title=\"Change release conditions\"\n            footer={\n                <div className=\"flex items-center gap-2\">\n                    <LemonButton type=\"secondary\" onClick={closeReleaseConditionsModal}>\n                        Cancel\n                    </LemonButton>\n                    <LemonButton\n                        onClick={() => {\n                            saveSidebarExperimentFeatureFlag(featureFlag)\n                            closeReleaseConditionsModal()\n                        }}\n                        type=\"primary\"\n                    >\n                        Save\n                    </LemonButton>\n                </div>\n            }\n        >\n            <div className=\"space-y-4\">\n                <LemonBanner type=\"info\">\n                    Adjusting user targeting may impact the validity of your results. Adjust only if you're aware of how\n                    changes will affect your experiment.\n                </LemonBanner>\n\n                <FeatureFlagReleaseConditions\n                    id={`${experiment.feature_flag?.id}`}\n                    filters={featureFlag?.filters ?? []}\n                    onChange={setFeatureFlagFilters}\n                    nonEmptyFeatureFlagVariants={nonEmptyVariants}\n                />\n            </div>\n        </LemonModal>\n    )\n}\n\nexport function ReleaseConditionsTable(): JSX.Element {\n    const { experiment } = useValues(experimentLogic)\n    const { reportExperimentReleaseConditionsViewed, openReleaseConditionsModal } = useActions(experimentLogic)\n    const { aggregationLabel } = useValues(groupsModel)\n\n    const columns: LemonTableColumns<FeatureFlagGroupType> = [\n        {\n            key: 'key',\n            title: '',\n            render: function Key(_, _item, index): JSX.Element {\n                return <div className=\"font-semibold\">{`Set ${index + 1}`}</div>\n            },\n        },\n        {\n            key: 'rollout_percentage',\n            title: 'Rollout',\n            render: function Key(_, item): JSX.Element {\n                const aggregationTargetName =\n                    experiment.filters.aggregation_group_type_index != null\n                        ? aggregationLabel(experiment.filters.aggregation_group_type_index).plural\n                        : 'users'\n\n                const releaseText = `${item.rollout_percentage}% of ${aggregationTargetName}`\n\n                return (\n                    <div>\n                        {releaseText.startsWith('100% of') ? (\n                            <LemonTag type=\"highlight\">{releaseText}</LemonTag>\n                        ) : (\n                            releaseText\n                        )}\n                    </div>\n                )\n            },\n        },\n        {\n            key: 'variant',\n            title: 'Override',\n            render: function Key(_, item): JSX.Element {\n                return <div>{item.variant || '--'}</div>\n            },\n        },\n    ]\n\n    return (\n        <div>\n            <div className=\"flex\">\n                <div className=\"w-1/2\">\n                    <h2 className=\"font-semibold text-lg\">Release conditions</h2>\n                </div>\n\n                <div className=\"w-1/2 flex flex-col justify-end\">\n                    <div className=\"ml-auto mb-2\">\n                        <LemonButton\n                            icon={<IconFlag />}\n                            onClick={() => {\n                                openReleaseConditionsModal()\n                                reportExperimentReleaseConditionsViewed(experiment.id)\n                            }}\n                            type=\"secondary\"\n                            size=\"xsmall\"\n                            className=\"font-semibold\"\n                        >\n                            Manage release conditions\n                        </LemonButton>\n                    </div>\n                </div>\n            </div>\n            <LemonTable loading={false} columns={columns} dataSource={experiment.feature_flag?.filters.groups || []} />\n        </div>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_react", "import_jsx_runtime", "ExperimentFormFields", "experiment", "groupTypes", "aggregationLabel", "hasPrimaryMetricSet", "validExistingFeatureFlag", "experimentLogic", "addVariant", "removeExperimentGroup", "setExperiment", "createExperiment", "setExperimentType", "validateFeatureFlag", "webExperimentsAvailable", "unavailableFeatureFlagKeys", "experimentsLogic", "groupsAccessStatus", "groupsAccessLogic", "reportExperimentFeatureFlagModalOpened", "reportExperimentFeatureFlagSelected", "eventUsageLogic", "showFeatureFlagSelector", "setShowFeatureFlagSelector", "LemonBanner", "LemonField", "LemonInput", "LemonButton", "IconToggle", "generateFeatureFlagKey", "IconSparkles", "LemonTextArea", "SelectExistingFeatureFlagModal", "key", "LemonDivider", "LemonRadio", "type", "rawGroupTypeIndex", "groupTypeIndex", "groupType", "capitalizeFirstLetter", "Link", "urls", "IconOpenInNew", "MAX_EXPERIMENT_VARIANTS", "ExperimentVariantNumber", "_", "index", "Tooltip", "IconTrash", "IconPlusSmall", "ExperimentForm", "props", "experimentLogic", "ExperimentFormFields", "generateFeatureFlagKey", "name", "unavailableFeatureFlagKeys", "baseKey", "key", "counter", "SelectExistingFeatureFlagModal", "isOpen", "onClose", "onSelect", "featureFlags", "experimentsLogic", "LemonModal", "LemonTable", "a", "b", "flag", "Link", "urls", "IconOpenInNew", "_", "disabledReason", "featureFlagEligibleForExperiment", "error", "LemonButton", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "WebExperimentImplementationDetails", "experiment", "LemonButton", "LemonDialog", "AuthorizedUrlList", "IconOpenInApp", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "ExperimentMetricModal", "experimentId", "isSecondary", "experiment", "experimentLoading", "isPrimaryMetricModalOpen", "isSecondaryMetricModalOpen", "editingPrimaryMetricIndex", "editingSecondaryMetricIndex", "experimentLogic", "setMetric", "updateExperimentGoal", "setExperiment", "closePrimaryMetricModal", "closeSecondaryMetricModal", "restoreUnmodifiedExperiment", "metricIdx", "metricsField", "metrics", "metric", "onClose", "LemonModal", "LemonButton", "LemonDialog", "newMetrics", "_", "idx", "LemonLabel", "LemonInput", "newName", "ExperimentMetricForm", "newMetric", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "FunnelsMetricForm", "isSecondary", "currentTeam", "teamLogic", "experiment", "isExperimentRunning", "editingPrimaryMetricIndex", "editingSecondaryMetricIndex", "experimentLogic", "setFunnelsMetric", "hasFilters", "metrics", "metricIdx", "currentMetric", "actionFilterProps", "commonActionFilterProps", "LemonLabel", "LemonInput", "newName", "ActionFilter", "queryNodeToFilter", "actions", "events", "data_warehouse", "series", "actionsAndEventsToSeries", "FunnelAggregationSelect", "getHogQLValue", "value", "FunnelConversionWindowFilter", "funnelWindowInterval", "funnelWindowIntervalUnit", "FunnelAttributionSelect", "breakdownAttributionType", "breakdownAttributionValue", "TestAccountFilterSwitch", "val", "checked", "LemonBanner", "EXPERIMENT_DEFAULT_DURATION", "Query", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "TrendsMetricForm", "isSecondary", "experiment", "isExperimentRunning", "editingPrimaryMetricIndex", "editingSecondaryMetricIndex", "experimentLogic", "setTrendsMetric", "setTrendsExposureMetric", "setExperiment", "currentTeam", "teamLogic", "hasFilters", "activeTab", "setActiveTab", "metrics", "metricIdx", "currentMetric", "isDataWarehouseMetric", "LemonTabs", "newKey", "LemonLabel", "LemonInput", "newName", "ActionFilter", "queryNodeToFilter", "actions", "events", "data_warehouse", "series", "actionsAndEventsToSeries", "metric", "idx", "LEGACY_EXPERIMENT_ALLOWED_MATH_TYPES", "commonActionFilterProps", "TestAccountFilterSwitch", "checked", "LemonBanner", "EXPERIMENT_DEFAULT_DURATION", "Query", "LemonButton", "IconCheckCircle", "LemonTag", "dayjs", "val", "import_jsx_runtime", "LegacyMetricModal", "experimentId", "isSecondary", "experiment", "experimentLoading", "getMetricType", "isPrimaryMetricModalOpen", "isSecondaryMetricModalOpen", "editingPrimaryMetricIndex", "editingSecondaryMetricIndex", "experimentLogic", "updateExperimentGoal", "setExperiment", "closePrimaryMetricModal", "closeSecondaryMetricModal", "restoreUnmodifiedExperiment", "metricIdx", "metricsField", "metrics", "metric", "metricType", "funnelStepsLength", "onClose", "LemonModal", "LemonButton", "LemonDialog", "newMetrics", "_", "idx", "LemonSelect", "newMetricType", "getDefaultTrendsMetric", "getDefaultFunnelsMetric", "TrendsMetricForm", "FunnelsMetricForm", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "MetricSourceModal", "experimentId", "isSecondary", "experiment", "isPrimaryMetricSourceModalOpen", "isSecondaryMetricSourceModalOpen", "shouldUseExperimentMetrics", "experimentLogic", "setExperiment", "closePrimaryMetricSourceModal", "closeSecondaryMetricSourceModal", "openPrimaryMetricModal", "openSecondaryMetricModal", "openPrimarySharedMetricModal", "openSecondarySharedMetricModal", "metricsField", "isOpen", "closeCurrentModal", "openMetricModal", "openSharedMetricModal", "LemonModal", "defaultMetric", "getDefaultBinomialMetric", "getDefaultFunnelsMetric", "newMetrics", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "SharedMetricModal", "experimentId", "isSecondary", "experiment", "compatibleSharedMetrics", "isPrimarySharedMetricModalOpen", "isSecondarySharedMetricModalOpen", "editingSharedMetricId", "primaryMetricsLengthWithSharedMetrics", "secondaryMetricsLengthWithSharedMetrics", "experimentLogic", "closePrimarySharedMetricModal", "closeSecondarySharedMetricModal", "addSharedMetricsToExperiment", "removeSharedMetricFromExperiment", "restoreUnmodifiedExperiment", "selectedMetricIds", "setSelectedMetricIds", "mode", "hasAvailableFeature", "userLogic", "isOpen", "onClose", "addSharedMetricDisabledReason", "availableSharedMetrics", "metric", "savedMetric", "availableTags", "LemonModal", "LemonButton", "LemonBanner", "LemonLabel", "tag", "index", "LemonTable", "_", "e", "id", "ObjectTags", "urls", "m", "Link", "IconOpenInNew", "MetricDisplayTrends", "MetricDisplayFunnels", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "WinningVariantText", "result", "experimentId", "getIndexForVariant", "getHighestProbabilityVariant", "experimentLogic", "highestProbabilityVariant", "index", "probability", "VariantTag", "SignificanceText", "metricIndex", "isSecondary", "isPrimaryMetricSignificant", "isSecondaryMetricSignificant", "Overview", "metricResults", "init_dirname", "init_buffer", "init_process", "import_kea", "import_utils", "import_jsx_runtime", "ResultErrorCode", "NoResultEmptyState", "error", "metric", "experiment", "variants", "getMetricType", "experimentLogic", "statusCode", "hasDiagnostics", "ChecklistItem", "errorCode", "value", "failureText", "successText", "metricType", "hasMissingExposure", "requiredEvent", "query", "variant", "IconCheck", "IconX", "Tooltip", "Link", "urls", "IconOpenInNew", "checklistItems", "import_jsx_runtime", "getMetricTag", "metric", "getDefaultMetricTitle", "formatTickValue", "value", "absValue", "decimals", "getMetricTitle", "metricType", "series", "firstStep", "lastStep", "IconFunnels", "IconArrowRight", "generateViolinPath", "x1", "x2", "y", "height", "deltaX", "points", "maxWidth", "i", "t", "z", "width", "point", "DeltaChart", "isSecondary", "result", "error", "variants", "metricIndex", "isFirstMetric", "tickValues", "chartBound", "credibleIntervalForVariant", "conversionRateForVariant", "experimentId", "experiment", "countDataForVariant", "exposureCountDataForVariant", "metricResultsLoading", "secondaryMetricResultsLoading", "featureFlags", "primaryMetricsLengthWithSharedMetrics", "experimentLogic", "openPrimaryMetricModal", "openSecondaryMetricModal", "openPrimarySharedMetricModal", "openSecondarySharedMetricModal", "openVariantDeltaTimeseriesModal", "tooltipData", "setTooltipData", "emptyStateTooltipVisible", "setEmptyStateTooltipVisible", "tooltipPosition", "setTooltipPosition", "isModalOpen", "setIsModalOpen", "getScaleAddition", "variantCount", "resultsLoading", "BAR_HEIGHT", "BAR_PADDING", "TICK_PANEL_HEIGHT", "VIEW_BOX_WIDTH", "HORIZONTAL_PADDING", "CONVERSION_RATE_RECT_WIDTH", "TICK_FONT_SIZE", "CHART_MAX_WIDTH", "isDarkModeOn", "themeLogic", "COLORS", "chartHeight", "valueToX", "percentage", "metricTitlePanelWidth", "ticksSvgRef", "chartSvgRef", "ticksSvgHeight", "setTicksSvgHeight", "chartSvgHeight", "setChartSvgHeight", "ticksSvg", "chartSvg", "resizeObserver", "entries", "entry", "LemonButton", "IconPencil", "LemonTag", "index", "x", "SignificanceHighlight", "IconGraph", "variant", "interval", "lower", "upper", "delta", "controlVariant", "v", "variantData", "controlMean", "variantRate", "controlRate", "e", "rect", "FEATURE_FLAGS", "VariantTag", "IconActivity", "IconClock", "LemonProgress", "count", "humanFriendlyNumber", "exposure", "NoResultEmptyState", "LemonModal", "ExploreButton", "LemonBanner", "WinningVariantText", "SignificanceText", "SummaryTable", "ResultsQuery", "className", "isPrimaryMetricSignificant", "isSecondaryMetricSignificant", "significanceDetails", "isSignificant", "inner", "IconTrending", "IconMinus", "details", "Tooltip", "clsx", "import_jsx_runtime", "getNiceTickValues", "maxAbsValue", "magnitude", "power", "baseUnit", "normalizedMax", "unitsNeeded", "decimalPlaces", "ticks", "i", "tickValue", "AddPrimaryMetric", "primaryMetricsLengthWithSharedMetrics", "experimentLogic", "openPrimaryMetricSourceModal", "LemonButton", "IconPlus", "AddSecondaryMetric", "secondaryMetricsLengthWithSharedMetrics", "openSecondaryMetricSourceModal", "MetricsView", "isSecondary", "experiment", "getMetricType", "metricResults", "secondaryMetricResults", "primaryMetricsResultErrors", "secondaryMetricsResultErrors", "credibleIntervalForVariant", "variants", "results", "errors", "hasSomeResults", "result", "metrics", "sharedMetrics", "sharedMetric", "metric", "metricIndex", "variant", "metricType", "interval", "padding", "chartBound", "commonTickValues", "Tooltip", "IconInfo", "LemonDivider", "isFirstMetric", "DeltaChart", "IconAreaChart", "init_dirname", "init_buffer", "init_process", "init_dirname", "init_buffer", "init_process", "Chart", "registerables", "import_kea", "import_react", "import_jsx_runtime", "DELTA", "UPPER_BOUND", "LOWER_BOUND", "VariantDeltaTimeseries", "closeVariantDeltaTimeseriesModal", "experimentLogic", "isVariantDeltaTimeseriesModalOpen", "ctx", "existingChart", "Chart", "config", "value", "LemonModal", "LemonButton", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "FunnelCalculation", "experimentId", "minimumDetectableEffect", "experiment", "conversionMetrics", "minimumSampleSizePerVariant", "recommendedRunningTime", "variants", "experimentLogic", "funnelConversionRate", "conversionRate", "funnelSampleSize", "baselineConversionRate", "minimumAcceptableConversionRate", "recommendedSampleSize", "humanFriendlyNumber", "TrendCalculation", "trendResults", "recommendedExposureForCountData", "trendCount", "trendExposure", "baselineCount", "minimumAcceptableCount", "DataCollectionCalculator", "getMetricType", "firstPrimaryMetric", "setExperiment", "metricType", "insightLogicInstance", "insightLogic", "insightProps", "query", "sliderMaxValue", "Tooltip", "Link", "IconInfo", "LemonSlider", "value", "LemonInput", "LemonBanner", "Query", "import_jsx_runtime", "DataCollection", "experimentId", "experiment", "getMetricType", "funnelResultsPersonsTotal", "actualRunningTime", "minimumDetectableEffect", "firstPrimaryMetric", "experimentLogic", "openExperimentCollectionGoalModal", "metricType", "recommendedRunningTime", "recommendedSampleSize", "experimentProgressPercent", "hasHighRunningTime", "GoalTooltip", "Tooltip", "IconInfo", "LemonProgress", "formatUnitByQuantity", "humanFriendlyNumber", "LemonDivider", "Link", "LemonButton", "DataCollectionGoalModal", "isExperimentCollectionGoalModalOpen", "trendMetricInsightLoading", "funnelMetricInsightLoading", "closeExperimentCollectionGoalModal", "updateExperimentCollectionGoal", "restoreUnmodifiedExperiment", "isInsightLoading", "LemonModal", "LoadingBar", "EllipsisAnimation", "DataCollectionCalculator", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "HoldoutSelector", "experiment", "holdouts", "isExperimentRunning", "experimentLogic", "setExperiment", "reportExperimentHoldoutAssigned", "holdoutOptions", "holdout", "Tooltip", "IconInfo", "LemonSelect", "value", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "VariantScreenshot", "variantKey", "rolloutPercentage", "experiment", "experimentLogic", "updateExperimentVariantImages", "reportExperimentVariantScreenshotUploaded", "getInitialMediaIds", "variantImages", "mediaIds", "setMediaIds", "loadingImages", "setLoadingImages", "selectedImageIndex", "setSelectedImageIndex", "setFilesToUpload", "filesToUpload", "uploading", "useUploadFiles", "_", "__", "id", "newMediaIds", "updatedVariantImages", "lemonToast", "detail", "handleImageLoad", "mediaId", "prev", "handleImageError", "handleDelete", "indexToDelete", "index", "widthClass", "LemonSkeleton", "LemonButton", "IconX", "e", "LemonFileInput", "LemonModal", "LemonDivider", "VariantTag", "import_jsx_runtime", "DistributionModal", "experimentId", "experiment", "experimentLoading", "isDistributionModalOpen", "experimentLogic", "closeDistributionModal", "updateDistributionModal", "_featureFlagLogic", "featureFlagLogic", "featureFlag", "areVariantRolloutsValid", "variantRolloutSum", "setFeatureFlagFilters", "distributeVariantsEqually", "handleRolloutPercentageChange", "index", "value", "numericValue", "updatedVariants", "variant", "i", "LemonModal", "LemonButton", "LemonBanner", "IconBalance", "LemonTable", "_", "record", "LemonInput", "HoldoutSelector", "DistributionTable", "openDistributionModal", "metricResults", "reportExperimentReleaseConditionsViewed", "isDarkModeOn", "themeLogic", "result", "onSelectElement", "LemonDialog", "AuthorizedUrlList", "className", "columns", "item", "VariantTag", "VariantScreenshot", "e", "IconOpenInApp", "holdoutData", "tableData", "IconFlag", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "Exposures", "experimentId", "exposures", "exposuresLoading", "experimentLogic", "ctx", "existingChart", "Chart", "data", "config", "series", "Tooltip", "IconInfo", "Spinner", "LemonTable", "_", "VariantTag", "humanFriendlyNumber", "total", "IconArchive", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "ReleaseConditionsModal", "experimentId", "experiment", "isReleaseConditionsModalOpen", "experimentLogic", "closeReleaseConditionsModal", "_featureFlagLogic", "featureFlagLogic", "featureFlag", "nonEmptyVariants", "setFeatureFlagFilters", "saveSidebarExperimentFeatureFlag", "LemonModal", "LemonButton", "LemonBanner", "FeatureFlagReleaseConditions", "ReleaseConditionsTable", "reportExperimentReleaseConditionsViewed", "openReleaseConditionsModal", "aggregationLabel", "groupsModel", "IconFlag", "LemonTable", "_", "_item", "index", "item", "aggregationTargetName", "releaseText", "LemonTag", "import_jsx_runtime", "ResultsTab", "experiment", "metricResults", "firstPrimaryMetric", "primaryMetricsLengthWithSharedMetrics", "metricResultsLoading", "experimentLogic", "hasSomeResults", "result", "hasSinglePrimaryMetric", "WebExperimentImplementationDetails", "ExperimentImplementationDetails", "Overview", "MetricsView", "SummaryTable", "ExploreButton", "ResultsQuery", "VariantsTab", "shouldUseExperimentMetrics", "isExperimentRunning", "Exposures", "ReleaseConditionsTable", "DistributionTable", "ExperimentView", "experimentLoading", "experimentId", "tabKey", "setTabKey", "PageHeaderCustom", "LoadingState", "Info", "DataCollection", "LemonTabs", "key", "MetricSourceModal", "ExperimentMetricModal", "LegacyMetricModal", "SharedMetricModal", "DistributionModal", "ReleaseConditionsModal", "VariantDeltaTimeseries", "import_jsx_runtime", "scene", "Experiment", "experimentLogic", "id", "experimentId", "editingExistingExperiment", "experimentMissing", "NotFound", "ExperimentForm", "ExperimentView"]
}
