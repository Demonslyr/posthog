{
  "version": 3,
  "sources": ["../src/scenes/instance/SystemStatus/index.tsx", "../src/scenes/instance/SystemStatus/InternalMetricsTab.tsx", "../src/scenes/instance/SystemStatus/OverviewTab.tsx", "../src/scenes/instance/SystemStatus/RenderMetricValue.tsx", "../src/scenes/instance/SystemStatus/InstanceConfigTab.tsx", "../src/scenes/instance/SystemStatus/InstanceConfigSaveModal.tsx", "../src/scenes/instance/SystemStatus/RenderMetricValueEdit.tsx", "../src/scenes/instance/SystemStatus/StaffUsersTab.tsx", "../src/scenes/instance/SystemStatus/staffUsersLogic.ts"],
  "sourcesContent": ["import './index.scss'\n\nimport { IconInfo } from '@posthog/icons'\nimport { LemonBanner, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { LemonTab, LemonTabs } from 'lib/lemon-ui/LemonTabs'\nimport { LemonTag } from 'lib/lemon-ui/LemonTag/LemonTag'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { InternalMetricsTab } from 'scenes/instance/SystemStatus/InternalMetricsTab'\nimport { OverviewTab } from 'scenes/instance/SystemStatus/OverviewTab'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { InstanceConfigTab } from './InstanceConfigTab'\nimport { StaffUsersTab } from './StaffUsersTab'\nimport { InstanceStatusTabName, systemStatusLogic } from './systemStatusLogic'\n\nexport const scene: SceneExport = {\n    component: SystemStatus,\n    logic: systemStatusLogic,\n}\n\nexport function SystemStatus(): JSX.Element {\n    const { tab, error } = useValues(systemStatusLogic)\n    const { setTab } = useActions(systemStatusLogic)\n    const { preflight, siteUrlMisconfigured } = useValues(preflightLogic)\n    const { user } = useValues(userLogic)\n\n    let tabs = [\n        {\n            key: 'overview',\n            label: (\n                <Tooltip title=\"System overview is cached for 60 seconds\">\n                    <span>\n                        System overview <IconInfo />\n                    </span>\n                </Tooltip>\n            ),\n            content: <OverviewTab />,\n        },\n    ] as LemonTab<InstanceStatusTabName>[]\n\n    if (user?.is_staff) {\n        tabs = tabs.concat([\n            {\n                key: 'metrics',\n                label: 'Internal metrics',\n                content: <InternalMetricsTab />,\n            },\n            {\n                key: 'settings',\n                label: (\n                    <>\n                        Settings{' '}\n                        <LemonTag type=\"warning\" className=\"ml-1 uppercase\">\n                            Beta\n                        </LemonTag>\n                    </>\n                ),\n                content: <InstanceConfigTab />,\n            },\n            {\n                key: 'staff_users',\n                label: 'Staff Users',\n                content: <StaffUsersTab />,\n            },\n        ])\n    }\n\n    return (\n        <div className=\"system-status-scene\">\n            <PageHeader\n                caption={\n                    <>\n                        Here you can find all the critical runtime details and settings of your PostHog instance. You\n                        have access to this because you're a <b>staff user</b>.{' '}\n                        <Link\n                            target=\"_blank\"\n                            targetBlankIcon\n                            to=\"https://posthog.com/docs/self-host/configure/instance-settings?utm_medium=in-product&utm_campaign=instance_status\"\n                        >\n                            Learn more\n                        </Link>\n                        .\n                    </>\n                }\n            />\n            <div className=\"space-y-2\">\n                {error && (\n                    <LemonBanner type=\"error\">\n                        <div>Something went wrong</div>\n                        <div>{error || 'An unknown error occurred. Please try again or contact us.'}</div>\n                    </LemonBanner>\n                )}\n                {siteUrlMisconfigured && (\n                    <LemonBanner\n                        type=\"warning\"\n                        action={{\n                            children: 'Learn more',\n                            to: 'https://posthog.com/docs/configuring-posthog/environment-variables?utm_medium=in-product&utm_campaign=system-status-site-url-misconfig',\n                        }}\n                    >\n                        Your <code>SITE_URL</code> environment variable seems misconfigured. Your <code>SITE_URL</code>{' '}\n                        is set to{' '}\n                        <b>\n                            <code>{preflight?.site_url}</code>\n                        </b>{' '}\n                        but you're currently browsing this page from{' '}\n                        <b>\n                            <code>{window.location.origin}</code>\n                        </b>\n                        . In order for PostHog to work properly, please set this to the origin where your instance is\n                        hosted.\n                    </LemonBanner>\n                )}\n            </div>\n\n            <LemonTabs activeKey={tab} onChange={setTab} tabs={tabs} />\n        </div>\n    )\n}\n", "import { LemonButton, LemonCheckbox, LemonTable, LemonTableColumns } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { IconRefresh } from 'lib/lemon-ui/icons'\nimport { LemonCollapse } from 'lib/lemon-ui/LemonCollapse'\nimport { useMemo, useState } from 'react'\nimport { systemStatusLogic } from 'scenes/instance/SystemStatus/systemStatusLogic'\n\nimport { QuerySummary } from '~/types'\n\nexport function InternalMetricsTab(): JSX.Element {\n    const { openSections, queries, queriesLoading } = useValues(systemStatusLogic)\n    const { setOpenSections, loadQueries } = useActions(systemStatusLogic)\n\n    const [showIdle, setShowIdle] = useState(false)\n    const postgresQueries = useMemo(\n        () => queries?.postgres_running?.filter(({ state }) => showIdle || state !== 'idle'),\n        [showIdle, queries]\n    )\n\n    const reloadQueries = (e: React.MouseEvent): void => {\n        e.stopPropagation()\n        loadQueries()\n    }\n\n    return (\n        <>\n            <LemonCollapse\n                activeKeys={openSections}\n                className=\"bg-surface-primary\"\n                onChange={(keys) => setOpenSections(keys)}\n                multiple\n                panels={[\n                    {\n                        key: '1',\n                        header: 'PostgreSQL - currently running queries',\n                        content: (\n                            <>\n                                <div className=\"flex mb-4 float-right space-x-2\">\n                                    <LemonCheckbox\n                                        checked={showIdle}\n                                        onChange={setShowIdle}\n                                        label=\"Show idle queries\"\n                                    />\n                                    <LemonButton\n                                        type=\"secondary\"\n                                        size=\"small\"\n                                        icon={<IconRefresh />}\n                                        onClick={reloadQueries}\n                                    >\n                                        Reload Queries\n                                    </LemonButton>\n                                </div>\n                                <QueryTable queries={postgresQueries} loading={queriesLoading} />\n                            </>\n                        ),\n                    },\n                    queries?.clickhouse_running != undefined && {\n                        key: '2',\n                        header: 'Clickhouse - currently running queries',\n                        content: (\n                            <>\n                                <div className=\"flex mb-4 float-right\">\n                                    <LemonButton\n                                        type=\"secondary\"\n                                        size=\"small\"\n                                        icon={<IconRefresh />}\n                                        onClick={reloadQueries}\n                                    >\n                                        Reload Queries\n                                    </LemonButton>\n                                </div>\n                                <QueryTable queries={queries?.clickhouse_running} loading={queriesLoading} />\n                            </>\n                        ),\n                    },\n                    queries?.clickhouse_slow_log != undefined && {\n                        key: '3',\n                        header: 'Clickhouse - slow query log (past 6 hours)',\n                        content: (\n                            <>\n                                <div className=\"flex mb-4 float-right\">\n                                    <LemonButton\n                                        type=\"secondary\"\n                                        size=\"small\"\n                                        icon={<IconRefresh />}\n                                        onClick={reloadQueries}\n                                    >\n                                        Reload Queries\n                                    </LemonButton>\n                                </div>\n                                <QueryTable queries={queries?.clickhouse_slow_log} loading={queriesLoading} />\n                            </>\n                        ),\n                    },\n                ]}\n            />\n        </>\n    )\n}\n\nfunction QueryTable(props: {\n    queries?: QuerySummary[]\n    loading: boolean\n    columnExtra?: Record<string, any>\n}): JSX.Element {\n    const columns: LemonTableColumns<QuerySummary> = [\n        {\n            title: 'duration',\n            dataIndex: 'duration',\n            key: 'duration',\n            sorter: (a, b) => +a.duration - +b.duration,\n        },\n        {\n            title: 'query',\n            dataIndex: 'query',\n            render: function RenderAnalyze(_, item: QuerySummary) {\n                return item.query\n            },\n            key: 'query',\n        },\n    ]\n\n    if (props.queries && props.queries.length > 0) {\n        Object.keys(props.queries[0]).forEach((column) => {\n            if (column !== 'duration' && column !== 'query') {\n                columns.push({ title: column, dataIndex: column, key: column })\n            }\n        })\n    }\n\n    return (\n        <LemonTable\n            dataSource={props.queries || []}\n            columns={columns}\n            loading={props.loading}\n            pagination={{ pageSize: 30, hideOnSinglePage: true }}\n            size=\"small\"\n            nouns={['query', 'queries']}\n        />\n    )\n}\n", "import { LemonTable } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { IconOpenInNew } from 'lib/lemon-ui/icons'\nimport { Link } from 'lib/lemon-ui/Link'\n\nimport { SystemStatusRow, SystemStatusSubrows } from '~/types'\n\nimport { RenderMetricValue } from './RenderMetricValue'\nimport { systemStatusLogic } from './systemStatusLogic'\n\nconst METRIC_KEY_TO_INTERNAL_LINK = {\n    async_migrations_ok: '/instance/async_migrations',\n}\n\nfunction RenderMetric(_: any, systemStatusRow: SystemStatusRow): JSX.Element {\n    return (\n        <span>\n            {systemStatusRow.metric}{' '}\n            {METRIC_KEY_TO_INTERNAL_LINK[systemStatusRow.key] ? (\n                <Link to={METRIC_KEY_TO_INTERNAL_LINK[systemStatusRow.key]}>\n                    <IconOpenInNew style={{ verticalAlign: 'middle' }} />\n                </Link>\n            ) : null}\n        </span>\n    )\n}\n\nexport function OverviewTab(): JSX.Element {\n    const { overview, systemStatusLoading } = useValues(systemStatusLogic)\n\n    return (\n        <LemonTable\n            className=\"system-status-table\"\n            rowKey=\"metric\"\n            dataSource={overview}\n            columns={[\n                {\n                    title: 'Metric',\n                    className: 'metric-column',\n                    render: RenderMetric,\n                },\n                {\n                    title: 'Value',\n                    render: RenderMetricValue,\n                },\n            ]}\n            loading={systemStatusLoading}\n            expandable={{\n                expandedRowRender: function renderExpand(row) {\n                    return row.subrows?.rows.length ? <Subrows {...row.subrows} /> : null\n                },\n                rowExpandable: (row) => !!row.subrows?.rows.length,\n            }}\n        />\n    )\n}\n\nfunction Subrows(props: SystemStatusSubrows): JSX.Element {\n    return (\n        <LemonTable\n            dataSource={props.rows}\n            columns={props.columns.map((title, dataIndex) => ({ title, dataIndex }))}\n            embedded\n        />\n    )\n}\n", "import { IconLock } from '@posthog/icons'\nimport { TZLabel } from 'lib/components/TZLabel'\nimport { LemonTag } from 'lib/lemon-ui/LemonTag/LemonTag'\n\nimport { InstanceSetting, SystemStatusRow } from '~/types'\n\nconst TIMESTAMP_VALUES = new Set(['last_event_ingested_timestamp'])\n\nexport interface MetricValue {\n    key: SystemStatusRow['key']\n    value?: SystemStatusRow['value']\n    value_type?: InstanceSetting['value_type']\n    emptyNullLabel?: string\n    isSecret?: boolean\n}\n\nexport function RenderMetricValue(\n    _: any,\n    { key, value, value_type, emptyNullLabel, isSecret }: MetricValue\n): JSX.Element | string {\n    if (value && isSecret) {\n        return (\n            <LemonTag\n                className=\"uppercase text-secondary bg-mark\"\n                icon={isSecret ? <IconLock className=\"text-warning\" /> : undefined}\n            >\n                Secret\n            </LemonTag>\n        )\n    }\n\n    if (key && TIMESTAMP_VALUES.has(key) && typeof value === 'string') {\n        if (new Date(value).getTime() === new Date('1970-01-01T00:00:00').getTime()) {\n            return 'Never'\n        }\n        return <TZLabel time={value} />\n    }\n\n    if (value_type === 'bool' || typeof value === 'boolean') {\n        return (\n            <LemonTag className=\"uppercase\" type={value ? 'success' : 'danger'}>\n                {value ? 'Yes' : 'No'}\n            </LemonTag>\n        )\n    }\n\n    if (value === null || value === undefined || value === '') {\n        return <LemonTag className=\"uppercase text-secondary\">{emptyNullLabel ?? 'Unknown'}</LemonTag>\n    }\n\n    if (value_type === 'int' || typeof value === 'number') {\n        return value.toLocaleString('en-US')\n    }\n\n    return value.toString()\n}\n", "import { IconWarning } from '@posthog/icons'\nimport { LemonButton, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { useKeyboardHotkeys } from 'lib/hooks/useKeyboardHotkeys'\nimport { IconOpenInNew } from 'lib/lemon-ui/icons'\nimport { LemonTable, LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { pluralize } from 'lib/utils'\nimport { useEffect } from 'react'\nimport { EnvironmentConfigOption, preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\n\nimport { InstanceSetting } from '~/types'\n\nimport { InstanceConfigSaveModal } from './InstanceConfigSaveModal'\nimport { MetricValue, RenderMetricValue } from './RenderMetricValue'\nimport { RenderMetricValueEdit } from './RenderMetricValueEdit'\nimport { ConfigMode, systemStatusLogic } from './systemStatusLogic'\n\nexport function InstanceConfigTab(): JSX.Element {\n    const { configOptions, preflightLoading } = useValues(preflightLogic)\n    const { editableInstanceSettings, instanceSettingsLoading, instanceConfigMode, instanceConfigEditingState } =\n        useValues(systemStatusLogic)\n    const { loadInstanceSettings, setInstanceConfigMode, updateInstanceConfigValue, clearInstanceConfigEditing } =\n        useActions(systemStatusLogic)\n\n    useEffect(() => {\n        loadInstanceSettings()\n    }, [])\n\n    useKeyboardHotkeys({\n        e: {\n            action: () => setInstanceConfigMode(ConfigMode.Edit),\n            disabled: instanceConfigMode !== ConfigMode.View || instanceSettingsLoading,\n        },\n        escape: {\n            action: () => discard(),\n            disabled: instanceConfigMode !== ConfigMode.Edit || instanceSettingsLoading,\n        },\n        enter: {\n            action: () => save(),\n            disabled: instanceConfigMode !== ConfigMode.Edit || instanceSettingsLoading,\n        },\n    })\n\n    const save = (): void => {\n        if (Object.keys(instanceConfigEditingState).length) {\n            setInstanceConfigMode(ConfigMode.Saving)\n        } else {\n            setInstanceConfigMode(ConfigMode.View)\n        }\n    }\n\n    const discard = (): void => {\n        setInstanceConfigMode(ConfigMode.View)\n        clearInstanceConfigEditing()\n    }\n\n    const columns: LemonTableColumns<InstanceSetting> = [\n        {\n            title: 'Key',\n            dataIndex: 'key',\n            render: function render(value) {\n                return <code>{value}</code>\n            },\n        },\n        {\n            title: 'Description',\n            dataIndex: 'description',\n        },\n        {\n            title: 'Value',\n            render: function renderValue(_, record) {\n                const props: MetricValue = {\n                    value: record.value,\n                    key: record.key,\n                    emptyNullLabel: 'Unset',\n                    value_type: record.value_type,\n                    isSecret: record.is_secret,\n                }\n                return instanceConfigMode === ConfigMode.View\n                    ? RenderMetricValue(_, props)\n                    : RenderMetricValueEdit({\n                          ...props,\n                          value: instanceConfigEditingState[record.key] ?? record.value,\n                          onValueChanged: updateInstanceConfigValue,\n                      })\n            },\n        },\n    ]\n\n    const envColumns: LemonTableColumns<EnvironmentConfigOption> = [\n        {\n            key: 'metric',\n            title: 'Metric',\n            dataIndex: 'metric',\n        },\n        {\n            title: 'Value',\n            dataIndex: 'value',\n        },\n    ]\n\n    return (\n        <>\n            <div className=\"flex items-center gap-2 mb-4\">\n                <div className=\"flex-1\">\n                    <h3>Instance configuration</h3>\n                    <div>\n                        Changing these settings will take effect on your entire instance.{' '}\n                        <Link\n                            to=\"https://posthog.com/docs/self-host/configure/instance-settings\"\n                            target=\"_blank\"\n                            targetBlankIcon\n                        >\n                            Learn more\n                        </Link>\n                        .\n                    </div>\n                </div>\n                {instanceConfigMode === ConfigMode.View ? (\n                    <>\n                        <LemonButton\n                            type=\"primary\"\n                            onClick={() => setInstanceConfigMode(ConfigMode.Edit)}\n                            data-attr=\"instance-config-edit-button\"\n                            disabled={instanceSettingsLoading}\n                        >\n                            Edit\n                        </LemonButton>\n                    </>\n                ) : (\n                    <>\n                        {Object.keys(instanceConfigEditingState).length > 0 && (\n                            <span className=\"text-warning-dark flex items-center gap-2\">\n                                <IconWarning className=\"text-xl\" />\n                                <span>\n                                    You have <b>{Object.keys(instanceConfigEditingState).length}</b> unapplied{' '}\n                                    {pluralize(\n                                        Object.keys(instanceConfigEditingState).length,\n                                        'change',\n                                        undefined,\n                                        false\n                                    )}\n                                </span>\n                            </span>\n                        )}\n                        <LemonButton type=\"secondary\" disabled={instanceSettingsLoading} onClick={discard}>\n                            Discard changes\n                        </LemonButton>\n                        <LemonButton type=\"primary\" disabled={instanceSettingsLoading} onClick={save}>\n                            Save\n                        </LemonButton>\n                    </>\n                )}\n            </div>\n\n            <LemonTable\n                dataSource={editableInstanceSettings}\n                columns={columns}\n                loading={instanceSettingsLoading}\n                rowKey=\"key\"\n            />\n\n            <div className=\"my-4\">\n                <h3>Environment configuration</h3>\n                <div>\n                    These settings can only be modified by environment variables.{' '}\n                    <Link to=\"https://posthog.com/docs/self-host/configure/environment-variables\" target=\"_blank\">\n                        Learn more <IconOpenInNew style={{ verticalAlign: 'middle' }} />\n                    </Link>\n                    .\n                </div>\n            </div>\n            <LemonTable dataSource={configOptions} columns={envColumns} loading={preflightLoading} rowKey=\"key\" />\n            <InstanceConfigSaveModal\n                isOpen={instanceConfigMode === ConfigMode.Saving}\n                onClose={() => setInstanceConfigMode(ConfigMode.Edit)}\n            />\n        </>\n    )\n}\n", "import { LemonButton, LemonModal } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { pluralize } from 'lib/utils'\n\nimport { SystemStatusRow } from '~/types'\n\nimport { RenderMetricValue } from './RenderMetricValue'\nimport { systemStatusLogic } from './systemStatusLogic'\n\ninterface ChangeRowInterface extends Pick<SystemStatusRow, 'value'> {\n    oldValue?: boolean | string | number | null\n    metricKey: string\n    isSecret?: boolean\n}\n\nfunction ChangeRow({ metricKey, oldValue, value, isSecret }: ChangeRowInterface): JSX.Element | null {\n    if (value?.toString() === oldValue?.toString()) {\n        return null\n    }\n\n    return (\n        <div className=\"bg-border-light radius p-2\">\n            <div>\n                <code>{metricKey}</code>\n            </div>\n            <div className=\"text-secondary\">\n                Value will be changed\n                {!isSecret && (\n                    <>\n                        {' from '}\n                        <span className=\"font-bold text-text-3000\">\n                            {RenderMetricValue(null, {\n                                key: metricKey,\n                                value: oldValue,\n                                emptyNullLabel: 'Unset',\n                                isSecret,\n                            })}\n                        </span>\n                    </>\n                )}\n                {' to '}\n                <span className=\"font-bold text-text-3000\">\n                    {RenderMetricValue(null, { key: metricKey, value, emptyNullLabel: 'Unset' })}\n                </span>\n                {isSecret && (\n                    <div className=\"text-danger\">This field is secret - you won't see its value once saved</div>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport function InstanceConfigSaveModal({ onClose, isOpen }: { onClose: () => void; isOpen: boolean }): JSX.Element {\n    const { instanceConfigEditingState, editableInstanceSettings, updatedInstanceConfigCount } =\n        useValues(systemStatusLogic)\n    const { saveInstanceConfig } = useActions(systemStatusLogic)\n    const loading = updatedInstanceConfigCount !== null\n\n    const isChangingEnabledEmailSettings =\n        instanceConfigEditingState.EMAIL_ENABLED !== false &&\n        Object.keys(instanceConfigEditingState).find((key) => key.startsWith('EMAIL'))\n    const isEnablingEmail = instanceConfigEditingState.EMAIL_ENABLED === true\n    const changeNoun = Object.keys(instanceConfigEditingState).length === 1 ? 'change' : 'changes'\n\n    return (\n        <LemonModal\n            title={`Confirm ${changeNoun} to instance configuration`}\n            isOpen={isOpen}\n            closable={!loading}\n            onClose={onClose}\n            width={576}\n            footer={\n                <>\n                    <LemonButton\n                        type=\"secondary\"\n                        onClick={onClose}\n                        disabledReason={loading ? 'Saving in progress' : undefined}\n                    >\n                        Cancel\n                    </LemonButton>\n                    <LemonButton type=\"secondary\" status=\"danger\" loading={loading} onClick={saveInstanceConfig}>\n                        Apply {changeNoun}\n                    </LemonButton>\n                </>\n            }\n        >\n            <div className=\"space-y-2\">\n                {isChangingEnabledEmailSettings && (\n                    <LemonBanner type=\"info\">\n                        As you are changing email settings and {isEnablingEmail ? 'enabling email' : 'email is enabled'}\n                        , we'll\u00A0attempt to send a\u00A0test\u00A0email so\u00A0you can verify everything works.\n                    </LemonBanner>\n                )}\n                {Object.keys(instanceConfigEditingState).includes('RECORDINGS_TTL_WEEKS') && (\n                    <LemonBanner type=\"warning\">\n                        <>\n                            Changing your recordings TTL requires ClickHouse to have enough free space to perform the\n                            operation (even when reducing this value). In addition, please mind that removing old\n                            recordings will be removed asynchronously, not immediately.\n                        </>\n                    </LemonBanner>\n                )}\n                {Object.keys(instanceConfigEditingState).includes('RECORDINGS_PERFORMANCE_EVENTS_TTL_WEEKS') && (\n                    <LemonBanner type=\"warning\">\n                        <>\n                            Changing your performance events TTL requires ClickHouse to have enough free space to\n                            perform the operation (even when reducing this value). In addition, please mind that\n                            removing old recordings will be removed asynchronously, not immediately.\n                        </>\n                    </LemonBanner>\n                )}\n                <div>The following {changeNoun} will be immediately applied to your instance.</div>\n                {Object.keys(instanceConfigEditingState).map((key) => (\n                    <ChangeRow\n                        key={key}\n                        metricKey={key}\n                        value={instanceConfigEditingState[key]}\n                        oldValue={editableInstanceSettings.find((record) => record.key === key)?.value}\n                        isSecret={editableInstanceSettings.find((record) => record.key === key)?.is_secret}\n                    />\n                ))}\n                {loading && (\n                    <div className=\"mt-4 text-success\">\n                        <b>{pluralize(updatedInstanceConfigCount || 0, 'change')} updated successfully.</b>\n                    </div>\n                )}\n            </div>\n        </LemonModal>\n    )\n}\n", "import { LemonCheckbox, LemonInput } from '@posthog/lemon-ui'\nimport { LemonTag } from 'lib/lemon-ui/LemonTag/LemonTag'\n\nimport { MetricValue } from './RenderMetricValue'\n\ninterface MetricValueEditInterface extends MetricValue {\n    onValueChanged: (key: string, value: any) => void\n}\n\nexport function RenderMetricValueEdit({\n    key,\n    value,\n    value_type,\n    onValueChanged,\n    isSecret,\n}: MetricValueEditInterface): JSX.Element | string {\n    if (value_type === 'bool') {\n        return (\n            <LemonCheckbox\n                defaultChecked={!!value}\n                onChange={(val) => onValueChanged(key, val)}\n                label={\n                    <LemonTag type={value ? 'success' : 'danger'} className=\"uppercase\">\n                        {value ? 'Yes' : 'No'}\n                    </LemonTag>\n                }\n            />\n        )\n    }\n\n    const parsedValue = isSecret && value ? '' : (value as string | number)\n\n    return (\n        <LemonInput\n            defaultValue={parsedValue as any}\n            type={value_type === 'int' ? 'number' : 'text'}\n            placeholder={isSecret && value ? 'Keep existing secret value' : undefined}\n            onBlur={(e) => onValueChanged(key, e.target.value)}\n        />\n    )\n}\n", "import { IconTrash } from '@posthog/icons'\nimport { LemonDivider, LemonModal, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { usersLemonSelectOptions } from 'lib/components/UserSelectItem'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonInputSelect } from 'lib/lemon-ui/LemonInputSelect/LemonInputSelect'\nimport { LemonTable, LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { LemonTag } from 'lib/lemon-ui/LemonTag/LemonTag'\nimport { ProfilePicture } from 'lib/lemon-ui/ProfilePicture'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { UserType } from '~/types'\n\nimport { staffUsersLogic } from './staffUsersLogic'\n\nexport function StaffUsersTab(): JSX.Element {\n    const { user: myself } = useValues(userLogic)\n    const { staffUsers, allUsersLoading, nonStaffUsers, staffUsersToBeAdded, staffUserToBeDeleted } =\n        useValues(staffUsersLogic)\n    const { setStaffUsersToBeAdded, addStaffUsers, deleteStaffUser, setStaffUserToBeDeleted } =\n        useActions(staffUsersLogic)\n\n    const columns: LemonTableColumns<UserType> = [\n        {\n            key: 'profile_picture',\n            render: function ProfilePictureRender(_, user) {\n                return <ProfilePicture user={user} />\n            },\n            width: 32,\n        },\n        {\n            key: 'name',\n            title: 'Name',\n            dataIndex: 'first_name',\n            render: function ProfilePictureRender(_, user) {\n                return (\n                    <>\n                        {user.first_name}\n                        {user.uuid === myself?.uuid && <LemonTag className=\"uppercase ml-1\">Me</LemonTag>}\n                    </>\n                )\n            },\n        },\n        {\n            key: 'email',\n            title: 'Email',\n            dataIndex: 'email',\n        },\n        {\n            key: 'actions',\n            width: 32,\n            render: function RenderActions(_, user) {\n                return (\n                    <LemonButton\n                        data-attr=\"invite-delete\"\n                        icon={<IconTrash />}\n                        status=\"danger\"\n                        disabledReason={staffUsers.length < 2 && 'At least one staff user must remain'}\n                        title={\n                            staffUsers.length < 2\n                                ? 'You should always have at least one staff user.'\n                                : 'Cancel the invite'\n                        }\n                        onClick={() => setStaffUserToBeDeleted(user)}\n                    />\n                )\n            },\n        },\n    ]\n\n    return (\n        <div>\n            <h3 className=\"l3 mt-4\">Staff Users</h3>\n            <div className=\"mb-4\">\n                Users who have permissions to manage instance-wide settings. Staff user permissions are set at the{' '}\n                <b>instance-level and are independent of any organization or project permissions.</b>{' '}\n                <Link\n                    to=\"https://posthog.com/docs/self-host/configure/instance-settings#staff-users\"\n                    target=\"_blank\"\n                    targetBlankIcon\n                >\n                    Learn more\n                </Link>\n                .\n            </div>\n            <LemonDivider className=\"mb-4\" />\n            <section>\n                <div className=\"flex gap-2 mb-4\">\n                    <div className=\"flex-1\">\n                        <LemonInputSelect\n                            placeholder=\"Add staff users here\u2026\"\n                            loading={allUsersLoading}\n                            value={staffUsersToBeAdded}\n                            onChange={(newValues: string[]) => setStaffUsersToBeAdded(newValues)}\n                            mode=\"multiple\"\n                            data-attr=\"subscribed-emails\"\n                            options={usersLemonSelectOptions(nonStaffUsers, 'uuid')}\n                        />\n                    </div>\n                    <LemonButton\n                        type=\"primary\"\n                        loading={allUsersLoading}\n                        disabled={staffUsersToBeAdded.length === 0}\n                        onClick={addStaffUsers}\n                    >\n                        Add\n                    </LemonButton>\n                </div>\n            </section>\n            <LemonTable dataSource={staffUsers} columns={columns} loading={allUsersLoading} rowKey=\"uuid\" />\n            <StaffUsersRemovalModal\n                myself={myself}\n                user={staffUserToBeDeleted}\n                onClose={() => setStaffUserToBeDeleted(null)}\n                onRemove={() => {\n                    if (staffUserToBeDeleted) {\n                        deleteStaffUser(staffUserToBeDeleted.uuid)\n                        setStaffUserToBeDeleted(null)\n                    }\n                }}\n            />\n        </div>\n    )\n}\n\nconst StaffUsersRemovalModal = ({\n    myself,\n    user,\n    onClose,\n    onRemove,\n}: {\n    myself: UserType | null\n    user: UserType | null\n    onClose: () => void\n    onRemove: () => void\n}): JSX.Element => {\n    return (\n        <LemonModal\n            closable={false}\n            isOpen={!!user}\n            title={`Remove ${myself?.uuid === user?.uuid ? 'yourself' : user?.first_name} as a Staff User?`}\n            onClose={onClose}\n            footer={\n                <>\n                    <LemonButton type=\"secondary\" onClick={onClose}>\n                        Cancel\n                    </LemonButton>\n                    <LemonButton\n                        form=\"text-tile-form\"\n                        htmlType=\"submit\"\n                        type=\"primary\"\n                        status=\"danger\"\n                        onClick={onRemove}\n                    >\n                        Remove user\n                    </LemonButton>\n                </>\n            }\n        >\n            <div className=\"border-none\">\n                {myself?.uuid === user?.uuid ? (\n                    <>\n                        Please confirm you want to <b>remove yourself</b> as a staff user.\n                        <div className=\"font-normal text-secondary\">\n                            Only another staff user will be able to add you again.\n                        </div>\n                    </>\n                ) : (\n                    `Are you sure you want to remove ${user?.first_name} as a Staff User?`\n                )}\n            </div>\n        </LemonModal>\n    )\n}\n", "import { actions, connect, events, kea, path, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport { router } from 'kea-router'\nimport api from 'lib/api'\nimport { urls } from 'scenes/urls'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { UserType } from '~/types'\n\nimport type { staffUsersLogicType } from './staffUsersLogicType'\n\nexport const staffUsersLogic = kea<staffUsersLogicType>([\n    path(['scenes', 'instance', 'SystemStatus', 'staffUsersLogic']),\n    connect({\n        values: [userLogic, ['user']],\n        actions: [userLogic, ['loadUser']],\n    }),\n    actions({\n        setStaffUsersToBeAdded: (userUuids: string[]) => ({ userUuids }),\n        addStaffUsers: true,\n        setStaffUserToBeDeleted: (user: UserType | null) => ({ user }),\n        deleteStaffUser: (userUuid: string) => ({ userUuid }),\n    }),\n    loaders(({ actions, values }) => ({\n        allUsers: [\n            [] as UserType[],\n            {\n                loadAllUsers: async () => {\n                    return (await api.get('api/users')).results ?? []\n                },\n                addStaffUsers: async () => {\n                    const { staffUsersToBeAdded, allUsers } = values\n                    actions.setStaffUsersToBeAdded([])\n                    const newStaffUsers = await Promise.all(\n                        staffUsersToBeAdded.map(\n                            async (userUuid) => await api.update<UserType>(`api/users/${userUuid}`, { is_staff: true })\n                        )\n                    )\n                    const updatedAllUsers: UserType[] = [\n                        ...allUsers.filter(({ uuid }) => !staffUsersToBeAdded.includes(uuid)),\n                        ...newStaffUsers,\n                    ]\n                    updatedAllUsers.sort((a, b) => a.first_name.localeCompare(b.first_name))\n                    return updatedAllUsers\n                },\n                deleteStaffUser: async ({ userUuid }) => {\n                    await api.update<UserType>(`api/users/${userUuid}`, { is_staff: false })\n                    if (values.user?.uuid === userUuid) {\n                        actions.loadUser() // Loads the main user object to properly reflect staff user changes\n                        router.actions.push(urls.projectHomepage())\n                    }\n                    const updatedAllUsers = [...values.allUsers]\n                    for (const user of updatedAllUsers) {\n                        if (user.uuid === userUuid) {\n                            user.is_staff = false\n                        }\n                    }\n                    return updatedAllUsers\n                },\n            },\n        ],\n    })),\n    reducers({\n        staffUsersToBeAdded: [\n            [] as string[],\n            {\n                setStaffUsersToBeAdded: (_, { userUuids }) => userUuids,\n            },\n        ],\n        staffUserToBeDeleted: [\n            null as UserType | null,\n            {\n                setStaffUserToBeDeleted: (_, { user }) => user,\n            },\n        ],\n    }),\n    selectors({\n        staffUsers: [(s) => [s.allUsers], (allUsers): UserType[] => allUsers.filter((user) => user.is_staff)],\n        nonStaffUsers: [(s) => [s.allUsers], (allUsers): UserType[] => allUsers.filter((user) => !user.is_staff)],\n    }),\n    events(({ actions }) => ({\n        afterMount: [actions.loadAllUsers],\n    })),\n])\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "InternalMetricsTab", "openSections", "queries", "queriesLoading", "systemStatusLogic", "setOpenSections", "loadQueries", "showIdle", "setShowIdle", "postgresQueries", "state", "reloadQueries", "e", "LemonCollapse", "keys", "LemonCheckbox", "LemonButton", "IconRefresh", "QueryTable", "props", "columns", "a", "b", "_", "item", "column", "LemonTable", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "TIMESTAMP_VALUES", "RenderMetricValue", "_", "key", "value", "value_type", "emptyNullLabel", "isSecret", "LemonTag", "IconLock", "TZLabel", "import_jsx_runtime", "METRIC_KEY_TO_INTERNAL_LINK", "RenderMetric", "_", "systemStatusRow", "Link", "IconOpenInNew", "OverviewTab", "overview", "systemStatusLoading", "systemStatusLogic", "LemonTable", "RenderMetricValue", "row", "Subrows", "props", "title", "dataIndex", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "ChangeRow", "metricKey", "oldValue", "value", "isSecret", "RenderMetricValue", "InstanceConfigSaveModal", "onClose", "isOpen", "instanceConfigEditingState", "editableInstanceSettings", "updatedInstanceConfigCount", "systemStatusLogic", "saveInstanceConfig", "loading", "isChangingEnabledEmailSettings", "key", "isEnablingEmail", "changeNoun", "LemonModal", "LemonButton", "LemonBanner", "record", "pluralize", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "RenderMetricValueEdit", "key", "value", "value_type", "onValueChanged", "isSecret", "LemonCheckbox", "val", "LemonTag", "LemonInput", "e", "import_jsx_runtime", "InstanceConfigTab", "configOptions", "preflightLoading", "preflightLogic", "editableInstanceSettings", "instanceSettingsLoading", "instanceConfigMode", "instanceConfigEditingState", "systemStatusLogic", "loadInstanceSettings", "setInstanceConfigMode", "updateInstanceConfigValue", "clearInstanceConfigEditing", "useKeyboardHotkeys", "discard", "save", "columns", "value", "_", "record", "props", "RenderMetricValue", "RenderMetricValueEdit", "envColumns", "Link", "LemonButton", "IconWarning", "pluralize", "LemonTable", "IconOpenInNew", "InstanceConfigSaveModal", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "import_kea_router", "staffUsersLogic", "userLogic", "userUuids", "user", "userUuid", "actions", "values", "api_default", "staffUsersToBeAdded", "allUsers", "newStaffUsers", "updatedAllUsers", "uuid", "a", "b", "urls", "_", "s", "import_jsx_runtime", "StaffUsersTab", "myself", "userLogic", "staffUsers", "allUsersLoading", "nonStaffUsers", "staffUsersToBeAdded", "staffUserToBeDeleted", "staffUsersLogic", "setStaffUsersToBeAdded", "addStaffUsers", "deleteStaffUser", "setStaffUserToBeDeleted", "columns", "_", "user", "ProfilePicture", "LemonTag", "LemonButton", "IconTrash", "Link", "LemonDivider", "LemonInputSelect", "newValues", "usersLemonSelectOptions", "LemonTable", "StaffUsersRemovalModal", "onClose", "onRemove", "LemonModal", "import_jsx_runtime", "scene", "SystemStatus", "systemStatusLogic", "tab", "error", "setTab", "preflight", "siteUrlMisconfigured", "preflightLogic", "user", "userLogic", "tabs", "Tooltip", "IconInfo", "OverviewTab", "InternalMetricsTab", "LemonTag", "InstanceConfigTab", "StaffUsersTab", "PageHeader", "Link", "LemonBanner", "LemonTabs"]
}
