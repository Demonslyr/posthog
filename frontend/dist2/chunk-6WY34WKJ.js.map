{
  "version": 3,
  "sources": ["../src/scenes/data-warehouse/new/NewSourceWizard.tsx", "../src/scenes/data-warehouse/external/forms/SchemaForm.tsx", "../src/scenes/data-warehouse/external/forms/SyncProgressStep.tsx"],
  "sourcesContent": ["import { LemonButton, LemonTable, Link } from '@posthog/lemon-ui'\nimport { BindLogic, useActions, useValues } from 'kea'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { useCallback, useEffect } from 'react'\nimport { DataWarehouseSourceIcon } from 'scenes/data-warehouse/settings/DataWarehouseSourceIcon'\nimport { SceneExport } from 'scenes/sceneTypes'\n\nimport { ManualLinkSourceType, SourceConfig } from '~/types'\n\nimport { DataWarehouseInitialBillingLimitNotice } from '../DataWarehouseInitialBillingLimitNotice'\nimport SchemaForm from '../external/forms/SchemaForm'\nimport SourceForm from '../external/forms/SourceForm'\nimport { SyncProgressStep } from '../external/forms/SyncProgressStep'\nimport { DatawarehouseTableForm } from '../new/DataWarehouseTableForm'\nimport { dataWarehouseTableLogic } from './dataWarehouseTableLogic'\nimport { sourceWizardLogic } from './sourceWizardLogic'\n\nexport const scene: SceneExport = {\n    component: NewSourceWizardScene,\n    logic: sourceWizardLogic,\n}\nexport function NewSourceWizardScene(): JSX.Element {\n    const { closeWizard } = useActions(sourceWizardLogic)\n\n    return (\n        <>\n            <PageHeader\n                buttons={\n                    <>\n                        <LemonButton\n                            type=\"secondary\"\n                            center\n                            data-attr=\"source-form-cancel-button\"\n                            onClick={closeWizard}\n                        >\n                            Cancel\n                        </LemonButton>\n                    </>\n                }\n            />\n            <NewSourcesWizard />\n        </>\n    )\n}\n\ninterface NewSourcesWizardProps {\n    onComplete?: () => void\n}\n\nexport function NewSourcesWizard({ onComplete }: NewSourcesWizardProps): JSX.Element {\n    const wizardLogic = sourceWizardLogic({ onComplete })\n\n    const { modalTitle, modalCaption, isWrapped, currentStep, isLoading, canGoBack, canGoNext, nextButtonText } =\n        useValues(wizardLogic)\n    const { onBack, onSubmit, onClear } = useActions(wizardLogic)\n    const { tableLoading: manualLinkIsLoading } = useValues(dataWarehouseTableLogic)\n\n    useEffect(() => {\n        return () => {\n            onClear()\n        }\n    }, [onClear])\n\n    const footer = useCallback(() => {\n        if (currentStep === 1) {\n            return null\n        }\n\n        return (\n            <div className=\"mt-4 flex flex-row justify-end gap-2\">\n                {canGoBack && (\n                    <LemonButton\n                        type=\"secondary\"\n                        center\n                        data-attr=\"source-modal-back-button\"\n                        onClick={onBack}\n                        disabledReason={!canGoBack && 'You cant go back from here'}\n                    >\n                        Back\n                    </LemonButton>\n                )}\n                <LemonButton\n                    loading={isLoading || manualLinkIsLoading}\n                    disabledReason={!canGoNext && 'You cant click next yet'}\n                    type=\"primary\"\n                    center\n                    onClick={() => onSubmit()}\n                    data-attr=\"source-link\"\n                >\n                    {nextButtonText}\n                </LemonButton>\n            </div>\n        )\n    }, [currentStep, canGoBack, onBack, isLoading, manualLinkIsLoading, canGoNext, nextButtonText, onSubmit])\n\n    return (\n        <>\n            {!isWrapped && <DataWarehouseInitialBillingLimitNotice />}\n            <>\n                <h3>{modalTitle}</h3>\n                <p>{modalCaption}</p>\n\n                {currentStep === 1 ? (\n                    <FirstStep />\n                ) : currentStep === 2 ? (\n                    <SecondStep />\n                ) : currentStep === 3 ? (\n                    <ThirdStep />\n                ) : currentStep === 4 ? (\n                    <FourthStep />\n                ) : (\n                    <div>Something went wrong...</div>\n                )}\n\n                {footer()}\n            </>\n        </>\n    )\n}\n\nfunction FirstStep(): JSX.Element {\n    const { connectors, manualConnectors, addToHubspotButtonUrl } = useValues(sourceWizardLogic)\n    const { selectConnector, toggleManualLinkFormVisible, onNext, setManualLinkingProvider } =\n        useActions(sourceWizardLogic)\n    const { featureFlags } = useValues(featureFlagLogic)\n\n    const onClick = (sourceConfig: SourceConfig): void => {\n        if (sourceConfig.name == 'Hubspot') {\n            window.open(addToHubspotButtonUrl() as string)\n        } else {\n            selectConnector(sourceConfig)\n        }\n        onNext()\n    }\n\n    const onManualLinkClick = (manualLinkSource: ManualLinkSourceType): void => {\n        toggleManualLinkFormVisible(true)\n        setManualLinkingProvider(manualLinkSource)\n    }\n\n    const filteredConnectors = connectors.filter((n) => {\n        return !(n.name === 'BigQuery' && !featureFlags[FEATURE_FLAGS.BIGQUERY_DWH])\n    })\n\n    return (\n        <>\n            <h2 className=\"mt-4\">Managed by PostHog</h2>\n\n            <p>\n                Data will be synced to PostHog and regularly refreshed.{' '}\n                <Link to=\"https://posthog.com/docs/data-warehouse/setup#stripe\">Learn more</Link>\n            </p>\n            <LemonTable\n                dataSource={filteredConnectors}\n                loading={false}\n                disableTableWhileLoading={false}\n                columns={[\n                    {\n                        title: 'Source',\n                        width: 0,\n                        render: function (_, sourceConfig) {\n                            return <DataWarehouseSourceIcon type={sourceConfig.name} />\n                        },\n                    },\n                    {\n                        title: 'Name',\n                        key: 'name',\n                        render: (_, sourceConfig) => (\n                            <span className=\"font-semibold text-sm gap-1\">\n                                {sourceConfig.label ?? sourceConfig.name}\n                            </span>\n                        ),\n                    },\n                    {\n                        key: 'actions',\n                        width: 0,\n                        render: (_, sourceConfig) => (\n                            <div className=\"flex flex-row justify-end\">\n                                <LemonButton onClick={() => onClick(sourceConfig)} className=\"my-2\" type=\"primary\">\n                                    Link\n                                </LemonButton>\n                            </div>\n                        ),\n                    },\n                ]}\n            />\n\n            <h2 className=\"mt-4\">Self Managed</h2>\n\n            <p>\n                Data will be queried directly from your data source that you manage.{' '}\n                <Link to=\"https://posthog.com/docs/data-warehouse/setup#linking-a-custom-source\">Learn more</Link>\n            </p>\n            <LemonTable\n                dataSource={manualConnectors}\n                loading={false}\n                disableTableWhileLoading={false}\n                columns={[\n                    {\n                        title: 'Source',\n                        width: 0,\n                        render: (_, sourceConfig) => <DataWarehouseSourceIcon type={sourceConfig.type} />,\n                    },\n                    {\n                        title: 'Name',\n                        key: 'name',\n                        render: (_, sourceConfig) => (\n                            <span className=\"font-semibold text-sm gap-1\">{sourceConfig.name}</span>\n                        ),\n                    },\n                    {\n                        key: 'actions',\n                        width: 0,\n                        render: (_, sourceConfig) => (\n                            <div className=\"flex flex-row justify-end\">\n                                <LemonButton\n                                    onClick={() => onManualLinkClick(sourceConfig.type)}\n                                    className=\"my-2\"\n                                    type=\"primary\"\n                                >\n                                    Link\n                                </LemonButton>\n                            </div>\n                        ),\n                    },\n                ]}\n            />\n        </>\n    )\n}\n\nfunction SecondStep(): JSX.Element {\n    const { selectedConnector } = useValues(sourceWizardLogic)\n\n    return selectedConnector ? (\n        <SourceForm sourceConfig={selectedConnector} />\n    ) : (\n        <BindLogic logic={dataWarehouseTableLogic} props={{ id: 'new' }}>\n            <DatawarehouseTableForm />\n        </BindLogic>\n    )\n}\n\nfunction ThirdStep(): JSX.Element {\n    return <SchemaForm />\n}\n\nfunction FourthStep(): JSX.Element {\n    return <SyncProgressStep />\n}\n", "import { LemonButton, LemonCheckbox, LemonModal, LemonTable } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\n\nimport { sourceWizardLogic } from '../../new/sourceWizardLogic'\nimport { SyncMethodForm } from './SyncMethodForm'\n\nexport default function SchemaForm(): JSX.Element {\n    const { toggleSchemaShouldSync, openSyncMethodModal } = useActions(sourceWizardLogic)\n    const { databaseSchema } = useValues(sourceWizardLogic)\n\n    return (\n        <>\n            <div className=\"flex flex-col gap-2\">\n                <div>\n                    <LemonTable\n                        emptyState=\"No schemas found\"\n                        dataSource={databaseSchema}\n                        columns={[\n                            {\n                                width: 0,\n                                key: 'enabled',\n                                render: (_, schema) => {\n                                    return (\n                                        <LemonCheckbox\n                                            checked={schema.should_sync}\n                                            onChange={(checked) => {\n                                                toggleSchemaShouldSync(schema, checked)\n                                            }}\n                                            disabledReason={\n                                                schema.sync_type === null\n                                                    ? 'Please set up a sync method first'\n                                                    : undefined\n                                            }\n                                        />\n                                    )\n                                },\n                            },\n                            {\n                                title: 'Table',\n                                key: 'table',\n                                render: function RenderTable(_, schema) {\n                                    return schema.table\n                                },\n                            },\n                            {\n                                title: 'Rows',\n                                key: 'rows',\n                                isHidden: !databaseSchema.some((schema) => schema.rows),\n                                render: (_, schema) => {\n                                    return schema.rows != null ? schema.rows : 'Unknown'\n                                },\n                            },\n\n                            {\n                                key: 'sync_type',\n                                title: 'Sync method',\n                                align: 'right',\n                                tooltip:\n                                    'Full refresh will refresh the full table on every sync, whereas incremental will only sync new and updated rows since the last sync',\n                                render: (_, schema) => {\n                                    if (!schema.sync_type) {\n                                        return (\n                                            <div className=\"justify-end flex\">\n                                                <LemonButton\n                                                    className=\"my-1\"\n                                                    type=\"primary\"\n                                                    onClick={() => openSyncMethodModal(schema)}\n                                                >\n                                                    Set up\n                                                </LemonButton>\n                                            </div>\n                                        )\n                                    }\n\n                                    return (\n                                        <div className=\"justify-end flex\">\n                                            <LemonButton\n                                                className=\"my-1\"\n                                                size=\"small\"\n                                                type=\"secondary\"\n                                                onClick={() => openSyncMethodModal(schema)}\n                                            >\n                                                {schema.sync_type === 'full_refresh' ? 'Full refresh' : 'Incremental'}\n                                            </LemonButton>\n                                        </div>\n                                    )\n                                },\n                            },\n                        ]}\n                    />\n                </div>\n            </div>\n            <SyncMethodModal />\n        </>\n    )\n}\n\nconst SyncMethodModal = (): JSX.Element => {\n    const { cancelSyncMethodModal, updateSchemaSyncType, toggleSchemaShouldSync } = useActions(sourceWizardLogic)\n    const { syncMethodModalOpen, currentSyncMethodModalSchema } = useValues(sourceWizardLogic)\n\n    if (!currentSyncMethodModalSchema) {\n        return <></>\n    }\n\n    return (\n        <LemonModal\n            title={`Sync method for ${currentSyncMethodModalSchema.table}`}\n            isOpen={syncMethodModalOpen}\n            onClose={cancelSyncMethodModal}\n        >\n            <SyncMethodForm\n                schema={currentSyncMethodModalSchema}\n                onClose={cancelSyncMethodModal}\n                onSave={(syncType, incrementalField, incrementalFieldType) => {\n                    if (syncType === 'incremental') {\n                        updateSchemaSyncType(\n                            currentSyncMethodModalSchema,\n                            syncType,\n                            incrementalField,\n                            incrementalFieldType\n                        )\n                    } else {\n                        updateSchemaSyncType(currentSyncMethodModalSchema, syncType ?? null, null, null)\n                    }\n\n                    toggleSchemaShouldSync(currentSyncMethodModalSchema, true)\n                    cancelSyncMethodModal()\n                }}\n            />\n        </LemonModal>\n    )\n}\n", "import { LemonButton, LemonTable, LemonTableColumns, LemonTag, LemonTagType } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { sourceWizardLogic } from 'scenes/data-warehouse/new/sourceWizardLogic'\nimport { dataWarehouseSettingsLogic } from 'scenes/data-warehouse/settings/dataWarehouseSettingsLogic'\nimport { defaultQuery } from 'scenes/data-warehouse/utils'\nimport { urls } from 'scenes/urls'\n\nimport { ExternalDataSourceSchema } from '~/types'\n\nexport const SyncProgressStep = (): JSX.Element => {\n    const { sourceId, isWrapped } = useValues(sourceWizardLogic)\n    const { cancelWizard } = useActions(sourceWizardLogic)\n    const { dataWarehouseSources, dataWarehouseSourcesLoading } = useValues(dataWarehouseSettingsLogic)\n\n    const source = dataWarehouseSources?.results.find((n) => n.id === sourceId)\n    const schemas = source?.schemas ?? []\n\n    const getSyncStatus = (schema: ExternalDataSourceSchema): { status: string; tagType: LemonTagType } => {\n        if (!schema.should_sync) {\n            return {\n                status: 'Not synced',\n                tagType: 'default',\n            }\n        }\n\n        if (schema.status === 'Running') {\n            return {\n                status: 'Syncing...',\n                tagType: 'primary',\n            }\n        }\n\n        if (schema.status === 'Completed') {\n            return {\n                status: 'Completed',\n                tagType: 'success',\n            }\n        }\n\n        return {\n            status: 'Error',\n            tagType: 'danger',\n        }\n    }\n\n    const columns: LemonTableColumns<ExternalDataSourceSchema> = [\n        {\n            title: 'Table',\n            key: 'table',\n            render: function RenderTable(_, schema) {\n                return schema.name\n            },\n        },\n        {\n            title: 'Status',\n            key: 'status',\n            render: function RenderStatus(_, schema) {\n                const { status, tagType } = getSyncStatus(schema)\n\n                return <LemonTag type={tagType}>{status}</LemonTag>\n            },\n        },\n    ]\n\n    if (!isWrapped) {\n        columns.push({\n            key: 'actions',\n            width: 0,\n            render: function RenderStatus(_, schema) {\n                if (schema.table && schema.status === 'Completed') {\n                    const query = defaultQuery(schema.table.name, schema.table.columns)\n                    return (\n                        <LemonButton\n                            className=\"my-1\"\n                            type=\"primary\"\n                            onClick={cancelWizard}\n                            to={urls.insightNew({ query })}\n                        >\n                            Query\n                        </LemonButton>\n                    )\n                }\n\n                return ''\n            },\n        })\n    }\n\n    return (\n        <div className=\"flex flex-col gap-2\">\n            <div>\n                <LemonTable\n                    emptyState=\"No schemas selected\"\n                    dataSource={schemas}\n                    loading={dataWarehouseSourcesLoading}\n                    disableTableWhileLoading={false}\n                    columns={columns}\n                />\n            </div>\n        </div>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "SchemaForm", "toggleSchemaShouldSync", "openSyncMethodModal", "sourceWizardLogic", "databaseSchema", "LemonTable", "_", "schema", "LemonCheckbox", "checked", "LemonButton", "SyncMethodModal", "cancelSyncMethodModal", "updateSchemaSyncType", "syncMethodModalOpen", "currentSyncMethodModalSchema", "LemonModal", "SyncMethodForm", "syncType", "incrementalField", "incrementalFieldType", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "SyncProgressStep", "sourceId", "isWrapped", "sourceWizardLogic", "cancelWizard", "dataWarehouseSources", "dataWarehouseSourcesLoading", "dataWarehouseSettingsLogic", "schemas", "n", "getSyncStatus", "schema", "columns", "_", "status", "tagType", "LemonTag", "query", "defaultQuery", "LemonButton", "urls", "LemonTable", "import_jsx_runtime", "scene", "NewSourceWizardScene", "sourceWizardLogic", "closeWizard", "PageHeader", "LemonButton", "NewSourcesWizard", "onComplete", "wizardLogic", "modalTitle", "modalCaption", "isWrapped", "currentStep", "isLoading", "canGoBack", "canGoNext", "nextButtonText", "onBack", "onSubmit", "onClear", "manualLinkIsLoading", "dataWarehouseTableLogic", "footer", "DataWarehouseInitialBillingLimitNotice", "FirstStep", "SecondStep", "ThirdStep", "FourthStep", "connectors", "manualConnectors", "addToHubspotButtonUrl", "selectConnector", "toggleManualLinkFormVisible", "onNext", "setManualLinkingProvider", "featureFlags", "featureFlagLogic", "onClick", "sourceConfig", "onManualLinkClick", "manualLinkSource", "filteredConnectors", "n", "FEATURE_FLAGS", "Link", "LemonTable", "_", "DataWarehouseSourceIcon", "selectedConnector", "SourceFormContainer", "DatawarehouseTableForm", "SchemaForm", "SyncProgressStep"]
}
