{
  "version": 3,
  "sources": ["../src/scenes/heatmaps/HeatmapsScene.tsx", "../src/scenes/heatmaps/HeatmapsBrowser.tsx", "../src/lib/components/heatmaps/HeatMapsSettings.tsx", "../src/toolbar/elements/heatmapLogic.ts", "../src/toolbar/stats/currentPageLogic.ts", "../src/scenes/heatmaps/heatmapsBrowserLogic.ts", "../src/scenes/heatmaps/heatmapsSceneLogic.ts"],
  "sourcesContent": ["import { SceneExport } from 'scenes/sceneTypes'\n\nimport { HeatmapsBrowser } from './HeatmapsBrowser'\nimport { heatmapsSceneLogic } from './heatmapsSceneLogic'\n\nexport const scene: SceneExport = {\n    component: HeatmapsScene,\n    logic: heatmapsSceneLogic,\n}\n\nexport function HeatmapsScene(): JSX.Element {\n    return (\n        <div>\n            <HeatmapsBrowser />\n        </div>\n    )\n}\n", "import { IconCollapse, IconGear } from '@posthog/icons'\nimport { LemonBanner, LemonButton, LemonInputSelect, LemonSkeleton, Spinner, Tooltip } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { BindLogic, useActions, useValues } from 'kea'\nimport { AuthorizedUrlList } from 'lib/components/AuthorizedUrlList/AuthorizedUrlList'\nimport { appEditorUrl, AuthorizedUrlListType } from 'lib/components/AuthorizedUrlList/authorizedUrlListLogic'\nimport { DateFilter } from 'lib/components/DateFilter/DateFilter'\nimport { HeatmapsSettings } from 'lib/components/heatmaps/HeatMapsSettings'\nimport { DetectiveHog } from 'lib/components/hedgehogs'\nimport { heatmapDateOptions } from 'lib/components/IframedToolbarBrowser/utils'\nimport { useResizeObserver } from 'lib/hooks/useResizeObserver'\nimport { IconChevronRight, IconOpenInNew } from 'lib/lemon-ui/icons'\nimport React, { useEffect, useRef } from 'react'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { sidePanelSettingsLogic } from '~/layout/navigation-3000/sidepanel/panels/sidePanelSettingsLogic'\n\nimport { heatmapsBrowserLogic } from './heatmapsBrowserLogic'\n\nfunction UrlSearchHeader(): JSX.Element {\n    const logic = heatmapsBrowserLogic()\n\n    const { browserUrlSearchOptions, browserUrl } = useValues(logic)\n    const { setBrowserSearch, setBrowserUrl } = useActions(logic)\n\n    const placeholderUrl = browserUrlSearchOptions?.[0] ?? 'https://your-website.com/pricing'\n\n    return (\n        <div className=\"bg-surface-primary p-2 border-b flex items-center gap-2\">\n            <span className=\"flex-1\">\n                <LemonInputSelect\n                    mode=\"single\"\n                    allowCustomValues\n                    placeholder={`e.g. ${placeholderUrl}`}\n                    onInputChange={(e) => setBrowserSearch(e)}\n                    value={browserUrl ? [browserUrl] : undefined}\n                    onChange={(v) => setBrowserUrl(v[0] ?? null)}\n                    options={\n                        browserUrlSearchOptions?.map((x) => ({\n                            label: x,\n                            key: x,\n                        })) ?? []\n                    }\n                />\n            </span>\n\n            <LemonButton\n                type=\"secondary\"\n                sideIcon={<IconOpenInNew />}\n                to={\n                    browserUrl\n                        ? appEditorUrl(browserUrl, {\n                              userIntent: 'heatmaps',\n                          })\n                        : undefined\n                }\n                targetBlank\n                disabledReason={!browserUrl ? 'Select a URL first' : undefined}\n            >\n                Open in toolbar\n            </LemonButton>\n        </div>\n    )\n}\n\nfunction HeatmapsBrowserIntro(): JSX.Element {\n    const logic = heatmapsBrowserLogic()\n\n    const { topUrls, topUrlsLoading, noPageviews } = useValues(logic)\n\n    const { setBrowserUrl } = useActions(logic)\n\n    return (\n        <div className=\"flex-1 flex flex-col items-center justify-center overflow-y-auto\">\n            <div className=\"max-w-[50rem] py-6 px-3 h-full w-full\">\n                <div className=\"flex items-center flex-wrap gap-6\">\n                    <div className=\"w-50\">\n                        <DetectiveHog className=\"w-full h-full\" />\n                    </div>\n\n                    <div className=\"flex-1\">\n                        <h2>Welcome to Heatmaps</h2>\n                        <p>\n                            Heatmaps are powered by the embedded JavaScript SDK and allow you to see a range of user\n                            interactions directly on your website via the Toolbar.\n                        </p>\n                        <p>\n                            You can also view heatmaps for any page on your website by entering the URL above. As long\n                            as the page has the PostHog Toolbar installed, and can be loaded in an iframe, you can view\n                            heatmaps for it.\n                        </p>\n                    </div>\n                </div>\n\n                <div className=\"gap-y-px p-2 border bg-surface-primary rounded\">\n                    {topUrlsLoading ? (\n                        <LemonSkeleton className=\"h-10\" repeat={10} />\n                    ) : noPageviews ? (\n                        <LemonBanner type=\"info\">\n                            No pageview events have been received yet. Once you have some data, you'll see the most\n                            viewed pages here.\n                        </LemonBanner>\n                    ) : (\n                        <>\n                            {topUrls?.map(({ url }) => (\n                                <LemonButton key={url} fullWidth onClick={() => setBrowserUrl(url)}>\n                                    {url}\n                                </LemonButton>\n                            ))}\n                        </>\n                    )}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nfunction ForbiddenURL(): JSX.Element {\n    const logic = heatmapsBrowserLogic()\n\n    const { browserUrl } = useValues(logic)\n\n    return (\n        <div className=\"flex-1 p-4 gap-y-4\">\n            <LemonBanner type=\"error\">\n                {browserUrl} is not an authorized URL. Please add it to the list of authorized URLs to view heatmaps on\n                this page.\n            </LemonBanner>\n\n            <h2>Authorized Toolbar URLs</h2>\n            <AuthorizedUrlList type={AuthorizedUrlListType.TOOLBAR_URLS} />\n        </div>\n    )\n}\n\nfunction FilterPanel(): JSX.Element {\n    const logic = heatmapsBrowserLogic()\n\n    const {\n        heatmapFilters,\n        heatmapColorPalette,\n        heatmapFixedPositionMode,\n        viewportRange,\n        commonFilters,\n        filterPanelCollapsed,\n    } = useValues(logic)\n    const {\n        patchHeatmapFilters,\n        setHeatmapColorPalette,\n        setHeatmapFixedPositionMode,\n        setCommonFilters,\n        toggleFilterPanelCollapsed,\n    } = useActions(logic)\n\n    return (\n        <div className={clsx('flex flex-col gap-y-2 px-2 py-1 border-r', !filterPanelCollapsed && 'w-100')}>\n            {filterPanelCollapsed ? (\n                <Tooltip title=\"Expand heatmap settings\">\n                    <LemonButton\n                        size=\"small\"\n                        icon={<IconChevronRight />}\n                        onClick={() => toggleFilterPanelCollapsed()}\n                    />\n                </Tooltip>\n            ) : (\n                <>\n                    <div className=\"flex flex-row items-center\">\n                        <Tooltip title=\"Collapse heatmap settings\">\n                            <LemonButton\n                                size=\"small\"\n                                icon={<IconCollapse className=\"rotate-90\" />}\n                                onClick={() => toggleFilterPanelCollapsed()}\n                            />\n                        </Tooltip>\n                        <h2 className=\"flex-1 mb-0 px-2\">Heatmap settings</h2>\n                    </div>\n                    <DateFilter\n                        dateFrom={commonFilters.date_from}\n                        dateTo={commonFilters.date_to}\n                        onChange={(fromDate, toDate) => {\n                            setCommonFilters({ date_from: fromDate, date_to: toDate })\n                        }}\n                        dateOptions={heatmapDateOptions}\n                    />\n                    <HeatmapsSettings\n                        heatmapFilters={heatmapFilters}\n                        patchHeatmapFilters={patchHeatmapFilters}\n                        viewportRange={viewportRange}\n                        heatmapColorPalette={heatmapColorPalette}\n                        setHeatmapColorPalette={setHeatmapColorPalette}\n                        heatmapFixedPositionMode={heatmapFixedPositionMode}\n                        setHeatmapFixedPositionMode={setHeatmapFixedPositionMode}\n                    />\n                </>\n            )}\n        </div>\n    )\n}\n\nfunction IframeErrorOverlay(): JSX.Element | null {\n    const logic = heatmapsBrowserLogic()\n    const { iframeBanner } = useValues(logic)\n    return iframeBanner ? (\n        <div className=\"absolute flex flex-col w-full h-full bg-blend-overlay items-start py-4 px-8 pointer-events-none\">\n            <LemonBanner className=\"w-full\" type={iframeBanner.level}>\n                {iframeBanner.message}. Your site might not allow being embedded in an iframe. You can click \"Open in\n                toolbar\" above to visit your site and view the heatmap there.\n            </LemonBanner>\n        </div>\n    ) : null\n}\n\nfunction LoadingOverlay(): JSX.Element {\n    return (\n        <div className=\"absolute flex flex-col w-full h-full items-center justify-center pointer-events-none\">\n            <Spinner className=\"text-5xl\" textColored={true} />\n        </div>\n    )\n}\n\nfunction EmbeddedHeatmapBrowser({\n    iframeRef,\n}: {\n    iframeRef?: React.MutableRefObject<HTMLIFrameElement | null>\n}): JSX.Element | null {\n    const logic = heatmapsBrowserLogic()\n\n    const { browserUrl, loading, iframeBanner } = useValues(logic)\n    const { onIframeLoad, setIframeWidth } = useActions(logic)\n\n    const { width: iframeWidth } = useResizeObserver<HTMLIFrameElement>({ ref: iframeRef })\n    useEffect(() => {\n        setIframeWidth(iframeWidth ?? null)\n    }, [iframeWidth])\n\n    return browserUrl ? (\n        <div className=\"flex flex-row gap-x-2 w-full\">\n            <FilterPanel />\n            <div className=\"relative flex-1 w-full h-full\">\n                {loading ? <LoadingOverlay /> : null}\n                {!loading && iframeBanner ? <IframeErrorOverlay /> : null}\n                <iframe\n                    ref={iframeRef}\n                    className=\"w-full h-full bg-white\"\n                    src={appEditorUrl(browserUrl, {\n                        userIntent: 'heatmaps',\n                    })}\n                    onLoad={onIframeLoad}\n                    // these two sandbox values are necessary so that the site and toolbar can run\n                    // this is a very loose sandbox,\n                    // but we specify it so that at least other capabilities are denied\n                    sandbox=\"allow-scripts allow-same-origin\"\n                    // we don't allow things such as camera access though\n                    allow=\"\"\n                />\n            </div>\n        </div>\n    ) : null\n}\n\nfunction Warnings(): JSX.Element | null {\n    const { currentTeam } = useValues(teamLogic)\n    const heatmapsEnabled = currentTeam?.heatmaps_opt_in\n\n    const { openSettingsPanel } = useActions(sidePanelSettingsLogic)\n\n    return !heatmapsEnabled ? (\n        <LemonBanner\n            type=\"warning\"\n            action={{\n                type: 'secondary',\n                icon: <IconGear />,\n                onClick: () => openSettingsPanel({ settingId: 'heatmaps' }),\n                children: 'Configure',\n            }}\n            dismissKey=\"heatmaps-might-be-disabled-warning\"\n        >\n            You aren't collecting heatmaps data. Enable heatmaps in your project.\n        </LemonBanner>\n    ) : null\n}\n\nexport function HeatmapsBrowser(): JSX.Element {\n    const iframeRef = useRef<HTMLIFrameElement | null>(null)\n\n    const logicProps = { ref: iframeRef }\n\n    const logic = heatmapsBrowserLogic({ iframeRef })\n\n    const { browserUrl, isBrowserUrlAuthorized } = useValues(logic)\n\n    return (\n        <BindLogic logic={heatmapsBrowserLogic} props={logicProps}>\n            <div className=\"flex flex-col gap-2\">\n                <Warnings />\n                <div className=\"flex flex-col overflow-hidden w-full h-[90vh] rounded border\">\n                    <UrlSearchHeader />\n\n                    <div className=\"relative flex flex-1 bg-surface-primary overflow-hidden\">\n                        {browserUrl ? (\n                            <>\n                                {!isBrowserUrlAuthorized ? (\n                                    <ForbiddenURL />\n                                ) : (\n                                    <EmbeddedHeatmapBrowser iframeRef={iframeRef} />\n                                )}\n                            </>\n                        ) : (\n                            <HeatmapsBrowserIntro />\n                        )}\n                    </div>\n                </div>\n            </div>\n        </BindLogic>\n    )\n}\n", "import { IconInfo } from '@posthog/icons'\nimport { useValues } from 'kea'\nimport { HeatmapFilters, HeatmapFixedPositionMode } from 'lib/components/heatmaps/types'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonLabel } from 'lib/lemon-ui/LemonLabel'\nimport { LemonSegmentedButton } from 'lib/lemon-ui/LemonSegmentedButton'\nimport { LemonSelect } from 'lib/lemon-ui/LemonSelect'\nimport { LemonSlider } from 'lib/lemon-ui/LemonSlider'\nimport React, { useState } from 'react'\n\nimport { HEATMAP_COLOR_PALETTE_OPTIONS, heatmapLogic } from '~/toolbar/elements/heatmapLogic'\n\nconst ScrollDepthJSWarning = (): JSX.Element | null => {\n    const { scrollDepthPosthogJsError } = useValues(heatmapLogic)\n\n    if (!scrollDepthPosthogJsError) {\n        return null\n    }\n\n    return (\n        <p className=\"my-2 bg-danger-highlight border border-danger rounded p-2\">\n            {scrollDepthPosthogJsError === 'version' ? (\n                <>This feature requires a newer version of posthog-js</>\n            ) : scrollDepthPosthogJsError === 'disabled' ? (\n                <>\n                    Your posthog-js config has <i>disable_scroll_properties</i> set - these properties are required for\n                    scroll depth calculations to work.\n                </>\n            ) : null}\n        </p>\n    )\n}\nconst SectionSetting = ({\n    children,\n    title,\n    info,\n}: {\n    children: React.ReactNode\n    title: string\n    info?: React.ReactNode\n}): JSX.Element => {\n    const [showInfo, setShowInfo] = useState(false)\n    return (\n        <div className=\"space-y-2 mb-2\">\n            <div className=\"flex items-center gap-2\">\n                <LemonLabel className=\"flex-1\">\n                    <span>{title}</span>\n\n                    {info && (\n                        <LemonButton\n                            icon={<IconInfo />}\n                            size=\"xsmall\"\n                            active={showInfo}\n                            onClick={() => setShowInfo(!showInfo)}\n                            noPadding\n                        />\n                    )}\n                </LemonLabel>\n            </div>\n\n            {showInfo ? <div className=\"text-sm\">{info}</div> : null}\n\n            {children}\n        </div>\n    )\n}\n\ninterface HeatmapsSettingsProps {\n    heatmapFilters: HeatmapFilters\n    patchHeatmapFilters: (filter: Partial<HeatmapFilters>) => void\n    viewportRange: { min: number; max: number }\n    heatmapColorPalette: string | null\n    setHeatmapColorPalette: (palette: string | null) => void\n    heatmapFixedPositionMode: HeatmapFixedPositionMode\n    setHeatmapFixedPositionMode: (mode: HeatmapFixedPositionMode) => void\n}\n\nexport const HeatmapsSettings = ({\n    heatmapFilters,\n    patchHeatmapFilters,\n    viewportRange,\n    heatmapColorPalette,\n    setHeatmapColorPalette,\n    heatmapFixedPositionMode,\n    setHeatmapFixedPositionMode,\n}: HeatmapsSettingsProps): JSX.Element => {\n    return (\n        <>\n            <SectionSetting\n                title=\"Heatmap type\"\n                info={\n                    <>\n                        Select the kind of heatmap you want to view. Clicks, rageclicks, and mouse moves options will\n                        show different \"heat\" based on the number of interactions at that area of the page. Scroll depth\n                        will show how far down the page users have reached.\n                        <br />\n                        Scroll depth uses additional information from Pageview and Pageleave events to indicate how far\n                        down the page users have scrolled.\n                    </>\n                }\n            >\n                <div className=\"flex gap-2 justify-between items-center\">\n                    <LemonSelect\n                        onChange={(e) => patchHeatmapFilters({ type: e })}\n                        value={heatmapFilters.type ?? undefined}\n                        options={[\n                            {\n                                value: 'click',\n                                label: 'Clicks',\n                            },\n                            {\n                                value: 'rageclick',\n                                label: 'Rageclicks',\n                            },\n                            {\n                                value: 'deadclick',\n                                label: 'Dead clicks',\n                            },\n                            {\n                                value: 'mousemove',\n                                label: 'Mouse moves',\n                            },\n                            {\n                                value: 'scrolldepth',\n                                label: 'Scroll depth',\n                            },\n                        ]}\n                        size=\"small\"\n                    />\n\n                    {heatmapFilters.type === 'scrolldepth' && <ScrollDepthJSWarning />}\n                </div>\n            </SectionSetting>\n\n            <SectionSetting\n                title=\"Aggregation\"\n                info={\n                    <>\n                        Heatmaps can be aggregated by total count or unique visitors. Total count will show the total\n                        number of interactions on the page, while unique visitors will only count each visitor once.\n                    </>\n                }\n            >\n                <div className=\"flex gap-2 justify-between items-center\">\n                    <LemonSegmentedButton\n                        onChange={(e) => patchHeatmapFilters({ aggregation: e })}\n                        value={heatmapFilters.aggregation ?? 'total_count'}\n                        options={[\n                            {\n                                value: 'total_count',\n                                label: 'Total count',\n                            },\n                            {\n                                value: 'unique_visitors',\n                                label: 'Unique visitors',\n                            },\n                        ]}\n                        size=\"small\"\n                    />\n                </div>\n            </SectionSetting>\n\n            <SectionSetting\n                title=\"Viewport accuracy\"\n                info={\n                    <>\n                        The viewport accuracy setting will determine how closely the loaded data will be to your current\n                        viewport.\n                        <br />\n                        For example if you set this to 100%, only visitors whose viewport width is identical to yours\n                        will be included in the heatmap.\n                        <br />\n                        At 90% you will see data from viewports that are 10% smaller or larger than yours.\n                    </>\n                }\n            >\n                <div className=\"flex gap-2 justify-between items-center\">\n                    <LemonSlider\n                        className=\"flex-1\"\n                        min={0}\n                        max={1}\n                        step={0.01}\n                        value={heatmapFilters.viewportAccuracy ?? 0}\n                        onChange={(value) => patchHeatmapFilters({ viewportAccuracy: value })}\n                    />\n                    <code className=\"w-[12rem] text-right text-xs whitsepace-nowrap\">\n                        {`${Math.round((heatmapFilters.viewportAccuracy ?? 1) * 100)}% (${viewportRange.min}px - ${\n                            viewportRange.max\n                        }px)`}\n                    </code>\n                </div>\n            </SectionSetting>\n\n            <SectionSetting title=\"Color palette\">\n                <LemonSelect\n                    size=\"small\"\n                    options={HEATMAP_COLOR_PALETTE_OPTIONS}\n                    value={heatmapColorPalette}\n                    onChange={setHeatmapColorPalette}\n                />\n            </SectionSetting>\n\n            {heatmapFilters.type !== 'scrolldepth' && (\n                <SectionSetting\n                    title=\"Fixed positioning calculation\"\n                    info={\n                        <>\n                            PostHog JS will attempt to detect fixed elements such as headers or modals and will\n                            therefore show those heatmap areas, ignoring the scroll value.\n                            <br />\n                            You can choose to show these areas as fixed, include them with scrolled data or hide them\n                            altogether.\n                        </>\n                    }\n                >\n                    <LemonSegmentedButton\n                        onChange={setHeatmapFixedPositionMode}\n                        value={heatmapFixedPositionMode}\n                        options={[\n                            {\n                                value: 'fixed',\n                                label: 'Show fixed',\n                            },\n                            {\n                                value: 'relative',\n                                label: 'Show scrolled',\n                            },\n                            {\n                                value: 'hidden',\n                                label: 'Hide',\n                            },\n                        ]}\n                        size=\"small\"\n                    />\n                </SectionSetting>\n            )}\n        </>\n    )\n}\n", "import { LemonSelectOption } from '@posthog/lemon-ui'\nimport { actions, afterMount, beforeUnmount, connect, kea, listeners, path, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport { encodeParams } from 'kea-router'\nimport { subscriptions } from 'kea-subscriptions'\nimport { windowValues } from 'kea-window-values'\nimport { elementToSelector, escapeRegex } from 'lib/actionUtils'\nimport { PaginatedResponse } from 'lib/api'\nimport {\n    CommonFilters,\n    HeatmapFilters,\n    HeatmapFixedPositionMode,\n    HeatmapJsData,\n    HeatmapJsDataPoint,\n    HeatmapRequestType,\n} from 'lib/components/heatmaps/types'\nimport { calculateViewportRange, DEFAULT_HEATMAP_FILTERS } from 'lib/components/IframedToolbarBrowser/utils'\nimport { dateFilterToText } from 'lib/utils'\nimport { createVersionChecker } from 'lib/utils/semver'\nimport { PostHog } from 'posthog-js'\nimport { collectAllElementsDeep, querySelectorAllDeep } from 'query-selector-shadow-dom'\n\nimport { currentPageLogic } from '~/toolbar/stats/currentPageLogic'\nimport { toolbarConfigLogic, toolbarFetch } from '~/toolbar/toolbarConfigLogic'\nimport { toolbarPosthogJS } from '~/toolbar/toolbarPosthogJS'\nimport { CountedHTMLElement, ElementsEventType, HeatmapElement, HeatmapResponseType } from '~/toolbar/types'\nimport { elementToActionStep, trimElement } from '~/toolbar/utils'\nimport { FilterType, PropertyFilterType, PropertyOperator } from '~/types'\n\nimport type { heatmapLogicType } from './heatmapLogicType'\n\nexport const doesVersionSupportScrollDepth = createVersionChecker('1.99')\n\nconst emptyElementsStatsPages: PaginatedResponse<ElementsEventType> = {\n    next: undefined,\n    previous: undefined,\n    results: [],\n}\n\nexport const HEATMAP_COLOR_PALETTE_OPTIONS: LemonSelectOption<string>[] = [\n    { value: 'default', label: 'Default (multicolor)' },\n    { value: 'red', label: 'Red (monocolor)' },\n    { value: 'green', label: 'Green (monocolor)' },\n    { value: 'blue', label: 'Blue (monocolor)' },\n]\n\nexport const heatmapLogic = kea<heatmapLogicType>([\n    path(['toolbar', 'elements', 'heatmapLogic']),\n    connect({\n        values: [currentPageLogic, ['href', 'wildcardHref'], toolbarConfigLogic, ['posthog']],\n        actions: [currentPageLogic, ['setHref', 'setWildcardHref']],\n    }),\n    actions({\n        getElementStats: (url?: string | null) => ({\n            url,\n        }),\n        enableHeatmap: true,\n        disableHeatmap: true,\n        setShiftPressed: (shiftPressed: boolean) => ({ shiftPressed }),\n        setCommonFilters: (filters: CommonFilters) => ({ filters }),\n        setHeatmapFilters: (filters: HeatmapFilters) => ({ filters }),\n        patchHeatmapFilters: (filters: Partial<HeatmapFilters>) => ({ filters }),\n        toggleClickmapsEnabled: (enabled?: boolean) => ({ enabled }),\n\n        loadMoreElementStats: true,\n        setMatchLinksByHref: (matchLinksByHref: boolean) => ({ matchLinksByHref }),\n        loadHeatmap: (type: string) => ({\n            type,\n        }),\n        loadAllEnabled: (delayMs: number = 0) => ({ delayMs }),\n        maybeLoadClickmap: (delayMs: number = 0) => ({ delayMs }),\n        maybeLoadHeatmap: (delayMs: number = 0) => ({ delayMs }),\n        fetchHeatmapApi: (params: HeatmapRequestType) => ({ params }),\n        setHeatmapScrollY: (scrollY: number) => ({ scrollY }),\n        setHeatmapFixedPositionMode: (mode: HeatmapFixedPositionMode) => ({ mode }),\n        setHeatmapColorPalette: (Palette: string | null) => ({ Palette }),\n    }),\n    windowValues(() => ({\n        windowWidth: (window: Window) => window.innerWidth,\n        windowHeight: (window: Window) => window.innerHeight,\n    })),\n    reducers({\n        matchLinksByHref: [false, { setMatchLinksByHref: (_, { matchLinksByHref }) => matchLinksByHref }],\n        canLoadMoreElementStats: [\n            true,\n            {\n                getElementStatsSuccess: (_, { elementStats }) => elementStats.next !== null,\n                getElementStatsFailure: () => true, // so at least someone can recover from transient errors\n            },\n        ],\n        heatmapEnabled: [\n            false,\n            {\n                enableHeatmap: () => true,\n                disableHeatmap: () => false,\n                getElementStatsFailure: () => false,\n            },\n        ],\n        shiftPressed: [\n            false,\n            {\n                setShiftPressed: (_, { shiftPressed }) => shiftPressed,\n            },\n        ],\n        commonFilters: [\n            { date_from: '-7d' } as CommonFilters,\n            {\n                setCommonFilters: (_, { filters }) => filters,\n            },\n        ],\n        heatmapFilters: [\n            DEFAULT_HEATMAP_FILTERS,\n            { persist: true },\n            {\n                setHeatmapFilters: (_, { filters }) => filters,\n                patchHeatmapFilters: (state, { filters }) => ({ ...state, ...filters }),\n            },\n        ],\n        clickmapsEnabled: [\n            false,\n            { persist: true },\n            {\n                toggleClickmapsEnabled: (state, { enabled }) => (enabled === undefined ? !state : enabled),\n            },\n        ],\n        heatmapScrollY: [\n            0,\n            {\n                setHeatmapScrollY: (_, { scrollY }) => scrollY,\n            },\n        ],\n\n        heatmapFixedPositionMode: [\n            'fixed' as HeatmapFixedPositionMode,\n            {\n                setHeatmapFixedPositionMode: (_, { mode }) => mode,\n            },\n        ],\n\n        heatmapColorPalette: [\n            'default' as string | null,\n            { persist: true },\n            {\n                setHeatmapColorPalette: (_, { Palette }) => Palette,\n            },\n        ],\n    }),\n\n    loaders(({ values }) => ({\n        elementStats: [\n            null as PaginatedResponse<ElementsEventType> | null,\n            {\n                resetElementStats: () => emptyElementsStatsPages,\n                getElementStats: async ({ url }, breakpoint) => {\n                    const { href, wildcardHref } = values\n                    let defaultUrl: string = ''\n                    if (!url) {\n                        const params: Partial<FilterType> = {\n                            properties: [\n                                wildcardHref === href\n                                    ? {\n                                          key: '$current_url',\n                                          value: href,\n                                          operator: PropertyOperator.Exact,\n                                          type: PropertyFilterType.Event,\n                                      }\n                                    : {\n                                          key: '$current_url',\n                                          value: `^${wildcardHref.split('*').map(escapeRegex).join('.*')}$`,\n                                          operator: PropertyOperator.Regex,\n                                          type: PropertyFilterType.Event,\n                                      },\n                            ],\n                            date_from: values.commonFilters.date_from,\n                            date_to: values.commonFilters.date_to,\n                        }\n\n                        defaultUrl = `/api/element/stats/${encodeParams({ ...params, paginate_response: true }, '?')}`\n                    }\n\n                    // toolbar fetch collapses queryparams but this URL has multiple with the same name\n                    const response = await toolbarFetch(\n                        url || defaultUrl,\n                        'GET',\n                        undefined,\n                        url ? 'use-as-provided' : 'full'\n                    )\n\n                    if (response.status === 403) {\n                        toolbarConfigLogic.actions.authenticate()\n                        return emptyElementsStatsPages\n                    }\n\n                    const paginatedResults = await response.json()\n                    breakpoint()\n\n                    if (!Array.isArray(paginatedResults.results)) {\n                        throw new Error('Error loading HeatMap data!')\n                    }\n\n                    return {\n                        results: [\n                            // if url is present we are paginating and merge results, otherwise we only use the new results\n                            ...(url ? values.elementStats?.results || [] : []),\n                            ...(paginatedResults.results || []),\n                        ],\n                        next: paginatedResults.next,\n                        previous: paginatedResults.previous,\n                    } as PaginatedResponse<ElementsEventType>\n                },\n            },\n        ],\n\n        rawHeatmap: [\n            null as HeatmapResponseType | null,\n            {\n                loadHeatmap: async () => {\n                    const { href, wildcardHref } = values\n                    const { date_from, date_to } = values.commonFilters\n                    const { type, aggregation } = values.heatmapFilters\n                    const urlExact = wildcardHref === href ? href : undefined\n                    const urlRegex = wildcardHref !== href ? wildcardHref : undefined\n\n                    // toolbar fetch collapses queryparams but this URL has multiple with the same name\n                    const response = await toolbarFetch(\n                        `/api/heatmap/${encodeParams(\n                            {\n                                type,\n                                date_from,\n                                date_to,\n                                url_exact: urlExact,\n                                url_pattern: urlRegex,\n                                viewport_width_min: values.viewportRange.min,\n                                viewport_width_max: values.viewportRange.max,\n                                aggregation,\n                            },\n                            '?'\n                        )}`,\n                        'GET'\n                    )\n\n                    if (response.status === 403) {\n                        toolbarConfigLogic.actions.authenticate()\n                    }\n\n                    if (response.status !== 200) {\n                        throw new Error('API error')\n                    }\n\n                    return await response.json()\n                },\n            },\n        ],\n    })),\n\n    selectors(({ cache }) => ({\n        dateRange: [\n            (s) => [s.commonFilters],\n            (commonFilters: Partial<FilterType>) => {\n                return dateFilterToText(commonFilters.date_from, commonFilters.date_to, 'Last 7 days')\n            },\n        ],\n        elements: [\n            (s) => [s.elementStats, toolbarConfigLogic.selectors.dataAttributes, s.href, s.matchLinksByHref],\n            (elementStats, dataAttributes, href, matchLinksByHref) => {\n                cache.pageElements = cache.lastHref == href ? cache.pageElements : collectAllElementsDeep('*', document)\n                cache.selectorToElements = cache.lastHref == href ? cache.selectorToElements : {}\n\n                cache.lastHref = href\n\n                const elements: CountedHTMLElement[] = []\n                elementStats?.results.forEach((event) => {\n                    let combinedSelector: string\n                    let lastSelector: string | undefined\n                    for (let i = 0; i < event.elements.length; i++) {\n                        const element = event.elements[i]\n                        const selector =\n                            elementToSelector(\n                                matchLinksByHref ? element : { ...element, href: undefined },\n                                dataAttributes\n                            ) || '*'\n                        combinedSelector = lastSelector ? `${selector} > ${lastSelector}` : selector\n\n                        try {\n                            let domElements: HTMLElement[] | undefined = cache.selectorToElements?.[combinedSelector]\n                            if (domElements === undefined) {\n                                domElements = Array.from(\n                                    querySelectorAllDeep(combinedSelector, document, cache.pageElements)\n                                )\n                                cache.selectorToElements[combinedSelector] = domElements\n                            }\n\n                            if (domElements.length === 1) {\n                                const e = event.elements[i]\n\n                                // element like \"svg\" (only tag, no class/id/etc.) as the first one\n                                if (\n                                    i === 0 &&\n                                    e.tag_name &&\n                                    !e.attr_class &&\n                                    !e.attr_id &&\n                                    !e.href &&\n                                    !e.text &&\n                                    e.nth_child === 1 &&\n                                    e.nth_of_type === 1 &&\n                                    !e.attributes['attr__data-attr']\n                                ) {\n                                    // too simple selector, bail\n                                } else {\n                                    elements.push({\n                                        element: domElements[0],\n                                        count: event.count,\n                                        selector: selector,\n                                        hash: event.hash,\n                                        type: event.type,\n                                    } as CountedHTMLElement)\n                                    return null\n                                }\n                            }\n\n                            if (domElements.length === 0) {\n                                if (i === event.elements.length - 1) {\n                                    return null\n                                } else if (i > 0 && lastSelector) {\n                                    // We already have something, but found nothing when adding the next selector.\n                                    // Skip it and try with the next one...\n                                    lastSelector = lastSelector ? `* > ${lastSelector}` : '*'\n                                    continue\n                                }\n                            }\n                        } catch (error) {\n                            break\n                        }\n\n                        lastSelector = combinedSelector\n\n                        // TODO: what if multiple elements will continue to match until the end?\n                    }\n                })\n\n                return elements\n            },\n        ],\n        countedElements: [\n            (s) => [s.elements, toolbarConfigLogic.selectors.dataAttributes, s.clickmapsEnabled],\n            (elements, dataAttributes, clickmapsEnabled) => {\n                if (!clickmapsEnabled) {\n                    return []\n                }\n                const normalisedElements = new Map<HTMLElement, CountedHTMLElement>()\n                ;(elements || []).forEach((countedElement) => {\n                    const trimmedElement = trimElement(countedElement.element)\n                    if (!trimmedElement) {\n                        return\n                    }\n\n                    if (normalisedElements.has(trimmedElement)) {\n                        const existing = normalisedElements.get(trimmedElement)\n                        if (existing) {\n                            existing.count += countedElement.count\n                            existing.clickCount += countedElement.type === '$rageclick' ? 0 : countedElement.count\n                            existing.rageclickCount += countedElement.type === '$rageclick' ? countedElement.count : 0\n                        }\n                    } else {\n                        normalisedElements.set(trimmedElement, {\n                            ...countedElement,\n                            clickCount: countedElement.type === '$rageclick' ? 0 : countedElement.count,\n                            rageclickCount: countedElement.type === '$rageclick' ? countedElement.count : 0,\n                            element: trimmedElement,\n                            actionStep: elementToActionStep(trimmedElement, dataAttributes),\n                        })\n                    }\n                })\n\n                const countedElements = Array.from(normalisedElements.values())\n                countedElements.sort((a, b) => b.count - a.count)\n\n                return countedElements.map((e, i) => ({ ...e, position: i + 1 }))\n            },\n        ],\n        elementCount: [(s) => [s.countedElements], (countedElements) => countedElements.length],\n        clickCount: [\n            (s) => [s.countedElements],\n            (countedElements) => (countedElements ? countedElements.map((e) => e.count).reduce((a, b) => a + b, 0) : 0),\n        ],\n        highestClickCount: [\n            (s) => [s.countedElements],\n            (countedElements) =>\n                countedElements ? countedElements.map((e) => e.count).reduce((a, b) => (b > a ? b : a), 0) : 0,\n        ],\n\n        heatmapElements: [\n            (s) => [s.rawHeatmap],\n            (rawHeatmap): HeatmapElement[] => {\n                if (!rawHeatmap) {\n                    return []\n                }\n\n                const elements: HeatmapElement[] = []\n\n                rawHeatmap?.results.forEach((element) => {\n                    if ('scroll_depth_bucket' in element) {\n                        elements.push({\n                            count: element.cumulative_count,\n                            xPercentage: 0,\n                            targetFixed: false,\n                            y: element.scroll_depth_bucket,\n                        })\n                    } else {\n                        elements.push({\n                            count: element.count,\n                            xPercentage: element.pointer_relative_x,\n                            targetFixed: element.pointer_target_fixed,\n                            y: element.pointer_y,\n                        })\n                    }\n                })\n\n                return elements\n            },\n        ],\n\n        viewportRange: [\n            (s) => [s.heatmapFilters, s.windowWidth],\n            (heatmapFilters, windowWidth) => calculateViewportRange(heatmapFilters, windowWidth),\n        ],\n\n        heatmapTooltipLabel: [\n            (s) => [s.heatmapFilters],\n            (heatmapFilters) => {\n                if (heatmapFilters.aggregation === 'unique_visitors') {\n                    return 'visitors'\n                }\n                return heatmapFilters.type + 's'\n            },\n        ],\n\n        scrollDepthPosthogJsError: [\n            (s) => [s.posthog],\n            (posthog: PostHog | null): 'version' | 'disabled' | null => {\n                if (!posthog) {\n                    return null\n                }\n\n                const posthogVersion =\n                    posthog?.version ??\n                    posthog?._calculate_event_properties('test', {}, new Date())?.['$lib_version'] ??\n                    '0.0.0'\n\n                if (!(posthog as any)?.scrollManager?.scrollY) {\n                    return 'version'\n                }\n\n                const isSupported = doesVersionSupportScrollDepth(posthogVersion)\n                const isDisabled = posthog?.config.disable_scroll_properties\n\n                return !isSupported ? 'version' : isDisabled ? 'disabled' : null\n            },\n        ],\n\n        heatmapJsData: [\n            (s) => [s.heatmapElements, s.heatmapScrollY, s.windowWidth, s.heatmapFixedPositionMode],\n            (heatmapElements, heatmapScrollY, windowWidth, heatmapFixedPositionMode): HeatmapJsData => {\n                // We want to account for all the fixed position elements, the scroll of the context and the browser width\n                const data = heatmapElements.reduce((acc, element) => {\n                    if (heatmapFixedPositionMode === 'hidden' && element.targetFixed) {\n                        return acc\n                    }\n\n                    const y = Math.round(\n                        element.targetFixed && heatmapFixedPositionMode === 'fixed'\n                            ? element.y\n                            : element.y - heatmapScrollY\n                    )\n                    const x = Math.round(element.xPercentage * windowWidth)\n\n                    return [...acc, { x, y, value: element.count }]\n                }, [] as HeatmapJsDataPoint[])\n\n                // Max is the highest value in the data set we have\n                const max = data.reduce((max, { value }) => Math.max(max, value), 0)\n\n                // TODO: Group based on some sensible resolutions (we can then use this for a hover state to show more detail)\n\n                return {\n                    min: 0,\n                    max,\n                    data,\n                }\n            },\n        ],\n    })),\n\n    subscriptions(({ actions }) => ({\n        viewportRange: () => {\n            actions.maybeLoadHeatmap(500)\n        },\n    })),\n\n    listeners(({ actions, values }) => ({\n        fetchHeatmapApi: async () => {\n            const { href, wildcardHref } = values\n            const { date_from, date_to } = values.commonFilters\n            const { type, aggregation } = values.heatmapFilters\n            const urlExact = wildcardHref === href ? href : undefined\n            const urlRegex = wildcardHref !== href ? wildcardHref : undefined\n\n            // toolbar fetch collapses queryparams but this URL has multiple with the same name\n            const response = await toolbarFetch(\n                `/api/heatmap/${encodeParams(\n                    {\n                        type,\n                        date_from,\n                        date_to,\n                        url_exact: urlExact,\n                        url_pattern: urlRegex,\n                        viewport_width_min: values.viewportRange.min,\n                        viewport_width_max: values.viewportRange.max,\n                        aggregation,\n                    },\n                    '?'\n                )}`,\n                'GET'\n            )\n\n            if (response.status === 403) {\n                toolbarConfigLogic.actions.authenticate()\n            }\n\n            if (response.status !== 200) {\n                throw new Error('API error')\n            }\n\n            return await response.json()\n        },\n\n        enableHeatmap: () => {\n            actions.loadAllEnabled()\n            toolbarPosthogJS.capture('toolbar mode triggered', { mode: 'heatmap', enabled: true })\n        },\n\n        disableHeatmap: () => {\n            actions.resetElementStats()\n            toolbarPosthogJS.capture('toolbar mode triggered', { mode: 'heatmap', enabled: false })\n        },\n\n        loadAllEnabled: async ({ delayMs }, breakpoint) => {\n            await breakpoint(delayMs)\n\n            actions.maybeLoadHeatmap()\n            actions.maybeLoadClickmap()\n        },\n\n        maybeLoadClickmap: async ({ delayMs }, breakpoint) => {\n            await breakpoint(delayMs)\n            if (values.heatmapEnabled && values.clickmapsEnabled) {\n                actions.getElementStats()\n            }\n        },\n\n        maybeLoadHeatmap: async ({ delayMs }, breakpoint) => {\n            await breakpoint(delayMs)\n            if (values.heatmapEnabled) {\n                if (values.heatmapFilters.enabled && values.heatmapFilters.type) {\n                    actions.loadHeatmap(values.heatmapFilters.type)\n                }\n            }\n        },\n\n        setHref: () => {\n            actions.loadAllEnabled()\n        },\n        setWildcardHref: () => {\n            actions.loadAllEnabled(1000)\n        },\n        setCommonFilters: () => {\n            actions.loadAllEnabled(200)\n        },\n\n        // Only trigger element stats loading if clickmaps are enabled\n        toggleClickmapsEnabled: () => {\n            if (values.clickmapsEnabled) {\n                actions.getElementStats()\n            }\n        },\n\n        loadMoreElementStats: () => {\n            if (values.elementStats?.next) {\n                actions.getElementStats(values.elementStats.next)\n            }\n        },\n\n        patchHeatmapFilters: ({ filters }) => {\n            if (filters.type) {\n                // Clear the heatmap if the type changes\n                actions.loadHeatmapSuccess({ results: [] })\n            }\n            actions.maybeLoadHeatmap(200)\n        },\n    })),\n\n    afterMount(({ actions, values, cache }) => {\n        actions.loadAllEnabled()\n        cache.keyDownListener = (event: KeyboardEvent) => {\n            if (event.shiftKey && !values.shiftPressed) {\n                actions.setShiftPressed(true)\n            }\n        }\n        cache.keyUpListener = (event: KeyboardEvent) => {\n            if (!event.shiftKey && values.shiftPressed) {\n                actions.setShiftPressed(false)\n            }\n        }\n        window.addEventListener('keydown', cache.keyDownListener)\n        window.addEventListener('keyup', cache.keyUpListener)\n\n        cache.scrollCheckTimer = setInterval(() => {\n            const scrollY = values.posthog?.scrollManager?.scrollY() ?? 0\n            if (values.heatmapScrollY !== scrollY) {\n                actions.setHeatmapScrollY(scrollY)\n            }\n        }, 100)\n    }),\n\n    beforeUnmount(({ cache }) => {\n        window.removeEventListener('keydown', cache.keyDownListener)\n        window.removeEventListener('keyup', cache.keyUpListener)\n        clearInterval(cache.scrollCheckTimer)\n    }),\n])\n", "import { actions, afterMount, beforeUnmount, kea, listeners, path, reducers } from 'kea'\n\nimport type { currentPageLogicType } from './currentPageLogicType'\n\nconst replaceWithWildcard = (part: string): string => {\n    // replace uuids\n    if (part.match(/^([a-f]|[0-9]){8}-([a-f]|[0-9]){4}-([a-f]|[0-9]){4}-([a-f]|[0-9]){4}-([a-f]|[0-9]){12}$/)) {\n        return '*'\n    }\n\n    // replace digits\n    if (part.match(/^[0-9]+$/)) {\n        return '*'\n    }\n\n    // Replace long values\n    if (part.length > 24) {\n        return '*'\n    }\n\n    return part\n}\n\n/**\n * Sometimes we are able to set the href before the posthog init fragment is removed\n * we never want to store it as it will mean the heatmap URL is too specific and doesn't match\n * this ensures we never store it\n */\nexport function withoutPostHogInit(href: string): string {\n    try {\n        // we can't use `new URL(href)` because it behaves differently between browsers\n        // and e.g. converts `https://*.example.com/` to `https://%2A.example.com/`\n        const firstHash = href.indexOf('#')\n        if (firstHash === -1) {\n            return href\n        }\n        return href\n            .replace(/__posthog=\\{[^}]*}[^#]*/, '')\n            .replace('##', '#')\n            .replace(/#$/, '')\n    } catch {\n        return href\n    }\n}\n\nexport const currentPageLogic = kea<currentPageLogicType>([\n    path(['toolbar', 'stats', 'currentPageLogic']),\n    actions(() => ({\n        setHref: (href: string) => ({ href }),\n        setWildcardHref: (href: string) => ({ href }),\n        autoWildcardHref: true,\n    })),\n    reducers(() => ({\n        href: [window.location.href, { setHref: (_, { href }) => withoutPostHogInit(href) }],\n        wildcardHref: [\n            window.location.href,\n            {\n                setHref: (_, { href }) => withoutPostHogInit(href),\n                setWildcardHref: (_, { href }) => withoutPostHogInit(href),\n            },\n        ],\n    })),\n\n    listeners(({ actions, values }) => ({\n        autoWildcardHref: () => {\n            let url = values.wildcardHref\n\n            const urlParts = url.split('?')\n\n            url = urlParts[0]\n                .split('/')\n                .map((part) => replaceWithWildcard(part))\n                .join('/')\n\n            // Iterate over query params and do the same for their values\n            if (urlParts.length > 1) {\n                const queryParams = urlParts[1].split('&')\n                for (let i = 0; i < queryParams.length; i++) {\n                    const [key, value] = queryParams[i].split('=')\n                    queryParams[i] = `${key}=${replaceWithWildcard(value)}`\n                }\n                url = `${url}?${queryParams.join('&')}`\n            }\n\n            actions.setWildcardHref(url)\n        },\n    })),\n\n    afterMount(({ actions, values, cache }) => {\n        // an earlier bug means that some folk have a bad URL saved\n        // this auto-fixes things for those folks\n        // to save us having to explain the fix individually\n        // can be removed by end of Nov 2024\n        if (values.href && values.href.includes('#__posthog=')) {\n            actions.setHref(withoutPostHogInit(values.href))\n        }\n\n        cache.interval = window.setInterval(() => {\n            if (window.location.href !== values.href) {\n                actions.setHref(window.location.href)\n            }\n        }, 500)\n    }),\n\n    beforeUnmount(({ cache }) => {\n        window.clearInterval(cache.interval)\n    }),\n])\n", "import { actions, afterMount, connect, kea, listeners, path, props, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport { actionToUrl, router, urlToAction } from 'kea-router'\nimport api from 'lib/api'\nimport {\n    authorizedUrlListLogic,\n    AuthorizedUrlListType,\n    defaultAuthorizedUrlProperties,\n} from 'lib/components/AuthorizedUrlList/authorizedUrlListLogic'\nimport { CommonFilters, HeatmapFilters, HeatmapFixedPositionMode } from 'lib/components/heatmaps/types'\nimport {\n    calculateViewportRange,\n    DEFAULT_HEATMAP_FILTERS,\n    PostHogAppToolbarEvent,\n} from 'lib/components/IframedToolbarBrowser/utils'\nimport { LemonBannerProps } from 'lib/lemon-ui/LemonBanner'\nimport { objectsEqual } from 'lib/utils'\nimport posthog from 'posthog-js'\nimport { RefObject } from 'react'\n\nimport { HogQLQuery, NodeKind } from '~/queries/schema/schema-general'\nimport { hogql } from '~/queries/utils'\n\nimport type { heatmapsBrowserLogicType } from './heatmapsBrowserLogicType'\n\nexport type HeatmapsBrowserLogicProps = {\n    iframeRef: RefObject<HTMLIFrameElement | null>\n}\n\nexport interface IFrameBanner {\n    level: LemonBannerProps['type']\n    message: string | JSX.Element\n}\n\n// team id is always available on window\nconst teamId = window.POSTHOG_APP_CONTEXT?.current_team?.id\n\nexport const heatmapsBrowserLogic = kea<heatmapsBrowserLogicType>([\n    path(['scenes', 'heatmaps', 'heatmapsBrowserLogic']),\n    props({} as HeatmapsBrowserLogicProps),\n\n    connect({\n        values: [\n            authorizedUrlListLogic({\n                ...defaultAuthorizedUrlProperties,\n                type: AuthorizedUrlListType.TOOLBAR_URLS,\n            }),\n            ['urlsKeyed', 'checkUrlIsAuthorized'],\n        ],\n    }),\n\n    actions({\n        setBrowserSearch: (searchTerm: string) => ({ searchTerm }),\n        setBrowserUrl: (url: string | null) => ({ url }),\n        onIframeLoad: true,\n        sendToolbarMessage: (type: PostHogAppToolbarEvent, payload?: Record<string, any>) => ({\n            type,\n            payload,\n        }),\n        loadTopUrls: true,\n        maybeLoadTopUrls: true,\n        loadBrowserSearchResults: true,\n        // TRICKY: duplicated with the heatmapLogic so that we can share the settings picker\n        patchHeatmapFilters: (filters: Partial<HeatmapFilters>) => ({ filters }),\n        setHeatmapColorPalette: (Palette: string | null) => ({ Palette }),\n        setHeatmapFixedPositionMode: (mode: HeatmapFixedPositionMode) => ({ mode }),\n        setCommonFilters: (filters: CommonFilters) => ({ filters }),\n        // TRICKY: duplication ends\n        setIframeWidth: (width: number | null) => ({ width }),\n        toggleFilterPanelCollapsed: true,\n        setIframeBanner: (banner: IFrameBanner | null) => ({ banner }),\n        startTrackingLoading: true,\n        stopTrackingLoading: true,\n    }),\n\n    loaders(({ values }) => ({\n        browserSearchResults: [\n            null as string[] | null,\n            {\n                loadBrowserSearchResults: async () => {\n                    if (!values.browserSearchTerm) {\n                        return []\n                    }\n\n                    const query: HogQLQuery = {\n                        kind: NodeKind.HogQLQuery,\n                        query: hogql`SELECT distinct properties.$current_url AS urls\n                                     FROM events\n                                     WHERE timestamp >= now() - INTERVAL 7 DAY\n                                       AND timestamp <= now()\n                                       AND properties.$current_url like '%${hogql.identifier(\n                                           values.browserSearchTerm\n                                       )}%'\n                                     ORDER BY timestamp DESC\n                                         limit 100`,\n                    }\n\n                    const res = await api.query(query)\n\n                    return res.results?.map((x) => x[0]) as string[]\n                },\n            },\n        ],\n\n        topUrls: [\n            null as { url: string; count: number }[] | null,\n            {\n                loadTopUrls: async () => {\n                    const query: HogQLQuery = {\n                        kind: NodeKind.HogQLQuery,\n                        query: hogql`SELECT properties.$current_url AS url, count() as count\n                                     FROM events\n                                     WHERE timestamp >= now() - INTERVAL 7 DAY\n                                       AND event in ('$pageview'\n                                         , '$autocapture')\n                                       AND timestamp <= now()\n                                     GROUP BY properties.$current_url\n                                     ORDER BY count DESC\n                                         LIMIT 10`,\n                    }\n\n                    const res = await api.query(query)\n\n                    return res.results?.map((x) => ({ url: x[0], count: x[1] })) as { url: string; count: number }[]\n                },\n            },\n        ],\n    })),\n\n    reducers({\n        filterPanelCollapsed: [\n            false as boolean,\n            { persist: true },\n            {\n                toggleFilterPanelCollapsed: (state) => !state,\n            },\n        ],\n        // they're called common filters in the toolbar because they're shared between heatmaps and clickmaps\n        // the name is continued here since they're passed down into the embedded iframe\n        commonFilters: [\n            { date_from: '-7d' } as CommonFilters,\n            {\n                setCommonFilters: (_, { filters }) => filters,\n            },\n        ],\n        heatmapColorPalette: [\n            'default' as string | null,\n            {\n                setHeatmapColorPalette: (_, { Palette }) => Palette,\n            },\n        ],\n        heatmapFilters: [\n            DEFAULT_HEATMAP_FILTERS,\n            {\n                patchHeatmapFilters: (state, { filters }) => ({ ...state, ...filters }),\n            },\n        ],\n        heatmapFixedPositionMode: [\n            'fixed' as HeatmapFixedPositionMode,\n            {\n                setHeatmapFixedPositionMode: (_, { mode }) => mode,\n            },\n        ],\n        iframeWidth: [\n            null as number | null,\n            {\n                setIframeWidth: (_, { width }) => width,\n            },\n        ],\n        browserSearchTerm: [\n            '',\n            {\n                setBrowserSearch: (_, { searchTerm }) => searchTerm,\n            },\n        ],\n        browserUrl: [\n            null as string | null,\n            { persist: true, prefix: `${teamId}__` },\n            {\n                setBrowserUrl: (_, { url }) => url,\n            },\n        ],\n        loading: [\n            false as boolean,\n            {\n                setBrowserUrl: (state, { url }) => (url?.trim().length ? true : state),\n                setIframeBanner: (state, { banner }) => (banner?.level == 'error' ? false : state),\n                startTrackingLoading: () => true,\n                stopTrackingLoading: () => false,\n            },\n        ],\n        iframeBanner: [\n            null as IFrameBanner | null,\n            {\n                setIframeBanner: (_, { banner }) => banner,\n            },\n        ],\n    }),\n\n    selectors({\n        browserUrlSearchOptions: [\n            (s) => [s.browserSearchResults, s.topUrls, s.browserSearchTerm],\n            (browserSearchResults, topUrls, browserSearchTerm) => {\n                return browserSearchTerm ? browserSearchResults : topUrls?.map((x) => x.url) ?? []\n            },\n        ],\n\n        isBrowserUrlAuthorized: [\n            (s) => [s.browserUrl, s.checkUrlIsAuthorized],\n            (browserUrl, checkUrlIsAuthorized) => {\n                if (!browserUrl) {\n                    return false\n                }\n                return checkUrlIsAuthorized(browserUrl)\n            },\n        ],\n\n        viewportRange: [\n            (s) => [s.heatmapFilters, s.iframeWidth],\n            (heatmapFilters, iframeWidth) => {\n                return iframeWidth ? calculateViewportRange(heatmapFilters, iframeWidth) : { min: 0, max: 1800 }\n            },\n        ],\n\n        noPageviews: [\n            (s) => [s.topUrlsLoading, s.topUrls],\n            (topUrlsLoading, topUrls) => !topUrlsLoading && (!topUrls || topUrls.length === 0),\n        ],\n    }),\n\n    listeners(({ actions, cache, props, values }) => ({\n        setBrowserSearch: async (_, breakpoint) => {\n            await breakpoint(200)\n            actions.loadBrowserSearchResults()\n        },\n\n        sendToolbarMessage: ({ type, payload }) => {\n            props.iframeRef?.current?.contentWindow?.postMessage(\n                {\n                    type,\n                    payload,\n                },\n                '*'\n            )\n        },\n\n        patchHeatmapFilters: ({ filters }) => {\n            actions.sendToolbarMessage(PostHogAppToolbarEvent.PH_PATCH_HEATMAP_FILTERS, { filters })\n        },\n\n        setHeatmapFixedPositionMode: ({ mode }) => {\n            actions.sendToolbarMessage(PostHogAppToolbarEvent.PH_HEATMAPS_FIXED_POSITION_MODE, {\n                fixedPositionMode: mode,\n            })\n        },\n\n        setHeatmapColorPalette: ({ Palette }) => {\n            actions.sendToolbarMessage(PostHogAppToolbarEvent.PH_HEATMAPS_COLOR_PALETTE, {\n                colorPalette: Palette,\n            })\n        },\n\n        setCommonFilters: ({ filters }) => {\n            actions.sendToolbarMessage(PostHogAppToolbarEvent.PH_HEATMAPS_COMMON_FILTERS, { commonFilters: filters })\n        },\n\n        onIframeLoad: () => {\n            // we get this callback whether the iframe loaded successfully or not\n            // and don't get a signal if the load was successful, so we have to check\n            // but there's no slam dunk way to do that\n\n            const init = (): void => {\n                actions.sendToolbarMessage(PostHogAppToolbarEvent.PH_APP_INIT, {\n                    filters: values.heatmapFilters,\n                    colorPalette: values.heatmapColorPalette,\n                    fixedPositionMode: values.heatmapFixedPositionMode,\n                    commonFilters: values.commonFilters,\n                })\n                actions.sendToolbarMessage(PostHogAppToolbarEvent.PH_HEATMAPS_CONFIG, {\n                    enabled: true,\n                })\n            }\n\n            const onIframeMessage = (e: MessageEvent): void => {\n                const type: PostHogAppToolbarEvent = e?.data?.type\n\n                if (!type || !type.startsWith('ph-')) {\n                    return\n                }\n                if (!values.checkUrlIsAuthorized(e.origin)) {\n                    console.warn(\n                        'ignoring message from iframe with origin not in authorized toolbar urls',\n                        e.origin,\n                        e.data\n                    )\n                    return\n                }\n\n                switch (type) {\n                    case PostHogAppToolbarEvent.PH_TOOLBAR_INIT:\n                        return init()\n                    case PostHogAppToolbarEvent.PH_TOOLBAR_READY:\n                        posthog.capture('in-app heatmap frame loaded', {\n                            inapp_heatmap_page_url_visited: values.browserUrl,\n                            inapp_heatmap_filters: values.heatmapFilters,\n                            inapp_heatmap_color_palette: values.heatmapColorPalette,\n                            inapp_heatmap_fixed_position_mode: values.heatmapFixedPositionMode,\n                        })\n                        // reset loading tracking - if we're e.g. slow this will avoid a flash of warning message\n                        return actions.startTrackingLoading()\n                    case PostHogAppToolbarEvent.PH_TOOLBAR_HEATMAP_LOADING:\n                        return actions.startTrackingLoading()\n                    case PostHogAppToolbarEvent.PH_TOOLBAR_HEATMAP_LOADED:\n                        posthog.capture('in-app heatmap loaded', {\n                            inapp_heatmap_page_url_visited: values.browserUrl,\n                            inapp_heatmap_filters: values.heatmapFilters,\n                            inapp_heatmap_color_palette: values.heatmapColorPalette,\n                            inapp_heatmap_fixed_position_mode: values.heatmapFixedPositionMode,\n                        })\n                        return actions.stopTrackingLoading()\n                    case PostHogAppToolbarEvent.PH_TOOLBAR_HEATMAP_FAILED:\n                        posthog.capture('in-app heatmap failed', {\n                            inapp_heatmap_page_url_visited: values.browserUrl,\n                            inapp_heatmap_filters: values.heatmapFilters,\n                            inapp_heatmap_color_palette: values.heatmapColorPalette,\n                            inapp_heatmap_fixed_position_mode: values.heatmapFixedPositionMode,\n                        })\n                        actions.stopTrackingLoading()\n                        actions.setIframeBanner({ level: 'error', message: 'The heatmap failed to load.' })\n                        return\n                    default:\n                        console.warn(`[PostHog Heatmaps] Received unknown child window message: ${type}`)\n                }\n            }\n\n            window.addEventListener('message', onIframeMessage, false)\n            // We call init in case the toolbar got there first (unlikely)\n            init()\n        },\n\n        maybeLoadTopUrls: () => {\n            if (!values.topUrls && !values.topUrlsLoading) {\n                actions.loadTopUrls()\n            }\n        },\n\n        setBrowserUrl: ({ url }) => {\n            actions.maybeLoadTopUrls()\n            if (url?.trim().length) {\n                actions.startTrackingLoading()\n            }\n        },\n\n        startTrackingLoading: () => {\n            actions.setIframeBanner(null)\n\n            clearTimeout(cache.errorTimeout)\n            cache.errorTimeout = setTimeout(() => {\n                actions.setIframeBanner({ level: 'error', message: 'The heatmap failed to load (or is very slow).' })\n            }, 7500)\n\n            clearTimeout(cache.warnTimeout)\n            cache.warnTimeout = setTimeout(() => {\n                actions.setIframeBanner({ level: 'warning', message: 'Still waiting for the toolbar to load.' })\n            }, 3000)\n        },\n\n        stopTrackingLoading: () => {\n            actions.setIframeBanner(null)\n\n            clearTimeout(cache.errorTimeout)\n            clearTimeout(cache.warnTimeout)\n        },\n    })),\n\n    afterMount(({ actions, values }) => {\n        if (values.browserUrl?.trim().length) {\n            actions.startTrackingLoading()\n        } else {\n            actions.maybeLoadTopUrls()\n        }\n    }),\n\n    urlToAction(({ actions, values }) => ({\n        '/heatmaps': (_, searchParams) => {\n            if (searchParams.pageURL && searchParams.pageURL !== values.browserUrl) {\n                actions.setBrowserUrl(searchParams.pageURL)\n            }\n            if (searchParams.heatmapFilters && !objectsEqual(searchParams.heatmapFilters, values.heatmapFilters)) {\n                actions.patchHeatmapFilters(searchParams.heatmapFilters)\n            }\n            if (searchParams.heatmapPalette && searchParams.heatmapPalette !== values.heatmapColorPalette) {\n                actions.setHeatmapColorPalette(searchParams.heatmapPalette)\n            }\n            if (\n                searchParams.heatmapFixedPositionMode &&\n                searchParams.heatmapFixedPositionMode !== values.heatmapFixedPositionMode\n            ) {\n                actions.setHeatmapFixedPositionMode(searchParams.heatmapFixedPositionMode as HeatmapFixedPositionMode)\n            }\n            if (searchParams.commonFilters && !objectsEqual(searchParams.commonFilters, values.commonFilters)) {\n                actions.setCommonFilters(searchParams.commonFilters as CommonFilters)\n            }\n        },\n    })),\n\n    actionToUrl(({ values }) => ({\n        setBrowserUrl: ({ url }) => {\n            const searchParams = { ...router.values.searchParams, pageURL: url }\n            if (!url || url.trim() === '') {\n                delete searchParams.pageURL\n            }\n            return [router.values.location.pathname, searchParams, router.values.hashParams, { replace: true }]\n        },\n        patchHeatmapFilters: () => {\n            const searchParams = { ...router.values.searchParams, heatmapFilters: values.heatmapFilters }\n            return [router.values.location.pathname, searchParams, router.values.hashParams, { replace: true }]\n        },\n        setHeatmapColorPalette: ({ Palette }) => {\n            const searchParams = { ...router.values.searchParams, heatmapPalette: Palette }\n            return [router.values.location.pathname, searchParams, router.values.hashParams, { replace: true }]\n        },\n        setHeatmapFixedPositionMode: ({ mode }) => {\n            const searchParams = { ...router.values.searchParams, heatmapFixedPositionMode: mode }\n            return [router.values.location.pathname, searchParams, router.values.hashParams, { replace: true }]\n        },\n        setCommonFilters: ({ filters }) => {\n            const searchParams = { ...router.values.searchParams, commonFilters: filters }\n            return [router.values.location.pathname, searchParams, router.values.hashParams, { replace: true }]\n        },\n    })),\n])\n", "import { kea, path } from 'kea'\n\nimport type { heatmapsSceneLogicType } from './heatmapsSceneLogicType'\n\nexport const heatmapsSceneLogic = kea<heatmapsSceneLogicType>([path(['scenes', 'heatmaps', 'heatmapsSceneLogic'])])\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "import_kea_router", "import_kea_subscriptions", "import_kea_window_values", "init_dirname", "init_buffer", "init_process", "import_kea", "replaceWithWildcard", "part", "withoutPostHogInit", "href", "currentPageLogic", "_", "actions", "values", "url", "urlParts", "queryParams", "i", "key", "value", "cache", "doesVersionSupportScrollDepth", "createVersionChecker", "emptyElementsStatsPages", "HEATMAP_COLOR_PALETTE_OPTIONS", "heatmapLogic", "currentPageLogic", "toolbarConfigLogic", "url", "shiftPressed", "filters", "enabled", "matchLinksByHref", "type", "delayMs", "params", "scrollY", "mode", "Palette", "window", "_", "elementStats", "DEFAULT_HEATMAP_FILTERS", "state", "values", "breakpoint", "href", "wildcardHref", "defaultUrl", "escapeRegex", "response", "toolbarFetch", "paginatedResults", "date_from", "date_to", "aggregation", "cache", "s", "commonFilters", "dateFilterToText", "dataAttributes", "collectAllElementsDeep", "elements", "event", "combinedSelector", "lastSelector", "i", "element", "selector", "elementToSelector", "domElements", "querySelectorAllDeep", "e", "clickmapsEnabled", "normalisedElements", "countedElement", "trimmedElement", "trimElement", "existing", "elementToActionStep", "countedElements", "a", "b", "rawHeatmap", "heatmapFilters", "windowWidth", "calculateViewportRange", "posthog", "posthogVersion", "isSupported", "isDisabled", "heatmapElements", "heatmapScrollY", "heatmapFixedPositionMode", "data", "acc", "y", "x", "max", "value", "actions", "toolbarPosthogJS", "import_jsx_runtime", "ScrollDepthJSWarning", "scrollDepthPosthogJsError", "heatmapLogic", "SectionSetting", "children", "title", "info", "showInfo", "setShowInfo", "LemonLabel", "LemonButton", "IconInfo", "HeatmapsSettings", "heatmapFilters", "patchHeatmapFilters", "viewportRange", "heatmapColorPalette", "setHeatmapColorPalette", "heatmapFixedPositionMode", "setHeatmapFixedPositionMode", "LemonSelect", "e", "LemonSegmentedButton", "LemonSlider", "value", "HEATMAP_COLOR_PALETTE_OPTIONS", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "import_kea_router", "teamId", "heatmapsBrowserLogic", "authorizedUrlListLogic", "defaultAuthorizedUrlProperties", "searchTerm", "url", "type", "payload", "filters", "Palette", "mode", "width", "banner", "values", "query", "hogql", "api_default", "x", "state", "_", "DEFAULT_HEATMAP_FILTERS", "s", "browserSearchResults", "topUrls", "browserSearchTerm", "browserUrl", "checkUrlIsAuthorized", "heatmapFilters", "iframeWidth", "calculateViewportRange", "topUrlsLoading", "actions", "cache", "props", "breakpoint", "init", "onIframeMessage", "e", "Co", "searchParams", "objectsEqual", "import_jsx_runtime", "UrlSearchHeader", "logic", "heatmapsBrowserLogic", "browserUrlSearchOptions", "browserUrl", "setBrowserSearch", "setBrowserUrl", "placeholderUrl", "LemonInputSelect", "e", "v", "x", "LemonButton", "IconOpenInNew", "appEditorUrl", "HeatmapsBrowserIntro", "topUrls", "topUrlsLoading", "noPageviews", "DetectiveHog", "LemonSkeleton", "LemonBanner", "url", "ForbiddenURL", "AuthorizedUrlList", "FilterPanel", "heatmapFilters", "heatmapColorPalette", "heatmapFixedPositionMode", "viewportRange", "commonFilters", "filterPanelCollapsed", "patchHeatmapFilters", "setHeatmapColorPalette", "setHeatmapFixedPositionMode", "setCommonFilters", "toggleFilterPanelCollapsed", "clsx", "Tooltip", "IconChevronRight", "IconCollapse", "DateFilter", "fromDate", "toDate", "heatmapDateOptions", "HeatmapsSettings", "IframeErrorOverlay", "iframeBanner", "LoadingOverlay", "Spinner", "EmbeddedHeatmapBrowser", "iframeRef", "loading", "onIframeLoad", "setIframeWidth", "iframeWidth", "useResizeObserver", "Warnings", "currentTeam", "teamLogic", "heatmapsEnabled", "openSettingsPanel", "sidePanelSettingsLogic", "IconGear", "HeatmapsBrowser", "logicProps", "isBrowserUrlAuthorized", "init_dirname", "init_buffer", "init_process", "import_kea", "heatmapsSceneLogic", "import_jsx_runtime", "scene", "HeatmapsScene", "heatmapsSceneLogic", "HeatmapsBrowser"]
}
