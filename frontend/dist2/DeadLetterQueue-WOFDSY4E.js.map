{
  "version": 3,
  "sources": ["../src/scenes/instance/DeadLetterQueue/DeadLetterQueue.tsx", "../src/scenes/instance/DeadLetterQueue/deadLetterQueueLogic.ts", "../src/scenes/instance/DeadLetterQueue/MetricsTab.tsx"],
  "sourcesContent": ["import { useActions, useValues } from 'kea'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { LemonTabs } from 'lib/lemon-ui/LemonTabs'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { deadLetterQueueLogic, DeadLetterQueueTab } from './deadLetterQueueLogic'\nimport { MetricsTab } from './MetricsTab'\n\nexport const scene: SceneExport = {\n    component: DeadLetterQueue,\n    logic: deadLetterQueueLogic,\n}\n\nexport function DeadLetterQueue(): JSX.Element {\n    const { user } = useValues(userLogic)\n    const { activeTab } = useValues(deadLetterQueueLogic)\n    const { setActiveTab } = useActions(deadLetterQueueLogic)\n\n    if (!user?.is_staff) {\n        return (\n            <PageHeader\n                caption={\n                    <>\n                        <p>\n                            Only users with staff access can manage the dead letter queue. Please contact your instance\n                            admin.\n                        </p>\n                        <p>\n                            If you're an admin and don't have access, set <code>is_staff=true</code> for your user on\n                            the PostgreSQL <code>posthog_user</code> table.\n                        </p>\n                    </>\n                }\n            />\n        )\n    }\n\n    return (\n        <div>\n            <PageHeader\n                caption={\n                    <>\n                        <p>Manage your instance's dead letter queue.</p>\n                    </>\n                }\n            />\n\n            <LemonTabs\n                activeKey={activeTab}\n                onChange={(key) => setActiveTab(key as DeadLetterQueueTab)}\n                tabs={[{ label: 'Metrics', key: DeadLetterQueueTab.Metrics }]}\n            />\n\n            {activeTab === DeadLetterQueueTab.Metrics ? <MetricsTab /> : null}\n        </div>\n    )\n}\n", "import { actions, afterMount, kea, listeners, path, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { SystemStatusRow } from './../../../types'\nimport type { deadLetterQueueLogicType } from './deadLetterQueueLogicType'\nexport type TabName = 'overview' | 'internal_metrics'\n\nexport enum DeadLetterQueueTab {\n    Metrics = 'metrics',\n    Management = 'management',\n    Settings = 'settings',\n}\n\nexport interface DeadLetterQueueMetricRow extends SystemStatusRow {\n    key: string\n}\n\nexport const deadLetterQueueLogic = kea<deadLetterQueueLogicType>([\n    path(['scenes', 'instance', 'DeadLetterQueue', 'deadLetterQueueLogic']),\n\n    actions({\n        setActiveTab: (tabKey: DeadLetterQueueTab) => ({ tabKey }),\n        loadMoreRows: (key: string) => ({ key }),\n        addRowsToMetric: (key: string, rows: string[][][]) => ({ key, rows }),\n    }),\n\n    reducers({\n        activeTab: [\n            DeadLetterQueueTab.Metrics as DeadLetterQueueTab,\n            {\n                setActiveTab: (_, { tabKey }) => tabKey,\n            },\n        ],\n        rowsPerMetric: [\n            {} as Record<string, string[][][]>,\n            {\n                addRowsToMetric: (state: Record<string, string[][][]>, { key, rows }) => {\n                    return { ...state, [key]: [...(state[key] || []), ...rows] }\n                },\n                loadDeadLetterQueueMetricsSuccess: (_, { deadLetterQueueMetrics }) => {\n                    const rowsPerMetric = {}\n                    for (const metric of deadLetterQueueMetrics) {\n                        if (metric.subrows) {\n                            rowsPerMetric[metric.key] = metric.subrows.rows\n                        }\n                    }\n                    return rowsPerMetric\n                },\n            },\n        ],\n    }),\n\n    loaders({\n        deadLetterQueueMetrics: [\n            [] as DeadLetterQueueMetricRow[],\n            {\n                loadDeadLetterQueueMetrics: async () => {\n                    if (!userLogic.values.user?.is_staff) {\n                        return []\n                    }\n                    return (await api.get('api/dead_letter_queue')).results\n                },\n            },\n        ],\n    }),\n\n    listeners(({ values, actions }) => ({\n        loadMoreRows: async ({ key }) => {\n            const offset = values.rowsPerMetric[key]?.length + 1\n            if (offset) {\n                const res = await api.get(`api/dead_letter_queue/${key}?offset=${offset}`)\n                actions.addRowsToMetric(key, res.subrows.rows)\n            }\n        },\n    })),\n\n    selectors({\n        singleValueMetrics: [\n            (s) => [s.deadLetterQueueMetrics],\n            (deadLetterQueueMetrics: DeadLetterQueueMetricRow[]) =>\n                deadLetterQueueMetrics.filter((metric) => !metric.subrows),\n        ],\n        tableMetrics: [\n            (s) => [s.deadLetterQueueMetrics],\n            (deadLetterQueueMetrics: DeadLetterQueueMetricRow[]) =>\n                deadLetterQueueMetrics.filter((metric) => !!metric.subrows),\n        ],\n    }),\n\n    afterMount(({ actions }) => {\n        actions.loadDeadLetterQueueMetrics()\n    }),\n])\n", "import { LemonDivider } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { IconRefresh } from 'lib/lemon-ui/icons'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonTable } from 'lib/lemon-ui/LemonTable'\nimport { Spinner } from 'lib/lemon-ui/Spinner/Spinner'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { deadLetterQueueLogic } from './deadLetterQueueLogic'\n\n// keep in sync with posthog/api/dead_letter_queue.py\nconst ROWS_LIMIT = 10\n\nexport function MetricsTab(): JSX.Element {\n    const { user } = useValues(userLogic)\n    const { singleValueMetrics, tableMetrics, deadLetterQueueMetricsLoading, rowsPerMetric } =\n        useValues(deadLetterQueueLogic)\n    const { loadDeadLetterQueueMetrics, loadMoreRows } = useActions(deadLetterQueueLogic)\n\n    if (!user?.is_staff) {\n        return <></>\n    }\n\n    return (\n        <div>\n            <br />\n\n            <div className=\"mb-4 float-right\">\n                <LemonButton\n                    icon={deadLetterQueueMetricsLoading ? <Spinner /> : <IconRefresh />}\n                    onClick={loadDeadLetterQueueMetrics}\n                    type=\"secondary\"\n                    size=\"small\"\n                >\n                    Refresh\n                </LemonButton>\n            </div>\n\n            <div className=\"flex space-x-8 mb-4\">\n                {singleValueMetrics.map((row) => (\n                    <div key={row.key} className=\"space-y-1\">\n                        <div>{row.metric}</div>\n                        <div className=\"text-2xl\">{(row.value || '0').toLocaleString('en-US')}</div>\n                    </div>\n                ))}\n            </div>\n\n            {tableMetrics.map((row) => (\n                <div key={row.key}>\n                    <h2>{row.metric}</h2>\n                    <LemonTable\n                        columns={[\n                            {\n                                title: row.subrows?.columns[0],\n                                dataIndex: 'key',\n                            },\n                            {\n                                title: row.subrows?.columns[1],\n                                dataIndex: 'value',\n                            },\n                        ]}\n                        dataSource={rowsPerMetric[row.key].map(([key, value]) => ({ key, value })) || []}\n                        loading={deadLetterQueueMetricsLoading}\n                        defaultSorting={{\n                            columnKey: 'value',\n                            order: -1,\n                        }}\n                        embedded\n                    />\n                    <div className=\"flex justify-center m-4 text-center\">\n                        <LemonButton\n                            disabledReason={rowsPerMetric[row.key].length % ROWS_LIMIT !== 0 && 'No more values'}\n                            onClick={() => loadMoreRows(row.key)}\n                        >\n                            Load more values\n                        </LemonButton>\n                    </div>\n                    <LemonDivider />\n                </div>\n            ))}\n        </div>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "deadLetterQueueLogic", "tabKey", "key", "rows", "_", "state", "deadLetterQueueMetrics", "rowsPerMetric", "metric", "userLogic", "api_default", "values", "actions", "offset", "res", "s", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "ROWS_LIMIT", "MetricsTab", "user", "userLogic", "singleValueMetrics", "tableMetrics", "deadLetterQueueMetricsLoading", "rowsPerMetric", "deadLetterQueueLogic", "loadDeadLetterQueueMetrics", "loadMoreRows", "LemonButton", "Spinner", "IconRefresh", "row", "LemonTable", "key", "value", "LemonDivider", "import_jsx_runtime", "scene", "DeadLetterQueue", "deadLetterQueueLogic", "user", "userLogic", "activeTab", "setActiveTab", "PageHeader", "LemonTabs", "key", "MetricsTab"]
}
