{
  "version": 3,
  "sources": ["../src/scenes/web-analytics/WebAnalyticsScene.tsx", "../src/scenes/web-analytics/WebAnalyticsDashboard.tsx", "../src/lib/lemon-ui/LemonSegmentedSelect/LemonSegmentedSelect.tsx", "../src/scenes/web-analytics/tiles/WebAnalyticsErrorTracking.tsx", "../src/scenes/web-analytics/tiles/WebAnalyticsRecordings.tsx", "../src/scenes/web-analytics/tiles/WebAnalyticsTile.tsx", "../src/scenes/web-analytics/CrossSellButtons/HeatmapButton.tsx", "../src/scenes/web-analytics/CrossSellButtons/ReplayButton.tsx", "../src/scenes/web-analytics/WebAnalyticsHealthCheck.tsx", "../src/scenes/web-analytics/WebAnalyticsModal.tsx", "../src/scenes/web-analytics/WebPropertyFilters.tsx", "../src/scenes/web-analytics/WebConversionGoal.tsx", "../src/scenes/web-analytics/TableSortingIndicator.tsx", "../src/scenes/web-analytics/WebAnalyticsLiveUserCount.tsx", "../src/scenes/web-analytics/liveWebAnalyticsLogic.tsx", "../src/scenes/web-analytics/WebAnalyticsMenu.tsx"],
  "sourcesContent": ["import { PageHeader } from 'lib/components/PageHeader'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { WebAnalyticsDashboard } from 'scenes/web-analytics/WebAnalyticsDashboard'\nimport { webAnalyticsLogic } from 'scenes/web-analytics/webAnalyticsLogic'\nimport { WebAnalyticsMenu } from 'scenes/web-analytics/WebAnalyticsMenu'\n\nexport function WebAnalyticsScene(): JSX.Element {\n    return (\n        <>\n            <PageHeader buttons={<WebAnalyticsMenu />} />\n\n            <WebAnalyticsDashboard />\n        </>\n    )\n}\n\nexport const scene: SceneExport = {\n    component: WebAnalyticsScene,\n    logic: webAnalyticsLogic,\n}\n", "import { IconExpand45, IconGear, IconInfo, IconOpenSidebar, IconX } from '@posthog/icons'\nimport { LemonSwitch, Tooltip } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { BindLogic, useActions, useValues } from 'kea'\nimport { CompareFilter } from 'lib/components/CompareFilter/CompareFilter'\nimport { DateFilter } from 'lib/components/DateFilter/DateFilter'\nimport { VersionCheckerBanner } from 'lib/components/VersionChecker/VersionCheckerBanner'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { IconBranch, IconOpenInNew } from 'lib/lemon-ui/icons'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonSegmentedSelect } from 'lib/lemon-ui/LemonSegmentedSelect/LemonSegmentedSelect'\nimport { LemonTabs } from 'lib/lemon-ui/LemonTabs'\nimport { Link, PostHogComDocsURL } from 'lib/lemon-ui/Link/Link'\nimport { Popover } from 'lib/lemon-ui/Popover'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { isNotNil } from 'lib/utils'\nimport { addProductIntentForCrossSell, ProductIntentContext } from 'lib/utils/product-intents'\nimport React, { useState } from 'react'\nimport { urls } from 'scenes/urls'\nimport { userLogic } from 'scenes/userLogic'\nimport { WebAnalyticsErrorTrackingTile } from 'scenes/web-analytics/tiles/WebAnalyticsErrorTracking'\nimport { WebAnalyticsRecordingsTile } from 'scenes/web-analytics/tiles/WebAnalyticsRecordings'\nimport { WebQuery } from 'scenes/web-analytics/tiles/WebAnalyticsTile'\nimport { WebAnalyticsHealthCheck } from 'scenes/web-analytics/WebAnalyticsHealthCheck'\nimport {\n    ProductTab,\n    QueryTile,\n    TabsTile,\n    TileId,\n    WEB_ANALYTICS_DATA_COLLECTION_NODE_ID,\n    webAnalyticsLogic,\n} from 'scenes/web-analytics/webAnalyticsLogic'\nimport { WebAnalyticsModal } from 'scenes/web-analytics/WebAnalyticsModal'\nimport { WebConversionGoal } from 'scenes/web-analytics/WebConversionGoal'\nimport { WebPropertyFilters } from 'scenes/web-analytics/WebPropertyFilters'\n\nimport { navigationLogic } from '~/layout/navigation/navigationLogic'\nimport { dataNodeCollectionLogic } from '~/queries/nodes/DataNode/dataNodeCollectionLogic'\nimport { ReloadAll } from '~/queries/nodes/DataNode/Reload'\nimport { QuerySchema } from '~/queries/schema/schema-general'\nimport { AvailableFeature, ProductKey, PropertyMathType } from '~/types'\n\nimport { TableSortingIndicator } from './TableSortingIndicator'\nimport { WebAnalyticsLiveUserCount } from './WebAnalyticsLiveUserCount'\n\nconst Filters = (): JSX.Element => {\n    const {\n        webAnalyticsFilters,\n        dateFilter: { dateTo, dateFrom },\n        compareFilter,\n        productTab,\n        webVitalsPercentile,\n    } = useValues(webAnalyticsLogic)\n    const { setWebAnalyticsFilters, setDates, setCompareFilter, setWebVitalsPercentile } = useActions(webAnalyticsLogic)\n\n    const { hasAvailableFeature } = useValues(userLogic)\n    const hasAdvancedPaths = hasAvailableFeature(AvailableFeature.PATHS_ADVANCED)\n\n    const webPropertyFilters = (\n        <WebPropertyFilters setWebAnalyticsFilters={setWebAnalyticsFilters} webAnalyticsFilters={webAnalyticsFilters} />\n    )\n\n    return (\n        <div className=\"flex flex-row flex-wrap gap-2 md:[&>*]:grow-0 [&>*]:grow\">\n            <DateFilter dateFrom={dateFrom} dateTo={dateTo} onChange={setDates} allowTimePrecision={true} />\n\n            {productTab === ProductTab.ANALYTICS ? (\n                <>\n                    <CompareFilter compareFilter={compareFilter} updateCompareFilter={setCompareFilter} />\n                    <WebConversionGoal />\n                    <TableSortingIndicator />\n                </>\n            ) : (\n                <LemonSegmentedSelect\n                    size=\"small\"\n                    value={webVitalsPercentile}\n                    onChange={setWebVitalsPercentile}\n                    options={[\n                        { value: PropertyMathType.P75, label: 'P75' },\n                        {\n                            value: PropertyMathType.P90,\n                            label: (\n                                <Tooltip title=\"P90 is recommended by the standard as a good baseline\" delayMs={0}>\n                                    P90\n                                </Tooltip>\n                            ),\n                        },\n                        { value: PropertyMathType.P99, label: 'P99' },\n                    ]}\n                />\n            )}\n\n            {hasAdvancedPaths && <PathCleaningToggle />}\n\n            {/* Desktop filters, rendered to the left of the reload button */}\n            <div className=\"hidden md:block\">{webPropertyFilters}</div>\n\n            {/* Reload is right aligned on bigger screens, looks nicer */}\n            <div className=\"xl:ml-auto\">\n                <ReloadAll />\n            </div>\n\n            {/* Mobile filters, same as above but these ones are rendered under the reload button */}\n            <div className=\"block md:hidden\">{webPropertyFilters}</div>\n        </div>\n    )\n}\n\nconst PathCleaningToggle = (): JSX.Element => {\n    const { isPathCleaningEnabled } = useValues(webAnalyticsLogic)\n    const { setIsPathCleaningEnabled } = useActions(webAnalyticsLogic)\n\n    return (\n        <Tooltip\n            title={\n                <div className=\"p-2\">\n                    <p className=\"mb-2\">\n                        Path cleaning helps standardize URLs by removing unnecessary parameters and fragments.\n                    </p>\n                    <div className=\"mb-2\">\n                        <Link to=\"https://posthog.com/docs/product-analytics/paths#path-cleaning-rules\">\n                            Learn more about path cleaning rules\n                        </Link>\n                    </div>\n                    <LemonButton\n                        icon={<IconGear />}\n                        type=\"primary\"\n                        size=\"small\"\n                        to={urls.settings('project-product-analytics', 'path-cleaning')}\n                        targetBlank\n                        className=\"w-full\"\n                    >\n                        Edit path cleaning settings\n                    </LemonButton>\n                </div>\n            }\n            placement=\"top\"\n            interactive={true}\n        >\n            <LemonButton\n                icon={<IconBranch />}\n                onClick={() => setIsPathCleaningEnabled(!isPathCleaningEnabled)}\n                type=\"secondary\"\n                size=\"small\"\n            >\n                Path cleaning: <LemonSwitch checked={isPathCleaningEnabled} className=\"ml-1\" size=\"xsmall\" />\n            </LemonButton>\n        </Tooltip>\n    )\n}\n\nconst Tiles = (): JSX.Element => {\n    const { tiles } = useValues(webAnalyticsLogic)\n\n    return (\n        <div className=\"mt-2 grid grid-cols-1 md:grid-cols-2 xxl:grid-cols-3 gap-x-4 gap-y-12\">\n            {tiles.map((tile, i) => {\n                if (tile.kind === 'query') {\n                    return <QueryTileItem key={i} tile={tile} />\n                } else if (tile.kind === 'tabs') {\n                    return <TabsTileItem key={i} tile={tile} />\n                } else if (tile.kind === 'replay') {\n                    return <WebAnalyticsRecordingsTile key={i} tile={tile} />\n                } else if (tile.kind === 'error_tracking') {\n                    return <WebAnalyticsErrorTrackingTile key={i} tile={tile} />\n                }\n                return null\n            })}\n        </div>\n    )\n}\n\nconst QueryTileItem = ({ tile }: { tile: QueryTile }): JSX.Element => {\n    const { query, title, layout, insightProps, control, showIntervalSelect, docs } = tile\n\n    const { openModal } = useActions(webAnalyticsLogic)\n    const { getNewInsightUrl } = useValues(webAnalyticsLogic)\n\n    const buttonsRow = [\n        tile.canOpenInsight ? (\n            <LemonButton\n                key=\"open-insight-button\"\n                to={getNewInsightUrl(tile.tileId)}\n                icon={<IconOpenInNew />}\n                size=\"small\"\n                type=\"secondary\"\n                onClick={() => {\n                    void addProductIntentForCrossSell({\n                        from: ProductKey.WEB_ANALYTICS,\n                        to: ProductKey.PRODUCT_ANALYTICS,\n                        intent_context: ProductIntentContext.WEB_ANALYTICS_INSIGHT,\n                    })\n                }}\n            >\n                Open as new Insight\n            </LemonButton>\n        ) : null,\n        tile.canOpenModal ? (\n            <LemonButton\n                key=\"open-modal-button\"\n                onClick={() => openModal(tile.tileId)}\n                icon={<IconExpand45 />}\n                size=\"small\"\n                type=\"secondary\"\n            >\n                Show more\n            </LemonButton>\n        ) : null,\n    ].filter(isNotNil)\n\n    return (\n        <div\n            className={clsx(\n                'col-span-1 row-span-1 flex flex-col',\n                layout.colSpanClassName ?? 'md:col-span-6',\n                layout.rowSpanClassName ?? 'md:row-span-1',\n                layout.orderWhenLargeClassName ?? 'xxl:order-12',\n                layout.className\n            )}\n        >\n            {title && (\n                <h2 className=\"flex-1 m-0 flex flex-row ml-1\">\n                    {title}\n                    {docs && <LearnMorePopover url={docs.url} title={docs.title} description={docs.description} />}\n                </h2>\n            )}\n\n            <WebQuery\n                query={query}\n                insightProps={insightProps}\n                control={control}\n                showIntervalSelect={showIntervalSelect}\n            />\n\n            {buttonsRow.length > 0 ? <div className=\"flex justify-end my-2 space-x-2\">{buttonsRow}</div> : null}\n        </div>\n    )\n}\n\nconst TabsTileItem = ({ tile }: { tile: TabsTile }): JSX.Element => {\n    const { layout } = tile\n\n    const { openModal } = useActions(webAnalyticsLogic)\n    const { getNewInsightUrl } = useValues(webAnalyticsLogic)\n\n    return (\n        <WebTabs\n            className={clsx(\n                'col-span-1 row-span-1',\n                layout.colSpanClassName || 'md:col-span-1',\n                layout.rowSpanClassName || 'md:row-span-1',\n                layout.orderWhenLargeClassName || 'xxl:order-12',\n                layout.className\n            )}\n            activeTabId={tile.activeTabId}\n            setActiveTabId={tile.setTabId}\n            tabs={tile.tabs.map((tab) => ({\n                id: tab.id,\n                content: (\n                    <WebQuery\n                        key={tab.id}\n                        query={tab.query}\n                        showIntervalSelect={tab.showIntervalSelect}\n                        control={tab.control}\n                        insightProps={tab.insightProps}\n                    />\n                ),\n                linkText: tab.linkText,\n                title: tab.title,\n                canOpenModal: !!tab.canOpenModal,\n                canOpenInsight: !!tab.canOpenInsight,\n                query: tab.query,\n                docs: tab.docs,\n            }))}\n            tileId={tile.tileId}\n            openModal={openModal}\n            getNewInsightUrl={getNewInsightUrl}\n        />\n    )\n}\n\nexport const WebTabs = ({\n    className,\n    activeTabId,\n    tabs,\n    setActiveTabId,\n    openModal,\n    getNewInsightUrl,\n    tileId,\n}: {\n    className?: string\n    activeTabId: string\n    tabs: {\n        id: string\n        title: string\n        linkText: string\n        content: React.ReactNode\n        canOpenModal?: boolean\n        canOpenInsight: boolean\n        query: QuerySchema\n        docs: LearnMorePopoverProps | undefined\n    }[]\n    setActiveTabId: (id: string) => void\n    openModal: (tileId: TileId, tabId: string) => void\n    getNewInsightUrl: (tileId: TileId, tabId: string) => string | undefined\n    tileId: TileId\n}): JSX.Element => {\n    const activeTab = tabs.find((t) => t.id === activeTabId)\n    const newInsightUrl = getNewInsightUrl(tileId, activeTabId)\n\n    const buttonsRow = [\n        activeTab?.canOpenInsight && newInsightUrl ? (\n            <LemonButton\n                key=\"open-insight-button\"\n                to={newInsightUrl}\n                icon={<IconOpenInNew />}\n                size=\"small\"\n                type=\"secondary\"\n                onClick={() => {\n                    void addProductIntentForCrossSell({\n                        from: ProductKey.WEB_ANALYTICS,\n                        to: ProductKey.PRODUCT_ANALYTICS,\n                        intent_context: ProductIntentContext.WEB_ANALYTICS_INSIGHT,\n                    })\n                }}\n            >\n                Open as new Insight\n            </LemonButton>\n        ) : null,\n        activeTab?.canOpenModal ? (\n            <LemonButton\n                key=\"open-modal-button\"\n                onClick={() => openModal(tileId, activeTabId)}\n                icon={<IconExpand45 />}\n                size=\"small\"\n                type=\"secondary\"\n            >\n                Show more\n            </LemonButton>\n        ) : null,\n    ].filter(isNotNil)\n\n    return (\n        <div className={clsx(className, 'flex flex-col')}>\n            <div className=\"flex flex-row items-center self-stretch mb-3\">\n                <h2 className=\"flex-1 m-0 flex flex-row ml-1\">\n                    {activeTab?.title}\n                    {activeTab?.docs && (\n                        <LearnMorePopover\n                            url={activeTab.docs.url}\n                            title={activeTab.docs.title}\n                            description={activeTab.docs.description}\n                        />\n                    )}\n                </h2>\n\n                <LemonSegmentedSelect\n                    shrinkOn={7}\n                    size=\"small\"\n                    disabled={false}\n                    value={activeTabId}\n                    dropdownMatchSelectWidth={false}\n                    onChange={setActiveTabId}\n                    options={tabs.map(({ id, linkText }) => ({ value: id, label: linkText }))}\n                />\n            </div>\n            <div className=\"flex-1 flex flex-col\">{activeTab?.content}</div>\n            {buttonsRow.length > 0 ? <div className=\"flex justify-end my-2 space-x-2\">{buttonsRow}</div> : null}\n        </div>\n    )\n}\n\nexport interface LearnMorePopoverProps {\n    url?: PostHogComDocsURL\n    title: string\n    description: string | JSX.Element\n}\n\nexport const LearnMorePopover = ({ url, title, description }: LearnMorePopoverProps): JSX.Element => {\n    const [isOpen, setIsOpen] = useState(false)\n\n    return (\n        <Popover\n            visible={isOpen}\n            onClickOutside={() => setIsOpen(false)}\n            overlay={\n                <div className=\"p-4\">\n                    <div className=\"flex flex-row w-full\">\n                        <h2 className=\"flex-1\">{title}</h2>\n                        <LemonButton\n                            targetBlank\n                            type=\"tertiary\"\n                            onClick={() => setIsOpen(false)}\n                            size=\"small\"\n                            icon={<IconX />}\n                        />\n                    </div>\n                    <div className=\"text-sm text-gray-700\">{description}</div>\n                    {url && (\n                        <div className=\"flex justify-end mt-4\">\n                            <LemonButton\n                                to={url}\n                                onClick={() => setIsOpen(false)}\n                                targetBlank={true}\n                                sideIcon={<IconOpenSidebar />}\n                            >\n                                Learn more\n                            </LemonButton>\n                        </div>\n                    )}\n                </div>\n            }\n        >\n            <LemonButton onClick={() => setIsOpen(!isOpen)} size=\"small\" icon={<IconInfo />} className=\"ml-1 mb-1\" />\n        </Popover>\n    )\n}\n\nexport const WebAnalyticsDashboard = (): JSX.Element => {\n    const { mobileLayout } = useValues(navigationLogic)\n    const { featureFlags } = useValues(featureFlagLogic)\n    const { productTab } = useValues(webAnalyticsLogic)\n\n    const { setProductTab } = useActions(webAnalyticsLogic)\n\n    return (\n        <BindLogic logic={webAnalyticsLogic} props={{}}>\n            <BindLogic logic={dataNodeCollectionLogic} props={{ key: WEB_ANALYTICS_DATA_COLLECTION_NODE_ID }}>\n                <WebAnalyticsModal />\n                <VersionCheckerBanner />\n                <div className=\"WebAnalyticsDashboard w-full flex flex-col\">\n                    <div\n                        className={clsx(\n                            'sticky z-20 bg-primary border-b pb-2',\n                            mobileLayout\n                                ? 'top-[var(--breadcrumbs-height-full)]'\n                                : 'top-[var(--breadcrumbs-height-compact)]'\n                        )}\n                    >\n                        <div className=\"flex flex-row\">\n                            {featureFlags[FEATURE_FLAGS.WEB_VITALS] && (\n                                <div className=\"flex-1\">\n                                    <LemonTabs<ProductTab>\n                                        size=\"small\"\n                                        activeKey={productTab}\n                                        onChange={setProductTab}\n                                        tabs={[\n                                            { key: ProductTab.ANALYTICS, label: 'Web analytics' },\n                                            { key: ProductTab.WEB_VITALS, label: 'Web vitals' },\n                                        ]}\n                                    />\n                                </div>\n                            )}\n\n                            <WebAnalyticsLiveUserCount />\n                        </div>\n\n                        <Filters />\n                    </div>\n\n                    <WebAnalyticsHealthCheck />\n\n                    <Tiles />\n                </div>\n            </BindLogic>\n        </BindLogic>\n    )\n}\n", "import { useWindowSize } from 'lib/hooks/useWindowSize'\nimport React from 'react'\n\nimport { LemonSegmentedButton, LemonSegmentedButtonProps } from '../LemonSegmentedButton'\nimport { LemonSelect, LemonSelectProps } from '../LemonSelect'\n\nexport type LemonSegmentedSelectProps<T extends React.Key> = LemonSegmentedButtonProps<T> &\n    LemonSelectProps<T> & {\n        shrinkOn?: number\n    }\n\nexport function LemonSegmentedSelect<T extends React.Key>({\n    shrinkOn,\n    ...props\n}: LemonSegmentedSelectProps<T>): JSX.Element {\n    const {\n        windowSize: { width = 0 },\n    } = useWindowSize()\n\n    if ((shrinkOn != null && props.options.length >= shrinkOn) || width < props.options.length * 100) {\n        return <LemonSelect {...props} />\n    }\n\n    return <LemonSegmentedButton {...props} />\n}\n", "import clsx from 'clsx'\nimport { TZLabel } from 'lib/components/TZLabel'\nimport { IconOpenInNew } from 'lib/lemon-ui/icons'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonTableLink } from 'lib/lemon-ui/LemonTable/LemonTableLink'\nimport { urls } from 'scenes/urls'\nimport { ErrorTrackingTile } from 'scenes/web-analytics/webAnalyticsLogic'\n\nimport { QueryFeature } from '~/queries/nodes/DataTable/queryFeatures'\nimport { Query } from '~/queries/Query/Query'\nimport { ErrorTrackingIssue } from '~/queries/schema/schema-general'\nimport { QueryContext, QueryContextColumnComponent } from '~/queries/types'\n\nexport const CustomGroupTitleColumn: QueryContextColumnComponent = (props) => {\n    const record = props.record as ErrorTrackingIssue\n\n    return (\n        <div className=\"flex items-start space-x-1.5 group\">\n            <LemonTableLink\n                title={record.name || 'Unknown Type'}\n                description={\n                    <div className=\"space-y-1\">\n                        <div className=\"line-clamp-1\">{record.description}</div>\n                        <div className=\"space-x-1\">\n                            <TZLabel time={record.last_seen as string} className=\"border-dotted border-b\" />\n                        </div>\n                    </div>\n                }\n                className=\"flex-1\"\n                to={urls.errorTrackingIssue(record.id)}\n            />\n        </div>\n    )\n}\n\nconst context: QueryContext = {\n    extraDataTableQueryFeatures: [QueryFeature.hideLoadNextButton],\n    showOpenEditorButton: false,\n    showQueryEditor: false,\n    columns: {\n        error: {\n            width: '50%',\n            render: CustomGroupTitleColumn,\n        },\n        users: {\n            align: 'right',\n        },\n        occurrences: {\n            align: 'right',\n        },\n    },\n}\n\nexport const WebAnalyticsErrorTrackingTile = ({ tile }: { tile: ErrorTrackingTile }): JSX.Element => {\n    const { layout, query } = tile\n    const to = urls.errorTracking()\n\n    return (\n        <div\n            className={clsx(\n                'col-span-1 row-span-1 flex flex-col',\n                layout.colSpanClassName ?? 'md:col-span-6',\n                layout.rowSpanClassName ?? 'md:row-span-1',\n                layout.orderWhenLargeClassName ?? 'xxl:order-12',\n                layout.className\n            )}\n        >\n            <h2 className=\"m-0 mb-3\">Error tracking</h2>\n            <div className=\"border rounded bg-surface-primary flex-1 flex flex-col py-2 px-1\">\n                <Query query={query} embedded={true} context={context} />\n            </div>\n            <div className=\"flex flex-row-reverse my-2\">\n                <LemonButton to={to} icon={<IconOpenInNew />} size=\"small\" type=\"secondary\">\n                    View all\n                </LemonButton>\n            </div>\n        </div>\n    )\n}\n", "import clsx from 'clsx'\nimport { useValues } from 'kea'\nimport { EmptyMessage } from 'lib/components/EmptyMessage/EmptyMessage'\nimport { IconOpenInNew } from 'lib/lemon-ui/icons'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonSkeleton } from 'lib/lemon-ui/LemonSkeleton'\nimport { RecordingRow } from 'scenes/project-homepage/WatchNextPanel'\nimport { sessionRecordingsPlaylistLogic } from 'scenes/session-recordings/playlist/sessionRecordingsPlaylistLogic'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { urls } from 'scenes/urls'\nimport { ReplayTile, webAnalyticsLogic } from 'scenes/web-analytics/webAnalyticsLogic'\n\nimport { ReplayTabs } from '~/types'\n\nexport function WebAnalyticsRecordingsTile({ tile }: { tile: ReplayTile }): JSX.Element {\n    const { layout } = tile\n    const { replayFilters, webAnalyticsFilters } = useValues(webAnalyticsLogic)\n    const { currentTeam } = useValues(teamLogic)\n\n    const sessionRecordingsListLogicInstance = sessionRecordingsPlaylistLogic({\n        logicKey: 'webAnalytics',\n        filters: replayFilters,\n    })\n\n    const { sessionRecordings, sessionRecordingsResponseLoading } = useValues(sessionRecordingsListLogicInstance)\n    const items = sessionRecordings.slice(0, 5)\n\n    const emptyMessage = !currentTeam?.session_recording_opt_in\n        ? {\n              title: 'Recordings are not enabled for this project',\n              description: 'Once recordings are enabled, new recordings will display here.',\n              buttonText: 'Enable recordings',\n              buttonTo: urls.settings('project-replay', 'replay'),\n          }\n        : webAnalyticsFilters.length > 0\n        ? {\n              title: 'There are no recordings matching the current filters',\n              description: 'Try changing the filters, or view all recordings.',\n              buttonText: 'View all',\n              buttonTo: urls.replay(),\n          }\n        : {\n              title: 'There are no recordings matching this date range',\n              description: 'Make sure you have the javascript snippet setup in your website.',\n              buttonText: 'Learn more',\n              buttonTo: 'https://posthog.com/docs/user-guides/recordings',\n          }\n    const to = items.length > 0 ? urls.replay(ReplayTabs.Home, replayFilters) : urls.replay()\n    return (\n        <>\n            <div\n                className={clsx(\n                    'col-span-1 row-span-1 flex flex-col',\n                    layout.colSpanClassName ?? 'md:col-span-6',\n                    layout.rowSpanClassName ?? 'md:row-span-1',\n                    layout.orderWhenLargeClassName ?? 'xxl:order-12',\n                    layout.className\n                )}\n            >\n                <h2 className=\"m-0 mb-3\">Session replay</h2>\n                <div className=\"border rounded bg-surface-primary flex-1 flex flex-col py-2 px-1\">\n                    {sessionRecordingsResponseLoading ? (\n                        <div className=\"p-2 space-y-6\">\n                            {Array.from({ length: 6 }, (_, index) => (\n                                <LemonSkeleton key={index} />\n                            ))}\n                        </div>\n                    ) : items.length === 0 && emptyMessage ? (\n                        <EmptyMessage {...emptyMessage} />\n                    ) : (\n                        items.map((item, index) => <RecordingRow key={index} recording={item} />)\n                    )}\n                </div>\n                <div className=\"flex flex-row-reverse my-2\">\n                    <LemonButton to={to} icon={<IconOpenInNew />} size=\"small\" type=\"secondary\">\n                        View all\n                    </LemonButton>\n                </div>\n            </div>\n        </>\n    )\n}\n", "import { IconChevronDown, IconTrending, IconWarning } from '@posthog/icons'\nimport { Link, Tooltip } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { getColorVar } from 'lib/colors'\nimport { IntervalFilterStandalone } from 'lib/components/IntervalFilter'\nimport { parseAliasToReadable } from 'lib/components/PathCleanFilters/PathCleanFilterItem'\nimport { ProductIntroduction } from 'lib/components/ProductIntroduction/ProductIntroduction'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { IconOpenInNew, IconTrendingDown, IconTrendingFlat } from 'lib/lemon-ui/icons'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonSwitch } from 'lib/lemon-ui/LemonSwitch'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { percentage, tryDecodeURIComponent, UnexpectedNeverError } from 'lib/utils'\nimport { useCallback, useMemo } from 'react'\nimport { NewActionButton } from 'scenes/actions/NewActionButton'\nimport { countryCodeToFlag, countryCodeToName } from 'scenes/insights/views/WorldMap'\nimport { languageCodeToFlag, languageCodeToName } from 'scenes/insights/views/WorldMap/countryCodes'\nimport { urls } from 'scenes/urls'\nimport { userLogic } from 'scenes/userLogic'\nimport { GeographyTab, webAnalyticsLogic } from 'scenes/web-analytics/webAnalyticsLogic'\n\nimport { actionsModel } from '~/models/actionsModel'\nimport { Query } from '~/queries/Query/Query'\nimport {\n    DataTableNode,\n    DataVisualizationNode,\n    InsightVizNode,\n    NodeKind,\n    QuerySchema,\n    WebAnalyticsOrderByFields,\n    WebStatsBreakdown,\n    WebVitalsPathBreakdownQuery,\n} from '~/queries/schema/schema-general'\nimport { QueryContext, QueryContextColumnComponent, QueryContextColumnTitleComponent } from '~/queries/types'\nimport { InsightLogicProps, ProductKey, PropertyFilterType } from '~/types'\n\nimport { HeatmapButton } from '../CrossSellButtons/HeatmapButton'\nimport { ReplayButton } from '../CrossSellButtons/ReplayButton'\n\nconst toUtcOffsetFormat = (value: number): string => {\n    if (value === 0) {\n        return 'UTC'\n    }\n\n    const integerPart = Math.floor(value)\n    const sign = integerPart > 0 ? '+' : '-'\n\n    // India has half-hour offsets, and Australia has 45-minute offsets, why?\n    const decimalPart = value - integerPart\n    const decimalPartAsMinutes = decimalPart * 60\n    const formattedMinutes = decimalPartAsMinutes > 0 ? `:${decimalPartAsMinutes}` : ''\n\n    // E.g. UTC-3, UTC, UTC+5:30, UTC+11:45\n    return `UTC${sign}${integerPart}${formattedMinutes}`\n}\n\ntype VariationCellProps = { isPercentage?: boolean; reverseColors?: boolean }\nconst VariationCell = (\n    { isPercentage, reverseColors }: VariationCellProps = { isPercentage: false, reverseColors: false }\n): QueryContextColumnComponent => {\n    const formatNumber = (value: number): string =>\n        isPercentage ? `${(value * 100).toFixed(1)}%` : value?.toLocaleString() ?? '(empty)'\n\n    return function Cell({ value }) {\n        const { compareFilter } = useValues(webAnalyticsLogic)\n\n        if (!value) {\n            return null\n        }\n\n        if (!Array.isArray(value)) {\n            return <span>{String(value)}</span>\n        }\n\n        const [current, previous] = value as [number, number]\n\n        const pctChangeFromPrevious =\n            previous === 0 && current === 0 // Special case, render as flatline\n                ? 0\n                : current === null || !compareFilter || compareFilter.compare === false\n                ? null\n                : previous === null || previous === 0\n                ? Infinity\n                : current / previous - 1\n\n        const trend =\n            pctChangeFromPrevious === null\n                ? null\n                : pctChangeFromPrevious === 0\n                ? { Icon: IconTrendingFlat, color: getColorVar('muted') }\n                : pctChangeFromPrevious > 0\n                ? {\n                      Icon: IconTrending,\n                      color: reverseColors ? getColorVar('danger') : getColorVar('success'),\n                  }\n                : {\n                      Icon: IconTrendingDown,\n                      color: reverseColors ? getColorVar('success') : getColorVar('danger'),\n                  }\n\n        // If current === previous, say \"increased by 0%\"\n        const tooltip =\n            pctChangeFromPrevious !== null\n                ? `${current >= previous ? 'Increased' : 'Decreased'} by ${percentage(\n                      Math.abs(pctChangeFromPrevious),\n                      0\n                  )} since last period (from ${formatNumber(previous)} to ${formatNumber(current)})`\n                : null\n\n        return (\n            <div className={clsx({ 'pr-4': !trend })}>\n                <Tooltip title={tooltip}>\n                    <span>\n                        {formatNumber(current)}&nbsp;\n                        {trend && (\n                            // eslint-disable-next-line react/forbid-dom-props\n                            <span style={{ color: trend.color }}>\n                                <trend.Icon color={trend.color} className=\"ml-1\" />\n                            </span>\n                        )}\n                    </span>\n                </Tooltip>\n            </div>\n        )\n    }\n}\n\nconst BreakdownValueTitle: QueryContextColumnTitleComponent = (props) => {\n    const { query } = props\n    const { source } = query\n    if (source.kind !== NodeKind.WebStatsTableQuery) {\n        return null\n    }\n    const { breakdownBy } = source\n    switch (breakdownBy) {\n        case WebStatsBreakdown.Page:\n            return <>Path</>\n        case WebStatsBreakdown.InitialPage:\n            return <>Initial Path</>\n        case WebStatsBreakdown.ExitPage:\n            return <>End Path</>\n        case WebStatsBreakdown.ExitClick:\n            return <>Exit Click</>\n        case WebStatsBreakdown.ScreenName:\n            return <>Screen Name</>\n        case WebStatsBreakdown.InitialChannelType:\n            return <>Initial Channel Type</>\n        case WebStatsBreakdown.InitialReferringDomain:\n            return <>Referring Domain</>\n        case WebStatsBreakdown.InitialUTMSource:\n            return <>UTM Source</>\n        case WebStatsBreakdown.InitialUTMCampaign:\n            return <>UTM Campaign</>\n        case WebStatsBreakdown.InitialUTMMedium:\n            return <>UTM Medium</>\n        case WebStatsBreakdown.InitialUTMTerm:\n            return <>UTM Term</>\n        case WebStatsBreakdown.InitialUTMContent:\n            return <>UTM Content</>\n        case WebStatsBreakdown.Browser:\n            return <>Browser</>\n        case WebStatsBreakdown.OS:\n            return <>OS</>\n        case WebStatsBreakdown.Viewport:\n            return <>Viewport</>\n        case WebStatsBreakdown.DeviceType:\n            return <>Device Type</>\n        case WebStatsBreakdown.Country:\n            return <>Country</>\n        case WebStatsBreakdown.Region:\n            return <>Region</>\n        case WebStatsBreakdown.City:\n            return <>City</>\n        case WebStatsBreakdown.Timezone:\n            return <>Timezone</>\n        case WebStatsBreakdown.Language:\n            return <>Language</>\n        case WebStatsBreakdown.InitialUTMSourceMediumCampaign:\n            return <>Source / Medium / Campaign</>\n        default:\n            throw new UnexpectedNeverError(breakdownBy)\n    }\n}\n\nconst BreakdownValueCell: QueryContextColumnComponent = (props) => {\n    const { value, query } = props\n    const { source } = query\n    if (source.kind !== NodeKind.WebStatsTableQuery) {\n        return null\n    }\n    const { breakdownBy } = source\n\n    switch (breakdownBy) {\n        case WebStatsBreakdown.ExitPage:\n        case WebStatsBreakdown.InitialPage:\n        case WebStatsBreakdown.Page: {\n            if (typeof value !== 'string') {\n                return <>{value}</>\n            }\n            const decoded = tryDecodeURIComponent(value)\n            return <>{source.doPathCleaning ? parseAliasToReadable(decoded) : decoded}</>\n        }\n        case WebStatsBreakdown.Viewport:\n            if (Array.isArray(value)) {\n                const [width, height] = value\n                return (\n                    <>\n                        {width}x{height}\n                    </>\n                )\n            }\n            break\n        case WebStatsBreakdown.Country:\n            if (typeof value === 'string') {\n                const countryCode = value\n                return (\n                    <>\n                        {countryCodeToFlag(countryCode)} {countryCodeToName[countryCode] || countryCode}\n                    </>\n                )\n            }\n            break\n        case WebStatsBreakdown.Region:\n            if (Array.isArray(value)) {\n                const [countryCode, regionCode, regionName] = value\n                return (\n                    <>\n                        {countryCodeToFlag(countryCode)} {countryCodeToName[countryCode] || countryCode} -{' '}\n                        {regionName || regionCode}\n                    </>\n                )\n            }\n            break\n        case WebStatsBreakdown.City:\n            if (Array.isArray(value)) {\n                const [countryCode, cityName] = value\n                return (\n                    <>\n                        {countryCodeToFlag(countryCode)} {countryCodeToName[countryCode] || countryCode} - {cityName}\n                    </>\n                )\n            }\n            break\n        case WebStatsBreakdown.Timezone:\n            if (typeof value === 'number') {\n                return <>{toUtcOffsetFormat(value)}</>\n            }\n            break\n        case WebStatsBreakdown.Language:\n            if (typeof value === 'string') {\n                const [languageCode, countryCode] = value.split('-')\n\n                // Locales are complicated, the country code might be hidden in the second part\n                // of the locale\n                const parsedCountryCode = countryCode?.match(/([A-Z]{2})/)?.[0] ?? ''\n                return (\n                    <>\n                        {countryCodeToFlag(parsedCountryCode) ?? languageCodeToFlag(languageCode)}&nbsp;\n                        {languageCodeToName[languageCode] || languageCode}\n                    </>\n                )\n            }\n            break\n    }\n\n    if (typeof value === 'string') {\n        return <>{value}</>\n    }\n    return null\n}\n\nconst SortableCell = (name: string, orderByField: WebAnalyticsOrderByFields): QueryContextColumnTitleComponent =>\n    function SortableCell() {\n        const { tablesOrderBy } = useValues(webAnalyticsLogic)\n        const { setTablesOrderBy } = useActions(webAnalyticsLogic)\n        const { featureFlags } = useValues(featureFlagLogic)\n\n        const isSortedByMyField = tablesOrderBy?.[0] === orderByField\n        const isAscending = tablesOrderBy?.[1] === 'ASC'\n\n        // Toggle between DESC, ASC, and no sort, in this order\n        const onClick = useCallback(() => {\n            if (!isSortedByMyField || isAscending) {\n                setTablesOrderBy(orderByField, 'DESC')\n            } else {\n                setTablesOrderBy(orderByField, 'ASC')\n            }\n        }, [isAscending, isSortedByMyField, setTablesOrderBy])\n\n        if (!featureFlags[FEATURE_FLAGS.WEB_ANALYTICS_TABLE_SORTING]) {\n            return <span className=\"pr-5\">{name}</span>\n        }\n\n        return (\n            <span onClick={onClick} className=\"group cursor-pointer inline-flex items-center\">\n                {name}\n                <IconChevronDown\n                    fontSize=\"20px\"\n                    className={clsx('-mr-1 ml-1 text-muted-alt opacity-0 group-hover:opacity-100', {\n                        'text-primary opacity-100': isSortedByMyField,\n                        'rotate-180': isSortedByMyField && isAscending,\n                    })}\n                />\n            </span>\n        )\n    }\n\nexport const webStatsBreakdownToPropertyName = (\n    breakdownBy: WebStatsBreakdown\n):\n    | { key: string; type: PropertyFilterType.Person | PropertyFilterType.Event | PropertyFilterType.Session }\n    | undefined => {\n    switch (breakdownBy) {\n        case WebStatsBreakdown.Page:\n            return { key: '$pathname', type: PropertyFilterType.Event }\n        case WebStatsBreakdown.InitialPage:\n            return { key: '$entry_pathname', type: PropertyFilterType.Session }\n        case WebStatsBreakdown.ExitPage:\n            return { key: '$end_pathname', type: PropertyFilterType.Session }\n        case WebStatsBreakdown.ExitClick:\n            return { key: '$last_external_click_url', type: PropertyFilterType.Session }\n        case WebStatsBreakdown.ScreenName:\n            return { key: '$screen_name', type: PropertyFilterType.Event }\n        case WebStatsBreakdown.InitialChannelType:\n            return { key: '$channel_type', type: PropertyFilterType.Session }\n        case WebStatsBreakdown.InitialReferringDomain:\n            return { key: '$entry_referring_domain', type: PropertyFilterType.Session }\n        case WebStatsBreakdown.InitialUTMSource:\n            return { key: '$entry_utm_source', type: PropertyFilterType.Session }\n        case WebStatsBreakdown.InitialUTMCampaign:\n            return { key: '$entry_utm_campaign', type: PropertyFilterType.Session }\n        case WebStatsBreakdown.InitialUTMMedium:\n            return { key: '$entry_utm_medium', type: PropertyFilterType.Session }\n        case WebStatsBreakdown.InitialUTMContent:\n            return { key: '$entry_utm_content', type: PropertyFilterType.Session }\n        case WebStatsBreakdown.InitialUTMTerm:\n            return { key: '$entry_utm_term', type: PropertyFilterType.Session }\n        case WebStatsBreakdown.Browser:\n            return { key: '$browser', type: PropertyFilterType.Event }\n        case WebStatsBreakdown.OS:\n            return { key: '$os', type: PropertyFilterType.Event }\n        case WebStatsBreakdown.Viewport:\n            return { key: '$viewport', type: PropertyFilterType.Event }\n        case WebStatsBreakdown.DeviceType:\n            return { key: '$device_type', type: PropertyFilterType.Event }\n        case WebStatsBreakdown.Country:\n            return { key: '$geoip_country_code', type: PropertyFilterType.Event }\n        case WebStatsBreakdown.Region:\n            return { key: '$geoip_subdivision_1_code', type: PropertyFilterType.Event }\n        case WebStatsBreakdown.City:\n            return { key: '$geoip_city_name', type: PropertyFilterType.Event }\n        case WebStatsBreakdown.Timezone:\n            return { key: '$timezone', type: PropertyFilterType.Event }\n        case WebStatsBreakdown.Language:\n            return { key: '$geoip_language', type: PropertyFilterType.Event }\n        case WebStatsBreakdown.InitialUTMSourceMediumCampaign:\n            return undefined\n        default:\n            throw new UnexpectedNeverError(breakdownBy)\n    }\n}\n\nexport const webAnalyticsDataTableQueryContext: QueryContext = {\n    columns: {\n        breakdown_value: {\n            renderTitle: BreakdownValueTitle,\n            render: BreakdownValueCell,\n        },\n        bounce_rate: {\n            renderTitle: SortableCell('Bounce Rate', WebAnalyticsOrderByFields.BounceRate),\n            render: VariationCell({ isPercentage: true, reverseColors: true }),\n            align: 'right',\n        },\n        views: {\n            renderTitle: SortableCell('Views', WebAnalyticsOrderByFields.Views),\n            render: VariationCell(),\n            align: 'right',\n        },\n        clicks: {\n            renderTitle: SortableCell('Clicks', WebAnalyticsOrderByFields.Clicks),\n            render: VariationCell(),\n            align: 'right',\n        },\n        visitors: {\n            renderTitle: SortableCell('Visitors', WebAnalyticsOrderByFields.Visitors),\n            render: VariationCell(),\n            align: 'right',\n        },\n        average_scroll_percentage: {\n            renderTitle: SortableCell('Average Scroll', WebAnalyticsOrderByFields.AverageScrollPercentage),\n            render: VariationCell({ isPercentage: true }),\n            align: 'right',\n        },\n        scroll_gt80_percentage: {\n            renderTitle: SortableCell('Deep Scroll Rate', WebAnalyticsOrderByFields.ScrollGt80Percentage),\n            render: VariationCell({ isPercentage: true }),\n            align: 'right',\n        },\n        total_conversions: {\n            renderTitle: SortableCell('Total Conversions', WebAnalyticsOrderByFields.TotalConversions),\n            render: VariationCell(),\n            align: 'right',\n        },\n        unique_conversions: {\n            renderTitle: SortableCell('Unique Conversions', WebAnalyticsOrderByFields.UniqueConversions),\n            render: VariationCell(),\n            align: 'right',\n        },\n        conversion_rate: {\n            renderTitle: SortableCell('Conversion Rate', WebAnalyticsOrderByFields.ConversionRate),\n            render: VariationCell({ isPercentage: true }),\n            align: 'right',\n        },\n        converting_users: {\n            renderTitle: SortableCell('Converting Users', WebAnalyticsOrderByFields.ConvertingUsers),\n            render: VariationCell(),\n            align: 'right',\n        },\n        action_name: {\n            title: 'Action',\n        },\n        cross_sell: {\n            title: ' ',\n            render: ({ record, query }: { record: any; query: DataTableNode | DataVisualizationNode }) => {\n                const dateRange = (query.source as any)?.dateRange\n                const breakdownBy = (query.source as any)?.breakdownBy\n                const value = record[0] ?? ''\n\n                return (\n                    <div className=\"flex flex-row items-center justify-end\">\n                        <ReplayButton\n                            date_from={dateRange?.date_from}\n                            date_to={dateRange?.date_to}\n                            breakdownBy={breakdownBy}\n                            value={value}\n                        />\n                        <HeatmapButton breakdownBy={breakdownBy} value={value} />\n                    </div>\n                )\n            },\n            align: 'right',\n        },\n    },\n}\n\ntype QueryWithInsightProps<Q extends QuerySchema> = { query: Q; insightProps: InsightLogicProps }\n\nexport const WebStatsTrendTile = ({\n    query,\n    showIntervalTile,\n    insightProps,\n}: QueryWithInsightProps<InsightVizNode> & { showIntervalTile?: boolean }): JSX.Element => {\n    const { togglePropertyFilter, setInterval } = useActions(webAnalyticsLogic)\n    const {\n        hasCountryFilter,\n        dateFilter: { interval },\n    } = useValues(webAnalyticsLogic)\n    const worldMapPropertyName = webStatsBreakdownToPropertyName(WebStatsBreakdown.Country)?.key\n\n    const onWorldMapClick = useCallback(\n        (breakdownValue: string) => {\n            if (!worldMapPropertyName) {\n                return\n            }\n            togglePropertyFilter(PropertyFilterType.Event, worldMapPropertyName, breakdownValue, {\n                geographyTab: hasCountryFilter ? undefined : GeographyTab.REGIONS,\n            })\n        },\n        [togglePropertyFilter, worldMapPropertyName]\n    )\n\n    const context = useMemo((): QueryContext => {\n        return {\n            ...webAnalyticsDataTableQueryContext,\n            onDataPointClick({ breakdown }, data) {\n                if (breakdown === 'string' && data && (data.count > 0 || data.aggregated_value > 0)) {\n                    onWorldMapClick(breakdown)\n                }\n            },\n            insightProps: {\n                ...insightProps,\n                query,\n            },\n        }\n    }, [onWorldMapClick, insightProps])\n\n    return (\n        <div className=\"border rounded bg-surface-primary flex-1 flex flex-col\">\n            {showIntervalTile && (\n                <div className=\"flex flex-row items-center justify-end m-2 mr-4\">\n                    <div className=\"flex flex-row items-center\">\n                        <span className=\"mr-2\">Group by</span>\n                        <IntervalFilterStandalone\n                            interval={interval}\n                            onIntervalChange={setInterval}\n                            options={[\n                                { value: 'hour', label: 'Hour' },\n                                { value: 'day', label: 'Day' },\n                                { value: 'week', label: 'Week' },\n                                { value: 'month', label: 'Month' },\n                            ]}\n                        />\n                    </div>\n                </div>\n            )}\n            <Query query={query} readOnly={true} context={context} />\n        </div>\n    )\n}\n\nexport const WebStatsTableTile = ({\n    query,\n    breakdownBy,\n    insightProps,\n    control,\n}: QueryWithInsightProps<DataTableNode> & {\n    breakdownBy: WebStatsBreakdown\n    control?: JSX.Element\n}): JSX.Element => {\n    const { togglePropertyFilter } = useActions(webAnalyticsLogic)\n\n    const { key, type } = webStatsBreakdownToPropertyName(breakdownBy) || {}\n\n    const onClick = useCallback(\n        (breakdownValue: string | null) => {\n            if (!key || !type) {\n                return\n            }\n\n            togglePropertyFilter(type, key, breakdownValue)\n        },\n        [togglePropertyFilter, type, key]\n    )\n\n    const context = useMemo((): QueryContext => {\n        const rowProps: QueryContext['rowProps'] = (record: unknown) => {\n            // `onClick` won't know how to handle the breakdown value if these don't exist,\n            // so let's prevent from `onClick` from being set up in the first place to avoid a noop click\n            if (!key || !type) {\n                return {}\n            }\n\n            // Tricky to calculate because the breakdown is a computed value rather than a DB column, make it non-filterable for now\n            if (breakdownBy === WebStatsBreakdown.Language || breakdownBy === WebStatsBreakdown.Timezone) {\n                return {}\n            }\n\n            const breakdownValue = getBreakdownValue(record, breakdownBy)\n            if (breakdownValue === undefined) {\n                return {}\n            }\n\n            return { onClick: () => onClick(breakdownValue) }\n        }\n\n        return {\n            ...webAnalyticsDataTableQueryContext,\n            insightProps,\n            rowProps,\n        }\n    }, [onClick, insightProps])\n\n    return (\n        <div className=\"border rounded bg-surface-primary flex-1 flex flex-col\">\n            {control != null && <div className=\"flex flex-row items-center justify-end m-2 mr-4\">{control}</div>}\n            <Query query={query} readOnly={true} context={context} />\n        </div>\n    )\n}\n\nconst getBreakdownValue = (record: unknown, breakdownBy: WebStatsBreakdown): string | null | undefined => {\n    if (typeof record !== 'object' || !record || !('result' in record)) {\n        return undefined\n    }\n    const result = record.result\n    if (!Array.isArray(result)) {\n        return undefined\n    }\n    // assume that the first element is the value\n    const breakdownValue = result[0]\n\n    switch (breakdownBy) {\n        case WebStatsBreakdown.Country:\n            if (Array.isArray(breakdownValue)) {\n                return breakdownValue[0]\n            }\n            break\n        case WebStatsBreakdown.Region:\n            if (Array.isArray(breakdownValue)) {\n                return breakdownValue[1]\n            }\n            break\n        case WebStatsBreakdown.City:\n            if (Array.isArray(breakdownValue)) {\n                return breakdownValue[1]\n            }\n            break\n    }\n\n    if (breakdownValue === null) {\n        return null // null is a valid value, as opposed to undefined which signals that there isn't a valid value\n    }\n\n    if (typeof breakdownValue !== 'string') {\n        return undefined\n    }\n    return breakdownValue\n}\n\nexport const WebGoalsTile = ({ query, insightProps }: QueryWithInsightProps<DataTableNode>): JSX.Element | null => {\n    const { actions, actionsLoading } = useValues(actionsModel)\n    const { updateHasSeenProductIntroFor } = useActions(userLogic)\n\n    if (actionsLoading) {\n        return null\n    }\n\n    if (!actions.length) {\n        return (\n            <ProductIntroduction\n                productName=\"Actions\"\n                productKey={ProductKey.ACTIONS}\n                thingName=\"action\"\n                isEmpty={true}\n                description=\"Use actions to combine events that you want to have tracked together or to make detailed Autocapture events easier to reuse.\"\n                docsURL=\"https://posthog.com/docs/data/actions\"\n                actionElementOverride={\n                    <NewActionButton onSelectOption={() => updateHasSeenProductIntroFor(ProductKey.ACTIONS, true)} />\n                }\n            />\n        )\n    }\n\n    return (\n        <div className=\"border rounded bg-surface-primary flex-1\">\n            <div className=\"flex flex-row-reverse p-2\">\n                <LemonButton to={urls.actions()} sideIcon={<IconOpenInNew />} type=\"secondary\" size=\"small\">\n                    Manage actions\n                </LemonButton>\n            </div>\n            <Query query={query} readOnly={true} context={{ ...webAnalyticsDataTableQueryContext, insightProps }} />\n        </div>\n    )\n}\n\nexport const WebExternalClicksTile = ({\n    query,\n    insightProps,\n}: QueryWithInsightProps<DataTableNode>): JSX.Element | null => {\n    const { shouldStripQueryParams } = useValues(webAnalyticsLogic)\n    const { setShouldStripQueryParams } = useActions(webAnalyticsLogic)\n    return (\n        <div className=\"border rounded bg-surface-primary flex-1 flex flex-col\">\n            <div className=\"flex flex-row items-center justify-end m-2 mr-4\">\n                <div className=\"flex flex-row items-center space-x-2\">\n                    <LemonSwitch\n                        label=\"Strip query parameters\"\n                        checked={shouldStripQueryParams}\n                        onChange={setShouldStripQueryParams}\n                        className=\"h-full\"\n                    />\n                </div>\n            </div>\n            <Query query={query} readOnly={true} context={{ ...webAnalyticsDataTableQueryContext, insightProps }} />\n        </div>\n    )\n}\n\nexport const WebVitalsPathBreakdownTile = ({\n    query,\n    insightProps,\n}: QueryWithInsightProps<WebVitalsPathBreakdownQuery>): JSX.Element => {\n    const { isPathCleaningEnabled } = useValues(webAnalyticsLogic)\n    const { setIsPathCleaningEnabled } = useActions(webAnalyticsLogic)\n\n    return (\n        <div>\n            <div className=\"flex flex-row items-center gap-1 m-2\">\n                <h3 className=\"text-lg font-semibold\">Path Breakdown</h3>\n                {!isPathCleaningEnabled && (\n                    <Tooltip\n                        title={\n                            <span>\n                                Path Breakdown is more useful when path cleaning is turned on.{' '}\n                                <Link onClick={() => setIsPathCleaningEnabled(true)}>Enable it.</Link>\n                            </span>\n                        }\n                        interactive\n                    >\n                        <IconWarning className=\"mb-2\" fontSize=\"18\" />\n                    </Tooltip>\n                )}\n            </div>\n            <Query query={query} readOnly context={{ ...webAnalyticsDataTableQueryContext, insightProps }} />\n        </div>\n    )\n}\n\nexport const WebQuery = ({\n    query,\n    showIntervalSelect,\n    control,\n    insightProps,\n}: QueryWithInsightProps<QuerySchema> & {\n    showIntervalSelect?: boolean\n    control?: JSX.Element\n}): JSX.Element => {\n    if (query.kind === NodeKind.DataTableNode && query.source.kind === NodeKind.WebStatsTableQuery) {\n        return (\n            <WebStatsTableTile\n                query={query}\n                breakdownBy={query.source.breakdownBy}\n                insightProps={insightProps}\n                control={control}\n            />\n        )\n    }\n\n    if (query.kind === NodeKind.DataTableNode && query.source.kind === NodeKind.WebExternalClicksTableQuery) {\n        return <WebExternalClicksTile query={query} insightProps={insightProps} />\n    }\n\n    if (query.kind === NodeKind.InsightVizNode) {\n        return <WebStatsTrendTile query={query} showIntervalTile={showIntervalSelect} insightProps={insightProps} />\n    }\n\n    if (query.kind === NodeKind.DataTableNode && query.source.kind === NodeKind.WebGoalsQuery) {\n        return <WebGoalsTile query={query} insightProps={insightProps} />\n    }\n\n    if (query.kind === NodeKind.WebVitalsPathBreakdownQuery) {\n        return <WebVitalsPathBreakdownTile query={query} insightProps={insightProps} />\n    }\n\n    return <Query query={query} readOnly={true} context={{ ...webAnalyticsDataTableQueryContext, insightProps }} />\n}\n", "import { LemonButton, Link } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport {\n    appEditorUrl,\n    authorizedUrlListLogic,\n    AuthorizedUrlListType,\n} from 'lib/components/AuthorizedUrlList/authorizedUrlListLogic'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { IconHeatmap } from 'lib/lemon-ui/icons'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { addProductIntentForCrossSell, ProductIntentContext } from 'lib/utils/product-intents'\nimport { urls } from 'scenes/urls'\n\nimport { WebStatsBreakdown } from '~/queries/schema/schema-general'\nimport { ProductKey } from '~/types'\n\ninterface HeatmapButtonProps {\n    breakdownBy: WebStatsBreakdown\n    value: string\n}\n\n// Currently can only support breakdown where the value is a pathname\nconst VALID_BREAKDOWN_VALUES = new Set([\n    WebStatsBreakdown.Page,\n    WebStatsBreakdown.InitialPage,\n    WebStatsBreakdown.ExitPage,\n    WebStatsBreakdown.ExitClick,\n])\n\nexport const HeatmapButton = ({ breakdownBy, value }: HeatmapButtonProps): JSX.Element => {\n    const { featureFlags } = useValues(featureFlagLogic)\n    const { authorizedUrls } = useValues(\n        authorizedUrlListLogic({\n            actionId: null,\n            experimentId: null,\n            type: AuthorizedUrlListType.TOOLBAR_URLS, // Heatmap is a toolbar feature, requires authorized URLs\n        })\n    )\n\n    // Doesn't make sense to show the button if there's no value\n    if (value === '') {\n        return <></>\n    }\n\n    // Currently heatmaps only support pathnames,\n    // so we ignore the other breakdown types\n    if (!VALID_BREAKDOWN_VALUES.has(breakdownBy)) {\n        return <></>\n    }\n\n    // KLUDGE: We don't have any idea what domain the pathname belongs to, but we *need* the domain\n    // to make it work on heatmaps. For now, let's just assume it's the main authorized domain,\n    // and they'll notice the error. We're working on adding domain filtering to Web Analytics,\n    // once that's live we can come back and fix this\n    const domain = authorizedUrls[0]\n    if (!domain) {\n        return (\n            <LemonButton\n                icon={<IconHeatmap />}\n                type=\"tertiary\"\n                size=\"xsmall\"\n                disabledReason={\n                    <span>\n                        No authorized URLs found. Authorize them first in{' '}\n                        <Link target=\"blank\" to={urls.toolbarLaunch()}>\n                            the toolbar settings\n                        </Link>\n                        .\n                    </span>\n                }\n                onClick={(e) => e.stopPropagation()}\n            />\n        )\n    }\n\n    // Replace double slashes with single slashes in case domain has a trailing slash, and value has a leading slash\n    const url = `${domain}${value}`.replace(/\\/\\//, '/')\n\n    // Decide whether to use the new heatmaps UI or launch the user's website with the toolbar + heatmaps\n    const to = featureFlags[FEATURE_FLAGS.HEATMAPS_UI]\n        ? urls.heatmaps(`pageURL=${url}`)\n        : appEditorUrl(url, {\n              userIntent: 'heatmaps',\n          })\n\n    return (\n        <LemonButton\n            to={to}\n            icon={<IconHeatmap />}\n            type=\"tertiary\"\n            size=\"xsmall\"\n            tooltip=\"View heatmap for this page\"\n            className=\"no-underline\"\n            targetBlank\n            onClick={(e: React.MouseEvent) => {\n                e.stopPropagation()\n                void addProductIntentForCrossSell({\n                    from: ProductKey.WEB_ANALYTICS,\n                    to: ProductKey.HEATMAPS,\n                    intent_context: ProductIntentContext.WEB_ANALYTICS_INSIGHT,\n                })\n            }}\n        />\n    )\n}\n", "import { IconRewindPlay } from '@posthog/icons'\nimport { LemonButton } from '@posthog/lemon-ui'\nimport { addProductIntentForCrossSell, ProductIntentContext } from 'lib/utils/product-intents'\nimport { urls } from 'scenes/urls'\n\nimport { WebStatsBreakdown } from '~/queries/schema/schema-general'\nimport { FilterLogicalOperator, ProductKey, PropertyFilterType, PropertyOperator, ReplayTabs } from '~/types'\n\n/**\n * Map breakdown types to their corresponding property filter type\n * Outside the replayButton function\n */\nconst BREAKDOWN_TYPE_MAP: Partial<\n    Record<WebStatsBreakdown, PropertyFilterType.Event | PropertyFilterType.Person | PropertyFilterType.Session>\n> = {\n    [WebStatsBreakdown.DeviceType]: PropertyFilterType.Person,\n    [WebStatsBreakdown.InitialPage]: PropertyFilterType.Session,\n    [WebStatsBreakdown.ExitPage]: PropertyFilterType.Session,\n    [WebStatsBreakdown.Page]: PropertyFilterType.Event,\n    [WebStatsBreakdown.Browser]: PropertyFilterType.Person,\n    [WebStatsBreakdown.OS]: PropertyFilterType.Person,\n    [WebStatsBreakdown.InitialChannelType]: PropertyFilterType.Session,\n    [WebStatsBreakdown.InitialReferringDomain]: PropertyFilterType.Session,\n    [WebStatsBreakdown.InitialUTMSource]: PropertyFilterType.Session,\n    [WebStatsBreakdown.InitialUTMCampaign]: PropertyFilterType.Session,\n    [WebStatsBreakdown.InitialUTMMedium]: PropertyFilterType.Session,\n    [WebStatsBreakdown.InitialUTMContent]: PropertyFilterType.Session,\n    [WebStatsBreakdown.InitialUTMTerm]: PropertyFilterType.Session,\n}\n\n/**\n * Map breakdown types to their corresponding property filter key\n * Outside the replayButton function\n */\nconst BREAKDOWN_KEY_MAP: Partial<Record<WebStatsBreakdown, string>> = {\n    [WebStatsBreakdown.DeviceType]: '$device_type',\n    [WebStatsBreakdown.InitialPage]: '$entry_pathname',\n    [WebStatsBreakdown.ExitPage]: '$end_pathname',\n    [WebStatsBreakdown.Page]: '$pathname',\n    [WebStatsBreakdown.Browser]: '$browser',\n    [WebStatsBreakdown.OS]: '$os',\n    [WebStatsBreakdown.InitialChannelType]: '$channel_type',\n    [WebStatsBreakdown.InitialReferringDomain]: '$entry_referring_domain',\n    [WebStatsBreakdown.InitialUTMSource]: '$entry_utm_source',\n    [WebStatsBreakdown.InitialUTMCampaign]: '$entry_utm_campaign',\n    [WebStatsBreakdown.InitialUTMMedium]: '$entry_utm_medium',\n    [WebStatsBreakdown.InitialUTMContent]: '$entry_utm_content',\n    [WebStatsBreakdown.InitialUTMTerm]: '$entry_utm_term',\n}\n\ninterface ReplayButtonProps {\n    date_from: string\n    date_to: string\n    breakdownBy: WebStatsBreakdown\n    value: string\n}\n\nexport const ReplayButton = ({ date_from, date_to, breakdownBy, value }: ReplayButtonProps): JSX.Element => {\n    const sharedButtonProps = {\n        icon: <IconRewindPlay />,\n        type: 'tertiary' as const,\n        size: 'xsmall' as const,\n        tooltip: 'View recordings',\n        className: 'no-underline',\n        targetBlank: true,\n        onClick: (e: React.MouseEvent) => {\n            e.stopPropagation()\n            void addProductIntentForCrossSell({\n                from: ProductKey.WEB_ANALYTICS,\n                to: ProductKey.SESSION_REPLAY,\n                intent_context: ProductIntentContext.WEB_ANALYTICS_INSIGHT,\n            })\n        },\n    }\n\n    /** If value is empty - just open session replay home page */\n    if (value === '') {\n        return <LemonButton {...sharedButtonProps} to={urls.replay(ReplayTabs.Home, { date_from, date_to })} />\n    }\n\n    /** View port is a unique case, so we need to handle it differently */\n    if (breakdownBy === WebStatsBreakdown.Viewport) {\n        return (\n            <LemonButton\n                {...sharedButtonProps}\n                to={urls.replay(ReplayTabs.Home, {\n                    date_from: date_from,\n                    date_to: date_to,\n                    filter_group: {\n                        type: FilterLogicalOperator.And,\n                        values: [\n                            {\n                                type: FilterLogicalOperator.And,\n                                values: [\n                                    {\n                                        key: '$viewport_width',\n                                        type: PropertyFilterType.Event,\n                                        value: [value[0]],\n                                        operator: PropertyOperator.Exact,\n                                    },\n                                    {\n                                        key: '$viewport_height',\n                                        type: PropertyFilterType.Event,\n                                        value: [value[1]],\n                                        operator: PropertyOperator.Exact,\n                                    },\n                                ],\n                            },\n                        ],\n                    },\n                })}\n            />\n        )\n    }\n\n    /** UTM source, medium, campaign is a unique case, so we need to handle it differently, as combining them with AND */\n    if (breakdownBy === WebStatsBreakdown.InitialUTMSourceMediumCampaign) {\n        const values = value.split(' / ')\n        return (\n            <LemonButton\n                {...sharedButtonProps}\n                to={urls.replay(ReplayTabs.Home, {\n                    date_from: date_from,\n                    date_to: date_to,\n                    filter_group: {\n                        type: FilterLogicalOperator.And,\n                        values: [\n                            {\n                                type: FilterLogicalOperator.And,\n                                values: [\n                                    {\n                                        key: '$entry_utm_source',\n                                        type: PropertyFilterType.Session,\n                                        value: [values[0] || ''],\n                                        operator: PropertyOperator.Exact,\n                                    },\n                                    {\n                                        key: '$entry_utm_medium',\n                                        type: PropertyFilterType.Session,\n                                        value: [values[1] || ''],\n                                        operator: PropertyOperator.Exact,\n                                    },\n                                    {\n                                        key: '$entry_utm_campaign',\n                                        type: PropertyFilterType.Session,\n                                        value: [values[2] || ''],\n                                        operator: PropertyOperator.Exact,\n                                    },\n                                ],\n                            },\n                        ],\n                    },\n                })}\n            />\n        )\n    }\n\n    const type = BREAKDOWN_TYPE_MAP[breakdownBy] || PropertyFilterType.Person\n    const key = BREAKDOWN_KEY_MAP[breakdownBy]\n    if (!key || !type) {\n        /** If the breakdown is not supported, return an empty element */\n        return <></>\n    }\n\n    /** Render the button */\n    return (\n        <LemonButton\n            {...sharedButtonProps}\n            to={urls.replay(ReplayTabs.Home, {\n                date_from: date_from,\n                date_to: date_to,\n                filter_group: {\n                    type: FilterLogicalOperator.And,\n                    values: [\n                        {\n                            type: FilterLogicalOperator.And,\n                            values: [\n                                {\n                                    key: key,\n                                    type: type,\n                                    value: [value],\n                                    operator: PropertyOperator.Exact,\n                                },\n                            ],\n                        },\n                    ],\n                },\n            })}\n        />\n    )\n}\n", "import { useValues } from 'kea'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { ConversionGoalWarning, ProductTab, webAnalyticsLogic } from 'scenes/web-analytics/webAnalyticsLogic'\n\nexport const WebAnalyticsHealthCheck = (): JSX.Element | null => {\n    const { statusCheck, conversionGoalWarning, productTab } = useValues(webAnalyticsLogic)\n\n    if (conversionGoalWarning) {\n        switch (conversionGoalWarning) {\n            case ConversionGoalWarning.CustomEventWithNoSessionId:\n                return (\n                    <LemonBanner type=\"warning\" className=\"mt-2\">\n                        <p>\n                            A custom event has been set as a conversion goal, but it has been seen with no{' '}\n                            <code>$session_id</code>. This means that some queries will not be able to include these\n                            events.\n                        </p>\n                        <p>\n                            To fix this, please see{' '}\n                            <Link to=\"https://posthog.com/docs/data/sessions#custom-session-ids\">\n                                documentation for custom session IDs\n                            </Link>\n                            .\n                        </p>\n                    </LemonBanner>\n                )\n        }\n    }\n\n    // No need to show loading or error states for this warning\n    if (!statusCheck) {\n        return null\n    }\n\n    if (productTab === ProductTab.WEB_VITALS) {\n        if (!statusCheck.isSendingWebVitals) {\n            return (\n                <LemonBanner type=\"warning\" className=\"mt-2\">\n                    <p>\n                        No <code>$web_vitals</code> events have been received. Web Vitals won't work correctly (it'll be\n                        a little empty!)\n                    </p>\n                    <p>\n                        Please see{' '}\n                        <Link to=\"https://posthog.com/docs/web-analytics/web-vitals\">\n                            documentation for how to set up web vitals\n                        </Link>\n                        .\n                    </p>\n                </LemonBanner>\n            )\n        }\n    } else {\n        if (!statusCheck.isSendingPageViews) {\n            return (\n                <LemonBanner type=\"warning\" className=\"mt-2\">\n                    <p>\n                        No <code>$pageview</code>{' '}\n                        {!statusCheck.isSendingPageLeaves ? (\n                            <>\n                                or <code>$pageleave</code>{' '}\n                            </>\n                        ) : null}\n                        events have been received. Web analytics won't work correctly (it'll be a little empty!)\n                    </p>\n                    <p>\n                        Please see{' '}\n                        <Link to=\"https://posthog.com/docs/libraries/js\">\n                            documentation for how to set up posthog-js\n                        </Link>\n                        .\n                    </p>\n                </LemonBanner>\n            )\n        } else if (!statusCheck.isSendingPageLeaves) {\n            return (\n                <LemonBanner type=\"warning\" className=\"mt-2\">\n                    <p>\n                        No <code>$pageleave</code> events have been received, this means that Bounce rate and Session\n                        duration might be inaccurate.\n                    </p>\n                    <p>\n                        Please see{' '}\n                        <Link to=\"https://posthog.com/docs/libraries/js\">\n                            documentation for how to set up posthog-js\n                        </Link>\n                        .\n                    </p>\n                </LemonBanner>\n            )\n        }\n    }\n\n    return null\n}\n", "import { useActions, useValues } from 'kea'\nimport { DateFilter } from 'lib/components/DateFilter/DateFilter'\nimport { IconOpenInNew } from 'lib/lemon-ui/icons'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonModal } from 'lib/lemon-ui/LemonModal'\nimport { addProductIntentForCrossSell, ProductIntentContext } from 'lib/utils/product-intents'\nimport { urls } from 'scenes/urls'\nimport { WebQuery } from 'scenes/web-analytics/tiles/WebAnalyticsTile'\nimport { webAnalyticsLogic } from 'scenes/web-analytics/webAnalyticsLogic'\nimport { WebPropertyFilters } from 'scenes/web-analytics/WebPropertyFilters'\n\nimport { ProductKey } from '~/types'\n\nexport const WebAnalyticsModal = (): JSX.Element | null => {\n    const {\n        modal,\n        dateFilter: { dateFrom, dateTo },\n        webAnalyticsFilters,\n    } = useValues(webAnalyticsLogic)\n    const { closeModal, setDates, setWebAnalyticsFilters } = useActions(webAnalyticsLogic)\n\n    if (!modal) {\n        return null\n    }\n\n    return (\n        <LemonModal\n            isOpen={!!modal}\n            onClose={closeModal}\n            simple={false}\n            title={modal?.title || ''}\n            width={1600}\n            fullScreen={false}\n            closable={true}\n        >\n            <div className=\"WebAnalyticsModal space-y-4\">\n                <div className=\"flex flex-row flex-wrap gap-2\">\n                    <WebPropertyFilters\n                        setWebAnalyticsFilters={setWebAnalyticsFilters}\n                        webAnalyticsFilters={webAnalyticsFilters}\n                    />\n                    <DateFilter dateFrom={dateFrom} dateTo={dateTo} onChange={setDates} />\n                </div>\n                <LemonModal.Content embedded>\n                    <WebQuery\n                        query={modal.query}\n                        insightProps={modal.insightProps}\n                        showIntervalSelect={modal.showIntervalSelect}\n                        control={modal.control}\n                    />\n                </LemonModal.Content>\n                <div className=\"flex flex-row justify-end\">\n                    {modal.canOpenInsight ? (\n                        <LemonButton\n                            to={urls.insightNew({ query: modal.query })}\n                            icon={<IconOpenInNew />}\n                            size=\"small\"\n                            type=\"secondary\"\n                            onClick={() => {\n                                void addProductIntentForCrossSell({\n                                    from: ProductKey.WEB_ANALYTICS,\n                                    to: ProductKey.PRODUCT_ANALYTICS,\n                                    intent_context: ProductIntentContext.WEB_ANALYTICS_INSIGHT,\n                                })\n                            }}\n                        >\n                            Open as new Insight\n                        </LemonButton>\n                    ) : null}\n                </div>\n            </div>\n        </LemonModal>\n    )\n}\n", "import { PropertyFilters } from 'lib/components/PropertyFilters/PropertyFilters'\nimport { isEventPersonOrSessionPropertyFilter } from 'lib/components/PropertyFilters/utils'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\n\nimport { WebAnalyticsPropertyFilters } from '~/queries/schema/schema-general'\n\nexport const WebPropertyFilters = ({\n    webAnalyticsFilters,\n    setWebAnalyticsFilters,\n}: {\n    webAnalyticsFilters: WebAnalyticsPropertyFilters\n    setWebAnalyticsFilters: (filters: WebAnalyticsPropertyFilters) => void\n}): JSX.Element => {\n    return (\n        <PropertyFilters\n            taxonomicGroupTypes={[\n                TaxonomicFilterGroupType.EventProperties,\n                TaxonomicFilterGroupType.PersonProperties,\n                TaxonomicFilterGroupType.SessionProperties,\n            ]}\n            onChange={(filters) => setWebAnalyticsFilters(filters.filter(isEventPersonOrSessionPropertyFilter))}\n            propertyFilters={webAnalyticsFilters}\n            pageKey=\"web-analytics\"\n            eventNames={['$pageview']}\n        />\n    )\n}\n", "import { IconCursor } from '@posthog/icons'\nimport { useActions, useValues } from 'kea'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { TaxonomicPopover } from 'lib/components/TaxonomicPopover/TaxonomicPopover'\nimport { useState } from 'react'\nimport { webAnalyticsLogic } from 'scenes/web-analytics/webAnalyticsLogic'\n\nimport { actionsModel } from '~/models/actionsModel'\n\nexport const WebConversionGoal = (): JSX.Element | null => {\n    const { conversionGoal } = useValues(webAnalyticsLogic)\n    const { setConversionGoal } = useActions(webAnalyticsLogic)\n    const { actions } = useValues(actionsModel)\n    const [group, setGroup] = useState(TaxonomicFilterGroupType.CustomEvents)\n    const value =\n        conversionGoal && 'actionId' in conversionGoal ? conversionGoal.actionId : conversionGoal?.customEventName\n\n    return (\n        <TaxonomicPopover<number | string>\n            allowClear\n            data-attr=\"web-analytics-conversion-filter\"\n            groupType={group}\n            value={value}\n            onChange={(changedValue, groupType) => {\n                if (groupType === TaxonomicFilterGroupType.Actions && typeof changedValue === 'number') {\n                    setConversionGoal({ actionId: changedValue })\n                    setGroup(TaxonomicFilterGroupType.Actions)\n                } else if (\n                    groupType === TaxonomicFilterGroupType.CustomEvents &&\n                    typeof changedValue === 'string' &&\n                    changedValue\n                ) {\n                    setConversionGoal({ customEventName: changedValue })\n                    setGroup(TaxonomicFilterGroupType.CustomEvents)\n                } else {\n                    setConversionGoal(null)\n                }\n            }}\n            renderValue={() => {\n                if (!conversionGoal) {\n                    return null\n                } else if ('actionId' in conversionGoal) {\n                    const conversionGoalAction = actions.find((a) => a.id === conversionGoal.actionId)\n                    return (\n                        <span className=\"text-overflow max-w-full\">\n                            {conversionGoalAction?.name ?? 'Conversion goal'}\n                        </span>\n                    )\n                }\n                return <span className=\"text-overflow max-w-full\">{conversionGoal?.customEventName}</span>\n            }}\n            groupTypes={[TaxonomicFilterGroupType.CustomEvents, TaxonomicFilterGroupType.Actions]}\n            icon={<IconCursor />}\n            placeholder=\"Add conversion goal\"\n            placeholderClass=\"\"\n            size=\"small\"\n        />\n    )\n}\n", "import { IconX } from '@posthog/icons'\nimport { LemonButton } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { IconSort } from 'lib/lemon-ui/icons'\nimport { webAnalyticsLogic } from 'scenes/web-analytics/webAnalyticsLogic'\n\nimport { WebAnalyticsOrderByFields } from '~/queries/schema/schema-general'\n\nconst SORT_BY_TO_LABEL: Record<WebAnalyticsOrderByFields, string> = {\n    [WebAnalyticsOrderByFields.Visitors]: 'Visitors',\n    [WebAnalyticsOrderByFields.Views]: 'Views',\n    [WebAnalyticsOrderByFields.Clicks]: 'Clicks',\n    [WebAnalyticsOrderByFields.BounceRate]: 'Bounce rate',\n    [WebAnalyticsOrderByFields.AverageScrollPercentage]: 'Average scroll percentage',\n    [WebAnalyticsOrderByFields.ScrollGt80Percentage]: 'Scroll > 80%',\n    [WebAnalyticsOrderByFields.TotalConversions]: 'Total conversions',\n    [WebAnalyticsOrderByFields.UniqueConversions]: 'Unique conversions',\n    [WebAnalyticsOrderByFields.ConversionRate]: 'Conversion rate',\n    [WebAnalyticsOrderByFields.ConvertingUsers]: 'Converting users',\n}\n\nexport const TableSortingIndicator = (): JSX.Element | null => {\n    const { tablesOrderBy } = useValues(webAnalyticsLogic)\n    const { clearTablesOrderBy } = useActions(webAnalyticsLogic)\n\n    if (!tablesOrderBy) {\n        return null\n    }\n\n    return (\n        <LemonButton\n            type=\"secondary\"\n            size=\"small\"\n            icon={<IconSort className={clsx({ 'rotate-180': tablesOrderBy[1] === 'ASC' })} />}\n            sideIcon={<IconX />}\n            onClick={clearTablesOrderBy}\n        >\n            <span>Sort by: {SORT_BY_TO_LABEL[tablesOrderBy[0]]}</span>\n        </LemonButton>\n    )\n}\n", "import { IconLive } from '@posthog/icons'\nimport { useValues } from 'kea'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { humanFriendlyLargeNumber, humanFriendlyNumber } from 'lib/utils'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { liveEventsTableLogic } from 'scenes/web-analytics/liveWebAnalyticsLogic'\n\nexport const WebAnalyticsLiveUserCount = (): JSX.Element | null => {\n    const { liveUserCount, liveUserUpdatedSecondsAgo } = useValues(liveEventsTableLogic)\n    const { currentTeam } = useValues(teamLogic)\n\n    // No data yet, or feature flag disabled\n    if (liveUserCount == null) {\n        return null\n    }\n\n    const usersOnlineString = `${humanFriendlyNumber(liveUserCount)} ${\n        liveUserCount === 1 ? 'user is' : 'users are'\n    } online`\n    const inTeamString = currentTeam ? ` in ${currentTeam.name}` : ''\n    const updatedAgoString =\n        liveUserUpdatedSecondsAgo === 0\n            ? ' (updated just now)'\n            : liveUserUpdatedSecondsAgo == null\n            ? ''\n            : ` (updated ${liveUserUpdatedSecondsAgo} seconds ago)`\n    const tooltip = `${usersOnlineString}${inTeamString}${updatedAgoString}`\n\n    return (\n        <div className=\"hidden sm:flex items-center mb-2 border-b\">\n            <Tooltip title={tooltip}>\n                <span className=\"whitespace-nowrap\" data-attr=\"web-analytics-live-user-count\">\n                    <IconLive /> <strong>{humanFriendlyLargeNumber(liveUserCount)}</strong> currently online\n                </span>\n            </Tooltip>\n        </div>\n    )\n}\n", "import { actions, connect, events, kea, listeners, path, reducers, selectors } from 'kea'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { liveEventsHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport type { liveEventsTableLogicType } from './liveWebAnalyticsLogicType'\nexport interface StatsResponse {\n    users_on_product?: number\n}\nexport const liveEventsTableLogic = kea<liveEventsTableLogicType>([\n    path(['scenes', 'activity', 'live-events', 'liveEventsTableLogic']),\n    connect({\n        values: [teamLogic, ['currentTeam'], featureFlagLogic, ['featureFlags']],\n    }),\n    actions(() => ({\n        pollStats: true,\n        setLiveUserCount: ({ liveUserCount, now }: { liveUserCount: number; now: Date }) => ({\n            liveUserCount,\n            now,\n        }),\n        setNow: ({ now }: { now: Date }) => ({ now }),\n    })),\n    reducers({\n        liveUserCount: [\n            null as number | null,\n            {\n                setLiveUserCount: (_, { liveUserCount }) => liveUserCount,\n            },\n        ],\n        statsUpdatedTime: [\n            null as Date | null,\n            {\n                setLiveUserCount: (_, { now }) => now,\n            },\n        ],\n        now: [\n            null as Date | null,\n            {\n                setNow: (_, { now }) => now,\n                setLiveUserCount: (_, { now }) => now,\n            },\n        ],\n    }),\n    selectors({\n        liveUserUpdatedSecondsAgo: [\n            (s) => [s.statsUpdatedTime, s.now],\n            (statsUpdatedTime: Date | null, now: Date | null) => {\n                if (!statsUpdatedTime || !now) {\n                    return null\n                }\n                const seconds = Math.ceil((now.getTime() - statsUpdatedTime.getTime()) / 1000)\n                if (seconds < 0 || seconds >= 300) {\n                    // this should only happen if we have a bug, but be defensive and don't show anything surprising if there is a bug\n                    return null\n                }\n                return seconds\n            },\n        ],\n    }),\n    listeners(({ actions, values }) => ({\n        pollStats: async () => {\n            try {\n                if (!values.currentTeam) {\n                    return\n                }\n\n                const response = await fetch(`${liveEventsHostOrigin()}/stats`, {\n                    headers: {\n                        Authorization: `Bearer ${values.currentTeam.live_events_token}`,\n                    },\n                })\n                const data: StatsResponse = await response.json()\n                const liveUserCount = data.users_on_product || 0 // returns undefined if there are no users\n                actions.setLiveUserCount({ liveUserCount, now: new Date() })\n            } catch (error) {\n                console.error('Failed to poll stats:', error)\n            }\n        },\n    })),\n    events(({ actions, cache }) => ({\n        afterMount: () => {\n            actions.setNow({ now: new Date() })\n            actions.pollStats()\n\n            cache.statsInterval = setInterval(() => {\n                actions.pollStats()\n            }, 30000)\n\n            cache.nowInterval = setInterval(() => {\n                actions.setNow({ now: new Date() })\n            }, 500)\n        },\n        beforeUnmount: () => {\n            if (cache.statsInterval) {\n                clearInterval(cache.statsInterval)\n                cache.statsInterval = null\n            }\n        },\n    })),\n])\n", "import { IconEllipsis, IconSearch } from '@posthog/icons'\nimport { useActions, useValues } from 'kea'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonMenu } from 'lib/lemon-ui/LemonMenu'\nimport { LemonSwitch } from 'lib/lemon-ui/LemonSwitch'\nimport { urls } from 'scenes/urls'\nimport { webAnalyticsLogic } from 'scenes/web-analytics/webAnalyticsLogic'\n\nexport const WebAnalyticsMenu = (): JSX.Element => {\n    const { shouldFilterTestAccounts } = useValues(webAnalyticsLogic)\n    const { setShouldFilterTestAccounts } = useActions(webAnalyticsLogic)\n    return (\n        <LemonMenu\n            items={[\n                {\n                    label: 'Session Attribution Explorer',\n                    to: urls.sessionAttributionExplorer(),\n                    icon: <IconSearch />,\n                },\n                {\n                    label: () => (\n                        <LemonSwitch\n                            checked={shouldFilterTestAccounts}\n                            onChange={() => {\n                                setShouldFilterTestAccounts(!shouldFilterTestAccounts)\n                            }}\n                            fullWidth={true}\n                            label=\"Filter test accounts\"\n                        />\n                    ),\n                },\n            ]}\n            closeOnClickInside={false}\n        >\n            <LemonButton icon={<IconEllipsis />} size=\"small\" />\n        </LemonMenu>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "LemonSegmentedSelect", "shrinkOn", "props", "width", "useWindowSize", "LemonSelect", "LemonSegmentedButton", "import_react", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_jsx_runtime", "CustomGroupTitleColumn", "props", "record", "LemonTableLink", "TZLabel", "urls", "context", "WebAnalyticsErrorTrackingTile", "tile", "layout", "query", "to", "clsx", "Query", "LemonButton", "IconOpenInNew", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_jsx_runtime", "WebAnalyticsRecordingsTile", "tile", "layout", "replayFilters", "webAnalyticsFilters", "webAnalyticsLogic", "currentTeam", "teamLogic", "sessionRecordingsListLogicInstance", "sessionRecordingsPlaylistLogic", "sessionRecordings", "sessionRecordingsResponseLoading", "items", "emptyMessage", "urls", "to", "clsx", "_", "index", "LemonSkeleton", "EmptyMessage", "item", "RecordingRow", "LemonButton", "IconOpenInNew", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "VALID_BREAKDOWN_VALUES", "HeatmapButton", "breakdownBy", "value", "featureFlags", "featureFlagLogic", "authorizedUrls", "authorizedUrlListLogic", "domain", "LemonButton", "IconHeatmap", "Link", "urls", "e", "url", "to", "FEATURE_FLAGS", "appEditorUrl", "addProductIntentForCrossSell", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "BREAKDOWN_TYPE_MAP", "BREAKDOWN_KEY_MAP", "ReplayButton", "date_from", "date_to", "breakdownBy", "value", "sharedButtonProps", "IconRewindPlay", "e", "addProductIntentForCrossSell", "LemonButton", "urls", "values", "type", "key", "import_jsx_runtime", "toUtcOffsetFormat", "value", "integerPart", "sign", "decimalPartAsMinutes", "formattedMinutes", "VariationCell", "isPercentage", "reverseColors", "formatNumber", "compareFilter", "webAnalyticsLogic", "current", "previous", "pctChangeFromPrevious", "trend", "IconTrendingFlat", "getColorVar", "IconTrending", "IconTrendingDown", "tooltip", "percentage", "clsx", "Tooltip", "BreakdownValueTitle", "props", "query", "source", "breakdownBy", "UnexpectedNeverError", "BreakdownValueCell", "decoded", "tryDecodeURIComponent", "parseAliasToReadable", "width", "height", "countryCode", "countryCodeToFlag", "countryCodeToName", "regionCode", "regionName", "cityName", "languageCode", "parsedCountryCode", "languageCodeToFlag", "languageCodeToName", "SortableCell", "name", "orderByField", "tablesOrderBy", "setTablesOrderBy", "featureFlags", "featureFlagLogic", "isSortedByMyField", "isAscending", "onClick", "FEATURE_FLAGS", "IconChevronDown", "webStatsBreakdownToPropertyName", "webAnalyticsDataTableQueryContext", "record", "dateRange", "ReplayButton", "HeatmapButton", "WebStatsTrendTile", "showIntervalTile", "insightProps", "togglePropertyFilter", "setInterval", "hasCountryFilter", "interval", "worldMapPropertyName", "onWorldMapClick", "breakdownValue", "context", "breakdown", "data", "IntervalFilterStandalone", "Query", "WebStatsTableTile", "control", "key", "type", "getBreakdownValue", "result", "WebGoalsTile", "actions", "actionsLoading", "actionsModel", "updateHasSeenProductIntroFor", "userLogic", "LemonButton", "urls", "IconOpenInNew", "ProductIntroduction", "NewActionButton", "WebExternalClicksTile", "shouldStripQueryParams", "setShouldStripQueryParams", "LemonSwitch", "WebVitalsPathBreakdownTile", "isPathCleaningEnabled", "setIsPathCleaningEnabled", "Link", "IconWarning", "WebQuery", "showIntervalSelect", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "WebAnalyticsHealthCheck", "statusCheck", "conversionGoalWarning", "productTab", "webAnalyticsLogic", "LemonBanner", "Link", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "WebPropertyFilters", "webAnalyticsFilters", "setWebAnalyticsFilters", "PropertyFilters", "filters", "isEventPersonOrSessionPropertyFilter", "import_jsx_runtime", "WebAnalyticsModal", "modal", "dateFrom", "dateTo", "webAnalyticsFilters", "webAnalyticsLogic", "closeModal", "setDates", "setWebAnalyticsFilters", "LemonModal", "WebPropertyFilters", "DateFilter", "WebQuery", "LemonButton", "urls", "IconOpenInNew", "addProductIntentForCrossSell", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "WebConversionGoal", "conversionGoal", "webAnalyticsLogic", "setConversionGoal", "actions", "actionsModel", "group", "setGroup", "value", "TaxonomicPopover", "changedValue", "groupType", "conversionGoalAction", "a", "IconCursor", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_jsx_runtime", "SORT_BY_TO_LABEL", "TableSortingIndicator", "tablesOrderBy", "webAnalyticsLogic", "clearTablesOrderBy", "LemonButton", "IconSort", "clsx", "IconX", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "liveEventsTableLogic", "teamLogic", "featureFlagLogic", "liveUserCount", "now", "_", "s", "statsUpdatedTime", "seconds", "actions", "values", "liveEventsHostOrigin", "error", "cache", "import_jsx_runtime", "WebAnalyticsLiveUserCount", "liveUserCount", "liveUserUpdatedSecondsAgo", "liveEventsTableLogic", "currentTeam", "teamLogic", "usersOnlineString", "humanFriendlyNumber", "inTeamString", "updatedAgoString", "tooltip", "Tooltip", "IconLive", "humanFriendlyLargeNumber", "import_jsx_runtime", "Filters", "webAnalyticsFilters", "dateTo", "dateFrom", "compareFilter", "productTab", "webVitalsPercentile", "webAnalyticsLogic", "setWebAnalyticsFilters", "setDates", "setCompareFilter", "setWebVitalsPercentile", "hasAvailableFeature", "userLogic", "hasAdvancedPaths", "webPropertyFilters", "WebPropertyFilters", "DateFilter", "CompareFilter", "WebConversionGoal", "TableSortingIndicator", "LemonSegmentedSelect", "Tooltip", "PathCleaningToggle", "ReloadAll", "isPathCleaningEnabled", "setIsPathCleaningEnabled", "Link", "LemonButton", "IconGear", "urls", "IconBranch", "LemonSwitch", "Tiles", "tiles", "tile", "i", "QueryTileItem", "TabsTileItem", "WebAnalyticsRecordingsTile", "WebAnalyticsErrorTrackingTile", "query", "title", "layout", "insightProps", "control", "showIntervalSelect", "docs", "openModal", "getNewInsightUrl", "buttonsRow", "IconOpenInNew", "addProductIntentForCrossSell", "IconExpand45", "isNotNil", "clsx", "LearnMorePopover", "WebQuery", "WebTabs", "tab", "className", "activeTabId", "tabs", "setActiveTabId", "tileId", "activeTab", "t", "newInsightUrl", "id", "linkText", "url", "description", "isOpen", "setIsOpen", "Popover", "IconX", "IconOpenSidebar", "IconInfo", "WebAnalyticsDashboard", "mobileLayout", "navigationLogic", "featureFlags", "featureFlagLogic", "setProductTab", "dataNodeCollectionLogic", "WEB_ANALYTICS_DATA_COLLECTION_NODE_ID", "WebAnalyticsModal", "VersionCheckerBanner", "FEATURE_FLAGS", "LemonTabs", "WebAnalyticsLiveUserCount", "WebAnalyticsHealthCheck", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "WebAnalyticsMenu", "shouldFilterTestAccounts", "webAnalyticsLogic", "setShouldFilterTestAccounts", "LemonMenu", "urls", "IconSearch", "LemonSwitch", "LemonButton", "IconEllipsis", "import_jsx_runtime", "WebAnalyticsScene", "PageHeader", "WebAnalyticsMenu", "WebAnalyticsDashboard", "scene", "webAnalyticsLogic"]
}
