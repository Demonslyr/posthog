{
  "version": 3,
  "sources": ["../src/scenes/authentication/Login.tsx", "../src/scenes/authentication/redirectToLoggedInInstance.ts"],
  "sourcesContent": ["import './Login.scss'\n\nimport { LemonButton, LemonInput } from '@posthog/lemon-ui'\nimport { captureException } from '@sentry/react'\nimport clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport { BridgePage } from 'lib/components/BridgePage/BridgePage'\nimport { SocialLoginButtons, SSOEnforcedLoginButton } from 'lib/components/SocialLoginButton/SocialLoginButton'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { useEffect, useRef } from 'react'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\nimport { SceneExport } from 'scenes/sceneTypes'\n\nimport { loginLogic } from './loginLogic'\nimport { redirectIfLoggedInOtherInstance } from './redirectToLoggedInInstance'\nimport RegionSelect from './RegionSelect'\nimport { SupportModalButton } from './SupportModalButton'\n\nexport const ERROR_MESSAGES: Record<string, string | JSX.Element> = {\n    no_new_organizations:\n        'Your email address is not associated with an account. Please ask your administrator for an invite.',\n    invalid_sso_provider: (\n        <>\n            The SSO provider you specified is invalid. Visit{' '}\n            <Link to=\"https://posthog.com/sso\" target=\"_blank\">\n                https://posthog.com/sso\n            </Link>{' '}\n            for details.\n        </>\n    ),\n    improperly_configured_sso: (\n        <>\n            Cannot login with SSO provider because the provider is not configured, or your instance does not have the\n            required license. Please visit{' '}\n            <Link to=\"https://posthog.com/sso\" target=\"_blank\">\n                https://posthog.com/sso\n            </Link>{' '}\n            for details.\n        </>\n    ),\n    jit_not_enabled:\n        'We could not find an account with your email address and your organization does not support automatic enrollment. Please contact your administrator for an invite.',\n}\n\nexport const scene: SceneExport = {\n    component: Login,\n    logic: loginLogic,\n}\n\nexport function Login(): JSX.Element {\n    const { precheck } = useActions(loginLogic)\n    const { precheckResponse, precheckResponseLoading, login, isLoginSubmitting, generalError } = useValues(loginLogic)\n    const { preflight } = useValues(preflightLogic)\n\n    const passwordInputRef = useRef<HTMLInputElement>(null)\n    const isPasswordHidden = precheckResponse.status === 'pending' || precheckResponse.sso_enforcement\n\n    useEffect(() => {\n        if (preflight?.cloud) {\n            try {\n                redirectIfLoggedInOtherInstance()\n            } catch (e) {\n                captureException(e)\n            }\n        }\n    }, [])\n\n    useEffect(() => {\n        if (!isPasswordHidden) {\n            passwordInputRef.current?.focus()\n        }\n    }, [isPasswordHidden])\n\n    return (\n        <BridgePage\n            view=\"login\"\n            hedgehog\n            message={\n                <>\n                    Welcome to\n                    <br /> PostHog{preflight?.cloud ? ' Cloud' : ''}!\n                </>\n            }\n            footer={<SupportModalButton />}\n        >\n            <div className=\"space-y-4\">\n                <h2>Log in</h2>\n                {generalError && (\n                    <LemonBanner type=\"error\">\n                        {generalError.detail || ERROR_MESSAGES[generalError.code] || (\n                            <>\n                                Could not complete your login.\n                                <br />\n                                Please try again.\n                            </>\n                        )}\n                    </LemonBanner>\n                )}\n                <Form logic={loginLogic} formKey=\"login\" enableFormOnSubmit className=\"space-y-4\">\n                    <RegionSelect />\n                    <LemonField name=\"email\" label=\"Email\">\n                        <LemonInput\n                            className=\"ph-ignore-input\"\n                            autoFocus\n                            data-attr=\"login-email\"\n                            placeholder=\"email@yourcompany.com\"\n                            type=\"email\"\n                            onBlur={() => precheck({ email: login.email })}\n                            onPressEnter={(e) => {\n                                precheck({ email: login.email })\n                                if (isPasswordHidden) {\n                                    e.preventDefault() // Don't trigger submission if password field is still hidden\n                                    passwordInputRef.current?.focus()\n                                }\n                            }}\n                        />\n                    </LemonField>\n                    <div className={clsx('PasswordWrapper', isPasswordHidden && 'zero-height')}>\n                        <LemonField\n                            name=\"password\"\n                            label={\n                                <div className=\"flex flex-1 items-center justify-between gap-2\">\n                                    <span>Password</span>\n                                    <Link to=\"/reset\" data-attr=\"forgot-password\">\n                                        Forgot your password?\n                                    </Link>\n                                </div>\n                            }\n                        >\n                            <LemonInput\n                                type=\"password\"\n                                inputRef={passwordInputRef}\n                                className=\"ph-ignore-input\"\n                                data-attr=\"password\"\n                                placeholder=\"\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\"\n                                autoComplete=\"current-password\"\n                            />\n                        </LemonField>\n                    </div>\n\n                    {/* Show regular login button if SSO is not enforced */}\n                    {!precheckResponse.sso_enforcement && (\n                        <LemonButton\n                            type=\"primary\"\n                            status=\"alt\"\n                            htmlType=\"submit\"\n                            data-attr=\"password-login\"\n                            fullWidth\n                            center\n                            loading={isLoginSubmitting || precheckResponseLoading}\n                            size=\"large\"\n                        >\n                            Log in\n                        </LemonButton>\n                    )}\n\n                    {/* Show enforced SSO button if required */}\n                    {precheckResponse.sso_enforcement && (\n                        <SSOEnforcedLoginButton provider={precheckResponse.sso_enforcement} email={login.email} />\n                    )}\n\n                    {/* Show optional SAML SSO button if available */}\n                    {precheckResponse.saml_available && !precheckResponse.sso_enforcement && (\n                        <SSOEnforcedLoginButton provider=\"saml\" email={login.email} />\n                    )}\n                </Form>\n                {preflight?.cloud && (\n                    <div className=\"text-center mt-4\">\n                        Don't have an account?{' '}\n                        <Link to=\"/signup\" data-attr=\"signup\" className=\"font-bold\">\n                            Create an account\n                        </Link>\n                    </div>\n                )}\n                {!precheckResponse.saml_available && !precheckResponse.sso_enforcement && (\n                    <SocialLoginButtons caption=\"Or log in with\" topDivider />\n                )}\n            </div>\n        </BridgePage>\n    )\n}\n", "/**\n * This will redirect the user to the correct subdomain if they're logged in to a different instance.\n *\n * It will only work for app. and eu. subdomains and other subdomains will need to be added manually\n *\n * There's an e2e test for this.\n *\n * ## Local testing\n *\n * To test this locally, you can edit your /etc/hosts to add a subdomain redirect\n *\n * Add the following line to your host file:\n * 127.0.0.1 app.posthogtest.com\n *\n * Then set the following cookies locally:\n * document.cookie = 'ph_current_instance=\"https://eu.posthog.com\"';\n * document.cookie = \"is-logged-in=1\";\n *\n * Then go to http://app.posthogtest.com:8000/login?next=/apps\n * And it will update the subdomain, taking you to the following link\n * http://eu.posthogtest.com:8000/login?next=/apps\n */\n\nimport { lemonToast } from '@posthog/lemon-ui'\nimport { captureException } from '@sentry/react'\nimport { getCookie } from 'lib/api'\n\n// cookie values\nconst PH_CURRENT_INSTANCE = 'ph_current_instance'\n\nconst REDIRECT_TIMEOUT = 2500\n\ntype Subdomain = 'eu' | 'us'\n\nexport function cleanedCookieSubdomain(loggedInInstance: string | null): Subdomain | null {\n    try {\n        // replace '\"' as for some reason the cookie value is wrapped in quotes e.g. \"https://eu.posthog.com\"\n        const url = loggedInInstance?.replace(/\"/g, '')\n        if (!url) {\n            return null\n        }\n        // convert to URL, so that we can be sure we're dealing with a valid URL\n        const hostname = new URL(url).hostname\n        switch (hostname) {\n            case 'eu.posthog.com':\n                return 'eu'\n            case 'us.posthog.com':\n                return 'us'\n            default:\n                return null\n        }\n    } catch (e) {\n        // let's not allow errors in this code break the log-in page \uD83E\uDD1E\n        captureException(e, { extra: { loggedInInstance } })\n        return null\n    }\n}\n\nfunction regionFromSubdomain(subdomain: Subdomain): 'EU' | 'US' {\n    switch (subdomain) {\n        case 'us':\n            return 'US'\n        case 'eu':\n            return 'EU'\n    }\n}\n\nexport function redirectIfLoggedInOtherInstance(): (() => void) | undefined {\n    const currentSubdomain = window.location.hostname.split('.')[0]\n\n    const loggedInInstance = getCookie(PH_CURRENT_INSTANCE)\n    const loggedInSubdomain = cleanedCookieSubdomain(loggedInInstance)\n\n    if (!loggedInSubdomain) {\n        return // not logged into another subdomain\n    }\n\n    const loggedIntoOtherSubdomain = loggedInSubdomain !== currentSubdomain\n\n    if (loggedIntoOtherSubdomain) {\n        const newUrl = new URL(window.location.href)\n        newUrl.hostname = newUrl.hostname.replace(currentSubdomain, loggedInSubdomain)\n\n        let cancelClicked = false\n\n        const closeToastAction = (): void => {\n            if (cancelClicked) {\n                return\n            }\n            window.location.assign(newUrl.href)\n        }\n\n        lemonToast.info(\n            `Redirecting to your logged-in account in the Cloud ${regionFromSubdomain(loggedInSubdomain)} region`,\n            {\n                button: {\n                    label: 'Cancel',\n                    action: () => {\n                        cancelClicked = true\n                    },\n                },\n                onClose: closeToastAction,\n                // we want to force the user to click the cancel button as otherwise the default close will still redirect\n                closeButton: false,\n                autoClose: REDIRECT_TIMEOUT,\n            }\n        )\n    }\n}\n"],
  "mappings": "8sCAAAA,IAAAC,IAAAC,IAIA,IAAAC,EAAiB,OACjBC,EAAsC,OACtCC,EAAqB,OAMrB,IAAAC,EAAkC,OCZlCC,IAAAC,IAAAC,IA4BA,IAAMC,EAAsB,sBAEtBC,EAAmB,KAIlB,SAASC,EAAuBC,EAAmD,CACtF,GAAI,CAEA,IAAMC,EAAMD,GAAkB,QAAQ,KAAM,EAAE,EAC9C,GAAI,CAACC,EACD,OAAO,KAIX,OADiB,IAAI,IAAIA,CAAG,EAAE,SACZ,CACd,IAAK,iBACD,MAAO,KACX,IAAK,iBACD,MAAO,KACX,QACI,OAAO,IACf,CACJ,OAAS,EAAG,CAER,OAAAC,EAAiB,EAAG,CAAE,MAAO,CAAE,iBAAAF,CAAiB,CAAE,CAAC,EAC5C,IACX,CACJ,CAEA,SAASG,EAAoBC,EAAmC,CAC5D,OAAQA,EAAW,CACf,IAAK,KACD,MAAO,KACX,IAAK,KACD,MAAO,IACf,CACJ,CAEO,SAASC,GAA4D,CACxE,IAAMC,EAAmB,OAAO,SAAS,SAAS,MAAM,GAAG,EAAE,CAAC,EAExDN,EAAmBO,EAAUV,CAAmB,EAChDW,EAAoBT,EAAuBC,CAAgB,EAEjE,GAAI,CAACQ,EACD,OAKJ,GAFiCA,IAAsBF,EAEzB,CAC1B,IAAMG,EAAS,IAAI,IAAI,OAAO,SAAS,IAAI,EAC3CA,EAAO,SAAWA,EAAO,SAAS,QAAQH,EAAkBE,CAAiB,EAE7E,IAAIE,EAAgB,GAEdC,EAAmB,IAAY,CAC7BD,GAGJ,OAAO,SAAS,OAAOD,EAAO,IAAI,CACtC,EAEAG,EAAW,KACP,sDAAsDT,EAAoBK,CAAiB,CAAC,UAC5F,CACI,OAAQ,CACJ,MAAO,SACP,OAAQ,IAAM,CACVE,EAAgB,EACpB,CACJ,EACA,QAASC,EAET,YAAa,GACb,UAAWb,CACf,CACJ,CACJ,CACJ,CDnFQ,IAAAe,EAAA,OAJKC,EAAuD,CAChE,qBACI,qGACJ,wBACI,oBAAE,6DACmD,OACjD,OAACC,EAAA,CAAK,GAAG,0BAA0B,OAAO,SAAS,mCAEnD,EAAQ,IAAI,gBAEhB,EAEJ,6BACI,oBAAE,qJAEiC,OAC/B,OAACA,EAAA,CAAK,GAAG,0BAA0B,OAAO,SAAS,mCAEnD,EAAQ,IAAI,gBAEhB,EAEJ,gBACI,oKACR,EAEaC,GAAqB,CAC9B,UAAWC,EACX,MAAOC,CACX,EAEO,SAASD,GAAqB,CACjC,GAAM,CAAE,SAAAE,CAAS,KAAI,cAAWD,CAAU,EACpC,CAAE,iBAAAE,EAAkB,wBAAAC,EAAyB,MAAAC,EAAO,kBAAAC,EAAmB,aAAAC,CAAa,KAAI,aAAUN,CAAU,EAC5G,CAAE,UAAAO,CAAU,KAAI,aAAUC,CAAc,EAExCC,KAAmB,UAAyB,IAAI,EAChDC,EAAmBR,EAAiB,SAAW,WAAaA,EAAiB,gBAEnF,sBAAU,IAAM,CACZ,GAAIK,GAAW,MACX,GAAI,CACAI,EAAgC,CACpC,OAASC,EAAG,CACRC,EAAiBD,CAAC,CACtB,CAER,EAAG,CAAC,CAAC,KAEL,aAAU,IAAM,CACPF,GACDD,EAAiB,SAAS,MAAM,CAExC,EAAG,CAACC,CAAgB,CAAC,KAGjB,OAACI,EAAA,CACG,KAAK,QACL,SAAQ,GACR,WACI,oBAAE,0BAEE,OAAC,OAAG,EAAE,WAASP,GAAW,MAAQ,SAAW,GAAG,KACpD,EAEJ,UAAQ,OAACQ,EAAA,EAAmB,EAE5B,oBAAC,OAAI,UAAU,YACX,oBAAC,MAAG,kBAAM,EACTT,MACG,OAACU,EAAA,CAAY,KAAK,QACb,SAAAV,EAAa,QAAUV,EAAeU,EAAa,IAAI,MACpD,oBAAE,8CAEE,OAAC,OAAG,EAAE,qBAEV,EAER,KAEJ,QAAC,QAAK,MAAON,EAAY,QAAQ,QAAQ,mBAAkB,GAAC,UAAU,YAClE,oBAACiB,EAAA,EAAa,KACd,OAACC,EAAA,CAAW,KAAK,QAAQ,MAAM,QAC3B,mBAACC,EAAA,CACG,UAAU,kBACV,UAAS,GACT,YAAU,cACV,YAAY,wBACZ,KAAK,QACL,OAAQ,IAAMlB,EAAS,CAAE,MAAOG,EAAM,KAAM,CAAC,EAC7C,aAAeQ,GAAM,CACjBX,EAAS,CAAE,MAAOG,EAAM,KAAM,CAAC,EAC3BM,IACAE,EAAE,eAAe,EACjBH,EAAiB,SAAS,MAAM,EAExC,EACJ,EACJ,KACA,OAAC,OAAI,aAAW,EAAAW,SAAK,kBAAmBV,GAAoB,aAAa,EACrE,mBAACQ,EAAA,CACG,KAAK,WACL,SACI,QAAC,OAAI,UAAU,iDACX,oBAAC,QAAK,oBAAQ,KACd,OAACrB,EAAA,CAAK,GAAG,SAAS,YAAU,kBAAkB,iCAE9C,GACJ,EAGJ,mBAACsB,EAAA,CACG,KAAK,WACL,SAAUV,EACV,UAAU,kBACV,YAAU,WACV,YAAY,+DACZ,aAAa,mBACjB,EACJ,EACJ,EAGC,CAACP,EAAiB,oBACf,OAACmB,EAAA,CACG,KAAK,UACL,OAAO,MACP,SAAS,SACT,YAAU,iBACV,UAAS,GACT,OAAM,GACN,QAAShB,GAAqBF,EAC9B,KAAK,QACR,kBAED,EAIHD,EAAiB,oBACd,OAACoB,EAAA,CAAuB,SAAUpB,EAAiB,gBAAiB,MAAOE,EAAM,MAAO,EAI3FF,EAAiB,gBAAkB,CAACA,EAAiB,oBAClD,OAACoB,EAAA,CAAuB,SAAS,OAAO,MAAOlB,EAAM,MAAO,GAEpE,EACCG,GAAW,UACR,QAAC,OAAI,UAAU,mBAAmB,mCACP,OACvB,OAACV,EAAA,CAAK,GAAG,UAAU,YAAU,SAAS,UAAU,YAAY,6BAE5D,GACJ,EAEH,CAACK,EAAiB,gBAAkB,CAACA,EAAiB,oBACnD,OAACqB,EAAA,CAAmB,QAAQ,iBAAiB,WAAU,GAAC,GAEhE,EACJ,CAER",
  "names": ["init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_kea_forms", "import_react", "init_dirname", "init_buffer", "init_process", "PH_CURRENT_INSTANCE", "REDIRECT_TIMEOUT", "cleanedCookieSubdomain", "loggedInInstance", "url", "captureException", "regionFromSubdomain", "subdomain", "redirectIfLoggedInOtherInstance", "currentSubdomain", "getCookie", "loggedInSubdomain", "newUrl", "cancelClicked", "closeToastAction", "lemonToast", "import_jsx_runtime", "ERROR_MESSAGES", "Link", "scene", "Login", "loginLogic", "precheck", "precheckResponse", "precheckResponseLoading", "login", "isLoginSubmitting", "generalError", "preflight", "preflightLogic", "passwordInputRef", "isPasswordHidden", "redirectIfLoggedInOtherInstance", "e", "captureException", "BridgePage", "SupportModalButton", "LemonBanner", "RegionSelect_default", "LemonField", "LemonInput", "clsx", "LemonButton", "SSOEnforcedLoginButton", "SocialLoginButtons"]
}
