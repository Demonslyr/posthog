{
  "version": 3,
  "sources": ["../src/scenes/dashboard/dashboards/templates/dashboardTemplatesLogic.tsx"],
  "sourcesContent": ["import { actions, afterMount, connect, kea, key, listeners, path, props, reducers } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\n\nimport { DashboardTemplateScope, DashboardTemplateType, TemplateAvailabilityContext } from '~/types'\n\nimport type { dashboardTemplatesLogicType } from './dashboardTemplatesLogicType'\n\nexport interface DashboardTemplateProps {\n    // default is to present global templates _and_ those visible only in the current team\n    scope?: 'default' | DashboardTemplateScope\n    onItemClick?: (template: DashboardTemplateType) => void\n    redirectAfterCreation?: boolean\n    availabilityContexts?: TemplateAvailabilityContext[]\n}\n\nexport const dashboardTemplatesLogic = kea<dashboardTemplatesLogicType>([\n    path(['scenes', 'dashboard', 'dashboards', 'templates', 'dashboardTemplatesLogic']),\n    props({} as DashboardTemplateProps),\n    key(({ scope }) => scope ?? 'unknown'),\n    connect({\n        values: [featureFlagLogic, ['featureFlags']],\n    }),\n    actions({\n        setTemplates: (allTemplates: DashboardTemplateType[]) => ({ allTemplates }),\n        setTemplateFilter: (search: string) => ({ search }),\n    }),\n    reducers({\n        templateFilter: [\n            '' as string,\n            {\n                setTemplateFilter: (_, { search }) => {\n                    return search\n                },\n            },\n        ],\n    }),\n    loaders(({ props, values }) => ({\n        allTemplates: [\n            [] as DashboardTemplateType[],\n            {\n                getAllTemplates: async () => {\n                    const params = {\n                        // the backend doesn't know about a default scope\n                        scope: props.scope !== 'default' ? props.scope : undefined,\n                        search: values.templateFilter.length > 2 ? values.templateFilter : undefined,\n                    }\n                    const page = await api.dashboardTemplates.list(params)\n                    return page.results\n                },\n            },\n        ],\n    })),\n    listeners(({ actions }) => ({\n        setTemplateFilter: async (_, breakpoint) => {\n            await breakpoint(100)\n            actions.getAllTemplates()\n        },\n    })),\n    afterMount(({ actions }) => {\n        actions.getAllTemplates()\n    }),\n])\n"],
  "mappings": "mIAAAA,IAAAC,IAAAC,IAAA,IAAAC,EAAyF,OACzFC,EAAwB,OAgBjB,IAAMC,KAA0B,OAAiC,IACpE,QAAK,CAAC,SAAU,YAAa,aAAc,YAAa,yBAAyB,CAAC,KAClF,SAAM,CAAC,CAA2B,KAClC,OAAI,CAAC,CAAE,MAAAC,CAAM,IAAMA,GAAS,SAAS,KACrC,WAAQ,CACJ,OAAQ,CAACC,EAAkB,CAAC,cAAc,CAAC,CAC/C,CAAC,KACD,WAAQ,CACJ,aAAeC,IAA2C,CAAE,aAAAA,CAAa,GACzE,kBAAoBC,IAAoB,CAAE,OAAAA,CAAO,EACrD,CAAC,KACD,YAAS,CACL,eAAgB,CACZ,GACA,CACI,kBAAmB,CAACC,EAAG,CAAE,OAAAD,CAAO,IACrBA,CAEf,CACJ,CACJ,CAAC,KACD,WAAQ,CAAC,CAAE,MAAAE,EAAO,OAAAC,CAAO,KAAO,CAC5B,aAAc,CACV,CAAC,EACD,CACI,gBAAiB,SAAY,CACzB,IAAMC,EAAS,CAEX,MAAOF,EAAM,QAAU,UAAYA,EAAM,MAAQ,OACjD,OAAQC,EAAO,eAAe,OAAS,EAAIA,EAAO,eAAiB,MACvE,EAEA,OADa,MAAME,EAAI,mBAAmB,KAAKD,CAAM,GACzC,OAChB,CACJ,CACJ,CACJ,EAAE,KACF,aAAU,CAAC,CAAE,QAAAE,CAAQ,KAAO,CACxB,kBAAmB,MAAOL,EAAGM,IAAe,CACxC,MAAMA,EAAW,GAAG,EACpBD,EAAQ,gBAAgB,CAC5B,CACJ,EAAE,KACF,cAAW,CAAC,CAAE,QAAAA,CAAQ,IAAM,CACxBA,EAAQ,gBAAgB,CAC5B,CAAC,CACL,CAAC",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "dashboardTemplatesLogic", "scope", "featureFlagLogic", "allTemplates", "search", "_", "props", "values", "params", "api_default", "actions", "breakpoint"]
}
