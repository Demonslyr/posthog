{
  "version": 3,
  "sources": ["../src/scenes/notebooks/NotebookScene.tsx", "../src/scenes/notebooks/Notebook/NotebookShareModal.tsx", "../src/scenes/notebooks/notebookSceneLogic.ts"],
  "sourcesContent": ["import './NotebookScene.scss'\n\nimport { IconInfo, IconOpenSidebar } from '@posthog/icons'\nimport { LemonButton, LemonTag } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { AccessDenied } from 'lib/components/AccessDenied'\nimport { NotFound } from 'lib/components/NotFound'\nimport { UserActivityIndicator } from 'lib/components/UserActivityIndicator/UserActivityIndicator'\nimport { useEffect } from 'react'\nimport { SceneExport } from 'scenes/sceneTypes'\n\nimport { NotebookTarget } from '~/types'\n\nimport { Notebook } from './Notebook/Notebook'\nimport { NotebookLoadingState } from './Notebook/NotebookLoadingState'\nimport { notebookLogic } from './Notebook/notebookLogic'\nimport { NotebookExpandButton, NotebookSyncInfo } from './Notebook/NotebookMeta'\nimport { NotebookShareModal } from './Notebook/NotebookShareModal'\nimport { NotebookMenu } from './NotebookMenu'\nimport { notebookPanelLogic } from './NotebookPanel/notebookPanelLogic'\nimport { notebookSceneLogic, NotebookSceneLogicProps } from './notebookSceneLogic'\nimport { LOCAL_NOTEBOOK_TEMPLATES } from './NotebookTemplates/notebookTemplates'\n\ninterface NotebookSceneProps {\n    shortId?: string\n}\n\nexport const scene: SceneExport = {\n    component: NotebookScene,\n    logic: notebookSceneLogic,\n    paramsToProps: ({ params: { shortId } }: { params: NotebookSceneProps }): NotebookSceneLogicProps => ({\n        shortId: shortId || 'missing',\n    }),\n}\n\nexport function NotebookScene(): JSX.Element {\n    const { notebookId, loading } = useValues(notebookSceneLogic)\n    const { createNotebook } = useActions(notebookSceneLogic)\n    const { notebook, conflictWarningVisible, accessDeniedToNotebook } = useValues(\n        notebookLogic({ shortId: notebookId, target: NotebookTarget.Scene })\n    )\n    const { selectNotebook, closeSidePanel } = useActions(notebookPanelLogic)\n    const { selectedNotebook, visibility } = useValues(notebookPanelLogic)\n\n    useEffect(() => {\n        if (notebookId === 'new') {\n            // NOTE: We don't do this in the logic afterMount as the logic can get cached by the router\n            createNotebook(NotebookTarget.Scene)\n        }\n    }, [notebookId])\n\n    if (accessDeniedToNotebook) {\n        return <AccessDenied object=\"notebook\" />\n    }\n\n    if (!notebook && !loading && !conflictWarningVisible) {\n        return <NotFound object=\"notebook\" />\n    }\n\n    if (visibility === 'visible' && selectedNotebook === notebookId) {\n        return (\n            <div className=\"flex flex-col justify-center items-center h-full text-secondary mx-10 flex-1\">\n                <h2 className=\"text-secondary\">\n                    This Notebook is open in the side panel <IconOpenSidebar />\n                </h2>\n\n                <p>\n                    You can navigate around PostHog and <b>drag and drop</b> thing into it. Or you can close the sidebar\n                    and it will be full screen here instead.\n                </p>\n\n                <LemonButton type=\"secondary\" onClick={() => closeSidePanel()}>\n                    Open it here instead\n                </LemonButton>\n            </div>\n        )\n    }\n\n    const isTemplate = notebook?.is_template\n\n    if (notebookId === 'new') {\n        return <NotebookLoadingState />\n    }\n\n    return (\n        <div className=\"NotebookScene\">\n            <div className=\"flex items-center justify-between border-b py-2 mb-2 sticky top-0 bg-primary z-10\">\n                <div className=\"flex gap-2 items-center\">\n                    {isTemplate && <LemonTag type=\"highlight\">TEMPLATE</LemonTag>}\n                    <UserActivityIndicator at={notebook?.last_modified_at} by={notebook?.last_modified_by} />\n                </div>\n\n                <div className=\"flex gap-2 items-center\">\n                    <NotebookSyncInfo shortId={notebookId} />\n\n                    <NotebookMenu shortId={notebookId} />\n\n                    <LemonButton\n                        type=\"secondary\"\n                        icon={<IconInfo />}\n                        size=\"small\"\n                        onClick={() => {\n                            if (selectedNotebook === LOCAL_NOTEBOOK_TEMPLATES[0].short_id && visibility === 'visible') {\n                                closeSidePanel()\n                            } else {\n                                selectNotebook(LOCAL_NOTEBOOK_TEMPLATES[0].short_id)\n                            }\n                        }}\n                    >\n                        {selectedNotebook === LOCAL_NOTEBOOK_TEMPLATES[0].short_id && visibility === 'visible'\n                            ? 'Close '\n                            : ''}\n                        Guide\n                    </LemonButton>\n                    <NotebookExpandButton type=\"secondary\" size=\"small\" />\n                    <LemonButton\n                        type=\"secondary\"\n                        size=\"small\"\n                        onClick={() => {\n                            selectNotebook(notebookId)\n                        }}\n                        tooltip={\n                            <>\n                                Opens the notebook in a side panel, that can be accessed from anywhere in the PostHog\n                                app. This is great for dragging and dropping elements like insights, recordings or even\n                                feature flags into your active notebook.\n                            </>\n                        }\n                        sideIcon={<IconOpenSidebar />}\n                    >\n                        Open in side panel\n                    </LemonButton>\n                </div>\n            </div>\n\n            <Notebook key={notebookId} shortId={notebookId} editable={!isTemplate} />\n            <NotebookShareModal shortId={notebookId} />\n        </div>\n    )\n}\n", "import { IconCopy } from '@posthog/icons'\nimport { LemonBanner, LemonButton, LemonDivider, LemonModal } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { FlaggedFeature } from 'lib/components/FlaggedFeature'\nimport { SHARING_MODAL_WIDTH } from 'lib/components/Sharing/SharingModal'\nimport { base64Encode } from 'lib/utils'\nimport { copyToClipboard } from 'lib/utils/copyToClipboard'\nimport posthog from 'posthog-js'\nimport { useState } from 'react'\nimport { urls } from 'scenes/urls'\n\nimport { AccessControlPopoutCTA } from '~/layout/navigation-3000/sidepanel/panels/access_control/AccessControlPopoutCTA'\nimport { AccessControlResourceType } from '~/types'\n\nimport { notebookLogic } from './notebookLogic'\n\nexport type NotebookShareModalProps = {\n    shortId: string\n}\n\nexport function NotebookShareModal({ shortId }: NotebookShareModalProps): JSX.Element {\n    const { content, isLocalOnly, isShareModalOpen } = useValues(notebookLogic({ shortId }))\n    const { closeShareModal } = useActions(notebookLogic({ shortId }))\n\n    const notebookUrl = urls.absolute(urls.currentProject(urls.notebook(shortId)))\n    const canvasUrl = urls.absolute(urls.canvas()) + `#\uD83E\uDD94=${base64Encode(JSON.stringify(content))}`\n\n    const [interestTracked, setInterestTracked] = useState(false)\n\n    const trackInterest = (): void => {\n        posthog.capture('pressed interested in notebook sharing', { url: notebookUrl })\n    }\n\n    return (\n        <LemonModal\n            title=\"Share notebook\"\n            onClose={() => closeShareModal()}\n            isOpen={isShareModalOpen}\n            width={SHARING_MODAL_WIDTH}\n            footer={\n                <LemonButton type=\"secondary\" onClick={closeShareModal}>\n                    Done\n                </LemonButton>\n            }\n        >\n            <div className=\"space-y-4\">\n                <FlaggedFeature flag=\"role-based-access-control\">\n                    <>\n                        <AccessControlPopoutCTA\n                            resourceType={AccessControlResourceType.Notebook}\n                            callback={() => {\n                                closeShareModal()\n                            }}\n                        />\n                        <LemonDivider />\n                    </>\n                </FlaggedFeature>\n                <h3>Internal Link</h3>\n                {!isLocalOnly ? (\n                    <>\n                        <p>\n                            <b>Click the button below</b> to copy a direct link to this Notebook. Make sure the person\n                            you share it with has access to this PostHog project.\n                        </p>\n                        <LemonButton\n                            type=\"secondary\"\n                            fullWidth\n                            center\n                            sideIcon={<IconCopy />}\n                            onClick={() => void copyToClipboard(notebookUrl, 'notebook link')}\n                            title={notebookUrl}\n                        >\n                            <span className=\"truncate\">{notebookUrl}</span>\n                        </LemonButton>\n\n                        <LemonDivider className=\"my-4\" />\n                    </>\n                ) : (\n                    <LemonBanner type=\"info\">\n                        <p>This Notebook cannot be shared directly with others as it is only visible to you.</p>\n                    </LemonBanner>\n                )}\n\n                <h3>Template Link</h3>\n                <p>\n                    The link below will open a Canvas with the contents of this Notebook, allowing the receiver to view\n                    it, edit it or create their own Notebook without affecting this one.\n                </p>\n                <LemonButton\n                    type=\"secondary\"\n                    fullWidth\n                    center\n                    sideIcon={<IconCopy />}\n                    onClick={() => void copyToClipboard(canvasUrl, 'canvas link')}\n                    title={canvasUrl}\n                >\n                    <span className=\"truncate\">{canvasUrl}</span>\n                </LemonButton>\n\n                <LemonDivider className=\"my-4\" />\n\n                <h3>External Sharing</h3>\n\n                <LemonBanner\n                    type=\"warning\"\n                    action={{\n                        children: !interestTracked ? 'I would like this!' : 'Thanks!',\n                        onClick: () => {\n                            if (!interestTracked) {\n                                trackInterest()\n                                setInterestTracked(true)\n                            }\n                        },\n                    }}\n                >\n                    We don\u2019t currently support sharing notebooks externally, but it\u2019s on our roadmap!\n                </LemonBanner>\n            </div>\n        </LemonModal>\n    )\n}\n", "import { afterMount, connect, kea, key, path, props, selectors } from 'kea'\nimport { Scene } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { SIDE_PANEL_CONTEXT_KEY, SidePanelSceneContext } from '~/layout/navigation-3000/sidepanel/types'\nimport { notebooksModel } from '~/models/notebooksModel'\nimport { ActivityScope, Breadcrumb } from '~/types'\n\nimport { notebookLogic } from './Notebook/notebookLogic'\nimport type { notebookSceneLogicType } from './notebookSceneLogicType'\n\nexport type NotebookSceneLogicProps = {\n    shortId: string\n}\nexport const notebookSceneLogic = kea<notebookSceneLogicType>([\n    path((key) => ['scenes', 'notebooks', 'notebookSceneLogic', key]),\n    props({} as NotebookSceneLogicProps),\n    key(({ shortId }) => shortId),\n    connect((props: NotebookSceneLogicProps) => ({\n        values: [\n            notebookLogic(props),\n            ['notebook', 'notebookLoading', 'isLocalOnly'],\n            notebooksModel,\n            ['notebooksLoading'],\n        ],\n        actions: [notebookLogic(props), ['loadNotebook'], notebooksModel, ['createNotebook']],\n    })),\n    selectors(() => ({\n        notebookId: [() => [(_, props) => props], (props): string => props.shortId],\n\n        loading: [\n            (s) => [s.notebookLoading, s.notebooksLoading],\n            (notebookLoading, notebooksLoading) => notebookLoading || notebooksLoading,\n        ],\n\n        breadcrumbs: [\n            (s) => [s.notebook, s.loading],\n            (notebook, loading): Breadcrumb[] => [\n                {\n                    key: Scene.Notebooks,\n                    name: 'Notebooks',\n                    path: urls.notebooks(),\n                },\n                {\n                    key: [Scene.Notebook, notebook?.short_id || 'new'],\n                    name: notebook ? notebook?.title || 'Unnamed' : loading ? null : 'Notebook not found',\n                },\n            ],\n        ],\n\n        [SIDE_PANEL_CONTEXT_KEY]: [\n            (s) => [s.notebookId, s.isLocalOnly],\n            (notebookId, isLocalOnly): SidePanelSceneContext | null => {\n                return notebookId && !isLocalOnly\n                    ? {\n                          activity_scope: ActivityScope.NOTEBOOK,\n                          activity_item_id: notebookId,\n                          access_control_resource: 'notebook',\n                          access_control_resource_id: notebookId,\n                      }\n                    : null\n            },\n        ],\n    })),\n\n    afterMount(({ actions, props }) => {\n        if (props.shortId !== 'new') {\n            actions.loadNotebook()\n        }\n    }),\n])\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "NotebookShareModal", "shortId", "content", "isLocalOnly", "isShareModalOpen", "notebookLogic", "closeShareModal", "notebookUrl", "urls", "canvasUrl", "base64Encode", "interestTracked", "setInterestTracked", "trackInterest", "Co", "LemonModal", "SHARING_MODAL_WIDTH", "LemonButton", "FlaggedFeature", "AccessControlPopoutCTA", "LemonDivider", "LemonBanner", "IconCopy", "copyToClipboard", "init_dirname", "init_buffer", "init_process", "import_kea", "notebookSceneLogic", "key", "shortId", "props", "notebookLogic", "notebooksModel", "_", "s", "notebookLoading", "notebooksLoading", "notebook", "loading", "urls", "SIDE_PANEL_CONTEXT_KEY", "notebookId", "isLocalOnly", "actions", "import_jsx_runtime", "scene", "NotebookScene", "notebookSceneLogic", "shortId", "notebookId", "loading", "createNotebook", "notebook", "conflictWarningVisible", "accessDeniedToNotebook", "notebookLogic", "selectNotebook", "closeSidePanel", "notebookPanelLogic", "selectedNotebook", "visibility", "AccessDenied", "NotFound", "IconOpenSidebar", "LemonButton", "isTemplate", "NotebookLoadingState", "LemonTag", "UserActivityIndicator", "NotebookSyncInfo", "NotebookMenu", "IconInfo", "LOCAL_NOTEBOOK_TEMPLATES", "NotebookExpandButton", "Notebook", "NotebookShareModal"]
}
