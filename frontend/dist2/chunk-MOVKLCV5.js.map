{
  "version": 3,
  "sources": ["../src/lib/components/PropertyFilters/components/PropertyFiltersDisplay.tsx", "../src/lib/components/ActivityLog/ActivityLog.tsx", "../src/lib/components/ActivityLog/activityLogLogic.tsx", "../src/lib/components/ActivityLog/humanizeActivity.tsx", "../src/scenes/cohorts/activityDescriptions.tsx", "../src/scenes/data-management/dataManagementDescribers.tsx", "../src/lib/components/ActivityLog/SentenceList.tsx", "../src/scenes/feature-flags/activityDescriptions.tsx", "../src/scenes/notebooks/Notebook/notebookActivityDescriber.tsx", "../src/scenes/persons/activityDescriptions.tsx", "../src/scenes/pipeline/hogfunctions/activityDescriptions.tsx", "../src/scenes/pipeline/pipelinePluginActivityDescriptions.tsx", "../src/scenes/pipeline/configUtils.ts", "../src/scenes/saved-insights/activityDescriptions.tsx", "../src/lib/components/Cards/InsightCard/InsightDetails.tsx", "../src/scenes/surveys/surveyActivityDescriber.tsx", "../../node_modules/.pnpm/ts-pattern@4.3.0/node_modules/ts-pattern/src/internals/symbols.ts", "../../node_modules/.pnpm/ts-pattern@4.3.0/node_modules/ts-pattern/src/internals/helpers.ts", "../../node_modules/.pnpm/ts-pattern@4.3.0/node_modules/ts-pattern/src/patterns.ts", "../../node_modules/.pnpm/ts-pattern@4.3.0/node_modules/ts-pattern/src/match.ts", "../../node_modules/.pnpm/ts-pattern@4.3.0/node_modules/ts-pattern/src/is-matching.ts", "../src/scenes/teamActivityDescriber.tsx"],
  "sourcesContent": ["import { AnyPropertyFilter } from '~/types'\n\nimport { PropertyFilterButton } from './PropertyFilterButton'\n\nconst PropertyFiltersDisplay = ({ filters }: { filters: AnyPropertyFilter[] }): JSX.Element => {\n    return (\n        <div className=\"PropertyFilters flex-wrap\">\n            {filters &&\n                filters.map((item) => {\n                    return <PropertyFilterButton key={item.key} item={item} />\n                })}\n        </div>\n    )\n}\n\nexport default PropertyFiltersDisplay\n", "import './ActivityLog.scss'\n\nimport { LemonDivider } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { useValues } from 'kea'\nimport { activityLogLogic, ActivityLogLogicProps } from 'lib/components/ActivityLog/activityLogLogic'\nimport { HumanizedActivityLogItem } from 'lib/components/ActivityLog/humanizeActivity'\nimport { TZLabel } from 'lib/components/TZLabel'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { LemonSkeleton } from 'lib/lemon-ui/LemonSkeleton'\nimport { PaginationControl, usePagination } from 'lib/lemon-ui/PaginationControl'\nimport { ProfilePicture } from 'lib/lemon-ui/ProfilePicture'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { AvailableFeature, ProductKey } from '~/types'\n\nimport { PayGateMini } from '../PayGateMini/PayGateMini'\nimport { ProductIntroduction } from '../ProductIntroduction/ProductIntroduction'\n\nexport type ActivityLogProps = ActivityLogLogicProps & {\n    startingPage?: number\n    caption?: string | JSX.Element\n    renderSideAction?: (logItem: HumanizedActivityLogItem) => JSX.Element\n}\n\nconst Empty = ({ scope }: { scope: string | string[] }): JSX.Element => {\n    const noun = (Array.isArray(scope) ? scope[0] : scope)\n        .replace(/([A-Z])/g, ' $1')\n        .trim()\n        .toLowerCase()\n\n    return (\n        <ProductIntroduction\n            productName={noun.toUpperCase()}\n            productKey={ProductKey.HISTORY}\n            thingName=\"history record\"\n            description={`History shows any ${noun} changes that have been made. After making changes you'll see them logged here.`}\n            isEmpty={true}\n        />\n    )\n}\n\nconst SkeletonLog = (): JSX.Element => {\n    return (\n        <div className=\"ActivityLogRow items-start\">\n            <LemonSkeleton.Circle />\n            <div className=\"details space-y-4 mt-2\">\n                <LemonSkeleton className=\"w-1/2 h-4\" />\n                <LemonSkeleton />\n            </div>\n        </div>\n    )\n}\n\nconst Loading = (): JSX.Element => {\n    return (\n        <>\n            <SkeletonLog />\n            <SkeletonLog />\n            <SkeletonLog />\n            <SkeletonLog />\n        </>\n    )\n}\n\nexport const ActivityLogRow = ({\n    logItem,\n    showExtendedDescription,\n    renderSideAction,\n}: {\n    logItem: HumanizedActivityLogItem\n    showExtendedDescription?: boolean\n    renderSideAction?: ActivityLogProps['renderSideAction']\n}): JSX.Element => {\n    return (\n        <div className={clsx('ActivityLogRow', logItem.unread && 'ActivityLogRow--unread')}>\n            <ProfilePicture\n                showName={false}\n                user={{\n                    first_name: logItem.isSystem ? logItem.name : undefined,\n                    email: logItem.email ?? undefined,\n                }}\n                type={logItem.isSystem ? 'system' : 'person'}\n                size=\"xl\"\n            />\n            <div className=\"ActivityLogRow__details\">\n                <div className=\"ActivityLogRow__description\">{logItem.description}</div>\n                {showExtendedDescription && logItem.extendedDescription && (\n                    <div className=\"ActivityLogRow__description__extended\">{logItem.extendedDescription}</div>\n                )}\n                <div className=\"text-secondary\">\n                    <TZLabel time={logItem.created_at} />\n                </div>\n            </div>\n            {renderSideAction?.(logItem)}\n        </div>\n    )\n}\n\nexport const ActivityLog = ({\n    scope,\n    id,\n    caption,\n    startingPage = 1,\n    renderSideAction,\n}: ActivityLogProps): JSX.Element | null => {\n    const logic = activityLogLogic({ scope, id, caption, startingPage })\n    const { humanizedActivity, activityLoading, pagination } = useValues(logic)\n    const { user } = useValues(userLogic)\n    const { featureFlags } = useValues(featureFlagLogic)\n\n    const paginationState = usePagination(humanizedActivity || [], pagination)\n\n    return (\n        <div className=\"ActivityLog\">\n            {caption && <div className=\"page-caption\">{caption}</div>}\n            <PayGateMini\n                feature={AvailableFeature.AUDIT_LOGS}\n                overrideShouldShowGate={user?.is_impersonated || !!featureFlags[FEATURE_FLAGS.AUDIT_LOGS_ACCESS]}\n            >\n                {activityLoading && humanizedActivity.length === 0 ? (\n                    <Loading />\n                ) : humanizedActivity.length === 0 ? (\n                    <Empty scope={scope} />\n                ) : (\n                    <>\n                        <div className=\"space-y-2\">\n                            {humanizedActivity.map((logItem, index) => (\n                                <ActivityLogRow\n                                    key={index}\n                                    logItem={logItem}\n                                    showExtendedDescription={true}\n                                    renderSideAction={renderSideAction}\n                                />\n                            ))}\n                        </div>\n                        <LemonDivider />\n                        <PaginationControl {...paginationState} nouns={['activity', 'activities']} />\n                    </>\n                )}\n            </PayGateMini>\n        </div>\n    )\n}\n", "import { actions, events, kea, key, listeners, path, props, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport { router, urlToAction } from 'kea-router'\nimport api, { ActivityLogPaginatedResponse } from 'lib/api'\nimport {\n    ActivityLogItem,\n    defaultDescriber,\n    Describer,\n    humanize,\n    HumanizedActivityLogItem,\n} from 'lib/components/ActivityLog/humanizeActivity'\nimport { ACTIVITY_PAGE_SIZE } from 'lib/constants'\nimport { PaginationManual } from 'lib/lemon-ui/PaginationControl'\nimport { cohortActivityDescriber } from 'scenes/cohorts/activityDescriptions'\nimport { dataManagementActivityDescriber } from 'scenes/data-management/dataManagementDescribers'\nimport { flagActivityDescriber } from 'scenes/feature-flags/activityDescriptions'\nimport { notebookActivityDescriber } from 'scenes/notebooks/Notebook/notebookActivityDescriber'\nimport { personActivityDescriber } from 'scenes/persons/activityDescriptions'\nimport { hogFunctionActivityDescriber } from 'scenes/pipeline/hogfunctions/activityDescriptions'\nimport { pluginActivityDescriber } from 'scenes/pipeline/pipelinePluginActivityDescriptions'\nimport { insightActivityDescriber } from 'scenes/saved-insights/activityDescriptions'\nimport { surveyActivityDescriber } from 'scenes/surveys/surveyActivityDescriber'\nimport { teamActivityDescriber } from 'scenes/teamActivityDescriber'\nimport { urls } from 'scenes/urls'\n\nimport { ActivityScope, PipelineNodeTab, PipelineStage, PipelineTab } from '~/types'\n\nimport type { activityLogLogicType } from './activityLogLogicType'\n\n/**\n * Having this function inside the `humanizeActivity module was causing very weird test errors in other modules\n * see https://github.com/PostHog/posthog/pull/12062\n * So, we inject the function instead\n * **/\nexport const describerFor = (logItem?: ActivityLogItem): Describer | undefined => {\n    switch (logItem?.scope) {\n        case ActivityScope.FEATURE_FLAG:\n            return flagActivityDescriber\n        case ActivityScope.PLUGIN:\n        case ActivityScope.PLUGIN_CONFIG:\n            return pluginActivityDescriber\n        case ActivityScope.HOG_FUNCTION:\n            return hogFunctionActivityDescriber\n        case ActivityScope.COHORT:\n            return cohortActivityDescriber\n        case ActivityScope.INSIGHT:\n            return insightActivityDescriber\n        case ActivityScope.PERSON:\n            return personActivityDescriber\n        case ActivityScope.EVENT_DEFINITION:\n        case ActivityScope.PROPERTY_DEFINITION:\n            return dataManagementActivityDescriber\n        case ActivityScope.NOTEBOOK:\n            return notebookActivityDescriber\n        case ActivityScope.TEAM:\n            return teamActivityDescriber\n        case ActivityScope.SURVEY:\n            return surveyActivityDescriber\n        default:\n            return (logActivity, asNotification) => defaultDescriber(logActivity, asNotification)\n    }\n}\n\nexport type ActivityLogLogicProps = {\n    scope: ActivityScope | ActivityScope[]\n    // if no id is provided, the list is not scoped by id and shows all activity ordered by time\n    id?: number | string\n}\n\nexport const activityLogLogic = kea<activityLogLogicType>([\n    props({} as ActivityLogLogicProps),\n    key(({ scope, id }) => `activity/${Array.isArray(scope) ? scope.join(',') : scope}/${id || 'all'}`),\n    path((key) => ['lib', 'components', 'ActivityLog', 'activitylog', 'logic', key]),\n    actions({\n        setPage: (page: number) => ({ page }),\n    }),\n    loaders(({ values, props }) => ({\n        activity: [\n            { results: [], count: 0 } as ActivityLogPaginatedResponse<ActivityLogItem>,\n            {\n                fetchActivity: async () => {\n                    const response = await api.activity.listLegacy(props, values.page)\n                    return { results: response.results, count: (response as any).total_count ?? response.count }\n                },\n            },\n        ],\n    })),\n    reducers(() => ({\n        page: [\n            1,\n            {\n                setPage: (_, { page }) => page,\n            },\n        ],\n    })),\n    selectors(({ actions }) => ({\n        pagination: [\n            (s) => [s.page, s.totalCount],\n            (page, totalCount): PaginationManual => {\n                return {\n                    controlled: true,\n                    pageSize: ACTIVITY_PAGE_SIZE,\n                    currentPage: page,\n                    entryCount: totalCount || 0,\n                    onBackward: () => actions.setPage(page - 1),\n                    onForward: () => actions.setPage(page + 1),\n                }\n            },\n        ],\n        humanizedActivity: [\n            (s) => [s.activity],\n            (activity): HumanizedActivityLogItem[] => {\n                return activity.results ? humanize(activity.results, describerFor) : []\n            },\n        ],\n        totalCount: [\n            (s) => [s.activity],\n            (activity): number | null => {\n                return activity.count ?? null\n            },\n        ],\n    })),\n    listeners(({ actions }) => ({\n        setPage: async (_, breakpoint) => {\n            breakpoint()\n            actions.fetchActivity()\n        },\n    })),\n    urlToAction(({ values, actions, props }) => {\n        const onPageChange = (\n            searchParams: Record<string, any>,\n            hashParams: Record<string, any>,\n            pageScope: ActivityScope,\n            forceUsePageParam?: boolean\n        ): void => {\n            const pageInURL = searchParams['page']\n            const firstScope = Array.isArray(props.scope) ? props.scope[0] : props.scope\n\n            const shouldPage =\n                forceUsePageParam ||\n                (pageScope === ActivityScope.PERSON && hashParams['activeTab'] === 'history') ||\n                ([ActivityScope.FEATURE_FLAG, ActivityScope.INSIGHT, ActivityScope.PLUGIN].includes(pageScope) &&\n                    searchParams['tab'] === 'history')\n\n            if (shouldPage && pageInURL && pageInURL !== values.page && pageScope === firstScope) {\n                actions.setPage(pageInURL)\n            }\n\n            const shouldRemovePageParam =\n                (pageScope === ActivityScope.PERSON && hashParams['activeTab'] !== 'history') ||\n                ([ActivityScope.FEATURE_FLAG, ActivityScope.INSIGHT, ActivityScope.PLUGIN].includes(pageScope) &&\n                    searchParams['tab'] !== 'history')\n\n            if (!forceUsePageParam && shouldRemovePageParam && 'page' in router.values.searchParams) {\n                const { page: _, ...newSearchParams } = router.values.searchParams\n                router.actions.replace(\n                    router.values.currentLocation.pathname,\n                    newSearchParams,\n                    router.values.hashParams\n                )\n            }\n        }\n        return {\n            '/person/*': (_, searchParams, hashParams) => onPageChange(searchParams, hashParams, ActivityScope.PERSON),\n            [urls.featureFlags()]: (_, searchParams, hashParams) =>\n                onPageChange(searchParams, hashParams, ActivityScope.FEATURE_FLAG),\n            [urls.savedInsights()]: (_, searchParams, hashParams) =>\n                onPageChange(searchParams, hashParams, ActivityScope.INSIGHT),\n            [urls.featureFlag(':id')]: (_, searchParams, hashParams) =>\n                onPageChange(searchParams, hashParams, ActivityScope.FEATURE_FLAG, true),\n            [urls.pipelineNode(PipelineStage.Destination, ':id', PipelineNodeTab.History)]: (\n                _,\n                searchParams,\n                hashParams\n            ) => onPageChange(searchParams, hashParams, ActivityScope.HOG_FUNCTION),\n            [urls.pipeline(PipelineTab.History)]: (_, searchParams, hashParams) =>\n                onPageChange(searchParams, hashParams, ActivityScope.PLUGIN),\n        }\n    }),\n    events(({ actions }) => ({\n        afterMount: () => {\n            actions.fetchActivity()\n        },\n    })),\n])\n", "import { dayjs } from 'lib/dayjs'\nimport { LemonMarkdown } from 'lib/lemon-ui/LemonMarkdown'\nimport { fullName } from 'lib/utils'\n\nimport { ActivityScope, InsightShortId, PersonType, UserBasicType } from '~/types'\n\nexport interface ActivityChange {\n    type: ActivityScope\n    action: 'changed' | 'created' | 'deleted' | 'exported' | 'split'\n    field?: string\n    before?: string | number | any[] | Record<string, any> | boolean | null\n    after?: string | number | any[] | Record<string, any> | boolean | null\n}\n\nexport interface PersonMerge {\n    type: 'Person'\n    source: PersonType[]\n    target: PersonType\n}\n\nexport interface Trigger {\n    job_type: string\n    job_id: string\n    payload: Record<string, any>\n}\n\nexport interface ActivityLogDetail {\n    merge: PersonMerge | null\n    trigger: Trigger | null\n    changes: ActivityChange[] | null\n    name: string | null\n    short_id?: InsightShortId | null\n    /** e.g. for property definition carries event, person, or group */\n    type?: string\n}\n\nexport type ActivityLogItem = {\n    user?: Pick<UserBasicType, 'email' | 'first_name' | 'last_name'>\n    activity: string\n    created_at: string\n    scope: ActivityScope\n    item_id?: string\n    detail: ActivityLogDetail\n    /** Present if the log is used as a notification. Whether the notification is unread. */\n    unread?: boolean\n    /** Whether the activity was initiated by a PostHog staff member impersonating a user. */\n    is_staff?: boolean\n    /** Whether the activity was initiated by the PostHog backend. Example: an exported image when sharing an insight. */\n    is_system?: boolean\n}\n\n// the description of a single activity log is a sentence describing one or more changes that makes up the entry\nexport type Description = string | JSX.Element | null\n// the extended description gives extra context, like the insight details card to describe a change to an insight\nexport type ExtendedDescription = JSX.Element | undefined\nexport type ChangeMapping = {\n    description: Description[] | null\n    extendedDescription?: ExtendedDescription\n    suffix?: string | JSX.Element | null // to override the default suffix\n}\nexport type HumanizedChange = { description: Description | null; extendedDescription?: ExtendedDescription }\n\nexport type HumanizedActivityLogItem = {\n    email?: string | null\n    name?: string\n    isSystem?: boolean\n    description: Description\n    extendedDescription?: ExtendedDescription // e.g. an insight's filters summary\n    created_at: dayjs.Dayjs\n    unread?: boolean\n}\n\nexport type Describer = (logItem: ActivityLogItem, asNotification?: boolean) => HumanizedChange\n\nexport function detectBoolean(candidate: unknown): boolean {\n    let b: boolean = !!candidate\n    if (typeof candidate === 'string') {\n        b = candidate.toLowerCase() === 'true'\n    }\n    return b\n}\n\nexport function humanize(\n    results: ActivityLogItem[],\n    describerFor?: (logItem?: ActivityLogItem) => Describer | undefined,\n    asNotification?: boolean\n): HumanizedActivityLogItem[] {\n    const logLines: HumanizedActivityLogItem[] = []\n\n    for (const logItem of results) {\n        if (!logItem.detail || !logItem.scope) {\n            // Sometimes we can end up with bad payloads from the backend so we check for some required fields here\n            continue\n        }\n        const describer = describerFor?.(logItem)\n\n        if (!describer) {\n            continue\n        }\n        const { description, extendedDescription } = describer(logItem, asNotification)\n\n        if (description !== null) {\n            logLines.push({\n                email: logItem.user?.email,\n                name: logItem.user ? fullName(logItem.user) : undefined,\n                isSystem: logItem.is_system,\n                description,\n                extendedDescription,\n                created_at: dayjs(logItem.created_at),\n                unread: logItem.unread,\n            })\n        }\n    }\n    return logLines\n}\n\nexport function userNameForLogItem(logItem: ActivityLogItem): string {\n    if (logItem.is_system) {\n        return 'PostHog'\n    }\n    return logItem.user ? fullName(logItem.user) : 'A user'\n}\n\nconst NO_PLURAL_SCOPES: ActivityScope[] = [\n    ActivityScope.DATA_MANAGEMENT,\n    ActivityScope.EVENT_DEFINITION,\n    ActivityScope.PROPERTY_DEFINITION,\n]\n\nexport function humanizeScope(scope: ActivityScope, singular = false): string {\n    let output = scope.split(/(?=[A-Z])/).join(' ')\n\n    if (!singular && !NO_PLURAL_SCOPES.includes(scope)) {\n        output += 's'\n    }\n\n    return output\n}\n\nexport function defaultDescriber(\n    logItem: ActivityLogItem,\n    asNotification = false,\n    resource?: string | JSX.Element\n): HumanizedChange {\n    resource = resource || logItem.detail.name || `a ${humanizeScope(logItem.scope, true)}`\n\n    if (logItem.activity == 'deleted') {\n        return {\n            description: (\n                <>\n                    <strong>{userNameForLogItem(logItem)}</strong> deleted <b>{resource}</b>\n                </>\n            ),\n        }\n    }\n\n    if (logItem.activity == 'commented') {\n        let description: JSX.Element | string\n\n        if (logItem.scope === 'Comment') {\n            description = (\n                <>\n                    <strong>{userNameForLogItem(logItem)}</strong> replied to a {humanizeScope(logItem.scope, true)}\n                </>\n            )\n        } else {\n            description = (\n                <>\n                    <strong>{userNameForLogItem(logItem)}</strong> commented\n                    {asNotification ? <> on a {humanizeScope(logItem.scope, true)}</> : null}\n                </>\n            )\n        }\n        const commentContent = logItem.detail.changes?.[0].after as string | undefined\n\n        return {\n            description,\n            extendedDescription: commentContent ? (\n                <div className=\"border rounded bg-surface-primary p-4\">\n                    <LemonMarkdown lowKeyHeadings>{commentContent}</LemonMarkdown>\n                </div>\n            ) : undefined,\n        }\n    }\n\n    return { description: null }\n}\n", "import '../../lib/components/Cards/InsightCard/InsightCard.scss'\n\nimport {\n    ActivityLogItem,\n    defaultDescriber,\n    HumanizedChange,\n    userNameForLogItem,\n} from 'lib/components/ActivityLog/humanizeActivity'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { urls } from 'scenes/urls'\n\nconst nameOrLinkToCohort = (id?: string | null, name?: string | null): string | JSX.Element => {\n    const displayName = name || '(empty string)'\n    return id ? <Link to={urls.cohort(id)}>{displayName}</Link> : displayName\n}\n\nexport function cohortActivityDescriber(logItem: ActivityLogItem, asNotification?: boolean): HumanizedChange {\n    if (logItem.scope != 'Cohort') {\n        console.error('cohort describer received a non-cohort activity')\n        return { description: null }\n    }\n\n    if (logItem.activity == 'created') {\n        return {\n            description: (\n                <>\n                    <strong>{userNameForLogItem(logItem)}</strong> created the cohort:{' '}\n                    {nameOrLinkToCohort(logItem?.item_id, logItem?.detail.name)}\n                </>\n            ),\n        }\n    }\n\n    if (logItem.activity == 'deleted') {\n        return {\n            description: (\n                <>\n                    <strong>{userNameForLogItem(logItem)}</strong> deleted the cohort: {logItem.detail.name}\n                </>\n            ),\n        }\n    }\n\n    if (logItem.activity == 'updated') {\n        return {\n            description: (\n                <>\n                    <strong>{userNameForLogItem(logItem)}</strong> updated the cohort:{' '}\n                    {nameOrLinkToCohort(logItem?.item_id, logItem?.detail.name)}\n                </>\n            ),\n        }\n    }\n    return defaultDescriber(logItem, asNotification, nameOrLinkToCohort(logItem?.detail.short_id))\n}\n", "import {\n    ActivityChange,\n    ActivityLogItem,\n    ChangeMapping,\n    defaultDescriber,\n    Description,\n    detectBoolean,\n    HumanizedChange,\n    userNameForLogItem,\n} from 'lib/components/ActivityLog/humanizeActivity'\nimport { SentenceList } from 'lib/components/ActivityLog/SentenceList'\nimport { ObjectTags } from 'lib/components/ObjectTags/ObjectTags'\nimport { IconVerifiedEvent } from 'lib/lemon-ui/icons'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { pluralize } from 'lib/utils'\nimport { urls } from 'scenes/urls'\n\nimport { ActivityScope } from '~/types'\n\nconst dataManagementActionsMapping: Record<\n    string,\n    (change?: ActivityChange, logItem?: ActivityLogItem) => ChangeMapping | null\n> = {\n    description: (change) => {\n        return {\n            description: [\n                <>\n                    changed description to <strong>\"{change?.after as string}\"</strong>\n                </>,\n            ],\n        }\n    },\n    tags: function onTags(change) {\n        const tagsBefore = change?.before as string[] | null\n        const tagsAfter = change?.after as string[] | null\n        const addedTags = tagsAfter?.filter((t) => tagsBefore?.indexOf(t) === -1) || []\n        const removedTags = tagsBefore?.filter((t) => tagsAfter?.indexOf(t) === -1) || []\n\n        const changes: Description[] = []\n        if (addedTags.length) {\n            changes.push(\n                <>\n                    added {pluralize(addedTags.length, 'tag', 'tags', false)}{' '}\n                    <ObjectTags tags={addedTags} saving={false} style={{ display: 'inline' }} staticOnly />\n                </>\n            )\n        }\n        if (removedTags.length) {\n            changes.push(\n                <>\n                    removed {pluralize(removedTags.length, 'tag', 'tags', false)}{' '}\n                    <ObjectTags tags={removedTags} saving={false} style={{ display: 'inline' }} staticOnly />\n                </>\n            )\n        }\n\n        return { description: changes }\n    },\n    verified: (change, logItem) => {\n        const verified = detectBoolean(change?.after)\n        return {\n            description: [\n                <>\n                    marked {nameAndLink(logItem)} as <strong>{verified ? 'verified' : 'unverified'}</strong>{' '}\n                    {verified && <IconVerifiedEvent />}\n                </>,\n            ],\n            suffix: <></>,\n        }\n    },\n}\n\nfunction nameAndLink(logItem?: ActivityLogItem): JSX.Element {\n    return logItem?.item_id ? (\n        <Link to={urls.eventDefinition(logItem.item_id)}>{logItem?.detail.name || 'unknown'}</Link>\n    ) : logItem?.detail.name ? (\n        <>{logItem?.detail.name}</>\n    ) : (\n        <>unknown</>\n    )\n}\n\nfunction DescribeType({ logItem }: { logItem: ActivityLogItem }): JSX.Element {\n    const typeDescription = logItem.scope === ActivityScope.EVENT_DEFINITION ? 'event' : 'property'\n    if (typeDescription === 'property') {\n        return (\n            <>\n                <span className=\"highlighted-activity\">{logItem.detail?.type}</span> property definition\n            </>\n        )\n    }\n    return <>{typeDescription} definition</>\n}\n\nexport function dataManagementActivityDescriber(logItem: ActivityLogItem, asNotification?: boolean): HumanizedChange {\n    if (logItem.scope !== ActivityScope.EVENT_DEFINITION && logItem.scope !== ActivityScope.PROPERTY_DEFINITION) {\n        console.error('data management describer received a non-data-management activity')\n        return { description: null }\n    }\n\n    if (logItem.activity == 'changed') {\n        let changes: Description[] = []\n        let changeSuffix: Description = (\n            <>\n                on <DescribeType logItem={logItem} /> {nameAndLink(logItem)}\n            </>\n        )\n\n        for (const change of logItem.detail.changes || []) {\n            if (!change?.field || !dataManagementActionsMapping[change.field]) {\n                continue //  updates have to have a \"field\" to be described\n            }\n\n            const actionHandler = dataManagementActionsMapping[change.field]\n            const processedChange = actionHandler(change, logItem)\n            if (processedChange === null) {\n                continue // // unexpected log from backend is indescribable\n            }\n\n            const { description, suffix } = processedChange\n            if (description) {\n                changes = changes.concat(description)\n            }\n\n            if (suffix) {\n                changeSuffix = suffix\n            }\n        }\n\n        if (changes.length) {\n            return {\n                description: (\n                    <SentenceList\n                        listParts={changes}\n                        prefix={<strong>{userNameForLogItem(logItem)}</strong>}\n                        suffix={changeSuffix}\n                    />\n                ),\n            }\n        }\n    }\n\n    if (logItem.activity == 'deleted') {\n        return {\n            description: (\n                <>\n                    <strong>{userNameForLogItem(logItem)}</strong> deleted <DescribeType logItem={logItem} />{' '}\n                    {nameAndLink(logItem)}\n                </>\n            ),\n        }\n    }\n\n    return defaultDescriber(logItem, asNotification, nameAndLink(logItem))\n}\n", "import './SentenceList.scss'\n\nexport interface SentenceListProps {\n    listParts: (string | JSX.Element | null)[]\n    prefix?: string | JSX.Element | null\n    suffix?: string | JSX.Element | null\n}\n\n/** Transforms a list of phrases into a cohesive English sentence using commas and the word 'and' where appropriate */\nexport function SentenceList({ listParts, prefix = null, suffix = null }: SentenceListProps): JSX.Element {\n    return (\n        <div className=\"sentence-list\">\n            {prefix && <div className=\"sentence-part\">{prefix}&nbsp;</div>}\n            <>\n                {listParts\n                    .filter((part) => !!part)\n                    .flatMap((part, index, all) => {\n                        const isntFirst = index > 0\n                        const isLast = index === all.length - 1\n                        const atLeastThree = all.length >= 2\n                        return [\n                            isntFirst && (\n                                <div className=\"sentence-part\" key={`${index}-a`}>\n                                    ,{' '}\n                                </div>\n                            ),\n                            isLast && atLeastThree && (\n                                <div className=\"sentence-part\" key={`${index}-b`}>\n                                    &nbsp;and&nbsp;\n                                </div>\n                            ),\n                            <div className=\"sentence-part\" key={`${index}-c`}>\n                                {part}\n                            </div>,\n                        ]\n                    })}\n            </>\n            {suffix && <div className=\"sentence-part\">&nbsp;{suffix}</div>}\n        </div>\n    )\n}\n", "import {\n    ActivityChange,\n    ActivityLogItem,\n    ChangeMapping,\n    defaultDescriber,\n    Description,\n    detectBoolean,\n    HumanizedChange,\n    userNameForLogItem,\n} from 'lib/components/ActivityLog/humanizeActivity'\nimport { SentenceList } from 'lib/components/ActivityLog/SentenceList'\nimport { ObjectTags } from 'lib/components/ObjectTags/ObjectTags'\nimport { PropertyFilterButton } from 'lib/components/PropertyFilters/components/PropertyFilterButton'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { pluralize } from 'lib/utils'\nimport { urls } from 'scenes/urls'\n\nimport { AnyPropertyFilter, FeatureFlagFilters, FeatureFlagGroupType, FeatureFlagType } from '~/types'\n\nconst nameOrLinkToFlag = (id: string | undefined, name: string | null | undefined): string | JSX.Element => {\n    const displayName = name || '(empty string)'\n    return id ? <Link to={urls.featureFlag(id)}>{displayName}</Link> : displayName\n}\n\nconst featureFlagActionsMapping: Record<\n    keyof FeatureFlagType,\n    (change?: ActivityChange, logItem?: ActivityLogItem) => ChangeMapping | null\n> = {\n    name: function onName() {\n        return {\n            description: [<>changed the description</>],\n        }\n    },\n    active: function onActive(change, logItem) {\n        let isActive: boolean = !!change?.after\n        if (typeof change?.after === 'string') {\n            isActive = change?.after.toLowerCase() === 'true'\n        }\n        const describeChange: string = isActive ? 'enabled' : 'disabled'\n\n        return {\n            description: [<>{describeChange}</>],\n            suffix: <>{nameOrLinkToFlag(logItem?.item_id, logItem?.detail.name)}</>,\n        }\n    },\n    filters: function onChangedFilter(change) {\n        const filtersBefore = change?.before as FeatureFlagFilters\n        const filtersAfter = change?.after as FeatureFlagFilters\n\n        const isBooleanValueFlag = Array.isArray(filtersAfter?.groups)\n        const isMultivariateFlag = filtersAfter?.multivariate\n\n        const changes: Description[] = []\n\n        if (isBooleanValueFlag) {\n            if (\n                filtersAfter.groups.length === 0 ||\n                !filtersAfter.groups.some((group) => group.rollout_percentage !== 0)\n            ) {\n                // there are no rollout groups or all are at 0%\n                changes.push(<>changed the filter conditions to apply to no users</>)\n            } else {\n                filtersAfter.payloads &&\n                    Object.keys(filtersAfter.payloads).forEach((key: string) => {\n                        const changedPayload = filtersAfter.payloads?.[key]?.toString() || null\n                        changes.push(<SentenceList listParts={[changedPayload]} prefix=\"changed payload to\" />)\n                    })\n\n                const groupAdditions: (string | JSX.Element | null)[] = []\n                const groupRemovals: (string | JSX.Element | null)[] = []\n\n                filtersAfter.groups\n                    .filter((groupAfter, index) => {\n                        const groupBefore = filtersBefore?.groups?.[index]\n                        // only keep changes with no \"before\" state, or those where before and after are different\n                        return !groupBefore || JSON.stringify(groupBefore) !== JSON.stringify(groupAfter)\n                    })\n                    .forEach((groupAfter: FeatureFlagGroupType) => {\n                        const { properties, rollout_percentage = null } = groupAfter\n\n                        if ((properties?.length || 0) > 0) {\n                            const nonEmptyProperties = properties as AnyPropertyFilter[] // above check ensures this is not null\n                            const newButtons =\n                                nonEmptyProperties.map((property, idx) => {\n                                    return (\n                                        <>\n                                            {' '}\n                                            {idx === 0 && (\n                                                <span>\n                                                    <strong>{rollout_percentage ?? 100}%</strong> of{' '}\n                                                </span>\n                                            )}\n                                            <PropertyFilterButton key={property.key} item={property} />\n                                        </>\n                                    )\n                                }) || []\n                            newButtons[0] = (\n                                <>\n                                    <span>\n                                        <strong>{rollout_percentage ?? 100}%</strong> of{' '}\n                                    </span>\n                                    <PropertyFilterButton\n                                        key={nonEmptyProperties[0].key}\n                                        item={nonEmptyProperties[0]}\n                                    />\n                                </>\n                            )\n                            groupAdditions.push(...newButtons)\n                        } else {\n                            groupAdditions.push(\n                                <>\n                                    <strong>{rollout_percentage ?? 100}%</strong> of <strong>all users</strong>\n                                </>\n                            )\n                        }\n                    })\n\n                if (groupAdditions.length) {\n                    changes.push(\n                        <SentenceList listParts={groupAdditions} prefix=\"changed the filter conditions to apply to\" />\n                    )\n                }\n\n                const removedGroups = (filtersBefore?.groups || []).filter((_, index) => {\n                    const groupAfter = filtersAfter?.groups?.[index]\n                    // only keep changes with no \"after\" state, they've been removed\n                    return !groupAfter\n                })\n\n                if (removedGroups.length) {\n                    groupRemovals.push(\n                        <>\n                            <strong>removed </strong>{' '}\n                            {pluralize(removedGroups.length, 'release condition', 'release conditions')}\n                        </>\n                    )\n                }\n\n                if (groupRemovals.length) {\n                    changes.push(<SentenceList listParts={groupRemovals} />)\n                }\n            }\n        }\n\n        if (isMultivariateFlag) {\n            filtersAfter.payloads &&\n                Object.keys(filtersAfter.payloads).forEach((key: string) => {\n                    const changedPayload = filtersAfter.payloads?.[key]?.toString() || null\n                    changes.push(\n                        <SentenceList\n                            listParts={[\n                                <span key={key} className=\"highlighted-activity\">\n                                    {changedPayload}\n                                </span>,\n                            ]}\n                            prefix={\n                                <span>\n                                    changed payload on <b>variant: {key}</b> to\n                                </span>\n                            }\n                        />\n                    )\n                })\n\n            changes.push(\n                <SentenceList\n                    listParts={(filtersAfter.multivariate?.variants || []).map((v) => (\n                        <div key={v.key} className=\"highlighted-activity\">\n                            {v.key}: <strong>{v.rollout_percentage}%</strong>\n                        </div>\n                    ))}\n                    prefix=\"changed the rollout percentage for the variants to\"\n                />\n            )\n        }\n\n        if (changes.length > 0) {\n            return { description: changes }\n        }\n\n        console.error({ change }, 'could not describe this change')\n        return null\n    },\n    deleted: function onSoftDelete(change, logItem) {\n        const isDeleted = detectBoolean(change?.after)\n        return {\n            description: [<>{isDeleted ? 'deleted' : 'un-deleted'}</>],\n            suffix: <>{nameOrLinkToFlag(logItem?.item_id, logItem?.detail.name)}</>,\n        }\n    },\n    rollout_percentage: function onRolloutPercentage(change) {\n        return {\n            description: [\n                <>\n                    changed rollout percentage to <div className=\"highlighted-activity\">{change?.after as string}%</div>\n                </>,\n            ],\n        }\n    },\n    key: function onKey(change, logItem) {\n        const changeBefore = change?.before as string\n        const changeAfter = change?.after as string\n        return {\n            description: [<>changed flag key on {changeBefore} to</>],\n            suffix: <>{nameOrLinkToFlag(logItem?.item_id, changeAfter)}</>,\n        }\n    },\n    ensure_experience_continuity: function onExperienceContinuity(change) {\n        const isEnabled = detectBoolean(change?.after)\n        const describeChange: string = isEnabled ? 'enabled' : 'disabled'\n\n        return { description: [<>{describeChange} experience continuity</>] }\n    },\n    tags: function onTags(change) {\n        const tagsBefore = change?.before as string[]\n        const tagsAfter = change?.after as string[]\n        const addedTags = tagsAfter.filter((t) => tagsBefore.indexOf(t) === -1)\n        const removedTags = tagsBefore.filter((t) => tagsAfter.indexOf(t) === -1)\n\n        const changes: Description[] = []\n        if (addedTags.length) {\n            changes.push(\n                <>\n                    added {pluralize(addedTags.length, 'tag', 'tags', false)}{' '}\n                    <ObjectTags tags={addedTags} saving={false} style={{ display: 'inline' }} staticOnly />\n                </>\n            )\n        }\n        if (removedTags.length) {\n            changes.push(\n                <>\n                    removed {pluralize(removedTags.length, 'tag', 'tags', false)}{' '}\n                    <ObjectTags tags={removedTags} saving={false} style={{ display: 'inline' }} staticOnly />\n                </>\n            )\n        }\n\n        return { description: changes }\n    },\n    // fields that are excluded on the backend\n    id: () => null,\n    created_at: () => null,\n    created_by: () => null,\n    is_simple_flag: () => null,\n    experiment_set: () => null,\n    features: () => null,\n    usage_dashboard: () => null,\n    // TODO: handle activity\n    rollback_conditions: () => null,\n    performed_rollback: () => null,\n    can_edit: () => null,\n    analytics_dashboards: () => null,\n    has_enriched_analytics: () => null,\n    surveys: () => null,\n    user_access_level: () => null,\n    is_remote_configuration: () => null,\n    has_encrypted_payloads: () => null,\n    status: () => null,\n}\n\nexport function flagActivityDescriber(logItem: ActivityLogItem, asNotification?: boolean): HumanizedChange {\n    if (logItem.scope != 'FeatureFlag') {\n        console.error('feature flag describer received a non-feature flag activity')\n        return { description: null }\n    }\n\n    if (logItem.activity === 'created') {\n        return {\n            description: (\n                <SentenceList\n                    listParts={[<>created a new feature flag:</>]}\n                    prefix={\n                        <>\n                            <strong>{userNameForLogItem(logItem)}</strong>\n                        </>\n                    }\n                    suffix={<> {nameOrLinkToFlag(logItem?.item_id, logItem?.detail.name)}</>}\n                />\n            ),\n        }\n    }\n\n    if (logItem.activity == 'updated') {\n        let changes: Description[] = []\n        let changeSuffix: Description = (\n            <>\n                on {asNotification && ' the flag '}\n                {nameOrLinkToFlag(logItem?.item_id, logItem?.detail.name)}\n            </>\n        )\n\n        for (const change of logItem.detail.changes || []) {\n            if (!change?.field) {\n                continue // feature flag updates have to have a \"field\" to be described\n            }\n\n            const possibleLogItem = featureFlagActionsMapping[change.field](change, logItem)\n            if (possibleLogItem) {\n                const { description, suffix } = possibleLogItem\n                if (description) {\n                    changes = changes.concat(description)\n                }\n                if (suffix) {\n                    changeSuffix = suffix\n                }\n            }\n        }\n\n        if (changes.length) {\n            return {\n                description: (\n                    <SentenceList\n                        listParts={changes}\n                        prefix={\n                            <>\n                                <strong>{userNameForLogItem(logItem)}</strong>\n                            </>\n                        }\n                        suffix={changeSuffix}\n                    />\n                ),\n            }\n        }\n    }\n\n    return defaultDescriber(logItem, asNotification, nameOrLinkToFlag(logItem?.item_id, logItem?.detail.name))\n}\n", "import {\n    ActivityChange,\n    ActivityLogItem,\n    ChangeMapping,\n    defaultDescriber,\n    Description,\n    HumanizedChange,\n    userNameForLogItem,\n} from 'lib/components/ActivityLog/humanizeActivity'\nimport { SentenceList } from 'lib/components/ActivityLog/SentenceList'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { urls } from 'scenes/urls'\n\nimport { ActivityScope } from '~/types'\n\nconst notebookActionsMapping: Record<\n    string,\n    (change?: ActivityChange, logItem?: ActivityLogItem) => ChangeMapping | null\n> = {\n    version: () => null, // version will always change, but we don't show it to users\n    content: () => {\n        return {\n            description: [<>changed content</>],\n        }\n    },\n}\n\nfunction nameAndLink(logItem?: ActivityLogItem): JSX.Element {\n    return logItem?.detail?.short_id ? (\n        <Link to={urls.notebook(logItem.detail.short_id)}>{logItem?.detail.name || 'unknown'}</Link>\n    ) : logItem?.detail.name ? (\n        <>{logItem?.detail.name}</>\n    ) : (\n        <i>Untitled</i>\n    )\n}\n\nexport function notebookActivityDescriber(logItem: ActivityLogItem, asNotification?: boolean): HumanizedChange {\n    if (logItem.scope !== ActivityScope.NOTEBOOK) {\n        console.error('notebook describer received a non-Notebook activity')\n        return { description: null }\n    }\n\n    if (logItem.activity == 'changed' || logItem.activity == 'updated') {\n        let changes: Description[] = []\n        let changeSuffix: Description = <>on {nameAndLink(logItem)}</>\n\n        for (const change of logItem.detail.changes || []) {\n            if (!change?.field || !notebookActionsMapping[change.field]) {\n                continue //  not all notebook fields are describable\n            }\n\n            const actionHandler = notebookActionsMapping[change.field]\n            const processedChange = actionHandler(change, logItem)\n            if (processedChange === null) {\n                continue // // unexpected log from backend is indescribable\n            }\n\n            const { description, suffix } = processedChange\n            if (description) {\n                changes = changes.concat(description)\n            }\n\n            if (suffix) {\n                changeSuffix = suffix\n            }\n        }\n\n        if (changes.length) {\n            return {\n                description: (\n                    <SentenceList\n                        listParts={changes}\n                        prefix={<strong>{userNameForLogItem(logItem)}</strong>}\n                        suffix={changeSuffix}\n                    />\n                ),\n            }\n        }\n    }\n\n    return defaultDescriber(logItem, asNotification, nameAndLink(logItem))\n}\n", "import {\n    ActivityLogItem,\n    defaultDescriber,\n    HumanizedChange,\n    userNameForLogItem,\n} from 'lib/components/ActivityLog/humanizeActivity'\nimport { SentenceList } from 'lib/components/ActivityLog/SentenceList'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { PersonDisplay } from 'scenes/persons/PersonDisplay'\nimport { urls } from 'scenes/urls'\n\nexport function personActivityDescriber(logItem: ActivityLogItem, asNotification?: boolean): HumanizedChange {\n    if (logItem.scope != 'Person') {\n        console.error('person describer received a non-person activity')\n        return { description: null }\n    }\n\n    if (logItem.activity === 'deleted') {\n        return {\n            description: (\n                <>\n                    <strong>{userNameForLogItem(logItem)}</strong> deleted the person: {logItem.detail.name}\n                </>\n            ),\n        }\n    }\n    if (logItem.activity === 'updated') {\n        // you can only update a person's properties and only one at a time in the UI\n        // These API property changes are asynchronous via the plugin server.\n        // So the API doesn't capture changes, as they couldn't be guaranteed.\n        // only report here that a certain user has manually edited properties\n\n        return {\n            description: (\n                <>\n                    <strong>{userNameForLogItem(logItem)}</strong> edited this person's properties\n                </>\n            ),\n        }\n    }\n    if (logItem.activity === 'people_merged_into') {\n        if (logItem.detail.merge?.source) {\n            return {\n                description: (\n                    <SentenceList\n                        prefix={\n                            <>\n                                <strong>{userNameForLogItem(logItem)}</strong> merged\n                            </>\n                        }\n                        listParts={logItem.detail.merge.source.flatMap((di) => (\n                            <span className=\"highlighted-activity\">\n                                <PersonDisplay person={di} />\n                            </span>\n                        ))}\n                        suffix=\"into this person\"\n                    />\n                ),\n            }\n        }\n    }\n\n    if (logItem.activity === 'split_person') {\n        const distinctIds: string[] | undefined = logItem.detail.changes?.[0].after?.['distinct_ids']\n        if (distinctIds) {\n            return {\n                description: (\n                    <SentenceList\n                        prefix={\n                            <>\n                                <strong>{userNameForLogItem(logItem)}</strong> split this person into\n                            </>\n                        }\n                        listParts={distinctIds.map((di) => (\n                            <span key={di} className=\"highlighted-activity\">\n                                <Link to={urls.personByDistinctId(di)}>{di}</Link>\n                            </span>\n                        ))}\n                    />\n                ),\n            }\n        }\n    }\n\n    return defaultDescriber(logItem, asNotification)\n}\n", "import { DiffEditor } from '@monaco-editor/react'\nimport {\n    ActivityLogItem,\n    defaultDescriber,\n    HumanizedChange,\n    userNameForLogItem,\n} from 'lib/components/ActivityLog/humanizeActivity'\nimport { LemonDropdown } from 'lib/lemon-ui/LemonDropdown'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { initHogLanguage } from 'lib/monaco/languages/hog'\n\nimport { hogFunctionUrl } from './urls'\n\nconst nameOrLinkToHogFunction = (id?: string | null, name?: string | null): string | JSX.Element => {\n    const displayName = name || '(empty string)'\n    return id ? <Link to={hogFunctionUrl('destination', id)}>{displayName}</Link> : displayName\n}\n\nexport interface DiffProps {\n    before: string\n    after: string\n    language?: string\n}\n\nexport function Diff({ before, after, language }: DiffProps): JSX.Element {\n    return (\n        <DiffEditor\n            height=\"300px\"\n            original={before}\n            modified={after}\n            language={language ?? 'json'}\n            onMount={(_, monaco) => {\n                if (language === 'hog') {\n                    initHogLanguage(monaco)\n                }\n            }}\n            options={{\n                lineNumbers: 'off',\n                minimap: { enabled: false },\n                folding: false,\n                wordWrap: 'on',\n                renderLineHighlight: 'none',\n                scrollbar: { vertical: 'auto', horizontal: 'hidden' },\n                overviewRulerBorder: false,\n                hideCursorInOverviewRuler: true,\n                overviewRulerLanes: 0,\n                tabFocusMode: true,\n                enableSplitViewResizing: false,\n                renderSideBySide: false,\n                readOnly: true,\n            }}\n        />\n    )\n}\n\nexport interface DiffLinkProps extends DiffProps {\n    children: string | JSX.Element\n}\n\nexport function DiffLink({ before, after, language, children }: DiffLinkProps): JSX.Element {\n    return (\n        <LemonDropdown\n            closeOnClickInside={false}\n            overlay={\n                <div className=\"w-[50vw] min-w-[300px]\">\n                    <Diff before={before} after={after} language={language} />\n                </div>\n            }\n        >\n            <span className=\"Link\">{children}</span>\n        </LemonDropdown>\n    )\n}\n\nexport function hogFunctionActivityDescriber(logItem: ActivityLogItem, asNotification?: boolean): HumanizedChange {\n    if (logItem.scope != 'HogFunction') {\n        console.error('HogFunction describer received a non-HogFunction activity')\n        return { description: null }\n    }\n\n    const objectNoun = logItem?.detail.type ?? 'hog function'\n\n    if (logItem.activity == 'created') {\n        return {\n            description: (\n                <>\n                    <strong>{userNameForLogItem(logItem)}</strong> created the {objectNoun}:{' '}\n                    {nameOrLinkToHogFunction(logItem?.item_id, logItem?.detail.name)}\n                </>\n            ),\n        }\n    }\n\n    if (logItem.activity == 'deleted') {\n        return {\n            description: (\n                <>\n                    <strong>{userNameForLogItem(logItem)}</strong> deleted the {objectNoun}: {logItem.detail.name}\n                </>\n            ),\n        }\n    }\n\n    if (logItem.activity == 'updated') {\n        const changes: { inline: string | JSX.Element; inlist: string | JSX.Element }[] = []\n        for (const change of logItem.detail.changes ?? []) {\n            switch (change.field) {\n                case 'encrypted_inputs': {\n                    changes.push({\n                        inline: 'updated encrypted inputs for',\n                        inlist: 'updated encrypted inputs',\n                    })\n                    break\n                }\n                case 'inputs': {\n                    const changedFields: JSX.Element[] = []\n                    Object.entries(change.after ?? {}).forEach(([key, value]) => {\n                        const before = JSON.stringify(change.before?.[key]?.value)\n                        const after = JSON.stringify(value?.value)\n                        if (before !== after) {\n                            changedFields.push(\n                                <DiffLink before={before} after={after}>\n                                    {key}\n                                </DiffLink>\n                            )\n                        }\n                    })\n                    const changedSpans: JSX.Element[] = []\n                    for (let index = 0; index < changedFields.length; index++) {\n                        if (index !== 0 && index === changedFields.length - 1) {\n                            changedSpans.push(<>{' and '}</>)\n                        } else if (index > 0) {\n                            changedSpans.push(<>{', '}</>)\n                        }\n                        changedSpans.push(changedFields[index])\n                    }\n                    const inputOrInputs = changedFields.length === 1 ? 'input' : 'inputs'\n                    changes.push({\n                        inline: (\n                            <>\n                                updated the {inputOrInputs} {changedSpans} for\n                            </>\n                        ),\n                        inlist: (\n                            <>\n                                updated {inputOrInputs}: {changedSpans}\n                            </>\n                        ),\n                    })\n                    break\n                }\n                case 'inputs_schema':\n                case 'filters':\n                case 'hog':\n                case 'name':\n                case 'description':\n                case 'masking': {\n                    const code = (\n                        <DiffLink\n                            language={change.field === 'hog' ? 'hog' : 'json'}\n                            before={\n                                typeof change.before === 'string'\n                                    ? change.before\n                                    : JSON.stringify(change.before, null, 2)\n                            }\n                            after={\n                                typeof change.after === 'string' ? change.after : JSON.stringify(change.after, null, 2)\n                            }\n                        >\n                            {change.field === 'hog'\n                                ? 'source code'\n                                : change.field === 'inputs_schema'\n                                ? 'inputs schema'\n                                : change.field}\n                        </DiffLink>\n                    )\n                    changes.push({ inline: <>updated {code} for</>, inlist: <>updated {code}</> })\n                    break\n                }\n                case 'deleted': {\n                    if (change.after) {\n                        changes.push({ inline: 'deleted', inlist: `deleted the ${objectNoun}` })\n                    } else {\n                        changes.push({ inline: 'undeleted', inlist: `undeleted the ${objectNoun}` })\n                    }\n                    break\n                }\n                case 'enabled': {\n                    if (change.after) {\n                        changes.push({ inline: 'enabled', inlist: `enabled the ${objectNoun}` })\n                    } else {\n                        changes.push({ inline: 'disabled', inlist: `disabled the ${objectNoun}` })\n                    }\n                    break\n                }\n                case 'priority': {\n                    changes.push({\n                        inline: (\n                            <>\n                                changed priority from {change.before} to {change.after} for{' '}\n                            </>\n                        ),\n                        inlist: (\n                            <>\n                                changed priority from {change.before} to {change.after} for{' '}\n                            </>\n                        ),\n                    })\n                    break\n                }\n                default:\n                    changes.push({\n                        inline: `updated unknown field: ${change.field}`,\n                        inlist: `updated unknown field: ${change.field}`,\n                    })\n            }\n        }\n        const name = userNameForLogItem(logItem)\n        const functionName = nameOrLinkToHogFunction(logItem?.item_id, logItem?.detail.name)\n\n        return {\n            description:\n                changes.length == 1 ? (\n                    <>\n                        <strong>{name}</strong> {changes[0].inline} the {objectNoun}: {functionName}\n                    </>\n                ) : (\n                    <div>\n                        <strong>{name}</strong> updated the {objectNoun}: {functionName}\n                        <ul className=\"list-disc ml-5\">\n                            {changes.map((c, i) => (\n                                <li key={i}>{c.inlist}</li>\n                            ))}\n                        </ul>\n                    </div>\n                ),\n        }\n    }\n    return defaultDescriber(logItem, asNotification, nameOrLinkToHogFunction(logItem?.detail.short_id))\n}\n", "import {\n    ActivityLogItem,\n    defaultDescriber,\n    HumanizedChange,\n    userNameForLogItem,\n} from 'lib/components/ActivityLog/humanizeActivity'\nimport { SentenceList } from 'lib/components/ActivityLog/SentenceList'\nimport { dayjs } from 'lib/dayjs'\n\nimport { ActivityScope } from '~/types'\n\nimport { SECRET_FIELD_VALUE } from './configUtils'\n\nexport function pluginActivityDescriber(logItem: ActivityLogItem, asNotification?: boolean): HumanizedChange {\n    if (logItem.scope !== ActivityScope.PLUGIN && logItem.scope !== ActivityScope.PLUGIN_CONFIG) {\n        console.error('plugin describer received a non-plugin activity')\n        return { description: null }\n    }\n\n    if (logItem.activity == 'installed') {\n        return {\n            description: (\n                <>\n                    <strong>{userNameForLogItem(logItem)}</strong> installed the app: <b>{logItem.detail.name}</b>\n                </>\n            ),\n        }\n    }\n\n    if (logItem.activity == 'uninstalled') {\n        return {\n            description: (\n                <>\n                    <strong>{userNameForLogItem(logItem)}</strong> uninstalled the app: <b>{logItem.detail.name}</b>\n                </>\n            ),\n        }\n    }\n\n    if (logItem.activity == 'enabled') {\n        const changes: (string | JSX.Element)[] = []\n        for (const change of logItem.detail.changes || []) {\n            const newValue = change.after === SECRET_FIELD_VALUE ? '<secret_value>' : change.after\n            changes.push(\n                <>\n                    field <code>{change.field}</code> set to <code>{newValue as string}</code>\n                </>\n            )\n        }\n        return {\n            description: (\n                <SentenceList\n                    listParts={changes}\n                    prefix={\n                        <>\n                            <strong>{userNameForLogItem(logItem)}</strong> enabled the app: <b>{logItem.detail.name}</b>{' '}\n                            with config ID {logItem.item_id}\n                            {changes.length > 0 ? ', with' : '.'}\n                        </>\n                    }\n                />\n            ),\n        }\n    }\n\n    if (logItem.activity == 'disabled') {\n        return {\n            description: (\n                <>\n                    <strong>{userNameForLogItem(logItem)}</strong> disabled the app: <b>{logItem.detail.name}</b> with\n                    config ID {logItem.item_id}.\n                </>\n            ),\n        }\n    }\n\n    if (logItem.activity == 'job_triggered' && logItem.detail.trigger?.job_type == 'Export historical events V2') {\n        const [startDate, endDate] = logItem.detail.trigger.payload.dateRange\n        return {\n            description: (\n                <>\n                    <strong>{userNameForLogItem(logItem)}</strong> started exporting historical events between{' '}\n                    {startDate} and {endDate} (inclusive).\n                </>\n            ),\n        }\n    }\n\n    if (logItem.activity == 'job_triggered' && logItem.detail.trigger) {\n        return {\n            description: (\n                <>\n                    <strong>{userNameForLogItem(logItem)}</strong> triggered job:{' '}\n                    <code>{logItem.detail.trigger.job_type}</code> with config ID {logItem.item_id}.\n                </>\n            ),\n            extendedDescription: (\n                <>\n                    Payload: <code>{JSON.stringify(logItem.detail.trigger.payload, null, 2)}</code>\n                </>\n            ),\n        }\n    }\n\n    if (logItem.activity == 'export_success' && logItem.detail.trigger) {\n        const { dateFrom, dateTo } = logItem.detail.trigger.payload\n        const startDate = dayjs(dateFrom).format('YYYY-MM-DD')\n        // :TRICKY: Internally export date range is non-inclusive so transform it to be inclusive\n        const endDate = dayjs(dateTo).subtract(1, 'day').format('YYYY-MM-DD')\n\n        return {\n            description: (\n                <>\n                    Finished exporting historical events between {startDate} and {endDate} (inclusive).\n                </>\n            ),\n        }\n    }\n\n    if (logItem.activity == 'export_fail' && logItem.detail.trigger) {\n        const { dateFrom, dateTo } = logItem.detail.trigger.payload\n        const startDate = dayjs(dateFrom).format('YYYY-MM-DD')\n        // :TRICKY: Internally export date range is non-inclusive so transform it to be inclusive\n        const endDate = dayjs(dateTo).subtract(1, 'day').format('YYYY-MM-DD')\n\n        return {\n            description: (\n                <>\n                    Fatal error exporting historical events between {startDate} and {endDate} (inclusive). Check logs\n                    for more details.\n                </>\n            ),\n        }\n    }\n\n    if (logItem.activity == 'config_updated') {\n        const changes: (string | JSX.Element)[] = []\n        for (const change of logItem.detail.changes || []) {\n            let changeWording: string | JSX.Element = ''\n            const changeBefore = change.before === SECRET_FIELD_VALUE ? '<secret_value>' : change.before\n            const changeAfter = change.after === SECRET_FIELD_VALUE ? '<secret_value>' : change.after\n            if (change.action === 'created') {\n                changeWording = (\n                    <>\n                        added new field <code>{change.field}</code>\" with value <code>{changeAfter as string}</code>\n                    </>\n                )\n            } else if (change.action === 'deleted') {\n                changeWording = (\n                    <>\n                        removed field <code>{change.field}</code>, which had value <code>{changeBefore as string}</code>\n                    </>\n                )\n            } else if (change.action === 'changed') {\n                changeWording = (\n                    <>\n                        updated field <code>{change.field}</code> from value <code>{changeBefore as string}</code> to\n                        value <code>{changeAfter as string}</code>{' '}\n                    </>\n                )\n            }\n            changes.push(changeWording)\n        }\n        return {\n            description: (\n                <SentenceList\n                    prefix={<strong>{userNameForLogItem(logItem)}</strong>}\n                    listParts={changes}\n                    suffix={\n                        <>\n                            on app <b>{logItem.detail.name}</b> with config ID {logItem.item_id}.\n                        </>\n                    }\n                />\n            ),\n        }\n    }\n\n    if (logItem.activity.startsWith('attachment_')) {\n        for (const change of logItem.detail.changes || []) {\n            let changeWording: string | JSX.Element = ''\n\n            if (logItem.activity === 'attachment_created') {\n                changeWording = (\n                    <>\n                        attached a file <code>{change.after as string}</code>\n                    </>\n                )\n            } else if (logItem.activity == 'attachment_updated') {\n                if (change.after === change.before) {\n                    changeWording = (\n                        <>\n                            updated attached file <code>{change.after as string}</code>\n                        </>\n                    )\n                } else {\n                    changeWording = (\n                        <>\n                            updated attached file from <code>{change.before as string}</code> to{' '}\n                            <code>{change.after as string}</code>\n                        </>\n                    )\n                }\n            } else if (logItem.activity === 'attachment_deleted') {\n                changeWording = (\n                    <>\n                        deleted attached file <code>{change.before as string}</code>\n                    </>\n                )\n            }\n\n            return {\n                description: (\n                    <>\n                        <strong>{userNameForLogItem(logItem)}</strong> {changeWording} on app:{' '}\n                        <b>{logItem.detail.name}</b> with config ID {logItem.item_id}\n                    </>\n                ),\n            }\n        }\n    }\n\n    return defaultDescriber(logItem, asNotification)\n}\n", "import { PluginConfigChoice, PluginConfigSchema } from '@posthog/plugin-scaffold'\n\nimport { PluginType } from '~/types'\n\n// Keep this in sync with: posthog/api/plugin.py\nexport const SECRET_FIELD_VALUE = '**************** POSTHOG SECRET FIELD ****************'\n\nexport function getConfigSchemaArray(\n    configSchema: Record<string, PluginConfigSchema> | PluginConfigSchema[]\n): PluginConfigSchema[] {\n    if (Array.isArray(configSchema)) {\n        return configSchema\n    }\n    return Object.entries(configSchema)\n        .map(([key, value]) => ({ key, ...value }))\n        .sort((a, b) => (a.order || 999999) - (b.order || 999999))\n}\n\nexport function getConfigSchemaObject(\n    configSchema: Record<string, PluginConfigSchema> | PluginConfigSchema[]\n): Record<string, PluginConfigSchema> {\n    if (Array.isArray(configSchema)) {\n        const newSchema: Record<string, PluginConfigSchema> = {}\n        configSchema.forEach((conf, order) => {\n            if (conf.key) {\n                newSchema[conf.key] = { ...conf, order }\n            }\n        })\n        return newSchema\n    }\n    return configSchema\n}\n\nexport function defaultConfigForPlugin(plugin: PluginType): Record<string, any> {\n    const config: Record<string, any> = {}\n    for (const field of getConfigSchemaArray(plugin.config_schema)) {\n        if (field.key && typeof field.default !== 'undefined') {\n            config[field.key] = field.default\n        }\n    }\n    return config\n}\n\nexport function getPluginConfigFormData(\n    rawConfigSchema: PluginType['config_schema'],\n    existingConfig: Record<string, any> | undefined,\n    updatedConfig: Record<string, any>\n): FormData {\n    const configSchema = getConfigSchemaObject(rawConfigSchema)\n\n    const formData = new FormData()\n    const otherConfig: Record<string, any> = {}\n    for (const [key, value] of Object.entries(updatedConfig)) {\n        if (configSchema[key]?.type === 'attachment') {\n            if (value && !value.saved) {\n                formData.append(`add_attachment[${key}]`, value)\n            }\n            if (!value && existingConfig?.[key]) {\n                formData.append(`remove_attachment[${key}]`, 'true')\n            }\n        } else if (!configSchema[key]?.secret || value !== SECRET_FIELD_VALUE) {\n            // Omit the field from formData if it's a filled yet unchanged secret field\n            otherConfig[key] = value\n        }\n    }\n    formData.append('config', JSON.stringify(otherConfig))\n    return formData\n}\n\nconst doFieldRequirementsMatch = (\n    getFieldValue: (fieldName: string) => any,\n    targetFieldName: string | undefined,\n    targetFieldValue: string | undefined\n): boolean => {\n    const formActualValue = getFieldValue(targetFieldName || '') || ''\n    const targetAnyValue = typeof targetFieldValue === 'undefined'\n    const formValueSet = !!formActualValue\n\n    return (targetAnyValue && formValueSet) || targetFieldValue === formActualValue\n}\n\nexport const determineInvisibleFields = (getFieldValue: (fieldName: string) => any, plugin: PluginType): string[] => {\n    const fieldsToSetAsInvisible = []\n    for (const field of Object.values(getConfigSchemaArray(plugin.config_schema || {}))) {\n        if (!field.visible_if || !field.key) {\n            continue\n        }\n        const shouldBeVisible = field.visible_if.every(\n            ([targetFieldName, targetFieldValue]: Array<string | undefined>) =>\n                doFieldRequirementsMatch(getFieldValue, targetFieldName, targetFieldValue)\n        )\n\n        if (!shouldBeVisible) {\n            fieldsToSetAsInvisible.push(field.key)\n        }\n    }\n    return fieldsToSetAsInvisible\n}\n\nexport const determineRequiredFields = (getFieldValue: (fieldName: string) => any, plugin: PluginType): string[] => {\n    const fieldsToSetAsRequired = []\n    for (const field of Object.values(getConfigSchemaArray(plugin.config_schema || {}))) {\n        if (!field.key) {\n            continue\n        }\n        if (field.required) {\n            fieldsToSetAsRequired.push(field.key)\n        } else if (field.required_if && Array.isArray(field.required_if)) {\n            const shouldBeRequired = field.required_if.every(\n                ([targetFieldName, targetFieldValue]: Array<string | undefined>) =>\n                    doFieldRequirementsMatch(getFieldValue, targetFieldName, targetFieldValue)\n            )\n            if (shouldBeRequired) {\n                fieldsToSetAsRequired.push(field.key)\n            }\n        }\n    }\n    return fieldsToSetAsRequired\n}\n\nexport const isValidChoiceConfig = (fieldConfig: PluginConfigChoice): boolean => {\n    return (\n        Array.isArray(fieldConfig.choices) &&\n        !!fieldConfig.choices.length &&\n        !fieldConfig.choices.find((c) => typeof c !== 'string') &&\n        !fieldConfig.secret\n    )\n}\n\nexport const isValidField = (fieldConfig: PluginConfigSchema): boolean =>\n    fieldConfig.type !== 'choice' || isValidChoiceConfig(fieldConfig)\n", "import '../../lib/components/Cards/InsightCard/InsightCard.scss'\n\nimport { captureException } from '@sentry/react'\nimport {\n    ActivityChange,\n    ActivityLogItem,\n    ChangeMapping,\n    defaultDescriber,\n    Description,\n    detectBoolean,\n    HumanizedChange,\n    userNameForLogItem,\n} from 'lib/components/ActivityLog/humanizeActivity'\nimport { SentenceList } from 'lib/components/ActivityLog/SentenceList'\nimport { BreakdownSummary, PropertiesSummary, SeriesSummary } from 'lib/components/Cards/InsightCard/InsightDetails'\nimport { ObjectTags } from 'lib/components/ObjectTags/ObjectTags'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { areObjectValuesEmpty, pluralize } from 'lib/utils'\nimport { urls } from 'scenes/urls'\n\nimport { filtersToQueryNode } from '~/queries/nodes/InsightQuery/utils/filtersToQueryNode'\nimport { queryNodeToFilter } from '~/queries/nodes/InsightQuery/utils/queryNodeToFilter'\nimport { InsightQueryNode, QuerySchema, TrendsQuery } from '~/queries/schema/schema-general'\nimport { isInsightQueryNode, isValidBreakdown } from '~/queries/utils'\nimport { FilterType, InsightModel, InsightShortId } from '~/types'\n\nconst nameOrLinkToInsight = (short_id?: InsightShortId | null, name?: string | null): string | JSX.Element => {\n    const displayName = name || '(empty string)'\n    return short_id ? <Link to={urls.insightView(short_id)}>{displayName}</Link> : displayName\n}\n\ninterface TileStyleDashboardLink {\n    insight: { id: number }\n    dashboard: BareDashboardLink\n}\n\ninterface BareDashboardLink {\n    id: number\n    name: string\n}\n\n// insight activity logs changed the format that dashboard changes were reported in\ntype DashboardLink = TileStyleDashboardLink | BareDashboardLink\n\nconst unboxBareLink = (boxedLink: DashboardLink): BareDashboardLink => {\n    if ('dashboard' in boxedLink) {\n        return boxedLink.dashboard\n    }\n    return boxedLink\n}\n\nconst linkToDashboard = (dashboard: BareDashboardLink): JSX.Element => (\n    <div className=\"highlighted-activity\">\n        <Link to={urls.dashboard(dashboard.id)}>{dashboard.name}</Link>\n    </div>\n)\n\nconst insightActionsMapping: Record<\n    keyof InsightModel,\n    (change?: ActivityChange, logItem?: ActivityLogItem, asNotification?: boolean) => ChangeMapping | null\n> = {\n    name: function onName(change, logItem, asNotification) {\n        return {\n            description: [\n                <>\n                    renamed {asNotification && 'the insight '}\"{change?.before}\" to{' '}\n                    <strong>\"{nameOrLinkToInsight(logItem?.detail.short_id, change?.after as string)}\"</strong>\n                </>,\n            ],\n            suffix: <></>,\n        }\n    },\n    filters: function onChangedFilter(change) {\n        const filtersAfter = change?.after as Partial<FilterType>\n\n        return areObjectValuesEmpty(filtersAfter) ? null : summarizeChanges(filtersAfter)\n    },\n    query: function onChangedQuery(change) {\n        if (change?.action === 'deleted') {\n            // if the query was deleted, then someone has added a filter and that will be summarized\n            return null\n        }\n\n        const queryAfter = change?.after as QuerySchema\n        return isInsightQueryNode(queryAfter)\n            ? summarizeChanges(queryNodeToFilter(change?.after as InsightQueryNode))\n            : { description: [\"cannot yet summarize changes to this insight's query: \" + queryAfter?.kind] }\n    },\n    deleted: function onSoftDelete(change, logItem, asNotification) {\n        const isDeleted = detectBoolean(change?.after)\n        const describeChange = isDeleted ? 'deleted' : 'un-deleted'\n        return {\n            description: [\n                <>\n                    {describeChange}\n                    {asNotification && ' the insight '}\n                </>,\n            ],\n            suffix: <>{nameOrLinkToInsight(logItem?.detail.short_id, logItem?.detail.name)}</>,\n        }\n    },\n    short_id: function onShortId(change, _, asNotification) {\n        return {\n            description: [\n                <>\n                    changed the short id {asNotification && ' of the insight '}to{' '}\n                    <strong>\"{change?.after as string}\"</strong>\n                </>,\n            ],\n        }\n    },\n    derived_name: function onDerivedName(change, logItem, asNotification) {\n        return {\n            description: [\n                <>\n                    renamed {asNotification && ' the insight '}\"{change?.before}\" to{' '}\n                    <strong>\"{nameOrLinkToInsight(logItem?.detail.short_id, change?.after as string)}\"</strong>\n                </>,\n            ],\n            suffix: <></>,\n        }\n    },\n    description: function onDescription(change, _, asNotification) {\n        return {\n            description: [\n                <>\n                    changed the description {asNotification && ' of the insight '}to{' '}\n                    <strong>\"{change?.after as string}\"</strong>\n                </>,\n            ],\n        }\n    },\n    favorited: function onFavorited(change, logItem, asNotification) {\n        const isFavoriteAfter = detectBoolean(change?.after)\n        return {\n            description: [\n                <>\n                    <div className=\"highlighted-activity\">\n                        {isFavoriteAfter ? '' : 'un-'}favorited{asNotification && ' the insight '}\n                    </div>\n                </>,\n            ],\n            suffix: <>{nameOrLinkToInsight(logItem?.detail.short_id, logItem?.detail.name)}</>,\n        }\n    },\n    tags: function onTags(change) {\n        const tagsBefore = change?.before as string[]\n        const tagsAfter = change?.after as string[]\n        const addedTags = tagsAfter.filter((t) => tagsBefore.indexOf(t) === -1)\n        const removedTags = tagsBefore.filter((t) => tagsAfter.indexOf(t) === -1)\n\n        const changes: Description[] = []\n        if (addedTags.length) {\n            changes.push(\n                <>\n                    added {pluralize(addedTags.length, 'tag', 'tags', false)}{' '}\n                    <ObjectTags tags={addedTags} saving={false} style={{ display: 'inline' }} staticOnly />\n                </>\n            )\n        }\n        if (removedTags.length) {\n            changes.push(\n                <>\n                    removed {pluralize(removedTags.length, 'tag', 'tags', false)}{' '}\n                    <ObjectTags tags={removedTags} saving={false} style={{ display: 'inline' }} staticOnly />\n                </>\n            )\n        }\n\n        return { description: changes }\n    },\n    dashboards: function onDashboardsChange(change, logItem, asNotification) {\n        const dashboardsBefore = (change?.before as DashboardLink[]).map(unboxBareLink)\n        const dashboardsAfter = (change?.after as DashboardLink[]).map(unboxBareLink)\n\n        const addedDashboards = dashboardsAfter.filter(\n            (after) => !dashboardsBefore.some((before) => before.id === after.id)\n        )\n        const removedDashboards = dashboardsBefore.filter(\n            (before) => !dashboardsAfter.some((after) => after.id === before.id)\n        )\n\n        const addedSentence = addedDashboards.length ? (\n            <SentenceList\n                prefix={\n                    <>\n                        added {asNotification && ' the insight '}\n                        {nameOrLinkToInsight(logItem?.detail.short_id, logItem?.detail.name)} to\n                    </>\n                }\n                listParts={addedDashboards.map((d) => (\n                    <>{linkToDashboard(d)}</>\n                ))}\n            />\n        ) : null\n\n        const removedSentence = removedDashboards.length ? (\n            <SentenceList\n                prefix={\n                    <>\n                        removed {asNotification && ' the insight '}\n                        {nameOrLinkToInsight(logItem?.detail.short_id, logItem?.detail.name)} from\n                    </>\n                }\n                listParts={removedDashboards.map((d) => (\n                    <>{linkToDashboard(d)}</>\n                ))}\n            />\n        ) : null\n\n        return { description: [addedSentence, removedSentence], suffix: <></> }\n    },\n    // fields that are excluded on the backend\n    id: () => null,\n    created_at: () => null,\n    created_by: () => null,\n    updated_at: () => null,\n    last_modified_at: () => null,\n    order: () => null,\n    result: () => null,\n    last_refresh: () => null,\n    cache_target_age: () => null,\n    next_allowed_client_refresh: () => null,\n    last_modified_by: () => null,\n    next: () => null,\n    saved: () => null,\n    is_sample: () => null,\n    timezone: () => null,\n    effective_restriction_level: () => null,\n    effective_privilege_level: () => null,\n    disable_baseline: () => null,\n    dashboard_tiles: () => null,\n    query_status: () => null,\n    user_access_level: () => null,\n}\n\nfunction summarizeChanges(filtersAfter: Partial<FilterType>): ChangeMapping | null {\n    const query = filtersToQueryNode(filtersAfter)\n    const trendsQuery = query as TrendsQuery\n\n    return {\n        description: ['changed query definition'],\n        extendedDescription: (\n            <div className=\"ActivityDescription\">\n                <SeriesSummary query={query} />\n                <PropertiesSummary properties={query.properties} />\n                {isValidBreakdown(trendsQuery?.breakdownFilter) && <BreakdownSummary query={query} />}\n            </div>\n        ),\n    }\n}\n\nexport function insightActivityDescriber(logItem: ActivityLogItem, asNotification?: boolean): HumanizedChange {\n    if (logItem.scope != 'Insight') {\n        console.error('insight describer received a non-insight activity')\n        return { description: null }\n    }\n\n    if (logItem.activity == 'created') {\n        return {\n            description: (\n                <>\n                    <strong>{userNameForLogItem(logItem)}</strong> created the insight:{' '}\n                    {nameOrLinkToInsight(logItem?.detail.short_id, logItem?.detail.name)}\n                </>\n            ),\n        }\n    }\n\n    if (logItem.activity == 'deleted') {\n        return {\n            description: (\n                <>\n                    <strong>{userNameForLogItem(logItem)}</strong> deleted {asNotification ? 'your' : 'the'} insight:{' '}\n                    {logItem.detail.name}\n                </>\n            ),\n        }\n    }\n\n    if (logItem.activity == 'exported for opengraph image') {\n        return {\n            description: (\n                <>\n                    <strong>PostHog</strong> exported {asNotification ? 'your' : 'the'} insight: {logItem.detail.name}{' '}\n                    as an image for the shared insight link.\n                </>\n            ),\n        }\n    }\n\n    if (logItem.activity == 'sharing enabled') {\n        return {\n            description: (\n                <>\n                    <strong>{userNameForLogItem(logItem)}</strong> shared {asNotification ? 'your' : 'the'} insight:{' '}\n                    {logItem.detail.name}.\n                </>\n            ),\n        }\n    }\n\n    if (logItem.activity == 'sharing disabled') {\n        return {\n            description: (\n                <>\n                    <strong>{userNameForLogItem(logItem)}</strong> deleted shared link for{' '}\n                    {asNotification ? 'your' : 'the'} insight: {logItem.detail.name}.\n                </>\n            ),\n        }\n    }\n\n    if (logItem.activity == 'updated') {\n        let changes: Description[] = []\n        let extendedDescription: JSX.Element | undefined\n        let changeSuffix: Description = (\n            <>\n                on {asNotification && ' the insight '}\n                {nameOrLinkToInsight(logItem?.detail.short_id, logItem?.detail.name)}\n            </>\n        )\n\n        try {\n            for (const change of logItem.detail.changes || []) {\n                if (!change?.field || !insightActionsMapping[change.field]) {\n                    continue // insight updates have to have a \"field\" to be described\n                }\n\n                const actionHandler = insightActionsMapping[change.field]\n                const processedChange = actionHandler(change, logItem, asNotification)\n                if (processedChange === null) {\n                    continue // // unexpected log from backend is indescribable\n                }\n\n                const { description, extendedDescription: _extendedDescription, suffix } = processedChange\n                if (description) {\n                    changes = changes.concat(description)\n                }\n                if (_extendedDescription) {\n                    extendedDescription = _extendedDescription\n                }\n                if (suffix) {\n                    changeSuffix = suffix\n                }\n            }\n        } catch (e) {\n            console.error('Error while summarizing insight update', e)\n            captureException(e)\n        }\n\n        if (changes.length) {\n            return {\n                description: (\n                    <SentenceList\n                        listParts={changes}\n                        prefix={<strong>{userNameForLogItem(logItem)}</strong>}\n                        suffix={changeSuffix}\n                    />\n                ),\n                extendedDescription,\n            }\n        }\n    }\n    if (logItem.activity === 'exported') {\n        const exportFormat = logItem.detail.changes?.[0]?.after\n        let exportType = 'in an unknown format'\n        if (typeof exportFormat === 'string') {\n            exportType = exportFormat.split('/')[1]\n        }\n\n        return {\n            description: (\n                <>\n                    <strong>{userNameForLogItem(logItem)}</strong> exported{' '}\n                    {nameOrLinkToInsight(logItem?.detail.short_id, logItem?.detail.name)} as a {exportType}\n                </>\n            ),\n        }\n    }\n\n    return defaultDescriber(logItem, asNotification, nameOrLinkToInsight(logItem?.detail.short_id))\n}\n", "import { useValues } from 'kea'\nimport {\n    convertPropertiesToPropertyGroup,\n    formatPropertyLabel,\n    isAnyPropertyfilter,\n    isCohortPropertyFilter,\n    isPropertyFilterWithOperator,\n    PROPERTY_FILTER_TYPE_TO_TAXONOMIC_FILTER_GROUP_TYPE,\n} from 'lib/components/PropertyFilters/utils'\nimport { SeriesLetter } from 'lib/components/SeriesGlyph'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { IconCalculate } from 'lib/lemon-ui/icons'\nimport { LemonDivider } from 'lib/lemon-ui/LemonDivider'\nimport { LemonRow } from 'lib/lemon-ui/LemonRow'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { ProfilePicture } from 'lib/lemon-ui/ProfilePicture'\nimport { allOperatorsMapping, capitalizeFirstLetter } from 'lib/utils'\nimport React from 'react'\nimport { BreakdownTag } from 'scenes/insights/filters/BreakdownFilter/BreakdownTag'\nimport { humanizePathsEventTypes } from 'scenes/insights/utils'\nimport { apiValueToMathType, MathCategory, MathDefinition, mathsLogic } from 'scenes/trends/mathsLogic'\nimport { urls } from 'scenes/urls'\n\nimport { cohortsModel } from '~/models/cohortsModel'\nimport { propertyDefinitionsModel } from '~/models/propertyDefinitionsModel'\nimport {\n    AnyEntityNode,\n    FunnelsQuery,\n    InsightQueryNode,\n    LifecycleQuery,\n    Node,\n    NodeKind,\n    PathsQuery,\n    RetentionQuery,\n    StickinessQuery,\n    TrendsQuery,\n} from '~/queries/schema/schema-general'\nimport {\n    isActionsNode,\n    isEventsNode,\n    isFunnelsQuery,\n    isInsightQueryWithBreakdown,\n    isInsightQueryWithSeries,\n    isInsightVizNode,\n    isLifecycleQuery,\n    isPathsQuery,\n    isRetentionQuery,\n    isTrendsQuery,\n    isValidBreakdown,\n} from '~/queries/utils'\nimport { AnyPropertyFilter, FilterLogicalOperator, PropertyGroupFilter, UserBasicType } from '~/types'\n\nimport { PropertyKeyInfo } from '../../PropertyKeyInfo'\nimport { TZLabel } from '../../TZLabel'\n\nfunction CompactPropertyFiltersDisplay({\n    groupFilter,\n    embedded,\n}: {\n    groupFilter: PropertyGroupFilter | null\n    embedded?: boolean\n}): JSX.Element {\n    const { cohortsById } = useValues(cohortsModel)\n    const { formatPropertyValueForDisplay } = useValues(propertyDefinitionsModel)\n\n    const areAnyFiltersPresent = !!groupFilter && groupFilter.values.flatMap((subValues) => subValues.values).length > 0\n\n    if (!areAnyFiltersPresent) {\n        return <i>None</i>\n    }\n\n    return (\n        <>\n            {groupFilter.values.map(({ values: subValues, type: subType }, subIndex) => (\n                <React.Fragment key={subIndex}>\n                    {subIndex === 0 ? null : (\n                        <em className=\"text-[11px] font-semibold\">\n                            {groupFilter.type === FilterLogicalOperator.Or ? 'OR' : 'AND'}\n                        </em>\n                    )}\n                    {subValues.map((leafFilter, leafIndex) => {\n                        const isFirstFilterWithinSubgroup = leafIndex === 0\n                        const isFirstFilterOverall = isFirstFilterWithinSubgroup && subIndex === 0\n\n                        return (\n                            <div key={leafIndex} className=\"SeriesDisplay__condition\">\n                                <span>\n                                    {isFirstFilterWithinSubgroup\n                                        ? embedded\n                                            ? 'where '\n                                            : null\n                                        : subType === FilterLogicalOperator.Or\n                                        ? 'or '\n                                        : 'and '}\n                                    {isCohortPropertyFilter(leafFilter) ? (\n                                        <>\n                                            {isFirstFilterOverall && !embedded ? 'Person' : 'person'} belongs to cohort\n                                            <span className=\"SeriesDisplay__raw-name\">\n                                                {formatPropertyLabel(\n                                                    leafFilter,\n                                                    cohortsById,\n                                                    (s) =>\n                                                        formatPropertyValueForDisplay(leafFilter.key, s)?.toString() ||\n                                                        '?'\n                                                )}\n                                            </span>\n                                        </>\n                                    ) : (\n                                        <>\n                                            {isFirstFilterOverall && !embedded\n                                                ? capitalizeFirstLetter(leafFilter.type || 'event')\n                                                : leafFilter.type || 'event'}\n                                            's\n                                            <span className=\"SeriesDisplay__raw-name\">\n                                                {isAnyPropertyfilter(leafFilter) && leafFilter.key && (\n                                                    <PropertyKeyInfo\n                                                        value={leafFilter.key}\n                                                        type={\n                                                            PROPERTY_FILTER_TYPE_TO_TAXONOMIC_FILTER_GROUP_TYPE[\n                                                                leafFilter.type\n                                                            ]\n                                                        }\n                                                    />\n                                                )}\n                                            </span>\n                                            {\n                                                allOperatorsMapping[\n                                                    (isPropertyFilterWithOperator(leafFilter) && leafFilter.operator) ||\n                                                        'exact'\n                                                ]\n                                            }{' '}\n                                            <b>\n                                                {isAnyPropertyfilter(leafFilter) &&\n                                                    (Array.isArray(leafFilter.value)\n                                                        ? leafFilter.value.join(' or ')\n                                                        : leafFilter.value)}\n                                            </b>\n                                        </>\n                                    )}\n                                </span>\n                            </div>\n                        )\n                    })}\n                </React.Fragment>\n            ))}\n        </>\n    )\n}\n\nfunction EntityDisplay({ entity }: { entity: AnyEntityNode }): JSX.Element {\n    return (\n        <>\n            {entity.custom_name && <b> \"{entity.custom_name}\"</b>}\n            {isActionsNode(entity) ? (\n                <Link\n                    to={urls.action(entity.id)}\n                    className=\"SeriesDisplay__raw-name SeriesDisplay__raw-name--action\"\n                    title=\"Action series\"\n                >\n                    {entity.name}\n                </Link>\n            ) : isEventsNode(entity) ? (\n                <span className=\"SeriesDisplay__raw-name SeriesDisplay__raw-name--event\" title=\"Event series\">\n                    <PropertyKeyInfo value={entity.event || '$pageview'} type={TaxonomicFilterGroupType.Events} />\n                </span>\n            ) : (\n                <i>{entity.kind /* TODO: Support DataWarehouseNode */}</i>\n            )}\n        </>\n    )\n}\n\nfunction SeriesDisplay({\n    query,\n    seriesIndex,\n}: {\n    query: TrendsQuery | FunnelsQuery | StickinessQuery | LifecycleQuery\n    seriesIndex: number\n}): JSX.Element {\n    const { mathDefinitions } = useValues(mathsLogic)\n    const series = query.series[seriesIndex]\n\n    const hasBreakdown = isInsightQueryWithBreakdown(query) && isValidBreakdown(query.breakdownFilter)\n\n    const mathDefinition = mathDefinitions[\n        isLifecycleQuery(query)\n            ? 'dau'\n            : series.math\n            ? apiValueToMathType(series.math, series.math_group_type_index)\n            : 'total'\n    ] as MathDefinition | undefined\n\n    return (\n        <LemonRow\n            fullWidth\n            className=\"SeriesDisplay\"\n            icon={<SeriesLetter seriesIndex={seriesIndex} hasBreakdown={hasBreakdown} />}\n            extendedContent={\n                series.properties &&\n                series.properties.length > 0 && (\n                    <CompactPropertyFiltersDisplay\n                        groupFilter={{\n                            type: FilterLogicalOperator.And,\n                            values: [{ type: FilterLogicalOperator.And, values: series.properties }],\n                        }}\n                        embedded\n                    />\n                )\n            }\n        >\n            <span>\n                {isFunnelsQuery(query) ? 'Performed' : 'Showing'}\n                <EntityDisplay entity={series} />\n                {!isFunnelsQuery(query) && (\n                    <span className=\"leading-none\">\n                        counted by{' '}\n                        {mathDefinition?.category === MathCategory.HogQLExpression ? (\n                            <code>{series.math_hogql}</code>\n                        ) : (\n                            <>\n                                {mathDefinition?.category === MathCategory.PropertyValue && series.math_property && (\n                                    <>\n                                        {' '}\n                                        event's\n                                        <span className=\"SeriesDisplay__raw-name\">\n                                            <PropertyKeyInfo\n                                                value={series.math_property}\n                                                type={TaxonomicFilterGroupType.EventProperties}\n                                            />\n                                        </span>\n                                    </>\n                                )}\n                                <b>{mathDefinition?.name.toLowerCase()}</b>\n                            </>\n                        )}\n                    </span>\n                )}\n            </span>\n        </LemonRow>\n    )\n}\n\nfunction PathsSummary({ query }: { query: PathsQuery }): JSX.Element {\n    // Sync format with summarizePaths in utils\n    const { includeEventTypes, startPoint, endPoint } = query.pathsFilter\n    return (\n        <div className=\"SeriesDisplay\">\n            <div>\n                User paths based on <b>{humanizePathsEventTypes(includeEventTypes).join(' and ')}</b>\n            </div>\n            {startPoint && (\n                <div>\n                    starting at <b>{startPoint}</b>\n                </div>\n            )}\n            {endPoint && (\n                <div>\n                    ending at <b>{endPoint}</b>\n                </div>\n            )}\n        </div>\n    )\n}\n\nfunction RetentionSummary({ query }: { query: RetentionQuery }): JSX.Element {\n    const { aggregationLabel } = useValues(mathsLogic)\n\n    return (\n        <>\n            {query.aggregation_group_type_index != null\n                ? `${capitalizeFirstLetter(aggregationLabel(query.aggregation_group_type_index).plural)} which`\n                : 'Users who'}\n            {' performed'}\n            <EntityDisplay\n                entity={\n                    query.retentionFilter.targetEntity?.type === 'actions'\n                        ? {\n                              kind: NodeKind.ActionsNode,\n                              name: query.retentionFilter.targetEntity.name,\n                              id: query.retentionFilter.targetEntity.id as number,\n                          }\n                        : {\n                              kind: NodeKind.EventsNode,\n                              name: query.retentionFilter.targetEntity?.name,\n                              event: query.retentionFilter.targetEntity?.id as string,\n                          }\n                }\n            />\n            <strong>\n                {query.retentionFilter.retentionType === 'retention_recurring' ? 'recurringly' : 'for the first time'}\n            </strong>{' '}\n            in the preceding{' '}\n            <strong>\n                {(query.retentionFilter.totalIntervals || 11) - 1}{' '}\n                {query.retentionFilter.period?.toLocaleLowerCase() ?? 'day'}s\n            </strong>\n            <br />\n            and came back to perform\n            <EntityDisplay\n                entity={\n                    {\n                        ...query.retentionFilter.returningEntity,\n                        kind:\n                            query.retentionFilter.returningEntity?.type === 'actions'\n                                ? NodeKind.ActionsNode\n                                : NodeKind.EventsNode,\n                    } as AnyEntityNode\n                }\n            />\n            in any of the next periods\n        </>\n    )\n}\n\nexport function SeriesSummary({\n    query,\n    heading,\n}: {\n    query: InsightQueryNode\n    heading?: JSX.Element | null\n}): JSX.Element {\n    return (\n        <section>\n            {heading !== null && <h5>{heading || 'Query summary'}</h5>}\n            <div className=\"InsightDetails__query\">\n                {isTrendsQuery(query) && query.trendsFilter?.formula && (\n                    <>\n                        <LemonRow className=\"InsightDetails__formula\" icon={<IconCalculate />} fullWidth>\n                            <span>\n                                Formula:<code>{query.trendsFilter?.formula}</code>\n                            </span>\n                        </LemonRow>\n                        <LemonDivider />\n                    </>\n                )}\n                <div className=\"InsightDetails__series\">\n                    {isPathsQuery(query) ? (\n                        <PathsSummary query={query} />\n                    ) : isRetentionQuery(query) ? (\n                        <RetentionSummary query={query} />\n                    ) : isInsightQueryWithSeries(query) ? (\n                        <>\n                            {query.series.map((_entity, index) => (\n                                <React.Fragment key={index}>\n                                    {index !== 0 && <LemonDivider className=\"my-1\" />}\n                                    <SeriesDisplay query={query} seriesIndex={index} />\n                                </React.Fragment>\n                            ))}\n                        </>\n                    ) : (\n                        <i>Query summary is not available for {(query as Node).kind} yet</i>\n                    )}\n                </div>\n            </div>\n        </section>\n    )\n}\n\nexport function PropertiesSummary({\n    properties,\n}: {\n    properties: PropertyGroupFilter | AnyPropertyFilter[] | undefined\n}): JSX.Element {\n    return (\n        <section>\n            <h5>Filters</h5>\n            <div>\n                <CompactPropertyFiltersDisplay groupFilter={convertPropertiesToPropertyGroup(properties)} />\n            </div>\n        </section>\n    )\n}\n\nexport function BreakdownSummary({ query }: { query: InsightQueryNode }): JSX.Element | null {\n    if (!isInsightQueryWithBreakdown(query) || !isValidBreakdown(query.breakdownFilter)) {\n        return null\n    }\n\n    const { breakdown_type, breakdown, breakdowns } = query.breakdownFilter\n\n    return (\n        <section>\n            <h5>Breakdown by</h5>\n            <div>\n                {Array.isArray(breakdowns)\n                    ? breakdowns.map((b) => (\n                          <BreakdownTag key={`${b.type}-${b.property}`} breakdown={b.property} breakdownType={b.type} />\n                      ))\n                    : breakdown &&\n                      (Array.isArray(breakdown)\n                          ? breakdown\n                          : [breakdown].map((b) => (\n                                <BreakdownTag key={b} breakdown={b} breakdownType={breakdown_type} />\n                            )))}\n            </div>\n        </section>\n    )\n}\n\ninterface InsightDetailsProps {\n    query: Node | null\n    footerInfo?: {\n        created_at: string\n        created_by: UserBasicType | null\n        last_modified_by: UserBasicType | null\n        last_modified_at: string\n        last_refresh: string | null\n    }\n}\n\nexport const InsightDetails = React.memo(\n    React.forwardRef<HTMLDivElement, InsightDetailsProps>(function InsightDetailsInternal(\n        { query, footerInfo },\n        ref\n    ): JSX.Element {\n        // TODO: Implement summaries for HogQL query insights\n        return (\n            <div className=\"InsightDetails\" ref={ref}>\n                {isInsightVizNode(query) && (\n                    <>\n                        <SeriesSummary query={query.source} />\n                        <PropertiesSummary properties={query.source.properties} />\n                        <BreakdownSummary query={query.source} />\n                    </>\n                )}\n                {footerInfo && (\n                    <div className=\"InsightDetails__footer\">\n                        <div>\n                            <h5>Created by</h5>\n                            <section>\n                                <ProfilePicture user={footerInfo.created_by} showName size=\"md\" />{' '}\n                                <TZLabel time={footerInfo.created_at} />\n                            </section>\n                        </div>\n                        <div>\n                            <h5>Last modified by</h5>\n                            <section>\n                                <ProfilePicture user={footerInfo.last_modified_by} showName size=\"md\" />{' '}\n                                <TZLabel time={footerInfo.last_modified_at} />\n                            </section>\n                        </div>\n                        {footerInfo.last_refresh && (\n                            <div>\n                                <h5>Last computed</h5>\n                                <section>\n                                    <TZLabel time={footerInfo.last_refresh} />\n                                </section>\n                            </div>\n                        )}\n                    </div>\n                )}\n            </div>\n        )\n    })\n)\n", "import {\n    ActivityChange,\n    ActivityLogItem,\n    ChangeMapping,\n    defaultDescriber,\n    Description,\n    detectBoolean,\n    HumanizedChange,\n    userNameForLogItem,\n} from 'lib/components/ActivityLog/humanizeActivity'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { truncate } from 'lib/utils'\nimport { urls } from 'scenes/urls'\nimport { match, P } from 'ts-pattern'\n\nimport {\n    BasicSurveyQuestion,\n    FeatureFlagBasicType,\n    FeatureFlagFilters,\n    LinkSurveyQuestion,\n    MultipleSurveyQuestion,\n    RatingSurveyQuestion,\n    Survey,\n    SurveyAppearance,\n    SurveyQuestionType,\n} from '~/types'\n\nimport { SurveyQuestionLabel } from './constants'\n\nconst isEmptyOrUndefined = (value: any): boolean => value === undefined || value === null || value === ''\n\nconst nameOrLinkToSurvey = (\n    id: string | undefined,\n    name: string | null | undefined,\n    activity: string\n): string | JSX.Element => {\n    const displayName = name || '(empty string)'\n    if (activity === 'deleted') {\n        return <strong>{displayName}</strong>\n    }\n    return id ? <Link to={urls.survey(id)}>{displayName}</Link> : displayName\n}\n\nconst surveyActionsMapping: Record<\n    string,\n    (change?: ActivityChange, logItem?: ActivityLogItem) => ChangeMapping | null\n> = {\n    name: function onName(change) {\n        return {\n            description: [\n                <>\n                    changed the name from <strong>\"{change?.before as string}\"</strong> to{' '}\n                    <strong>\"{change?.after as string}\"</strong>\n                </>,\n            ],\n        }\n    },\n    description: function onDescription(change) {\n        return {\n            description: [\n                <>\n                    updated the description from {formatDescription(change?.before as string | null | undefined)} to{' '}\n                    {formatDescription(change?.after as string | null | undefined)}\n                </>,\n            ],\n        }\n    },\n    type: function onType(change) {\n        return {\n            description: [\n                <>\n                    changed the type from <strong>{change?.before as string}</strong> to{' '}\n                    <strong>{change?.after as string}</strong>\n                </>,\n            ],\n        }\n    },\n    questions: function onQuestions(change?: ActivityChange): ChangeMapping | null {\n        if (!change) {\n            return null\n        }\n\n        const beforeQuestions = change.before as Survey['questions']\n        const afterQuestions = change.after as Survey['questions']\n\n        if (beforeQuestions.length !== afterQuestions.length) {\n            return {\n                description: [\n                    <>\n                        changed the number of questions from <strong>{beforeQuestions.length}</strong> to{' '}\n                        <strong>{afterQuestions.length}</strong>\n                    </>,\n                ],\n            }\n        }\n\n        const questionChanges = afterQuestions\n            .map((afterQ, index) => {\n                const beforeQ = beforeQuestions[index]\n                if (JSON.stringify(beforeQ) !== JSON.stringify(afterQ)) {\n                    return {\n                        index: index + 1,\n                        changes: describeQuestionChanges(beforeQ, afterQ),\n                    }\n                }\n                return null\n            })\n            .filter((item): item is { index: number; changes: JSX.Element[] } => item !== null)\n\n        if (questionChanges.length === 0) {\n            return {\n                description: [<>No changes to questions</>],\n            }\n        }\n\n        return {\n            description: [\n                <>\n                    updated <strong>{questionChanges.length}</strong> question{questionChanges.length !== 1 ? 's' : ''}:\n                    <ul className=\"bullet-list\">\n                        {questionChanges.map(({ index, changes }) => (\n                            <li key={index}>\n                                Question {index}:\n                                <ul className=\"bullet-list\">\n                                    {changes.map((changeItem, changeIndex) => (\n                                        <li key={changeIndex}>{changeItem}</li>\n                                    ))}\n                                </ul>\n                            </li>\n                        ))}\n                    </ul>\n                </>,\n            ],\n        }\n    },\n    archived: function onArchived(change) {\n        const isArchived = detectBoolean(change?.after)\n        return {\n            description: [isArchived ? <>archived</> : <>unarchived</>],\n        }\n    },\n    start_date: function onStartDate(change) {\n        if (change?.before === null && change?.after !== null) {\n            return {\n                description: [<>launched</>],\n            }\n        }\n        return null\n    },\n    end_date: function onEndDate(change) {\n        if (change?.before === null && change?.after !== null) {\n            return {\n                description: [<>stopped</>],\n            }\n        }\n        return null\n    },\n    appearance: function onAppearance(change) {\n        const beforeAppearance = change?.before as SurveyAppearance\n        const afterAppearance = change?.after as SurveyAppearance\n        const changes: JSX.Element[] = []\n\n        const fieldNameMapping: Record<keyof SurveyAppearance, string> = {\n            backgroundColor: 'background color',\n            submitButtonColor: 'submit button color',\n            submitButtonText: 'submit button text',\n            submitButtonTextColor: 'submit button text color',\n            ratingButtonColor: 'rating button color',\n            ratingButtonActiveColor: 'active rating button color',\n            borderColor: 'border color',\n            placeholder: 'placeholder text',\n            whiteLabel: 'white label option',\n            displayThankYouMessage: 'thank you message display',\n            thankYouMessageHeader: 'thank you message header',\n            thankYouMessageDescription: 'thank you message description',\n            thankYouMessageDescriptionContentType: 'thank you message content type',\n            thankYouMessageCloseButtonText: 'thank you message close button text',\n            autoDisappear: 'auto-disappear option',\n            position: 'survey position',\n            shuffleQuestions: 'question shuffling',\n            surveyPopupDelaySeconds: 'survey popup delay',\n            widgetType: 'widget type',\n            widgetSelector: 'widget selector',\n            widgetLabel: 'widget label',\n            widgetColor: 'widget color',\n            zIndex: 'survey form zIndex',\n            fontFamily: 'font family',\n        }\n\n        Object.entries(fieldNameMapping).forEach(([field, readableFieldName]) => {\n            const before = beforeAppearance?.[field as keyof SurveyAppearance]\n            const after = afterAppearance?.[field as keyof SurveyAppearance]\n            const changeDescription = describeFieldChange(readableFieldName, before, after)\n            if (changeDescription.props.children) {\n                changes.push(changeDescription)\n            }\n        })\n\n        return changes.length > 0\n            ? {\n                  description: changes,\n              }\n            : null\n    },\n    conditions: function onConditions(change) {\n        const beforeConditions = change?.before as Survey['conditions']\n        const afterConditions = change?.after as Survey['conditions']\n        const changes: JSX.Element[] = []\n\n        changes.push(\n            describeFieldChange('URL condition', beforeConditions?.url, afterConditions?.url),\n            describeFieldChange('selector', beforeConditions?.selector, afterConditions?.selector),\n            describeFieldChange(\n                'wait period',\n                beforeConditions?.seenSurveyWaitPeriodInDays,\n                afterConditions?.seenSurveyWaitPeriodInDays,\n                'days'\n            ),\n            describeFieldChange('URL match type', beforeConditions?.urlMatchType, afterConditions?.urlMatchType)\n        )\n\n        // Use JSON.stringify for deep comparison of objects\n        if (JSON.stringify(beforeConditions?.events) !== JSON.stringify(afterConditions?.events)) {\n            changes.push(<>modified event conditions</>)\n        }\n\n        return changes.filter((change) => change.props.children).length > 0\n            ? {\n                  description: changes.filter((change) => change.props.children),\n              }\n            : null\n    },\n    responses_limit: function onResponsesLimit(change) {\n        return {\n            description: [describeFieldChange('response limit', change?.before, change?.after, 'responses')].filter(\n                (desc) => desc.props.children\n            ),\n        }\n    },\n    iteration_count: function onIterationCount(change) {\n        return {\n            description: [describeFieldChange('iteration count', change?.before, change?.after)].filter(\n                (desc) => desc.props.children\n            ),\n        }\n    },\n    iteration_frequency_days: function onIterationFrequency(change) {\n        return {\n            description: [describeFieldChange('iteration frequency', change?.before, change?.after, 'days')].filter(\n                (desc) => desc.props.children\n            ),\n        }\n    },\n    targeting_flag: function onTargetingFlag(change) {\n        const beforeFlag = change?.before as FeatureFlagBasicType | null\n        const afterFlag = change?.after as FeatureFlagBasicType | null\n        const changes: Description[] = []\n\n        if (!beforeFlag && afterFlag) {\n            changes.push(\n                <>\n                    added a targeting flag with key <strong>{afterFlag.key}</strong>\n                </>\n            )\n            if (afterFlag.filters?.groups?.length > 0) {\n                changes.push(\n                    <>\n                        set targeting conditions to:\n                        <pre>{JSON.stringify(afterFlag.filters, null, 2)}</pre>\n                    </>\n                )\n            }\n        } else if (beforeFlag && !afterFlag) {\n            changes.push(\n                <>\n                    removed the targeting flag with key <strong>{beforeFlag.key}</strong>\n                </>\n            )\n        } else if (beforeFlag && afterFlag) {\n            if (beforeFlag.key !== afterFlag.key) {\n                changes.push(\n                    <>\n                        changed targeting flag key from <strong>{beforeFlag.key}</strong> to{' '}\n                        <strong>{afterFlag.key}</strong>\n                    </>\n                )\n            }\n        }\n\n        return changes.length > 0\n            ? {\n                  description: changes,\n              }\n            : null\n    },\n    targeting_flag_filters: function onTargetingFlagFilter(change) {\n        const beforeFlag = change?.before as FeatureFlagFilters | null\n        const afterFlag = change?.after as FeatureFlagFilters | null\n        const changes: Description[] = []\n\n        if (!beforeFlag && afterFlag) {\n            changes.push(\n                <>\n                    added targeting flag filter with the following conditions:\n                    <pre>{JSON.stringify(afterFlag, null, 2)}</pre>\n                </>\n            )\n        } else if (beforeFlag && !afterFlag) {\n            changes.push(<>removed targeting flag filter</>)\n        } else if (beforeFlag && afterFlag) {\n            if (JSON.stringify(beforeFlag) !== JSON.stringify(afterFlag)) {\n                changes.push(\n                    <>\n                        changed targeting conditions from:\n                        <pre>{JSON.stringify(beforeFlag, null, 2)}</pre>\n                        to:\n                        <pre>{JSON.stringify(afterFlag, null, 2)}</pre>\n                    </>\n                )\n            }\n        }\n\n        return changes.length > 0\n            ? {\n                  description: changes,\n              }\n            : null\n    },\n}\n\nexport function surveyActivityDescriber(logItem: ActivityLogItem, asNotification?: boolean): HumanizedChange {\n    if (logItem.scope !== 'Survey') {\n        console.error('survey describer received a non-survey activity')\n        return { description: null }\n    }\n\n    const user = <strong>{userNameForLogItem(logItem)}</strong>\n    const surveyLink = nameOrLinkToSurvey(logItem?.item_id, logItem?.detail.name, logItem.activity)\n\n    if (logItem.activity === 'created') {\n        return {\n            description: (\n                <>\n                    {user} created {surveyLink}\n                </>\n            ),\n        }\n    }\n\n    if (logItem.activity === 'deleted') {\n        return {\n            description: (\n                <>\n                    {user} deleted {surveyLink}\n                </>\n            ),\n        }\n    }\n\n    if (logItem.activity === 'updated') {\n        const changes: { field: string; description: Description }[] = []\n\n        for (const change of logItem.detail.changes || []) {\n            if (!change?.field) {\n                continue\n            }\n\n            const possibleLogItem = surveyActionsMapping[change.field]?.(change, logItem)\n            if (possibleLogItem?.description) {\n                if (Array.isArray(possibleLogItem.description) && possibleLogItem.description.length > 1) {\n                    // This is for the conditions section, which may have multiple changes.\n                    // Probably could be refactored into a separate handler like some of the other fields\n                    changes.push(\n                        ...possibleLogItem.description.map((desc) => ({\n                            field: 'conditions',\n                            description: desc,\n                        }))\n                    )\n                } else {\n                    changes.push({\n                        field: change.field,\n                        description: possibleLogItem.description[0],\n                    })\n                }\n            }\n        }\n\n        if (changes.length === 1) {\n            const { field, description } = changes[0]\n            const preposition = field === 'conditions' ? 'for' : getPreposition(field)\n            return {\n                description: (\n                    <>\n                        {user} {description} {preposition} {surveyLink}\n                    </>\n                ),\n            }\n        } else if (changes.length > 1) {\n            return {\n                description: (\n                    <>\n                        {user} made multiple changes to {surveyLink}:\n                        <ul className=\"bullet-list\">\n                            {changes.map(({ description }, index) => (\n                                <li key={index}>{description}</li>\n                            ))}\n                        </ul>\n                    </>\n                ),\n            }\n        }\n    }\n\n    return defaultDescriber(logItem, asNotification, surveyLink)\n}\n\nexport function getPreposition(field: string): string {\n    switch (field) {\n        case 'questions':\n        case 'appearance':\n        case 'type':\n            return 'of'\n        case 'name':\n        case 'description':\n        case 'responses_limit':\n        case 'iteration_count':\n        case 'iteration_frequency_days':\n        case 'targeting_flag_filters':\n        case 'targeting_flag':\n            return 'for'\n        case 'archived':\n        case 'start_date':\n        case 'end_date':\n            return ''\n        default:\n            return 'of'\n    }\n}\n\ntype SurveyQuestion = BasicSurveyQuestion | LinkSurveyQuestion | RatingSurveyQuestion | MultipleSurveyQuestion\n\nexport function describeQuestionChanges(before: SurveyQuestion, after: SurveyQuestion): JSX.Element[] {\n    const commonChanges = describeCommonChanges(before, after)\n    const typeChangeDescription =\n        before.type !== after.type\n            ? [\n                  <>\n                      changed question type from <strong>{SurveyQuestionLabel[before.type]}</strong> to{' '}\n                      <strong>{SurveyQuestionLabel[after.type]}</strong>\n                  </>,\n              ]\n            : []\n\n    const specificChanges = match([before, after])\n        .with([{ type: SurveyQuestionType.Link }, { type: SurveyQuestionType.Link }], describeLinkChanges)\n        .with([{ type: SurveyQuestionType.Rating }, { type: SurveyQuestionType.Rating }], describeRatingChanges)\n        .with(\n            [\n                { type: P.union(SurveyQuestionType.SingleChoice, SurveyQuestionType.MultipleChoice) },\n                { type: P.union(SurveyQuestionType.SingleChoice, SurveyQuestionType.MultipleChoice) },\n            ],\n            describeMultipleChoiceChanges\n        )\n        .otherwise(() => [])\n\n    return [...commonChanges, ...typeChangeDescription, ...specificChanges, ...describeBranchingChanges(before, after)]\n}\n\nexport function describeCommonChanges(before: SurveyQuestion, after: SurveyQuestion): JSX.Element[] {\n    const changes: JSX.Element[] = []\n    if (before.question !== after.question) {\n        changes.push(\n            <>\n                changed question text from \"<strong>{before.question}</strong>\" to \"<strong>{after.question}</strong>\"\n            </>\n        )\n    }\n    if (before.description !== after.description) {\n        changes.push(\n            <>\n                changed the question description from {formatDescription(before.description)} to{' '}\n                {formatDescription(after.description)}\n            </>\n        )\n    }\n    if (before.optional !== after.optional) {\n        changes.push(<>{after.optional ? 'made question optional' : 'made question required'}</>)\n    }\n    if (before.buttonText !== after.buttonText) {\n        changes.push(\n            <>\n                changed button text from \"<strong>{before.buttonText}</strong>\" to \"<strong>{after.buttonText}</strong>\"\n            </>\n        )\n    }\n    return changes\n}\n\nexport function describeLinkChanges([before, after]: [LinkSurveyQuestion, LinkSurveyQuestion]): JSX.Element[] {\n    return before.link !== after.link\n        ? [\n              <>\n                  updated link from <strong>{before.link}</strong> to <strong>{after.link}</strong>\n              </>,\n          ]\n        : []\n}\n\nexport function describeRatingChanges([before, after]: [RatingSurveyQuestion, RatingSurveyQuestion]): JSX.Element[] {\n    const changes: JSX.Element[] = []\n    if (before.display !== after.display) {\n        changes.push(\n            <>\n                changed rating display from <strong>{before.display}</strong> to <strong>{after.display}</strong>\n            </>\n        )\n    }\n    if (before.scale !== after.scale) {\n        changes.push(\n            <>\n                changed rating scale from <strong>{before.scale}</strong> to <strong>{after.scale}</strong>\n            </>\n        )\n    }\n    if (before.lowerBoundLabel !== after.lowerBoundLabel || before.upperBoundLabel !== after.upperBoundLabel) {\n        changes.push(\n            <>\n                updated rating labels from <strong>\"{before.lowerBoundLabel}\"</strong>-\n                <strong>\"{before.upperBoundLabel}\"</strong> to <strong>\"{after.lowerBoundLabel}\"</strong>-\n                <strong>\"{after.upperBoundLabel}\"</strong>\n            </>\n        )\n    }\n    return changes\n}\n\nexport function describeMultipleChoiceChanges([before, after]: [\n    MultipleSurveyQuestion,\n    MultipleSurveyQuestion\n]): JSX.Element[] {\n    const changes: JSX.Element[] = []\n    if (JSON.stringify(before.choices) !== JSON.stringify(after.choices)) {\n        const addedChoices = after.choices.filter((c) => !before.choices.includes(c))\n        const removedChoices = before.choices.filter((c) => !after.choices.includes(c))\n        if (addedChoices.length > 0) {\n            changes.push(\n                <>\n                    added choices: <strong>{addedChoices.join(', ')}</strong>\n                </>\n            )\n        }\n        if (removedChoices.length > 0) {\n            changes.push(\n                <>\n                    removed choices: <strong>{removedChoices.join(', ')}</strong>\n                </>\n            )\n        }\n    }\n    if (before.shuffleOptions !== after.shuffleOptions) {\n        changes.push(<>{after.shuffleOptions ? 'enabled' : 'disabled'} option shuffling</>)\n    }\n    if (before.hasOpenChoice !== after.hasOpenChoice) {\n        changes.push(<>{after.hasOpenChoice ? 'added' : 'removed'} open choice option</>)\n    }\n    return changes\n}\n\nexport function describeBranchingChanges(before: SurveyQuestion, after: SurveyQuestion): JSX.Element[] {\n    if (JSON.stringify(before.branching) !== JSON.stringify(after.branching)) {\n        return [<>updated branching logic</>]\n    }\n    return []\n}\n\nexport const formatDescription = (value: string | null | undefined): JSX.Element => {\n    if (value === undefined || value === null || value === '') {\n        return <i>unset</i>\n    }\n    return <strong>\"{truncate(value, 50)}\"</strong>\n}\n\nexport function describeFieldChange<T>(fieldName: string, before: T, after: T, unit?: string): JSX.Element {\n    if (isEmptyOrUndefined(before) && isEmptyOrUndefined(after)) {\n        return <></>\n    }\n    if (isEmptyOrUndefined(before) && !isEmptyOrUndefined(after)) {\n        return (\n            <>\n                set {fieldName} to{' '}\n                <strong>\n                    {String(after)}\n                    {unit ? ` ${unit}` : ''}\n                </strong>\n            </>\n        )\n    } else if (!isEmptyOrUndefined(before) && isEmptyOrUndefined(after)) {\n        return (\n            <>\n                removed {fieldName} (was{' '}\n                <strong>\n                    {String(before)}\n                    {unit ? ` ${unit}` : ''}\n                </strong>\n                )\n            </>\n        )\n    } else if (before !== after) {\n        return (\n            <>\n                changed {fieldName} from{' '}\n                <strong>\n                    {String(before)}\n                    {unit ? ` ${unit}` : ''}\n                </strong>{' '}\n                to{' '}\n                <strong>\n                    {String(after)}\n                    {unit ? ` ${unit}` : ''}\n                </strong>\n            </>\n        )\n    }\n    return <></>\n}\n", "/**\n * Symbols used internally within ts-pattern to construct and discriminate\n * Guard, Not, and Select, and AnonymousSelect patterns\n *\n * Symbols have the advantage of not appearing in auto-complete suggestions in\n * user defined patterns, and eliminate the risk of property\n * overlap between ts-pattern internals and user defined patterns.\n *\n * These symbols have to be visible to tsc for type inference to work, but\n * users should not import them\n * @module\n * @private\n * @internal\n */\n\nexport const toExclude = Symbol('@ts-pattern/to-exclude');\nexport type toExclude = typeof toExclude;\n\nexport const matcher = Symbol('@ts-pattern/matcher');\nexport type matcher = typeof matcher;\n\nexport const unset = Symbol('@ts-pattern/unset');\nexport type unset = typeof unset;\n\nexport const anonymousSelectKey = '@ts-pattern/anonymous-select-key';\nexport type anonymousSelectKey = typeof anonymousSelectKey;\n", "/**\n * @module\n * @private\n * @internal\n */\n\nimport * as symbols from './symbols';\nimport { SelectionType } from '../types/FindSelected';\nimport { Pattern, Matcher, MatcherType } from '../types/Pattern';\n\n// @internal\nexport const isObject = (value: unknown): value is Object =>\n  Boolean(value && typeof value === 'object');\n\n//   @internal\nexport const isMatcher = (\n  x: unknown\n): x is Matcher<unknown, unknown, MatcherType, SelectionType> => {\n  const pattern = x as Matcher<unknown, unknown, MatcherType, SelectionType>;\n  return pattern && !!pattern[symbols.matcher];\n};\n\n// @internal\nconst isOptionalPattern = (\n  x: unknown\n): x is Matcher<unknown, unknown, 'optional', SelectionType> => {\n  return isMatcher(x) && x[symbols.matcher]().matcherType === 'optional';\n};\n\n// tells us if the value matches a given pattern.\n// @internal\nexport const matchPattern = (\n  pattern: Pattern<any>,\n  value: any,\n  select: (key: string, value: unknown) => void\n): boolean => {\n  if (isObject(pattern)) {\n    if (isMatcher(pattern)) {\n      const matcher = pattern[symbols.matcher]();\n      const { matched, selections } = matcher.match(value);\n      if (matched && selections) {\n        Object.keys(selections).forEach((key) => select(key, selections[key]));\n      }\n      return matched;\n    }\n\n    if (!isObject(value)) return false;\n\n    if (Array.isArray(pattern)) {\n      if (!Array.isArray(value)) return false;\n      // Tuple pattern\n      return pattern.length === value.length\n        ? pattern.every((subPattern, i) =>\n            matchPattern(subPattern, value[i], select)\n          )\n        : false;\n    }\n\n    if (pattern instanceof Map) {\n      if (!(value instanceof Map)) return false;\n      return Array.from(pattern.keys()).every((key) =>\n        matchPattern(pattern.get(key), value.get(key), select)\n      );\n    }\n\n    if (pattern instanceof Set) {\n      if (!(value instanceof Set)) return false;\n\n      if (pattern.size === 0) return value.size === 0;\n\n      if (pattern.size === 1) {\n        const [subPattern] = Array.from(pattern.values());\n        return isMatcher(subPattern)\n          ? Array.from(value.values()).every((v) =>\n              matchPattern(subPattern, v, select)\n            )\n          : value.has(subPattern);\n      }\n\n      return Array.from(pattern.values()).every((subPattern) =>\n        value.has(subPattern)\n      );\n    }\n\n    return Object.keys(pattern).every((k: string): boolean => {\n      // @ts-ignore\n      const subPattern = pattern[k];\n\n      return (\n        (k in value || isOptionalPattern(subPattern)) &&\n        matchPattern(\n          subPattern,\n          // @ts-ignore\n          value[k],\n          select\n        )\n      );\n    });\n  }\n\n  return Object.is(value, pattern);\n};\n\n// @internal\nexport const getSelectionKeys = (pattern: Pattern<any>): string[] => {\n  if (isObject(pattern)) {\n    if (isMatcher(pattern)) {\n      return pattern[symbols.matcher]().getSelectionKeys?.() ?? [];\n    }\n    if (Array.isArray(pattern)) return flatMap(pattern, getSelectionKeys);\n    return flatMap(Object.values(pattern), getSelectionKeys);\n  }\n  return [];\n};\n\n// @internal\nexport const flatMap = <a, b>(xs: a[], f: (v: a) => b[]): b[] =>\n  xs.reduce<b[]>((acc, p) => acc.concat(f(p)), []);\n", "import { matchPattern, getSelectionKeys, flatMap } from './internals/helpers';\nimport * as symbols from './internals/symbols';\nimport { GuardFunction, IsNever, Primitives } from './types/helpers';\nimport { InvertPattern } from './types/InvertPattern';\nimport {\n  Pattern,\n  UnknownPattern,\n  OptionalP,\n  ArrayP,\n  AndP,\n  OrP,\n  NotP,\n  GuardP,\n  SelectP,\n  AnonymousSelectP,\n  GuardExcludeP,\n} from './types/Pattern';\n\nexport { Pattern };\n\n/**\n * `P.infer<typeof somePattern>` will return the type of the value\n * matched by this pattern.\n *\n * [Read documentation for `P.infer` on GitHub](https://github.com/gvergnaud/ts-pattern#Pinfer)\n *\n * @example\n * const userPattern = { name: P.string }\n * type User = P.infer<typeof userPattern>\n */\nexport type infer<p extends Pattern<any>> = InvertPattern<p>;\n\n/**\n * `P.optional(subpattern)` takes a sub pattern and returns a pattern which matches if the\n * key is undefined or if it is defined and the sub pattern matches its value.\n *\n * [Read documentation for `P.optional` on GitHub](https://github.com/gvergnaud/ts-pattern#Poptional-patterns)\n\n* @example\n *  match(value)\n *   .with({ greeting: P.optional('Hello') }, () => 'will match { greeting?: \"Hello\" }')\n */\nexport function optional<\n  input,\n  p extends unknown extends input ? UnknownPattern : Pattern<input>\n>(pattern: p): OptionalP<input, p> {\n  return {\n    [symbols.matcher]() {\n      return {\n        match: <I>(value: I | input) => {\n          let selections: Record<string, unknown[]> = {};\n          const selector = (key: string, value: any) => {\n            selections[key] = value;\n          };\n          if (value === undefined) {\n            getSelectionKeys(pattern).forEach((key) =>\n              selector(key, undefined)\n            );\n            return { matched: true, selections };\n          }\n          const matched = matchPattern(pattern, value, selector);\n          return { matched, selections };\n        },\n        getSelectionKeys: () => getSelectionKeys(pattern),\n        matcherType: 'optional',\n      };\n    },\n  };\n}\n\ntype Elem<xs> = xs extends readonly (infer x)[] ? x : never;\n\n/**\n * `P.array(subpattern)` takes a sub pattern and returns a pattern, which matches\n * arrays if all their elements match the sub pattern.\n *\n * [Read documentation for `P.array` on GitHub](https://github.com/gvergnaud/ts-pattern#Parray-patterns)\n *\n * @example\n *  match(value)\n *   .with({ users: P.array({ name: P.string }) }, () => 'will match { name: string }[]')\n */\nexport function array<\n  input,\n  p extends unknown extends input ? UnknownPattern : Pattern<Elem<input>>\n>(pattern: p): ArrayP<input, p> {\n  return {\n    [symbols.matcher]() {\n      return {\n        match: <I>(value: I | input) => {\n          if (!Array.isArray(value)) return { matched: false };\n\n          let selections: Record<string, unknown[]> = {};\n\n          if (value.length === 0) {\n            getSelectionKeys(pattern).forEach((key) => {\n              selections[key] = [];\n            });\n            return { matched: true, selections };\n          }\n\n          const selector = (key: string, value: unknown) => {\n            selections[key] = (selections[key] || []).concat([value]);\n          };\n\n          const matched = value.every((v) =>\n            matchPattern(pattern, v, selector)\n          );\n\n          return { matched, selections };\n        },\n        getSelectionKeys: () => getSelectionKeys(pattern),\n      };\n    },\n  };\n}\n\n/**\n * `P.intersection(...patterns)` returns a pattern which matches\n * only if **every** patterns provided in parameter match the input.\n *\n * [Read documentation for `P.intersection` on GitHub](https://github.com/gvergnaud/ts-pattern#Pintersection-patterns)\n *\n * @example\n *  match(value)\n *   .with(\n *     {\n *       user: P.intersection(\n *         { firstname: P.string },\n *         { lastname: P.string },\n *         { age: P.when(age => age > 21) }\n *       )\n *     },\n *     ({ user }) => 'will match { firstname: string, lastname: string, age: number } if age > 21'\n *   )\n */\nexport function intersection<\n  input,\n  ps extends unknown extends input\n    ? [UnknownPattern, ...UnknownPattern[]]\n    : [Pattern<input>, ...Pattern<input>[]]\n>(...patterns: ps): AndP<input, ps> {\n  return {\n    [symbols.matcher]: () => ({\n      match: (value) => {\n        let selections: Record<string, unknown[]> = {};\n        const selector = (key: string, value: any) => {\n          selections[key] = value;\n        };\n        const matched = (patterns as UnknownPattern[]).every((p) =>\n          matchPattern(p, value, selector)\n        );\n        return { matched, selections };\n      },\n      getSelectionKeys: () =>\n        flatMap(patterns as UnknownPattern[], getSelectionKeys),\n      matcherType: 'and',\n    }),\n  };\n}\n\n/**\n * `P.union(...patterns)` returns a pattern which matches\n * if **at least one** of the patterns provided in parameter match the input.\n *\n * [Read documentation for `P.union` on GitHub](https://github.com/gvergnaud/ts-pattern#Punion-patterns)\n *\n * @example\n *  match(value)\n *   .with(\n *     { type: P.union('a', 'b', 'c') },\n *     ({ user }) => 'will match { type: \"a\" | \"b\" | \"c\" }'\n *   )\n */\nexport function union<\n  input,\n  ps extends unknown extends input\n    ? [UnknownPattern, ...UnknownPattern[]]\n    : [Pattern<input>, ...Pattern<input>[]]\n>(...patterns: ps): OrP<input, ps> {\n  return {\n    [symbols.matcher]: () => ({\n      match: <I>(value: I | input) => {\n        let selections: Record<string, unknown[]> = {};\n        const selector = (key: string, value: any) => {\n          selections[key] = value;\n        };\n        flatMap(patterns as UnknownPattern[], getSelectionKeys).forEach((key) =>\n          selector(key, undefined)\n        );\n        const matched = (patterns as UnknownPattern[]).some((p) =>\n          matchPattern(p, value, selector)\n        );\n        return { matched, selections };\n      },\n      getSelectionKeys: () =>\n        flatMap(patterns as UnknownPattern[], getSelectionKeys),\n      matcherType: 'or',\n    }),\n  };\n}\n\n/**\n * `P.not(pattern)` returns a pattern which matches if the sub pattern\n * doesn't match.\n *\n * [Read documentation for `P.not` on GitHub](https://github.com/gvergnaud/ts-pattern#Pnot-patterns)\n *\n * @example\n *  match<{ a: string | number }>(value)\n *   .with({ a: P.not(P.string) }, (x) => 'will match { a: number }'\n *   )\n */\nexport function not<input, p extends Pattern<input> | Primitives>(\n  pattern: p\n): NotP<input, p> {\n  return {\n    [symbols.matcher]: () => ({\n      match: <I>(value: I | input) => ({\n        matched: !matchPattern(pattern, value, () => {}),\n      }),\n      getSelectionKeys: () => [],\n      matcherType: 'not',\n    }),\n  };\n}\n\n/**\n * `P.when((value) => boolean)` returns a pattern which matches\n * if the predicate returns true for the current input.\n *\n * [Read documentation for `P.when` on GitHub](https://github.com/gvergnaud/ts-pattern#Pwhen-patterns)\n *\n * @example\n *  match<{ age: number }>(value)\n *   .with({ age: P.when(age => age > 21) }, (x) => 'will match if value.age > 21'\n *   )\n */\nexport function when<input, p extends (value: input) => unknown>(\n  predicate: p\n): GuardP<\n  input,\n  p extends (value: any) => value is infer narrowed ? narrowed : never\n>;\nexport function when<input, narrowed extends input, excluded>(\n  predicate: (input: input) => input is narrowed\n): GuardExcludeP<input, narrowed, excluded>;\nexport function when<input, p extends (value: input) => unknown>(\n  predicate: p\n): GuardP<\n  input,\n  p extends (value: any) => value is infer narrowed ? narrowed : never\n> {\n  return {\n    [symbols.matcher]: () => ({\n      match: <I>(value: I | input) => ({\n        matched: Boolean(predicate(value as input)),\n      }),\n    }),\n  };\n}\n\n/**\n * `P.select()` is a pattern which will always match,\n * and will inject the selected piece of input in the handler function.\n *\n * [Read documentation for `P.select` on GitHub](https://github.com/gvergnaud/ts-pattern#Pselect-patterns)\n *\n * @example\n *  match<{ age: number }>(value)\n *   .with({ age: P.select() }, (age) => 'age: number'\n *   )\n */\nexport function select(): AnonymousSelectP;\nexport function select<\n  input,\n  patternOrKey extends\n    | string\n    | (unknown extends input ? UnknownPattern : Pattern<input>)\n>(\n  patternOrKey: patternOrKey\n): patternOrKey extends string\n  ? SelectP<patternOrKey>\n  : SelectP<symbols.anonymousSelectKey, input, patternOrKey>;\nexport function select<\n  input,\n  p extends unknown extends input ? UnknownPattern : Pattern<input>,\n  k extends string\n>(key: k, pattern: p): SelectP<k, input, p>;\nexport function select(\n  ...args: [keyOrPattern?: unknown | string, pattern?: unknown]\n): SelectP<string> {\n  const key: string | undefined =\n    typeof args[0] === 'string' ? args[0] : undefined;\n  const pattern: unknown =\n    args.length === 2\n      ? args[1]\n      : typeof args[0] === 'string'\n      ? undefined\n      : args[0];\n  return {\n    [symbols.matcher]() {\n      return {\n        match: (value) => {\n          let selections: Record<string, unknown> = {\n            [key ?? symbols.anonymousSelectKey]: value,\n          };\n          const selector = (key: string, value: any) => {\n            selections[key] = value;\n          };\n          return {\n            matched:\n              pattern === undefined\n                ? true\n                : matchPattern(pattern, value, selector),\n            selections: selections,\n          };\n        },\n        getSelectionKeys: () =>\n          [key ?? symbols.anonymousSelectKey].concat(\n            pattern === undefined ? [] : getSelectionKeys(pattern)\n          ),\n      };\n    },\n  };\n}\n\nfunction isUnknown(x: unknown): x is unknown {\n  return true;\n}\n\nfunction isNumber<T>(x: T | number): x is number {\n  return typeof x === 'number';\n}\n\nfunction isString<T>(x: T | string): x is string {\n  return typeof x === 'string';\n}\n\nfunction isBoolean<T>(x: T | boolean): x is boolean {\n  return typeof x === 'boolean';\n}\n\nfunction isBigInt<T>(x: T | bigint): x is bigint {\n  return typeof x === 'bigint';\n}\n\nfunction isSymbol<T>(x: T | symbol): x is symbol {\n  return typeof x === 'symbol';\n}\n\nfunction isNullish<T>(x: T | null | undefined): x is null | undefined {\n  return x === null || x === undefined;\n}\n\ntype AnyConstructor = abstract new (...args: any[]) => any;\n\nfunction isInstanceOf<T extends AnyConstructor>(classConstructor: T) {\n  return (val: unknown): val is InstanceType<T> =>\n    val instanceof classConstructor;\n}\n\n/**\n * `P.any` is a wildcard pattern, matching **any value**.\n *\n * [Read documentation for `P.any` on GitHub](https://github.com/gvergnaud/ts-pattern#P_-wildcard)\n *\n * @example\n *  match(value)\n *   .with(P.any, () => 'will always match')\n */\nexport const any = when(isUnknown);\n\n/**\n * `P._` is a wildcard pattern, matching **any value**.\n * It's an alias to `P.any`.\n *\n * [Read documentation for `P._` on GitHub](https://github.com/gvergnaud/ts-pattern#P_-wildcard)\n *\n * @example\n *  match(value)\n *   .with(P._, () => 'will always match')\n */\nexport const _ = any;\n\n/**\n * `P.string` is a wildcard pattern matching any **string**.\n *\n * [Read documentation for `P.string` on GitHub](https://github.com/gvergnaud/ts-pattern#Pstring-wildcard)\n *\n * @example\n *  match(value)\n *   .with(P.string, () => 'will match on strings')\n */\n\nexport const string = when(isString);\n\n/**\n * `P.number` is a wildcard pattern matching any **number**.\n *\n * [Read documentation for `P.number` on GitHub](https://github.com/gvergnaud/ts-pattern#Pnumber-wildcard)\n *\n * @example\n *  match(value)\n *   .with(P.number, () => 'will match on numbers')\n */\nexport const number = when(isNumber);\n\n/**\n * `P.boolean` is a wildcard pattern matching any **boolean**.\n *\n * [Read documentation for `P.boolean` on GitHub](https://github.com/gvergnaud/ts-pattern#boolean-wildcard)\n *\n * @example\n *   .with(P.boolean, () => 'will match on booleans')\n */\nexport const boolean = when(isBoolean);\n\n/**\n * `P.bigint` is a wildcard pattern matching any **bigint**.\n *\n * [Read documentation for `P.bigint` on GitHub](https://github.com/gvergnaud/ts-pattern#bigint-wildcard)\n *\n * @example\n *   .with(P.bigint, () => 'will match on bigints')\n */\nexport const bigint = when(isBigInt);\n\n/**\n * `P.symbol` is a wildcard pattern matching any **symbol**.\n *\n * [Read documentation for `P.symbol` on GitHub](https://github.com/gvergnaud/ts-pattern#symbol-wildcard)\n *\n * @example\n *   .with(P.symbol, () => 'will match on symbols')\n */\nexport const symbol = when(isSymbol);\n\n/**\n * `P.nullish` is a wildcard pattern matching **null** or **undefined**.\n *\n * [Read documentation for `P.nullish` on GitHub](https://github.com/gvergnaud/ts-pattern#nullish-wildcard)\n *\n * @example\n *   .with(P.nullish, () => 'will match on null or undefined')\n */\nexport const nullish = when(isNullish);\n\n/**\n * `P.instanceOf(SomeClass)` is a pattern matching instances of a given class.\n *\n * [Read documentation for `P.instanceOf` on GitHub](https://github.com/gvergnaud/ts-pattern#Pinstanceof-patterns)\n *\n *  @example\n *   .with(P.instanceOf(SomeClass), () => 'will match on SomeClass instances')\n */\nexport function instanceOf<T extends AnyConstructor>(\n  classConstructor: T\n): GuardP<unknown, InstanceType<T>> {\n  return when(isInstanceOf(classConstructor));\n}\n\n/**\n * `P.typed<SomeType>()` is a way to set the input type this\n * pattern should match on.\n *\n * It returns all utility functions to create patterns,\n * Like `array`, `union`, `intersection`, etc.\n *\n * [Read documentation for `P.typed` on GitHub](https://github.com/gvergnaud/ts-pattern#Ptyped)\n *\n * @example\n *  .with(\n *    P.typed<string | number[]>().array(P.string),\n *    (arrayOfString) => arrayOfString.join(', ')\n *  )\n */\nexport function typed<input>(): {\n  array<p extends Pattern<Elem<input>>>(pattern: p): ArrayP<input, p>;\n\n  optional<p extends Pattern<input>>(pattern: p): OptionalP<input, p>;\n\n  intersection<ps extends [Pattern<input>, ...Pattern<input>[]]>(\n    ...patterns: ps\n  ): AndP<input, ps>;\n\n  union<ps extends [Pattern<input>, ...Pattern<input>[]]>(\n    ...patterns: ps\n  ): OrP<input, ps>;\n\n  not<p extends Pattern<input>>(pattern: p): NotP<input, p>;\n\n  when<narrowed extends input = never>(\n    predicate: GuardFunction<input, narrowed>\n  ): GuardP<input, narrowed>;\n\n  select<pattern extends Pattern<input>>(\n    pattern: pattern\n  ): SelectP<symbols.anonymousSelectKey, input, pattern>;\n  select<p extends Pattern<input>, k extends string>(\n    key: k,\n    pattern: p\n  ): SelectP<k, input, p>;\n} {\n  return {\n    array: array as any,\n    optional: optional as any,\n    intersection: intersection as any,\n    union: union as any,\n    not: not as any,\n    select: select as any,\n    when: when as any,\n  };\n}\n", "import { Pattern } from './types/Pattern';\nimport { GuardValue } from './types/helpers';\nimport { Match, PickReturnValue } from './types/Match';\nimport * as symbols from './internals/symbols';\nimport { matchPattern } from './internals/helpers';\n\n/**\n * `match` creates a **pattern matching expression**.\n *\n * Use `.with(pattern, handler)` to pattern match on the input.\n *\n * Use `.exhaustive()` or `.otherwise(() => defaultValue)` to end the expression and get the result.\n *\n * [Read documentation for `match` on GitHub](https://github.com/gvergnaud/ts-pattern#match)\n *\n * @example\n *  declare let input: \"A\" | \"B\";\n *\n *  return match(input)\n *    .with(\"A\", () => \"It's a A!\")\n *    .with(\"B\", () => \"It's a B!\")\n *    .exhaustive();\n *\n */\nexport function match<input extends [any, ...any], output = symbols.unset>(\n  value: input\n): Match<input, output>;\nexport function match<input, output = symbols.unset>(\n  value: input\n): Match<input, output>;\nexport function match<input, output = symbols.unset>(\n  value: input\n): Match<input, output> {\n  return new MatchExpression(value, []) as any;\n}\n\n/**\n * This class represents a match expression. It follows the\n * builder pattern, we chain methods to add features to the expression\n * until we call `.exhaustive`, `.otherwise` or the unsafe `.run`\n * method to execute it.\n *\n * The types of this class aren't public, the public type definition\n * can be found in src/types/Match.ts.\n */\nclass MatchExpression<i, o> {\n  constructor(\n    private value: i,\n    private cases: {\n      match: (value: i) => { matched: boolean; value: any };\n      handler: (...args: any) => any;\n    }[]\n  ) {}\n\n  with(...args: any[]) {\n    const handler = args[args.length - 1];\n\n    const patterns: Pattern<i>[] = [args[0]];\n    const predicates: ((value: i) => unknown)[] = [];\n\n    // case with guard as second argument\n    if (args.length === 3 && typeof args[1] === 'function') {\n      patterns.push(args[0]);\n      predicates.push(args[1]);\n    } else if (args.length > 2) {\n      // case with several patterns\n      patterns.push(...args.slice(1, args.length - 1));\n    }\n\n    return new MatchExpression(\n      this.value,\n      this.cases.concat([\n        {\n          match: (value: i) => {\n            let selected: Record<string, unknown> = {};\n            const matched = Boolean(\n              patterns.some((pattern) =>\n                matchPattern(pattern, value, (key, value) => {\n                  selected[key] = value;\n                })\n              ) && predicates.every((predicate) => predicate(value as any))\n            );\n            return {\n              matched,\n              value:\n                matched && Object.keys(selected).length\n                  ? symbols.anonymousSelectKey in selected\n                    ? selected[symbols.anonymousSelectKey]\n                    : selected\n                  : value,\n            };\n          },\n          handler,\n        },\n      ])\n    );\n  }\n\n  when<p extends (value: i) => unknown, c>(\n    predicate: p,\n    handler: (value: GuardValue<p>) => PickReturnValue<o, c>\n  ) {\n    return new MatchExpression<i, PickReturnValue<o, c>>(\n      this.value,\n      this.cases.concat([\n        {\n          match: (value) => ({\n            matched: Boolean(predicate(value)),\n            value,\n          }),\n          handler,\n        },\n      ])\n    );\n  }\n\n  otherwise<c>(\n    handler: (value: i) => PickReturnValue<o, c>\n  ): PickReturnValue<o, c> {\n    return new MatchExpression<i, PickReturnValue<o, c>>(\n      this.value,\n      this.cases.concat([\n        {\n          match: (value) => ({\n            matched: true,\n            value,\n          }),\n          handler,\n        },\n      ])\n    ).run();\n  }\n\n  exhaustive() {\n    return this.run();\n  }\n\n  run() {\n    let selected = this.value;\n    let handler: undefined | ((...args: any) => any) = undefined;\n\n    for (let i = 0; i < this.cases.length; i++) {\n      const entry = this.cases[i];\n      const matchResult = entry.match(this.value);\n      if (matchResult.matched) {\n        selected = matchResult.value;\n        handler = entry.handler;\n        break;\n      }\n    }\n    if (!handler) {\n      let displayedValue;\n      try {\n        displayedValue = JSON.stringify(this.value);\n      } catch (e) {\n        displayedValue = this.value;\n      }\n      throw new Error(\n        `Pattern matching error: no pattern matches value ${displayedValue}`\n      );\n    }\n    return handler(selected, this.value);\n  }\n}\n", "import { Pattern } from './types/Pattern';\nimport { MatchedValue } from './types/Match';\nimport * as P from './patterns';\nimport { matchPattern } from './internals/helpers';\n\n/**\n * `isMatching` takes pattern and returns a **type guard** function, cheching if a value matches this pattern.\n *\n * [Read  documentation for `isMatching` on GitHub](https://github.com/gvergnaud/ts-pattern#ismatching)\n *\n * @example\n *  const hasName = isMatching({ name: P.string })\n *\n *  declare let input: unknown\n *\n *  if (hasName(input)) {\n *    // `input` inferred as { name: string }\n *    return input.name\n *  }\n */\nexport function isMatching<p extends Pattern<any>>(\n  pattern: p\n): (value: any) => value is MatchedValue<any, P.infer<p>>;\n/**\n * `isMatching` takes pattern and a value and checks if the value matches this pattern.\n *\n * [Read  documentation for `isMatching` on GitHub](https://github.com/gvergnaud/ts-pattern#ismatching)\n *\n * @example\n *  declare let input: unknown\n *\n *  if (isMatching({ name: P.string }, input)) {\n *    // `input` inferred as { name: string }\n *    return input.name\n *  }\n */\nexport function isMatching<p extends Pattern<any>>(\n  pattern: p,\n  value: any\n): value is MatchedValue<any, P.infer<p>>;\n\nexport function isMatching<p extends Pattern<any>>(\n  ...args: [pattern: p, value?: any]\n): boolean | ((vale: any) => boolean) {\n  if (args.length === 1) {\n    const [pattern] = args;\n    return (value: any): value is MatchedValue<any, P.infer<p>> =>\n      matchPattern(pattern, value, () => {});\n  }\n  if (args.length === 2) {\n    const [pattern, value] = args;\n    return matchPattern(pattern, value, () => {});\n  }\n\n  throw new Error(\n    `isMatching wasn't given the right number of arguments: expected 1 or 2, received ${args.length}.`\n  );\n}\n", "import {\n    ActivityChange,\n    ActivityLogItem,\n    ChangeMapping,\n    defaultDescriber,\n    Description,\n    HumanizedChange,\n    userNameForLogItem,\n} from 'lib/components/ActivityLog/humanizeActivity'\nimport { SentenceList } from 'lib/components/ActivityLog/SentenceList'\nimport PropertyFiltersDisplay from 'lib/components/PropertyFilters/components/PropertyFiltersDisplay'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { isNotNil, isObject, pluralize } from 'lib/utils'\nimport { urls } from 'scenes/urls'\n\nimport { RevenueTrackingEventItem } from '~/queries/schema/schema-general'\nimport { ActivityScope, TeamSurveyConfigType, TeamType } from '~/types'\n\nimport { ThemeName } from './dataThemeLogic'\n\nconst teamActionsMapping: Record<\n    keyof TeamType,\n    (change?: ActivityChange, logItem?: ActivityLogItem) => ChangeMapping | null\n> = {\n    // session replay\n    session_recording_minimum_duration_milliseconds: (change) => {\n        const after = change?.after\n        if (after === undefined || typeof after !== 'number') {\n            return null\n        }\n        let prefix = 'changed'\n        if (change?.action === 'created') {\n            prefix = 'set'\n        }\n        return {\n            description: [\n                <>\n                    {prefix} the minimum session recording duration to {after / 1000} seconds\n                </>,\n            ],\n        }\n    },\n    session_recording_url_trigger_config(change: ActivityChange | undefined): ChangeMapping | null {\n        const before = change?.before\n        const after = change?.after\n        if (before === null && after === null) {\n            return null\n        }\n\n        return {\n            description: [<>Changed session replay URL triggers</>],\n        }\n    },\n    session_recording_url_blocklist_config(change: ActivityChange | undefined): ChangeMapping | null {\n        const before = change?.before\n        const after = change?.after\n        if (before === null && after === null) {\n            return null\n        }\n\n        return {\n            description: [<>Changed session replay URL blocklist</>],\n        }\n    },\n    session_recording_event_trigger_config(change: ActivityChange | undefined): ChangeMapping | null {\n        const before = change?.before\n        const after = change?.after\n        if (before === null && after === null) {\n            return null\n        }\n\n        return {\n            description: [<>Changed session replay event triggers</>],\n        }\n    },\n    capture_console_log_opt_in(change: ActivityChange | undefined): ChangeMapping | null {\n        return { description: [<>{change?.after ? 'enabled' : 'disabled'} console log capture in session replay</>] }\n    },\n    capture_performance_opt_in(change: ActivityChange | undefined): ChangeMapping | null {\n        return {\n            description: [\n                <>{change?.after ? 'enabled' : 'disabled'} console network performance capture in session replay</>,\n            ],\n        }\n    },\n    capture_dead_clicks(change: ActivityChange | undefined): ChangeMapping | null {\n        return {\n            description: [<>{change?.after ? 'enabled' : 'disabled'} dead clicks autocapture</>],\n        }\n    },\n    recording_domains(change: ActivityChange | undefined): ChangeMapping | null {\n        const before: string[] | null = Array.isArray(change?.before) ? change?.before.map(String) ?? null : null\n        const after: string[] | null = Array.isArray(change?.after) ? change?.after.map(String) ?? null : null\n        if (after === null && before === null) {\n            return null\n        }\n\n        const descriptions = []\n\n        const adds: string[] = []\n        if (after) {\n            for (const domain of after) {\n                if ((!before || !before.includes(domain)) && domain.trim().length > 0) {\n                    adds.push(domain)\n                }\n            }\n        }\n        if (adds.length) {\n            descriptions.push(\n                <>\n                    added {adds.join(', ')} to session recording authorised{' '}\n                    {pluralize(adds.length, 'domain', 'domains', false)}\n                </>\n            )\n        }\n\n        const removes: string[] = []\n        if (before) {\n            for (const domain of before) {\n                if ((!after || !after.includes(domain)) && domain.trim().length > 0) {\n                    removes.push(domain)\n                }\n            }\n        }\n\n        if (removes.length) {\n            descriptions.push(\n                <>\n                    removed {removes.join(', ')} from session recording authorised{' '}\n                    {pluralize(removes.length, 'domain', 'domains', false)}\n                </>\n            )\n        }\n        return { description: descriptions }\n    },\n    session_recording_linked_flag(change: ActivityChange | undefined): ChangeMapping | null {\n        const key = (change?.after as any)?.key ?? (change?.before as any)?.key ?? String(change?.after)\n        return {\n            description: [\n                <>\n                    {change?.after ? 'linked' : 'unlinked'} session recording to feature flag {key}\n                </>,\n            ],\n        }\n    },\n    session_recording_network_payload_capture_config(change: ActivityChange | undefined): ChangeMapping | null {\n        const payloadBefore = isObject(change?.before) ? change?.before.recordBody : !!change?.before\n        const payloadAfter = isObject(change?.after) ? change?.after.recordBody : !!change?.after\n        const payloadChanged = payloadBefore !== payloadAfter\n\n        const headersBefore = isObject(change?.before) ? change?.before.recordHeaders : !!change?.before\n        const headersAfter = isObject(change?.after) ? change?.after.recordHeaders : !!change?.after\n        const headersChanged = headersBefore !== headersAfter\n\n        const descriptions = []\n        if (payloadChanged) {\n            descriptions.push(<>{payloadAfter ? 'enabled' : 'disabled'} network body capture in session replay</>)\n        }\n\n        if (headersChanged) {\n            descriptions.push(<>{headersAfter ? 'enabled' : 'disabled'} network headers capture in session replay</>)\n        }\n\n        return descriptions.length\n            ? {\n                  description: descriptions,\n              }\n            : null\n    },\n    session_recording_opt_in(change: ActivityChange | undefined): ChangeMapping | null {\n        return { description: [<>{change?.after ? 'enabled' : 'disabled'} session recording</>] }\n    },\n    session_recording_sample_rate(change: ActivityChange | undefined): ChangeMapping | null {\n        return {\n            description: [\n                <>\n                    {change?.action === 'created' ? 'set' : 'changed'} the session recording sample rate to{' '}\n                    {change?.after}%\n                </>,\n            ],\n        }\n    },\n    survey_config: (change: ActivityChange | undefined): ChangeMapping | null => {\n        const before = change!.before as TeamSurveyConfigType\n        const after = change!.after as TeamSurveyConfigType\n        const descriptions = []\n        const preamble = 'Survey Configuration : '\n        if (before === undefined) {\n            descriptions.push('Survey Configuration was enabled')\n        }\n\n        const propertyChangeDesc = (\n            name: string,\n            callback: (config: TeamSurveyConfigType) => string | undefined\n        ): void => {\n            if (callback(before) !== callback(after)) {\n                descriptions.push(`${preamble} ${name} was changed from \"${callback(before)}\" to \"${callback(after)}\"`)\n            }\n        }\n\n        if (before?.appearance?.whiteLabel !== after?.appearance?.whiteLabel) {\n            descriptions.push(\n                `${preamble} Survey white labeling was ${after?.appearance?.whiteLabel ? 'enabled' : 'disabled'}`\n            )\n        }\n\n        if (before?.appearance?.displayThankYouMessage !== after?.appearance?.displayThankYouMessage) {\n            descriptions.push(\n                `${preamble} displayThankYouMessage was ${after?.appearance?.whiteLabel ? 'enabled' : 'disabled'}`\n            )\n        }\n\n        propertyChangeDesc('backgroundColor', (c) => c?.appearance?.backgroundColor)\n        propertyChangeDesc('submitButtonColor', (c) => c?.appearance?.submitButtonColor)\n        propertyChangeDesc('submitButtonTextColor', (c) => c?.appearance?.submitButtonTextColor)\n        propertyChangeDesc('ratingButtonColor', (c) => c?.appearance?.ratingButtonColor)\n        propertyChangeDesc('ratingButtonActiveColor', (c) => c?.appearance?.ratingButtonActiveColor)\n        propertyChangeDesc('borderColor', (c) => c?.appearance?.borderColor)\n        propertyChangeDesc('placeholder', (c) => c?.appearance?.placeholder)\n        propertyChangeDesc('thankYouMessageHeader', (c) => c?.appearance?.thankYouMessageHeader)\n        propertyChangeDesc('position', (c) => c?.appearance?.position)\n\n        return { description: descriptions }\n    },\n    session_replay_config(change: ActivityChange | undefined): ChangeMapping | null {\n        // TODO we'll eventually need a deeper mapping for this nested object\n        const after = change?.after\n        const recordCanvasAfter =\n            after && typeof after === 'object' && !Array.isArray(after) ? after.record_canvas : null\n\n        if (recordCanvasAfter === null) {\n            return null\n        }\n        return { description: [<>{recordCanvasAfter ? 'enabled' : 'disabled'} canvas recording in session replay</>] }\n    },\n    // autocapture\n    autocapture_exceptions_errors_to_ignore: () => null,\n    autocapture_exceptions_opt_in(change: ActivityChange | undefined): ChangeMapping | null {\n        return { description: [<>{change?.after ? 'enabled' : 'disabled'} exception autocapture</>] }\n    },\n    autocapture_web_vitals_opt_in(change: ActivityChange | undefined): ChangeMapping | null {\n        return { description: [<>{change?.after ? 'enabled' : 'disabled'} web vitals autocapture</>] }\n    },\n    autocapture_web_vitals_allowed_metrics(change: ActivityChange | undefined): ChangeMapping | null {\n        const after = change?.after\n        const metricsList = Array.isArray(after) ? after.join(', ') : 'CLS, FCP, INP, and LCP'\n        return { description: [<>set allowed web vitals autocapture metrics to {metricsList}</>] }\n    },\n    autocapture_opt_out(change: ActivityChange | undefined): ChangeMapping | null {\n        return { description: [<>{change?.after ? 'opted out of' : 'opted in to'} autocapture</>] }\n    },\n    heatmaps_opt_in(change: ActivityChange | undefined): ChangeMapping | null {\n        return { description: [<>{change?.after ? 'enabled' : 'disabled'} heatmaps</>] }\n    },\n    // and.... many more\n    name(change: ActivityChange | undefined): ChangeMapping | null {\n        return {\n            description: [\n                <>\n                    {change?.action === 'created' ? 'set' : 'changed'} the team name to {change?.after}\n                </>,\n            ],\n        }\n    },\n    test_account_filters: (change) => {\n        // change?.after is an array of property filters\n        // change?.before is an array o property filters\n        // so we can say what was removed and what was added\n        const afters = Array.isArray(change?.after) ? change?.after || [] : []\n        const befores = Array.isArray(change?.before) ? change?.before || [] : []\n\n        const addedFilters = afters.filter((filter) => !befores.some((before) => before.key === filter.key))\n\n        const removedFilters = befores.filter((filter) => !afters.some((after) => after.key === filter.key))\n\n        const listParts = []\n        if (addedFilters.length) {\n            listParts.push(\n                <>\n                    added <PropertyFiltersDisplay filters={addedFilters} />\n                </>\n            )\n        }\n        if (removedFilters.length) {\n            listParts.push(\n                <>\n                    removed <PropertyFiltersDisplay filters={removedFilters} />\n                </>\n            )\n        }\n        if (listParts.length === 0) {\n            return null\n        }\n\n        return {\n            description: [\n                <>Updated the \"internal and test\" account filters</>,\n                <SentenceList key={0} listParts={listParts} />,\n            ],\n        }\n    },\n    test_account_filters_default_checked: (change) => {\n        return {\n            description: [\n                <>{change?.after ? 'enabled' : 'disabled'} \"internal & test account filters\" for all insights</>,\n            ],\n        }\n    },\n    extra_settings: (change: ActivityChange | undefined): ChangeMapping | null => {\n        const after = change?.after\n        if (typeof after !== 'object') {\n            return null\n        }\n        const descriptions = []\n        for (const key in after) {\n            if (key === 'poe_v2_enabled') {\n                descriptions.push(\n                    <>{after[key as keyof typeof after] ? 'enabled' : 'disabled'} Person on Events (v2)</>\n                )\n            }\n        }\n        return { description: descriptions }\n    },\n    modifiers: (change: ActivityChange | undefined): ChangeMapping | null => {\n        const after = change?.after\n        if (typeof after !== 'object') {\n            return null\n        }\n        const descriptions = []\n        for (const key in after) {\n            descriptions.push(\n                <>\n                    set <em>{key}</em> to \"{String(after[key as keyof typeof after])}\"\n                </>\n            )\n        }\n        return { description: descriptions }\n    },\n    default_data_theme: (change): ChangeMapping | null => {\n        return {\n            description: [\n                <>\n                    changed the default color theme{' '}\n                    {change?.before && (\n                        <>\n                            from <ThemeName id={change.before as number} />{' '}\n                        </>\n                    )}\n                    to{' '}\n                    <em>\n                        <ThemeName id={change?.after as number} />\n                    </em>\n                </>,\n            ],\n        }\n    },\n    human_friendly_comparison_periods: (change): ChangeMapping | null => {\n        if (!change) {\n            return null\n        }\n\n        return {\n            description: [\n                <>\n                    <strong>{change?.after ? 'enabled' : 'disabled'}</strong> human friendly comparison periods\n                </>,\n            ],\n        }\n    },\n    revenue_tracking_config: (change): ChangeMapping | null => {\n        if (!change) {\n            return null\n        }\n        const beforeEvents: RevenueTrackingEventItem[] =\n            typeof change.before === 'object' && change.before && 'events' in change.before ? change.before.events : []\n        const afterEvents: RevenueTrackingEventItem[] =\n            typeof change.after === 'object' && change.after && 'events' in change.after ? change.after.events : []\n\n        const beforeEventNames = beforeEvents?.map((event) => event?.eventName)\n        const afterEventNames = afterEvents?.map((event) => event?.eventName)\n        const addedEvents = afterEventNames?.filter((event) => !beforeEventNames?.includes(event))\n        const removedEvents = beforeEventNames?.filter((event) => !afterEventNames?.includes(event))\n        const modifiedEvents = afterEventNames?.filter((event) => beforeEventNames?.includes(event))\n\n        const changes = [\n            addedEvents?.length\n                ? `added ${addedEvents.length} ${pluralize(\n                      addedEvents.length,\n                      'event',\n                      'events',\n                      true\n                  )} (${addedEvents.join(', ')})`\n                : null,\n            removedEvents?.length\n                ? `removed ${removedEvents.length} ${pluralize(\n                      removedEvents.length,\n                      'event',\n                      'events',\n                      true\n                  )} (${removedEvents.join(', ')})`\n                : null,\n            modifiedEvents?.length\n                ? `modified ${modifiedEvents.length} ${pluralize(\n                      modifiedEvents.length,\n                      'event',\n                      'events',\n                      true\n                  )} (${modifiedEvents.join(', ')})`\n                : null,\n        ].filter(isNotNil)\n\n        if (!changes.length) {\n            return null\n        }\n\n        return {\n            description: [<>Updated revenue tracking config: {changes.join(', ')}</>],\n        }\n    },\n\n    // TODO if I had to test and describe every single one of this I'd never release this\n    // we can add descriptions here as the need arises\n    access_control: () => null,\n    anonymize_ips: () => null,\n    app_urls: () => null,\n    completed_snippet_onboarding: () => null,\n    correlation_config: () => null,\n    data_attributes: () => null,\n    effective_membership_level: () => null,\n    has_group_types: () => null,\n    ingested_event: () => null,\n    is_demo: () => null,\n    live_events_columns: () => null,\n    organization: () => null,\n    project_id: () => null,\n    path_cleaning_filters: () => null,\n    person_display_name_properties: () => null,\n    person_on_events_querying_enabled: () => null,\n    primary_dashboard: () => null,\n    slack_incoming_webhook: () => null,\n    timezone: () => null,\n    surveys_opt_in: () => null,\n    flags_persistence_default: () => null,\n    week_start_day: () => null,\n    default_modifiers: () => null,\n    has_completed_onboarding_for: () => null,\n    onboarding_tasks: () => null,\n\n    // should never come from the backend\n    created_at: () => null,\n    api_token: () => null,\n    id: () => null,\n    updated_at: () => null,\n    uuid: () => null,\n    user_access_level: () => null,\n    live_events_token: () => null,\n    product_intents: () => null,\n    cookieless_server_hash_mode: () => null,\n    access_control_version: () => null,\n}\n\nfunction nameAndLink(logItem?: ActivityLogItem): JSX.Element {\n    return logItem?.detail?.short_id ? (\n        <Link to={urls.notebook(logItem.detail.short_id)}>{logItem?.detail.name || 'unknown'}</Link>\n    ) : logItem?.detail.name ? (\n        <>{logItem?.detail.name}</>\n    ) : (\n        <i>Untitled</i>\n    )\n}\n\nexport function teamActivityDescriber(logItem: ActivityLogItem, asNotification?: boolean): HumanizedChange {\n    if (logItem.scope !== ActivityScope.TEAM) {\n        console.error('team describer received a non-Team activity')\n        return { description: null }\n    }\n\n    if (logItem.activity == 'changed' || logItem.activity == 'updated') {\n        let changes: Description[] = []\n        let changeSuffix: Description = <>on {nameAndLink(logItem)}</>\n\n        for (const change of logItem.detail.changes || []) {\n            if (!change?.field || !(change.field in teamActionsMapping)) {\n                continue //  not all notebook fields are describable\n            }\n\n            const actionHandler = teamActionsMapping[change.field as keyof TeamType]\n            const processedChange = actionHandler(change, logItem)\n            if (processedChange === null) {\n                continue // // unexpected log from backend is indescribable\n            }\n\n            const { description, suffix } = processedChange\n            if (description) {\n                changes = changes.concat(description)\n            }\n\n            if (suffix) {\n                changeSuffix = suffix\n            }\n        }\n\n        if (changes.length) {\n            return {\n                description: (\n                    <SentenceList\n                        listParts={changes}\n                        prefix={<strong>{userNameForLogItem(logItem)}</strong>}\n                        suffix={changeSuffix}\n                    />\n                ),\n            }\n        }\n    }\n\n    return defaultDescriber(logItem, asNotification, nameAndLink(logItem))\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "PropertyFiltersDisplay", "filters", "item", "PropertyFilterButton", "PropertyFiltersDisplay_default", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "import_kea_router", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "detectBoolean", "candidate", "b", "humanize", "results", "describerFor", "asNotification", "logLines", "logItem", "describer", "description", "extendedDescription", "fullName", "dayjs", "userNameForLogItem", "NO_PLURAL_SCOPES", "humanizeScope", "scope", "singular", "output", "defaultDescriber", "resource", "commentContent", "LemonMarkdown", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "nameOrLinkToCohort", "id", "name", "displayName", "Link", "urls", "cohortActivityDescriber", "logItem", "asNotification", "userNameForLogItem", "defaultDescriber", "init_dirname", "init_buffer", "init_process", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "SentenceList", "listParts", "prefix", "suffix", "part", "index", "all", "isntFirst", "isLast", "atLeastThree", "import_jsx_runtime", "dataManagementActionsMapping", "change", "tagsBefore", "tagsAfter", "addedTags", "t", "removedTags", "changes", "pluralize", "ObjectTags", "logItem", "verified", "detectBoolean", "nameAndLink", "IconVerifiedEvent", "Link", "urls", "DescribeType", "typeDescription", "dataManagementActivityDescriber", "asNotification", "changeSuffix", "actionHandler", "processedChange", "description", "suffix", "SentenceList", "userNameForLogItem", "defaultDescriber", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "nameOrLinkToFlag", "id", "name", "displayName", "Link", "urls", "featureFlagActionsMapping", "change", "logItem", "isActive", "filtersBefore", "filtersAfter", "isBooleanValueFlag", "isMultivariateFlag", "changes", "group", "key", "changedPayload", "SentenceList", "groupAdditions", "groupRemovals", "groupAfter", "index", "groupBefore", "properties", "rollout_percentage", "nonEmptyProperties", "newButtons", "property", "idx", "PropertyFilterButton", "removedGroups", "_", "pluralize", "v", "isDeleted", "detectBoolean", "changeBefore", "changeAfter", "describeChange", "tagsBefore", "tagsAfter", "addedTags", "t", "removedTags", "ObjectTags", "flagActivityDescriber", "asNotification", "userNameForLogItem", "changeSuffix", "possibleLogItem", "description", "suffix", "defaultDescriber", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "notebookActionsMapping", "nameAndLink", "logItem", "Link", "urls", "notebookActivityDescriber", "asNotification", "changes", "changeSuffix", "change", "actionHandler", "processedChange", "description", "suffix", "SentenceList", "userNameForLogItem", "defaultDescriber", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "personActivityDescriber", "logItem", "asNotification", "userNameForLogItem", "SentenceList", "di", "PersonDisplay", "distinctIds", "Link", "urls", "defaultDescriber", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "nameOrLinkToHogFunction", "id", "name", "displayName", "Link", "hogFunctionUrl", "Diff", "before", "after", "language", "we", "_", "monaco", "initHogLanguage", "DiffLink", "children", "LemonDropdown", "hogFunctionActivityDescriber", "logItem", "asNotification", "objectNoun", "userNameForLogItem", "changes", "change", "changedFields", "key", "value", "changedSpans", "index", "inputOrInputs", "code", "functionName", "c", "i", "defaultDescriber", "init_dirname", "init_buffer", "init_process", "init_dirname", "init_buffer", "init_process", "SECRET_FIELD_VALUE", "getConfigSchemaArray", "configSchema", "key", "value", "a", "b", "getConfigSchemaObject", "newSchema", "conf", "order", "defaultConfigForPlugin", "plugin", "config", "field", "getPluginConfigFormData", "rawConfigSchema", "existingConfig", "updatedConfig", "formData", "otherConfig", "doFieldRequirementsMatch", "getFieldValue", "targetFieldName", "targetFieldValue", "formActualValue", "determineInvisibleFields", "fieldsToSetAsInvisible", "determineRequiredFields", "fieldsToSetAsRequired", "isValidChoiceConfig", "fieldConfig", "c", "isValidField", "import_jsx_runtime", "pluginActivityDescriber", "logItem", "asNotification", "userNameForLogItem", "changes", "change", "newValue", "SECRET_FIELD_VALUE", "SentenceList", "startDate", "endDate", "dateFrom", "dateTo", "dayjs", "changeWording", "changeBefore", "changeAfter", "defaultDescriber", "init_dirname", "init_buffer", "init_process", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "CompactPropertyFiltersDisplay", "groupFilter", "embedded", "cohortsById", "cohortsModel", "formatPropertyValueForDisplay", "propertyDefinitionsModel", "subValues", "subType", "subIndex", "React", "leafFilter", "leafIndex", "isFirstFilterWithinSubgroup", "isFirstFilterOverall", "isCohortPropertyFilter", "formatPropertyLabel", "s", "capitalizeFirstLetter", "isAnyPropertyfilter", "PropertyKeyInfo", "PROPERTY_FILTER_TYPE_TO_TAXONOMIC_FILTER_GROUP_TYPE", "allOperatorsMapping", "isPropertyFilterWithOperator", "EntityDisplay", "entity", "isActionsNode", "Link", "urls", "isEventsNode", "SeriesDisplay", "query", "seriesIndex", "mathDefinitions", "mathsLogic", "series", "hasBreakdown", "isInsightQueryWithBreakdown", "isValidBreakdown", "mathDefinition", "isLifecycleQuery", "apiValueToMathType", "LemonRow", "SeriesLetter", "isFunnelsQuery", "PathsSummary", "includeEventTypes", "startPoint", "endPoint", "humanizePathsEventTypes", "RetentionSummary", "aggregationLabel", "SeriesSummary", "heading", "isTrendsQuery", "IconCalculate", "LemonDivider", "isPathsQuery", "isRetentionQuery", "isInsightQueryWithSeries", "_entity", "index", "PropertiesSummary", "properties", "convertPropertiesToPropertyGroup", "BreakdownSummary", "breakdown_type", "breakdown", "breakdowns", "b", "BreakdownTag", "InsightDetails", "footerInfo", "ref", "isInsightVizNode", "ProfilePicture", "TZLabel", "import_jsx_runtime", "nameOrLinkToInsight", "short_id", "name", "displayName", "Link", "urls", "unboxBareLink", "boxedLink", "linkToDashboard", "dashboard", "insightActionsMapping", "change", "logItem", "asNotification", "filtersAfter", "areObjectValuesEmpty", "summarizeChanges", "queryAfter", "isInsightQueryNode", "queryNodeToFilter", "describeChange", "detectBoolean", "_", "isFavoriteAfter", "tagsBefore", "tagsAfter", "addedTags", "t", "removedTags", "changes", "pluralize", "ObjectTags", "dashboardsBefore", "dashboardsAfter", "addedDashboards", "after", "before", "removedDashboards", "addedSentence", "SentenceList", "d", "removedSentence", "query", "filtersToQueryNode", "trendsQuery", "SeriesSummary", "PropertiesSummary", "isValidBreakdown", "BreakdownSummary", "insightActivityDescriber", "userNameForLogItem", "extendedDescription", "changeSuffix", "actionHandler", "processedChange", "description", "_extendedDescription", "suffix", "e", "captureException", "exportFormat", "exportType", "defaultDescriber", "init_dirname", "init_buffer", "init_process", "init_dirname", "init_buffer", "init_process", "matcher", "Symbol", "anonymousSelectKey", "isObject", "value", "Boolean", "isMatcher", "x", "symbols", "matchPattern", "pattern", "select", "_matcher$match", "match", "matched", "selections", "Object", "keys", "forEach", "key", "Array", "isArray", "length", "every", "subPattern", "i", "Map", "from", "get", "Set", "size", "values", "v", "has", "k", "matcherType", "is", "getSelectionKeys", "_pattern$symbols$matc", "_pattern$symbols$matc2", "_pattern$symbols$matc3", "call", "flatMap", "xs", "f", "reduce", "acc", "p", "concat", "optional", "_ref", "selector", "undefined", "array", "_ref2", "intersection", "_ref3", "patterns", "slice", "arguments", "union", "_ref4", "some", "not", "_ref5", "when", "predicate", "_ref6", "_ref7", "args", "_selections", "any", "_", "string", "number", "boolean", "bigint", "symbol", "nullish", "S", "o", "a", "s", "l", "h", "y", "m", "d", "g", "b", "w", "A", "classConstructor", "val", "MatchExpression", "cases", "this", "_proto", "prototype", "handler", "predicates", "push", "apply", "selected", "otherwise", "run", "exhaustive", "entry", "matchResult", "displayedValue", "JSON", "stringify", "e", "Error", "import_jsx_runtime", "isEmptyOrUndefined", "value", "nameOrLinkToSurvey", "id", "name", "activity", "displayName", "Link", "urls", "surveyActionsMapping", "change", "formatDescription", "beforeQuestions", "afterQuestions", "questionChanges", "afterQ", "index", "beforeQ", "describeQuestionChanges", "item", "changes", "changeItem", "changeIndex", "detectBoolean", "beforeAppearance", "afterAppearance", "field", "readableFieldName", "before", "after", "changeDescription", "describeFieldChange", "beforeConditions", "afterConditions", "desc", "beforeFlag", "afterFlag", "surveyActivityDescriber", "logItem", "asNotification", "user", "userNameForLogItem", "surveyLink", "possibleLogItem", "description", "preposition", "getPreposition", "defaultDescriber", "commonChanges", "describeCommonChanges", "typeChangeDescription", "SurveyQuestionLabel", "specificChanges", "K", "describeLinkChanges", "describeRatingChanges", "S", "describeMultipleChoiceChanges", "describeBranchingChanges", "addedChoices", "c", "removedChoices", "truncate", "fieldName", "unit", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "teamActionsMapping", "change", "after", "prefix", "before", "descriptions", "adds", "domain", "pluralize", "removes", "key", "payloadBefore", "isObject", "payloadAfter", "payloadChanged", "headersBefore", "headersAfter", "headersChanged", "preamble", "propertyChangeDesc", "name", "callback", "c", "recordCanvasAfter", "metricsList", "afters", "befores", "addedFilters", "filter", "removedFilters", "listParts", "PropertyFiltersDisplay_default", "SentenceList", "ThemeName", "beforeEvents", "afterEvents", "beforeEventNames", "event", "afterEventNames", "addedEvents", "removedEvents", "modifiedEvents", "changes", "isNotNil", "nameAndLink", "logItem", "Link", "urls", "teamActivityDescriber", "asNotification", "changeSuffix", "actionHandler", "processedChange", "description", "suffix", "userNameForLogItem", "defaultDescriber", "describerFor", "logItem", "flagActivityDescriber", "pluginActivityDescriber", "hogFunctionActivityDescriber", "cohortActivityDescriber", "insightActivityDescriber", "personActivityDescriber", "dataManagementActivityDescriber", "notebookActivityDescriber", "teamActivityDescriber", "surveyActivityDescriber", "logActivity", "asNotification", "defaultDescriber", "activityLogLogic", "scope", "id", "key", "page", "values", "props", "response", "api_default", "_", "actions", "s", "totalCount", "ACTIVITY_PAGE_SIZE", "activity", "humanize", "breakpoint", "onPageChange", "searchParams", "hashParams", "pageScope", "forceUsePageParam", "pageInURL", "firstScope", "shouldRemovePageParam", "newSearchParams", "urls", "import_jsx_runtime", "Empty", "scope", "noun", "ProductIntroduction", "SkeletonLog", "LemonSkeleton", "Loading", "ActivityLogRow", "logItem", "showExtendedDescription", "renderSideAction", "clsx", "ProfilePicture", "TZLabel", "ActivityLog", "id", "caption", "startingPage", "logic", "activityLogLogic", "humanizedActivity", "activityLoading", "pagination", "user", "userLogic", "featureFlags", "featureFlagLogic", "paginationState", "usePagination", "PayGateMini", "FEATURE_FLAGS", "index", "LemonDivider", "PaginationControl"]
}
