{
  "version": 3,
  "sources": ["../src/scenes/data-warehouse/settings/DataWarehouseSourceIcon.tsx", "../src/scenes/data-warehouse/settings/DataWarehouseManagedSourcesTable.tsx"],
  "sourcesContent": ["import { Link } from 'lib/lemon-ui/Link'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport BlushingHog from 'public/hedgehog/blushing-hog.png'\nimport IconAwsS3 from 'public/services/aws-s3.png'\nimport Iconazure from 'public/services/azure.png'\nimport IconBigQuery from 'public/services/bigquery.png'\nimport IconChargebee from 'public/services/chargebee.png'\nimport IconCloudflare from 'public/services/cloudflare.png'\nimport IconGoogleCloudStorage from 'public/services/google-cloud-storage.png'\nimport IconHubspot from 'public/services/hubspot.png'\nimport IconMySQL from 'public/services/mysql.png'\nimport IconPostgres from 'public/services/postgres.png'\nimport IconSalesforce from 'public/services/salesforce.png'\nimport IconSnowflake from 'public/services/snowflake.png'\nimport IconMSSQL from 'public/services/sql-azure.png'\nimport IconStripe from 'public/services/stripe.png'\nimport IconVitally from 'public/services/vitally.png'\nimport IconZendesk from 'public/services/zendesk.png'\nimport { getDataWarehouseSourceUrl } from 'scenes/data-warehouse/settings/DataWarehouseManagedSourcesTable'\n\n/**\n * In some cases we don't have the backend telling us what provider we have for blob storage, so we can have some\n * heuristic to guess, then fallback to a shrugging hedgehog.\n * @param url\n */\nexport function mapUrlToProvider(url: string): string {\n    if (url.includes('.s3.amazonaws.com')) {\n        return 'aws'\n    } else if (url.startsWith('https://storage.googleapis.com')) {\n        return 'google-cloud'\n    } else if (url.includes('.blob.')) {\n        return 'azure'\n    } else if (url.includes('.r2.cloudflarestorage.com')) {\n        return 'cloudflare-r2'\n    }\n    return 'BlushingHog'\n}\n\n/**\n * DataWarehouseSourceIcon component to render an icon\n * @param type\n * @param size\n */\nexport function DataWarehouseSourceIcon({\n    type,\n    size = 'small',\n}: {\n    type: string\n    size?: 'small' | 'medium'\n}): JSX.Element {\n    const sizePx = size === 'small' ? 30 : 60\n\n    const icon = {\n        Stripe: IconStripe,\n        Hubspot: IconHubspot,\n        Zendesk: IconZendesk,\n        Postgres: IconPostgres,\n        MySQL: IconMySQL,\n        Snowflake: IconSnowflake,\n        aws: IconAwsS3,\n        'google-cloud': IconGoogleCloudStorage,\n        'cloudflare-r2': IconCloudflare,\n        azure: Iconazure,\n        Salesforce: IconSalesforce,\n        MSSQL: IconMSSQL,\n        Vitally: IconVitally,\n        BigQuery: IconBigQuery,\n        Chargebee: IconChargebee,\n        BlushingHog: BlushingHog, // fallback, we don't know what this is\n    }[type]\n\n    return (\n        <div className=\"flex items-center gap-4\">\n            <Tooltip\n                title={\n                    <>\n                        {type}\n                        <br />\n                        Click to view docs\n                    </>\n                }\n            >\n                <Link to={getDataWarehouseSourceUrl(type)}>\n                    <img\n                        src={icon}\n                        alt={type}\n                        height={sizePx}\n                        width={sizePx}\n                        className=\"rounded object-contain max-w-none\"\n                    />\n                </Link>\n            </Tooltip>\n        </div>\n    )\n}\n", "import { LemonButton, LemonDialog, LemonTable, LemonTag, Spinner, Tooltip } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { TZLabel } from 'lib/components/TZLabel'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonTableLink } from 'lib/lemon-ui/LemonTable/LemonTableLink'\nimport { DataWarehouseSourceIcon } from 'scenes/data-warehouse/settings/DataWarehouseSourceIcon'\nimport { urls } from 'scenes/urls'\n\nimport { manualLinkSources, PipelineNodeTab, PipelineStage } from '~/types'\n\nimport { SOURCE_DETAILS } from '../new/sourceWizardLogic'\nimport { dataWarehouseSettingsLogic } from './dataWarehouseSettingsLogic'\n\nexport const StatusTagSetting: Record<string, 'primary' | 'success' | 'danger'> = {\n    Running: 'primary',\n    Completed: 'success',\n    Error: 'danger',\n    Failed: 'danger',\n    'Billing limits': 'danger',\n}\n\nexport function DataWarehouseManagedSourcesTable(): JSX.Element {\n    const { dataWarehouseSources, dataWarehouseSourcesLoading, sourceReloadingById } =\n        useValues(dataWarehouseSettingsLogic)\n    const { deleteSource, reloadSource } = useActions(dataWarehouseSettingsLogic)\n\n    return (\n        <LemonTable\n            dataSource={dataWarehouseSources?.results ?? []}\n            loading={dataWarehouseSourcesLoading}\n            disableTableWhileLoading={false}\n            pagination={{ pageSize: 10 }}\n            columns={[\n                {\n                    width: 0,\n                    render: (_, source) => <DataWarehouseSourceIcon type={source.source_type} />,\n                },\n                {\n                    title: 'Source',\n                    key: 'name',\n                    render: (_, source) => (\n                        <LemonTableLink\n                            to={urls.pipelineNode(\n                                PipelineStage.Source,\n                                `managed-${source.id}`,\n                                PipelineNodeTab.Schemas\n                            )}\n                            title={SOURCE_DETAILS[source.source_type]?.label ?? source.source_type}\n                            description={source.prefix}\n                        />\n                    ),\n                },\n                {\n                    title: 'Last Successful Run',\n                    key: 'last_run_at',\n                    tooltip: 'Time of the last run that completed a data import',\n                    render: (_, run) => {\n                        return run.last_run_at ? (\n                            <TZLabel time={run.last_run_at} formatDate=\"MMM\u00A0DD,\u00A0YYYY\" formatTime=\"HH:mm\" />\n                        ) : (\n                            'Never'\n                        )\n                    },\n                },\n                {\n                    title: 'Total Rows Synced',\n                    key: 'rows_synced',\n                    tooltip: 'Total number of rows synced across all schemas in this source',\n                    render: (_, source) =>\n                        source.schemas\n                            .reduce((acc, schema) => acc + (schema.table?.row_count ?? 0), 0)\n                            .toLocaleString(),\n                },\n                {\n                    title: 'Status',\n                    key: 'status',\n                    render: (_, source) => {\n                        if (!source.status) {\n                            return null\n                        }\n                        const tagContent = (\n                            <LemonTag type={StatusTagSetting[source.status] || 'default'}>{source.status}</LemonTag>\n                        )\n                        return source.latest_error && source.status === 'Error' ? (\n                            <Tooltip title={source.latest_error}>{tagContent}</Tooltip>\n                        ) : (\n                            tagContent\n                        )\n                    },\n                },\n                {\n                    key: 'actions',\n                    width: 0,\n                    render: (_, source) => (\n                        <div className=\"flex flex-row justify-end\">\n                            {sourceReloadingById[source.id] ? (\n                                <div>\n                                    <Spinner />\n                                </div>\n                            ) : (\n                                <div>\n                                    <More\n                                        overlay={\n                                            <>\n                                                <Tooltip title=\"Start the data import for this schema again\">\n                                                    <LemonButton\n                                                        type=\"tertiary\"\n                                                        data-attr={`reload-data-warehouse-${source.source_type}`}\n                                                        key={`reload-data-warehouse-${source.source_type}`}\n                                                        onClick={() => {\n                                                            reloadSource(source)\n                                                        }}\n                                                    >\n                                                        Reload\n                                                    </LemonButton>\n                                                </Tooltip>\n\n                                                <LemonButton\n                                                    status=\"danger\"\n                                                    data-attr={`delete-data-warehouse-${source.source_type}`}\n                                                    key={`delete-data-warehouse-${source.source_type}`}\n                                                    onClick={() => {\n                                                        LemonDialog.open({\n                                                            title: 'Delete data source?',\n                                                            description:\n                                                                'Are you sure you want to delete this data source? All related tables will be deleted.',\n\n                                                            primaryButton: {\n                                                                children: 'Delete',\n                                                                status: 'danger',\n                                                                onClick: () => deleteSource(source),\n                                                            },\n                                                            secondaryButton: {\n                                                                children: 'Cancel',\n                                                            },\n                                                        })\n                                                    }}\n                                                >\n                                                    Delete\n                                                </LemonButton>\n                                            </>\n                                        }\n                                    />\n                                </div>\n                            )}\n                        </div>\n                    ),\n                },\n            ]}\n        />\n    )\n}\n\nexport function getDataWarehouseSourceUrl(service: string): string {\n    if (manualLinkSources.includes(service)) {\n        return 'https://posthog.com/docs/data-warehouse/setup#step-1-creating-a-bucket-in-s3'\n    }\n\n    return `https://posthog.com/docs/data-warehouse/setup#${service.toLowerCase()}`\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "StatusTagSetting", "DataWarehouseManagedSourcesTable", "dataWarehouseSources", "dataWarehouseSourcesLoading", "sourceReloadingById", "dataWarehouseSettingsLogic", "deleteSource", "reloadSource", "LemonTable", "_", "source", "DataWarehouseSourceIcon", "LemonTableLink", "urls", "SOURCE_DETAILS", "run", "TZLabel", "acc", "schema", "tagContent", "LemonTag", "Tooltip", "Spinner", "More", "LemonButton", "LemonDialog", "getDataWarehouseSourceUrl", "service", "manualLinkSources", "import_jsx_runtime", "mapUrlToProvider", "url", "DataWarehouseSourceIcon", "type", "size", "sizePx", "icon", "stripe_default", "hubspot_default", "zendesk_default", "postgres_default", "mysql_default", "snowflake_default", "aws_s3_default", "google_cloud_storage_default", "cloudflare_default", "azure_default", "salesforce_default", "sql_azure_default", "vitally_default", "bigquery_default", "chargebee_default", "blushing_hog_default", "Tooltip", "Link", "getDataWarehouseSourceUrl"]
}
