{
  "version": 3,
  "sources": ["../src/lib/components/MemberSelect.tsx"],
  "sourcesContent": ["import {\n    LemonButton,\n    LemonButtonProps,\n    LemonDropdown,\n    LemonDropdownProps,\n    LemonInput,\n    ProfilePicture,\n} from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { fullName } from 'lib/utils'\nimport { useEffect, useMemo, useState } from 'react'\nimport { membersLogic } from 'scenes/organization/membersLogic'\n\nimport { UserBasicType } from '~/types'\n\nexport type MemberSelectProps = {\n    defaultLabel?: string\n    allowNone?: boolean\n    // NOTE: Trying to cover a lot of different cases - if string we assume uuid, if number we assume id\n    value: string | number | null\n    excludedMembers?: (string | number)[]\n    onChange: (value: UserBasicType | null) => void\n    children?: (selectedUser: UserBasicType | null) => LemonDropdownProps['children']\n}\n\nexport function MemberSelect({\n    defaultLabel = 'Any user',\n    allowNone = true,\n    value,\n    excludedMembers = [],\n    onChange,\n    children,\n    ...buttonProps\n}: MemberSelectProps & Pick<LemonButtonProps, 'type' | 'size'>): JSX.Element {\n    const { meFirstMembers, filteredMembers, search, membersLoading } = useValues(membersLogic)\n    const { ensureAllMembersLoaded, setSearch } = useActions(membersLogic)\n    const [showPopover, setShowPopover] = useState(false)\n\n    const propToCompare = typeof value === 'string' ? 'uuid' : 'id'\n\n    const selectedMemberAsUser = useMemo(() => {\n        if (!value) {\n            return null\n        }\n        return meFirstMembers.find((member) => member.user[propToCompare] === value)?.user ?? null\n    }, [value, meFirstMembers, propToCompare])\n\n    const _onChange = (value: UserBasicType | null): void => {\n        setShowPopover(false)\n        onChange(value)\n    }\n\n    useEffect(() => {\n        if (showPopover) {\n            ensureAllMembersLoaded()\n        }\n    }, [showPopover])\n\n    const selectableMembers = filteredMembers.filter((m) => !excludedMembers.includes(m.user[propToCompare]))\n\n    return (\n        <LemonDropdown\n            closeOnClickInside={false}\n            visible={showPopover}\n            matchWidth={false}\n            actionable\n            onVisibilityChange={(visible) => setShowPopover(visible)}\n            overlay={\n                <div className=\"max-w-100 space-y-2 overflow-hidden\">\n                    <LemonInput\n                        type=\"search\"\n                        placeholder=\"Search\"\n                        autoFocus\n                        value={search}\n                        onChange={setSearch}\n                        fullWidth\n                    />\n                    <ul className=\"space-y-px\">\n                        {allowNone && (\n                            <li>\n                                <LemonButton fullWidth role=\"menuitem\" size=\"small\" onClick={() => _onChange(null)}>\n                                    {defaultLabel}\n                                </LemonButton>\n                            </li>\n                        )}\n\n                        {selectableMembers.map((member) => (\n                            <li key={member.user.uuid}>\n                                <LemonButton\n                                    fullWidth\n                                    role=\"menuitem\"\n                                    size=\"small\"\n                                    icon={<ProfilePicture size=\"md\" user={member.user} />}\n                                    onClick={() => _onChange(member.user)}\n                                >\n                                    <span className=\"flex items-center justify-between gap-2 flex-1\">\n                                        <span>{fullName(member.user)}</span>\n                                        <span className=\"text-secondary\">\n                                            {meFirstMembers[0] === member && `(you)`}\n                                        </span>\n                                    </span>\n                                </LemonButton>\n                            </li>\n                        ))}\n\n                        {membersLoading ? (\n                            <div className=\"p-2 text-secondary italic truncate border-t\">Loading...</div>\n                        ) : selectableMembers.length === 0 ? (\n                            <div className=\"p-2 text-secondary italic truncate border-t\">\n                                {search ? <span>No matches</span> : <span>No users</span>}\n                            </div>\n                        ) : null}\n                    </ul>\n                </div>\n            }\n        >\n            {children ? (\n                children(selectedMemberAsUser)\n            ) : (\n                <LemonButton size=\"small\" type=\"secondary\" {...buttonProps}>\n                    {selectedMemberAsUser ? (\n                        <span>\n                            {fullName(selectedMemberAsUser)}\n                            {meFirstMembers[0].user.uuid === selectedMemberAsUser.uuid ? ` (you)` : ''}\n                        </span>\n                    ) : (\n                        defaultLabel\n                    )}\n                </LemonButton>\n            )}\n        </LemonDropdown>\n    )\n}\n"],
  "mappings": "sNAAAA,IAAAC,IAAAC,IAQA,IAAAC,EAAsC,OAEtC,IAAAC,EAA6C,OA2DzB,IAAAC,EAAA,OA5Cb,SAASC,EAAa,CACzB,aAAAC,EAAe,WACf,UAAAC,EAAY,GACZ,MAAAC,EACA,gBAAAC,EAAkB,CAAC,EACnB,SAAAC,EACA,SAAAC,EACA,GAAGC,CACP,EAA6E,CACzE,GAAM,CAAE,eAAAC,EAAgB,gBAAAC,EAAiB,OAAAC,EAAQ,eAAAC,CAAe,KAAI,aAAUC,CAAY,EACpF,CAAE,uBAAAC,EAAwB,UAAAC,CAAU,KAAI,cAAWF,CAAY,EAC/D,CAACG,EAAaC,CAAc,KAAI,YAAS,EAAK,EAE9CC,EAAgB,OAAOd,GAAU,SAAW,OAAS,KAErDe,KAAuB,WAAQ,IAC5Bf,EAGEK,EAAe,KAAMW,GAAWA,EAAO,KAAKF,CAAa,IAAMd,CAAK,GAAG,MAAQ,KAF3E,KAGZ,CAACA,EAAOK,EAAgBS,CAAa,CAAC,EAEnCG,EAAajB,GAAsC,CACrDa,EAAe,EAAK,EACpBX,EAASF,CAAK,CAClB,KAEA,aAAU,IAAM,CACRY,GACAF,EAAuB,CAE/B,EAAG,CAACE,CAAW,CAAC,EAEhB,IAAMM,EAAoBZ,EAAgB,OAAQa,GAAM,CAAClB,EAAgB,SAASkB,EAAE,KAAKL,CAAa,CAAC,CAAC,EAExG,SACI,OAACM,EAAA,CACG,mBAAoB,GACpB,QAASR,EACT,WAAY,GACZ,WAAU,GACV,mBAAqBS,GAAYR,EAAeQ,CAAO,EACvD,WACI,QAAC,OAAI,UAAU,sCACX,oBAACC,EAAA,CACG,KAAK,SACL,YAAY,SACZ,UAAS,GACT,MAAOf,EACP,SAAUI,EACV,UAAS,GACb,KACA,QAAC,MAAG,UAAU,aACT,UAAAZ,MACG,OAAC,MACG,mBAACwB,EAAA,CAAY,UAAS,GAAC,KAAK,WAAW,KAAK,QAAQ,QAAS,IAAMN,EAAU,IAAI,EAC5E,SAAAnB,EACL,EACJ,EAGHoB,EAAkB,IAAKF,MACpB,OAAC,MACG,mBAACO,EAAA,CACG,UAAS,GACT,KAAK,WACL,KAAK,QACL,QAAM,OAACC,EAAA,CAAe,KAAK,KAAK,KAAMR,EAAO,KAAM,EACnD,QAAS,IAAMC,EAAUD,EAAO,IAAI,EAEpC,oBAAC,QAAK,UAAU,iDACZ,oBAAC,QAAM,SAAAS,EAAST,EAAO,IAAI,EAAE,KAC7B,OAAC,QAAK,UAAU,iBACX,SAAAX,EAAe,CAAC,IAAMW,GAAU,QACrC,GACJ,EACJ,GAdKA,EAAO,KAAK,IAerB,CACH,EAEAR,KACG,OAAC,OAAI,UAAU,8CAA8C,sBAAU,EACvEU,EAAkB,SAAW,KAC7B,OAAC,OAAI,UAAU,8CACV,SAAAX,KAAS,OAAC,QAAK,sBAAU,KAAU,OAAC,QAAK,oBAAQ,EACtD,EACA,MACR,GACJ,EAGH,SAAAJ,EACGA,EAASY,CAAoB,KAE7B,OAACQ,EAAA,CAAY,KAAK,QAAQ,KAAK,YAAa,GAAGnB,EAC1C,SAAAW,KACG,QAAC,QACI,UAAAU,EAASV,CAAoB,EAC7BV,EAAe,CAAC,EAAE,KAAK,OAASU,EAAqB,KAAO,SAAW,IAC5E,EAEAjB,EAER,EAER,CAER",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "MemberSelect", "defaultLabel", "allowNone", "value", "excludedMembers", "onChange", "children", "buttonProps", "meFirstMembers", "filteredMembers", "search", "membersLoading", "membersLogic", "ensureAllMembersLoaded", "setSearch", "showPopover", "setShowPopover", "propToCompare", "selectedMemberAsUser", "member", "_onChange", "selectableMembers", "m", "LemonDropdown", "visible", "LemonInput", "LemonButton", "ProfilePicture", "fullName"]
}
