{
  "version": 3,
  "sources": ["../src/scenes/surveys/SurveyCustomization.tsx"],
  "sourcesContent": ["import { LemonButton, LemonCheckbox, LemonDialog, LemonInput, LemonSelect } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { useValues } from 'kea'\nimport { DeepPartialMap, ValidationErrorType } from 'kea-forms'\nimport { PayGateMini } from 'lib/components/PayGateMini/PayGateMini'\nimport { upgradeModalLogic } from 'lib/components/UpgradeModal/upgradeModalLogic'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\n\nimport { AvailableFeature, SurveyAppearance, SurveyAppearance as SurveyAppearanceType } from '~/types'\n\nimport { defaultSurveyAppearance, WEB_SAFE_FONTS } from './constants'\nimport { surveysLogic } from './surveysLogic'\n\nconst IGNORE_ERROR_BORDER_CLASS = 'ignore-error-border'\n\ninterface CustomizationProps {\n    appearance: SurveyAppearanceType\n    customizeRatingButtons: boolean\n    customizePlaceholderText: boolean\n    hasBranchingLogic: boolean\n    deleteBranchingLogic?: () => void\n    onAppearanceChange: (appearance: SurveyAppearanceType) => void\n    isCustomFontsEnabled?: boolean\n    validationErrors?: DeepPartialMap<SurveyAppearance, ValidationErrorType> | null\n}\n\ninterface WidgetCustomizationProps extends Omit<CustomizationProps, 'surveyQuestionItem'> {}\n\nexport function Customization({\n    appearance,\n    customizeRatingButtons,\n    customizePlaceholderText,\n    hasBranchingLogic,\n    onAppearanceChange,\n    deleteBranchingLogic,\n    isCustomFontsEnabled = false,\n    validationErrors,\n}: CustomizationProps): JSX.Element {\n    const { surveysStylingAvailable } = useValues(surveysLogic)\n    const surveyShufflingQuestionsAvailable = true\n    const surveyShufflingQuestionsDisabledReason = surveyShufflingQuestionsAvailable\n        ? ''\n        : 'Please add more than one question to the survey to enable shuffling questions'\n    const { guardAvailableFeature } = useValues(upgradeModalLogic)\n\n    return (\n        <>\n            <div className=\"flex flex-col font-semibold\">\n                {!surveysStylingAvailable && (\n                    <PayGateMini feature={AvailableFeature.SURVEYS_STYLING}>\n                        <></>\n                    </PayGateMini>\n                )}\n                <LemonField.Pure className=\"mt-2\" label=\"Background color\">\n                    <LemonInput\n                        value={appearance?.backgroundColor}\n                        onChange={(backgroundColor) => onAppearanceChange({ ...appearance, backgroundColor })}\n                        disabled={!surveysStylingAvailable}\n                        className={clsx(\n                            validationErrors?.backgroundColor ? 'border-danger' : IGNORE_ERROR_BORDER_CLASS\n                        )}\n                    />\n                    {validationErrors?.backgroundColor && (\n                        <LemonField.Error error={validationErrors?.backgroundColor} />\n                    )}\n                </LemonField.Pure>\n                <LemonField.Pure className=\"mt-2\" label=\"Border color\">\n                    <LemonInput\n                        value={appearance?.borderColor || defaultSurveyAppearance.borderColor}\n                        onChange={(borderColor) => onAppearanceChange({ ...appearance, borderColor })}\n                        disabled={!surveysStylingAvailable}\n                        className={clsx(validationErrors?.borderColor ? 'border-danger' : IGNORE_ERROR_BORDER_CLASS)}\n                    />\n                    {validationErrors?.borderColor && <LemonField.Error error={validationErrors?.borderColor} />}\n                </LemonField.Pure>\n                <>\n                    <LemonField.Pure className=\"mt-2\" label=\"Position\">\n                        <div className=\"flex gap-1\">\n                            {['left', 'center', 'right'].map((position) => {\n                                return (\n                                    <LemonButton\n                                        key={position}\n                                        type=\"tertiary\"\n                                        onClick={() => onAppearanceChange({ ...appearance, position })}\n                                        active={appearance.position === position}\n                                        disabledReason={\n                                            surveysStylingAvailable\n                                                ? null\n                                                : 'Upgrade your plan to customize survey position.'\n                                        }\n                                    >\n                                        {position}\n                                    </LemonButton>\n                                )\n                            })}\n                        </div>\n                    </LemonField.Pure>\n                </>\n                {customizeRatingButtons && (\n                    <>\n                        <LemonField.Pure className=\"mt-2\" label=\"Rating button color\">\n                            <LemonInput\n                                value={appearance?.ratingButtonColor}\n                                onChange={(ratingButtonColor) =>\n                                    onAppearanceChange({ ...appearance, ratingButtonColor })\n                                }\n                                disabled={!surveysStylingAvailable}\n                                className={clsx(\n                                    validationErrors?.ratingButtonColor ? 'border-danger' : IGNORE_ERROR_BORDER_CLASS\n                                )}\n                            />\n                            {validationErrors?.ratingButtonColor && (\n                                <LemonField.Error error={validationErrors?.ratingButtonColor} />\n                            )}\n                        </LemonField.Pure>\n                        <LemonField.Pure className=\"mt-2\" label=\"Rating button active color\">\n                            <LemonInput\n                                value={appearance?.ratingButtonActiveColor}\n                                onChange={(ratingButtonActiveColor) =>\n                                    onAppearanceChange({ ...appearance, ratingButtonActiveColor })\n                                }\n                                disabled={!surveysStylingAvailable}\n                                className={clsx(\n                                    validationErrors?.ratingButtonActiveColor\n                                        ? 'border-danger'\n                                        : IGNORE_ERROR_BORDER_CLASS\n                                )}\n                            />\n                            {validationErrors?.ratingButtonActiveColor && (\n                                <LemonField.Error error={validationErrors?.ratingButtonActiveColor} />\n                            )}\n                        </LemonField.Pure>\n                    </>\n                )}\n                <LemonField.Pure className=\"mt-2\" label=\"Button color\">\n                    <LemonInput\n                        value={appearance?.submitButtonColor}\n                        onChange={(submitButtonColor) => onAppearanceChange({ ...appearance, submitButtonColor })}\n                        disabled={!surveysStylingAvailable}\n                        className={clsx(\n                            validationErrors?.submitButtonColor ? 'border-danger' : IGNORE_ERROR_BORDER_CLASS\n                        )}\n                    />\n                    {validationErrors?.submitButtonColor && (\n                        <LemonField.Error error={validationErrors?.submitButtonColor} />\n                    )}\n                </LemonField.Pure>\n\n                <LemonField.Pure className=\"mt-2\" label=\"Button text color\">\n                    <LemonInput\n                        value={appearance?.submitButtonTextColor}\n                        onChange={(submitButtonTextColor) =>\n                            onAppearanceChange({ ...appearance, submitButtonTextColor })\n                        }\n                        disabled={!surveysStylingAvailable}\n                        className={clsx(\n                            validationErrors?.submitButtonTextColor ? 'border-danger' : IGNORE_ERROR_BORDER_CLASS\n                        )}\n                    />\n                    {validationErrors?.submitButtonTextColor && (\n                        <LemonField.Error error={validationErrors?.submitButtonTextColor} />\n                    )}\n                </LemonField.Pure>\n\n                <LemonField.Pure\n                    className=\"mt-2\"\n                    label=\"Survey form zIndex\"\n                    info=\"If the survey popup is hidden behind another overlapping UI element, set this value higher than the overlapping element's zIndex.\"\n                >\n                    <LemonInput\n                        type=\"text\"\n                        value={appearance?.zIndex}\n                        onChange={(zIndex) => onAppearanceChange({ ...appearance, zIndex })}\n                        disabled={!surveysStylingAvailable}\n                        placeholder=\"99999\"\n                        defaultValue=\"99999\"\n                        className=\"ignore-error-border\"\n                    />\n                </LemonField.Pure>\n                {customizePlaceholderText && (\n                    <LemonField.Pure className=\"mt-2\" label=\"Placeholder text\">\n                        <LemonInput\n                            value={\n                                appearance?.placeholder !== undefined\n                                    ? appearance.placeholder\n                                    : defaultSurveyAppearance.placeholder\n                            }\n                            onChange={(placeholder) => onAppearanceChange({ ...appearance, placeholder })}\n                            disabled={!surveysStylingAvailable}\n                            className=\"ignore-error-border\"\n                        />\n                    </LemonField.Pure>\n                )}\n                {isCustomFontsEnabled && (\n                    <LemonField.Pure className=\"mt-2\" label=\"Font family\">\n                        <LemonSelect\n                            value={appearance?.fontFamily}\n                            onChange={(fontFamily) => onAppearanceChange({ ...appearance, fontFamily })}\n                            options={WEB_SAFE_FONTS.map((font) => {\n                                return {\n                                    label: (\n                                        <span className={font.toLowerCase().replace(/\\s/g, '-')}>\n                                            {font} {font === 'system-ui' ? '(default)' : ''}\n                                        </span>\n                                    ),\n                                    value: font,\n                                }\n                            })}\n                            className=\"ignore-error-border\"\n                        />\n                    </LemonField.Pure>\n                )}\n                <div className=\"mt-4\">\n                    <LemonCheckbox\n                        label={\n                            <div className=\"flex items-center\">\n                                <span>Hide PostHog branding</span>\n                            </div>\n                        }\n                        onChange={(checked) =>\n                            guardAvailableFeature(AvailableFeature.WHITE_LABELLING, () =>\n                                onAppearanceChange({ ...appearance, whiteLabel: checked })\n                            )\n                        }\n                        checked={appearance?.whiteLabel}\n                    />\n                </div>\n                <div className=\"mt-2\">\n                    <LemonCheckbox\n                        disabledReason={surveyShufflingQuestionsDisabledReason}\n                        label={\n                            <div className=\"flex items-center\">\n                                <span>Shuffle questions</span>\n                            </div>\n                        }\n                        onChange={(checked) => {\n                            if (checked && hasBranchingLogic) {\n                                onAppearanceChange({ ...appearance, shuffleQuestions: false })\n\n                                LemonDialog.open({\n                                    title: 'Your survey has active branching logic',\n                                    description: (\n                                        <p className=\"py-2\">\n                                            Enabling this option will remove your branching logic. Are you sure you want\n                                            to continue?\n                                        </p>\n                                    ),\n                                    primaryButton: {\n                                        children: 'Continue',\n                                        status: 'danger',\n                                        onClick: () => {\n                                            if (deleteBranchingLogic) {\n                                                deleteBranchingLogic()\n                                            }\n                                            onAppearanceChange({ ...appearance, shuffleQuestions: true })\n                                        },\n                                    },\n                                    secondaryButton: {\n                                        children: 'Cancel',\n                                    },\n                                })\n                            } else {\n                                onAppearanceChange({ ...appearance, shuffleQuestions: checked })\n                            }\n                        }}\n                        checked={appearance?.shuffleQuestions}\n                    />\n                </div>\n                <div className=\"mt-1\">\n                    <LemonField.Pure>\n                        <div className=\"flex flex-row gap-2 items-center font-medium\">\n                            <LemonCheckbox\n                                checked={!!appearance?.surveyPopupDelaySeconds}\n                                onChange={(checked) => {\n                                    const surveyPopupDelaySeconds = checked ? 5 : undefined\n                                    onAppearanceChange({ ...appearance, surveyPopupDelaySeconds })\n                                }}\n                            />\n                            Delay survey popup after page load by at least{' '}\n                            <LemonInput\n                                type=\"number\"\n                                data-attr=\"survey-popup-delay-input\"\n                                size=\"small\"\n                                min={1}\n                                max={3600}\n                                value={appearance?.surveyPopupDelaySeconds || NaN}\n                                onChange={(newValue) => {\n                                    if (newValue && newValue > 0) {\n                                        onAppearanceChange({ ...appearance, surveyPopupDelaySeconds: newValue })\n                                    } else {\n                                        onAppearanceChange({\n                                            ...appearance,\n                                            surveyPopupDelaySeconds: undefined,\n                                        })\n                                    }\n                                }}\n                                className=\"w-12 ignore-error-border\"\n                            />{' '}\n                            seconds.\n                        </div>\n                    </LemonField.Pure>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport function WidgetCustomization({ appearance, onAppearanceChange }: WidgetCustomizationProps): JSX.Element {\n    return (\n        <>\n            <div className=\"mt-2\">Feedback button type</div>\n            <LemonSelect\n                value={appearance.widgetType}\n                onChange={(widgetType) => onAppearanceChange({ ...appearance, widgetType })}\n                options={[\n                    { label: 'Embedded tab', value: 'tab' },\n                    { label: 'Custom', value: 'selector' },\n                ]}\n            />\n            {appearance.widgetType === 'selector' ? (\n                <>\n                    <div className=\"mt-2\">Class or ID selector</div>\n                    <LemonInput\n                        value={appearance.widgetSelector}\n                        onChange={(widgetSelector) => onAppearanceChange({ ...appearance, widgetSelector })}\n                        placeholder=\"ex: .feedback-button, #feedback-button\"\n                    />\n                </>\n            ) : (\n                <>\n                    <div className=\"mt-2\">Label</div>\n                    <LemonInput\n                        value={appearance.widgetLabel}\n                        onChange={(widgetLabel) => onAppearanceChange({ ...appearance, widgetLabel })}\n                    />\n                    <div className=\"mt-2\">Background color</div>\n                    <LemonInput\n                        value={appearance.widgetColor}\n                        onChange={(widgetColor) => onAppearanceChange({ ...appearance, widgetColor })}\n                        placeholder=\"#e0a045\"\n                    />\n                </>\n            )}\n        </>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_jsx_runtime", "IGNORE_ERROR_BORDER_CLASS", "Customization", "appearance", "customizeRatingButtons", "customizePlaceholderText", "hasBranchingLogic", "onAppearanceChange", "deleteBranchingLogic", "isCustomFontsEnabled", "validationErrors", "surveysStylingAvailable", "surveysLogic", "surveyShufflingQuestionsDisabledReason", "guardAvailableFeature", "upgradeModalLogic", "PayGateMini", "LemonField", "LemonInput", "backgroundColor", "clsx", "defaultSurveyAppearance", "borderColor", "position", "LemonButton", "ratingButtonColor", "ratingButtonActiveColor", "submitButtonColor", "submitButtonTextColor", "zIndex", "placeholder", "LemonSelect", "fontFamily", "WEB_SAFE_FONTS", "font", "LemonCheckbox", "checked", "LemonDialog", "newValue", "WidgetCustomization", "widgetType", "widgetSelector", "widgetLabel", "widgetColor"]
}
