{
  "version": 3,
  "sources": ["../src/scenes/debug/hog/HogRepl.tsx", "../src/scenes/debug/hog/hogReplLogic.ts"],
  "sourcesContent": ["import { printHogStringOutput } from '@posthog/hogvm'\nimport { LemonButton, LemonTable, LemonTabs } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { JSONViewer } from 'lib/components/JSONViewer'\nimport { CodeEditorInline } from 'lib/monaco/CodeEditorInline'\nimport React, { useState } from 'react'\nimport { SceneExport } from 'scenes/sceneTypes'\n\nimport { renderHogQLX } from '~/queries/nodes/HogQLX/render'\n\nimport { hogReplLogic, ReplChunk as ReplChunkType } from './hogReplLogic'\n\nexport interface ReplResultsTableProps {\n    response: {\n        results: any[][]\n        columns: string[]\n    }\n}\n\nexport function ReplResultsTable({ response }: ReplResultsTableProps): JSX.Element {\n    const [activeTab, setActiveTab] = useState<'table' | 'json'>('table')\n    return (\n        <div>\n            <LemonTabs\n                activeKey={activeTab}\n                onChange={setActiveTab as any}\n                tabs={[\n                    {\n                        key: 'table',\n                        label: 'Table',\n                        content: (\n                            <LemonTable\n                                columns={response.columns.map((col, index) => ({ dataIndex: index, title: col }))}\n                                dataSource={response.results}\n                            />\n                        ),\n                    },\n                    {\n                        key: 'json',\n                        label: 'JSON',\n                        content: <JSONViewer name={false} src={response} />,\n                    },\n                    {\n                        key: 'raw',\n                        label: 'Raw',\n                        content: <div>{printHogStringOutput(response)}</div>,\n                    },\n                ]}\n            />\n        </div>\n    )\n}\n\nfunction printRichHogOutput(arg: any): JSX.Element | string {\n    if (typeof arg === 'object' && arg !== null) {\n        if ('__hx_tag' in arg) {\n            return renderHogQLX(arg)\n        }\n        if ('results' in arg && 'columns' in arg && Array.isArray(arg.results) && Array.isArray(arg.columns)) {\n            return <ReplResultsTable response={arg} />\n        }\n    }\n    return printHogStringOutput(arg)\n}\n\ninterface ReplChunkProps {\n    chunk: ReplChunkType\n    editFromHere: () => void\n}\n\nexport function ReplChunk({\n    chunk: { code, result, print, error, status },\n    editFromHere,\n}: ReplChunkProps): JSX.Element {\n    return (\n        <div className=\"pb-2 border-b border-gray-300\">\n            <LemonButton size=\"small\" type=\"secondary\" className=\"float-right\" onClick={editFromHere}>\n                \uD83D\uDCDD\n            </LemonButton>\n            <div className=\"flex items-start\">\n                <span\n                    // eslint-disable-next-line react/forbid-dom-props\n                    style={{ color: 'blue' }}\n                >\n                    {'>'}\n                </span>\n                <div className=\"flex-1 whitespace-pre-wrap ml-2\">{code}</div>\n            </div>\n            {status === 'pending' && (\n                <div className=\"flex items-center ml-4 mt-2\">\n                    <svg\n                        className=\"animate-spin h-5 w-5 text-gray-500 mr-2\"\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        fill=\"none\"\n                        viewBox=\"0 0 24 24\"\n                    >\n                        <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" />\n                        <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8v8z\" />\n                    </svg>\n                </div>\n            )}\n            {print && Array.isArray(print) ? (\n                <div className=\"flex items-start mt-2\">\n                    <span\n                        // eslint-disable-next-line react/forbid-dom-props\n                        style={{ color: 'green' }}\n                    >\n                        #\n                    </span>\n                    <div className=\"flex-1 whitespace-pre-wrap ml-2\">\n                        {print.map((line, index) => (\n                            <div key={index}>\n                                {line.map((arg, argIndex) => (\n                                    <React.Fragment key={argIndex}>\n                                        {printRichHogOutput(arg)}\n                                        {argIndex < line.length - 1 ? ' ' : ''}\n                                    </React.Fragment>\n                                ))}\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            ) : null}\n            {status === 'success' && result !== undefined && (\n                <div className=\"flex items-start mt-2\">\n                    <span\n                        // eslint-disable-next-line react/forbid-dom-props\n                        style={{ color: 'green' }}\n                    >\n                        {'<'}\n                    </span>\n                    <div className=\"flex-1 whitespace-pre-wrap ml-2\">{printRichHogOutput(result)}</div>\n                </div>\n            )}\n            {status === 'error' && (\n                <div className=\"flex items-start mt-2\">\n                    <span className=\"text-danger\">!</span>\n                    <div className=\"flex-1 whitespace-pre-wrap ml-2 text-danger\">{error}</div>\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport function HogRepl(): JSX.Element {\n    const { replChunks, currentCode, lastLocalGlobals } = useValues(hogReplLogic)\n    const { runCurrentCode, setCurrentCode, editFromHere } = useActions(hogReplLogic)\n\n    return (\n        <div className=\"p-4 bg-white text-black font-mono\">\n            <div className=\"space-y-4\">\n                {replChunks.map((chunk, index) => (\n                    <ReplChunk chunk={chunk} key={index} editFromHere={() => editFromHere(index)} />\n                ))}\n                <div className=\"flex items-start\">\n                    <span\n                        // eslint-disable-next-line react/forbid-dom-props\n                        style={{ color: 'blue' }}\n                    >\n                        {'>'}\n                    </span>\n                    <div\n                        className=\"w-full\"\n                        // eslint-disable-next-line react/forbid-dom-props\n                        style={{ marginLeft: -10, marginTop: -7, marginRight: -5, marginBottom: -5 }}\n                    >\n                        <CodeEditorInline\n                            language=\"hog\"\n                            embedded\n                            className=\"flex-1 bg-transparent focus:outline-none resize-none ml-2 p-0\"\n                            value={currentCode}\n                            onChange={(value) => setCurrentCode(value ?? '')}\n                            onPressCmdEnter={runCurrentCode}\n                            onPressUpNoValue={() => {\n                                // TRICKY: This function will be memoified, so find the actual latest value,\n                                // not the one we had in the HogRepl component's chunk when this first rendered.\n                                const replChunks: ReplChunkType[] = hogReplLogic.findMounted()?.values.replChunks ?? []\n                                if (replChunks.length > 0) {\n                                    editFromHere(replChunks.length - 1)\n                                }\n                            }}\n                            options={{ fontSize: 14, padding: { top: 0, bottom: 0 } }}\n                            globals={lastLocalGlobals}\n                            autoFocus\n                        />\n                    </div>\n                    <LemonButton size=\"small\" type=\"primary\" onClick={runCurrentCode}>\n                        \u2318\u23CE\n                    </LemonButton>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport const scene: SceneExport = {\n    component: HogRepl,\n    logic: hogReplLogic,\n}\n", "import { newHogCallable, newHogClosure, VMState } from '@posthog/hogvm'\nimport { actions, kea, listeners, path, reducers, selectors } from 'kea'\nimport { actionToUrl, urlToAction } from 'kea-router'\nimport api from 'lib/api'\nimport { execHogAsync } from 'lib/hog'\nimport { urls } from 'scenes/urls'\n\nimport type { hogReplLogicType } from './hogReplLogicType'\n\nexport interface ReplChunk {\n    code: string\n    result?: string\n    print?: any[][]\n    error?: string\n    bytecode?: any[]\n    locals?: any[]\n    state?: any\n    status: 'pending' | 'success' | 'error'\n}\n\nexport const hogReplLogic = kea<hogReplLogicType>([\n    path(['scenes', 'debug', 'HogRepl']),\n    actions({\n        runCode: (code: string) => ({ code }),\n        setResult: (index: number, result?: string, error?: string) => ({ index, result, error }),\n        print: (index: number, line: any[]) => ({ index, line }),\n        setBytecode: (index: number, bytecode: any[], locals: any[]) => ({ index, bytecode, locals }),\n        setVMState: (index: number, state: any) => ({ index, state }),\n        setCurrentCode: (code: string) => ({ code }),\n        runCurrentCode: true,\n        editFromHere: (index: number) => ({ index }),\n        setReplChunks: (replChunks: ReplChunk[]) => ({ replChunks }),\n    }),\n    reducers({\n        currentCode: ['', { setCurrentCode: (_, { code }) => code }],\n        replChunks: [\n            [] as ReplChunk[],\n            {\n                setReplChunks: (_, { replChunks }) => replChunks,\n                runCode: (state, { code }) => [...state, { code, status: 'pending' } as ReplChunk],\n                setResult: (state, { index, result, error }) =>\n                    state.map((chunk, i) =>\n                        i === index ? { ...chunk, result, error, status: error ? 'error' : 'success' } : chunk\n                    ),\n                setBytecode: (state, { index, bytecode, locals }) =>\n                    state.map((chunk, i) => (i === index ? { ...chunk, bytecode, locals } : chunk)),\n                print: (state, { index, line }) =>\n                    state.map((chunk, i) =>\n                        i === index ? { ...chunk, print: [...(chunk.print ?? []), line] } : chunk\n                    ),\n                setVMState: (state, { index, state: vmState }) =>\n                    state.map((chunk, i) => (i === index ? { ...chunk, state: vmState } : chunk)),\n            },\n        ],\n    }),\n    selectors({\n        lastLocals: [\n            (s) => [s.replChunks],\n            (replChunks): ReplChunk['locals'] | undefined => {\n                for (let i = replChunks.length - 1; i >= 0; i--) {\n                    if (replChunks[i].locals) {\n                        return replChunks[i].locals\n                    }\n                }\n                return undefined\n            },\n        ],\n        lastState: [\n            (s) => [s.replChunks],\n            (replChunks): VMState | undefined => {\n                for (let i = replChunks.length - 1; i >= 0; i--) {\n                    if (replChunks[i].state) {\n                        return replChunks[i].state\n                    }\n                }\n                return undefined\n            },\n        ],\n        lastLocalGlobals: [\n            (s) => [s.lastLocals],\n            (lastLocals): Record<string, any> | undefined => {\n                if (lastLocals) {\n                    return lastLocals.reduce((acc, local) => ({ ...acc, [local[0]]: 'local' }), {})\n                }\n                return undefined\n            },\n        ],\n    }),\n    listeners(({ actions, values }) => ({\n        editFromHere: ({ index }) => {\n            const code = [...values.replChunks.slice(index).map((chunk) => chunk.code), values.currentCode].join('\\n')\n            actions.setCurrentCode(code.replace(/\\n+$/, ''))\n            actions.setReplChunks(values.replChunks.slice(0, index))\n        },\n        runCode: async ({ code }) => {\n            const index = values.replChunks.length - 1\n            const { lastLocals, lastState } = values\n\n            try {\n                const res = await api.hog.create(code, lastLocals, true)\n                const [_h, version, ...bytecode] = res.bytecode\n                const locals = res.locals\n                actions.setBytecode(index, bytecode, locals)\n\n                const nextBytecode = [_h, version]\n                for (const replChunk of values.replChunks) {\n                    if (replChunk.bytecode) {\n                        nextBytecode.push(...replChunk.bytecode)\n                    }\n                }\n                const ip = nextBytecode.length - bytecode.length\n                if (nextBytecode[nextBytecode.length - 1] === 35) {\n                    nextBytecode.pop()\n                }\n                const nextStack = [...(lastState?.stack ?? [])]\n                if (nextStack.length !== lastLocals?.length) {\n                    nextStack.splice(lastLocals?.length ?? 0)\n                }\n                const state: VMState = {\n                    stack: nextStack ?? [],\n                    bytecodes: { root: { bytecode: nextBytecode } },\n                    callStack: [\n                        {\n                            ip: ip,\n                            chunk: 'root',\n                            stackStart: 0,\n                            argCount: 0,\n                            closure: newHogClosure(\n                                newHogCallable('local', {\n                                    name: '',\n                                    argCount: 0,\n                                    upvalueCount: 0,\n                                    ip: ip,\n                                    chunk: 'root',\n                                })\n                            ),\n                        },\n                    ],\n                    upvalues: lastState?.upvalues ?? [],\n                    ops: lastState?.ops ?? 0,\n                    asyncSteps: lastState?.asyncSteps ?? 0,\n                    declaredFunctions: lastState?.declaredFunctions ?? {},\n                    throwStack: lastState?.throwStack ?? [],\n                    maxMemUsed: lastState?.maxMemUsed ?? 0,\n                    syncDuration: lastState?.syncDuration ?? 0,\n                }\n                const result = await execHogAsync(state, {\n                    repl: true,\n                    functions: {\n                        print: (...args: any[]) => {\n                            actions.print(index, args)\n                        },\n                    },\n                })\n\n                // Show the last stack value if no other result is returned\n                const response =\n                    result.result !== undefined\n                        ? result.result\n                        : (result.state?.stack?.length ?? 0) > 0\n                        ? result.state?.stack?.[result.state.stack.length - 1]\n                        : 'null'\n                actions.setResult(index, response)\n                actions.setVMState(index, result.state)\n            } catch (error: any) {\n                // Handle errors\n                console.error(error)\n                actions.setResult(index, undefined, (error.error || error.message || error).toString())\n            }\n        },\n        runCurrentCode: () => {\n            actions.runCode(values.currentCode)\n            actions.setCurrentCode('')\n        },\n    })),\n    actionToUrl(({ values }) => {\n        const fn = (): [string, undefined, Record<string, any> | undefined, { replace: true }] | undefined => {\n            if (values.replChunks.length > 0) {\n                // Chrome has a 2MB limit for the HASH params, set ours at 1MB\n                const replChunksLength = JSON.stringify(values.replChunks).length\n                if (replChunksLength > 1024 * 1024) {\n                    // Try with just the code\n                    const newCode = values.replChunks.map((chunk) => chunk.code).join('\\n')\n                    if (newCode.length > 1024 * 1024) {\n                        // Still not enough, abort\n                        return [urls.debugHog(), undefined, undefined, { replace: true }]\n                    }\n                    return [urls.debugHog(), undefined, { code: newCode }, { replace: true }]\n                }\n\n                return [\n                    urls.debugHog(),\n                    undefined,\n                    { repl: values.replChunks, code: values.currentCode },\n                    { replace: true },\n                ]\n            }\n        }\n\n        return {\n            setReplChunks: fn,\n            runCode: fn,\n            setResult: fn,\n            setBytecode: fn,\n            print: fn,\n            setVMState: fn,\n            setCurrentCode: fn,\n        }\n    }),\n    urlToAction(({ actions, values }) => ({\n        [urls.debugHog()]: (_, __, { repl, code }, { method }) => {\n            if (method === 'PUSH' || ((repl || code) && !values.currentCode && values.replChunks.length === 0)) {\n                actions.setReplChunks(repl)\n                actions.setCurrentCode(code)\n            }\n        },\n    })),\n])\n"],
  "mappings": "8pCAAAA,IAAAC,IAAAC,IAEA,IAAAC,EAAsC,OAGtC,IAAAC,EAAgC,OCLhCC,IAAAC,IAAAC,IACA,IAAAC,EAAmE,OACnEC,EAAyC,OAkBlC,IAAMC,KAAe,OAAsB,IAC9C,QAAK,CAAC,SAAU,QAAS,SAAS,CAAC,KACnC,WAAQ,CACJ,QAAUC,IAAkB,CAAE,KAAAA,CAAK,GACnC,UAAW,CAACC,EAAeC,EAAiBC,KAAoB,CAAE,MAAAF,EAAO,OAAAC,EAAQ,MAAAC,CAAM,GACvF,MAAO,CAACF,EAAeG,KAAiB,CAAE,MAAAH,EAAO,KAAAG,CAAK,GACtD,YAAa,CAACH,EAAeI,EAAiBC,KAAmB,CAAE,MAAAL,EAAO,SAAAI,EAAU,OAAAC,CAAO,GAC3F,WAAY,CAACL,EAAeM,KAAgB,CAAE,MAAAN,EAAO,MAAAM,CAAM,GAC3D,eAAiBP,IAAkB,CAAE,KAAAA,CAAK,GAC1C,eAAgB,GAChB,aAAeC,IAAmB,CAAE,MAAAA,CAAM,GAC1C,cAAgBO,IAA6B,CAAE,WAAAA,CAAW,EAC9D,CAAC,KACD,YAAS,CACL,YAAa,CAAC,GAAI,CAAE,eAAgB,CAACC,EAAG,CAAE,KAAAT,CAAK,IAAMA,CAAK,CAAC,EAC3D,WAAY,CACR,CAAC,EACD,CACI,cAAe,CAACS,EAAG,CAAE,WAAAD,CAAW,IAAMA,EACtC,QAAS,CAACD,EAAO,CAAE,KAAAP,CAAK,IAAM,CAAC,GAAGO,EAAO,CAAE,KAAAP,EAAM,OAAQ,SAAU,CAAc,EACjF,UAAW,CAACO,EAAO,CAAE,MAAAN,EAAO,OAAAC,EAAQ,MAAAC,CAAM,IACtCI,EAAM,IAAI,CAACG,EAAOC,IACdA,IAAMV,EAAQ,CAAE,GAAGS,EAAO,OAAAR,EAAQ,MAAAC,EAAO,OAAQA,EAAQ,QAAU,SAAU,EAAIO,CACrF,EACJ,YAAa,CAACH,EAAO,CAAE,MAAAN,EAAO,SAAAI,EAAU,OAAAC,CAAO,IAC3CC,EAAM,IAAI,CAACG,EAAOC,IAAOA,IAAMV,EAAQ,CAAE,GAAGS,EAAO,SAAAL,EAAU,OAAAC,CAAO,EAAII,CAAM,EAClF,MAAO,CAACH,EAAO,CAAE,MAAAN,EAAO,KAAAG,CAAK,IACzBG,EAAM,IAAI,CAACG,EAAOC,IACdA,IAAMV,EAAQ,CAAE,GAAGS,EAAO,MAAO,CAAC,GAAIA,EAAM,OAAS,CAAC,EAAIN,CAAI,CAAE,EAAIM,CACxE,EACJ,WAAY,CAACH,EAAO,CAAE,MAAAN,EAAO,MAAOW,CAAQ,IACxCL,EAAM,IAAI,CAACG,EAAOC,IAAOA,IAAMV,EAAQ,CAAE,GAAGS,EAAO,MAAOE,CAAQ,EAAIF,CAAM,CACpF,CACJ,CACJ,CAAC,KACD,aAAU,CACN,WAAY,CACPG,GAAM,CAACA,EAAE,UAAU,EACnBL,GAAgD,CAC7C,QAASG,EAAIH,EAAW,OAAS,EAAGG,GAAK,EAAGA,IACxC,GAAIH,EAAWG,CAAC,EAAE,OACd,OAAOH,EAAWG,CAAC,EAAE,MAIjC,CACJ,EACA,UAAW,CACNE,GAAM,CAACA,EAAE,UAAU,EACnBL,GAAoC,CACjC,QAASG,EAAIH,EAAW,OAAS,EAAGG,GAAK,EAAGA,IACxC,GAAIH,EAAWG,CAAC,EAAE,MACd,OAAOH,EAAWG,CAAC,EAAE,KAIjC,CACJ,EACA,iBAAkB,CACbE,GAAM,CAACA,EAAE,UAAU,EACnBC,GAAgD,CAC7C,GAAIA,EACA,OAAOA,EAAW,OAAO,CAACC,EAAKC,KAAW,CAAE,GAAGD,EAAK,CAACC,EAAM,CAAC,CAAC,EAAG,OAAQ,GAAI,CAAC,CAAC,CAGtF,CACJ,CACJ,CAAC,KACD,aAAU,CAAC,CAAE,QAAAC,EAAS,OAAAC,CAAO,KAAO,CAChC,aAAc,CAAC,CAAE,MAAAjB,CAAM,IAAM,CACzB,IAAMD,EAAO,CAAC,GAAGkB,EAAO,WAAW,MAAMjB,CAAK,EAAE,IAAKS,GAAUA,EAAM,IAAI,EAAGQ,EAAO,WAAW,EAAE,KAAK;AAAA,CAAI,EACzGD,EAAQ,eAAejB,EAAK,QAAQ,OAAQ,EAAE,CAAC,EAC/CiB,EAAQ,cAAcC,EAAO,WAAW,MAAM,EAAGjB,CAAK,CAAC,CAC3D,EACA,QAAS,MAAO,CAAE,KAAAD,CAAK,IAAM,CACzB,IAAMC,EAAQiB,EAAO,WAAW,OAAS,EACnC,CAAE,WAAAJ,EAAY,UAAAK,CAAU,EAAID,EAElC,GAAI,CACA,IAAME,EAAM,MAAMC,EAAI,IAAI,OAAOrB,EAAMc,EAAY,EAAI,EACjD,CAACQ,EAAIC,EAAS,GAAGlB,CAAQ,EAAIe,EAAI,SACjCd,EAASc,EAAI,OACnBH,EAAQ,YAAYhB,EAAOI,EAAUC,CAAM,EAE3C,IAAMkB,EAAe,CAACF,EAAIC,CAAO,EACjC,QAAWE,KAAaP,EAAO,WACvBO,EAAU,UACVD,EAAa,KAAK,GAAGC,EAAU,QAAQ,EAG/C,IAAMC,EAAKF,EAAa,OAASnB,EAAS,OACtCmB,EAAaA,EAAa,OAAS,CAAC,IAAM,IAC1CA,EAAa,IAAI,EAErB,IAAMG,EAAY,CAAC,GAAIR,GAAW,OAAS,CAAC,CAAE,EAC1CQ,EAAU,SAAWb,GAAY,QACjCa,EAAU,OAAOb,GAAY,QAAU,CAAC,EAE5C,IAAMP,EAAiB,CACnB,MAAOoB,GAAa,CAAC,EACrB,UAAW,CAAE,KAAM,CAAE,SAAUH,CAAa,CAAE,EAC9C,UAAW,CACP,CACI,GAAIE,EACJ,MAAO,OACP,WAAY,EACZ,SAAU,EACV,QAASE,EACLC,EAAe,QAAS,CACpB,KAAM,GACN,SAAU,EACV,aAAc,EACd,GAAIH,EACJ,MAAO,MACX,CAAC,CACL,CACJ,CACJ,EACA,SAAUP,GAAW,UAAY,CAAC,EAClC,IAAKA,GAAW,KAAO,EACvB,WAAYA,GAAW,YAAc,EACrC,kBAAmBA,GAAW,mBAAqB,CAAC,EACpD,WAAYA,GAAW,YAAc,CAAC,EACtC,WAAYA,GAAW,YAAc,EACrC,aAAcA,GAAW,cAAgB,CAC7C,EACMjB,EAAS,MAAM4B,EAAavB,EAAO,CACrC,KAAM,GACN,UAAW,CACP,MAAO,IAAIwB,IAAgB,CACvBd,EAAQ,MAAMhB,EAAO8B,CAAI,CAC7B,CACJ,CACJ,CAAC,EAGKC,EACF9B,EAAO,SAAW,OACZA,EAAO,QACNA,EAAO,OAAO,OAAO,QAAU,GAAK,EACrCA,EAAO,OAAO,QAAQA,EAAO,MAAM,MAAM,OAAS,CAAC,EACnD,OACVe,EAAQ,UAAUhB,EAAO+B,CAAQ,EACjCf,EAAQ,WAAWhB,EAAOC,EAAO,KAAK,CAC1C,OAASC,EAAY,CAEjB,QAAQ,MAAMA,CAAK,EACnBc,EAAQ,UAAUhB,EAAO,QAAYE,EAAM,OAASA,EAAM,SAAWA,GAAO,SAAS,CAAC,CAC1F,CACJ,EACA,eAAgB,IAAM,CAClBc,EAAQ,QAAQC,EAAO,WAAW,EAClCD,EAAQ,eAAe,EAAE,CAC7B,CACJ,EAAE,KACF,eAAY,CAAC,CAAE,OAAAC,CAAO,IAAM,CACxB,IAAMe,EAAK,IAA2F,CAClG,GAAIf,EAAO,WAAW,OAAS,EAAG,CAG9B,GADyB,KAAK,UAAUA,EAAO,UAAU,EAAE,OACpC,QAAa,CAEhC,IAAMgB,EAAUhB,EAAO,WAAW,IAAKR,GAAUA,EAAM,IAAI,EAAE,KAAK;AAAA,CAAI,EACtE,OAAIwB,EAAQ,OAAS,QAEV,CAACC,EAAK,SAAS,EAAG,OAAW,OAAW,CAAE,QAAS,EAAK,CAAC,EAE7D,CAACA,EAAK,SAAS,EAAG,OAAW,CAAE,KAAMD,CAAQ,EAAG,CAAE,QAAS,EAAK,CAAC,CAC5E,CAEA,MAAO,CACHC,EAAK,SAAS,EACd,OACA,CAAE,KAAMjB,EAAO,WAAY,KAAMA,EAAO,WAAY,EACpD,CAAE,QAAS,EAAK,CACpB,CACJ,CACJ,EAEA,MAAO,CACH,cAAee,EACf,QAASA,EACT,UAAWA,EACX,YAAaA,EACb,MAAOA,EACP,WAAYA,EACZ,eAAgBA,CACpB,CACJ,CAAC,KACD,eAAY,CAAC,CAAE,QAAAhB,EAAS,OAAAC,CAAO,KAAO,CAClC,CAACiB,EAAK,SAAS,CAAC,EAAG,CAAC1B,EAAG2B,EAAI,CAAE,KAAAC,EAAM,KAAArC,CAAK,EAAG,CAAE,OAAAsC,CAAO,IAAM,EAClDA,IAAW,SAAYD,GAAQrC,IAAS,CAACkB,EAAO,aAAeA,EAAO,WAAW,SAAW,KAC5FD,EAAQ,cAAcoB,CAAI,EAC1BpB,EAAQ,eAAejB,CAAI,EAEnC,CACJ,EAAE,CACN,CAAC,ED1L2B,IAAAuC,EAAA,OAZrB,SAASC,EAAiB,CAAE,SAAAC,CAAS,EAAuC,CAC/E,GAAM,CAACC,EAAWC,CAAY,KAAI,YAA2B,OAAO,EACpE,SACI,OAAC,OACG,mBAACC,EAAA,CACG,UAAWF,EACX,SAAUC,EACV,KAAM,CACF,CACI,IAAK,QACL,MAAO,QACP,WACI,OAACE,EAAA,CACG,QAASJ,EAAS,QAAQ,IAAI,CAACK,EAAKC,KAAW,CAAE,UAAWA,EAAO,MAAOD,CAAI,EAAE,EAChF,WAAYL,EAAS,QACzB,CAER,EACA,CACI,IAAK,OACL,MAAO,OACP,WAAS,OAACO,EAAA,CAAW,KAAM,GAAO,IAAKP,EAAU,CACrD,EACA,CACI,IAAK,MACL,MAAO,MACP,WAAS,OAAC,OAAK,SAAAQ,EAAqBR,CAAQ,EAAE,CAClD,CACJ,EACJ,EACJ,CAER,CAEA,SAASS,EAAmBC,EAAgC,CACxD,GAAI,OAAOA,GAAQ,UAAYA,IAAQ,KAAM,CACzC,GAAI,aAAcA,EACd,OAAOC,EAAaD,CAAG,EAE3B,GAAI,YAAaA,GAAO,YAAaA,GAAO,MAAM,QAAQA,EAAI,OAAO,GAAK,MAAM,QAAQA,EAAI,OAAO,EAC/F,SAAO,OAACX,EAAA,CAAiB,SAAUW,EAAK,CAEhD,CACA,OAAOF,EAAqBE,CAAG,CACnC,CAOO,SAASE,EAAU,CACtB,MAAO,CAAE,KAAAC,EAAM,OAAAC,EAAQ,MAAAC,EAAO,MAAAC,EAAO,OAAAC,CAAO,EAC5C,aAAAC,CACJ,EAAgC,CAC5B,SACI,QAAC,OAAI,UAAU,gCACX,oBAACC,EAAA,CAAY,KAAK,QAAQ,KAAK,YAAY,UAAU,cAAc,QAASD,EAAc,qBAE1F,KACA,QAAC,OAAI,UAAU,mBACX,oBAAC,QAEG,MAAO,CAAE,MAAO,MAAO,EAEtB,aACL,KACA,OAAC,OAAI,UAAU,kCAAmC,SAAAL,EAAK,GAC3D,EACCI,IAAW,cACR,OAAC,OAAI,UAAU,8BACX,oBAAC,OACG,UAAU,0CACV,MAAM,6BACN,KAAK,OACL,QAAQ,YAER,oBAAC,UAAO,UAAU,aAAa,GAAG,KAAK,GAAG,KAAK,EAAE,KAAK,OAAO,eAAe,YAAY,IAAI,KAC5F,OAAC,QAAK,UAAU,aAAa,KAAK,eAAe,EAAE,uBAAuB,GAC9E,EACJ,EAEHF,GAAS,MAAM,QAAQA,CAAK,KACzB,QAAC,OAAI,UAAU,wBACX,oBAAC,QAEG,MAAO,CAAE,MAAO,OAAQ,EAC3B,aAED,KACA,OAAC,OAAI,UAAU,kCACV,SAAAA,EAAM,IAAI,CAACK,EAAMd,OACd,OAAC,OACI,SAAAc,EAAK,IAAI,CAACV,EAAKW,OACZ,QAAC,EAAAC,QAAM,SAAN,CACI,UAAAb,EAAmBC,CAAG,EACtBW,EAAWD,EAAK,OAAS,EAAI,IAAM,KAFnBC,CAGrB,CACH,GANKf,CAOV,CACH,EACL,GACJ,EACA,KACHW,IAAW,WAAaH,IAAW,WAChC,QAAC,OAAI,UAAU,wBACX,oBAAC,QAEG,MAAO,CAAE,MAAO,OAAQ,EAEvB,aACL,KACA,OAAC,OAAI,UAAU,kCAAmC,SAAAL,EAAmBK,CAAM,EAAE,GACjF,EAEHG,IAAW,YACR,QAAC,OAAI,UAAU,wBACX,oBAAC,QAAK,UAAU,cAAc,aAAC,KAC/B,OAAC,OAAI,UAAU,8CAA+C,SAAAD,EAAM,GACxE,GAER,CAER,CAEO,SAASO,GAAuB,CACnC,GAAM,CAAE,WAAAC,EAAY,YAAAC,EAAa,iBAAAC,CAAiB,KAAI,aAAUC,CAAY,EACtE,CAAE,eAAAC,EAAgB,eAAAC,EAAgB,aAAAX,CAAa,KAAI,cAAWS,CAAY,EAEhF,SACI,OAAC,OAAI,UAAU,oCACX,oBAAC,OAAI,UAAU,YACV,UAAAH,EAAW,IAAI,CAACM,EAAOxB,OACpB,OAACM,EAAA,CAAU,MAAOkB,EAAmB,aAAc,IAAMZ,EAAaZ,CAAK,GAA7CA,CAAgD,CACjF,KACD,QAAC,OAAI,UAAU,mBACX,oBAAC,QAEG,MAAO,CAAE,MAAO,MAAO,EAEtB,aACL,KACA,OAAC,OACG,UAAU,SAEV,MAAO,CAAE,WAAY,IAAK,UAAW,GAAI,YAAa,GAAI,aAAc,EAAG,EAE3E,mBAACyB,EAAA,CACG,SAAS,MACT,SAAQ,GACR,UAAU,gEACV,MAAON,EACP,SAAWO,GAAUH,EAAeG,GAAS,EAAE,EAC/C,gBAAiBJ,EACjB,iBAAkB,IAAM,CAGpB,IAAMJ,EAA8BG,EAAa,YAAY,GAAG,OAAO,YAAc,CAAC,EAClFH,EAAW,OAAS,GACpBN,EAAaM,EAAW,OAAS,CAAC,CAE1C,EACA,QAAS,CAAE,SAAU,GAAI,QAAS,CAAE,IAAK,EAAG,OAAQ,CAAE,CAAE,EACxD,QAASE,EACT,UAAS,GACb,EACJ,KACA,OAACP,EAAA,CAAY,KAAK,QAAQ,KAAK,UAAU,QAASS,EAAgB,wBAElE,GACJ,GACJ,EACJ,CAER,CAEO,IAAMK,GAAqB,CAC9B,UAAWV,EACX,MAAOI,CACX",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "hogReplLogic", "code", "index", "result", "error", "line", "bytecode", "locals", "state", "replChunks", "_", "chunk", "i", "vmState", "s", "lastLocals", "acc", "local", "actions", "values", "lastState", "res", "api_default", "_h", "version", "nextBytecode", "replChunk", "ip", "nextStack", "$bfee60273cf219ce$export$42bb9ce6d451c81e", "$bfee60273cf219ce$export$4160dcabb869144f", "execHogAsync", "args", "response", "fn", "newCode", "urls", "__", "repl", "method", "import_jsx_runtime", "ReplResultsTable", "response", "activeTab", "setActiveTab", "LemonTabs", "LemonTable", "col", "index", "JSONViewer", "$2d6fae107583e787$export$ed243cb9e89db69e", "printRichHogOutput", "arg", "renderHogQLX", "ReplChunk", "code", "result", "print", "error", "status", "editFromHere", "LemonButton", "line", "argIndex", "React", "HogRepl", "replChunks", "currentCode", "lastLocalGlobals", "hogReplLogic", "runCurrentCode", "setCurrentCode", "chunk", "CodeEditorInline", "value", "scene"]
}
