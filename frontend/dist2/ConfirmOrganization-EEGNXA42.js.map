{
  "version": 3,
  "sources": ["../src/scenes/organization/ConfirmOrganization/ConfirmOrganization.tsx", "../src/scenes/organization/ConfirmOrganization/confirmOrganizationLogic.ts"],
  "sourcesContent": ["import { Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport { AnimatedCollapsible } from 'lib/components/AnimatedCollapsible'\nimport { BridgePage } from 'lib/components/BridgePage/BridgePage'\nimport SignupReferralSource from 'lib/components/SignupReferralSource'\nimport SignupRoleSelect from 'lib/components/SignupRoleSelect'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonDivider } from 'lib/lemon-ui/LemonDivider'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { LemonInput } from 'lib/lemon-ui/LemonInput/LemonInput'\nimport { organizationLogic } from 'scenes/organizationLogic'\nimport { SceneExport } from 'scenes/sceneTypes'\n\nimport { confirmOrganizationLogic } from './confirmOrganizationLogic'\n\nexport const scene: SceneExport = {\n    component: ConfirmOrganization,\n    logic: organizationLogic,\n}\n\nexport function ConfirmOrganization(): JSX.Element {\n    const { isConfirmOrganizationSubmitting, email, showNewOrgWarning } = useValues(confirmOrganizationLogic)\n    const { setShowNewOrgWarning } = useActions(confirmOrganizationLogic)\n\n    return (\n        <BridgePage view=\"org-creation-confirmation\" hedgehog>\n            <h2>Create a new organization</h2>\n            <div className=\"flex-1\">\n                <p className=\"text-center\">\n                    <strong>\n                        Trying to join an existing organization? <br />\n                        {!showNewOrgWarning && (\n                            <Link\n                                onClick={() => {\n                                    setShowNewOrgWarning(true)\n                                }}\n                            >\n                                Read more\n                            </Link>\n                        )}\n                    </strong>\n                </p>\n                <AnimatedCollapsible collapsed={!showNewOrgWarning}>\n                    <div className=\"py-2\">\n                        <p>\n                            If you're trying to join an existing organization, you should not create a new one. Some\n                            reasons that you may accidentally end up here are:\n                        </p>\n                        <ul className=\"list-disc pl-4\">\n                            <li>You're logging in with the wrong email address</li>\n                            <li>Your PostHog account is at a different URL</li>\n                            <li>You need an invitation from a colleague</li>\n                        </ul>\n                    </div>\n                </AnimatedCollapsible>\n            </div>\n\n            <Form\n                logic={confirmOrganizationLogic}\n                formKey=\"confirmOrganization\"\n                enableFormOnSubmit\n                className=\"space-y-4\"\n            >\n                <LemonField name=\"email\" label=\"Email\">\n                    <LemonInput className=\"ph-ignore-input\" value={email} disabled />\n                </LemonField>\n\n                <LemonField name=\"first_name\" label=\"Your name\">\n                    <LemonInput className=\"ph-ignore-input\" placeholder=\"Jane Doe\" />\n                </LemonField>\n\n                <LemonField\n                    name=\"organization_name\"\n                    label=\"Organization name\"\n                    help=\"You can always rename your organization later\"\n                >\n                    <LemonInput className=\"ph-ignore-input\" placeholder=\"Hogflix Movies\" />\n                </LemonField>\n\n                <SignupRoleSelect />\n                <SignupReferralSource disabled={isConfirmOrganizationSubmitting} />\n\n                <LemonButton\n                    htmlType=\"submit\"\n                    fullWidth\n                    center\n                    type=\"primary\"\n                    loading={isConfirmOrganizationSubmitting}\n                >\n                    Create organization\n                </LemonButton>\n            </Form>\n\n            <div className=\"text-center terms-and-conditions-text mt-4 text-secondary\">\n                By creating an account, you agree to our{' '}\n                <Link to=\"https://posthog.com/terms\" target=\"_blank\">\n                    Terms of Service\n                </Link>{' '}\n                and{' '}\n                <Link to=\"https://posthog.com/privacy\" target=\"_blank\">\n                    Privacy Policy\n                </Link>\n                .\n            </div>\n            <LemonDivider thick dashed className=\"my-6\" />\n            <div className=\"text-center terms-and-conditions-text mt-4 text-secondary\">\n                Have questions?{' '}\n                <Link to=\"https://posthog.com/support\" target=\"_blank\">\n                    Visit support\n                </Link>{' '}\n                or{' '}\n                <Link to=\"https://posthog.com/docs\" target=\"_blank\">\n                    read our documentation\n                </Link>\n                .\n            </div>\n        </BridgePage>\n    )\n}\n", "import { actions, kea, path, reducers } from 'kea'\nimport { forms } from 'kea-forms'\nimport { urlToAction } from 'kea-router'\nimport api from 'lib/api'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast/LemonToast'\n\nimport type { confirmOrganizationLogicType } from './confirmOrganizationLogicType'\n\nexport interface ConfirmOrganizationFormValues {\n    organization_name?: string\n    first_name?: string\n    role_at_organization?: string\n}\n\nexport const confirmOrganizationLogic = kea<confirmOrganizationLogicType>([\n    path(['scenes', 'organization', 'confirmOrganizationLogic']),\n\n    actions({\n        setEmail: (email: string) => ({\n            email,\n        }),\n        setShowNewOrgWarning: (show: boolean) => ({ show }),\n    }),\n\n    reducers({\n        showNewOrgWarning: [\n            false,\n            {\n                setShowNewOrgWarning: (_, { show }) => show,\n            },\n        ],\n        email: [\n            '',\n            {\n                setEmail: (_, { email }) => email,\n            },\n        ],\n    }),\n\n    forms(() => ({\n        confirmOrganization: {\n            defaults: {} as ConfirmOrganizationFormValues,\n            errors: ({ organization_name, first_name }) => ({\n                first_name: !first_name ? 'Please enter your name' : undefined,\n                organization_name: !organization_name ? 'Please enter your organization name' : undefined,\n            }),\n\n            submit: async (formValues) => {\n                try {\n                    const response = await api.create('api/social_signup/', {\n                        ...formValues,\n                    })\n                    location.href = response.success_url || '/'\n                } catch (error: any) {\n                    lemonToast.error(error.detail || 'Failed to create organization')\n                }\n            },\n        },\n    })),\n\n    urlToAction(({ actions }) => ({\n        '/organization/confirm-creation': (_, { email, organization_name, first_name }) => {\n            actions.setConfirmOrganizationValues({ organization_name, first_name })\n            actions.setEmail(email)\n        },\n    })),\n])\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_kea_router", "confirmOrganizationLogic", "email", "show", "_", "organization_name", "first_name", "formValues", "response", "api_default", "error", "lemonToast", "actions", "import_jsx_runtime", "scene", "ConfirmOrganization", "organizationLogic", "isConfirmOrganizationSubmitting", "email", "showNewOrgWarning", "confirmOrganizationLogic", "setShowNewOrgWarning", "BridgePage", "Link", "AnimatedCollapsible", "LemonField", "LemonInput", "SignupRoleSelect", "SignupReferralSource", "LemonButton", "LemonDivider"]
}
