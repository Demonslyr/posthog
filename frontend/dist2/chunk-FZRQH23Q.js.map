{
  "version": 3,
  "sources": ["../src/lib/components/EditableField/EditableField.tsx"],
  "sourcesContent": ["import './EditableField.scss'\n\nimport { IconPencil } from '@posthog/icons'\nimport clsx from 'clsx'\nimport { useValues } from 'kea'\nimport { useResizeObserver } from 'lib/hooks/useResizeObserver'\nimport { IconMarkdown } from 'lib/lemon-ui/icons'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { RawInputAutosize } from 'lib/lemon-ui/LemonInput/RawInputAutosize'\nimport { LemonMarkdown } from 'lib/lemon-ui/LemonMarkdown'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { pluralize } from 'lib/utils'\nimport React, { useEffect, useRef, useState } from 'react'\nimport TextareaAutosize from 'react-textarea-autosize'\n\nimport { AvailableFeature } from '~/types'\n\nimport { upgradeModalLogic } from '../UpgradeModal/upgradeModalLogic'\n\nexport interface EditableFieldProps {\n    /** What this field stands for. */\n    name: string\n    value: string\n    onChange?: (value: string) => void\n    onSave?: (value: string) => void\n    saveOnBlur?: boolean\n    placeholder?: string\n    minLength?: number\n    maxLength?: number\n    autoFocus?: boolean\n    multiline?: boolean\n    /** Whether to render the content as Markdown in view mode. */\n    markdown?: boolean\n    compactButtons?: boolean | 'xsmall' // The 'xsmall' is somewhat hacky, but necessary for 3000 breadcrumbs\n    /** Whether this field should be gated behind a \"paywall\". */\n    paywallFeature?: AvailableFeature\n    /** Controlled mode. */\n    mode?: 'view' | 'edit'\n    onModeToggle?: (newMode: 'view' | 'edit') => void\n    /** @default 'outlined' */\n    editingIndication?: 'outlined' | 'underlined'\n    className?: string\n    style?: React.CSSProperties\n    'data-attr'?: string\n    saveButtonText?: string\n    /** Extra information shown next to the field. */\n    notice?: {\n        icon: React.ReactElement\n        tooltip: string\n    }\n}\n\nexport function EditableField({\n    name,\n    value,\n    onChange,\n    onSave,\n    saveOnBlur = false,\n    placeholder,\n    minLength,\n    maxLength,\n    autoFocus = false,\n    multiline = false,\n    markdown = false,\n    compactButtons = false,\n    paywallFeature,\n    mode,\n    onModeToggle,\n    editingIndication = 'outlined',\n    className,\n    style,\n    'data-attr': dataAttr,\n    saveButtonText = 'Save',\n    notice,\n}: EditableFieldProps): JSX.Element {\n    const { guardAvailableFeature } = useValues(upgradeModalLogic)\n    const [localIsEditing, setLocalIsEditing] = useState(mode === 'edit')\n    const [localTentativeValue, setLocalTentativeValue] = useState(value)\n    const [isDisplayTooltipNeeded, setIsDisplayTooltipNeeded] = useState(false)\n    const containerRef = useRef<HTMLDivElement>(null)\n    const inputRef = useRef<HTMLInputElement | HTMLTextAreaElement>(null)\n    const displayRef = useRef<HTMLSpanElement>(null)\n    const previousIsEditing = useRef<boolean>()\n\n    useEffect(() => {\n        setLocalTentativeValue(value)\n    }, [value])\n\n    useEffect(() => {\n        setLocalIsEditing(mode === 'edit')\n    }, [mode])\n\n    useEffect(() => {\n        // We always want to focus when switching to edit mode, but can't use autoFocus, because we don't want this to\n        // happen when the component is _initially_ rendered in edit mode. The `previousIsEditing.current === false`\n        // check is important for this, because only `false` means that the component was previously rendered in view\n        // mode. `undefined` means that the component was never rendered before.\n        if (inputRef.current && previousIsEditing.current === false && localIsEditing) {\n            const endOfInput = inputRef.current.value.length\n            inputRef.current.setSelectionRange(endOfInput, endOfInput)\n            inputRef.current.focus()\n        }\n        previousIsEditing.current = localIsEditing\n    }, [localIsEditing])\n\n    useResizeObserver({\n        ref: containerRef,\n        onResize: () => {\n            if (displayRef.current) {\n                setIsDisplayTooltipNeeded(displayRef.current.scrollWidth > displayRef.current.clientWidth)\n            }\n        },\n    })\n    const isSaveable = !minLength || localTentativeValue.length >= minLength\n\n    const mouseDownOnCancelButton = (e: React.MouseEvent): void => {\n        // if saveOnBlur is set the onBlur handler of the input fires before the onClick event of the button\n        // this onMouseDown handler fires before the input can see the click and fire onBlur\n        e.preventDefault()\n    }\n\n    const cancel = (): void => {\n        setLocalIsEditing(false)\n        setLocalTentativeValue(value)\n        onModeToggle?.('view')\n    }\n\n    const save = (): void => {\n        onSave?.(localTentativeValue)\n        setLocalIsEditing(false)\n        onModeToggle?.('view')\n    }\n\n    const isEditing = mode === 'edit' || localIsEditing\n\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLElement>): void => {\n        if (isEditing) {\n            // Cmd/Ctrl are required in addition to Enter if newlines are permitted\n            if (isSaveable && e.key === 'Enter' && (!multiline || e.metaKey || e.ctrlKey)) {\n                save() // Save on Enter press\n                e.stopPropagation()\n                e.preventDefault()\n            } else if (e.key === 'Escape') {\n                cancel()\n                e.stopPropagation()\n                e.preventDefault()\n            }\n        }\n    }\n\n    return (\n        <div\n            className={clsx(\n                'EditableField',\n                multiline && 'EditableField--multiline',\n                isEditing && 'EditableField--editing',\n                editingIndication === 'underlined' && 'EditableField--underlined',\n                className\n            )}\n            data-attr={dataAttr}\n            // eslint-disable-next-line react/forbid-dom-props\n            style={style}\n            ref={containerRef}\n        >\n            <div className=\"EditableField__highlight\">\n                {isEditing ? (\n                    <>\n                        {multiline ? (\n                            <TextareaAutosize\n                                name={name}\n                                value={localTentativeValue}\n                                onChange={(e) => {\n                                    onChange?.(e.target.value)\n                                    setLocalTentativeValue(e.target.value)\n                                }}\n                                onBlur={saveOnBlur ? (localTentativeValue !== value ? save : cancel) : undefined}\n                                onKeyDown={handleKeyDown}\n                                placeholder={placeholder}\n                                minLength={minLength}\n                                maxLength={maxLength}\n                                autoFocus={autoFocus}\n                                ref={inputRef as React.RefObject<HTMLTextAreaElement>}\n                            />\n                        ) : (\n                            <RawInputAutosize\n                                name={name}\n                                value={localTentativeValue}\n                                onChange={(e) => {\n                                    guardAvailableFeature(paywallFeature, () => {\n                                        onChange?.(e.currentTarget.value)\n                                        setLocalTentativeValue(e.currentTarget.value)\n                                    })\n                                }}\n                                onBlur={saveOnBlur ? (localTentativeValue !== value ? save : cancel) : undefined}\n                                onKeyDown={handleKeyDown}\n                                placeholder={placeholder}\n                                minLength={minLength}\n                                maxLength={maxLength}\n                                autoFocus={autoFocus}\n                                ref={inputRef as React.RefObject<HTMLInputElement>}\n                                wrapperClassName=\"self-center py-px\"\n                            />\n                        )}\n                        {(!mode || !!onModeToggle) && (\n                            <div className=\"EditableField__actions\">\n                                {markdown && (\n                                    <Tooltip title=\"Markdown formatting support\">\n                                        <span className=\"flex items-center\">\n                                            <IconMarkdown className=\"text-secondary text-2xl\" />\n                                        </span>\n                                    </Tooltip>\n                                )}\n                                <LemonButton\n                                    title=\"Cancel editing\"\n                                    size={typeof compactButtons === 'string' ? compactButtons : 'small'}\n                                    onClick={cancel}\n                                    type=\"secondary\"\n                                    onMouseDown={mouseDownOnCancelButton}\n                                >\n                                    Cancel\n                                </LemonButton>\n                                <LemonButton\n                                    title={\n                                        !minLength\n                                            ? 'Save'\n                                            : `Save (at least ${pluralize(\n                                                  minLength,\n                                                  'character',\n                                                  'characters'\n                                              )} required)`\n                                    }\n                                    size={typeof compactButtons === 'string' ? compactButtons : 'small'}\n                                    disabled={!isSaveable}\n                                    onClick={save}\n                                    type=\"primary\"\n                                >\n                                    {saveButtonText}\n                                </LemonButton>\n                            </div>\n                        )}\n                    </>\n                ) : (\n                    <>\n                        {localTentativeValue && markdown ? (\n                            <LemonMarkdown lowKeyHeadings>{localTentativeValue}</LemonMarkdown>\n                        ) : (\n                            <Tooltip\n                                title={isDisplayTooltipNeeded ? localTentativeValue : undefined}\n                                placement=\"bottom-start\"\n                                delayMs={0}\n                            >\n                                <span className=\"EditableField__display\" ref={displayRef}>\n                                    {localTentativeValue || <i>{placeholder}</i>}\n                                </span>\n                            </Tooltip>\n                        )}\n                        {(!mode || !!onModeToggle) && (\n                            <div className=\"EditableField__actions\">\n                                <LemonButton\n                                    title=\"Edit\"\n                                    icon={<IconPencil />}\n                                    size={compactButtons ? 'small' : undefined}\n                                    onClick={() => {\n                                        guardAvailableFeature(paywallFeature, () => {\n                                            setLocalIsEditing(true)\n                                            onModeToggle?.('edit')\n                                        })\n                                    }}\n                                    data-attr={`edit-prop-${name}`}\n                                    noPadding\n                                />\n                            </div>\n                        )}\n                    </>\n                )}\n            </div>\n            {!isEditing && notice && (\n                <Tooltip title={notice.tooltip} placement=\"right\">\n                    <span className=\"flex items-center\">\n                        {React.cloneElement(notice.icon, {\n                            ...notice.icon.props,\n                            className: clsx(notice.icon.props.className, 'EditableField__notice'),\n                        })}\n                    </span>\n                </Tooltip>\n            )}\n        </div>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_react", "import_jsx_runtime", "EditableField", "name", "value", "onChange", "onSave", "saveOnBlur", "placeholder", "minLength", "maxLength", "autoFocus", "multiline", "markdown", "compactButtons", "paywallFeature", "mode", "onModeToggle", "editingIndication", "className", "style", "dataAttr", "saveButtonText", "notice", "guardAvailableFeature", "upgradeModalLogic", "localIsEditing", "setLocalIsEditing", "localTentativeValue", "setLocalTentativeValue", "isDisplayTooltipNeeded", "setIsDisplayTooltipNeeded", "containerRef", "inputRef", "displayRef", "previousIsEditing", "endOfInput", "useResizeObserver", "isSaveable", "mouseDownOnCancelButton", "e", "cancel", "save", "isEditing", "handleKeyDown", "clsx", "react_textarea_autosize_browser_esm_default", "RawInputAutosize", "Tooltip", "IconMarkdown", "LemonButton", "pluralize", "LemonMarkdown", "IconPencil", "React"]
}
