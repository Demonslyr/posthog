{
  "version": 3,
  "sources": ["../src/scenes/pipeline/Pipeline.tsx", "../src/scenes/pipeline/AppsManagement.tsx", "../src/scenes/pipeline/AppCode.tsx", "../src/scenes/pipeline/appCodeLogic.tsx", "../src/scenes/pipeline/appsManagementLogic.tsx", "../src/scenes/pipeline/sourceAppInitialCode.tsx", "../src/scenes/pipeline/destinations/Destinations.tsx", "../src/scenes/pipeline/AppMetricSparkLine.tsx", "../src/scenes/pipeline/FrontendApps.tsx", "../src/scenes/pipeline/ImportApps.tsx", "../src/scenes/pipeline/Overview.tsx", "../src/scenes/data-warehouse/settings/DataWarehouseSelfManagedSourcesTable.tsx", "../src/scenes/pipeline/pipelineLogic.tsx", "../src/scenes/pipeline/sources/Sources.tsx", "../src/scenes/pipeline/Transformations.tsx"],
  "sourcesContent": ["import { useValues } from 'kea'\nimport { router } from 'kea-router'\nimport { ActivityLog } from 'lib/components/ActivityLog/ActivityLog'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { ConcreteLemonTab, LemonTabs } from 'lib/lemon-ui/LemonTabs'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { ActivityScope, PipelineTab } from '~/types'\n\nimport { AppsManagement } from './AppsManagement'\nimport { DESTINATION_TYPES, SITE_APP_TYPES } from './destinations/constants'\nimport { Destinations } from './destinations/Destinations'\nimport { FrontendApps } from './FrontendApps'\nimport { ImportApps } from './ImportApps'\nimport { importAppsLogic } from './importAppsLogic'\nimport { Overview } from './Overview'\nimport { pipelineAccessLogic } from './pipelineAccessLogic'\nimport { humanFriendlyTabName, pipelineLogic } from './pipelineLogic'\nimport { Sources } from './sources/Sources'\nimport { Transformations } from './Transformations'\n\nexport function Pipeline(): JSX.Element {\n    const { canGloballyManagePlugins } = useValues(pipelineAccessLogic)\n    const { currentTab } = useValues(pipelineLogic)\n    const { hasEnabledImportApps } = useValues(importAppsLogic)\n    const { featureFlags } = useValues(featureFlagLogic)\n\n    const tabs: Pick<ConcreteLemonTab<PipelineTab>, 'key' | 'content'>[] = [\n        { key: PipelineTab.Overview, content: <Overview /> },\n        { key: PipelineTab.Sources, content: <Sources /> },\n        { key: PipelineTab.Transformations, content: <Transformations /> },\n        { key: PipelineTab.Destinations, content: <Destinations types={DESTINATION_TYPES} /> },\n        {\n            key: PipelineTab.SiteApps,\n            content: featureFlags[FEATURE_FLAGS.SITE_APP_FUNCTIONS] ? (\n                <Destinations types={SITE_APP_TYPES} />\n            ) : (\n                <FrontendApps />\n            ),\n        },\n    ]\n\n    // Import apps are deprecated, we only show the tab if there are some still enabled\n    if (hasEnabledImportApps) {\n        tabs.push({ key: PipelineTab.ImportApps, content: <ImportApps /> })\n    }\n    if (canGloballyManagePlugins) {\n        tabs.push({ key: PipelineTab.AppsManagement, content: <AppsManagement /> })\n    }\n\n    tabs.push({\n        key: PipelineTab.History,\n        content: (\n            <ActivityLog scope={[ActivityScope.PLUGIN, ActivityScope.PLUGIN_CONFIG, ActivityScope.HOG_FUNCTION]} />\n        ),\n    })\n\n    return (\n        <div className=\"pipeline-scene\">\n            <LemonTabs\n                activeKey={currentTab}\n                onChange={(tab) => router.actions.push(urls.pipeline(tab as PipelineTab))}\n                tabs={tabs.map((tab) => ({\n                    ...tab,\n                    label: humanFriendlyTabName(tab.key),\n                }))}\n            />\n        </div>\n    )\n}\n\nexport const scene: SceneExport = {\n    component: Pipeline,\n    logic: pipelineLogic,\n}\n", "import { IconDownload, IconLock, IconRedo, IconTrash, IconUnlock } from '@posthog/icons'\nimport { LemonBanner, LemonDialog, LemonDivider, LemonMenu, LemonTable, LemonTag, Tooltip } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonInput } from 'lib/lemon-ui/LemonInput'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\nimport { SceneExport } from 'scenes/sceneTypes'\n\nimport { PluginInstallationType, PluginType } from '~/types'\n\nimport { AppCode } from './AppCode'\nimport { appsManagementLogic } from './appsManagementLogic'\nimport { SourcePluginKind } from './sourceAppInitialCode'\nimport { RenderApp } from './utils'\n\nexport const scene: SceneExport = {\n    component: AppsManagement,\n    logic: appsManagementLogic,\n}\n\nexport function AppsManagement(): JSX.Element {\n    // NOTE: We don't want to unmount appsManagementLogic once it's mounted. This is a memoization technique for\n    // `checkForUpdates`, as otherwise leaving the page and coming back to it would result in us checking for updates\n    // each time. Normally such a hack is a bit of a smell, but this is a staff-only page, so totally fine.\n    appsManagementLogic.mount()\n\n    const {\n        canInstallPlugins,\n        canGloballyManagePlugins,\n        missingGlobalPlugins,\n        shouldBeGlobalPlugins,\n        shouldNotBeGlobalPlugins,\n        globalPlugins,\n        localPlugins,\n        inlinePlugins,\n        pluginsLoading,\n    } = useValues(appsManagementLogic)\n    const { isDev, isCloudOrDev } = useValues(preflightLogic)\n\n    if (!canInstallPlugins || !canGloballyManagePlugins) {\n        return <>You don't have permission to manage apps.</>\n    }\n\n    return (\n        <div className=\"pipeline-apps-management-scene\">\n            {/* When plugins are still loading we don't know yet if any apps are out of sync\n            with the global state, so skip this section for smooter user experience */}\n            {isCloudOrDev &&\n                !pluginsLoading &&\n                (missingGlobalPlugins.length > 0 ||\n                    shouldBeGlobalPlugins.length > 0 ||\n                    shouldNotBeGlobalPlugins.length > 0) && <OutOfSyncApps />}\n            <h2>Manual installation</h2>\n            <InstallFromUrl />\n            {isDev && <InstallLocalApp />}\n            <InstallSourceApp />\n\n            <LemonDivider className=\"my-6\" />\n\n            <h2>Installed apps</h2>\n            <AppsToUpdate />\n            {globalPlugins && (\n                <>\n                    <h3 className=\"mt-3\">Global apps</h3>\n                    <p>These apps can be used in all organizations.</p>\n                    <AppsTable plugins={globalPlugins} />\n                </>\n            )}\n\n            {localPlugins && (\n                <>\n                    <h3 className=\"mt-3\">Local apps</h3>\n                    <p>These apps can only be used by this organization, or ones with an existing plugin config.</p>\n                    <AppsTable plugins={localPlugins} />\n                </>\n            )}\n\n            {inlinePlugins && (\n                <>\n                    <h3 className=\"mt-3\">Inline plugins</h3>\n                    <p>These plugins are inlined into plugin-server code, any updates should be done there.</p>\n                    <InlinePluginsTable plugins={inlinePlugins} />\n                </>\n            )}\n        </div>\n    )\n}\n\ntype RenderAppsTable = {\n    plugins: PluginType[]\n}\n\nfunction AppsToUpdate(): JSX.Element {\n    const { updatablePlugins, pluginsNeedingUpdates, checkingForUpdates } = useValues(appsManagementLogic)\n    const { checkForUpdates } = useActions(appsManagementLogic)\n\n    return (\n        <>\n            {updatablePlugins && (\n                <LemonButton\n                    type=\"secondary\"\n                    icon={<IconRedo />}\n                    onClick={checkForUpdates}\n                    loading={checkingForUpdates}\n                >\n                    {checkingForUpdates\n                        ? `Checking ${Object.keys(updatablePlugins).length} apps for updates`\n                        : // we by default already check all apps for updates on initial load\n                          'Check again for updates'}\n                </LemonButton>\n            )}\n            {pluginsNeedingUpdates.length > 0 && (\n                <>\n                    <h3 className=\"mt-3\">Apps to update</h3>\n                    <p>These apps have newer commits in the repository they link to.</p>\n                    <AppsTable plugins={pluginsNeedingUpdates} />\n                </>\n            )}\n        </>\n    )\n}\n\nfunction AppsTable({ plugins }: RenderAppsTable): JSX.Element {\n    const { unusedPlugins } = useValues(appsManagementLogic)\n    const { uninstallPlugin, patchPlugin, updatePlugin } = useActions(appsManagementLogic)\n\n    const onClickUninstall = (pluginId: number): void => {\n        LemonDialog.open({\n            title: 'Are you sure you wish to uninstall this app completely?',\n            primaryButton: {\n                children: 'Uninstall',\n                type: 'secondary',\n                status: 'danger',\n                onClick: () => uninstallPlugin(pluginId),\n            },\n            secondaryButton: {\n                children: 'Cancel',\n            },\n        })\n    }\n\n    const data = plugins.map((plugin) => ({ ...plugin, key: plugin.id }))\n    return (\n        <>\n            <LemonTable\n                dataSource={data}\n                columns={[\n                    {\n                        width: 60,\n                        render: function RenderAppInfo(_, plugin) {\n                            return <RenderApp plugin={plugin as PluginType} />\n                        },\n                    },\n                    {\n                        title: 'Name',\n                        render: function RenderName(_, plugin) {\n                            return (\n                                <>\n                                    <div className=\"flex gap-2 items-center\">\n                                        <span className=\"font-semibold truncate\">{plugin.name}</span>\n                                        {plugin.latest_tag && plugin.tag && plugin.latest_tag !== plugin.tag && (\n                                            <Link\n                                                to={plugin.url + '/compare/' + plugin.tag + '...' + plugin.latest_tag}\n                                            >\n                                                <LemonTag type=\"completion\">See update diff</LemonTag>\n                                            </Link>\n                                        )}\n                                    </div>\n                                    <div className=\"text-sm\">{plugin.description}</div>\n                                </>\n                            )\n                        },\n                    },\n                    {\n                        title: 'Capabilities',\n                        width: '30%',\n                        render: function RenderCapabilities(_, plugin) {\n                            // TODO: use labels by app type once we get rid of jobs and scheduled tasks\n                            return (\n                                <>\n                                    <div className=\"text-sm\">\n                                        Methods: {JSON.stringify(plugin.capabilities?.methods)}\n                                    </div>\n                                    <div className=\"text-sm\">Jobs: {JSON.stringify(plugin.capabilities?.jobs)}</div>\n                                    <div className=\"text-sm\">\n                                        Scheduled tasks: {JSON.stringify(plugin.capabilities?.scheduled_tasks)}\n                                    </div>\n                                </>\n                            )\n                        },\n                    },\n                    {\n                        title: 'Actions',\n                        width: 240,\n                        align: 'right',\n                        render: function RenderAccess(_, plugin) {\n                            return (\n                                <div className=\"flex items-center gap-2 justify-end\">\n                                    {plugin.latest_tag && plugin.tag != plugin.latest_tag && (\n                                        <LemonButton\n                                            type=\"secondary\"\n                                            size=\"small\"\n                                            icon={<IconDownload />}\n                                            onClick={() => updatePlugin(plugin.id)}\n                                        >\n                                            Update\n                                        </LemonButton>\n                                    )}\n                                    {plugin.is_global ? (\n                                        <Tooltip\n                                            title={\n                                                <>\n                                                    This app can currently be used by other organizations in this\n                                                    instance of PostHog. This action will <b>disable and hide it</b> for\n                                                    all organizations that do not have an existing pluginconfig.\n                                                </>\n                                            }\n                                        >\n                                            <LemonButton\n                                                type=\"secondary\"\n                                                size=\"small\"\n                                                icon={<IconLock />}\n                                                onClick={() => patchPlugin(plugin.id, { is_global: false })}\n                                            >\n                                                Make local\n                                            </LemonButton>\n                                        </Tooltip>\n                                    ) : (\n                                        <Tooltip\n                                            title={\n                                                <>\n                                                    This action will mark this app as installed for{' '}\n                                                    <b>all organizations</b> in this instance of PostHog.\n                                                </>\n                                            }\n                                        >\n                                            <LemonButton\n                                                type=\"secondary\"\n                                                size=\"small\"\n                                                icon={<IconUnlock />}\n                                                onClick={() => patchPlugin(plugin.id, { is_global: true })}\n                                            >\n                                                Make global\n                                            </LemonButton>\n                                        </Tooltip>\n                                    )}\n                                    <LemonButton\n                                        type=\"secondary\"\n                                        status=\"danger\"\n                                        size=\"small\"\n                                        icon={<IconTrash />}\n                                        disabledReason={\n                                            unusedPlugins.includes(plugin.id) ? undefined : 'This app is still in use.'\n                                        }\n                                        data-attr=\"plugin-uninstall\"\n                                        onClick={() => onClickUninstall(plugin.id)}\n                                    >\n                                        Uninstall\n                                    </LemonButton>\n                                </div>\n                            )\n                        },\n                    },\n                ]}\n                expandable={{\n                    expandedRowRender: function Render(plugin: PluginType) {\n                        return <AppCode pluginId={plugin.id} pluginType={plugin.plugin_type} />\n                    },\n                }}\n            />\n        </>\n    )\n}\n\nfunction InlinePluginsTable({ plugins }: RenderAppsTable): JSX.Element {\n    const data = plugins.map((plugin) => ({ ...plugin, key: plugin.id }))\n    return (\n        <>\n            <LemonTable\n                dataSource={data}\n                columns={[\n                    {\n                        title: 'Name',\n                        render: function RenderName(_, plugin) {\n                            return (\n                                <>\n                                    <div className=\"flex gap-2 items-center\">\n                                        <span className=\"font-semibold truncate\">{plugin.name}</span>\n                                    </div>\n                                    <div className=\"text-sm\">{plugin.description}</div>\n                                </>\n                            )\n                        },\n                    },\n                    {\n                        title: 'Capabilities',\n                        width: '30%',\n                        render: function RenderCapabilities(_, plugin) {\n                            // TODO: use labels by app type once we get rid of jobs and scheduled tasks\n                            return (\n                                <>\n                                    <div className=\"text-sm\">\n                                        Methods: {JSON.stringify(plugin.capabilities?.methods)}\n                                    </div>\n                                    <div className=\"text-sm\">Jobs: {JSON.stringify(plugin.capabilities?.jobs)}</div>\n                                    <div className=\"text-sm\">\n                                        Scheduled tasks: {JSON.stringify(plugin.capabilities?.scheduled_tasks)}\n                                    </div>\n                                </>\n                            )\n                        },\n                    },\n                    {\n                        title: 'Global',\n                        render: function RenderGlobal(_, plugin) {\n                            return <span>{plugin.is_global ? 'Yes' : 'No'}</span>\n                        },\n                    },\n                ]}\n            />\n        </>\n    )\n}\n\nfunction OutOfSyncApps(): JSX.Element {\n    const { shouldNotBeGlobalPlugins, shouldBeGlobalPlugins } = useValues(appsManagementLogic)\n\n    return (\n        <>\n            <h2>Out-of-sync global apps</h2>\n            <LemonBanner type=\"warning\">\n                This PostHog Cloud instance is currently out of sync with the GLOBAL_PLUGINS list.\n            </LemonBanner>\n            <MissingGlobalPlugins />\n\n            {shouldNotBeGlobalPlugins && (\n                <>\n                    <h3 className=\"mt-3\">Apps that should NOT be global</h3>\n                    <p>These apps should NOT be global according to repo.</p>\n                    <AppsTable plugins={shouldNotBeGlobalPlugins} />\n                </>\n            )}\n\n            {shouldBeGlobalPlugins && (\n                <>\n                    <h3 className=\"mt-3\">Apps that SHOULD be global</h3>\n                    <p>These already installed apps should be global according to repo.</p>\n                    <AppsTable plugins={shouldBeGlobalPlugins} />\n                </>\n            )}\n            <LemonDivider className=\"my-6\" />\n        </>\n    )\n}\n\nfunction MissingGlobalPlugins(): JSX.Element {\n    const { missingGlobalPlugins, pluginsLoading, installingPluginUrl } = useValues(appsManagementLogic)\n    const { installPlugin } = useActions(appsManagementLogic)\n\n    if (missingGlobalPlugins.length === 0) {\n        return <></>\n    }\n    const data = missingGlobalPlugins.map((url: string) => ({ url }))\n    return (\n        <>\n            <h3 className=\"mt-3\">Missing global apps</h3>\n            <p>These plugins are defined in the GLOBAL_PLUGINS list, but are not installed on this instance.</p>\n            <LemonTable\n                dataSource={data}\n                columns={[\n                    {\n                        title: 'URL',\n                        key: 'url',\n                        render: function RenderUrl(_, { url }) {\n                            return (\n                                <Link to={url} target=\"_blank\">\n                                    {url}\n                                </Link>\n                            )\n                        },\n                    },\n                    {\n                        title: 'Actions',\n                        width: 0,\n                        align: 'right',\n                        render: function RenderInstallButton(_, { url }) {\n                            return (\n                                <LemonButton\n                                    type=\"secondary\"\n                                    size=\"small\"\n                                    loading={pluginsLoading && installingPluginUrl === url}\n                                    onClick={() => installPlugin(PluginInstallationType.Repository, url)}\n                                    id={`install-plugin-${url}`}\n                                >\n                                    Install\n                                </LemonButton>\n                            )\n                        },\n                    },\n                ]}\n            />\n        </>\n    )\n}\n\nfunction InstallFromUrl(): JSX.Element {\n    // On cloud we only allow public PostHog org repository plugins\n    // On self-hosted we allow any repo, could be private\n    const { isCloudOrDev } = useValues(preflightLogic)\n    const { pluginUrl } = useValues(appsManagementLogic)\n    const { setPluginUrl, installPlugin } = useActions(appsManagementLogic)\n\n    const cloudRequiredPrefix = 'https://github.com/PostHog/'\n    let disabledReason = !pluginUrl ? 'Please enter a url' : undefined\n    if (isCloudOrDev) {\n        disabledReason = !pluginUrl.startsWith(cloudRequiredPrefix) ? 'Please enter a PostHog org repo url' : undefined\n    }\n\n    return (\n        <>\n            <h3 className=\"mt-3\">Install from GitHub</h3>\n            <p>\n                {isCloudOrDev ? (\n                    <>\n                        Only PostHog organization repositories are allowed, i.e. starting with{' '}\n                        <Link to={cloudRequiredPrefix} target=\"blank\">\n                            {cloudRequiredPrefix}\n                        </Link>{' '}\n                    </>\n                ) : (\n                    <>\n                        For private repositories, append <code>?private_token=TOKEN</code> to the end of the URL.\n                    </>\n                )}\n            </p>\n            <div className=\"flex items-center gap-2\">\n                <LemonInput\n                    value={pluginUrl}\n                    onChange={setPluginUrl}\n                    placeholder=\"https://github.com/PostHog/posthog-hello-world-plugin\"\n                    className=\"flex-1\"\n                />\n                <LemonButton\n                    disabledReason={disabledReason}\n                    type=\"primary\"\n                    onClick={() => installPlugin(PluginInstallationType.Custom)}\n                >\n                    Fetch and install\n                </LemonButton>\n            </div>\n        </>\n    )\n}\n\nfunction InstallLocalApp(): JSX.Element {\n    const { localPluginPath } = useValues(appsManagementLogic)\n    const { setLocalPluginPath, installPlugin } = useActions(appsManagementLogic)\n\n    return (\n        <>\n            <div>\n                <h3 className=\"mt-3\">Install from local path</h3>\n                <p>To install a local app from this computer/server, give its full path below.</p>\n                <div className=\"flex items-center gap-2\">\n                    <LemonInput\n                        value={localPluginPath}\n                        onChange={setLocalPluginPath}\n                        placeholder=\"/var/posthog/apps/helloworldapp\"\n                        className=\"flex-1\"\n                    />\n                    <LemonButton\n                        disabledReason={!localPluginPath ? 'Please enter a path' : undefined}\n                        type=\"primary\"\n                        onClick={() => installPlugin(PluginInstallationType.Local)}\n                    >\n                        Install\n                    </LemonButton>\n                </div>\n            </div>\n        </>\n    )\n}\n\nfunction InstallSourceApp(): JSX.Element {\n    const { sourcePluginName, sourcePluginKind } = useValues(appsManagementLogic)\n    const { setSourcePluginName, installPlugin, setSourcePluginKind } = useActions(appsManagementLogic)\n\n    const menuItems = Object.values(SourcePluginKind).map((kind) => ({\n        label: kind,\n        onClick: () => {\n            setSourcePluginKind(kind)\n        },\n    }))\n\n    return (\n        <div>\n            <h3 className=\"mt-3\">Install by writing source code</h3>\n            <p>\n                To install a source app provide the name and start coding.\n                <Link to=\"https://posthog.com/docs/apps\" target=\"_blank\">\n                    {' '}\n                    Read the documentation for more information!\n                </Link>\n            </p>\n            <div className=\"flex items-center gap-2\">\n                <LemonInput\n                    value={sourcePluginName}\n                    onChange={setSourcePluginName}\n                    placeholder=\"Hello World App\"\n                    className=\"flex-1\"\n                />\n                <LemonMenu items={menuItems} placement=\"bottom-end\">\n                    <LemonButton size=\"small\">{sourcePluginKind}</LemonButton>\n                </LemonMenu>\n                <LemonButton\n                    disabledReason={!sourcePluginName ? 'Please enter a name' : undefined}\n                    type=\"primary\"\n                    onClick={() => installPlugin(PluginInstallationType.Source)}\n                >\n                    Install\n                </LemonButton>\n            </div>\n        </div>\n    )\n}\n", "import { IconPencil } from '@posthog/icons'\nimport { LemonBanner, LemonButton, LemonModal, LemonTabs, Link, Spinner } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { Field, Form } from 'kea-forms'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { CodeEditor } from 'lib/monaco/CodeEditor'\n\nimport { PluginInstallationType } from '~/types'\n\nimport { appsCodeLogic } from './appCodeLogic'\nimport { appsManagementLogic } from './appsManagementLogic'\n\nexport function AppCode({\n    pluginId,\n    pluginType,\n}: {\n    pluginId: number\n    pluginType: PluginInstallationType\n}): JSX.Element {\n    const logicProps = { pluginId }\n    const logic = appsCodeLogic(logicProps)\n    const {\n        currentFile,\n        filenames,\n        pluginSource,\n        pluginSourceLoading,\n        editingAppCode,\n        pluginSourceAllErrors,\n        pluginSourceHasErrors,\n        isPluginSourceSubmitting,\n    } = useValues(logic)\n    const { setCurrentFile, cancelEditing, editAppCode, submitPluginSource } = useActions(logic)\n    const { canGloballyManagePlugins, plugins } = useValues(appsManagementLogic)\n\n    if (pluginSourceLoading) {\n        return <Spinner />\n    }\n\n    const canEdit = canGloballyManagePlugins && pluginType === PluginInstallationType.Source\n\n    return (\n        <>\n            <LemonModal\n                onClose={cancelEditing}\n                isOpen={editingAppCode}\n                width={600}\n                title={'Editing source code of ' + plugins[pluginId].name}\n                description={\n                    <p>\n                        Read our{' '}\n                        <Link to=\"https://posthog.com/docs/apps/build\" target=\"_blank\">\n                            app building overview in PostHog docs\n                        </Link>{' '}\n                        for a good grasp of the possibilities.\n                    </p>\n                }\n                footer={\n                    <>\n                        <LemonButton type=\"secondary\" onClick={cancelEditing}>\n                            Cancel\n                        </LemonButton>\n                        <LemonButton\n                            loading={isPluginSourceSubmitting}\n                            type=\"primary\"\n                            onClick={() => submitPluginSource()}\n                        >\n                            Save\n                        </LemonButton>\n                    </>\n                }\n            >\n                <Form logic={appsCodeLogic} props={logicProps} formKey=\"pluginSource\">\n                    {canEdit ? (\n                        <>\n                            {pluginSourceLoading ? (\n                                <Spinner />\n                            ) : (\n                                <>\n                                    <LemonTabs\n                                        activeKey={currentFile}\n                                        onChange={(filename) => setCurrentFile(filename)}\n                                        tabs={Object.values(filenames).map((filename) => ({\n                                            label: filename,\n                                            key: filename,\n                                            content: (\n                                                <>\n                                                    {pluginSourceHasErrors && (\n                                                        <LemonBanner type=\"error\">\n                                                            {Object.entries(pluginSourceAllErrors).map(\n                                                                ([filename, error]) => (\n                                                                    <p key={filename}>\n                                                                        {filename}: {error}\n                                                                    </p>\n                                                                )\n                                                            )}\n                                                        </LemonBanner>\n                                                    )}\n                                                    <Field name={[currentFile]}>\n                                                        {({ value, onChange }) => (\n                                                            <CodeEditor\n                                                                path={currentFile}\n                                                                language={\n                                                                    currentFile.endsWith('.json')\n                                                                        ? 'json'\n                                                                        : 'typescript'\n                                                                }\n                                                                value={value}\n                                                                onChange={(v) => onChange(v ?? '')}\n                                                                height={700}\n                                                                options={{\n                                                                    minimap: { enabled: false },\n                                                                }}\n                                                            />\n                                                        )}\n                                                    </Field>\n                                                </>\n                                            ),\n                                        }))}\n                                    />\n                                </>\n                            )}\n                        </>\n                    ) : null}\n                </Form>\n            </LemonModal>\n\n            <LemonTabs\n                activeKey={currentFile}\n                onChange={(filename) => setCurrentFile(filename)}\n                tabs={Object.values(filenames).map((filename) => ({\n                    label: filename,\n                    key: filename,\n                    content: (\n                        <div className=\"mr-4\">\n                            <CodeSnippet\n                                language={currentFile.endsWith('.json') ? Language.JSON : Language.JavaScript}\n                                thing={currentFile}\n                                maxLinesWithoutExpansion={20}\n                                actions={\n                                    canEdit ? (\n                                        <LemonButton\n                                            onClick={editAppCode}\n                                            icon={<IconPencil />}\n                                            title=\"Edit the code\"\n                                            noPadding\n                                        />\n                                    ) : undefined\n                                }\n                                wrap\n                            >\n                                {pluginSource[currentFile] ?? ''}\n                            </CodeSnippet>\n                        </div>\n                    ),\n                }))}\n            />\n        </>\n    )\n}\n", "import { actions, afterMount, kea, key, listeners, path, props, reducers } from 'kea'\nimport { forms } from 'kea-forms'\nimport api from 'lib/api'\n\nimport type { appsCodeLogicType } from './appCodeLogicType'\n\nexport interface AppCodeProps {\n    pluginId: number\n}\n\nexport const appsCodeLogic = kea<appsCodeLogicType>([\n    props({} as AppCodeProps),\n    key(({ pluginId }: AppCodeProps) => pluginId),\n    path((id) => ['scenes', 'pipeline', 'appsCodeLogic', id]),\n    actions({\n        setCurrentFile: (currentFile: string) => ({ currentFile }),\n        editAppCode: true,\n        cancelEditing: true,\n        fetchPluginSource: true,\n        fetchPluginSourceComplete: true,\n        setFilenames: (code: Record<string, string>) => ({ code }),\n    }),\n    reducers({\n        currentFile: [\n            'plugin.json',\n            {\n                setCurrentFile: (_, { currentFile }) => currentFile,\n            },\n        ],\n        editingAppCode: [\n            false,\n            {\n                editAppCode: () => true,\n                cancelEditing: () => false,\n                submitPluginSourceSuccess: () => false,\n            },\n        ],\n        pluginSourceLoading: [\n            false,\n            {\n                fetchPluginSource: () => true,\n                fetchPluginSourceComplete: () => false,\n            },\n        ],\n        filenames: [\n            [] as string[],\n            {\n                setFilenames: (_, { code }) => (code ? Object.keys(code) : []),\n            },\n        ],\n    }),\n    listeners(({ actions, props }) => ({\n        cancelEditing: async () => {\n            actions.fetchPluginSource()\n        },\n        fetchPluginSource: async () => {\n            try {\n                const response = await api.get(`api/organizations/@current/plugins/${props.pluginId}/source`)\n                const formattedCode = {}\n                for (const [file, source] of Object.entries(response || {})) {\n                    if (source && file.match(/\\.(ts|tsx|js|jsx|json)$/)) {\n                        try {\n                            const prettySource = await formatSource(file, source as string)\n                            formattedCode[file] = prettySource\n                        } catch (e: any) {\n                            formattedCode[file] = source\n                        }\n                    }\n                }\n                actions.setPluginSourceValues(formattedCode)\n                actions.setFilenames(formattedCode)\n            } finally {\n                actions.fetchPluginSourceComplete()\n            }\n        },\n    })),\n    forms(({ actions, props, values }) => ({\n        pluginSource: {\n            defaults: {} as Record<string, string>,\n            preSubmit: async () => {\n                const changes = {}\n                const errors = {}\n                for (const [file, source] of Object.entries(values.pluginSource)) {\n                    if (source && file.match(/\\.(ts|tsx|js|jsx|json)$/)) {\n                        try {\n                            const prettySource = await formatSource(file, source)\n                            if (prettySource !== source) {\n                                changes[file] = prettySource\n                            }\n                        } catch (e: any) {\n                            errors[file] = e.message\n                        }\n                    }\n                }\n                if (Object.keys(changes).length > 0) {\n                    actions.setPluginSourceValues(changes)\n                }\n                actions.setPluginSourceManualErrors(errors)\n            },\n            submit: async () => {\n                const response = await api.update(\n                    `api/organizations/@current/plugins/${props.pluginId}/update_source`,\n                    values.pluginSource\n                )\n                actions.setPluginSourceValues(response)\n            },\n        },\n    })),\n    afterMount(({ actions }) => {\n        actions.fetchPluginSource()\n    }),\n])\n\nexport async function formatSource(filename: string, source: string): Promise<string> {\n    if (filename.endsWith('.json')) {\n        return JSON.stringify(JSON.parse(source), null, 4) + '\\n'\n    }\n\n    // Lazy-load prettier, as it's pretty big and its only use is formatting app source code\n    const prettier = (await import('prettier/standalone')).default\n    const parserTypeScript = (await import('prettier/parser-typescript')).default\n\n    return prettier.format(source, {\n        filepath: filename,\n        parser: 'typescript',\n        plugins: [parserTypeScript as any],\n        // copied from .prettierrc\n        semi: false,\n        trailingComma: 'es5',\n        singleQuote: true,\n        tabWidth: 4,\n        printWidth: 120,\n    })\n}\n", "import { actions, afterMount, connect, kea, listeners, path, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast/LemonToast'\nimport posthog from 'posthog-js'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { PluginInstallationType, PluginType } from '~/types'\n\nimport { canInstallPlugins } from './access'\nimport type { appsManagementLogicType } from './appsManagementLogicType'\nimport { pipelineAccessLogic } from './pipelineAccessLogic'\nimport { getInitialCode, SourcePluginKind } from './sourceAppInitialCode'\nimport { GLOBAL_PLUGINS, loadPluginsFromUrl } from './utils'\n\nfunction capturePluginEvent(event: string, plugin: PluginType, type: PluginInstallationType): void {\n    posthog.capture(event, {\n        plugin_name: plugin.name,\n        plugin_url: plugin.url?.startsWith('file:') ? 'file://masked-local-path' : plugin.url,\n        plugin_tag: plugin.tag,\n        plugin_installation_type: type,\n    })\n}\nexport interface PluginUpdateStatusType {\n    latest_tag: string\n    upToDate: boolean\n    updated: boolean\n    error: string | null\n}\n\nexport const appsManagementLogic = kea<appsManagementLogicType>([\n    path(['scenes', 'pipeline', 'appsManagementLogic']),\n    connect({\n        values: [userLogic, ['user'], pipelineAccessLogic, ['canGloballyManagePlugins']],\n    }),\n    actions({\n        setPluginUrl: (pluginUrl: string) => ({ pluginUrl }),\n        setLocalPluginPath: (localPluginPath: string) => ({ localPluginPath }),\n        setSourcePluginName: (sourcePluginName: string) => ({ sourcePluginName }),\n        setSourcePluginKind: (sourcePluginKind: SourcePluginKind) => ({ sourcePluginKind }),\n        uninstallPlugin: (id: number) => ({ id }),\n        installPlugin: (pluginType: PluginInstallationType, url?: string) => ({ pluginType, url }),\n        installPluginFromUrl: (url: string) => ({ url }),\n        installSourcePlugin: (name: string) => ({ name }),\n        installLocalPlugin: (path: string) => ({ path }),\n        patchPlugin: (id: number, pluginChanges: Partial<PluginType> = {}) => ({ id, pluginChanges }),\n        updatePlugin: (id: number) => ({ id }),\n        checkForUpdates: true,\n        checkedForUpdates: true,\n        setPluginLatestTag: (id: number, latestTag: string) => ({ id, latestTag }),\n    }),\n    loaders(({ values }) => ({\n        plugins: [\n            {} as Record<number, PluginType>,\n            {\n                loadPlugins: async () => {\n                    return loadPluginsFromUrl('api/organizations/@current/plugins')\n                },\n                installPlugin: async ({ pluginType, url }) => {\n                    if (!values.canInstallPlugins) {\n                        lemonToast.error(\"You don't have permission to install apps.\")\n                        return values.plugins\n                    }\n                    const payload: any = { plugin_type: pluginType }\n                    if (url || pluginType === PluginInstallationType.Repository) {\n                        payload.url = url\n                    } else if (pluginType === PluginInstallationType.Custom) {\n                        payload.url = values.pluginUrl\n                    } else if (pluginType === PluginInstallationType.Local) {\n                        payload.url = `file:${values.localPluginPath}`\n                    } else if (pluginType === PluginInstallationType.Source) {\n                        payload.name = values.sourcePluginName\n                    } else {\n                        lemonToast.error('Unsupported installation type.')\n                        return values.plugins\n                    }\n                    const response: PluginType = await api.create('api/organizations/@current/plugins', payload)\n                    if (pluginType === PluginInstallationType.Source) {\n                        await api.update(\n                            `api/organizations/@current/plugins/${response.id}/update_source`,\n                            getInitialCode(values.sourcePluginName, values.sourcePluginKind)\n                        )\n                    }\n                    capturePluginEvent(`plugin installed`, response, pluginType)\n                    return { ...values.plugins, [response.id]: response }\n                },\n                uninstallPlugin: async ({ id }) => {\n                    if (!values.canGloballyManagePlugins) {\n                        lemonToast.error(\"You don't have permission to manage apps.\")\n                    }\n                    await api.delete(`api/organizations/@current/plugins/${id}`)\n                    capturePluginEvent(`plugin uninstalled`, values.plugins[id], values.plugins[id].plugin_type)\n                    const { [id]: _discard, ...rest } = values.plugins\n                    return rest\n                },\n                patchPlugin: async ({ id, pluginChanges }) => {\n                    if (!values.canGloballyManagePlugins) {\n                        lemonToast.error(\"You don't have permission to update apps.\")\n                    }\n                    const response = await api.update(`api/organizations/@current/plugins/${id}`, pluginChanges)\n                    return { ...values.plugins, [id]: response }\n                },\n                setPluginLatestTag: async ({ id, latestTag }) => {\n                    return { ...values.plugins, [id]: { ...values.plugins[id], latest_tag: latestTag } }\n                },\n                updatePlugin: async ({ id }) => {\n                    if (!values.canGloballyManagePlugins) {\n                        lemonToast.error(\"You don't have permission to update apps.\")\n                    }\n                    // TODO: the update failed\n                    const response = await api.create(`api/organizations/@current/plugins/${id}/upgrade`)\n                    capturePluginEvent(`plugin updated`, values.plugins[id], values.plugins[id].plugin_type)\n                    lemonToast.success(`Plugin ${response.name} updated!`)\n                    return { ...values.plugins, [id]: response }\n                },\n            },\n        ],\n        unusedPlugins: [\n            // used to know if plugin can be uninstalled\n            [] as number[],\n            {\n                loadUnusedPlugins: async () => {\n                    const results = await api.get('api/organizations/@current/plugins/unused')\n                    return results\n                },\n            },\n        ],\n    })),\n    reducers({\n        installingPluginUrl: [\n            null as string | null,\n            {\n                installPlugin: (_, { url }) => url || null,\n                installPluginSuccess: () => null,\n                installPluginFailure: () => null,\n            },\n        ],\n        pluginUrl: [\n            '',\n            {\n                setPluginUrl: (_, { pluginUrl }) => pluginUrl,\n                installPluginSuccess: () => '',\n            },\n        ],\n        localPluginPath: [\n            '',\n            {\n                setLocalPluginPath: (_, { localPluginPath }) => localPluginPath,\n                installPluginSuccess: () => '',\n            },\n        ],\n        sourcePluginName: [\n            '',\n            {\n                setSourcePluginName: (_, { sourcePluginName }) => sourcePluginName,\n                installPluginSuccess: () => '',\n            },\n        ],\n        sourcePluginKind: [\n            SourcePluginKind.FilterEvent as SourcePluginKind,\n            {\n                setSourcePluginKind: (_, { sourcePluginKind }) => sourcePluginKind,\n                installPluginSuccess: () => SourcePluginKind.FilterEvent,\n            },\n        ],\n        checkingForUpdates: [\n            false,\n            {\n                checkForUpdates: () => true,\n                checkedForUpdates: () => false,\n            },\n        ],\n    }),\n    selectors({\n        canInstallPlugins: [(s) => [s.user], (user) => canInstallPlugins(user?.organization)],\n        inlinePlugins: [\n            (s) => [s.plugins],\n            (plugins) =>\n                Object.values(plugins).filter((plugin) => plugin.plugin_type === PluginInstallationType.Inline),\n        ],\n        appPlugins: [\n            (s) => [s.plugins],\n            (plugins) =>\n                Object.values(plugins).filter((plugin) => plugin.plugin_type !== PluginInstallationType.Inline),\n        ],\n        globalPlugins: [\n            (s) => [s.appPlugins],\n            (plugins) => Object.values(plugins).filter((plugin) => plugin.is_global),\n        ],\n        localPlugins: [\n            (s) => [s.appPlugins],\n            (plugins) => Object.values(plugins).filter((plugin) => !plugin.is_global),\n        ],\n        missingGlobalPlugins: [\n            (s) => [s.appPlugins],\n            (plugins) => {\n                const existingUrls = new Set(Object.values(plugins).map((p) => p.url))\n                return Array.from(GLOBAL_PLUGINS).filter((url) => !existingUrls.has(url))\n            },\n        ],\n        shouldBeGlobalPlugins: [\n            (s) => [s.appPlugins],\n            (plugins) => {\n                return Object.values(plugins).filter(\n                    (plugin) => plugin.url && GLOBAL_PLUGINS.has(plugin.url) && !plugin.is_global\n                )\n            },\n        ],\n        shouldNotBeGlobalPlugins: [\n            (s) => [s.appPlugins],\n            (plugins) => {\n                return Object.values(plugins).filter(\n                    (plugin) => !(plugin.url && GLOBAL_PLUGINS.has(plugin.url)) && plugin.is_global\n                )\n            },\n        ],\n        updatablePlugins: [\n            (s) => [s.appPlugins],\n            (plugins) =>\n                Object.values(plugins).filter(\n                    (plugin) => plugin.plugin_type !== PluginInstallationType.Source && !plugin.url?.startsWith('file:')\n                ),\n        ],\n        pluginsNeedingUpdates: [\n            (s) => [s.updatablePlugins],\n            (plugins) => {\n                return plugins.filter((plugin) => plugin.latest_tag && plugin.tag !== plugin.latest_tag)\n            },\n        ],\n    }),\n    listeners(({ actions, values }) => ({\n        checkForUpdates: async () => {\n            await Promise.all(\n                values.updatablePlugins.map(async (plugin) => {\n                    try {\n                        const updates = await api.get(\n                            `api/organizations/@current/plugins/${plugin.id}/check_for_updates`\n                        )\n                        actions.setPluginLatestTag(plugin.id, updates.plugin.latest_tag)\n                    } catch (e) {\n                        lemonToast.error(`Error checking for updates for ${plugin.name}: ${JSON.stringify(e)}`)\n                    }\n                })\n            )\n\n            actions.checkedForUpdates()\n        },\n    })),\n    afterMount(({ actions }) => {\n        actions.loadPlugins()\n        actions.loadUnusedPlugins()\n        actions.checkForUpdates()\n    }),\n])\n", "export enum SourcePluginKind {\n    FilterEvent = 'filterEvent',\n    ModifyEvent = 'modifyEvent',\n    ComposeWebhook = 'composeWebhook',\n    Site = 'site',\n    Frontend = 'frontend',\n}\n\nexport function getInitialCode(name: string, kind: SourcePluginKind): Record<string, any> {\n    switch (kind) {\n        case SourcePluginKind.FilterEvent:\n            return {\n                'plugin.json': JSON.stringify(\n                    {\n                        name: name,\n                        config: [\n                            {\n                                markdown: 'Specify your config here',\n                            },\n                            {\n                                key: 'eventToSkip',\n                                name: 'Event to skip',\n                                type: 'string',\n                                hint: 'If the event name matches this, it will be skipped',\n                                default: '$pageview',\n                                required: false,\n                            },\n                        ],\n                    },\n                    null,\n                    4\n                ),\n                'index.ts': `// Learn more about plugins at: https://posthog.com/docs/apps/build\n\n// Processes each event, optionally dropping it\nexport function processEvent(event, { config }) {\n    if (event.event === config.eventToSkip) {\n        return null\n    }\n    return event\n}\n\n// Runs when the plugin is loaded, allows for preparing it as needed\nexport function setupPlugin (meta) {\n    console.log(\\`The date is \\${new Date().toDateString()}\\`)\n}`,\n            }\n        case SourcePluginKind.ModifyEvent:\n            return {\n                'plugin.json': JSON.stringify(\n                    {\n                        name: name,\n                        config: [\n                            {\n                                markdown: 'Specify your config here',\n                            },\n                            {\n                                key: 'propertyToRemove',\n                                name: 'Property to remove',\n                                type: 'string',\n                                hint: 'This property will be removed from all events',\n                                default: '$browser',\n                                required: false,\n                            },\n                        ],\n                    },\n                    null,\n                    4\n                ),\n                'index.ts': `// Learn more about plugins at: https://posthog.com/docs/apps/build\n\n// Processes each event, optionally modify it\nexport function processEvent(event, { config }) {\n    event.properties[config.propertyToRemove] = undefined\n    return event\n}\n\n// Runs when the plugin is loaded, allows for preparing it as needed\nexport function setupPlugin (meta) {\n    console.log(\\`The date is \\${new Date().toDateString()}\\`)\n}`,\n            }\n        case SourcePluginKind.ComposeWebhook:\n            return {\n                'plugin.json': JSON.stringify(\n                    {\n                        name: name,\n                        config: [\n                            {\n                                markdown: 'Specify your config here',\n                            },\n                            {\n                                key: 'url',\n                                name: 'The destination url',\n                                type: 'string',\n                                hint: 'Where the webhook will be sent to',\n                                default: '',\n                                required: true,\n                            },\n                        ],\n                    },\n                    null,\n                    4\n                ),\n                'index.ts': `// Learn more about plugins at: https://posthog.com/docs/apps/build\nimport { PostHogEvent, Webhook } from '@posthog/plugin-scaffold'\n\nexport function composeWebhook(event: PostHogEvent, { config }: any): Webhook {\n    return {\n        url: config.url,\n        body: JSON.stringify(event),\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        method: 'POST',\n    }\n}`,\n            }\n        case SourcePluginKind.Site:\n            return {\n                'plugin.json': JSON.stringify(\n                    {\n                        name: name,\n                        config: [\n                            {\n                                markdown: 'Specify your config here',\n                            },\n                            {\n                                key: 'name',\n                                name: 'Person to greet',\n                                type: 'string',\n                                hint: 'Used to personalise the property `hello`',\n                                default: 'world',\n                                required: false,\n                            },\n                        ],\n                    },\n                    null,\n                    4\n                ),\n                'site.ts': `export function inject({ config, posthog }) {\\n    console.log('Hello from PostHog-JS')\\n}\\n\"`,\n            }\n        case SourcePluginKind.Frontend:\n            return {\n                'plugin.json': JSON.stringify(\n                    {\n                        name: name,\n                        config: [\n                            {\n                                markdown: 'Specify your config here',\n                            },\n                            {\n                                key: 'name',\n                                name: 'Person to greet',\n                                type: 'string',\n                                hint: 'Used to personalise the property `hello`',\n                                default: 'world',\n                                required: false,\n                            },\n                        ],\n                    },\n                    null,\n                    4\n                ),\n                'frontend.tsx': `import React from \"react\"\n\n                export const scene = {\n                    title: \"My Stuff\",\n                    component: function MyStuff({ config }) {\n                        return (\n                            <div>\n                                <h1>My Favourite Links</h1>\n                                <ul>\n                                    <li>\n                                        <a href=\"https://news.ycombinator.com\">The NEWS</a>\n                                    </li>\n                                </ul>\n                                <h1>My Favourite Cow</h1>\n                                <img src=\"https://media.giphy.com/media/RYKFEEjtYpxL2/giphy.gif\" />\n                            </div>\n                        )\n                    },\n                }`,\n            }\n    }\n}\n", "import { DndContext, DragEndEvent } from '@dnd-kit/core'\nimport { restrictToParentElement, restrictToVerticalAxis } from '@dnd-kit/modifiers'\nimport { arrayMove, SortableContext, useSortable, verticalListSortingStrategy } from '@dnd-kit/sortable'\nimport { CSS } from '@dnd-kit/utilities'\nimport { LemonTable, LemonTableColumn, LemonTag, Link, Tooltip } from '@posthog/lemon-ui'\nimport { LemonBadge, LemonButton, LemonModal } from '@posthog/lemon-ui'\nimport { clsx } from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { PayGateMini } from 'lib/components/PayGateMini/PayGateMini'\nimport { ProductIntroduction } from 'lib/components/ProductIntroduction/ProductIntroduction'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonMenuOverlay } from 'lib/lemon-ui/LemonMenu/LemonMenu'\nimport { updatedAtColumn } from 'lib/lemon-ui/LemonTable/columnUtils'\nimport { LemonTableLink } from 'lib/lemon-ui/LemonTable/LemonTableLink'\nimport { useEffect, useState } from 'react'\nimport { urls } from 'scenes/urls'\n\nimport { AvailableFeature, HogFunctionTypeType, PipelineNodeTab, PipelineStage, ProductKey } from '~/types'\n\nimport { AppMetricSparkLine } from '../AppMetricSparkLine'\nimport { FrontendApps } from '../FrontendApps'\nimport { HogFunctionIcon } from '../hogfunctions/HogFunctionIcon'\nimport { HogFunctionStatusIndicator } from '../hogfunctions/HogFunctionStatusIndicator'\nimport { hogFunctionTypeToPipelineStage } from '../hogfunctions/urls'\nimport { AppMetricSparkLineV2 } from '../metrics/AppMetricsV2Sparkline'\nimport { NewButton } from '../NewButton'\nimport { pipelineAccessLogic } from '../pipelineAccessLogic'\nimport { Destination, FunctionDestination, PipelineBackend, SiteApp, Transformation } from '../types'\nimport { pipelineNodeMenuCommonItems, RenderApp, RenderBatchExportIcon } from '../utils'\nimport { DestinationsFilters } from './DestinationsFilters'\nimport { destinationsFiltersLogic } from './destinationsFiltersLogic'\nimport { pipelineDestinationsLogic } from './destinationsLogic'\nimport { DestinationOptionsTable } from './NewDestinations'\n\nexport interface DestinationsProps {\n    types: HogFunctionTypeType[]\n}\n\nexport function Destinations({ types }: DestinationsProps): JSX.Element {\n    const { destinations, loading } = useValues(pipelineDestinationsLogic({ types }))\n\n    return (\n        <>\n            {types.includes('destination') ? (\n                <>\n                    <PageHeader\n                        caption=\"Send your data in real time or in batches to destinations outside of PostHog.\"\n                        buttons={<NewButton stage={PipelineStage.Destination} />}\n                    />\n                    <PayGateMini feature={AvailableFeature.DATA_PIPELINES} className=\"mb-2\">\n                        <ProductIntroduction\n                            productName=\"Pipeline destinations\"\n                            thingName=\"destination\"\n                            productKey={ProductKey.PIPELINE_DESTINATIONS}\n                            description=\"Pipeline destinations allow you to export data outside of PostHog, such as webhooks to Slack.\"\n                            docsURL=\"https://posthog.com/docs/cdp\"\n                            actionElementOverride={<NewButton stage={PipelineStage.Destination} />}\n                            isEmpty={destinations.length === 0 && !loading}\n                        />\n                    </PayGateMini>\n                </>\n            ) : types.includes('site_app') ? (\n                <PageHeader\n                    caption=\"Run custom scripts on your website.\"\n                    buttons={<NewButton stage={PipelineStage.SiteApp} />}\n                />\n            ) : types.includes('transformation') ? (\n                <>\n                    <ReorderTransformationsModal types={types} />\n                </>\n            ) : null}\n\n            <DestinationsTable types={types} />\n            <div className=\"mt-4\" />\n            <h2>\n                {types.includes('destination')\n                    ? 'New destinations'\n                    : types.includes('site_app')\n                    ? 'New site app'\n                    : types.includes('transformation')\n                    ? 'New transformation'\n                    : 'New'}\n            </h2>\n            <DestinationOptionsTable types={types} />\n            {/* Old site-apps until we migrate everyone onto the new ones */}\n            {types.includes('site_app') ? <FrontendApps asLegacyList /> : null}\n        </>\n    )\n}\n\nexport type DestinationsTableProps = {\n    types: HogFunctionTypeType[]\n    hideFeedback?: boolean\n    hideAddDestinationButton?: boolean\n}\n\nexport function DestinationsTable({\n    hideFeedback,\n    hideAddDestinationButton,\n    types,\n}: DestinationsTableProps): JSX.Element {\n    const { canConfigurePlugins, canEnableDestination } = useValues(pipelineAccessLogic)\n    const { loading, filteredDestinations, destinations, hiddenDestinations } = useValues(\n        pipelineDestinationsLogic({ types })\n    )\n    const { toggleNode, deleteNode, openReorderTransformationsModal } = useActions(pipelineDestinationsLogic({ types }))\n    const { resetFilters } = useActions(destinationsFiltersLogic({ types }))\n\n    const showMetricsHistory = types.includes('destination') || types.includes('transformation')\n    const showFrequencyInterval = types.includes('destination')\n    const simpleName =\n        types.includes('destination') || types.includes('site_destination')\n            ? 'destination'\n            : types.includes('site_app')\n            ? 'site app'\n            : 'Hog function'\n\n    const enabledTransformations = destinations.filter(\n        (d): d is FunctionDestination => d.stage === PipelineStage.Transformation && d.enabled\n    )\n\n    const showPriorityColumn = types.includes('transformation')\n\n    return (\n        <div className=\"space-y-4\">\n            <DestinationsFilters\n                types={types}\n                hideFeedback={hideFeedback}\n                hideAddDestinationButton={hideAddDestinationButton}\n            />\n\n            {types.includes('transformation') && enabledTransformations.length > 1 && (\n                <div className=\"flex items-center gap-2\">\n                    Processed sequentially.\n                    <LemonButton\n                        onClick={() => openReorderTransformationsModal()}\n                        noPadding\n                        id=\"transformation-reorder\"\n                        disabledReason={\n                            canConfigurePlugins ? undefined : 'You do not have permission to reorder Transformations.'\n                        }\n                    >\n                        Change order\n                    </LemonButton>\n                </div>\n            )}\n\n            <LemonTable\n                dataSource={filteredDestinations}\n                size=\"small\"\n                loading={loading}\n                columns={[\n                    ...(showPriorityColumn\n                        ? [\n                              {\n                                  title: 'Prio',\n                                  key: 'order',\n                                  width: 0,\n                                  align: 'center',\n                                  sorter: (a, b) => {\n                                      if (\n                                          a.backend === PipelineBackend.HogFunction &&\n                                          b.backend === PipelineBackend.HogFunction\n                                      ) {\n                                          const orderA = a.hog_function.execution_order || 0\n                                          const orderB = b.hog_function.execution_order || 0\n                                          return orderA - orderB\n                                      }\n                                      return 0\n                                  },\n                                  render: function RenderOrdering(_, destination) {\n                                      if (destination.backend === PipelineBackend.HogFunction && destination.enabled) {\n                                          const enabledTransformations = filteredDestinations\n                                              .filter(\n                                                  (d): d is FunctionDestination =>\n                                                      d.backend === PipelineBackend.HogFunction && d.enabled\n                                              )\n                                              .sort(\n                                                  (a, b) =>\n                                                      (a.hog_function.execution_order || 0) -\n                                                      (b.hog_function.execution_order || 0)\n                                              )\n\n                                          const index = enabledTransformations.findIndex((t) => t.id === destination.id)\n                                          return <div className=\"text-center\">{index + 1}</div>\n                                      }\n                                      return null\n                                  },\n                              } as LemonTableColumn<Destination | Transformation | SiteApp, any>,\n                          ]\n                        : []),\n                    {\n                        title: 'App',\n                        width: 0,\n                        render: function RenderAppInfo(_, destination) {\n                            switch (destination.backend) {\n                                case 'plugin':\n                                    return <RenderApp plugin={destination.plugin} />\n                                case 'hog_function':\n                                    return <HogFunctionIcon src={destination.hog_function.icon_url} size=\"small\" />\n                                case 'batch_export':\n                                    return <RenderBatchExportIcon type={destination.service.type} />\n                                default:\n                                    return null\n                            }\n                        },\n                    },\n                    {\n                        title: 'Name',\n                        sticky: true,\n                        key: 'name',\n                        dataIndex: 'name',\n                        sorter: (a, b) => (a.name || '').localeCompare(b.name || ''),\n                        render: function RenderPluginName(_, destination) {\n                            return (\n                                <LemonTableLink\n                                    to={urls.pipelineNode(\n                                        hogFunctionTypeToPipelineStage(destination.stage),\n                                        destination.id,\n                                        PipelineNodeTab.Configuration\n                                    )}\n                                    title={\n                                        <>\n                                            <Tooltip title=\"Click to update configuration, view metrics, and more\">\n                                                <span>{destination.name}</span>\n                                            </Tooltip>\n                                        </>\n                                    }\n                                    description={destination.description}\n                                />\n                            )\n                        },\n                    },\n                    ...(showFrequencyInterval\n                        ? [\n                              {\n                                  title: 'Frequency',\n                                  key: 'interval',\n                                  render: function RenderFrequency(_, destination) {\n                                      return 'interval' in destination ? destination.interval : null\n                                  },\n                              } as LemonTableColumn<Destination | Transformation | SiteApp, any>,\n                          ]\n                        : []),\n                    ...(showMetricsHistory\n                        ? [\n                              {\n                                  title: 'Last 7 days',\n                                  render: function RenderSuccessRate(_, destination) {\n                                      return (\n                                          <Link\n                                              to={urls.pipelineNode(\n                                                  hogFunctionTypeToPipelineStage(destination.stage),\n                                                  destination.id,\n                                                  PipelineNodeTab.Metrics\n                                              )}\n                                          >\n                                              {destination.backend === PipelineBackend.HogFunction ? (\n                                                  <AppMetricSparkLineV2 id={destination.hog_function.id} />\n                                              ) : (\n                                                  <AppMetricSparkLine pipelineNode={destination} />\n                                              )}\n                                          </Link>\n                                      )\n                                  },\n                              } as LemonTableColumn<Destination | Transformation | SiteApp, any>,\n                          ]\n                        : []),\n                    updatedAtColumn() as LemonTableColumn<Destination | Transformation | SiteApp, any>,\n                    {\n                        title: 'Status',\n                        key: 'enabled',\n                        sorter: (a) => (a.enabled ? 1 : -1),\n                        width: 0,\n                        render: function RenderStatus(_, destination) {\n                            if (destination.backend === PipelineBackend.HogFunction) {\n                                return <HogFunctionStatusIndicator hogFunction={destination.hog_function} />\n                            }\n                            return (\n                                <>\n                                    {destination.enabled ? (\n                                        <LemonTag type=\"success\">Active</LemonTag>\n                                    ) : (\n                                        <LemonTag type=\"default\">Disabled</LemonTag>\n                                    )}\n                                </>\n                            )\n                        },\n                    },\n                    {\n                        width: 0,\n                        render: function Render(_, destination) {\n                            return (\n                                <More\n                                    overlay={\n                                        <LemonMenuOverlay\n                                            items={[\n                                                {\n                                                    label: destination.enabled\n                                                        ? `Pause ${simpleName}`\n                                                        : `Unpause ${simpleName}`,\n                                                    onClick: () => toggleNode(destination, !destination.enabled),\n                                                    disabledReason: !canConfigurePlugins\n                                                        ? `You do not have permission to toggle ${simpleName}s.`\n                                                        : !canEnableDestination(destination) && !destination.enabled\n                                                        ? `Data pipelines add-on is required for enabling new ${simpleName}s`\n                                                        : undefined,\n                                                },\n                                                ...pipelineNodeMenuCommonItems(destination),\n                                                {\n                                                    label: `Delete ${simpleName}`,\n                                                    status: 'danger' as const, // for typechecker happiness\n                                                    onClick: () => deleteNode(destination),\n                                                    disabledReason: canConfigurePlugins\n                                                        ? undefined\n                                                        : `You do not have permission to delete ${simpleName}.`,\n                                                },\n                                            ]}\n                                        />\n                                    }\n                                />\n                            )\n                        },\n                    },\n                ]}\n                emptyState={\n                    destinations.length === 0 && !loading ? (\n                        'No destinations found'\n                    ) : (\n                        <>\n                            No destinations matching filters. <Link onClick={() => resetFilters()}>Clear filters</Link>{' '}\n                        </>\n                    )\n                }\n            />\n\n            {hiddenDestinations.length > 0 && (\n                <div className=\"text-secondary\">\n                    {hiddenDestinations.length} hidden. <Link onClick={() => resetFilters()}>Show all</Link>\n                </div>\n            )}\n        </div>\n    )\n}\n\nfunction ReorderTransformationsModal({ types }: { types: HogFunctionTypeType[] }): JSX.Element {\n    const { reorderTransformationsModalOpen, destinations, temporaryTransformationOrder, loading } = useValues(\n        pipelineDestinationsLogic({ types })\n    )\n    const { closeReorderTransformationsModal, setTemporaryTransformationOrder, saveTransformationsOrder } = useActions(\n        pipelineDestinationsLogic({ types })\n    )\n    const [initialOrders, setInitialOrders] = useState<Record<string, number>>({})\n\n    const enabledTransformations = destinations.filter(\n        (d): d is FunctionDestination => d.stage === PipelineStage.Transformation && d.enabled\n    )\n\n    // Store initial orders when modal opens\n    useEffect(() => {\n        if (reorderTransformationsModalOpen) {\n            const orders = enabledTransformations.reduce(\n                (acc, transformation) => ({\n                    ...acc,\n                    [transformation.hog_function.id]: transformation.hog_function.execution_order || 0,\n                }),\n                {} as Record<string, number>\n            )\n            setInitialOrders(orders)\n        }\n    }, [reorderTransformationsModalOpen, enabledTransformations])\n\n    // Sort transformations based on temporaryOrder if it exists\n    const sortedTransformations = [...enabledTransformations]\n    if (Object.keys(temporaryTransformationOrder).length > 0) {\n        sortedTransformations.sort((a, b) => {\n            // Use hog_function.id for sorting\n            const orderA = temporaryTransformationOrder[a.hog_function.id] || 0\n            const orderB = temporaryTransformationOrder[b.hog_function.id] || 0\n            return orderA - orderB\n        })\n    }\n\n    const handleDragEnd = ({ active, over }: DragEndEvent): void => {\n        if (active.id && over && active.id !== over.id) {\n            const from = sortedTransformations.findIndex((d) => d.id === active.id)\n            const to = sortedTransformations.findIndex((d) => d.id === over.id)\n            const newSortedDestinations = arrayMove(sortedTransformations, from, to)\n\n            const newTemporaryOrder = newSortedDestinations.reduce((acc, destination, index) => {\n                if (destination.hog_function?.id) {\n                    return {\n                        ...acc,\n                        [destination.hog_function.id]: index + 1,\n                    }\n                }\n                return acc\n            }, {} as Record<string, number>)\n\n            setTemporaryTransformationOrder(newTemporaryOrder)\n        }\n    }\n\n    const handleSaveOrder = (): void => {\n        // Compare and only include changed orders\n        const changedOrders = Object.entries(temporaryTransformationOrder).reduce((acc, [id, newOrder]) => {\n            const originalOrder = initialOrders[id]\n            if (originalOrder !== newOrder) {\n                return {\n                    ...acc,\n                    [id]: newOrder,\n                }\n            }\n            return acc\n        }, {} as Record<string, number>)\n\n        // Only send if there are changes\n        if (Object.keys(changedOrders).length > 0) {\n            saveTransformationsOrder(changedOrders)\n        } else {\n            closeReorderTransformationsModal()\n        }\n    }\n\n    return (\n        <LemonModal\n            onClose={closeReorderTransformationsModal}\n            isOpen={reorderTransformationsModalOpen}\n            width={600}\n            title=\"Reorder transformations\"\n            description={\n                <p>\n                    The order of transformations is important as they are processed sequentially. You can{' '}\n                    <b>drag and drop the transformations below</b> to change their order.\n                </p>\n            }\n            footer={\n                <>\n                    <LemonButton type=\"secondary\" onClick={closeReorderTransformationsModal}>\n                        Cancel\n                    </LemonButton>\n                    <LemonButton loading={loading} type=\"primary\" onClick={handleSaveOrder}>\n                        Save order\n                    </LemonButton>\n                </>\n            }\n        >\n            <div className=\"flex flex-col gap-2\">\n                <DndContext modifiers={[restrictToVerticalAxis, restrictToParentElement]} onDragEnd={handleDragEnd}>\n                    <SortableContext items={sortedTransformations} strategy={verticalListSortingStrategy}>\n                        {sortedTransformations.map((transformation, index) => (\n                            <MinimalTransformationView\n                                key={transformation.id}\n                                transformation={transformation}\n                                order={index}\n                            />\n                        ))}\n                    </SortableContext>\n                </DndContext>\n            </div>\n        </LemonModal>\n    )\n}\n\nconst MinimalTransformationView = ({\n    transformation,\n    order,\n}: {\n    transformation: FunctionDestination\n    order: number\n}): JSX.Element => {\n    const { attributes, listeners, setNodeRef, transform, transition, isDragging } = useSortable({\n        id: transformation.id,\n    })\n\n    return (\n        <div\n            ref={setNodeRef}\n            className={clsx(\n                'relative flex items-center gap-2 p-2 border rounded cursor-move bg-bg-light',\n                isDragging && 'z-[999999]'\n            )}\n            // eslint-disable-next-line react/forbid-dom-props\n            style={{\n                transform: CSS.Transform.toString(transform),\n                transition,\n            }}\n            {...attributes}\n            {...listeners}\n        >\n            <LemonBadge.Number count={order + 1} maxDigits={3} />\n            <span className=\"font-semibold\">{transformation.name}</span>\n        </div>\n    )\n}\n", "import { useValues } from 'kea'\nimport { Sparkline, SparklineTimeSeries } from 'lib/components/Sparkline'\n\nimport { pipelineNodeMetricsLogic } from './pipelineNodeMetricsLogic'\nimport { PipelineNode } from './types'\n\nexport function AppMetricSparkLine({ pipelineNode }: { pipelineNode: PipelineNode }): JSX.Element {\n    const logic = pipelineNodeMetricsLogic({ id: pipelineNode.id })\n    const { appMetricsResponse } = useValues(logic)\n\n    // The metrics response has last 7 days time wise, we're showing the\n    // sparkline graph by day, so ignore the potential 8th day\n    const successes = appMetricsResponse ? appMetricsResponse.metrics.successes.slice(-7) : []\n    const failures = appMetricsResponse ? appMetricsResponse.metrics.failures.slice(-7) : []\n    const dates = appMetricsResponse ? appMetricsResponse.metrics.dates.slice(-7) : []\n\n    const displayData: SparklineTimeSeries[] = [\n        {\n            color: 'success',\n            name: 'Success',\n            values: successes,\n        },\n    ]\n\n    if (appMetricsResponse?.metrics.failures.some((failure) => failure > 0)) {\n        displayData.push({\n            color: 'danger',\n            name: 'Failure',\n            values: failures,\n        })\n    }\n\n    return (\n        <Sparkline\n            loading={appMetricsResponse === null}\n            labels={dates}\n            data={displayData}\n            className=\"max-w-24 h-8\"\n            maximumIndicator={false}\n        />\n    )\n}\n", "import { LemonTable, LemonTableColumn } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { ProductIntroduction } from 'lib/components/ProductIntroduction/ProductIntroduction'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonMenuOverlay } from 'lib/lemon-ui/LemonMenu/LemonMenu'\nimport { statusColumn, updatedAtColumn } from 'lib/lemon-ui/LemonTable/columnUtils'\n\nimport { PipelineStage, ProductKey } from '~/types'\n\nimport { frontendAppsLogic } from './frontendAppsLogic'\nimport { NewButton } from './NewButton'\nimport { SiteApp } from './types'\nimport { appColumn, nameColumn, pipelinePluginBackedNodeMenuCommonItems } from './utils'\n\nexport interface FrontendAppsProps {\n    asLegacyList?: boolean\n}\n\nexport function FrontendApps({ asLegacyList }: FrontendAppsProps): JSX.Element {\n    const { loading, frontendApps } = useValues(frontendAppsLogic)\n    const { toggleEnabled, loadPluginConfigs } = useActions(frontendAppsLogic)\n\n    const shouldShowEmptyState = frontendApps.length === 0 && !loading && !asLegacyList\n\n    return (\n        <>\n            {!asLegacyList && (\n                <PageHeader\n                    caption=\"Extend your web app with custom functionality.\"\n                    buttons={<NewButton stage={PipelineStage.SiteApp} />}\n                />\n            )}\n            {!asLegacyList && (\n                <ProductIntroduction\n                    productName=\"Site apps\"\n                    thingName=\"site app\"\n                    productKey={ProductKey.SITE_APPS}\n                    description=\"Site apps allow you to add custom functionality to your website using PostHog.\"\n                    docsURL=\"https://posthog.com/docs/apps/pineapple-mode\"\n                    actionElementOverride={<NewButton stage={PipelineStage.SiteApp} />}\n                    isEmpty={shouldShowEmptyState}\n                />\n            )}\n            {!shouldShowEmptyState && (\n                <>\n                    {!loading && asLegacyList && (\n                        <>\n                            <h2 className=\"mt-4\">Legacy Site apps</h2>\n                            <p>These site apps are using an older system and should eventually be migrated over.</p>\n                        </>\n                    )}\n                    <LemonTable\n                        dataSource={frontendApps}\n                        size=\"small\"\n                        loading={loading}\n                        columns={[\n                            appColumn() as LemonTableColumn<SiteApp, any>,\n                            nameColumn() as LemonTableColumn<SiteApp, any>,\n                            updatedAtColumn() as LemonTableColumn<SiteApp, any>,\n                            statusColumn() as LemonTableColumn<SiteApp, any>,\n                            {\n                                width: 0,\n                                render: function Render(_, frontendApp) {\n                                    return (\n                                        <More\n                                            overlay={\n                                                <LemonMenuOverlay\n                                                    items={[\n                                                        ...pipelinePluginBackedNodeMenuCommonItems(\n                                                            frontendApp,\n                                                            toggleEnabled,\n                                                            loadPluginConfigs\n                                                        ),\n                                                    ]}\n                                                />\n                                            }\n                                        />\n                                    )\n                                },\n                            },\n                        ]}\n                    />\n                </>\n            )}\n        </>\n    )\n}\n", "import { LemonTable, LemonTableColumn } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonMenuOverlay } from 'lib/lemon-ui/LemonMenu/LemonMenu'\nimport { statusColumn, updatedAtColumn } from 'lib/lemon-ui/LemonTable/columnUtils'\n\nimport { importAppsLogic } from './importAppsLogic'\nimport { ImportApp } from './types'\nimport { appColumn, nameColumn, pipelinePluginBackedNodeMenuCommonItems } from './utils'\n\nexport function ImportApps(): JSX.Element {\n    const { loading, importApps } = useValues(importAppsLogic)\n    const { toggleEnabled, loadPluginConfigs } = useActions(importAppsLogic)\n\n    return (\n        <>\n            <LemonTable\n                dataSource={importApps}\n                size=\"small\"\n                loading={loading}\n                columns={[\n                    appColumn() as LemonTableColumn<ImportApp, any>,\n                    nameColumn() as LemonTableColumn<ImportApp, any>,\n                    updatedAtColumn() as LemonTableColumn<ImportApp, any>,\n                    statusColumn() as LemonTableColumn<ImportApp, any>,\n                    {\n                        width: 0,\n                        render: function Render(_, importApp) {\n                            return (\n                                <More\n                                    overlay={\n                                        <LemonMenuOverlay\n                                            items={[\n                                                ...pipelinePluginBackedNodeMenuCommonItems(\n                                                    importApp,\n                                                    toggleEnabled,\n                                                    loadPluginConfigs\n                                                ),\n                                            ]}\n                                        />\n                                    }\n                                />\n                            )\n                        },\n                    },\n                ]}\n            />\n        </>\n    )\n}\n", "import { IconPlusSmall } from '@posthog/icons'\nimport { Link } from '@posthog/lemon-ui'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonMenu } from 'lib/lemon-ui/LemonMenu'\nimport { DataWarehouseManagedSourcesTable } from 'scenes/data-warehouse/settings/DataWarehouseManagedSourcesTable'\nimport { DataWarehouseSelfManagedSourcesTable } from 'scenes/data-warehouse/settings/DataWarehouseSelfManagedSourcesTable'\nimport { urls } from 'scenes/urls'\n\nimport { PipelineStage, PipelineTab } from '~/types'\n\nimport { DESTINATION_TYPES, TRANSFORMATION_TYPES } from './destinations/constants'\nimport { DestinationsTable } from './destinations/Destinations'\n\nexport function Overview(): JSX.Element {\n    const menuItems = [\n        { label: 'Source', to: urls.pipelineNodeNew(PipelineStage.Source) },\n        { label: 'Transformation', to: urls.pipelineNodeNew(PipelineStage.Transformation) },\n        { label: 'Destination', to: urls.pipelineNodeNew(PipelineStage.Destination) },\n    ]\n\n    return (\n        <>\n            <PageHeader\n                buttons={\n                    <div className=\"flex items-center m-2 shrink-0\">\n                        <LemonMenu items={menuItems}>\n                            <LemonButton\n                                data-attr=\"new-pipeline-button\"\n                                icon={<IconPlusSmall />}\n                                size=\"small\"\n                                type=\"primary\"\n                            >\n                                New\n                            </LemonButton>\n                        </LemonMenu>\n                    </div>\n                }\n            />\n            <div className=\"space-y-4\">\n                <div>\n                    <Link to={urls.pipeline(PipelineTab.Sources)}>\n                        <h2>Managed sources</h2>\n                    </Link>\n                    <div className=\"space-y-2\">\n                        <DataWarehouseManagedSourcesTable />\n                    </div>\n                </div>\n                <div>\n                    <Link to={urls.pipeline(PipelineTab.Sources)}>\n                        <h2>Self-managed sources</h2>\n                    </Link>\n                    <div className=\"space-y-2\">\n                        <DataWarehouseSelfManagedSourcesTable />\n                    </div>\n                </div>\n                <div>\n                    <Link to={urls.pipeline(PipelineTab.Transformations)}>\n                        <h2>Transformations</h2>\n                    </Link>\n                    <p>\n                        Modify and enrich your incoming data. Only active transformations are shown here.{' '}\n                        <Link to={urls.pipeline(PipelineTab.Transformations)}>See all.</Link>\n                    </p>\n                    <DestinationsTable\n                        types={TRANSFORMATION_TYPES}\n                        hideFeedback={true}\n                        hideAddDestinationButton={false}\n                    />\n                </div>\n                <div>\n                    <Link to={urls.pipeline(PipelineTab.Destinations)}>\n                        <h2>Destinations</h2>\n                    </Link>\n                    <p>\n                        Send your data to destinations in real time or with batch exports. Only active Destinations are\n                        shown here. <Link to={urls.pipeline(PipelineTab.Destinations)}>See all.</Link>\n                    </p>\n                    <DestinationsTable types={DESTINATION_TYPES} hideFeedback={true} hideAddDestinationButton={false} />\n                </div>\n            </div>\n        </>\n    )\n}\n", "import { LemonButton, LemonDialog, LemonTable } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { LemonTableLink } from 'lib/lemon-ui/LemonTable/LemonTableLink'\nimport { DataWarehouseSourceIcon, mapUrlToProvider } from 'scenes/data-warehouse/settings/DataWarehouseSourceIcon'\nimport { urls } from 'scenes/urls'\n\nimport { DatabaseSchemaDataWarehouseTable } from '~/queries/schema/schema-general'\nimport { PipelineNodeTab, PipelineStage } from '~/types'\n\nimport { dataWarehouseSettingsLogic } from './dataWarehouseSettingsLogic'\n\nexport function DataWarehouseSelfManagedSourcesTable(): JSX.Element {\n    const { selfManagedTables } = useValues(dataWarehouseSettingsLogic)\n    const { deleteSelfManagedTable, refreshSelfManagedTableSchema } = useActions(dataWarehouseSettingsLogic)\n\n    return (\n        <LemonTable\n            dataSource={selfManagedTables}\n            pagination={{ pageSize: 10 }}\n            columns={[\n                {\n                    width: 0,\n                    render: (_, item: DatabaseSchemaDataWarehouseTable) => (\n                        <DataWarehouseSourceIcon type={mapUrlToProvider(item.url_pattern)} />\n                    ),\n                },\n                {\n                    title: 'Source',\n                    dataIndex: 'name',\n                    key: 'name',\n                    render: (_, item: DatabaseSchemaDataWarehouseTable) => (\n                        <LemonTableLink\n                            to={urls.pipelineNode(\n                                PipelineStage.Source,\n                                `self-managed-${item.id}`,\n                                PipelineNodeTab.SourceConfiguration\n                            )}\n                            title={item.name}\n                        />\n                    ),\n                },\n                {\n                    key: 'actions',\n                    render: (_, item: DatabaseSchemaDataWarehouseTable) => (\n                        <div className=\"flex flex-row justify-end\">\n                            <LemonButton\n                                data-attr={`refresh-data-warehouse-${item.name}`}\n                                key={`refresh-data-warehouse-${item.name}`}\n                                onClick={() => refreshSelfManagedTableSchema(item.id)}\n                            >\n                                Update schema from source\n                            </LemonButton>\n                            <LemonButton\n                                status=\"danger\"\n                                data-attr={`delete-data-warehouse-${item.name}`}\n                                key={`delete-data-warehouse-${item.name}`}\n                                onClick={() => {\n                                    LemonDialog.open({\n                                        title: 'Delete table?',\n                                        description:\n                                            'Table deletion cannot be undone. All views and joins related to this table will be deleted.',\n\n                                        primaryButton: {\n                                            children: 'Delete',\n                                            status: 'danger',\n                                            onClick: () => {\n                                                deleteSelfManagedTable(item.id)\n                                            },\n                                        },\n                                        secondaryButton: {\n                                            children: 'Cancel',\n                                        },\n                                    })\n                                }}\n                            >\n                                Delete\n                            </LemonButton>\n                        </div>\n                    ),\n                },\n            ]}\n        />\n    )\n}\n", "import { actions, connect, kea, path, reducers, selectors } from 'kea'\nimport { actionToUrl, urlToAction } from 'kea-router'\nimport { capitalizeFirstLetter } from 'lib/utils'\nimport { Scene } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { SIDE_PANEL_CONTEXT_KEY, SidePanelSceneContext } from '~/layout/navigation-3000/sidepanel/types'\nimport { ActivityScope, Breadcrumb, PipelineTab } from '~/types'\n\nimport type { pipelineLogicType } from './pipelineLogicType'\n\nexport const humanFriendlyTabName = (tab: PipelineTab): string => {\n    return capitalizeFirstLetter(tab).replace(/[-_]/g, ' ')\n}\n\nexport const pipelineLogic = kea<pipelineLogicType>([\n    path(['scenes', 'pipeline', 'pipelineLogic']),\n    connect({\n        values: [userLogic, ['user', 'hasAvailableFeature']],\n    }),\n    actions({\n        setCurrentTab: (tab: PipelineTab = PipelineTab.Destinations) => ({ tab }),\n    }),\n    reducers({\n        currentTab: [\n            PipelineTab.Destinations as PipelineTab,\n            {\n                setCurrentTab: (_, { tab }) => tab,\n            },\n        ],\n    }),\n    selectors(() => ({\n        breadcrumbs: [\n            (s) => [s.currentTab],\n            (tab: PipelineTab): Breadcrumb[] => {\n                return [\n                    { key: Scene.Pipeline, name: 'Data pipeline' },\n                    {\n                        key: tab,\n                        name: humanFriendlyTabName(tab),\n                    },\n                ]\n            },\n        ],\n\n        [SIDE_PANEL_CONTEXT_KEY]: [\n            () => [],\n            (): SidePanelSceneContext => {\n                return {\n                    activity_scope: ActivityScope.PLUGIN,\n                }\n            },\n        ],\n    })),\n    actionToUrl(({ values }) => {\n        return {\n            setCurrentTab: () => [urls.pipeline(values.currentTab)],\n        }\n    }),\n    urlToAction(({ actions, values }) => ({\n        '/pipeline/:tab': ({ tab }) => {\n            if (tab !== values.currentTab) {\n                actions.setCurrentTab(tab as PipelineTab)\n            }\n        },\n    })),\n])\n", "import { useValues } from 'kea'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { ProductIntroduction } from 'lib/components/ProductIntroduction/ProductIntroduction'\nimport { DataWarehouseManagedSourcesTable } from 'scenes/data-warehouse/settings/DataWarehouseManagedSourcesTable'\nimport { DataWarehouseSelfManagedSourcesTable } from 'scenes/data-warehouse/settings/DataWarehouseSelfManagedSourcesTable'\nimport { dataWarehouseSettingsLogic } from 'scenes/data-warehouse/settings/dataWarehouseSettingsLogic'\n\nimport { PipelineStage, ProductKey } from '~/types'\n\nimport { NewButton } from '../NewButton'\n\nexport function Sources(): JSX.Element {\n    const { dataWarehouseSources, dataWarehouseSourcesLoading } = useValues(dataWarehouseSettingsLogic)\n\n    return (\n        <>\n            <PageHeader buttons={<NewButton stage={PipelineStage.Source} />} />\n            <div className=\"space-y-4\">\n                {!dataWarehouseSourcesLoading && dataWarehouseSources?.results.length === 0 ? (\n                    <ProductIntroduction\n                        productName=\"Data Warehouse Source\"\n                        productKey={ProductKey.DATA_WAREHOUSE}\n                        thingName=\"data source\"\n                        description=\"Use data warehouse sources to import data from your external data into PostHog.\"\n                        isEmpty={dataWarehouseSources.results.length === 0 && !dataWarehouseSourcesLoading}\n                        docsURL=\"https://posthog.com/docs/data-warehouse\"\n                        actionElementOverride={<NewButton stage={PipelineStage.Source} />}\n                    />\n                ) : null}\n\n                <div>\n                    <h2>Managed sources</h2>\n                    <p>\n                        PostHog can connect to external sources and automatically import data from them into the PostHog\n                        data warehouse\n                    </p>\n                    <DataWarehouseManagedSourcesTable />\n                </div>\n                <div>\n                    <h2>Self managed sources</h2>\n                    <p>Connect to your own data sources, making them queryable in PostHog</p>\n                    <DataWarehouseSelfManagedSourcesTable />\n                </div>\n            </div>\n        </>\n    )\n}\n", "import { LemonTable, LemonTableColumn, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { ProductIntroduction } from 'lib/components/ProductIntroduction/ProductIntroduction'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonMenuOverlay } from 'lib/lemon-ui/LemonMenu/LemonMenu'\nimport { statusColumn, updatedAtColumn } from 'lib/lemon-ui/LemonTable/columnUtils'\nimport { urls } from 'scenes/urls'\n\nimport { PipelineNodeTab, PipelineStage, ProductKey } from '~/types'\n\nimport { AppMetricSparkLine } from './AppMetricSparkLine'\nimport { TRANSFORMATION_TYPES } from './destinations/constants'\nimport { Destinations } from './destinations/Destinations'\nimport { NewButton } from './NewButton'\nimport { pipelineAccessLogic } from './pipelineAccessLogic'\nimport { pipelineTransformationsLogic } from './transformationsLogic'\nimport { Transformation } from './types'\nimport { appColumn, nameColumn, pipelinePluginBackedNodeMenuCommonItems } from './utils'\n\nexport function Transformations(): JSX.Element {\n    const { sortedTransformations, loading } = useValues(pipelineTransformationsLogic)\n\n    const shouldShowEmptyState = sortedTransformations.length === 0 && !loading\n\n    return (\n        <>\n            <PageHeader\n                caption=\"Transform your incoming events before they are stored in PostHog or sent on to Destinations.\"\n                buttons={<NewButton stage={PipelineStage.Transformation} />}\n            />\n            <ProductIntroduction\n                productName=\"Pipeline transformations\"\n                thingName=\"transformation\"\n                productKey={ProductKey.PIPELINE_TRANSFORMATIONS}\n                description=\"Pipeline transformations allow you to enrich your data with additional information, such as geolocation.\"\n                docsURL=\"https://posthog.com/docs/cdp\"\n                actionElementOverride={<NewButton stage={PipelineStage.Transformation} />}\n                isEmpty={shouldShowEmptyState}\n            />\n\n            <Destinations types={TRANSFORMATION_TYPES} />\n        </>\n    )\n}\n\nexport function TransformationsTable({ inOverview = false }: { inOverview?: boolean }): JSX.Element {\n    const { loading, sortedTransformations, sortedEnabledTransformations } = useValues(pipelineTransformationsLogic)\n\n    return (\n        <>\n            <LemonTable\n                dataSource={inOverview ? sortedEnabledTransformations : sortedTransformations}\n                size=\"small\"\n                loading={loading}\n                columns={[\n                    {\n                        title: '',\n                        key: 'order',\n                        width: 0,\n                        sticky: true,\n                        render: function RenderOrdering(_, transformation) {\n                            if (!transformation.enabled) {\n                                return null\n                            }\n                            // We can't use pluginConfig.order directly as it's not nicely set for everything,\n                            // e.g. geoIP, disabled plugins, especially if we disable them via django admin\n                            return sortedEnabledTransformations.findIndex((t) => t.id === transformation.id) + 1\n                        },\n                    },\n                    appColumn() as LemonTableColumn<Transformation, any>,\n                    nameColumn() as LemonTableColumn<Transformation, any>,\n                    {\n                        title: 'Last 7 days',\n                        render: function RenderSuccessRate(_, transformation) {\n                            return (\n                                <Link\n                                    to={urls.pipelineNode(\n                                        PipelineStage.Transformation,\n                                        transformation.id,\n                                        PipelineNodeTab.Metrics\n                                    )}\n                                >\n                                    <AppMetricSparkLine pipelineNode={transformation} />\n                                </Link>\n                            )\n                        },\n                    },\n                    updatedAtColumn() as LemonTableColumn<Transformation, any>,\n                    statusColumn() as LemonTableColumn<Transformation, any>,\n                    {\n                        width: 0,\n                        render: function Render(_, transformation) {\n                            return (\n                                <More\n                                    overlay={\n                                        <TransformationsMoreOverlay\n                                            transformation={transformation}\n                                            inOverview={inOverview}\n                                        />\n                                    }\n                                />\n                            )\n                        },\n                    },\n                ]}\n            />\n        </>\n    )\n}\n\nexport const TransformationsMoreOverlay = ({\n    transformation,\n    inOverview = false,\n}: {\n    transformation: Transformation\n    inOverview?: boolean\n}): JSX.Element => {\n    const { canConfigurePlugins } = useValues(pipelineAccessLogic)\n    const { toggleEnabled, loadPluginConfigs, openReorderModal } = useActions(pipelineTransformationsLogic)\n    const { sortedEnabledTransformations } = useValues(pipelineTransformationsLogic)\n\n    return (\n        <LemonMenuOverlay\n            items={[\n                ...(!inOverview && transformation.enabled && sortedEnabledTransformations.length > 1\n                    ? [\n                          {\n                              label: 'Reorder apps',\n                              onClick: openReorderModal,\n                              disabledReason: canConfigurePlugins\n                                  ? undefined\n                                  : 'You do not have permission to reorder apps.',\n                          },\n                      ]\n                    : []),\n                ...pipelinePluginBackedNodeMenuCommonItems(\n                    transformation,\n                    toggleEnabled,\n                    loadPluginConfigs,\n                    inOverview\n                ),\n            ]}\n        />\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "appsCodeLogic", "pluginId", "id", "currentFile", "code", "_", "actions", "props", "response", "api_default", "formattedCode", "file", "source", "prettySource", "formatSource", "values", "changes", "errors", "e", "filename", "prettier", "parserTypeScript", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "init_dirname", "init_buffer", "init_process", "SourcePluginKind", "getInitialCode", "name", "kind", "capturePluginEvent", "event", "plugin", "type", "Co", "appsManagementLogic", "userLogic", "pipelineAccessLogic", "pluginUrl", "localPluginPath", "sourcePluginName", "sourcePluginKind", "id", "pluginType", "url", "name", "path", "pluginChanges", "latestTag", "values", "loadPluginsFromUrl", "lemonToast", "payload", "response", "api_default", "getInitialCode", "_discard", "rest", "_", "s", "user", "canInstallPlugins", "plugins", "existingUrls", "p", "GLOBAL_PLUGINS", "actions", "updates", "e", "import_jsx_runtime", "AppCode", "pluginId", "pluginType", "logicProps", "logic", "appsCodeLogic", "currentFile", "filenames", "pluginSource", "pluginSourceLoading", "editingAppCode", "pluginSourceAllErrors", "pluginSourceHasErrors", "isPluginSourceSubmitting", "setCurrentFile", "cancelEditing", "editAppCode", "submitPluginSource", "canGloballyManagePlugins", "plugins", "appsManagementLogic", "Spinner", "canEdit", "LemonModal", "Link", "LemonButton", "LemonTabs", "filename", "LemonBanner", "error", "value", "onChange", "CodeEditor", "v", "CodeSnippet", "IconPencil", "import_jsx_runtime", "AppsManagement", "appsManagementLogic", "canInstallPlugins", "canGloballyManagePlugins", "missingGlobalPlugins", "shouldBeGlobalPlugins", "shouldNotBeGlobalPlugins", "globalPlugins", "localPlugins", "inlinePlugins", "pluginsLoading", "isDev", "isCloudOrDev", "preflightLogic", "OutOfSyncApps", "InstallFromUrl", "InstallLocalApp", "InstallSourceApp", "LemonDivider", "AppsToUpdate", "AppsTable", "InlinePluginsTable", "updatablePlugins", "pluginsNeedingUpdates", "checkingForUpdates", "checkForUpdates", "LemonButton", "IconRedo", "plugins", "unusedPlugins", "uninstallPlugin", "patchPlugin", "updatePlugin", "onClickUninstall", "pluginId", "LemonDialog", "data", "plugin", "LemonTable", "_", "RenderApp", "Link", "LemonTag", "IconDownload", "Tooltip", "IconLock", "IconUnlock", "IconTrash", "AppCode", "LemonBanner", "MissingGlobalPlugins", "installingPluginUrl", "installPlugin", "url", "pluginUrl", "setPluginUrl", "cloudRequiredPrefix", "disabledReason", "LemonInput", "localPluginPath", "setLocalPluginPath", "sourcePluginName", "sourcePluginKind", "setSourcePluginName", "setSourcePluginKind", "menuItems", "SourcePluginKind", "kind", "LemonMenu", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "AppMetricSparkLine", "pipelineNode", "logic", "pipelineNodeMetricsLogic", "appMetricsResponse", "successes", "failures", "dates", "displayData", "failure", "Sparkline", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "FrontendApps", "asLegacyList", "loading", "frontendApps", "frontendAppsLogic", "toggleEnabled", "loadPluginConfigs", "shouldShowEmptyState", "PageHeader", "NewButton", "ProductIntroduction", "LemonTable", "appColumn", "nameColumn", "updatedAtColumn", "statusColumn", "_", "frontendApp", "More", "LemonMenuOverlay", "pipelinePluginBackedNodeMenuCommonItems", "import_jsx_runtime", "Destinations", "types", "destinations", "loading", "pipelineDestinationsLogic", "PageHeader", "NewButton", "PayGateMini", "ProductIntroduction", "ReorderTransformationsModal", "DestinationsTable", "DestinationOptionsTable", "FrontendApps", "hideFeedback", "hideAddDestinationButton", "canConfigurePlugins", "canEnableDestination", "pipelineAccessLogic", "filteredDestinations", "hiddenDestinations", "toggleNode", "deleteNode", "openReorderTransformationsModal", "resetFilters", "destinationsFiltersLogic", "showMetricsHistory", "showFrequencyInterval", "simpleName", "enabledTransformations", "d", "showPriorityColumn", "DestinationsFilters", "LemonButton", "LemonTable", "a", "b", "orderA", "orderB", "_", "destination", "index", "t", "RenderApp", "HogFunctionIcon", "RenderBatchExportIcon", "LemonTableLink", "urls", "hogFunctionTypeToPipelineStage", "Tooltip", "Link", "AppMetricSparkLineV2", "AppMetricSparkLine", "updatedAtColumn", "HogFunctionStatusIndicator", "LemonTag", "More", "LemonMenuOverlay", "pipelineNodeMenuCommonItems", "reorderTransformationsModalOpen", "temporaryTransformationOrder", "closeReorderTransformationsModal", "setTemporaryTransformationOrder", "saveTransformationsOrder", "initialOrders", "setInitialOrders", "orders", "acc", "transformation", "sortedTransformations", "LemonModal", "changedOrders", "id", "newOrder", "DndContext", "restrictToVerticalAxis", "restrictToParentElement", "active", "over", "from", "to", "newTemporaryOrder", "arrayMove", "SortableContext", "verticalListSortingStrategy", "MinimalTransformationView", "order", "attributes", "listeners", "setNodeRef", "transform", "transition", "isDragging", "useSortable", "CSS", "LemonBadge", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "ImportApps", "loading", "importApps", "importAppsLogic", "toggleEnabled", "loadPluginConfigs", "LemonTable", "appColumn", "nameColumn", "updatedAtColumn", "statusColumn", "_", "importApp", "More", "LemonMenuOverlay", "pipelinePluginBackedNodeMenuCommonItems", "init_dirname", "init_buffer", "init_process", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "DataWarehouseSelfManagedSourcesTable", "selfManagedTables", "dataWarehouseSettingsLogic", "deleteSelfManagedTable", "refreshSelfManagedTableSchema", "LemonTable", "_", "item", "DataWarehouseSourceIcon", "mapUrlToProvider", "LemonTableLink", "urls", "LemonButton", "LemonDialog", "import_jsx_runtime", "Overview", "menuItems", "urls", "PageHeader", "LemonMenu", "LemonButton", "IconPlusSmall", "Link", "DataWarehouseManagedSourcesTable", "DataWarehouseSelfManagedSourcesTable", "DestinationsTable", "TRANSFORMATION_TYPES", "DESTINATION_TYPES", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "humanFriendlyTabName", "tab", "capitalizeFirstLetter", "pipelineLogic", "userLogic", "_", "s", "SIDE_PANEL_CONTEXT_KEY", "values", "urls", "actions", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "Sources", "dataWarehouseSources", "dataWarehouseSourcesLoading", "dataWarehouseSettingsLogic", "PageHeader", "NewButton", "ProductIntroduction", "DataWarehouseManagedSourcesTable", "DataWarehouseSelfManagedSourcesTable", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "Transformations", "sortedTransformations", "loading", "pipelineTransformationsLogic", "shouldShowEmptyState", "PageHeader", "NewButton", "ProductIntroduction", "Destinations", "TRANSFORMATION_TYPES", "import_jsx_runtime", "Pipeline", "canGloballyManagePlugins", "pipelineAccessLogic", "currentTab", "pipelineLogic", "hasEnabledImportApps", "importAppsLogic", "featureFlags", "featureFlagLogic", "tabs", "Overview", "Sources", "Transformations", "Destinations", "DESTINATION_TYPES", "FEATURE_FLAGS", "SITE_APP_TYPES", "FrontendApps", "ImportApps", "AppsManagement", "ActivityLog", "LemonTabs", "tab", "urls", "humanFriendlyTabName", "scene"]
}
