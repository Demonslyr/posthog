{
  "version": 3,
  "sources": ["../src/scenes/feature-flags/FeatureFlagSnippets.tsx", "../src/scenes/feature-flags/FeatureFlagInstructions.tsx", "../src/scenes/feature-flags/FeatureFlagCodeOptions.tsx"],
  "sourcesContent": ["import { useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { GroupType } from '~/types'\n\nexport const UTM_TAGS = '?utm_medium=in-product&utm_campaign=feature-flag'\nexport interface FeatureFlagSnippet {\n    flagKey: string\n    multivariant?: boolean\n    groupType?: GroupType\n    localEvaluation?: boolean\n    payload?: boolean\n    remoteConfiguration?: boolean\n    encryptedPayload?: boolean\n    samplePropertyName?: string\n    instantlyAvailableProperties?: boolean\n}\n\nconst LOCAL_EVAL_REMINDER = `Remember to set a personal API key in the SDK to enable local evaluation.\n`\n\nconst REMOTE_CONFIG_REMINDER = `Must initialize SDK with a personal API key to enable remote configuration.`\nconst ENCRYPTED_PAYLOAD_REMINDER = `Encrypted payloads are automatically decrypted on the server before being sent to the client.`\n\nexport function NodeJSSnippet({\n    flagKey,\n    groupType,\n    multivariant,\n    localEvaluation,\n    payload,\n    remoteConfiguration,\n    encryptedPayload,\n    samplePropertyName,\n}: FeatureFlagSnippet): JSX.Element {\n    const clientSuffix = 'await client.'\n    const flagFunction = payload ? 'getFeatureFlagPayload' : multivariant ? 'getFeatureFlag' : 'isFeatureEnabled'\n\n    const propertyName = samplePropertyName || 'is_authorized'\n\n    if (remoteConfiguration) {\n        const reminder = REMOTE_CONFIG_REMINDER + (encryptedPayload ? `\\n// ${ENCRYPTED_PAYLOAD_REMINDER}` : '')\n\n        return (\n            <>\n                <CodeSnippet language={Language.JavaScript} wrap>\n                    {`// ${reminder}\nconst remoteConfigPayload = await client.getRemoteConfigPayload('${flagKey}')`}\n                </CodeSnippet>\n            </>\n        )\n    }\n\n    const localEvalAddition = localEvaluation\n        ? groupType\n            ? `\n        // add group properties used in the flag to ensure the flag\n        // is evaluated locally, vs. going to our servers\n        groupProperties: { ${groupType.group_type}: {'${propertyName}': 'value', 'name': 'xyz'}}`\n            : `\n        // add person properties used in the flag to ensure the flag\n        // is evaluated locally, vs. going to our servers\n        personProperties: {'${propertyName}': 'value'}`\n        : ''\n\n    const flagSnippet = groupType\n        ? `${clientSuffix}${flagFunction}(\n    '${flagKey}',\n    'user distinct id',${\n        payload\n            ? `\n    undefined,`\n            : ''\n    }\n    {\n        groups: { '${groupType.group_type}': '<${groupType.name_singular || 'group'} ID>' },${localEvalAddition}\n    }\n)`\n        : localEvalAddition\n        ? `${clientSuffix}${flagFunction}(\n    '${flagKey}',\n    'user distinct id',${\n        payload\n            ? `\n    undefined,`\n            : ''\n    }\n    {${localEvalAddition}\n    }\n)`\n        : `${clientSuffix}${flagFunction}('${flagKey}', 'user distinct id')`\n\n    const variableName = payload ? 'matchedFlagPayload' : multivariant ? 'enabledVariant' : 'isMyFlagEnabledForUser'\n\n    const conditional = multivariant ? `${variableName} === 'example-variant'` : `${variableName}`\n\n    const followUpCode = payload\n        ? ''\n        : `\n\nif (${conditional}) {\n    // Do something differently for this ${groupType ? groupType.name_singular || 'group' : 'user'}\n}`\n\n    return (\n        <>\n            <CodeSnippet language={Language.JavaScript} wrap>\n                {`${\n                    localEvaluation ? '// ' + LOCAL_EVAL_REMINDER : ''\n                }const ${variableName} = ${flagSnippet}${followUpCode}`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function PHPSnippet({\n    flagKey,\n    groupType,\n    multivariant,\n    localEvaluation,\n    samplePropertyName,\n}: FeatureFlagSnippet): JSX.Element {\n    const clientSuffix = 'PostHog::'\n\n    const flagFunction = multivariant ? 'getFeatureFlag' : 'isFeatureEnabled'\n\n    const propertyName = samplePropertyName || 'is_authorized'\n\n    const localEvalAddition = localEvaluation\n        ? groupType\n            ? `\n    // empty person properties\n    [],\n    // add group properties used in the flag to ensure the flag\n    // is evaluated locally, vs. going to our servers\n    [${groupType.group_type} =>  ['${propertyName}' => 'value', 'name' => 'xyz']]`\n            : `\n    // add person properties used in the flag to ensure the flag\n    // is evaluated locally, vs. going to our servers\n    ['${propertyName}' => 'value']`\n        : ''\n\n    const flagSnippet = groupType\n        ? `${clientSuffix}${flagFunction}(\n    '${flagKey}',\n    'user distinct id',\n    // group types\n    ['${groupType.group_type}' => '<${groupType.name_singular || 'group'} ID>'],${localEvalAddition}\n)`\n        : localEvalAddition\n        ? `${clientSuffix}${flagFunction}(\n    '${flagKey}',\n    'user distinct id',${localEvalAddition}\n)`\n        : `${clientSuffix}${flagFunction}('${flagKey}', 'user distinct id')`\n    const variableName = multivariant ? '$enabledVariant' : '$isMyFlagEnabledForUser'\n\n    const conditional = multivariant ? `${variableName} === 'example-variant'` : `${variableName}`\n\n    return (\n        <>\n            <CodeSnippet language={Language.PHP} wrap>\n                {`${localEvaluation ? '// ' + LOCAL_EVAL_REMINDER : ''}${variableName} = ${flagSnippet}\n\nif (${conditional}) {\n    // Do something differently for this ${groupType ? groupType.name_singular || 'group' : 'user'}\n}`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function GolangSnippet({\n    flagKey,\n    groupType,\n    payload,\n    remoteConfiguration,\n    encryptedPayload,\n    multivariant,\n    localEvaluation,\n    samplePropertyName,\n}: FeatureFlagSnippet): JSX.Element {\n    const clientSuffix = 'client.'\n\n    const flagFunction = payload ? 'GetFeatureFlagPayload' : multivariant ? 'GetFeatureFlag' : 'IsFeatureEnabled'\n\n    const propertyName = samplePropertyName || 'is_authorized'\n\n    if (remoteConfiguration) {\n        const reminder = REMOTE_CONFIG_REMINDER + (encryptedPayload ? `\\n// ${ENCRYPTED_PAYLOAD_REMINDER}` : '')\n\n        return (\n            <>\n                <CodeSnippet language={Language.Go} wrap>\n                    {`// ${reminder}\nremoteConfigPayload, err := ${clientSuffix}GetRemoteConfigPayload(\"${flagKey}\")`}\n                </CodeSnippet>\n            </>\n        )\n    }\n\n    const localEvalAddition = localEvaluation\n        ? groupType\n            ? `\n        // add group properties used in the flag to ensure the flag\n        // is evaluated locally, vs. going to our servers\n        groupProperties: map[string]Properties{\"${groupType.group_type}\": posthog.NewProperties().Set(\"${propertyName}\", \"value\").Set(\"name\", \"xyz\")}`\n            : `\n        // add person properties used in the flag to ensure the flag\n        // is evaluated locally, vs. going to our servers\n        PersonProperties: posthog.NewProperties().Set(\"${propertyName}\", \"value\")`\n        : ''\n\n    const flagSnippet = groupType\n        ? `${clientSuffix}${flagFunction}(\n    FeatureFlagPayload{\n        Key:        \"${flagKey}\",\n        DistinctId: \"distinct-id\",\n        Groups:     Groups{'${groupType.group_type}': '<${groupType.name_singular || 'group'} ID>'},${localEvalAddition}\n    }\n)`\n        : `${clientSuffix}${flagFunction}(\n    FeatureFlagPayload{\n        Key:        '${flagKey}',\n        DistinctId: \"distinct-id\",${localEvalAddition}\n    })`\n    const variableName = multivariant ? 'enabledVariant, err' : 'isMyFlagEnabledForUser, err'\n\n    const conditional = multivariant ? `enabledVariant == 'example-variant'` : `isMyFlagEnabledForUser`\n\n    return (\n        <>\n            <CodeSnippet language={Language.Go} wrap>\n                {`${localEvaluation ? '// ' + LOCAL_EVAL_REMINDER : ''}${variableName} := ${flagSnippet}\n\nif ${conditional} {\n    // Do something differently for this ${groupType ? groupType.name_singular || 'group' : 'user'}\n}`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function RubySnippet({\n    flagKey,\n    groupType,\n    multivariant,\n    localEvaluation,\n    payload,\n    remoteConfiguration,\n    encryptedPayload,\n    samplePropertyName,\n}: FeatureFlagSnippet): JSX.Element {\n    const clientSuffix = 'posthog.'\n    const flagFunction = payload ? 'get_feature_flag_payload' : multivariant ? 'get_feature_flag' : 'is_feature_enabled'\n\n    const propertyName = samplePropertyName || 'is_authorized'\n\n    if (remoteConfiguration) {\n        const reminder = `# ` + REMOTE_CONFIG_REMINDER + (encryptedPayload ? `\\n# ${ENCRYPTED_PAYLOAD_REMINDER}` : '')\n\n        return (\n            <>\n                <CodeSnippet language={Language.Ruby} wrap>\n                    {`${reminder}\nremote_config_payload = posthog.get_remote_config_payload('${flagKey}')`}\n                </CodeSnippet>\n            </>\n        )\n    }\n\n    const localEvalAddition = localEvaluation\n        ? groupType\n            ? `\n    # add group properties used in the flag to ensure the flag\n    # is evaluated locally, vs. going to our servers\n    group_properties: { ${groupType.group_type}: {'${propertyName}': 'value', 'name': 'xyz'}}`\n            : `\n    # add person properties used in the flag to ensure the flag\n    # is evaluated locally, vs. going to our servers\n    person_properties: {'${propertyName}': 'value'}`\n        : ''\n\n    const flagSnippet = groupType\n        ? `${clientSuffix}${flagFunction}(\n    '${flagKey}',\n    'user distinct id',\n    groups: { '${groupType.group_type}': '<${groupType.name_singular || 'group'} ID>' },${localEvalAddition}\n)`\n        : localEvalAddition\n        ? `${clientSuffix}${flagFunction}(\n    '${flagKey}',\n    'user distinct id',${localEvalAddition}\n)`\n        : `${clientSuffix}${flagFunction}('${flagKey}', 'user distinct id')`\n    const variableName = payload ? 'matched_flag_payload' : multivariant ? 'enabled_variant' : 'is_my_flag_enabled'\n\n    const conditional = multivariant ? `${variableName} == 'example-variant'` : `${variableName}`\n\n    const followUpCode = payload\n        ? ''\n        : `\n\nif ${conditional}\n    # Do something differently for this ${groupType ? groupType.name_singular || 'group' : 'user'}\nend`\n\n    return (\n        <>\n            <CodeSnippet language={Language.Ruby} wrap>\n                {`${localEvaluation ? '# ' + LOCAL_EVAL_REMINDER : ''}${variableName} = ${flagSnippet}${followUpCode}`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function PythonSnippet({\n    flagKey,\n    groupType,\n    multivariant,\n    localEvaluation,\n    payload,\n    remoteConfiguration,\n    encryptedPayload,\n    samplePropertyName,\n}: FeatureFlagSnippet): JSX.Element {\n    const clientSuffix = 'posthog.'\n    const flagFunction = payload ? 'get_feature_flag_payload' : multivariant ? 'get_feature_flag' : 'feature_enabled'\n\n    const propertyName = samplePropertyName || 'is_authorized'\n\n    if (remoteConfiguration) {\n        const reminder = `# ` + REMOTE_CONFIG_REMINDER + (encryptedPayload ? `\\n# ${ENCRYPTED_PAYLOAD_REMINDER}` : '')\n\n        return (\n            <>\n                <CodeSnippet language={Language.Python} wrap>\n                    {`${reminder}\nremote_config_payload = posthog.get_remote_config_payload('${flagKey}')`}\n                </CodeSnippet>\n            </>\n        )\n    }\n\n    const localEvalAddition = localEvaluation\n        ? groupType\n            ? `\n    # add group properties used in the flag to ensure the flag\n    # is evaluated locally, vs. going to our servers\n    group_properties={ ${groupType.group_type}: {'${propertyName}': 'value', 'name': 'xyz'}}`\n            : `\n    # add person properties used in the flag to ensure the flag\n    # is evaluated locally, vs. going to our servers\n    person_properties={'${propertyName}': 'value'}`\n        : ''\n\n    const flagSnippet = groupType\n        ? `${clientSuffix}${flagFunction}(\n    '${flagKey}',\n    'user distinct id',\n    groups={ '${groupType.group_type}': '<${groupType.name_singular || 'group'} ID>' },${localEvalAddition}\n)`\n        : localEvalAddition\n        ? `${clientSuffix}${flagFunction}(\n    '${flagKey}',\n    'user distinct id',${localEvalAddition}\n)`\n        : `${clientSuffix}${flagFunction}('${flagKey}', 'user distinct id')`\n    const variableName = payload ? 'matched_flag_payload' : multivariant ? 'enabled_variant' : 'is_my_flag_enabled'\n\n    const conditional = multivariant ? `${variableName} == 'example-variant'` : `${variableName}`\n\n    const followUpCode = payload\n        ? ''\n        : `\n\nif ${conditional}:\n    # Do something differently for this ${groupType ? groupType.name_singular || 'group' : 'user'}\n`\n\n    return (\n        <>\n            <CodeSnippet language={Language.Python} wrap>\n                {`${localEvaluation ? '# ' + LOCAL_EVAL_REMINDER : ''}${variableName} = ${flagSnippet}${followUpCode}`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function CSharpSnippet({\n    flagKey,\n    groupType,\n    multivariant,\n    localEvaluation,\n    payload,\n    remoteConfiguration,\n    encryptedPayload,\n    samplePropertyName,\n}: FeatureFlagSnippet): JSX.Element {\n    const clientSuffix = 'posthog.'\n    const flagFunction = payload\n        ? 'GetFeatureFlagAsync'\n        : multivariant\n        ? 'GetFeatureFlagAsync'\n        : 'IsFeatureEnabledAsync'\n\n    const propertyName = samplePropertyName || 'isAuthorized'\n\n    if (remoteConfiguration) {\n        const reminder = `// ` + REMOTE_CONFIG_REMINDER + (encryptedPayload ? `\\n// ${ENCRYPTED_PAYLOAD_REMINDER}` : '')\n\n        return (\n            <>\n                <CodeSnippet language={Language.CSharp} wrap>\n                    {`${reminder}\nvar remoteConfigPayload = await posthog.GetRemoteConfigPayloadAsync(\"${flagKey}\");`}\n                </CodeSnippet>\n            </>\n        )\n    }\n\n    const localEvalCommentAddition = localEvaluation\n        ? groupType\n            ? `// add group properties used in the flag to ensure the flag\n        // is evaluated locally, vs. going to our servers\n        `\n            : `// add person properties used in the flag to ensure the flag\n        // is evaluated locally, vs. going to our servers\n        `\n        : ''\n\n    const localEvalCodeAddition = localEvaluation\n        ? groupType\n            ? `{ [\"${propertyName}\"] = \"value\", [\"name\"] = \"xyz\" }`\n            : `\n    personProperties: new() { [\"${propertyName}\"] = \"value\" }`\n        : ''\n\n    const flagSnippet = groupType\n        ? `await ${clientSuffix}${flagFunction}(\n    \"${flagKey}\",\n    \"user distinct id\",\n    new FeatureFlagOptions\n    {\n        ${localEvalCommentAddition}Groups = [new Group(\"${groupType.group_type}\", \"<${\n              groupType.name_singular || 'group'\n          } ID>\")${localEvalCodeAddition}]\n    }\n);`\n        : localEvalCodeAddition\n        ? `await ${clientSuffix}${flagFunction}(\n    \"${flagKey}\",\n    \"user distinct id\",${localEvalCodeAddition}\n);`\n        : `await ${clientSuffix}${flagFunction}(\"${flagKey}\", \"user distinct id\");`\n    const variableName = payload ? 'matchedFlagPayload' : multivariant ? 'enabledVariant' : 'isMyFlagEnabled'\n\n    const conditional = multivariant ? `${variableName} == 'example-variant'` : `${variableName}`\n\n    const followUpCode = payload\n        ? `\nif (matchedFlagPayload is { Payload: {} payload })\n{\n    // The payload is a JsonDocument.\n    Console.WriteLine(payload.RootElement.GetRawText());\n}`\n        : `\n\nif (${conditional}) {\n    // Do something differently for this ${groupType ? groupType.name_singular || 'group' : 'user'}\n}\n`\n\n    return (\n        <>\n            <CodeSnippet language={Language.CSharp} wrap>\n                {`${\n                    localEvaluation ? '// ' + LOCAL_EVAL_REMINDER : ''\n                }var ${variableName} = ${flagSnippet}${followUpCode}`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function AndroidSnippet({ flagKey, multivariant, payload }: FeatureFlagSnippet): JSX.Element {\n    const clientSuffix = 'PostHog.'\n\n    if (payload) {\n        return (\n            <CodeSnippet language={Language.Kotlin} wrap>\n                {`${clientSuffix}getFeatureFlagPayload(\"${flagKey}\")`}\n            </CodeSnippet>\n        )\n    }\n\n    const flagFunction = multivariant ? 'getFeatureFlag' : 'isFeatureEnabled'\n\n    const variantSuffix = multivariant ? ` == \"example-variant\"` : ''\n    return (\n        <CodeSnippet language={Language.Kotlin} wrap>\n            {`if (${clientSuffix}${flagFunction}(\"${flagKey}\")${variantSuffix}) {\n    // do something\n}\n            `}\n        </CodeSnippet>\n    )\n}\n\nexport function FlutterSnippet({ flagKey, multivariant, payload }: FeatureFlagSnippet): JSX.Element {\n    const clientSuffix = 'await Posthog().'\n\n    if (payload) {\n        return (\n            <CodeSnippet language={Language.Dart} wrap>\n                {`${clientSuffix}getFeatureFlagPayload('${flagKey}');`}\n            </CodeSnippet>\n        )\n    }\n\n    const flagFunction = multivariant ? 'getFeatureFlag' : 'isFeatureEnabled'\n\n    const variantSuffix = multivariant ? ` == 'example-variant'` : ''\n\n    return (\n        <CodeSnippet language={Language.Dart} wrap>\n            {`if (${clientSuffix}${flagFunction}('${flagKey}')${variantSuffix}) {\n  // do something\n}\n            `}\n        </CodeSnippet>\n    )\n}\n\nexport function iOSSnippet({ flagKey, multivariant, payload }: FeatureFlagSnippet): JSX.Element {\n    const clientSuffix = 'PostHogSDK.shared.'\n\n    if (payload) {\n        return (\n            <CodeSnippet language={Language.Swift} wrap>\n                {`${clientSuffix}getFeatureFlagPayload(\"${flagKey}\")`}\n            </CodeSnippet>\n        )\n    }\n\n    const flagFunction = multivariant ? 'getFeatureFlag' : 'isFeatureEnabled'\n\n    const variantSuffix = multivariant ? `as? String == \"example-variant\"` : ''\n    return (\n        <CodeSnippet language={Language.Swift} wrap>\n            {`if ${clientSuffix}${flagFunction}(\"${flagKey}\")${variantSuffix} {\n    // do something\n}`}\n        </CodeSnippet>\n    )\n}\n\nexport function ReactNativeSnippet({ flagKey, multivariant, payload }: FeatureFlagSnippet): JSX.Element {\n    const clientSuffix = 'posthog.'\n\n    if (payload) {\n        return (\n            <CodeSnippet language={Language.JSX} wrap>\n                {`${clientSuffix}getFeatureFlagPayload('${flagKey}')`}\n            </CodeSnippet>\n        )\n    }\n\n    const flagFunction = multivariant ? 'getFeatureFlag' : 'isFeatureEnabled'\n\n    const variantSuffix = multivariant ? ` == 'example-variant'` : ''\n    return (\n        <CodeSnippet language={Language.JSX} wrap>\n            {`// With a hook\nimport { useFeatureFlag } from 'posthog-react-native'\n\nconst MyComponent = () => {\n    const showFlaggedFeature = useFeatureFlag('${flagKey}')\n\n    if (showFlaggedFeature === undefined) {\n        // the response is undefined if the flags are being loaded\n        return null\n    }\n\n    return showFlaggedFeature ${variantSuffix} ? <Text>Testing feature \uD83D\uDE04</Text> : <Text>Not Testing feature \uD83D\uDE22</Text>\n}\n\n// Or calling on the method directly\n${clientSuffix}${flagFunction}('${flagKey}')\n            `}\n        </CodeSnippet>\n    )\n}\n\nexport function ReactSnippet({ flagKey, multivariant, payload }: FeatureFlagSnippet): JSX.Element {\n    const flagFunction = payload\n        ? 'useFeatureFlagPayload'\n        : multivariant\n        ? 'useFeatureFlagVariantKey'\n        : 'useFeatureFlagEnabled'\n\n    const variable = payload ? 'payload' : multivariant ? 'variant' : 'flagEnabled'\n    const variantSuffix = multivariant ? ` == 'example-variant'` : ''\n\n    return (\n        <CodeSnippet language={Language.JSX} wrap>\n            {`\nimport { ${flagFunction} } from 'posthog-js/react'\n\nfunction App() {\n    const ${variable} = ${flagFunction}('${flagKey}')\n\n    if (${variable}${variantSuffix}) {\n        // do something\n    }\n}`}\n        </CodeSnippet>\n    )\n}\n\nexport function APISnippet({ flagKey, groupType, remoteConfiguration }: FeatureFlagSnippet): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n\n    const groupAddition = groupType\n        ? `,\n    \"groups\": { \"${groupType.group_type}\": \"<${groupType.name_singular || 'group'} ID>\" },`\n        : ''\n\n    if (remoteConfiguration) {\n        return (\n            <>\n                <CodeSnippet language={Language.Bash} wrap>\n                    {`curl ${apiHostOrigin()}/api/projects/${currentTeam?.id || ':projectId'}/feature_flags/${\n                        flagKey || ':featureFlagKey'\n                    }/remote_config/ \\\\\n-H 'Content-Type: application/json' \\\\\n-H 'Authorization: Bearer [personal_api_key]'`}\n                </CodeSnippet>\n            </>\n        )\n    }\n\n    return (\n        <>\n            <CodeSnippet language={Language.Bash} wrap>\n                {`curl ${apiHostOrigin()}/decide?v=3/ \\\\\n-X POST -H 'Content-Type: application/json' \\\\\n-d '{\n    \"api_key\": \"${currentTeam ? currentTeam.api_token : '[project_api_key]'}\",\n    \"distinct_id\": \"[user distinct id]\"${groupAddition}\n}'\n                `}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function JSSnippet({\n    flagKey,\n    multivariant,\n    payload,\n    groupType,\n    instantlyAvailableProperties,\n    samplePropertyName,\n}: FeatureFlagSnippet): JSX.Element {\n    if (payload) {\n        return (\n            <>\n                <CodeSnippet language={Language.JavaScript} wrap>\n                    {`posthog.getFeatureFlagPayload('${flagKey ?? ''}')`}\n                </CodeSnippet>\n            </>\n        )\n    }\n\n    const propertyName = samplePropertyName || 'is_authorized'\n\n    const propertyOverrideSnippet = `// Your flag depends on properties that are not instantly available. If you want\n// to make them available without waiting for server delays, send these properties for flag evaluation, like so:\n// Make sure to call this before evaluating flags. More info: https://posthog.com/docs/libraries/js#overriding-server-properties \nposthog.${\n        groupType\n            ? `setGroupPropertiesForFlags({ '${groupType.group_type}': {'${propertyName}': 'value'}})`\n            : `setPersonPropertiesForFlags({'${propertyName}': 'value'})`\n    }\n\n`\n\n    const clientSuffix = 'posthog.'\n    const flagFunction = multivariant ? 'getFeatureFlag' : 'isFeatureEnabled'\n\n    const variantSuffix = multivariant ? ` == 'example-variant'` : ''\n    return (\n        <>\n            <CodeSnippet language={Language.JavaScript} wrap>\n                {`${instantlyAvailableProperties ? '' : propertyOverrideSnippet}// Ensure flags are loaded before usage.\n// You'll only need to call this on the code for when the first time a user visits.\n${clientSuffix}onFeatureFlags(function() {\n    // feature flags should be available at this point\n    if (${clientSuffix}${flagFunction}('${flagKey ?? ''}') ${variantSuffix}) {\n        // do something\n    }\n})\n\n// Otherwise, you can just do:\nif (${clientSuffix}${flagFunction}('${flagKey ?? ''}') ${variantSuffix}) {\n    // do something\n}`}\n            </CodeSnippet>\n        </>\n    )\n}\n\nexport function JSBootstrappingSnippet(): JSX.Element {\n    return (\n        <CodeSnippet language={Language.JavaScript} wrap>\n            {`// Initialise the posthog library with a distinct ID and feature flags for immediate loading\n// This avoids the delay between the library loading and feature flags becoming available to use.\n\nposthog.init('{project_api_key}', {\n    api_host: '${apiHostOrigin()}'\n    bootstrap:\n    {\n        distinctID: 'your-anonymous-id',\n        featureFlags: {\n    // input the flag values here from 'posthog.getAllFlags(distinct_id)' which you can find in the server-side libraries.\n        // example:\n            // 'flag-1': true,\n            // 'variant-flag': 'control',\n            // 'other-flag': false\n        },\n    }\n})\n            `}\n        </CodeSnippet>\n    )\n}\n", "import './FeatureFlagInstructions.scss'\n\nimport { IconInfo } from '@posthog/icons'\nimport { LemonCheckbox, LemonSelect, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { INSTANTLY_AVAILABLE_PROPERTIES } from 'lib/constants'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\nimport { useEffect, useState } from 'react'\n\nimport { groupsModel } from '~/models/groupsModel'\nimport { FeatureFlagType, GroupTypeIndex, SDKKey } from '~/types'\n\nimport {\n    BOOTSTRAPPING_OPTIONS,\n    FF_ANCHOR,\n    InstructionOption,\n    LibraryType,\n    LOCAL_EVAL_ANCHOR,\n    LOCAL_EVALUATION_LIBRARIES,\n    OPTIONS,\n    PAYLOAD_LIBRARIES,\n    PAYLOADS_ANCHOR,\n    REMOTE_CONFIGURATION_LIBRARIES,\n} from './FeatureFlagCodeOptions'\n\nfunction FeatureFlagInstructionsFooter({ documentationLink }: { documentationLink: string }): JSX.Element {\n    return (\n        <div className=\"mt-4\">\n            Need more information?{' '}\n            <Link data-attr=\"feature-flag-doc-link\" target=\"_blank\" to={documentationLink} targetBlankIcon>\n                Check the docs\n            </Link>\n        </div>\n    )\n}\n\nexport interface CodeInstructionsProps {\n    options: InstructionOption[]\n    selectedLanguage?: string\n    featureFlag?: FeatureFlagType\n    dataAttr?: string\n    showFlagValue?: boolean\n    showLocalEval?: boolean\n    showBootstrap?: boolean\n    showAdvancedOptions?: boolean\n    showFooter?: boolean\n}\n\nexport function CodeInstructions({\n    options,\n    selectedLanguage,\n    featureFlag,\n    dataAttr = '',\n    showLocalEval = false,\n    showBootstrap = false,\n    showAdvancedOptions = true,\n    showFooter = true,\n}: CodeInstructionsProps): JSX.Element {\n    const encryptedPayload = featureFlag?.has_encrypted_payloads\n    const remoteConfiguration = featureFlag?.is_remote_configuration\n\n    const [defaultSelectedOption] = (remoteConfiguration\n        ? options.filter((option) => option.key === SDKKey.NODE_JS)\n        : options) || [options[0]]\n\n    const [selectedOption, setSelectedOption] = useState(defaultSelectedOption)\n    const [bootstrapOption, setBootstrapOption] = useState(BOOTSTRAPPING_OPTIONS[0])\n    const [showPayloadCode, setShowPayloadCode] = useState(\n        featureFlag?.is_remote_configuration || Object.keys(featureFlag?.filters.payloads || {}).length > 0\n    )\n    const [showLocalEvalCode, setShowLocalEvalCode] = useState(showLocalEval)\n    const [showBootstrapCode, setShowBootstrapCode] = useState(showBootstrap)\n\n    const showFlagValueCode = !featureFlag?.is_remote_configuration\n\n    const multivariantFlag = !!featureFlag?.filters.multivariate?.variants\n\n    const featureFlagKey = featureFlag?.key || 'my-flag'\n\n    const { groupTypes } = useValues(groupsModel)\n    const groupType =\n        featureFlag?.filters?.aggregation_group_type_index != null\n            ? groupTypes.get(featureFlag.filters.aggregation_group_type_index as GroupTypeIndex)\n            : undefined\n\n    const { reportFlagsCodeExampleInteraction, reportFlagsCodeExampleLanguage } = useActions(eventUsageLogic)\n    const getDocumentationLink = (): string => {\n        const documentationLink = selectedOption.documentationLink\n\n        if (showBootstrapCode) {\n            return bootstrapOption.documentationLink\n        }\n\n        let anchor = FF_ANCHOR\n        if (showLocalEvalCode) {\n            anchor = LOCAL_EVAL_ANCHOR\n        } else if (showPayloadCode) {\n            anchor = PAYLOADS_ANCHOR\n        }\n\n        return `${documentationLink}${anchor}`\n    }\n\n    const selectOption = (selectedValue: string): void => {\n        const option = options.find((option) => option.key === selectedValue)\n\n        if (option) {\n            setSelectedOption(option)\n        }\n\n        const libHasPayloads = PAYLOAD_LIBRARIES.find((payloadOption) => payloadOption === selectedValue)\n\n        if (!libHasPayloads) {\n            setShowPayloadCode(false)\n        }\n\n        const libHasLocalEval = LOCAL_EVALUATION_LIBRARIES.find((localEvalOption) => localEvalOption === selectedValue)\n        if (!libHasLocalEval) {\n            setShowLocalEvalCode(false)\n        }\n\n        const bootstrapOption = BOOTSTRAPPING_OPTIONS.find((bootstrapOption) => bootstrapOption.key === selectedValue)\n        if (bootstrapOption) {\n            setBootstrapOption(bootstrapOption)\n        } else {\n            setShowBootstrapCode(false)\n        }\n    }\n\n    useEffect(() => {\n        if (selectedLanguage) {\n            selectOption(selectedLanguage)\n        } else {\n            // When flag definition changes, de-select any options that can't be selected anymore\n            selectOption(defaultSelectedOption.key)\n        }\n\n        if (\n            featureFlag?.is_remote_configuration ||\n            (Object.keys(featureFlag?.filters.payloads || {}).length > 0 &&\n                Object.values(featureFlag?.filters.payloads || {}).some((value) => value))\n        ) {\n            setShowPayloadCode(true)\n        } else {\n            setShowPayloadCode(false)\n        }\n\n        if (featureFlag?.ensure_experience_continuity) {\n            setShowLocalEvalCode(false)\n        }\n    }, [selectedLanguage, featureFlag])\n\n    const groups = featureFlag?.filters?.groups || []\n    // return first non-instant property in group\n    const firstNonInstantProperty = groups\n        .find(\n            (group) =>\n                group.properties?.length &&\n                group.properties.some((property) => !INSTANTLY_AVAILABLE_PROPERTIES.includes(property.key || ''))\n        )\n        ?.properties?.find((property) => !INSTANTLY_AVAILABLE_PROPERTIES.includes(property.key || ''))?.key\n\n    const randomProperty = groups.find((group) => group.properties?.length)?.properties?.[0]?.key\n\n    const allFlagLibraries = [\n        {\n            title: 'Client libraries',\n            options: OPTIONS.filter((option) => option.type == LibraryType.Client).map((option) => ({\n                value: option.key,\n                label: option.value,\n                'data-attr': `feature-flag-instructions-select-option-${option.key}`,\n                labelInMenu: (\n                    <div className=\"flex items-center space-x-2\">\n                        <option.Icon />\n                        <span>{option.value}</span>\n                    </div>\n                ),\n            })),\n        },\n        {\n            title: 'Server libraries',\n            options: OPTIONS.filter((option) => option.type == LibraryType.Server).map((option) => ({\n                value: option.key,\n                label: option.value,\n                'data-attr': `feature-flag-instructions-select-option-${option.key}`,\n                labelInMenu: (\n                    <div className=\"flex items-center space-x-2\">\n                        <option.Icon />\n                        <span>{option.value}</span>\n                    </div>\n                ),\n            })),\n        },\n    ]\n    const remoteConfigurationLibraries = [\n        {\n            title: 'Server libraries',\n            options: OPTIONS.filter((option) => REMOTE_CONFIGURATION_LIBRARIES.includes(option.key)).map((option) => ({\n                value: option.key,\n                label: option.value,\n                'data-attr': `feature-flag-instructions-select-option-${option.key}`,\n                labelInMenu: (\n                    <div className=\"flex items-center space-x-2\">\n                        <option.Icon />\n                        <span>{option.value}</span>\n                    </div>\n                ),\n            })),\n        },\n    ]\n    const supportedLibraries = remoteConfiguration ? remoteConfigurationLibraries : allFlagLibraries\n\n    return (\n        <div>\n            {showAdvancedOptions && (\n                <div className=\"flex items-center gap-6\">\n                    <div>\n                        <LemonSelect\n                            data-attr={'feature-flag-instructions-select' + (dataAttr ? `-${dataAttr}` : '')}\n                            options={supportedLibraries}\n                            onChange={(val) => {\n                                if (val) {\n                                    selectOption(val)\n                                    reportFlagsCodeExampleLanguage(val)\n                                }\n                            }}\n                            value={selectedOption.key}\n                        />\n                    </div>\n                    <Tooltip\n                        title={`Feature flag payloads are only available in these libraries: ${PAYLOAD_LIBRARIES.map(\n                            (payloadOption) => ` ${payloadOption}`\n                        )}`}\n                    >\n                        <div className=\"flex items-center gap-1\">\n                            <LemonCheckbox\n                                label=\"Show payload option\"\n                                onChange={() => {\n                                    setShowPayloadCode(!showPayloadCode)\n                                    reportFlagsCodeExampleInteraction('payloads')\n                                }}\n                                data-attr=\"flags-code-example-payloads-option\"\n                                checked={showPayloadCode}\n                                disabled={!PAYLOAD_LIBRARIES.includes(selectedOption.key)}\n                            />\n                            <IconInfo className=\"text-xl text-secondary shrink-0\" />\n                        </div>\n                    </Tooltip>\n                    <>\n                        <Tooltip\n                            title=\"Bootstrapping is only available client side in our JavaScript and React Native\n                                libraries.\"\n                        >\n                            <div className=\"flex items-center gap-1\">\n                                <LemonCheckbox\n                                    label=\"Show bootstrap option\"\n                                    data-attr=\"flags-code-example-bootstrap-option\"\n                                    checked={showBootstrapCode}\n                                    onChange={() => {\n                                        setShowBootstrapCode(!showBootstrapCode)\n                                        reportFlagsCodeExampleInteraction('bootstrap')\n                                    }}\n                                    disabled={\n                                        !BOOTSTRAPPING_OPTIONS.map((bo) => bo.key).includes(selectedOption.key) ||\n                                        !!featureFlag?.ensure_experience_continuity\n                                    }\n                                />\n                                <IconInfo className=\"text-xl text-secondary shrink-0\" />\n                            </div>\n                        </Tooltip>\n                        <Tooltip\n                            title=\"Local evaluation is only available in server side libraries and without flag\n                                persistence.\"\n                        >\n                            <div className=\"flex items-center gap-1\">\n                                <LemonCheckbox\n                                    label=\"Show local evaluation option\"\n                                    data-attr=\"flags-code-example-local-eval-option\"\n                                    checked={showLocalEvalCode}\n                                    onChange={() => {\n                                        setShowLocalEvalCode(!showLocalEvalCode)\n                                        reportFlagsCodeExampleInteraction('local evaluation')\n                                    }}\n                                    disabled={\n                                        remoteConfiguration ||\n                                        !LOCAL_EVALUATION_LIBRARIES.includes(selectedOption.key) ||\n                                        !!featureFlag?.ensure_experience_continuity\n                                    }\n                                />\n                                <IconInfo className=\"text-xl text-secondary shrink-0\" />\n                            </div>\n                        </Tooltip>\n                    </>\n                </div>\n            )}\n            <div className=\"mt-4 mb\">\n                {showLocalEvalCode && (\n                    <>\n                        <h4 className=\"l4\">Local evaluation</h4>\n                    </>\n                )}\n                {showFlagValueCode && (\n                    <selectedOption.Snippet\n                        data-attr=\"feature-flag-instructions-snippet\"\n                        flagKey={featureFlagKey}\n                        multivariant={multivariantFlag}\n                        groupType={groupType}\n                        localEvaluation={showLocalEvalCode}\n                        instantlyAvailableProperties={!firstNonInstantProperty}\n                        samplePropertyName={firstNonInstantProperty || randomProperty}\n                    />\n                )}\n                {showPayloadCode && (\n                    <>\n                        <h4 className=\"l4\">Payload</h4>\n                        <selectedOption.Snippet\n                            data-attr=\"feature-flag-instructions-payload-snippet\"\n                            flagKey={featureFlagKey}\n                            multivariant={multivariantFlag}\n                            groupType={groupType}\n                            localEvaluation={showLocalEvalCode}\n                            payload={true}\n                            remoteConfiguration={remoteConfiguration}\n                            encryptedPayload={encryptedPayload}\n                        />\n                    </>\n                )}\n                {showBootstrapCode && (\n                    <>\n                        <h4 className=\"l4\">Bootstrap</h4>\n                        <bootstrapOption.Snippet flagKey={featureFlagKey} />\n                    </>\n                )}\n                {showFooter && <FeatureFlagInstructionsFooter documentationLink={getDocumentationLink()} />}\n            </div>\n            <div />\n        </div>\n    )\n}\n\nexport function FeatureFlagInstructions({ featureFlag }: { featureFlag: FeatureFlagType }): JSX.Element {\n    return <CodeInstructions options={OPTIONS} featureFlag={featureFlag} />\n}\n", "import { IconServer } from '@posthog/icons'\nimport {\n    IconAndroidOS,\n    IconAppleIOS,\n    IconCSharp,\n    IconFlutter,\n    IconGolang,\n    IconJavascript,\n    IconNodeJS,\n    IconPHP,\n    IconPython,\n    IconReact,\n    IconRuby,\n} from 'lib/lemon-ui/icons'\n\nimport { SDKKey } from '~/types'\n\nimport {\n    AndroidSnippet,\n    APISnippet,\n    CSharpSnippet,\n    FeatureFlagSnippet,\n    FlutterSnippet,\n    GolangSnippet,\n    iOSSnippet,\n    JSBootstrappingSnippet,\n    JSSnippet,\n    NodeJSSnippet,\n    PHPSnippet,\n    PythonSnippet,\n    ReactNativeSnippet,\n    ReactSnippet,\n    RubySnippet,\n    UTM_TAGS,\n} from './FeatureFlagSnippets'\n\nconst DOC_BASE_URL = 'https://posthog.com/docs/'\nexport const FF_ANCHOR = '#feature-flags'\nexport const PAYLOADS_ANCHOR = '#feature-flag-payloads'\nexport const LOCAL_EVAL_ANCHOR = '#local-evaluation'\nexport const BOOTSTRAPPING_ANCHOR = '#bootstrapping-flags'\n\nexport interface InstructionOption {\n    value: string\n    documentationLink: string\n    Snippet: ({ flagKey, multivariant, groupType }: FeatureFlagSnippet) => JSX.Element\n    type: LibraryType\n    key: SDKKey\n    Icon: React.ElementType\n}\n\nexport enum LibraryType {\n    Client = 'Client',\n    Server = 'Server',\n}\n\nexport const OPTIONS: InstructionOption[] = [\n    {\n        value: 'JavaScript',\n        documentationLink: `${DOC_BASE_URL}libraries/js${UTM_TAGS}`,\n        Snippet: JSSnippet,\n        type: LibraryType.Client,\n        key: SDKKey.JS_WEB,\n        Icon: IconJavascript,\n    },\n    {\n        value: 'Android',\n        documentationLink: `${DOC_BASE_URL}libraries/android${UTM_TAGS}`,\n        Snippet: AndroidSnippet,\n        type: LibraryType.Client,\n        key: SDKKey.ANDROID,\n        Icon: IconAndroidOS,\n    },\n    {\n        value: 'API',\n        documentationLink: `${DOC_BASE_URL}api/post-only-endpoints#example-request--response-decide-v3`,\n        Snippet: APISnippet,\n        type: LibraryType.Server,\n        key: SDKKey.API,\n        Icon: IconServer,\n    },\n    {\n        value: 'Go',\n        documentationLink: `${DOC_BASE_URL}libraries/go${UTM_TAGS}`,\n        Snippet: GolangSnippet,\n        type: LibraryType.Server,\n        key: SDKKey.GO,\n        Icon: IconGolang,\n    },\n    {\n        value: 'Flutter',\n        documentationLink: `${DOC_BASE_URL}libraries/flutter${UTM_TAGS}`,\n        Snippet: FlutterSnippet,\n        type: LibraryType.Client,\n        key: SDKKey.FLUTTER,\n        Icon: IconFlutter,\n    },\n    {\n        value: 'iOS',\n        documentationLink: `${DOC_BASE_URL}libraries/ios${UTM_TAGS}`,\n        Snippet: iOSSnippet,\n        type: LibraryType.Client,\n        key: SDKKey.IOS,\n        Icon: IconAppleIOS,\n    },\n    {\n        value: 'Node.js',\n        documentationLink: `${DOC_BASE_URL}libraries/node${UTM_TAGS}`,\n        Snippet: NodeJSSnippet,\n        type: LibraryType.Server,\n        key: SDKKey.NODE_JS,\n        Icon: IconNodeJS,\n    },\n    {\n        value: 'React',\n        documentationLink: `${DOC_BASE_URL}libraries/react${UTM_TAGS}`,\n        Snippet: ReactSnippet,\n        type: LibraryType.Client,\n        key: SDKKey.REACT,\n        Icon: IconReact,\n    },\n    {\n        value: 'React Native',\n        documentationLink: `${DOC_BASE_URL}libraries/react-native${UTM_TAGS}`,\n        Snippet: ReactNativeSnippet,\n        type: LibraryType.Client,\n        key: SDKKey.REACT_NATIVE,\n        Icon: IconReact,\n    },\n    {\n        value: 'PHP',\n        documentationLink: `${DOC_BASE_URL}libraries/php${UTM_TAGS}`,\n        Snippet: PHPSnippet,\n        type: LibraryType.Server,\n        key: SDKKey.PHP,\n        Icon: IconPHP,\n    },\n    {\n        value: 'Python',\n        documentationLink: `${DOC_BASE_URL}libraries/python${UTM_TAGS}`,\n        Snippet: PythonSnippet,\n        type: LibraryType.Server,\n        key: SDKKey.PYTHON,\n        Icon: IconPython,\n    },\n    {\n        value: 'Ruby',\n        documentationLink: `${DOC_BASE_URL}libraries/ruby${UTM_TAGS}`,\n        Snippet: RubySnippet,\n        type: LibraryType.Server,\n        key: SDKKey.RUBY,\n        Icon: IconRuby,\n    },\n    {\n        value: 'C#/.NET',\n        documentationLink: `${DOC_BASE_URL}libraries/dotnet${UTM_TAGS}`,\n        Snippet: CSharpSnippet,\n        type: LibraryType.Server,\n        key: SDKKey.DOTNET,\n        Icon: IconCSharp,\n    },\n]\n\nexport const LOCAL_EVALUATION_LIBRARIES: string[] = [\n    SDKKey.NODE_JS,\n    SDKKey.PYTHON,\n    SDKKey.RUBY,\n    SDKKey.PHP,\n    SDKKey.GO,\n    SDKKey.DOTNET,\n]\n\nexport const PAYLOAD_LIBRARIES: string[] = [\n    SDKKey.API,\n    SDKKey.JS_WEB,\n    SDKKey.NODE_JS,\n    SDKKey.PYTHON,\n    SDKKey.RUBY,\n    SDKKey.REACT,\n    SDKKey.ANDROID,\n    SDKKey.REACT_NATIVE,\n    SDKKey.IOS,\n    SDKKey.FLUTTER,\n    SDKKey.DOTNET,\n    SDKKey.GO,\n]\n\nexport const REMOTE_CONFIGURATION_LIBRARIES: string[] = [\n    SDKKey.API,\n    SDKKey.NODE_JS,\n    SDKKey.PYTHON,\n    SDKKey.GO,\n    SDKKey.RUBY,\n    SDKKey.DOTNET,\n]\n\nexport const BOOTSTRAPPING_OPTIONS: InstructionOption[] = [\n    {\n        value: 'JavaScript',\n        documentationLink: `${DOC_BASE_URL}libraries/js${UTM_TAGS}${BOOTSTRAPPING_ANCHOR}`,\n        Snippet: JSBootstrappingSnippet,\n        type: LibraryType.Client,\n        key: SDKKey.JS_WEB,\n        Icon: IconJavascript,\n    },\n    {\n        value: 'React Native',\n        documentationLink: `${DOC_BASE_URL}libraries/react-native${UTM_TAGS}${BOOTSTRAPPING_ANCHOR}`,\n        Snippet: JSBootstrappingSnippet,\n        type: LibraryType.Client,\n        key: SDKKey.REACT_NATIVE,\n        Icon: IconReact,\n    },\n]\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "UTM_TAGS", "LOCAL_EVAL_REMINDER", "REMOTE_CONFIG_REMINDER", "ENCRYPTED_PAYLOAD_REMINDER", "NodeJSSnippet", "flagKey", "groupType", "multivariant", "localEvaluation", "payload", "remoteConfiguration", "encryptedPayload", "samplePropertyName", "clientSuffix", "flagFunction", "propertyName", "reminder", "CodeSnippet", "localEvalAddition", "flagSnippet", "variableName", "conditional", "followUpCode", "PHPSnippet", "GolangSnippet", "RubySnippet", "PythonSnippet", "CSharpSnippet", "localEvalCommentAddition", "localEvalCodeAddition", "AndroidSnippet", "variantSuffix", "FlutterSnippet", "iOSSnippet", "ReactNativeSnippet", "ReactSnippet", "variable", "APISnippet", "currentTeam", "teamLogic", "groupAddition", "apiHostOrigin", "JSSnippet", "instantlyAvailableProperties", "propertyOverrideSnippet", "JSBootstrappingSnippet", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "DOC_BASE_URL", "FF_ANCHOR", "PAYLOADS_ANCHOR", "LOCAL_EVAL_ANCHOR", "BOOTSTRAPPING_ANCHOR", "OPTIONS", "DOC_BASE_URL", "UTM_TAGS", "JSSnippet", "IconJavascript", "AndroidSnippet", "IconAndroidOS", "APISnippet", "IconServer", "GolangSnippet", "IconGolang", "FlutterSnippet", "IconFlutter", "iOSSnippet", "IconAppleIOS", "NodeJSSnippet", "IconNodeJS", "ReactSnippet", "IconReact", "ReactNativeSnippet", "PHPSnippet", "IconPHP", "PythonSnippet", "IconPython", "RubySnippet", "IconRuby", "CSharpSnippet", "IconCSharp", "LOCAL_EVALUATION_LIBRARIES", "PAYLOAD_LIBRARIES", "REMOTE_CONFIGURATION_LIBRARIES", "BOOTSTRAPPING_OPTIONS", "BOOTSTRAPPING_ANCHOR", "JSBootstrappingSnippet", "import_jsx_runtime", "FeatureFlagInstructionsFooter", "documentationLink", "Link", "CodeInstructions", "options", "selectedLanguage", "featureFlag", "dataAttr", "showLocalEval", "showBootstrap", "showAdvancedOptions", "showFooter", "encryptedPayload", "remoteConfiguration", "defaultSelectedOption", "option", "selectedOption", "setSelectedOption", "bootstrapOption", "setBootstrapOption", "BOOTSTRAPPING_OPTIONS", "showPayloadCode", "setShowPayloadCode", "showLocalEvalCode", "setShowLocalEvalCode", "showBootstrapCode", "setShowBootstrapCode", "showFlagValueCode", "multivariantFlag", "featureFlagKey", "groupTypes", "groupsModel", "groupType", "reportFlagsCodeExampleInteraction", "reportFlagsCodeExampleLanguage", "eventUsageLogic", "getDocumentationLink", "anchor", "FF_ANCHOR", "LOCAL_EVAL_ANCHOR", "PAYLOADS_ANCHOR", "selectOption", "selectedValue", "PAYLOAD_LIBRARIES", "payloadOption", "LOCAL_EVALUATION_LIBRARIES", "localEvalOption", "value", "groups", "firstNonInstantProperty", "group", "property", "INSTANTLY_AVAILABLE_PROPERTIES", "randomProperty", "allFlagLibraries", "OPTIONS", "remoteConfigurationLibraries", "REMOTE_CONFIGURATION_LIBRARIES", "supportedLibraries", "LemonSelect", "val", "Tooltip", "LemonCheckbox", "IconInfo", "bo", "FeatureFlagInstructions"]
}
