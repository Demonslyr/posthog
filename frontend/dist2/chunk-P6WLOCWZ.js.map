{
  "version": 3,
  "sources": ["../src/scenes/data-warehouse/external/forms/SourceForm.tsx", "../src/scenes/data-warehouse/external/forms/DataWarehouseIntegrationChoice.tsx", "../src/scenes/data-warehouse/external/forms/parseConnectionString.ts", "../src/scenes/data-warehouse/new/DataWarehouseTableForm.tsx", "../src/scenes/data-warehouse/external/forms/SyncMethodForm.tsx", "../src/scenes/data-warehouse/utils.ts"],
  "sourcesContent": ["import { LemonDivider, LemonFileInput, LemonInput, LemonSelect, LemonSwitch, LemonTextArea } from '@posthog/lemon-ui'\nimport { FieldName, Form, Group } from 'kea-forms'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport React, { useEffect } from 'react'\n\nimport { SourceConfig, SourceFieldConfig } from '~/types'\n\nimport { SOURCE_DETAILS, sourceWizardLogic } from '../../new/sourceWizardLogic'\nimport { DataWarehouseIntegrationChoice } from './DataWarehouseIntegrationChoice'\nimport { parseConnectionString } from './parseConnectionString'\n\nexport interface SourceFormProps {\n    sourceConfig: SourceConfig\n    showPrefix?: boolean\n    jobInputs?: Record<string, any>\n    setSourceConfigValue?: (key: FieldName, value: any) => void\n}\n\nconst CONNECTION_STRING_DEFAULT_PORT = {\n    Postgres: 5432,\n}\n\nconst sourceFieldToElement = (\n    field: SourceFieldConfig,\n    sourceConfig: SourceConfig,\n    lastValue?: any,\n    isUpdateMode?: boolean\n): JSX.Element => {\n    // It doesn't make sense for this to show on an update to an existing connection since we likely just want to change\n    // a field or two. There is also some divergence in creates vs. updates that make this a bit more complex to handle.\n    if (field.type === 'text' && field.name === 'connection_string') {\n        if (isUpdateMode) {\n            return <React.Fragment key={field.name} />\n        }\n        return (\n            <React.Fragment key={field.name}>\n                <LemonField name={field.name} label={field.label}>\n                    {({ onChange }) => (\n                        <LemonInput\n                            key={field.name}\n                            className=\"ph-connection-string\"\n                            data-attr={field.name}\n                            placeholder={field.placeholder}\n                            type=\"text\"\n                            onChange={(updatedConnectionString) => {\n                                onChange(updatedConnectionString)\n                                const { host, port, database, user, password, isValid } =\n                                    parseConnectionString(updatedConnectionString)\n\n                                if (isValid) {\n                                    sourceWizardLogic.actions.setSourceConnectionDetailsValue(\n                                        ['payload', 'database'],\n                                        database || ''\n                                    )\n                                    sourceWizardLogic.actions.setSourceConnectionDetailsValue(\n                                        ['payload', 'host'],\n                                        host || ''\n                                    )\n                                    sourceWizardLogic.actions.setSourceConnectionDetailsValue(\n                                        ['payload', 'user'],\n                                        user || ''\n                                    )\n                                    sourceWizardLogic.actions.setSourceConnectionDetailsValue(\n                                        ['payload', 'port'],\n                                        port || CONNECTION_STRING_DEFAULT_PORT[sourceConfig.name]\n                                    )\n                                    sourceWizardLogic.actions.setSourceConnectionDetailsValue(\n                                        ['payload', 'password'],\n                                        password || ''\n                                    )\n                                }\n                            }}\n                        />\n                    )}\n                </LemonField>\n                <LemonDivider />\n            </React.Fragment>\n        )\n    }\n\n    if (field.type === 'switch-group') {\n        const enabled = !!lastValue?.[field.name]?.enabled || lastValue?.[field.name]?.enabled === 'True'\n        return (\n            <LemonField key={field.name} name={[field.name, 'enabled']} label={field.label}>\n                {({ value, onChange }) => {\n                    const isEnabled = value === undefined || value === null || value === 'False' ? enabled : value\n                    return (\n                        <>\n                            {!!field.caption && <p>{field.caption}</p>}\n                            <LemonSwitch checked={isEnabled} onChange={onChange} />\n                            {isEnabled && (\n                                <Group name={field.name}>\n                                    {field.fields.map((field) =>\n                                        sourceFieldToElement(field, sourceConfig, lastValue?.[field.name])\n                                    )}\n                                </Group>\n                            )}\n                        </>\n                    )\n                }}\n            </LemonField>\n        )\n    }\n\n    if (field.type === 'select') {\n        const hasOptionFields = !!field.options.filter((n) => (n.fields?.length ?? 0) > 0).length\n\n        return (\n            <LemonField\n                key={field.name}\n                name={hasOptionFields ? [field.name, 'selection'] : field.name}\n                label={field.label}\n            >\n                {({ value, onChange }) => (\n                    <>\n                        <LemonSelect\n                            options={field.options}\n                            value={\n                                value === undefined || value === null\n                                    ? lastValue?.[field.name]\n                                    : value || field.defaultValue\n                            }\n                            onChange={onChange}\n                        />\n                        <Group name={field.name}>\n                            {field.options\n                                .find((n) => n.value === (value ?? field.defaultValue))\n                                ?.fields?.map((field) =>\n                                    sourceFieldToElement(field, sourceConfig, lastValue?.[field.name])\n                                )}\n                        </Group>\n                    </>\n                )}\n            </LemonField>\n        )\n    }\n\n    if (field.type === 'textarea') {\n        return (\n            <LemonField key={field.name} name={field.name} label={field.label}>\n                {({ value, onChange }) => (\n                    <LemonTextArea\n                        className=\"ph-ignore-input\"\n                        data-attr={field.name}\n                        placeholder={field.placeholder}\n                        minRows={4}\n                        value={value || ''}\n                        onChange={onChange}\n                    />\n                )}\n            </LemonField>\n        )\n    }\n\n    if (field.type === 'oauth') {\n        return (\n            <LemonField key={field.name} name={field.name} label={field.label}>\n                {({ value, onChange }) => (\n                    <DataWarehouseIntegrationChoice\n                        key={field.name}\n                        sourceConfig={sourceConfig}\n                        value={value}\n                        onChange={onChange}\n                    />\n                )}\n            </LemonField>\n        )\n    }\n\n    if (field.type === 'file-upload') {\n        return (\n            <LemonField key={field.name} name={field.name} label={field.label}>\n                {({ value, onChange }) => (\n                    <div className=\"bg-[white] p-2 border rounded-[var(--radius)]\">\n                        <LemonFileInput value={value} accept={field.fileFormat} multiple={false} onChange={onChange} />\n                    </div>\n                )}\n            </LemonField>\n        )\n    }\n\n    return (\n        <LemonField key={field.name} name={field.name} label={field.label}>\n            {({ value, onChange }) => (\n                <LemonInput\n                    className=\"ph-ignore-input\"\n                    data-attr={field.name}\n                    placeholder={field.placeholder}\n                    type={field.type as 'text'}\n                    value={value || ''}\n                    onChange={onChange}\n                />\n            )}\n        </LemonField>\n    )\n}\n\nexport default function SourceFormContainer(props: SourceFormProps): JSX.Element {\n    return (\n        <Form logic={sourceWizardLogic} formKey=\"sourceConnectionDetails\" enableFormOnSubmit>\n            <SourceFormComponent {...props} />\n        </Form>\n    )\n}\n\nexport function SourceFormComponent({\n    sourceConfig,\n    showPrefix = true,\n    jobInputs,\n    setSourceConfigValue,\n}: SourceFormProps): JSX.Element {\n    useEffect(() => {\n        if (jobInputs && setSourceConfigValue) {\n            for (const input of Object.keys(jobInputs || {})) {\n                setSourceConfigValue(['payload', input], jobInputs[input])\n            }\n        }\n    }, [JSON.stringify(jobInputs), setSourceConfigValue])\n\n    const isUpdateMode = !!setSourceConfigValue\n\n    return (\n        <div className=\"space-y-4\">\n            <Group name=\"payload\">\n                {SOURCE_DETAILS[sourceConfig.name].fields.map((field) =>\n                    sourceFieldToElement(field, sourceConfig, jobInputs?.[field.name], isUpdateMode)\n                )}\n            </Group>\n            {showPrefix && (\n                <LemonField name=\"prefix\" label=\"Table Prefix (optional)\">\n                    {({ value, onChange }) => (\n                        <>\n                            <LemonInput\n                                className=\"ph-ignore-input\"\n                                data-attr=\"prefix\"\n                                placeholder=\"internal_\"\n                                value={value}\n                                onChange={onChange}\n                            />\n                            <p>\n                                Example table name:{' '}\n                                <strong>\n                                    {value}\n                                    {sourceConfig.name.toLowerCase()}_table_name\n                                </strong>\n                            </p>\n                        </>\n                    )}\n                </LemonField>\n            )}\n        </div>\n    )\n}\n", "import {\n    IntegrationChoice,\n    IntegrationConfigureProps,\n} from 'scenes/pipeline/hogfunctions/integrations/IntegrationChoice'\n\nimport { SourceConfig } from '~/types'\n\nexport type DataWarehouseIntegrationChoice = IntegrationConfigureProps & {\n    sourceConfig: SourceConfig\n}\n\nexport function DataWarehouseIntegrationChoice({\n    sourceConfig,\n    ...props\n}: DataWarehouseIntegrationChoice): JSX.Element {\n    return (\n        <IntegrationChoice\n            {...props}\n            integration={sourceConfig.name.toLowerCase()}\n            redirectUrl={`/data-warehouse/new?kind=${sourceConfig.name.toLowerCase()}`}\n        />\n    )\n}\n", "//Parse method copied from https://github.com/brianc/node-postgres/tree/master/packages/pg-connection-string\n//Copyright (c) 2010-2014 Brian Carlson (brian.m.carlson@gmail.com)\n//Adapted & Repurposed for TypeScript by Peter Hicks (peter.h@posthog.com)\n//MIT License\n\ninterface Config {\n    host?: string\n    database?: string | null\n    port?: string | null\n    user?: string | null\n    password?: string | null\n    client_encoding?: string | null\n    isValid?: boolean\n    [key: string]: any\n}\n\nexport function parseConnectionString(str: string): Config {\n    const config: Config = {}\n    let result: URL\n    let dummyHost = false\n\n    // Allow \"postgres://\" and \"postgresql://\"\n    if (str.startsWith('postgres://')) {\n        str = 'postgresql://' + str.substring('postgres://'.length)\n    }\n\n    if (/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(str)) {\n        str = encodeURI(str).replace(/%25(\\d\\d)/g, '%$1') // Encode spaces as %20\n    }\n\n    try {\n        result = new URL(str, 'postgresql://base')\n    } catch {\n        // Invalid URL, attempt with dummy host\n        result = new URL(str.replace('@/', '@___DUMMY___/'), 'postgresql://base')\n        dummyHost = true\n    }\n\n    // Parse search parameters\n    for (const [key, value] of result.searchParams.entries()) {\n        config[key] = value\n    }\n\n    config.user = config.user || decodeURIComponent(result.username || '')\n    config.password = config.password || decodeURIComponent(result.password || '')\n\n    if (result.protocol === 'socket:') {\n        config.host = decodeURI(result.pathname)\n        config.database = result.searchParams.get('db')\n        config.client_encoding = result.searchParams.get('encoding')\n        return config\n    }\n\n    const hostname = dummyHost ? '' : result.hostname\n    if (!config.host) {\n        config.host = decodeURIComponent(hostname)\n    } else if (hostname && /^%2f/i.test(hostname)) {\n        result.pathname = hostname + result.pathname\n    }\n\n    config.port = config.port || result.port\n    const pathname = result.pathname.slice(1) || null\n    config.database = pathname ? decodeURIComponent(pathname) : null\n\n    config.isValid = !!(config.user && config.database && config.host)\n\n    return config\n}\n", "import { LemonButton, LemonInput, LemonSelect, Link } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\n\nimport { ManualLinkSourceType } from '~/types'\n\nimport { dataWarehouseTableLogic } from './dataWarehouseTableLogic'\nimport { sourceWizardLogic } from './sourceWizardLogic'\n\nconst ProviderMappings: Record<\n    ManualLinkSourceType,\n    {\n        fileUrlPatternPlaceholder: string\n        accessKeyPlaceholder: string\n        accessKeyLabel: string\n        accessSecretLabel: string\n    }\n> = {\n    aws: {\n        fileUrlPatternPlaceholder: 'eg: https://your-org.s3.amazonaws.com/airbyte/stripe/invoices/*.pqt',\n        accessKeyPlaceholder: 'eg: AKIAIOSFODNN7EXAMPLE',\n        accessKeyLabel: 'Access key',\n        accessSecretLabel: 'Access secret',\n    },\n    'google-cloud': {\n        fileUrlPatternPlaceholder: 'eg: https://storage.googleapis.com/your-org/airbyte/stripe/invoices/*.pqt',\n        accessKeyPlaceholder: 'eg: GOOGTS7C7FUP3AIRVEXAMPLE',\n        accessKeyLabel: 'Access ID',\n        accessSecretLabel: 'Secret',\n    },\n    'cloudflare-r2': {\n        fileUrlPatternPlaceholder: 'eg: https://your-account-id.r2.cloudflarestorage.com/airbyte/stripe/invoices/*.pqt',\n        accessKeyPlaceholder: 'eg: AKIAIOSFODNN7EXAMPLE',\n        accessKeyLabel: 'Access key',\n        accessSecretLabel: 'Access secret',\n    },\n    azure: {\n        fileUrlPatternPlaceholder:\n            'https://your-storage-container.blob.core.windows.net/airbyte/stripe/invoices/*.parquet',\n        accessKeyPlaceholder: 'your-storage-container',\n        accessKeyLabel: 'Storage account name',\n        accessSecretLabel: 'Account key',\n    },\n}\n\ninterface Props {\n    onUpdate?: () => void\n}\n\nexport function DatawarehouseTableForm({ onUpdate }: Props): JSX.Element {\n    const { manualLinkingProvider } = useValues(sourceWizardLogic)\n\n    const provider = manualLinkingProvider ?? 'aws'\n\n    return (\n        <Form\n            formKey=\"table\"\n            logic={dataWarehouseTableLogic}\n            className=\"space-y-4\"\n            enableFormOnSubmit\n            autoComplete=\"off\"\n        >\n            <div className=\"flex flex-col gap-2\">\n                <LemonField name=\"name\" label=\"Table name\">\n                    {({ value = '', onChange }) => (\n                        <LemonInput\n                            data-attr=\"table-name\"\n                            className=\"ph-ignore-input\"\n                            placeholder=\"Examples: stripe_invoice, hubspot_contacts, users\"\n                            autoComplete=\"off\"\n                            autoCapitalize=\"off\"\n                            autoCorrect=\"off\"\n                            spellCheck={false}\n                            value={value}\n                            onChange={onChange}\n                        />\n                    )}\n                </LemonField>\n                <div className=\"text-secondary text-xs mb-4\">This will be the table name used when writing queries</div>\n                <LemonField name=\"url_pattern\" label=\"Files URL pattern\">\n                    {({ value = '', onChange }) => (\n                        <LemonInput\n                            data-attr=\"table-url-pattern\"\n                            className=\"ph-ignore-input\"\n                            placeholder={ProviderMappings[provider].fileUrlPatternPlaceholder}\n                            autoComplete=\"off\"\n                            autoCapitalize=\"off\"\n                            autoCorrect=\"off\"\n                            spellCheck={false}\n                            value={value}\n                            onChange={onChange}\n                        />\n                    )}\n                </LemonField>\n                <div className=\"text-secondary text-xs mb-4\">\n                    You can use <strong>*</strong> to select multiple files.\n                </div>\n                <LemonField name=\"format\" label=\"File format\" className=\"w-max mb-4\">\n                    {({ value = '', onChange }) => (\n                        <LemonSelect\n                            data-attr=\"table-format\"\n                            options={[\n                                { label: 'Parquet (recommended)', value: 'Parquet' },\n                                { label: 'CSV', value: 'CSV' },\n                                { label: 'CSV with headers', value: 'CSVWithNames' },\n                                { label: 'JSON', value: 'JSONEachRow' },\n                                { label: 'Delta', value: 'Delta' },\n                            ]}\n                            value={value}\n                            onChange={onChange}\n                        />\n                    )}\n                </LemonField>\n                <LemonField name={['credential', 'access_key']} label={ProviderMappings[provider].accessKeyLabel}>\n                    {({ value = '', onChange }) => (\n                        <LemonInput\n                            data-attr=\"access-key\"\n                            className=\"ph-ignore-input\"\n                            placeholder={ProviderMappings[provider].accessKeyPlaceholder}\n                            autoComplete=\"off\"\n                            autoCapitalize=\"off\"\n                            autoCorrect=\"off\"\n                            spellCheck={false}\n                            value={value}\n                            onChange={onChange}\n                        />\n                    )}\n                </LemonField>\n                <LemonField name={['credential', 'access_secret']} label={ProviderMappings[provider].accessSecretLabel}>\n                    {({ value = '', onChange }) => (\n                        <LemonInput\n                            data-attr=\"access-secret\"\n                            className=\"ph-ignore-input\"\n                            type=\"password\"\n                            placeholder=\"eg: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n                            autoComplete=\"off\"\n                            autoCapitalize=\"off\"\n                            autoCorrect=\"off\"\n                            spellCheck={false}\n                            value={value}\n                            onChange={onChange}\n                        />\n                    )}\n                </LemonField>\n                {provider === 'google-cloud' && (\n                    <div className=\"text-secondary text-xs\">\n                        We use HMAC keys to access your Google Cloud Storage. Find more about generating them{' '}\n                        <Link to=\"https://cloud.google.com/storage/docs/authentication/hmackeys\" target=\"_new\">\n                            here\n                        </Link>\n                    </div>\n                )}\n            </div>\n            {!!onUpdate && (\n                <div className=\"flex justify-end\">\n                    <LemonButton type=\"primary\" onClick={onUpdate}>\n                        Save\n                    </LemonButton>\n                </div>\n            )}\n        </Form>\n    )\n}\n", "import { LemonButton, LemonSelect, LemonTag, lemonToast } from '@posthog/lemon-ui'\nimport { LemonRadio } from 'lib/lemon-ui/LemonRadio'\nimport { useEffect, useState } from 'react'\n\nimport { ExternalDataSourceSyncSchema } from '~/types'\n\nconst getIncrementalSyncSupported = (\n    schema: ExternalDataSourceSyncSchema\n): { disabled: true; disabledReason: string } | { disabled: false } => {\n    if (!schema.incremental_available) {\n        return {\n            disabled: true,\n            disabledReason: \"Incremental replication isn't supported on this table\",\n        }\n    }\n\n    if (schema.incremental_fields.length === 0) {\n        return {\n            disabled: true,\n            disabledReason: 'No incremental fields found on table',\n        }\n    }\n\n    return {\n        disabled: false,\n    }\n}\n\ninterface SyncMethodFormProps {\n    schema: ExternalDataSourceSyncSchema\n    onClose: () => void\n    onSave: (\n        syncType: ExternalDataSourceSyncSchema['sync_type'],\n        incrementalField: string | null,\n        incrementalFieldType: string | null\n    ) => void\n    saveButtonIsLoading?: boolean\n    showRefreshMessageOnChange?: boolean\n}\n\nconst hasInputChanged = (\n    newSchemaSyncType: ExternalDataSourceSyncSchema['sync_type'],\n    newSchemaIncrementalField: string | null,\n    originalSchemaSyncType: ExternalDataSourceSyncSchema['sync_type'],\n    originalSchemaIncrementalField: string | null\n): boolean => {\n    if (originalSchemaSyncType !== newSchemaSyncType) {\n        return true\n    }\n\n    if (newSchemaSyncType === 'incremental' && newSchemaIncrementalField !== originalSchemaIncrementalField) {\n        return true\n    }\n\n    return false\n}\n\nconst getSaveDisabledReason = (\n    syncType: 'full_refresh' | 'incremental' | undefined,\n    incrementalField: string | null\n): string | undefined => {\n    if (!syncType) {\n        return 'You must select a sync method before saving'\n    }\n\n    if (syncType === 'incremental' && !incrementalField) {\n        return 'You must select an incremental field'\n    }\n}\n\nexport const SyncMethodForm = ({\n    schema,\n    onClose,\n    onSave,\n    saveButtonIsLoading,\n    showRefreshMessageOnChange,\n}: SyncMethodFormProps): JSX.Element => {\n    const [originalSchemaSyncType] = useState(schema.sync_type ?? null)\n    const [originalSchemaIncrementalField] = useState(schema.incremental_field ?? null)\n\n    const [radioValue, setRadioValue] = useState(schema.sync_type ?? undefined)\n    const [incrementalFieldValue, setIncrementalFieldValue] = useState(schema.incremental_field ?? null)\n\n    useEffect(() => {\n        setRadioValue(schema.sync_type ?? undefined)\n        setIncrementalFieldValue(schema.incremental_field ?? null)\n    }, [schema.table])\n\n    const incrementalSyncSupported = getIncrementalSyncSupported(schema)\n\n    const inputChanged = hasInputChanged(\n        radioValue ?? null,\n        incrementalFieldValue,\n        originalSchemaSyncType,\n        originalSchemaIncrementalField\n    )\n    const showRefreshMessage = inputChanged && showRefreshMessageOnChange\n\n    return (\n        <>\n            <LemonRadio\n                radioPosition=\"top\"\n                value={radioValue}\n                options={[\n                    {\n                        value: 'incremental',\n                        disabledReason:\n                            (incrementalSyncSupported.disabled && incrementalSyncSupported.disabledReason) || undefined,\n                        label: (\n                            <div className=\"mb-6 font-normal\">\n                                <div className=\"items-center flex leading-[normal] overflow-hidden mb-2.5\">\n                                    <h2 className=\"mb-0 mr-2\">Incremental replication</h2>\n                                    {!incrementalSyncSupported.disabled && (\n                                        <LemonTag type=\"success\">Recommended</LemonTag>\n                                    )}\n                                </div>\n                                <p>\n                                    When using incremental replication, we'll store the max value of the below field on\n                                    each sync and only sync rows with greater or equal value on the next run.\n                                </p>\n                                <p>\n                                    You should pick a field that increments or updates each time the row is updated,\n                                    such as a <code>updated_at</code> timestamp.\n                                </p>\n                                <LemonSelect\n                                    value={incrementalFieldValue}\n                                    onChange={(newValue) => setIncrementalFieldValue(newValue)}\n                                    options={\n                                        schema.incremental_fields.map((n) => ({\n                                            value: n.field,\n                                            label: (\n                                                <>\n                                                    <span className=\"leading-5\">{n.label}</span>\n                                                    <LemonTag className=\"ml-2\" type=\"success\">\n                                                        {n.type}\n                                                    </LemonTag>\n                                                </>\n                                            ),\n                                        })) ?? []\n                                    }\n                                    disabledReason={incrementalSyncSupported.disabled ? '' : undefined}\n                                />\n                            </div>\n                        ),\n                    },\n                    {\n                        value: 'full_refresh',\n                        label: (\n                            <div className=\"mb-6 font-normal\">\n                                <div className=\"items-center flex leading-[normal] overflow-hidden mb-2.5\">\n                                    <h2 className=\"mb-0 mr-2\">Full table replication</h2>\n                                </div>\n                                <p>\n                                    We'll replicate the whole table on every sync. This can take longer to sync and\n                                    increase your monthly billing.\n                                </p>\n                            </div>\n                        ),\n                    },\n                ]}\n                onChange={(newValue) => setRadioValue(newValue)}\n            />\n            {showRefreshMessage && (\n                <p className=\"text-danger\">\n                    Note: Changing the sync type or incremental replication field will trigger a full table refresh\n                </p>\n            )}\n            <div className=\"flex flex-row justify-end w-full\">\n                <LemonButton className=\"mr-3\" type=\"secondary\" onClick={onClose}>\n                    Close\n                </LemonButton>\n                <LemonButton\n                    type=\"primary\"\n                    loading={saveButtonIsLoading}\n                    disabledReason={getSaveDisabledReason(radioValue, incrementalFieldValue)}\n                    onClick={() => {\n                        if (radioValue === 'incremental') {\n                            const fieldSelected = schema.incremental_fields.find(\n                                (n) => n.field === incrementalFieldValue\n                            )\n                            if (!fieldSelected) {\n                                lemonToast.error('Selected field for incremental replication not found')\n                                return\n                            }\n\n                            onSave('incremental', incrementalFieldValue, fieldSelected.field_type)\n                        } else {\n                            onSave('full_refresh', null, null)\n                        }\n                    }}\n                >\n                    Save\n                </LemonButton>\n            </div>\n        </>\n    )\n}\n", "import { DatabaseSchemaField, DataVisualizationNode, NodeKind } from '~/queries/schema/schema-general'\n\nexport const defaultQuery = (table: string, columns: DatabaseSchemaField[]): DataVisualizationNode => {\n    return {\n        kind: NodeKind.DataVisualizationNode,\n        source: {\n            kind: NodeKind.HogQLQuery,\n            // TODO: Use `hogql` tag?\n            query: `SELECT ${columns\n                .filter(({ table, fields, chain, schema_valid }) => !table && !fields && !chain && schema_valid)\n                .map(({ name }) => name)} FROM ${table === 'numbers' ? 'numbers(0, 10)' : table} LIMIT 100`,\n        },\n    }\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea_forms", "import_react", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "DataWarehouseIntegrationChoice", "sourceConfig", "props", "IntegrationChoice", "init_dirname", "init_buffer", "init_process", "parseConnectionString", "str", "config", "result", "dummyHost", "key", "value", "hostname", "pathname", "import_jsx_runtime", "CONNECTION_STRING_DEFAULT_PORT", "sourceFieldToElement", "field", "sourceConfig", "lastValue", "isUpdateMode", "React", "LemonField", "onChange", "LemonInput", "updatedConnectionString", "host", "port", "database", "user", "password", "isValid", "parseConnectionString", "sourceWizardLogic", "LemonDivider", "enabled", "value", "isEnabled", "LemonSwitch", "hasOptionFields", "n", "LemonSelect", "LemonTextArea", "DataWarehouseIntegrationChoice", "LemonFileInput", "SourceFormContainer", "props", "SourceFormComponent", "showPrefix", "jobInputs", "setSourceConfigValue", "input", "SOURCE_DETAILS", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_jsx_runtime", "ProviderMappings", "DatawarehouseTableForm", "onUpdate", "manualLinkingProvider", "sourceWizardLogic", "provider", "dataWarehouseTableLogic", "LemonField", "value", "onChange", "LemonInput", "LemonSelect", "Link", "LemonButton", "init_dirname", "init_buffer", "init_process", "import_react", "import_jsx_runtime", "getIncrementalSyncSupported", "schema", "hasInputChanged", "newSchemaSyncType", "newSchemaIncrementalField", "originalSchemaSyncType", "originalSchemaIncrementalField", "getSaveDisabledReason", "syncType", "incrementalField", "SyncMethodForm", "onClose", "onSave", "saveButtonIsLoading", "showRefreshMessageOnChange", "radioValue", "setRadioValue", "incrementalFieldValue", "setIncrementalFieldValue", "incrementalSyncSupported", "showRefreshMessage", "LemonRadio", "LemonTag", "LemonSelect", "newValue", "n", "LemonButton", "fieldSelected", "lemonToast", "init_dirname", "init_buffer", "init_process", "defaultQuery", "table", "columns", "fields", "chain", "schema_valid", "name"]
}
