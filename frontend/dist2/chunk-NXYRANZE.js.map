{
  "version": 3,
  "sources": ["../src/scenes/surveys/Surveys.tsx"],
  "sourcesContent": ["import { IconGear } from '@posthog/icons'\nimport {\n    LemonButton,\n    LemonDialog,\n    LemonDivider,\n    LemonInput,\n    LemonSelect,\n    LemonTable,\n    LemonTag,\n    LemonTagType,\n    Link,\n    Spinner,\n} from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { router } from 'kea-router'\nimport { ActivityLog } from 'lib/components/ActivityLog/ActivityLog'\nimport { MemberSelect } from 'lib/components/MemberSelect'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { ProductIntroduction } from 'lib/components/ProductIntroduction/ProductIntroduction'\nimport { VersionCheckerBanner } from 'lib/components/VersionChecker/VersionCheckerBanner'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { dayjs } from 'lib/dayjs'\nimport { useFeatureFlag } from 'lib/hooks/useFeatureFlag'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonTableColumn } from 'lib/lemon-ui/LemonTable'\nimport { createdAtColumn, createdByColumn } from 'lib/lemon-ui/LemonTable/columnUtils'\nimport { LemonTableLink } from 'lib/lemon-ui/LemonTable/LemonTableLink'\nimport { LemonTabs } from 'lib/lemon-ui/LemonTabs'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport stringWithWBR from 'lib/utils/stringWithWBR'\nimport { LinkedHogFunctions } from 'scenes/pipeline/hogfunctions/list/LinkedHogFunctions'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { ActivityScope, ProductKey, ProgressStatus, Survey } from '~/types'\n\nimport { SurveyQuestionLabel } from './constants'\nimport { openSurveysSettingsDialog, SurveySettings } from './SurveySettings'\nimport { getSurveyStatus, surveysLogic, SurveysTabs } from './surveysLogic'\n\nexport const scene: SceneExport = {\n    component: Surveys,\n    logic: surveysLogic,\n}\n\nexport function Surveys(): JSX.Element {\n    const {\n        surveys,\n        searchedSurveys,\n        surveysLoading,\n        surveysResponsesCount,\n        surveysResponsesCountLoading,\n        searchTerm,\n        filters,\n        showSurveysDisabledBanner,\n        tab,\n        globalSurveyAppearanceConfigAvailable,\n    } = useValues(surveysLogic)\n\n    const { deleteSurvey, updateSurvey, setSearchTerm, setSurveysFilters, setTab } = useActions(surveysLogic)\n\n    const { user } = useValues(userLogic)\n    const { featureFlags } = useValues(featureFlagLogic)\n    const shouldShowEmptyState = !surveysLoading && surveys.length === 0\n    const showLinkedHogFunctions = useFeatureFlag('HOG_FUNCTIONS_LINKED')\n    const settingLevel = featureFlags[FEATURE_FLAGS.ENVIRONMENTS] ? 'environment' : 'project'\n\n    return (\n        <div>\n            <PageHeader\n                buttons={\n                    <>\n                        <LemonButton\n                            to={urls.surveyTemplates()}\n                            type=\"primary\"\n                            data-attr=\"new-survey\"\n                            sideAction={{\n                                dropdown: {\n                                    placement: 'bottom-start',\n                                    actionable: true,\n                                    overlay: (\n                                        <LemonButton size=\"small\" to={urls.survey('new')}>\n                                            Create blank survey\n                                        </LemonButton>\n                                    ),\n                                },\n                                'data-attr': 'saved-insights-new-insight-dropdown',\n                            }}\n                        >\n                            New survey\n                        </LemonButton>\n                    </>\n                }\n                caption={\n                    <>\n                        Check out our\n                        <Link\n                            data-attr=\"survey-help\"\n                            to=\"https://posthog.com/docs/surveys?utm_medium=in-product&utm_campaign=new-survey\"\n                            target=\"_blank\"\n                        >\n                            {' '}\n                            surveys docs\n                        </Link>{' '}\n                        to learn more.\n                    </>\n                }\n                tabbedPage\n            />\n            <LemonTabs\n                activeKey={tab}\n                onChange={(newTab) => setTab(newTab as SurveysTabs)}\n                tabs={[\n                    { key: SurveysTabs.Active, label: 'Active' },\n                    { key: SurveysTabs.Archived, label: 'Archived' },\n                    showLinkedHogFunctions ? { key: SurveysTabs.Notifications, label: 'Notifications' } : null,\n                    { key: SurveysTabs.History, label: 'History' },\n                    globalSurveyAppearanceConfigAvailable ? { key: SurveysTabs.Settings, label: 'Settings' } : null,\n                ]}\n            />\n            {tab === SurveysTabs.Settings && <SurveySettings />}\n            {tab === SurveysTabs.Notifications && (\n                <>\n                    <p>Get notified whenever a survey result is submitted</p>\n                    <LinkedHogFunctions\n                        logicKey=\"surveys\"\n                        type=\"destination\"\n                        subTemplateId=\"survey-response\"\n                        filters={{\n                            events: [\n                                {\n                                    id: 'survey sent',\n                                    type: 'events',\n                                    order: 0,\n                                },\n                            ],\n                        }}\n                    />\n                </>\n            )}\n\n            {tab === SurveysTabs.History && <ActivityLog scope={ActivityScope.SURVEY} />}\n\n            {(tab === SurveysTabs.Active || tab === SurveysTabs.Archived) && (\n                <>\n                    <div className=\"space-y-2\">\n                        <VersionCheckerBanner />\n\n                        {showSurveysDisabledBanner ? (\n                            <LemonBanner\n                                type=\"warning\"\n                                action={{\n                                    type: 'secondary',\n                                    icon: <IconGear />,\n                                    onClick: () => openSurveysSettingsDialog(),\n                                    children: 'Configure',\n                                }}\n                                className=\"mb-2\"\n                            >\n                                Survey popovers are currently disabled for this {settingLevel} but there are active\n                                surveys running. Re-enable them in the settings.\n                            </LemonBanner>\n                        ) : null}\n                    </div>\n\n                    {(shouldShowEmptyState || !user?.has_seen_product_intro_for?.[ProductKey.SURVEYS]) && (\n                        <ProductIntroduction\n                            productName=\"Surveys\"\n                            thingName=\"survey\"\n                            description=\"Use surveys to gather qualitative feedback from your users on new or existing features.\"\n                            action={() => router.actions.push(urls.surveyTemplates())}\n                            isEmpty={surveys.length === 0}\n                            productKey={ProductKey.SURVEYS}\n                        />\n                    )}\n                    {!shouldShowEmptyState && (\n                        <>\n                            <div>\n                                <div className=\"flex flex-wrap justify-between gap-2 mb-4\">\n                                    <LemonInput\n                                        type=\"search\"\n                                        placeholder=\"Search for surveys\"\n                                        onChange={setSearchTerm}\n                                        value={searchTerm || ''}\n                                    />\n                                    <div className=\"flex items-center gap-2\">\n                                        <span>\n                                            <b>Status</b>\n                                        </span>\n                                        <LemonSelect\n                                            dropdownMatchSelectWidth={false}\n                                            onChange={(status) => {\n                                                setSurveysFilters({ status })\n                                            }}\n                                            size=\"small\"\n                                            options={[\n                                                { label: 'Any', value: 'any' },\n                                                { label: 'Draft', value: 'draft' },\n                                                { label: 'Running', value: 'running' },\n                                                { label: 'Complete', value: 'complete' },\n                                            ]}\n                                            value={filters.status}\n                                        />\n                                        <span className=\"ml-1\">\n                                            <b>Created by</b>\n                                        </span>\n                                        <MemberSelect\n                                            defaultLabel=\"Any user\"\n                                            value={filters.created_by ?? null}\n                                            onChange={(user) => setSurveysFilters({ created_by: user?.id })}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                            <LemonTable\n                                dataSource={searchedSurveys}\n                                defaultSorting={{\n                                    columnKey: 'created_at',\n                                    order: -1,\n                                }}\n                                rowKey=\"name\"\n                                nouns={['survey', 'surveys']}\n                                data-attr=\"surveys-table\"\n                                emptyState={\n                                    tab === SurveysTabs.Active ? 'No surveys. Create a new survey?' : 'No surveys found'\n                                }\n                                loading={surveysLoading}\n                                columns={[\n                                    {\n                                        dataIndex: 'name',\n                                        title: 'Name',\n                                        render: function RenderName(_, survey) {\n                                            return (\n                                                <LemonTableLink\n                                                    to={urls.survey(survey.id)}\n                                                    title={stringWithWBR(survey.name, 17)}\n                                                />\n                                            )\n                                        },\n                                    },\n                                    {\n                                        title: 'Responses',\n                                        dataIndex: 'id',\n                                        render: function RenderResponses(_, survey) {\n                                            return (\n                                                <>\n                                                    {surveysResponsesCountLoading ? (\n                                                        <Spinner />\n                                                    ) : (\n                                                        <div>{surveysResponsesCount[survey.id] ?? 0}</div>\n                                                    )}\n                                                </>\n                                            )\n                                        },\n                                        sorter: (surveyA, surveyB) => {\n                                            const countA = surveysResponsesCount[surveyA.id] ?? 0\n                                            const countB = surveysResponsesCount[surveyB.id] ?? 0\n                                            return countA - countB\n                                        },\n                                    },\n                                    {\n                                        dataIndex: 'type',\n                                        title: 'Mode',\n                                    },\n                                    {\n                                        title: 'Question type',\n                                        render: function RenderResponses(_, survey) {\n                                            return survey.questions?.length === 1\n                                                ? SurveyQuestionLabel[survey.questions[0].type]\n                                                : 'Multiple'\n                                        },\n                                    },\n                                    createdByColumn<Survey>() as LemonTableColumn<Survey, keyof Survey | undefined>,\n                                    createdAtColumn<Survey>() as LemonTableColumn<Survey, keyof Survey | undefined>,\n                                    {\n                                        title: 'Status',\n                                        width: 100,\n                                        render: function Render(_, survey: Survey) {\n                                            return <StatusTag survey={survey} />\n                                        },\n                                    },\n                                    {\n                                        width: 0,\n                                        render: function Render(_, survey: Survey) {\n                                            return (\n                                                <More\n                                                    overlay={\n                                                        <>\n                                                            <LemonButton\n                                                                fullWidth\n                                                                onClick={() =>\n                                                                    router.actions.push(urls.survey(survey.id))\n                                                                }\n                                                            >\n                                                                View\n                                                            </LemonButton>\n                                                            {!survey.start_date && (\n                                                                <LemonButton\n                                                                    fullWidth\n                                                                    onClick={() =>\n                                                                        LemonDialog.open({\n                                                                            title: 'Launch this survey?',\n                                                                            content: (\n                                                                                <div className=\"text-sm text-secondary\">\n                                                                                    The survey will immediately start\n                                                                                    displaying to users matching the\n                                                                                    display conditions.\n                                                                                </div>\n                                                                            ),\n                                                                            primaryButton: {\n                                                                                children: 'Launch',\n                                                                                type: 'primary',\n                                                                                onClick: () => {\n                                                                                    updateSurvey({\n                                                                                        id: survey.id,\n                                                                                        updatePayload: {\n                                                                                            start_date:\n                                                                                                dayjs().toISOString(),\n                                                                                        },\n                                                                                    })\n                                                                                },\n                                                                                size: 'small',\n                                                                            },\n                                                                            secondaryButton: {\n                                                                                children: 'Cancel',\n                                                                                type: 'tertiary',\n                                                                                size: 'small',\n                                                                            },\n                                                                        })\n                                                                    }\n                                                                >\n                                                                    Launch survey\n                                                                </LemonButton>\n                                                            )}\n                                                            {survey.start_date && !survey.end_date && (\n                                                                <LemonButton\n                                                                    fullWidth\n                                                                    onClick={() => {\n                                                                        LemonDialog.open({\n                                                                            title: 'Stop this survey?',\n                                                                            content: (\n                                                                                <div className=\"text-sm text-secondary\">\n                                                                                    The survey will no longer be visible\n                                                                                    to your users.\n                                                                                </div>\n                                                                            ),\n                                                                            primaryButton: {\n                                                                                children: 'Stop',\n                                                                                type: 'primary',\n                                                                                onClick: () => {\n                                                                                    updateSurvey({\n                                                                                        id: survey.id,\n                                                                                        updatePayload: {\n                                                                                            end_date:\n                                                                                                dayjs().toISOString(),\n                                                                                        },\n                                                                                    })\n                                                                                },\n                                                                                size: 'small',\n                                                                            },\n                                                                            secondaryButton: {\n                                                                                children: 'Cancel',\n                                                                                type: 'tertiary',\n                                                                                size: 'small',\n                                                                            },\n                                                                        })\n                                                                    }}\n                                                                >\n                                                                    Stop survey\n                                                                </LemonButton>\n                                                            )}\n                                                            {survey.end_date && !survey.archived && (\n                                                                <LemonButton\n                                                                    fullWidth\n                                                                    onClick={() => {\n                                                                        LemonDialog.open({\n                                                                            title: 'Resume this survey?',\n                                                                            content: (\n                                                                                <div className=\"text-sm text-secondary\">\n                                                                                    Once resumed, the survey will be\n                                                                                    visible to your users again.\n                                                                                </div>\n                                                                            ),\n                                                                            primaryButton: {\n                                                                                children: 'Resume',\n                                                                                type: 'primary',\n                                                                                onClick: () => {\n                                                                                    updateSurvey({\n                                                                                        id: survey.id,\n                                                                                        updatePayload: {\n                                                                                            end_date: null,\n                                                                                        },\n                                                                                    })\n                                                                                },\n                                                                                size: 'small',\n                                                                            },\n                                                                            secondaryButton: {\n                                                                                children: 'Cancel',\n                                                                                type: 'tertiary',\n                                                                                size: 'small',\n                                                                            },\n                                                                        })\n                                                                    }}\n                                                                >\n                                                                    Resume survey\n                                                                </LemonButton>\n                                                            )}\n                                                            <LemonDivider />\n                                                            {survey.end_date && survey.archived && (\n                                                                <LemonButton\n                                                                    fullWidth\n                                                                    onClick={() =>\n                                                                        updateSurvey({\n                                                                            id: survey.id,\n                                                                            updatePayload: { archived: false },\n                                                                        })\n                                                                    }\n                                                                >\n                                                                    Unarchive\n                                                                </LemonButton>\n                                                            )}\n                                                            {survey.end_date && !survey.archived && (\n                                                                <LemonButton\n                                                                    fullWidth\n                                                                    onClick={() => {\n                                                                        LemonDialog.open({\n                                                                            title: 'Archive this survey?',\n                                                                            content: (\n                                                                                <div className=\"text-sm text-secondary\">\n                                                                                    This action will remove the survey\n                                                                                    from your active surveys list. It\n                                                                                    can be restored at any time.\n                                                                                </div>\n                                                                            ),\n                                                                            primaryButton: {\n                                                                                children: 'Archive',\n                                                                                type: 'primary',\n                                                                                onClick: () => {\n                                                                                    updateSurvey({\n                                                                                        id: survey.id,\n                                                                                        updatePayload: {\n                                                                                            archived: true,\n                                                                                        },\n                                                                                    })\n                                                                                },\n                                                                                size: 'small',\n                                                                            },\n                                                                            secondaryButton: {\n                                                                                children: 'Cancel',\n                                                                                type: 'tertiary',\n                                                                                size: 'small',\n                                                                            },\n                                                                        })\n                                                                    }}\n                                                                >\n                                                                    Archive\n                                                                </LemonButton>\n                                                            )}\n                                                            <LemonButton\n                                                                status=\"danger\"\n                                                                onClick={() => {\n                                                                    LemonDialog.open({\n                                                                        title: 'Delete this survey?',\n                                                                        content: (\n                                                                            <div className=\"text-sm text-secondary\">\n                                                                                This action cannot be undone. All survey\n                                                                                data will be permanently removed.\n                                                                            </div>\n                                                                        ),\n                                                                        primaryButton: {\n                                                                            children: 'Delete',\n                                                                            type: 'primary',\n                                                                            onClick: () => deleteSurvey(survey.id),\n                                                                            size: 'small',\n                                                                        },\n                                                                        secondaryButton: {\n                                                                            children: 'Cancel',\n                                                                            type: 'tertiary',\n                                                                            size: 'small',\n                                                                        },\n                                                                    })\n                                                                }}\n                                                                fullWidth\n                                                            >\n                                                                Delete\n                                                            </LemonButton>\n                                                        </>\n                                                    }\n                                                />\n                                            )\n                                        },\n                                    },\n                                ]}\n                            />\n                        </>\n                    )}\n                </>\n            )}\n        </div>\n    )\n}\n\nexport function StatusTag({ survey }: { survey: Survey }): JSX.Element {\n    const statusColors = {\n        running: 'success',\n        draft: 'default',\n        complete: 'completion',\n    } as Record<ProgressStatus, LemonTagType>\n    const status = getSurveyStatus(survey)\n    return (\n        <LemonTag type={statusColors[status]} className=\"font-semibold\" data-attr=\"status\">\n            {status.toUpperCase()}\n        </LemonTag>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "import_jsx_runtime", "scene", "Surveys", "surveysLogic", "surveys", "searchedSurveys", "surveysLoading", "surveysResponsesCount", "surveysResponsesCountLoading", "searchTerm", "filters", "showSurveysDisabledBanner", "tab", "globalSurveyAppearanceConfigAvailable", "deleteSurvey", "updateSurvey", "setSearchTerm", "setSurveysFilters", "setTab", "user", "userLogic", "featureFlags", "featureFlagLogic", "shouldShowEmptyState", "showLinkedHogFunctions", "useFeatureFlag", "settingLevel", "FEATURE_FLAGS", "PageHeader", "LemonButton", "urls", "Link", "LemonTabs", "newTab", "SurveySettings", "LinkedHogFunctions", "ActivityLog", "VersionCheckerBanner", "LemonBanner", "IconGear", "openSurveysSettingsDialog", "ProductIntroduction", "LemonInput", "LemonSelect", "status", "MemberSelect", "LemonTable", "_", "survey", "LemonTableLink", "stringWithWBR", "Spinner", "surveyA", "surveyB", "countA", "countB", "SurveyQuestionLabel", "createdByColumn", "createdAtColumn", "StatusTag", "More", "LemonDialog", "dayjs", "LemonDivider", "statusColors", "getSurveyStatus", "LemonTag"]
}
