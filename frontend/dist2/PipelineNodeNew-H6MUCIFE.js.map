{
  "version": 3,
  "sources": ["../src/scenes/pipeline/PipelineNodeNew.tsx"],
  "sourcesContent": ["import { IconPlusSmall } from '@posthog/icons'\nimport { useActions, useValues } from 'kea'\nimport { combineUrl, router } from 'kea-router'\nimport { NotFound } from 'lib/components/NotFound'\nimport { PayGateMini } from 'lib/components/PayGateMini/PayGateMini'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonTable } from 'lib/lemon-ui/LemonTable'\nimport { LemonTableLink } from 'lib/lemon-ui/LemonTable/LemonTableLink'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { useEffect } from 'react'\nimport { NewSourceWizardScene } from 'scenes/data-warehouse/new/NewSourceWizard'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { AvailableFeature, PipelineStage, PluginType } from '~/types'\n\nimport { DESTINATION_TYPES, SITE_APP_TYPES } from './destinations/constants'\nimport { NewDestinations } from './destinations/NewDestinations'\nimport { frontendAppsLogic } from './frontendAppsLogic'\nimport { HogFunctionConfiguration } from './hogfunctions/HogFunctionConfiguration'\nimport { PipelineBatchExportConfiguration } from './PipelineBatchExportConfiguration'\nimport { PIPELINE_TAB_TO_NODE_STAGE } from './PipelineNode'\nimport { pipelineNodeNewLogic, PipelineNodeNewLogicProps } from './pipelineNodeNewLogic'\nimport { PipelinePluginConfiguration } from './PipelinePluginConfiguration'\nimport { PipelineBackend } from './types'\nimport { RenderApp } from './utils'\n\nconst paramsToProps = ({\n    params: { stage, id },\n}: {\n    params: { stage?: string; id?: string }\n}): PipelineNodeNewLogicProps => {\n    const numericId = id && /^\\d+$/.test(id) ? parseInt(id) : undefined\n    const pluginId = numericId && !isNaN(numericId) ? numericId : null\n    const hogFunctionId = pluginId ? null : id?.startsWith('hog-') ? id.slice(4) : null\n    const batchExportDestination = hogFunctionId ? null : id ?? null\n\n    return {\n        stage: PIPELINE_TAB_TO_NODE_STAGE[stage + 's'] || null, // pipeline tab has stage plural here we have singular\n        pluginId,\n        batchExportDestination,\n        hogFunctionId,\n    }\n}\n\nexport const scene: SceneExport = {\n    component: PipelineNodeNew,\n    logic: pipelineNodeNewLogic,\n    paramsToProps,\n}\n\ntype TableEntry = {\n    backend: PipelineBackend\n    id: string | number\n    name: string\n    description: string\n    url?: string\n    icon: JSX.Element\n}\n\nfunction convertPluginToTableEntry(plugin: PluginType): TableEntry {\n    return {\n        backend: PipelineBackend.Plugin,\n        id: plugin.id,\n        name: plugin.name,\n        description: plugin.description || '',\n        icon: <RenderApp plugin={plugin} />,\n        // TODO: ideally we'd link to docs instead of GitHub repo, so it can open in panel\n        // Same for transformations and destinations tables\n        url: plugin.url,\n    }\n}\n\nexport function PipelineNodeNew(params: { stage?: string; id?: string } = {}): JSX.Element {\n    const { featureFlags } = useValues(featureFlagLogic)\n    const { stage, pluginId, batchExportDestination, hogFunctionId } = paramsToProps({ params })\n\n    if (!stage) {\n        return <NotFound object=\"pipeline app stage\" />\n    }\n\n    if (pluginId) {\n        const res = <PipelinePluginConfiguration stage={stage} pluginId={pluginId} />\n        if (stage === PipelineStage.Destination) {\n            return <PayGateMini feature={AvailableFeature.DATA_PIPELINES}>{res}</PayGateMini>\n        }\n        return res\n    }\n\n    if (batchExportDestination) {\n        if (stage !== PipelineStage.Destination) {\n            return <NotFound object={batchExportDestination} />\n        }\n        return (\n            <PayGateMini feature={AvailableFeature.DATA_PIPELINES}>\n                <PipelineBatchExportConfiguration service={batchExportDestination} />\n            </PayGateMini>\n        )\n    }\n\n    if (hogFunctionId) {\n        return <HogFunctionConfiguration templateId={hogFunctionId} />\n    }\n\n    if (stage === PipelineStage.Transformation) {\n        return <NewDestinations types={['transformation']} />\n    } else if (stage === PipelineStage.Destination) {\n        return <NewDestinations types={DESTINATION_TYPES} />\n    } else if (stage === PipelineStage.SiteApp) {\n        return featureFlags[FEATURE_FLAGS.SITE_APP_FUNCTIONS] ? (\n            <NewDestinations types={SITE_APP_TYPES} />\n        ) : (\n            <SiteAppOptionsTable />\n        )\n    } else if (stage === PipelineStage.Source) {\n        return <NewSourceWizardScene />\n    }\n    return <NotFound object=\"pipeline new options\" />\n}\n\nfunction SiteAppOptionsTable(): JSX.Element {\n    const { plugins, loading } = useValues(frontendAppsLogic)\n    const targets = Object.values(plugins).map(convertPluginToTableEntry)\n    return <NodeOptionsTable stage={PipelineStage.SiteApp} targets={targets} loading={loading} />\n}\n\nfunction NodeOptionsTable({\n    stage,\n    targets,\n    loading,\n}: {\n    stage: PipelineStage\n    targets: TableEntry[]\n    loading: boolean\n}): JSX.Element {\n    const { hashParams } = useValues(router)\n    const { loadPlugins } = useActions(pipelineNodeNewLogic)\n\n    useEffect(() => {\n        loadPlugins()\n    }, [])\n\n    return (\n        <>\n            <LemonTable\n                dataSource={targets}\n                size=\"small\"\n                loading={loading}\n                columns={[\n                    {\n                        title: 'App',\n                        width: 0,\n                        render: function RenderAppInfo(_, target) {\n                            return target.icon\n                        },\n                    },\n                    {\n                        title: 'Name',\n                        sticky: true,\n                        render: function RenderName(_, target) {\n                            return (\n                                <LemonTableLink\n                                    to={urls.pipelineNodeNew(stage, target.id)}\n                                    title={target.name}\n                                    description={target.description}\n                                />\n                            )\n                        },\n                    },\n                    {\n                        title: 'Actions',\n                        width: 100,\n                        align: 'right',\n                        render: function RenderActions(_, target) {\n                            return (\n                                <LemonButton\n                                    type=\"primary\"\n                                    data-attr={`new-${stage}-${target.id}`}\n                                    icon={<IconPlusSmall />}\n                                    // Preserve hash params to pass config in\n                                    to={combineUrl(urls.pipelineNodeNew(stage, target.id), {}, hashParams).url}\n                                >\n                                    Create\n                                </LemonButton>\n                            )\n                        },\n                    },\n                ]}\n            />\n        </>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "import_react", "import_jsx_runtime", "paramsToProps", "stage", "id", "numericId", "pluginId", "hogFunctionId", "batchExportDestination", "PIPELINE_TAB_TO_NODE_STAGE", "scene", "PipelineNodeNew", "pipelineNodeNewLogic", "convertPluginToTableEntry", "plugin", "RenderApp", "params", "featureFlags", "featureFlagLogic", "NotFound", "res", "PipelinePluginConfiguration", "PayGateMini", "PipelineBatchExportConfiguration", "HogFunctionConfiguration", "NewDestinations", "DESTINATION_TYPES", "FEATURE_FLAGS", "SITE_APP_TYPES", "SiteAppOptionsTable", "NewSourceWizardScene", "plugins", "loading", "frontendAppsLogic", "targets", "NodeOptionsTable", "hashParams", "loadPlugins", "LemonTable", "_", "target", "LemonTableLink", "urls", "LemonButton", "IconPlusSmall"]
}
