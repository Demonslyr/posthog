import{j as F,l as L}from"/static/chunk-KBNOIM2W.js";import{Do as l,Io as x,Np as w,Xo as Q,Za as H,a as A,eh as k,f as D,ig as _,r as $,wk as O}from"/static/chunk-TW5IU73S.js";import{Ua as E,na as f}from"/static/chunk-3UDJFOQH.js";import{d as u,e as c,g as m,j as p}from"/static/chunk-SJXEOBQC.js";c();p();m();var b=u(A()),Y=u(D());c();p();m();var i=u(A()),C=u(H()),s=u(D());var me="llm-observability-data",G="-7d",g="-1d",T=null,v=(0,i.kea)([(0,i.path)(["products","llm_observability","frontend","llmObservabilityLogic"]),(0,i.connect)({values:[w,["sceneKey"],_,["groupsEnabled"]]}),(0,i.actions)({setDates:(e,t)=>({dateFrom:e,dateTo:t}),setDashboardDateFilter:(e,t)=>({dateFrom:e,dateTo:t}),setShouldFilterTestAccounts:e=>({shouldFilterTestAccounts:e}),setPropertyFilters:e=>({propertyFilters:e}),setGenerationsQuery:e=>({query:e})}),(0,i.reducers)({dateFilter:[{dateFrom:g,dateTo:T},{setDates:(e,{dateFrom:t,dateTo:a})=>({dateFrom:t,dateTo:a})}],dashboardDateFilter:[{dateFrom:G,dateTo:T},{setDates:(e,{dateFrom:t,dateTo:a})=>({dateFrom:t,dateTo:a})}],shouldFilterTestAccounts:[!1,{setShouldFilterTestAccounts:(e,{shouldFilterTestAccounts:t})=>t}],propertyFilters:[[],{setPropertyFilters:(e,{propertyFilters:t})=>t}],generationsQueryOverride:[null,{setGenerationsQuery:(e,{query:t})=>t}]}),(0,C.loaders)({hasSentAiGenerationEvent:{__default:void 0,loadAIEventDefinition:async()=>{let t=(await x.eventDefinitions.list({event_type:"event",search:"$ai_generation"})).results.find(a=>a.name==="$ai_generation");return!!(t&&!k(t))}}}),(0,i.selectors)({activeTab:[e=>[e.sceneKey],e=>e==="llmObservabilityGenerations"?"generations":e==="llmObservabilityTraces"?"traces":e==="llmObservabilityUsers"?"users":"dashboard"],tiles:[e=>[e.dashboardDateFilter,e.shouldFilterTestAccounts,e.propertyFilters],(e,t,a)=>[{title:"Traces",query:{kind:"TrendsQuery",series:[{event:"$ai_generation",name:"$ai_generation",kind:"EventsNode",math:"hogql",math_hogql:"COUNT(DISTINCT properties.$ai_trace_id)"}],dateRange:{date_from:e.dateFrom,date_to:e.dateTo},properties:a,filterTestAccounts:t},context:{groupTypeLabel:"traces",onDataPointClick:r=>{if(typeof r.day=="string"){let o=(0,f.default)(r.day).startOf("day");s.router.actions.push(l.llmObservabilityTraces(),{...s.router.values.searchParams,date_from:o.format("YYYY-MM-DD[T]HH:mm:ss"),date_to:o.add(1,"day").subtract(1,"second").format("YYYY-MM-DD[T]HH:mm:ss")})}}}},{title:"Generative AI users",description:"To count users, set `distinct_id` in LLM tracking.",query:{kind:"TrendsQuery",series:[{event:"$ai_generation",name:"$ai_generation",kind:"EventsNode",math:"dau"}],dateRange:{date_from:e.dateFrom,date_to:e.dateTo},properties:a.concat({type:"hogql",key:"distinct_id != properties.$ai_trace_id"}),filterTestAccounts:t}},{title:"Total cost (USD)",query:{kind:"TrendsQuery",series:[{event:"$ai_generation",name:"$ai_generation",math:"sum",kind:"EventsNode",math_property:"$ai_total_cost_usd"}],trendsFilter:{aggregationAxisPrefix:"$",decimalPlaces:4,display:"BoldNumber"},dateRange:{date_from:e.dateFrom,date_to:e.dateTo},properties:a,filterTestAccounts:t},context:{groupTypeLabel:"traces",onDataPointClick:()=>{s.router.actions.push(l.llmObservabilityTraces(),s.router.values.searchParams)}}},{title:"Cost per user (USD)",description:"Average cost for each generative AI user active in the data point's period.",query:{kind:"TrendsQuery",series:[{event:"$ai_generation",name:"$ai_generation",math:"sum",kind:"EventsNode",math_property:"$ai_total_cost_usd"},{event:"$ai_generation",name:"$ai_generation",kind:"EventsNode",math:"dau"}],trendsFilter:{formula:"A / B",aggregationAxisPrefix:"$",decimalPlaces:2},dateRange:{date_from:e.dateFrom,date_to:e.dateTo},properties:a.concat({type:"hogql",key:"distinct_id != properties.$ai_trace_id"}),filterTestAccounts:t}},{title:"Cost by model (USD)",query:{kind:"TrendsQuery",series:[{event:"$ai_generation",name:"$ai_generation",math:"sum",kind:"EventsNode",math_property:"$ai_total_cost_usd"}],breakdownFilter:{breakdown_type:"event",breakdown:"$ai_model"},trendsFilter:{aggregationAxisPrefix:"$",decimalPlaces:2,display:"ActionsBarValue",showValuesOnSeries:!0},dateRange:{date_from:e.dateFrom,date_to:e.dateTo},properties:a,filterTestAccounts:t},context:{groupTypeLabel:"traces",onDataPointClick:({breakdown:r})=>{s.router.actions.push(l.llmObservabilityTraces(),{...s.router.values.searchParams,filters:[...s.router.values.searchParams.filters||[],{type:"event",key:"$ai_model",operator:"exact",value:r}]})}}},{title:"Generation calls",query:{kind:"TrendsQuery",series:[{event:"$ai_generation",name:"$ai_generation",kind:"EventsNode"}],dateRange:{date_from:e.dateFrom,date_to:e.dateTo},properties:a,filterTestAccounts:t},context:{groupTypeLabel:"generations",onDataPointClick:r=>{if(typeof r.day=="string"){let o=(0,f.default)(r.day).startOf("day");s.router.actions.push(l.llmObservabilityGenerations(),{...s.router.values.searchParams,date_from:o.format("YYYY-MM-DD[T]HH:mm:ss"),date_to:o.add(1,"day").subtract(1,"second").format("YYYY-MM-DD[T]HH:mm:ss")})}}}},{title:"Generation latency by model (median)",query:{kind:"TrendsQuery",series:[{event:"$ai_generation",name:"$ai_generation",math:"median",kind:"EventsNode",math_property:"$ai_latency"}],breakdownFilter:{breakdown:"$ai_model"},trendsFilter:{aggregationAxisPostfix:" s",decimalPlaces:2},dateRange:{date_from:e.dateFrom,date_to:e.dateTo},properties:a,filterTestAccounts:t},context:{groupTypeLabel:"generations",onDataPointClick:r=>{if(typeof r.day=="string"){let o=(0,f.default)(r.day).startOf("day");s.router.actions.push(l.llmObservabilityGenerations(),{...s.router.values.searchParams,date_from:o.format("YYYY-MM-DD[T]HH:mm:ss"),date_to:o.add(1,"day").subtract(1,"second").format("YYYY-MM-DD[T]HH:mm:ss"),filters:[...s.router.values.searchParams.filters||[],{type:"event",key:"$ai_model",operator:"exact",value:r.breakdown}]})}}}},{title:"Generations by HTTP status",query:{kind:"TrendsQuery",series:[{event:"$ai_generation",name:"$ai_generation",kind:"EventsNode"}],breakdownFilter:{breakdown:"$ai_http_status"},trendsFilter:{display:"ActionsBarValue"},dateRange:{date_from:e.dateFrom,date_to:e.dateTo},properties:a,filterTestAccounts:t},context:{groupTypeLabel:"generations",onDataPointClick:r=>{s.router.actions.push(l.llmObservabilityGenerations(),{...s.router.values.searchParams,filters:[...s.router.values.searchParams.filters||[],{type:"event",key:"$ai_http_status",operator:"exact",value:r.breakdown}]})}}}]],tracesQuery:[e=>[e.dateFilter,e.shouldFilterTestAccounts,e.propertyFilters,_.selectors.groupsTaxonomicTypes],(e,t,a,r)=>({kind:"DataTableNode",source:{kind:"TracesQuery",dateRange:{date_from:e.dateFrom||void 0,date_to:e.dateTo||void 0},filterTestAccounts:t??!1,properties:a},columns:["id","person","totalLatency","usage","totalCost","timestamp"],showDateRange:!0,showReload:!0,showSearch:!0,showTestAccountFilters:!0,showExport:!0,showOpenEditorButton:!1,showPropertyFilter:["event_properties","person_properties",...r,"cohorts","hogql_expression"]})],generationsQuery:[e=>[e.generationsQueryOverride,e.defaultGenerationsQuery],(e,t)=>e||t],defaultGenerationsQuery:[e=>[e.dateFilter,e.shouldFilterTestAccounts,e.propertyFilters,_.selectors.groupsTaxonomicTypes],(e,t,a,r)=>({kind:"DataTableNode",source:{kind:"EventsQuery",select:["*","uuid","properties.$ai_trace_id","person","f'{properties.$ai_model}' -- Model","f'{round(toFloat(properties.$ai_latency), 2)} s' -- Latency","f'{properties.$ai_input_tokens} \u2192 {properties.$ai_output_tokens} (\u2211 {toInt(properties.$ai_input_tokens) + toInt(properties.$ai_output_tokens)})' -- Token usage","f'${round(toFloat(properties.$ai_total_cost_usd), 6)}' -- Total cost","timestamp"],orderBy:["timestamp DESC"],after:e.dateFrom||void 0,before:e.dateTo||void 0,filterTestAccounts:t,event:"$ai_generation",properties:a},showDateRange:!0,showReload:!0,showSearch:!0,showTestAccountFilters:!0,showColumnConfigurator:!0,showPropertyFilter:["event_properties","person_properties",...r,"cohorts","hogql_expression"],showExport:!0,showActions:!1})],usersQuery:[e=>[e.dateFilter,e.shouldFilterTestAccounts,e.propertyFilters,_.selectors.groupsTaxonomicTypes],(e,t,a,r)=>({kind:"DataTableNode",source:{kind:"HogQLQuery",query:`
                SELECT
                    argMax(user_tuple, timestamp) as user,
                    countDistinctIf(ai_trace_id, notEmpty(ai_trace_id)) as traces,
                    count() as generations,
                    round(sum(toFloat(ai_total_cost_usd)), 4) as total_cost,
                    min(timestamp) as first_seen,
                    max(timestamp) as last_seen
                FROM (
                    SELECT 
                        distinct_id,
                        timestamp,
                        JSONExtractRaw(properties, '$ai_trace_id') as ai_trace_id,
                        JSONExtractRaw(properties, '$ai_total_cost_usd') as ai_total_cost_usd,
                        tuple(
                            distinct_id,
                            person.created_at,
                            person.properties
                        ) as user_tuple
                    FROM events
                    WHERE event = '$ai_generation' AND {filters}
                )
                GROUP BY distinct_id
                ORDER BY total_cost DESC
                LIMIT 50
                    `,filters:{dateRange:{date_from:e.dateFrom||null,date_to:e.dateTo||null},filterTestAccounts:t,properties:a}},columns:["user","traces","generations","total_cost","first_seen","last_seen"],showDateRange:!0,showReload:!0,showSearch:!0,showPropertyFilter:["event_properties","person_properties",...r,"cohorts","hogql_expression"],showTestAccountFilters:!0,showExport:!0,showColumnConfigurator:!0})]}),(0,s.urlToAction)(({actions:e,values:t})=>{function a({filters:r,date_from:o,date_to:n,filter_test_accounts:d}){let h=L(r)?r:[];E(h,t.propertyFilters)||e.setPropertyFilters(h),((o||g)!==t.dateFilter.dateFrom||(n||T)!==t.dateFilter.dateTo)&&e.setDates(o||g,n||T);let P=[!0,"true",1,"1"].includes(d);P!==t.shouldFilterTestAccounts&&e.setShouldFilterTestAccounts(P)}return{[l.llmObservabilityDashboard()]:(r,o)=>a(o),[l.llmObservabilityGenerations()]:(r,o)=>a(o),[l.llmObservabilityTraces()]:(r,o)=>a(o),[l.llmObservabilityUsers()]:(r,o)=>a(o)}}),(0,s.actionToUrl)(()=>({setPropertyFilters:({propertyFilters:e})=>[s.router.values.location.pathname,{...s.router.values.searchParams,filters:e.length>0?e:void 0}],setDates:({dateFrom:e,dateTo:t})=>[s.router.values.location.pathname,{...s.router.values.searchParams,date_from:e===g?void 0:e||void 0,date_to:t||void 0}],setShouldFilterTestAccounts:({shouldFilterTestAccounts:e})=>[s.router.values.location.pathname,{...s.router.values.searchParams,filter_test_accounts:e?"true":void 0}]})),(0,i.afterMount)(({actions:e})=>{e.loadAIEventDefinition()})]);c();p();m();var M={llmObservabilityDashboard:()=>"/llm-observability",llmObservabilityGenerations:()=>"/llm-observability/generations",llmObservabilityTraces:()=>"/llm-observability/traces",llmObservabilityTrace:(e,t)=>{let r=new URLSearchParams(t).toString();return`/llm-observability/traces/${e}${r?`?${r}`:""}`},llmObservabilityUsers:()=>"/llm-observability/users"};var y=u($()),U=e=>({distinct_id:Array.isArray(e)&&e.length>0?e[0]:"",created_at:Array.isArray(e)&&e.length>1?e[1]:"",properties:Array.isArray(e)&&e.length>2?e[2]:{}});function ke(){let{setDates:e,setShouldFilterTestAccounts:t,setPropertyFilters:a}=(0,b.useActions)(v),{usersQuery:r}=(0,b.useValues)(v);return(0,y.jsx)(F,{query:r,setQuery:o=>{if(!Q(o.source)){console.warn("LLMObservabilityUsers received a non-events query:",o.source);return}let{filters:n={}}=o.source,{dateRange:d={}}=n;e(d.date_from||null,d.date_to||null),t(n.filterTestAccounts||!1),a(n.properties||[])},context:{columns:{user:{title:"Person",render:function(n){let d=U(n.value);return(0,y.jsx)(O,{person:d,withIcon:!0,noPopover:!0,href:(0,Y.combineUrl)(M.llmObservabilityTraces(),{filters:[{type:"hogql",key:`distinct_id == '${d.distinct_id}'`,value:null}]}).url})}},first_seen:{title:"First Seen"},last_seen:{title:"Last Seen"},traces:{title:"Traces (count)"},generations:{title:"Generations (count)"},total_cost:{title:"Total Cost (USD)",render:function({value:n}){return!n||!Number(n)?(0,y.jsx)("span",{children:"N/A"}):(0,y.jsxs)("span",{children:["$",Number(n).toFixed(4)]})}}}},uniqueKey:"llm-observability-users"})}export{me as a,v as b,ke as c};
//# sourceMappingURL=/static/chunk-GYTXN33U.js.map
