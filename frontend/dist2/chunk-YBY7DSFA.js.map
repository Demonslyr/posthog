{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/react-email-editor@1.7.11_react@18.2.0/node_modules/react-email-editor/src/loadScript.ts", "../../node_modules/.pnpm/react-email-editor@1.7.11_react@18.2.0/node_modules/react-email-editor/src/EmailEditor.tsx", "../../node_modules/.pnpm/react-email-editor@1.7.11_react@18.2.0/node_modules/react-email-editor/dist/index.js", "../src/scenes/pipeline/pipelineNodeNewLogic.tsx", "../src/scenes/pipeline/pipelineNodeLogic.tsx", "../src/scenes/pipeline/hogfunctions/HogFunctionConfiguration.tsx", "../src/scenes/pipeline/hogfunctions/filters/HogFunctionFilters.tsx", "../src/scenes/pipeline/hogfunctions/hogFunctionConfigurationLogic.tsx", "../src/scenes/pipeline/hogfunctions/filters/HogFunctionFiltersInternal.tsx", "../src/scenes/pipeline/hogfunctions/HogFunctionInputs.tsx", "../src/scenes/pipeline/hogfunctions/email-templater/EmailTemplater.tsx", "../src/scenes/pipeline/hogfunctions/email-templater/emailTemplaterLogic.tsx", "../src/scenes/pipeline/hogfunctions/integrations/HogFunctionInputIntegration.tsx", "../src/scenes/pipeline/hogfunctions/integrations/HogFunctionInputIntegrationField.tsx", "../src/lib/integrations/GoogleAdsIntegrationHelpers.tsx", "../src/lib/integrations/googleAdsIntegrationLogic.ts", "../src/lib/integrations/LinkedInIntegrationHelpers.tsx", "../src/lib/integrations/linkedInAdsIntegrationLogic.ts", "../src/scenes/pipeline/hogfunctions/HogFunctionTest.tsx", "../src/scenes/pipeline/hogfunctions/hogFunctionTestLogic.tsx", "../src/scenes/pipeline/hogfunctions/mapping/HogFunctionMappings.tsx", "../src/scenes/pipeline/hogfunctions/metrics/HogFunctionEventEstimates.tsx"],
  "sourcesContent": ["const defaultScriptUrl = 'https://editor.unlayer.com/embed.js?2';\nconst callbacks: Function[] = [];\nlet loaded = false;\n\nconst isScriptInjected = (scriptUrl: string) => {\n  const scripts = document.querySelectorAll('script');\n  let injected = false;\n\n  scripts.forEach((script) => {\n    if (script.src.includes(scriptUrl)) {\n      injected = true;\n    }\n  });\n\n  return injected;\n};\n\nconst addCallback = (callback: Function) => {\n  callbacks.push(callback);\n};\n\nconst runCallbacks = () => {\n  if (loaded) {\n    let callback;\n\n    while ((callback = callbacks.shift())) {\n      callback();\n    }\n  }\n};\n\nexport const loadScript = (\n  callback: Function,\n  scriptUrl = defaultScriptUrl\n) => {\n  addCallback(callback);\n\n  if (!isScriptInjected(scriptUrl)) {\n    const embedScript = document.createElement('script');\n    embedScript.setAttribute('src', scriptUrl);\n    embedScript.onload = () => {\n      loaded = true;\n      runCallbacks();\n    };\n    document.head.appendChild(embedScript);\n  } else {\n    runCallbacks();\n  }\n};\n", "import React, {\n  useEffect,\n  useState,\n  useImperativeHandle,\n  useMemo,\n} from 'react';\n\nimport pkg from '../package.json';\nimport { Editor, EditorRef, EmailEditorProps } from './types';\nimport { loadScript } from './loadScript';\n\nconst win = typeof window === 'undefined' ? { __unlayer_lastEditorId: 0 } : window\nwin.__unlayer_lastEditorId = win.__unlayer_lastEditorId || 0;\n\nexport const EmailEditor = React.forwardRef<EditorRef, EmailEditorProps>(\n  (props, ref) => {\n    const { onLoad, onReady, scriptUrl, minHeight = 500, style = {} } = props;\n\n    const [editor, setEditor] = useState<Editor | null>(null);\n\n    const [hasLoadedEmbedScript, setHasLoadedEmbedScript] = useState(false);\n\n    const editorId = useMemo(\n      () => props.editorId || `editor-${++win.__unlayer_lastEditorId}`,\n      [props.editorId]\n    );\n\n    const options: EmailEditorProps['options'] = {\n      ...(props.options || {}),\n      appearance: props.appearance ?? props.options?.appearance,\n      displayMode: props?.displayMode || props.options?.displayMode || 'email',\n      locale: props.locale ?? props.options?.locale,\n      projectId: props.projectId ?? props.options?.projectId,\n      tools: props.tools ?? props.options?.tools,\n\n      id: editorId,\n      source: {\n        name: pkg.name,\n        version: pkg.version,\n      },\n    };\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        editor,\n      }),\n      [editor]\n    );\n\n    useEffect(() => {\n      return () => {\n        editor?.destroy();\n      };\n    }, []);\n\n    useEffect(() => {\n      setHasLoadedEmbedScript(false);\n      loadScript(() => setHasLoadedEmbedScript(true), scriptUrl);\n    }, [scriptUrl]);\n\n    useEffect(() => {\n      if (!hasLoadedEmbedScript) return;\n      editor?.destroy();\n      setEditor(unlayer.createEditor(options));\n    }, [JSON.stringify(options), hasLoadedEmbedScript]);\n\n    const methodProps = Object.keys(props).filter((propName) =>\n      /^on/.test(propName)\n    );\n    useEffect(() => {\n      if (!editor) return;\n\n      onLoad?.(editor);\n\n      // All properties starting with on[Name] are registered as event listeners.\n      methodProps.forEach((methodProp) => {\n        if (\n          /^on/.test(methodProp) &&\n          methodProp !== 'onLoad' &&\n          methodProp !== 'onReady' &&\n          typeof props[methodProp] === 'function'\n        ) {\n          editor.addEventListener(methodProp, props[methodProp]);\n        }\n      });\n\n      if (onReady) {\n        editor.addEventListener('editor:ready', () => {\n          onReady(editor);\n        });\n      }\n    }, [editor, Object.keys(methodProps).join(',')]);\n\n    return (\n      <div\n        style={{\n          flex: 1,\n          display: 'flex',\n          minHeight: minHeight,\n        }}\n      >\n        <div id={editorId} style={{ ...style, flex: 1 }} />\n      </div>\n    );\n  }\n);\n", "\n'use strict'\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./react-email-editor.cjs.production.min.js')\n} else {\n  module.exports = require('./react-email-editor.cjs.development.js')\n}\n", "import { connect, kea, path, props, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport { capitalizeFirstLetter } from 'lib/utils'\nimport { Scene } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { Breadcrumb, PipelineStage, PipelineTab, PluginType } from '~/types'\n\nimport type { pipelineNodeNewLogicType } from './pipelineNodeNewLogicType'\nimport { loadPluginsFromUrl } from './utils'\n\nexport const NODE_STAGE_TO_PIPELINE_TAB: Partial<Record<PipelineStage, PipelineTab>> = {\n    [PipelineStage.Transformation]: PipelineTab.Transformations,\n    [PipelineStage.Destination]: PipelineTab.Destinations,\n    [PipelineStage.SiteApp]: PipelineTab.SiteApps,\n    [PipelineStage.Source]: PipelineTab.Sources,\n}\nexport interface PipelineNodeNewLogicProps {\n    /** Might be null if a non-existent stage is set in the URL. */\n    stage: PipelineStage | null\n    pluginId: number | null\n    batchExportDestination: string | null\n    hogFunctionId: string | null\n}\n\nexport const pipelineNodeNewLogic = kea<pipelineNodeNewLogicType>([\n    props({} as PipelineNodeNewLogicProps),\n    connect({\n        values: [userLogic, ['user']],\n    }),\n    path((id) => ['scenes', 'pipeline', 'pipelineNodeNewLogic', id]),\n\n    loaders({\n        plugins: [\n            {} as Record<number, PluginType>,\n            {\n                loadPlugins: async () => {\n                    return loadPluginsFromUrl('api/organizations/@current/pipeline_destinations')\n                },\n            },\n        ],\n    }),\n\n    selectors(() => ({\n        loading: [(s) => [s.pluginsLoading], (pluginsLoading) => pluginsLoading],\n        breadcrumbs: [\n            (_, p) => [p.stage, p.pluginId, p.batchExportDestination],\n            (stage, pluginId, batchDestination): Breadcrumb[] => [\n                {\n                    key: Scene.Pipeline,\n                    name: 'Data pipeline',\n                    path: urls.pipeline(),\n                },\n                {\n                    key: stage || 'unknown',\n                    name: stage ? capitalizeFirstLetter(NODE_STAGE_TO_PIPELINE_TAB[stage] || '') : 'Unknown',\n                    path: urls.pipeline(stage ? NODE_STAGE_TO_PIPELINE_TAB[stage] : undefined),\n                },\n                {\n                    key: pluginId || batchDestination || 'Unknown',\n                    name: pluginId ? 'New' : batchDestination ? `New ${batchDestination} destination` : 'New',\n                },\n            ],\n        ],\n    })),\n])\n", "import { actions, kea, key, path, props, reducers, selectors } from 'kea'\nimport { actionToUrl, urlToAction } from 'kea-router'\nimport { capitalizeFirstLetter } from 'lib/utils'\nimport { Scene } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { SIDE_PANEL_CONTEXT_KEY, SidePanelSceneContext } from '~/layout/navigation-3000/sidepanel/types'\nimport { ActivityScope, Breadcrumb, PipelineNodeTab, PipelineStage } from '~/types'\n\nimport type { pipelineNodeLogicType } from './pipelineNodeLogicType'\nimport { NODE_STAGE_TO_PIPELINE_TAB } from './pipelineNodeNewLogic'\nimport { PipelineBackend } from './types'\n\nexport interface PipelineNodeLogicProps {\n    id: number | string\n    /** Might be null if a non-existent stage is set in th URL. */\n    stage: PipelineStage | null\n}\n\ntype PluginNodeId = {\n    backend: PipelineBackend.Plugin\n    id: number\n}\ntype BatchExportNodeId = {\n    backend: PipelineBackend.BatchExport\n    id: string\n}\ntype HogFunctionNodeId = {\n    backend: PipelineBackend.HogFunction\n    id: string\n}\ntype ManagedSourceId = {\n    backend: PipelineBackend.ManagedSource\n    id: string\n}\ntype DataWarehouseId = {\n    backend: PipelineBackend.SelfManagedSource\n    id: number | string\n}\nexport type PipelineNodeLimitedType =\n    | PluginNodeId\n    | BatchExportNodeId\n    | HogFunctionNodeId\n    | ManagedSourceId\n    | DataWarehouseId\n\nexport const pipelineNodeLogic = kea<pipelineNodeLogicType>([\n    props({} as PipelineNodeLogicProps),\n    key(({ id }) => id),\n    path((id) => ['scenes', 'pipeline', 'pipelineNodeLogic', id]),\n    actions({\n        setCurrentTab: (tab: PipelineNodeTab = PipelineNodeTab.Configuration) => ({ tab }),\n        setBreadcrumbTitle: (title: string) => ({ title }),\n    }),\n    reducers(() => ({\n        currentTab: [\n            PipelineNodeTab.Configuration as PipelineNodeTab,\n            {\n                setCurrentTab: (_, { tab }) => tab,\n            },\n        ],\n        breadcrumbTitle: [\n            '',\n            {\n                setBreadcrumbTitle: (_, { title }) => title,\n            },\n        ],\n    })),\n    selectors(() => ({\n        breadcrumbs: [\n            (s, p) => [p.id, p.stage, s.breadcrumbTitle],\n            (id, stage, breadcrumbTitle): Breadcrumb[] => [\n                {\n                    key: Scene.Pipeline,\n                    name: 'Data pipeline',\n                    path: urls.pipeline(),\n                },\n                {\n                    key: stage || 'unknown',\n                    name: stage ? capitalizeFirstLetter(NODE_STAGE_TO_PIPELINE_TAB[stage] || '') : 'Unknown',\n                    path: urls.pipeline(stage ? NODE_STAGE_TO_PIPELINE_TAB[stage] : undefined),\n                },\n                {\n                    key: [Scene.PipelineNode, id],\n                    name: breadcrumbTitle,\n                },\n            ],\n        ],\n\n        [SIDE_PANEL_CONTEXT_KEY]: [\n            (s) => [s.node],\n            (node): SidePanelSceneContext | null => {\n                return node.backend === PipelineBackend.Plugin\n                    ? {\n                          activity_scope: ActivityScope.PLUGIN,\n                          activity_item_id: `${node.id}`,\n                          //   access_control_resource: 'plugin',\n                          //   access_control_resource_id: `${node.id}`,\n                      }\n                    : null\n            },\n        ],\n\n        nodeBackend: [\n            (s) => [s.node],\n            (node): PipelineBackend => {\n                return node.backend\n            },\n        ],\n        node: [\n            (_, p) => [p.id],\n            (id): PipelineNodeLimitedType => {\n                if (typeof id === 'string') {\n                    if (id.indexOf('hog-') === 0) {\n                        return { backend: PipelineBackend.HogFunction, id: `${id}`.replace('hog-', '') }\n                    }\n\n                    if (id.indexOf('managed') === 0) {\n                        return { backend: PipelineBackend.ManagedSource, id: `${id}`.replace('managed-', '') }\n                    }\n\n                    if (id.indexOf('self-managed') === 0) {\n                        return { backend: PipelineBackend.SelfManagedSource, id: `${id}`.replace('self-managed-', '') }\n                    }\n\n                    return { backend: PipelineBackend.BatchExport, id }\n                }\n\n                return { backend: PipelineBackend.Plugin, id }\n            },\n        ],\n        tabs: [\n            (s) => [s.nodeBackend],\n            (nodeBackend) => {\n                const tabs = Object.values(PipelineNodeTab)\n                if (nodeBackend === PipelineBackend.BatchExport) {\n                    return tabs.filter((t) => t !== PipelineNodeTab.History)\n                }\n                return tabs\n            },\n        ],\n        id: [(_, p) => [p.id], (id) => id],\n        stage: [(_, p) => [p.stage], (stage) => stage],\n    })),\n    actionToUrl(({ values, props }) => {\n        return {\n            setCurrentTab: () => [urls.pipelineNode(props.stage as PipelineStage, props.id, values.currentTab)],\n        }\n    }),\n    urlToAction(({ props, actions, values }) => ({\n        [urls.pipelineNode(props.stage as PipelineStage, props.id, ':nodeTab')]: ({ nodeTab }) => {\n            if (nodeTab !== values.currentTab && Object.values(PipelineNodeTab).includes(nodeTab as PipelineNodeTab)) {\n                actions.setCurrentTab(nodeTab as PipelineNodeTab)\n            }\n        },\n    })),\n])\n", "import { IconPlus } from '@posthog/icons'\nimport {\n    LemonBanner,\n    LemonButton,\n    LemonDivider,\n    LemonDropdown,\n    LemonInput,\n    LemonLabel,\n    LemonSwitch,\n    LemonTag,\n    LemonTextArea,\n    Link,\n    SpinnerOverlay,\n} from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { BindLogic, useActions, useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport { combineUrl } from 'kea-router'\nimport { NotFound } from 'lib/components/NotFound'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { PayGateButton } from 'lib/components/PayGateMini/PayGateButton'\nimport { PayGateMini } from 'lib/components/PayGateMini/PayGateMini'\nimport { useFeatureFlag } from 'lib/hooks/useFeatureFlag'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { CodeEditorResizeable } from 'lib/monaco/CodeEditorResizable'\nimport { urls } from 'scenes/urls'\n\nimport { AvailableFeature } from '~/types'\n\nimport { DestinationTag } from '../destinations/DestinationTag'\nimport { HogFunctionFilters } from './filters/HogFunctionFilters'\nimport { hogFunctionConfigurationLogic } from './hogFunctionConfigurationLogic'\nimport { HogFunctionIconEditable } from './HogFunctionIcon'\nimport { HogFunctionInputs } from './HogFunctionInputs'\nimport { HogFunctionStatusIndicator } from './HogFunctionStatusIndicator'\nimport { HogFunctionTest } from './HogFunctionTest'\nimport { HogFunctionMappings } from './mapping/HogFunctionMappings'\nimport { HogFunctionEventEstimates } from './metrics/HogFunctionEventEstimates'\n\nexport interface HogFunctionConfigurationProps {\n    templateId?: string | null\n    id?: string | null\n    logicKey?: string\n\n    displayOptions?: {\n        embedded?: boolean\n        hidePageHeader?: boolean\n        hideOverview?: boolean\n        showFilters?: boolean\n        showExpectedVolume?: boolean\n        showStatus?: boolean\n        showEnabled?: boolean\n        showTesting?: boolean\n        canEditSource?: boolean\n        showPersonsCount?: boolean\n    }\n}\n\nexport function HogFunctionConfiguration({\n    templateId,\n    id,\n    logicKey,\n    displayOptions = {},\n}: HogFunctionConfigurationProps): JSX.Element {\n    const logicProps = { templateId, id, logicKey }\n    const logic = hogFunctionConfigurationLogic(logicProps)\n    const {\n        isConfigurationSubmitting,\n        configurationChanged,\n        showSource,\n        configuration,\n        loading,\n        loaded,\n        hogFunction,\n        willReEnableOnSave,\n        willChangeEnabledOnSave,\n        globalsWithInputs,\n        showPaygate,\n        hasAddon,\n        personsCount,\n        personsCountLoading,\n        personsListQuery,\n        template,\n        templateHasChanged,\n        type,\n        usesGroups,\n        hasGroupsAddon,\n    } = useValues(logic)\n    const {\n        submitConfiguration,\n        resetForm,\n        setShowSource,\n        duplicate,\n        resetToTemplate,\n        duplicateFromTemplate,\n        setConfigurationValue,\n        deleteHogFunction,\n    } = useActions(logic)\n    const canEditTransformationHogCode = useFeatureFlag('HOG_TRANSFORMATIONS_CUSTOM_HOG_ENABLED')\n\n    if (loading && !loaded) {\n        return <SpinnerOverlay />\n    }\n\n    if (!loaded) {\n        return <NotFound object=\"Hog function\" />\n    }\n\n    const isLegacyPlugin = (template?.id || hogFunction?.template?.id)?.startsWith('plugin-')\n\n    const headerButtons = (\n        <>\n            {!templateId && (\n                <>\n                    <More\n                        overlay={\n                            <>\n                                {!isLegacyPlugin && (\n                                    <LemonButton fullWidth onClick={() => duplicate()}>\n                                        Duplicate\n                                    </LemonButton>\n                                )}\n                                <LemonDivider />\n                                <LemonButton status=\"danger\" fullWidth onClick={() => deleteHogFunction()}>\n                                    Delete\n                                </LemonButton>\n                            </>\n                        }\n                    />\n                    <LemonDivider vertical />\n                </>\n            )}\n        </>\n    )\n\n    const saveButtons = (\n        <>\n            {configurationChanged ? (\n                <LemonButton\n                    type=\"secondary\"\n                    htmlType=\"reset\"\n                    onClick={() => resetForm()}\n                    disabledReason={\n                        !configurationChanged\n                            ? 'No changes'\n                            : isConfigurationSubmitting\n                            ? 'Saving in progress\u2026'\n                            : undefined\n                    }\n                >\n                    Clear changes\n                </LemonButton>\n            ) : null}\n            <LemonButton\n                type=\"primary\"\n                htmlType=\"submit\"\n                onClick={submitConfiguration}\n                loading={isConfigurationSubmitting}\n            >\n                {templateId ? 'Create' : 'Save'}\n                {willReEnableOnSave\n                    ? ' & re-enable'\n                    : willChangeEnabledOnSave\n                    ? ` & ${configuration.enabled ? 'enable' : 'disable'}`\n                    : ''}\n            </LemonButton>\n        </>\n    )\n\n    if (showPaygate) {\n        return <PayGateMini feature={AvailableFeature.DATA_PIPELINES} />\n    }\n\n    const embedded = displayOptions.embedded ?? false\n    const includeHeaderButtons = !(displayOptions.hidePageHeader ?? false)\n    const showOverview = !(displayOptions.hideOverview ?? false)\n    const showFilters =\n        displayOptions.showFilters ??\n        ['destination', 'internal_destination', 'site_destination', 'broadcast'].includes(type)\n    const showExpectedVolume = displayOptions.showExpectedVolume ?? ['destination', 'site_destination'].includes(type)\n    const showStatus =\n        displayOptions.showStatus ?? ['destination', 'internal_destination', 'email', 'transformation'].includes(type)\n    const showEnabled =\n        displayOptions.showEnabled ??\n        ['destination', 'internal_destination', 'email', 'site_destination', 'site_app', 'transformation'].includes(\n            type\n        )\n    const canEditSource =\n        displayOptions.canEditSource ??\n        // Never allow editing for legacy plugins\n        (!isLegacyPlugin &&\n            (['destination', 'email', 'site_destination', 'site_app'].includes(type) ||\n                (type === 'transformation' && canEditTransformationHogCode)))\n    const showPersonsCount = displayOptions.showPersonsCount ?? ['broadcast'].includes(type)\n    const showTesting =\n        displayOptions.showTesting ??\n        ['destination', 'internal_destination', 'transformation', 'broadcast', 'email'].includes(type)\n\n    const showLeftPanel = showOverview || showExpectedVolume || showPersonsCount || showFilters\n\n    return (\n        <div className=\"space-y-3\">\n            <BindLogic logic={hogFunctionConfigurationLogic} props={logicProps}>\n                {includeHeaderButtons && (\n                    <PageHeader\n                        buttons={\n                            <>\n                                {headerButtons}\n                                {saveButtons}\n                            </>\n                        }\n                    />\n                )}\n\n                {hogFunction?.filters?.bytecode_error ? (\n                    <div>\n                        <LemonBanner type=\"error\">\n                            <b>Error saving filters:</b> {hogFunction.filters.bytecode_error}\n                        </LemonBanner>\n                    </div>\n                ) : null}\n\n                <Form\n                    logic={hogFunctionConfigurationLogic}\n                    props={logicProps}\n                    formKey=\"configuration\"\n                    className=\"space-y-3\"\n                >\n                    <div className=\"flex flex-wrap items-start gap-4\">\n                        {showLeftPanel && (\n                            <div className=\"flex flex-col flex-1 gap-4 min-w-100\">\n                                <div\n                                    className={clsx('p-3 space-y-2 bg-surface-primary', !embedded && 'border rounded')}\n                                >\n                                    <div className=\"flex flex-row items-center gap-2 min-h-16\">\n                                        <LemonField name=\"icon_url\">\n                                            {({ value, onChange }) => (\n                                                <HogFunctionIconEditable\n                                                    logicKey={id ?? templateId ?? 'new'}\n                                                    src={value}\n                                                    onChange={(val) => onChange(val)}\n                                                />\n                                            )}\n                                        </LemonField>\n\n                                        <div className=\"flex flex-col items-start justify-start flex-1 py-1\">\n                                            <span className=\"font-semibold\">{configuration.name}</span>\n                                            {template && <DestinationTag status={template.status} />}\n                                        </div>\n\n                                        {showStatus && <HogFunctionStatusIndicator hogFunction={hogFunction} />}\n                                        {showEnabled && (\n                                            <LemonField name=\"enabled\">\n                                                {({ value, onChange }) => (\n                                                    <LemonSwitch\n                                                        label=\"Enabled\"\n                                                        onChange={() => onChange(!value)}\n                                                        checked={value}\n                                                        disabled={loading}\n                                                        bordered\n                                                    />\n                                                )}\n                                            </LemonField>\n                                        )}\n                                    </div>\n                                    <LemonField name=\"name\" label=\"Name\">\n                                        <LemonInput type=\"text\" disabled={loading} />\n                                    </LemonField>\n                                    <LemonField\n                                        name=\"description\"\n                                        label=\"Description\"\n                                        info=\"Add a description to share context with other team members\"\n                                    >\n                                        <LemonTextArea disabled={loading} />\n                                    </LemonField>\n\n                                    {isLegacyPlugin ? null : hogFunction?.template &&\n                                      !hogFunction.template.id.startsWith('template-blank-') ? (\n                                        <LemonDropdown\n                                            showArrow\n                                            overlay={\n                                                <div className=\"p-1 max-w-120\">\n                                                    <p>\n                                                        This function was built from the template{' '}\n                                                        <b>{hogFunction.template.name}</b>. If the template is updated,\n                                                        this function is not affected unless you choose to update it.\n                                                    </p>\n\n                                                    <div className=\"flex items-center flex-1 gap-2 pt-2 border-t\">\n                                                        <div className=\"flex-1\">\n                                                            <LemonButton>Close</LemonButton>\n                                                        </div>\n\n                                                        <LemonButton\n                                                            type=\"secondary\"\n                                                            onClick={() => duplicateFromTemplate()}\n                                                        >\n                                                            New function from template\n                                                        </LemonButton>\n\n                                                        {templateHasChanged ? (\n                                                            <LemonButton\n                                                                type=\"primary\"\n                                                                onClick={() => resetToTemplate()}\n                                                            >\n                                                                Update\n                                                            </LemonButton>\n                                                        ) : null}\n                                                    </div>\n                                                </div>\n                                            }\n                                        >\n                                            <div className=\"text-xs border border-dashed rounded text-secondary\">\n                                                <Link subtle className=\"flex flex-wrap items-center gap-1 p-2\">\n                                                    Built from template:\n                                                    <span className=\"font-semibold\">{hogFunction?.template.name}</span>\n                                                    <DestinationTag status={hogFunction.template.status} />\n                                                    {templateHasChanged ? (\n                                                        <LemonTag type=\"success\">Update available!</LemonTag>\n                                                    ) : null}\n                                                </Link>\n                                            </div>\n                                        </LemonDropdown>\n                                    ) : null}\n                                </div>\n\n                                {showFilters && <HogFunctionFilters />}\n\n                                {showPersonsCount && (\n                                    <div className=\"relative p-3 space-y-2 border rounded bg-surface-primary\">\n                                        <div>\n                                            <LemonLabel>Matching persons</LemonLabel>\n                                        </div>\n                                        {personsCount && !personsCountLoading ? (\n                                            <>\n                                                Found{' '}\n                                                <Link\n                                                    to={\n                                                        // TODO: swap for a link to the persons page\n                                                        combineUrl(urls.activity(), {}, { q: personsListQuery }).url\n                                                    }\n                                                >\n                                                    <strong>\n                                                        {personsCount ?? 0} {personsCount !== 1 ? 'people' : 'person'}\n                                                    </strong>\n                                                </Link>{' '}\n                                                to send to.\n                                            </>\n                                        ) : personsCountLoading ? (\n                                            <div className=\"min-h-20\">\n                                                <SpinnerOverlay />\n                                            </div>\n                                        ) : (\n                                            <p>The expected volume could not be calculated</p>\n                                        )}\n                                    </div>\n                                )}\n\n                                {showExpectedVolume ? <HogFunctionEventEstimates /> : null}\n                            </div>\n                        )}\n\n                        <div className=\"space-y-4 flex-2 min-w-100\">\n                            <div className={clsx('p-3 space-y-2 bg-surface-primary', !embedded && 'border rounded')}>\n                                <div className=\"space-y-2\">\n                                    {usesGroups && !hasGroupsAddon ? (\n                                        <LemonBanner type=\"warning\">\n                                            <span className=\"flex items-center gap-2\">\n                                                This function appears to use Groups but you do not have the Groups\n                                                Analytics addon. Without it, you may see empty values where you use\n                                                templates like {'\"{groups.kind.properties}\"'}\n                                                <PayGateButton\n                                                    feature={AvailableFeature.GROUP_ANALYTICS}\n                                                    type=\"secondary\"\n                                                />\n                                            </span>\n                                        </LemonBanner>\n                                    ) : null}\n\n                                    <HogFunctionInputs\n                                        configuration={configuration}\n                                        setConfigurationValue={setConfigurationValue}\n                                    />\n                                    {showSource && canEditSource ? (\n                                        <LemonButton\n                                            icon={<IconPlus />}\n                                            size=\"small\"\n                                            type=\"secondary\"\n                                            className=\"my-4\"\n                                            onClick={() => {\n                                                setConfigurationValue('inputs_schema', [\n                                                    ...(configuration.inputs_schema ?? []),\n                                                    {\n                                                        type: 'string',\n                                                        key: `input_${(configuration.inputs_schema?.length ?? 0) + 1}`,\n                                                        label: '',\n                                                        required: false,\n                                                    },\n                                                ])\n                                            }}\n                                        >\n                                            Add input variable\n                                        </LemonButton>\n                                    ) : null}\n                                </div>\n                            </div>\n\n                            <HogFunctionMappings />\n\n                            {canEditSource && (\n                                <div\n                                    className={clsx(\n                                        'border rounded p-3 space-y-2',\n                                        showSource ? 'bg-surface-primary' : 'bg-surface-secondary'\n                                    )}\n                                >\n                                    <div className=\"flex items-center justify-end gap-2\">\n                                        <div className=\"flex-1 space-y-2\">\n                                            <h2 className=\"mb-0\">Edit source</h2>\n                                            {!showSource ? <p>Click here to edit the function's source code</p> : null}\n                                        </div>\n\n                                        {!showSource ? (\n                                            <LemonButton\n                                                type=\"secondary\"\n                                                onClick={() => setShowSource(true)}\n                                                disabledReason={\n                                                    !hasAddon\n                                                        ? 'Editing the source code requires the Data Pipelines addon'\n                                                        : undefined\n                                                }\n                                            >\n                                                Edit source code\n                                            </LemonButton>\n                                        ) : (\n                                            <LemonButton\n                                                size=\"xsmall\"\n                                                type=\"secondary\"\n                                                onClick={() => setShowSource(false)}\n                                            >\n                                                Hide source code\n                                            </LemonButton>\n                                        )}\n                                    </div>\n\n                                    {showSource ? (\n                                        <LemonField name=\"hog\">\n                                            {({ value, onChange }) => (\n                                                <>\n                                                    {!type.startsWith('site_') ? (\n                                                        <span className=\"text-xs text-secondary\">\n                                                            This is the underlying Hog code that will run whenever the\n                                                            filters match.{' '}\n                                                            <Link to=\"https://posthog.com/docs/hog\">See the docs</Link>{' '}\n                                                            for more info\n                                                        </span>\n                                                    ) : null}\n                                                    <CodeEditorResizeable\n                                                        language={type.startsWith('site_') ? 'typescript' : 'hog'}\n                                                        value={value ?? ''}\n                                                        onChange={(v) => onChange(v ?? '')}\n                                                        globals={globalsWithInputs}\n                                                        options={{\n                                                            minimap: {\n                                                                enabled: false,\n                                                            },\n                                                            wordWrap: 'on',\n                                                            scrollBeyondLastLine: false,\n                                                            automaticLayout: true,\n                                                            fixedOverflowWidgets: true,\n                                                            suggest: {\n                                                                showInlineDetails: true,\n                                                            },\n                                                            quickSuggestionsDelay: 300,\n                                                        }}\n                                                    />\n                                                </>\n                                            )}\n                                        </LemonField>\n                                    ) : null}\n                                </div>\n                            )}\n                            {showTesting ? <HogFunctionTest /> : null}\n                            <div className=\"flex justify-end gap-2\">{saveButtons}</div>\n                        </div>\n                    </div>\n                </Form>\n            </BindLogic>\n        </div>\n    )\n}\n", "import { LemonBanner, LemonLabel, LemonSelect, LemonSwitch } from '@posthog/lemon-ui'\nimport { id } from 'chartjs-plugin-trendline'\nimport { useValues } from 'kea'\nimport { PropertyFilters } from 'lib/components/PropertyFilters/PropertyFilters'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { TestAccountFilterSwitch } from 'lib/components/TestAccountFiltersSwitch'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { ActionFilter } from 'scenes/insights/filters/ActionFilter/ActionFilter'\nimport { MathAvailability } from 'scenes/insights/filters/ActionFilter/ActionFilterRow/ActionFilterRow'\n\nimport { groupsModel } from '~/models/groupsModel'\nimport { NodeKind } from '~/queries/schema/schema-general'\nimport { AnyPropertyFilter, EntityTypes, FilterType, HogFunctionFiltersType } from '~/types'\n\nimport { hogFunctionConfigurationLogic } from '../hogFunctionConfigurationLogic'\nimport { HogFunctionFiltersInternal } from './HogFunctionFiltersInternal'\n\nfunction sanitizeActionFilters(filters?: FilterType): Partial<HogFunctionFiltersType> {\n    if (!filters) {\n        return {}\n    }\n    const sanitized: HogFunctionFiltersType = {}\n\n    if (filters.events) {\n        sanitized.events = filters.events.map((f) => ({\n            id: f.id,\n            type: 'events',\n            name: f.name,\n            order: f.order,\n            properties: f.properties,\n        }))\n    }\n\n    if (filters.actions) {\n        sanitized.actions = filters.actions.map((f) => ({\n            id: f.id,\n            type: 'actions',\n            name: f.name,\n            order: f.order,\n            properties: f.properties,\n        }))\n    }\n\n    return sanitized\n}\n\nexport function HogFunctionFilters(): JSX.Element {\n    const { groupsTaxonomicTypes } = useValues(groupsModel)\n    const { configuration, type, useMapping } = useValues(hogFunctionConfigurationLogic)\n\n    if (type === 'broadcast') {\n        return (\n            <div className=\"p-3 space-y-2 border rounded bg-surface-primary\">\n                <LemonField name=\"filters\" label=\"Filters\">\n                    {({ value, onChange }) => (\n                        <PropertyFilters\n                            propertyFilters={value?.properties ?? []}\n                            taxonomicGroupTypes={[\n                                TaxonomicFilterGroupType.PersonProperties,\n                                TaxonomicFilterGroupType.Cohorts,\n                                TaxonomicFilterGroupType.HogQLExpression,\n                            ]}\n                            onChange={(properties: AnyPropertyFilter[]) => {\n                                onChange({\n                                    ...value,\n                                    properties,\n                                })\n                            }}\n                            pageKey={`HogFunctionPropertyFilters.${id}`}\n                            metadataSource={{ kind: NodeKind.ActorsQuery }}\n                        />\n                    )}\n                </LemonField>\n            </div>\n        )\n    }\n\n    if (type === 'internal_destination') {\n        return <HogFunctionFiltersInternal />\n    }\n\n    const isLegacyPlugin = configuration?.template?.id?.startsWith('plugin-')\n\n    const showMasking = type === 'destination' && !isLegacyPlugin\n    const showDropEvents = type === 'transformation'\n\n    return (\n        <div className=\"p-3 space-y-2 border rounded bg-surface-primary\">\n            <LemonField\n                name=\"filters\"\n                label={useMapping ? 'Global filters' : 'Filters'}\n                info={useMapping ? 'Filters applied to all events before they reach a mapping' : null}\n            >\n                {({ value, onChange }) => {\n                    const filters = (value ?? {}) as HogFunctionFiltersType\n                    return (\n                        <>\n                            {useMapping && (\n                                <p className=\"mb-0 text-sm text-secondary\">\n                                    Filters here apply for all events that could trigger this function, regardless of\n                                    mappings.\n                                </p>\n                            )}\n                            <TestAccountFilterSwitch\n                                checked={filters?.filter_test_accounts ?? false}\n                                onChange={(filter_test_accounts) => onChange({ ...filters, filter_test_accounts })}\n                                fullWidth\n                            />\n                            <PropertyFilters\n                                propertyFilters={(filters?.properties ?? []) as AnyPropertyFilter[]}\n                                taxonomicGroupTypes={[\n                                    TaxonomicFilterGroupType.EventProperties,\n                                    TaxonomicFilterGroupType.PersonProperties,\n                                    TaxonomicFilterGroupType.EventFeatureFlags,\n                                    TaxonomicFilterGroupType.Elements,\n                                    TaxonomicFilterGroupType.HogQLExpression,\n                                ]}\n                                onChange={(properties: AnyPropertyFilter[]) => {\n                                    onChange({\n                                        ...filters,\n                                        properties,\n                                    })\n                                }}\n                                pageKey={`HogFunctionPropertyFilters.${id}`}\n                            />\n\n                            {!useMapping ? (\n                                <>\n                                    <div className=\"flex justify-between w-full gap-2\">\n                                        <LemonLabel>Match events and actions</LemonLabel>\n                                    </div>\n                                    <p className=\"mb-0 text-xs text-secondary\">\n                                        If set, the destination will only run if the <b>event matches any</b> of the\n                                        below.\n                                    </p>\n                                    <ActionFilter\n                                        bordered\n                                        filters={value ?? {} /* TODO: this is any */}\n                                        setFilters={(payload) => {\n                                            onChange({\n                                                ...value,\n                                                ...sanitizeActionFilters(payload),\n                                            })\n                                        }}\n                                        typeKey=\"plugin-filters\"\n                                        mathAvailability={MathAvailability.None}\n                                        hideRename\n                                        hideDuplicate\n                                        showNestedArrow={false}\n                                        actionsTaxonomicGroupTypes={[\n                                            TaxonomicFilterGroupType.Events,\n                                            TaxonomicFilterGroupType.Actions,\n                                        ]}\n                                        propertiesTaxonomicGroupTypes={[\n                                            TaxonomicFilterGroupType.EventProperties,\n                                            TaxonomicFilterGroupType.EventFeatureFlags,\n                                            TaxonomicFilterGroupType.Elements,\n                                            TaxonomicFilterGroupType.PersonProperties,\n                                            TaxonomicFilterGroupType.HogQLExpression,\n                                            ...groupsTaxonomicTypes,\n                                        ]}\n                                        propertyFiltersPopover\n                                        addFilterDefaultOptions={{\n                                            id: '$pageview',\n                                            name: '$pageview',\n                                            type: EntityTypes.EVENTS,\n                                        }}\n                                        buttonCopy=\"Add event matcher\"\n                                    />\n\n                                    {showDropEvents && (\n                                        <>\n                                            <LemonLabel>\n                                                <span className=\"flex items-center justify-between flex-1 gap-2\">\n                                                    Drop events that don't match\n                                                    <LemonSwitch\n                                                        checked={value?.drop_events ?? false}\n                                                        onChange={(drop_events) => onChange({ ...value, drop_events })}\n                                                    />\n                                                </span>\n                                            </LemonLabel>\n\n                                            {!value?.drop_events ? (\n                                                <p>\n                                                    Currently, this will run for all events that match the above\n                                                    conditions. Any that do not match will be unmodified and ingested as\n                                                    they are.\n                                                </p>\n                                            ) : (\n                                                <LemonBanner type=\"error\">\n                                                    This will drop all events that don't match the above conditions.\n                                                    Please ensure this is definitely intended.\n                                                </LemonBanner>\n                                            )}\n                                        </>\n                                    )}\n                                </>\n                            ) : null}\n                        </>\n                    )\n                }}\n            </LemonField>\n            {showMasking ? (\n                <LemonField name=\"masking\" label=\"Trigger options\">\n                    {({ value, onChange }) => (\n                        <div className=\"flex flex-wrap items-center gap-1\">\n                            <LemonSelect\n                                options={[\n                                    {\n                                        value: null,\n                                        label: 'Run every time',\n                                    },\n                                    {\n                                        value: 'all',\n                                        label: 'Run once per interval',\n                                    },\n                                    {\n                                        value: '{person.id}',\n                                        label: 'Run once per person per interval',\n                                    },\n                                    {\n                                        value: '{concat(person.id, event.event)}',\n                                        label: 'Run once per person per event name per interval',\n                                    },\n                                ]}\n                                value={value?.hash ?? null}\n                                onChange={(val) =>\n                                    onChange({\n                                        hash: val,\n                                        ttl: value?.ttl ?? 60 * 30,\n                                    })\n                                }\n                            />\n                            {configuration.masking?.hash ? (\n                                <>\n                                    <div className=\"flex flex-wrap items-center gap-1\">\n                                        <span>of</span>\n                                        <LemonSelect\n                                            value={value?.ttl}\n                                            onChange={(val) => onChange({ ...value, ttl: val })}\n                                            options={[\n                                                {\n                                                    value: 5 * 60,\n                                                    label: '5 minutes',\n                                                },\n                                                {\n                                                    value: 15 * 60,\n                                                    label: '15 minutes',\n                                                },\n                                                {\n                                                    value: 30 * 60,\n                                                    label: '30 minutes',\n                                                },\n                                                {\n                                                    value: 60 * 60,\n                                                    label: '1 hour',\n                                                },\n                                                {\n                                                    value: 2 * 60 * 60,\n                                                    label: '2 hours',\n                                                },\n                                                {\n                                                    value: 4 * 60 * 60,\n                                                    label: '4 hours',\n                                                },\n                                                {\n                                                    value: 8 * 60 * 60,\n                                                    label: '8 hours',\n                                                },\n                                                {\n                                                    value: 12 * 60 * 60,\n                                                    label: '12 hours',\n                                                },\n                                                {\n                                                    value: 24 * 60 * 60,\n                                                    label: '24 hours',\n                                                },\n                                            ]}\n                                        />\n                                    </div>\n                                    <div className=\"flex flex-wrap items-center gap-1\">\n                                        <span>or until</span>\n                                        <LemonSelect\n                                            value={value?.threshold}\n                                            onChange={(val) => onChange({ ...value, threshold: val })}\n                                            options={[\n                                                {\n                                                    value: null,\n                                                    label: 'Not set',\n                                                },\n                                                {\n                                                    value: 1000,\n                                                    label: '1000 events',\n                                                },\n                                                {\n                                                    value: 10000,\n                                                    label: '10,000 events',\n                                                },\n                                                {\n                                                    value: 100000,\n                                                    label: '100,000 events',\n                                                },\n                                                {\n                                                    value: 1000000,\n                                                    label: '1,000,000 events',\n                                                },\n                                            ]}\n                                        />\n                                    </div>\n                                </>\n                            ) : null}\n                        </div>\n                    )}\n                </LemonField>\n            ) : null}\n        </div>\n    )\n}\n", "import { lemonToast } from '@posthog/lemon-ui'\nimport equal from 'fast-deep-equal'\nimport { actions, afterMount, connect, isBreakpoint, kea, key, listeners, path, props, reducers, selectors } from 'kea'\nimport { forms } from 'kea-forms'\nimport { loaders } from 'kea-loaders'\nimport { beforeUnload, router } from 'kea-router'\nimport { subscriptions } from 'kea-subscriptions'\nimport api from 'lib/api'\nimport { dayjs } from 'lib/dayjs'\nimport { uuid } from 'lib/utils'\nimport { deleteWithUndo } from 'lib/utils/deleteWithUndo'\nimport posthog from 'posthog-js'\nimport { asDisplay } from 'scenes/persons/person-utils'\nimport { hogFunctionNewUrl, hogFunctionUrl } from 'scenes/pipeline/hogfunctions/urls'\nimport { pipelineNodeLogic } from 'scenes/pipeline/pipelineNodeLogic'\nimport { projectLogic } from 'scenes/projectLogic'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { groupsModel } from '~/models/groupsModel'\nimport { defaultDataTableColumns } from '~/queries/nodes/DataTable/utils'\nimport { performQuery } from '~/queries/query'\nimport {\n    ActorsQuery,\n    DataTableNode,\n    EventsNode,\n    EventsQuery,\n    NodeKind,\n    TrendsQuery,\n} from '~/queries/schema/schema-general'\nimport { escapePropertyAsHogQlIdentifier, hogql } from '~/queries/utils'\nimport {\n    AnyPersonScopeFilter,\n    AnyPropertyFilter,\n    AvailableFeature,\n    BaseMathType,\n    ChartDisplayType,\n    EventType,\n    FilterLogicalOperator,\n    HogFunctionConfigurationType,\n    HogFunctionInputSchemaType,\n    HogFunctionInputType,\n    HogFunctionInvocationGlobals,\n    HogFunctionMappingType,\n    HogFunctionTemplateType,\n    HogFunctionType,\n    HogFunctionTypeType,\n    PersonType,\n    PipelineStage,\n    PropertyFilterType,\n    PropertyGroupFilter,\n    PropertyGroupFilterValue,\n} from '~/types'\n\nimport { EmailTemplate } from './email-templater/emailTemplaterLogic'\nimport type { hogFunctionConfigurationLogicType } from './hogFunctionConfigurationLogicType'\n\nexport interface HogFunctionConfigurationLogicProps {\n    logicKey?: string\n    templateId?: string | null\n    id?: string | null\n}\n\nexport const EVENT_VOLUME_DAILY_WARNING_THRESHOLD = 1000\nconst UNSAVED_CONFIGURATION_TTL = 1000 * 60 * 5\n\nconst NEW_FUNCTION_TEMPLATE: HogFunctionTemplateType = {\n    id: 'new',\n    free: false,\n    type: 'destination',\n    name: '',\n    description: '',\n    inputs_schema: [],\n    hog: \"print('Hello, world!');\",\n    status: 'stable',\n}\n\nexport const TYPES_WITH_GLOBALS: HogFunctionTypeType[] = ['transformation', 'destination']\n\nexport function sanitizeConfiguration(data: HogFunctionConfigurationType): HogFunctionConfigurationType {\n    function sanitizeInputs(\n        data: HogFunctionConfigurationType | HogFunctionMappingType\n    ): Record<string, HogFunctionInputType> {\n        const sanitizedInputs: Record<string, HogFunctionInputType> = {}\n        data.inputs_schema?.forEach((input) => {\n            const secret = data.inputs?.[input.key]?.secret\n            let value = data.inputs?.[input.key]?.value\n\n            if (secret) {\n                // If set this means we haven't changed the value\n                sanitizedInputs[input.key] = {\n                    value: '********', // Don't send the actual value\n                    secret: true,\n                }\n                return\n            }\n\n            if (input.type === 'json' && typeof value === 'string') {\n                try {\n                    value = JSON.parse(value)\n                } catch (e) {\n                    // Ignore\n                }\n            }\n\n            sanitizedInputs[input.key] = {\n                value: value,\n            }\n        })\n        return sanitizedInputs\n    }\n\n    const payload: HogFunctionConfigurationType = {\n        ...data,\n        filters: data.filters,\n        mappings: data.mappings?.map((mapping) => ({\n            ...mapping,\n            inputs: sanitizeInputs(mapping),\n        })),\n        inputs: sanitizeInputs(data),\n        masking: data.masking?.hash ? data.masking : null,\n        icon_url: data.icon_url,\n    }\n\n    return payload\n}\n\nconst templateToConfiguration = (template: HogFunctionTemplateType): HogFunctionConfigurationType => {\n    function getInputs(inputs_schema?: HogFunctionInputSchemaType[] | null): Record<string, HogFunctionInputType> {\n        const inputs: Record<string, HogFunctionInputType> = {}\n        inputs_schema?.forEach((schema) => {\n            if (schema.default !== undefined) {\n                inputs[schema.key] = { value: schema.default }\n            }\n        })\n        return inputs\n    }\n\n    function getMappingInputs(\n        inputs_schema?: HogFunctionInputSchemaType[] | null\n    ): Record<string, HogFunctionInputType> {\n        const inputs: Record<string, HogFunctionInputType> = {}\n        inputs_schema?.forEach((schema) => {\n            if (schema.default !== undefined) {\n                inputs[schema.key] = { value: schema.default }\n            }\n        })\n        return inputs\n    }\n\n    return {\n        type: template.type ?? 'destination',\n        name: template.name,\n        description: template.description,\n        inputs_schema: template.inputs_schema,\n        filters: template.filters,\n        mappings: template.mappings?.map(\n            (mapping): HogFunctionMappingType => ({\n                ...mapping,\n                inputs: getMappingInputs(mapping.inputs_schema),\n            })\n        ),\n        hog: template.hog,\n        icon_url: template.icon_url,\n        inputs: getInputs(template.inputs_schema),\n        enabled: template.type !== 'broadcast',\n    }\n}\n\nexport function convertToHogFunctionInvocationGlobals(\n    event: EventType,\n    person: PersonType\n): HogFunctionInvocationGlobals {\n    const team = teamLogic.findMounted()?.values?.currentTeam\n    const projectUrl = `${window.location.origin}/project/${team?.id}`\n    return {\n        project: {\n            id: team?.id ?? 0,\n            name: team?.name ?? 'Default project',\n            url: projectUrl,\n        },\n        event: {\n            uuid: event.uuid ?? '',\n            event: event.event,\n            distinct_id: event.distinct_id,\n            elements_chain: event.elements_chain ?? '',\n            properties: event.properties,\n            timestamp: event.timestamp,\n\n            url: `${projectUrl}/events/${encodeURIComponent(event.uuid ?? '')}/${encodeURIComponent(event.timestamp)}`,\n        },\n        person: {\n            id: person.id ?? '',\n            properties: person.properties,\n\n            name: asDisplay(person),\n            url: `${projectUrl}/person/${encodeURIComponent(event.distinct_id)}`,\n        },\n        groups: {},\n    }\n}\n\nexport const hogFunctionConfigurationLogic = kea<hogFunctionConfigurationLogicType>([\n    path((id) => ['scenes', 'pipeline', 'hogFunctionConfigurationLogic', id]),\n    props({} as HogFunctionConfigurationLogicProps),\n    key(({ id, templateId, logicKey }: HogFunctionConfigurationLogicProps) => {\n        const baseKey = id ?? templateId ?? 'new'\n        return logicKey ? `${logicKey}_${baseKey}` : baseKey\n    }),\n    connect(({ id }: HogFunctionConfigurationLogicProps) => ({\n        values: [\n            projectLogic,\n            ['currentProjectId', 'currentProject'],\n            groupsModel,\n            ['groupTypes'],\n            userLogic,\n            ['hasAvailableFeature'],\n        ],\n        actions: [pipelineNodeLogic({ id: `hog-${id}`, stage: PipelineStage.Destination }), ['setBreadcrumbTitle']],\n    })),\n    actions({\n        setShowSource: (showSource: boolean) => ({ showSource }),\n        resetForm: true,\n        upsertHogFunction: (configuration: HogFunctionConfigurationType) => ({ configuration }),\n        duplicate: true,\n        duplicateFromTemplate: true,\n        resetToTemplate: true,\n        deleteHogFunction: true,\n        sparklineQueryChanged: (sparklineQuery: TrendsQuery) => ({ sparklineQuery } as { sparklineQuery: TrendsQuery }),\n        personsCountQueryChanged: (personsCountQuery: ActorsQuery) =>\n            ({ personsCountQuery } as { personsCountQuery: ActorsQuery }),\n        loadSampleGlobals: true,\n        setUnsavedConfiguration: (configuration: HogFunctionConfigurationType | null) => ({ configuration }),\n        persistForUnload: true,\n        setSampleGlobalsError: (error) => ({ error }),\n        setSampleGlobals: (sampleGlobals: HogFunctionInvocationGlobals | null) => ({ sampleGlobals }),\n        setShowEventsList: (showEventsList: boolean) => ({ showEventsList }),\n    }),\n    reducers(({ props }) => ({\n        sampleGlobals: [\n            null as HogFunctionInvocationGlobals | null,\n            {\n                setSampleGlobals: (_, { sampleGlobals }) => sampleGlobals,\n            },\n        ],\n        showSource: [\n            // Show source by default for blank templates when creating a new function\n            !!(!props.id && props.templateId?.startsWith('template-blank-')),\n            {\n                setShowSource: (_, { showSource }) => showSource,\n            },\n        ],\n\n        hasHadSubmissionErrors: [\n            false,\n            {\n                upsertHogFunctionFailure: () => true,\n            },\n        ],\n\n        unsavedConfiguration: [\n            null as { timestamp: number; configuration: HogFunctionConfigurationType } | null,\n            { persist: true },\n            {\n                setUnsavedConfiguration: (_, { configuration }) =>\n                    configuration ? { timestamp: Date.now(), configuration } : null,\n            },\n        ],\n\n        sampleGlobalsError: [\n            null as null | string,\n            {\n                loadSampleGlobals: () => null,\n                setSampleGlobalsError: (_, { error }) => error,\n            },\n        ],\n        showEventsList: [\n            false,\n            {\n                setShowEventsList: (_, { showEventsList }) => showEventsList,\n            },\n        ],\n    })),\n    loaders(({ actions, props, values }) => ({\n        template: [\n            null as HogFunctionTemplateType | null,\n            {\n                loadTemplate: async () => {\n                    if (!props.templateId) {\n                        return null\n                    }\n\n                    if (props.templateId === 'new') {\n                        return {\n                            ...NEW_FUNCTION_TEMPLATE,\n                        }\n                    }\n\n                    const res = await api.hogFunctions.getTemplate(props.templateId)\n\n                    if (!res) {\n                        throw new Error('Template not found')\n                    }\n                    return res\n                },\n            },\n        ],\n\n        hogFunction: [\n            null as HogFunctionType | null,\n            {\n                loadHogFunction: async () => {\n                    if (!props.id || props.id === 'new') {\n                        return null\n                    }\n\n                    return await api.hogFunctions.get(props.id)\n                },\n\n                upsertHogFunction: async ({ configuration }) => {\n                    const res =\n                        props.id && props.id !== 'new'\n                            ? await api.hogFunctions.update(props.id, configuration)\n                            : await api.hogFunctions.create(configuration)\n\n                    posthog.capture('hog function saved', {\n                        id: res.id,\n                        template_id: res.template?.id,\n                        template_name: res.template?.name,\n                    })\n\n                    lemonToast.success('Configuration saved')\n\n                    return res\n                },\n            },\n        ],\n\n        sparkline: [\n            null as null | {\n                data: { name: string; values: number[]; color: string }[]\n                count: number\n                labels: string[]\n            },\n            {\n                sparklineQueryChanged: async ({ sparklineQuery }, breakpoint) => {\n                    if (values.type !== 'destination' && values.type !== 'site_destination') {\n                        return null\n                    }\n                    if (values.sparkline === null) {\n                        await breakpoint(100)\n                    } else {\n                        await breakpoint(1000)\n                    }\n                    const result = await performQuery(sparklineQuery)\n                    breakpoint()\n\n                    const dataValues: number[] = result?.results?.[0]?.data ?? []\n                    const [underThreshold, overThreshold] = dataValues.reduce(\n                        (acc, val: number) => {\n                            acc[0].push(Math.min(val, EVENT_VOLUME_DAILY_WARNING_THRESHOLD))\n                            acc[1].push(Math.max(0, val - EVENT_VOLUME_DAILY_WARNING_THRESHOLD))\n\n                            return acc\n                        },\n                        [[], []] as [number[], number[]]\n                    )\n\n                    const data = [\n                        {\n                            name: 'Low volume',\n                            values: underThreshold,\n                            color: 'success',\n                        },\n                        {\n                            name: 'High volume',\n                            values: overThreshold,\n                            color: 'warning',\n                        },\n                    ]\n                    const count = result?.results?.[0]?.count\n                    const labels = result?.results?.[0]?.labels\n                    return { data, count, labels }\n                },\n            },\n        ],\n\n        personsCount: [\n            null as number | null,\n            {\n                personsCountQueryChanged: async ({ personsCountQuery }, breakpoint) => {\n                    if (values.type !== 'broadcast') {\n                        return null\n                    }\n                    if (values.personsCount === null) {\n                        await breakpoint(100)\n                    } else {\n                        await breakpoint(1000)\n                    }\n                    const result = await performQuery(personsCountQuery)\n                    breakpoint()\n                    return result?.results?.[0]?.[0] ?? null\n                },\n            },\n        ],\n\n        sampleGlobals: [\n            null as HogFunctionInvocationGlobals | null,\n            {\n                loadSampleGlobals: async (_, breakpoint) => {\n                    if (!values.lastEventQuery) {\n                        return values.sampleGlobals\n                    }\n                    const errorMessage =\n                        'No events match these filters in the last 30 days. Showing an example $pageview event instead.'\n                    try {\n                        await breakpoint(values.sampleGlobals === null ? 10 : 1000)\n                        let response = await performQuery(values.lastEventQuery)\n                        if (!response?.results?.[0] && values.lastEventSecondQuery) {\n                            response = await performQuery(values.lastEventSecondQuery)\n                        }\n                        if (!response?.results?.[0]) {\n                            throw new Error(errorMessage)\n                        }\n                        const event: EventType = response?.results?.[0]?.[0]\n                        const person: PersonType = response?.results?.[0]?.[1]\n                        const globals = convertToHogFunctionInvocationGlobals(event, person)\n                        globals.groups = {}\n                        values.groupTypes.forEach((groupType, index) => {\n                            const tuple = response?.results?.[0]?.[2 + index]\n                            if (tuple && Array.isArray(tuple) && tuple[2]) {\n                                let properties = {}\n                                try {\n                                    properties = JSON.parse(tuple[3])\n                                } catch (e) {\n                                    // Ignore\n                                }\n                                globals.groups![groupType.group_type] = {\n                                    type: groupType.group_type,\n                                    index: tuple[1],\n                                    id: tuple[2], // TODO: rename to \"key\"?\n                                    url: `${window.location.origin}/groups/${tuple[1]}/${encodeURIComponent(tuple[2])}`,\n                                    properties,\n                                }\n                            }\n                        })\n                        globals.source = {\n                            name: values.configuration?.name ?? 'Unnamed',\n                            url: window.location.href.split('#')[0],\n                        }\n                        return globals\n                    } catch (e: any) {\n                        if (!isBreakpoint(e)) {\n                            actions.setSampleGlobalsError(e.message ?? errorMessage)\n                        }\n                        return values.exampleInvocationGlobals\n                    }\n                },\n            },\n        ],\n    })),\n    forms(({ values, props, asyncActions }) => ({\n        configuration: {\n            defaults: {} as HogFunctionConfigurationType,\n            alwaysShowErrors: true,\n            errors: (data) => {\n                return {\n                    name: !data.name ? 'Name is required' : undefined,\n                    mappings:\n                        data.type === 'site_destination' && (!data.mappings || data.mappings.length === 0)\n                            ? 'You must add at least one mapping'\n                            : undefined,\n                    filters:\n                        data.type === 'internal_destination' && data.filters?.events?.length === 0\n                            ? 'You must choose a filter'\n                            : undefined,\n                    ...(values.inputFormErrors as any),\n                }\n            },\n            submit: async (data) => {\n                const payload: Record<string, any> = sanitizeConfiguration(data)\n                // Only sent on create\n                payload.template_id = props.templateId || values.hogFunction?.template?.id\n\n                if (!values.hasAddon) {\n                    // Remove the source field if the user doesn't have the addon\n                    delete payload.hog\n                    delete payload.inputs_schema\n                }\n\n                await asyncActions.upsertHogFunction(payload as HogFunctionConfigurationType)\n            },\n        },\n    })),\n    selectors(() => ({\n        logicProps: [() => [(_, props) => props], (props): HogFunctionConfigurationLogicProps => props],\n        type: [\n            (s) => [s.configuration, s.hogFunction],\n            (configuration, hogFunction) => configuration?.type ?? hogFunction?.type ?? 'loading',\n        ],\n        hasAddon: [\n            (s) => [s.hasAvailableFeature],\n            (hasAvailableFeature) => {\n                return hasAvailableFeature(AvailableFeature.DATA_PIPELINES)\n            },\n        ],\n        hasGroupsAddon: [\n            (s) => [s.hasAvailableFeature],\n            (hasAvailableFeature) => {\n                return hasAvailableFeature(AvailableFeature.GROUP_ANALYTICS)\n            },\n        ],\n        showPaygate: [\n            (s) => [s.template, s.hasAddon],\n            (template, hasAddon) => {\n                return template && !template.free && !hasAddon\n            },\n        ],\n        useMapping: [\n            (s) => [s.hogFunction, s.template],\n            // If the function has mappings, or the template has mapping templates, we use mappings\n            (hogFunction, template) => Array.isArray(hogFunction?.mappings) || template?.mapping_templates?.length,\n        ],\n        defaultFormState: [\n            (s) => [s.template, s.hogFunction],\n            (template, hogFunction): HogFunctionConfigurationType | null => {\n                if (template) {\n                    return templateToConfiguration(template)\n                }\n                return hogFunction ?? null\n            },\n        ],\n\n        templateId: [\n            (s) => [s.template, s.hogFunction],\n            (template, hogFunction) => template?.id || hogFunction?.template?.id,\n        ],\n\n        loading: [\n            (s) => [s.hogFunctionLoading, s.templateLoading],\n            (hogFunctionLoading, templateLoading) => hogFunctionLoading || templateLoading,\n        ],\n        loaded: [(s) => [s.hogFunction, s.template], (hogFunction, template) => !!hogFunction || !!template],\n        inputFormErrors: [\n            (s) => [s.configuration],\n            (configuration) => {\n                const inputs = configuration.inputs ?? {}\n                const inputErrors: Record<string, string> = {}\n\n                configuration.inputs_schema?.forEach((input) => {\n                    const key = input.key\n                    const value = inputs[key]?.value\n                    if (inputs[key]?.secret) {\n                        // We leave unmodified secret values alone\n                        return\n                    }\n\n                    const missing = value === undefined || value === null || value === ''\n                    if (input.required && missing) {\n                        inputErrors[key] = 'This field is required'\n                    }\n\n                    if (input.type === 'json' && typeof value === 'string') {\n                        try {\n                            JSON.parse(value)\n                        } catch (e) {\n                            inputErrors[key] = 'Invalid JSON'\n                        }\n                    }\n\n                    if (input.type === 'email' && value) {\n                        const emailTemplateErrors: Partial<EmailTemplate> = {\n                            html: !value.html ? 'HTML is required' : undefined,\n                            subject: !value.subject ? 'Subject is required' : undefined,\n                            // text: !value.text ? 'Text is required' : undefined,\n                            from: !value.from ? 'From is required' : undefined,\n                            to: !value.to ? 'To is required' : undefined,\n                        }\n\n                        if (Object.values(emailTemplateErrors).some((v) => !!v)) {\n                            inputErrors[key] = { value: emailTemplateErrors } as any\n                        }\n                    }\n                })\n\n                return Object.keys(inputErrors).length > 0\n                    ? {\n                          inputs: inputErrors,\n                      }\n                    : null\n            },\n        ],\n        willReEnableOnSave: [\n            (s) => [s.configuration, s.hogFunction],\n            (configuration, hogFunction) => {\n                return configuration?.enabled && (hogFunction?.status?.state ?? 0) >= 3\n            },\n        ],\n\n        willChangeEnabledOnSave: [\n            (s) => [s.configuration, s.hogFunction],\n            (configuration, hogFunction) => {\n                return configuration?.enabled !== (hogFunction?.enabled ?? false)\n            },\n        ],\n        exampleInvocationGlobals: [\n            (s) => [s.configuration, s.currentProject, s.groupTypes],\n            (configuration, currentProject, groupTypes): HogFunctionInvocationGlobals => {\n                const currentUrl = window.location.href.split('#')[0]\n                const eventId = uuid()\n                const personId = uuid()\n                const globals: HogFunctionInvocationGlobals = {\n                    event: {\n                        uuid: eventId,\n                        distinct_id: uuid(),\n                        event: '$pageview',\n                        timestamp: dayjs().toISOString(),\n                        elements_chain: '',\n                        properties: {\n                            $current_url: currentUrl,\n                            $browser: 'Chrome',\n                        },\n                        url: `${window.location.origin}/project/${currentProject?.id}/events/`,\n                    },\n                    person: {\n                        id: personId,\n                        properties: {\n                            email: 'example@posthog.com',\n                        },\n                        name: 'Example person',\n                        url: `${window.location.origin}/person/${personId}`,\n                    },\n                    groups: {},\n                    project: {\n                        id: currentProject?.id || 0,\n                        name: currentProject?.name || '',\n                        url: `${window.location.origin}/project/${currentProject?.id}`,\n                    },\n                    source: {\n                        name: configuration?.name ?? 'Unnamed',\n                        url: currentUrl,\n                    },\n                }\n                groupTypes.forEach((groupType) => {\n                    const id = uuid()\n                    globals.groups![groupType.group_type] = {\n                        id: id,\n                        type: groupType.group_type,\n                        index: groupType.group_type_index,\n                        url: `${window.location.origin}/groups/${groupType.group_type_index}/${encodeURIComponent(id)}`,\n                        properties: {},\n                    }\n                })\n\n                return globals\n            },\n        ],\n        globalsWithInputs: [\n            (s) => [s.sampleGlobals, s.exampleInvocationGlobals, s.configuration],\n            (\n                sampleGlobals,\n                exampleInvocationGlobals,\n                configuration\n            ): HogFunctionInvocationGlobals & { inputs?: Record<string, any> } => {\n                const inputs: Record<string, any> = {}\n                for (const input of configuration?.inputs_schema || []) {\n                    inputs[input.key] = input.type\n                }\n\n                return {\n                    ...(sampleGlobals ?? exampleInvocationGlobals),\n                    inputs,\n                }\n            },\n        ],\n        matchingFilters: [\n            (s) => [s.configuration, s.useMapping],\n            (configuration, useMapping): PropertyGroupFilter => {\n                // We're using mappings, but none are provided, so match zero events.\n                if (useMapping && !configuration.mappings?.length) {\n                    return {\n                        type: FilterLogicalOperator.And,\n                        values: [\n                            {\n                                type: FilterLogicalOperator.And,\n                                values: [\n                                    {\n                                        type: PropertyFilterType.HogQL,\n                                        key: 'false',\n                                    },\n                                ],\n                            },\n                        ],\n                    }\n                }\n\n                const seriesProperties: PropertyGroupFilterValue = {\n                    type: FilterLogicalOperator.Or,\n                    values: [],\n                }\n                const properties: PropertyGroupFilter = {\n                    type: FilterLogicalOperator.And,\n                    values: [seriesProperties],\n                }\n                const allPossibleEventFilters = configuration.filters?.events ?? []\n                const allPossibleActionFilters = configuration.filters?.actions ?? []\n\n                if (Array.isArray(configuration.mappings)) {\n                    for (const mapping of configuration.mappings) {\n                        if (mapping.filters?.events) {\n                            allPossibleEventFilters.push(...mapping.filters.events)\n                        }\n                        if (mapping.filters?.actions) {\n                            allPossibleActionFilters.push(...mapping.filters.actions)\n                        }\n                    }\n                }\n\n                for (const event of allPossibleEventFilters) {\n                    const eventProperties: AnyPropertyFilter[] = [...(event.properties ?? [])]\n                    if (event.id) {\n                        eventProperties.push({\n                            type: PropertyFilterType.HogQL,\n                            key: hogql`event = ${event.id}`,\n                        })\n                    }\n                    if (eventProperties.length === 0) {\n                        eventProperties.push({\n                            type: PropertyFilterType.HogQL,\n                            key: 'true',\n                        })\n                    }\n                    seriesProperties.values.push({\n                        type: FilterLogicalOperator.And,\n                        values: eventProperties,\n                    })\n                }\n                for (const action of allPossibleActionFilters) {\n                    const actionProperties: AnyPropertyFilter[] = [...(action.properties ?? [])]\n                    if (action.id) {\n                        actionProperties.push({\n                            type: PropertyFilterType.HogQL,\n                            key: hogql`matchesAction(${parseInt(action.id)})`,\n                        })\n                    }\n                    seriesProperties.values.push({\n                        type: FilterLogicalOperator.And,\n                        values: actionProperties,\n                    })\n                }\n                if ((configuration.filters?.properties?.length ?? 0) > 0) {\n                    const globalProperties: PropertyGroupFilterValue = {\n                        type: FilterLogicalOperator.And,\n                        values: [],\n                    }\n                    for (const property of configuration.filters?.properties ?? []) {\n                        globalProperties.values.push(property as AnyPropertyFilter)\n                    }\n                    properties.values.push(globalProperties)\n                }\n                return properties\n            },\n            { resultEqualityCheck: equal },\n        ],\n\n        sparklineQuery: [\n            (s) => [s.configuration, s.matchingFilters, s.type],\n            (configuration, matchingFilters, type): TrendsQuery | null => {\n                if (type !== 'destination' && type !== 'site_destination') {\n                    return null\n                }\n                return {\n                    kind: NodeKind.TrendsQuery,\n                    filterTestAccounts: configuration.filters?.filter_test_accounts,\n                    series: [\n                        {\n                            kind: NodeKind.EventsNode,\n                            event: null,\n                            name: 'All Events',\n                            math: BaseMathType.TotalCount,\n                        } satisfies EventsNode,\n                    ],\n                    properties: matchingFilters,\n                    interval: 'day',\n                    dateRange: {\n                        date_from: '-7d',\n                    },\n                    trendsFilter: {\n                        display: ChartDisplayType.ActionsBar,\n                    },\n                }\n            },\n            { resultEqualityCheck: equal },\n        ],\n\n        personsCountQuery: [\n            (s) => [s.configuration, s.type],\n            (configuration, type): ActorsQuery | null => {\n                if (type !== 'broadcast') {\n                    return null\n                }\n                return {\n                    kind: NodeKind.ActorsQuery,\n                    properties: configuration.filters?.properties as AnyPersonScopeFilter[] | undefined,\n                    select: ['count()'],\n                }\n            },\n            { resultEqualityCheck: equal },\n        ],\n\n        personsListQuery: [\n            (s) => [s.configuration, s.type],\n            (configuration, type): DataTableNode | null => {\n                if (type !== 'broadcast') {\n                    return null\n                }\n                return {\n                    kind: NodeKind.DataTableNode,\n                    source: {\n                        kind: NodeKind.ActorsQuery,\n                        properties: configuration.filters?.properties as AnyPersonScopeFilter[] | undefined,\n                        select: ['person', 'properties.email', 'created_at'],\n                    },\n                    full: true,\n                }\n            },\n            { resultEqualityCheck: equal },\n        ],\n\n        baseEventsQuery: [\n            (s) => [s.configuration, s.matchingFilters, s.groupTypes, s.type],\n            (configuration, matchingFilters, groupTypes, type): EventsQuery | null => {\n                if (!TYPES_WITH_GLOBALS.includes(type)) {\n                    return null\n                }\n                const query: EventsQuery = {\n                    kind: NodeKind.EventsQuery,\n                    filterTestAccounts: configuration.filters?.filter_test_accounts,\n                    fixedProperties: [matchingFilters],\n                    select: ['*', 'person'],\n                    after: '-7d',\n                    orderBy: ['timestamp DESC'],\n                }\n                groupTypes.forEach((groupType) => {\n                    const name = escapePropertyAsHogQlIdentifier(groupType.group_type)\n                    query.select.push(\n                        `tuple(${name}.created_at, ${name}.index, ${name}.key, ${name}.properties, ${name}.updated_at)`\n                    )\n                })\n                return query\n            },\n            { resultEqualityCheck: equal },\n        ],\n\n        eventsDataTableNode: [\n            (s) => [s.baseEventsQuery],\n            (baseEventsQuery): DataTableNode | null => {\n                return baseEventsQuery\n                    ? {\n                          kind: NodeKind.DataTableNode,\n                          source: {\n                              ...baseEventsQuery,\n                              select: defaultDataTableColumns(NodeKind.EventsQuery),\n                          },\n                      }\n                    : null\n            },\n        ],\n\n        lastEventQuery: [\n            (s) => [s.baseEventsQuery],\n            (baseEventsQuery): EventsQuery | null => {\n                return baseEventsQuery ? { ...baseEventsQuery, limit: 1 } : null\n            },\n            { resultEqualityCheck: equal },\n        ],\n        lastEventSecondQuery: [\n            (s) => [s.lastEventQuery],\n            (lastEventQuery): EventsQuery | null => (lastEventQuery ? { ...lastEventQuery, after: '-30d' } : null),\n        ],\n        templateHasChanged: [\n            (s) => [s.hogFunction, s.configuration],\n            (hogFunction, configuration) => {\n                return hogFunction?.template?.hog && hogFunction.template.hog !== configuration.hog\n            },\n        ],\n        mappingTemplates: [\n            (s) => [s.hogFunction, s.template],\n            (hogFunction, template) => template?.mapping_templates ?? hogFunction?.template?.mapping_templates ?? [],\n        ],\n\n        usesGroups: [\n            (s) => [s.configuration],\n            (configuration) => {\n                // NOTE: Bit hacky but works good enough...\n                const configStr = JSON.stringify(configuration)\n                return configStr.includes('groups.') || configStr.includes('{groups}')\n            },\n        ],\n    })),\n\n    listeners(({ actions, values, cache }) => ({\n        loadTemplateSuccess: () => actions.resetForm(),\n        loadHogFunctionSuccess: () => {\n            actions.resetForm()\n            actions.setBreadcrumbTitle(values.hogFunction?.name ?? 'Unnamed')\n        },\n        upsertHogFunctionSuccess: () => {\n            actions.resetForm()\n            actions.setBreadcrumbTitle(values.hogFunction?.name ?? 'Unnamed')\n        },\n\n        upsertHogFunctionFailure: ({ errorObject }) => {\n            const maybeValidationError = errorObject.data\n\n            if (maybeValidationError?.type === 'validation_error') {\n                setTimeout(() => {\n                    // TRICKY: We want to run on the next tick otherwise the errors don't show (possibly because of the async wait in the submit)\n                    if (maybeValidationError.attr.includes('inputs__')) {\n                        actions.setConfigurationManualErrors({\n                            inputs: {\n                                [maybeValidationError.attr.split('__')[1]]: maybeValidationError.detail,\n                            },\n                        })\n                    } else {\n                        actions.setConfigurationManualErrors({\n                            [maybeValidationError.attr]: maybeValidationError.detail,\n                        })\n                    }\n                }, 1)\n            } else {\n                console.error(errorObject)\n                lemonToast.error('Error submitting configuration')\n            }\n        },\n\n        resetForm: () => {\n            const baseConfig = values.defaultFormState\n            if (!baseConfig) {\n                return\n            }\n\n            const config: HogFunctionConfigurationType = {\n                ...baseConfig,\n                ...(cache.configFromUrl ?? {}),\n            }\n\n            if (values.template?.mapping_templates) {\n                config.mappings = [\n                    ...(config.mappings ?? []),\n                    ...values.template.mapping_templates\n                        .filter((t) => t.include_by_default)\n                        .map((template) => ({\n                            ...template,\n                            inputs: template.inputs_schema?.reduce((acc, input) => {\n                                acc[input.key] = { value: input.default }\n                                return acc\n                            }, {} as Record<string, HogFunctionInputType>),\n                        })),\n                ]\n            }\n            const paramsFromUrl = cache.paramsFromUrl ?? {}\n            const unsavedConfigurationToApply =\n                (values.unsavedConfiguration?.timestamp ?? 0) > Date.now() - UNSAVED_CONFIGURATION_TTL\n                    ? values.unsavedConfiguration?.configuration\n                    : null\n\n            actions.resetConfiguration(config)\n\n            if (unsavedConfigurationToApply) {\n                actions.setConfigurationValues(unsavedConfigurationToApply)\n            }\n\n            actions.setUnsavedConfiguration(null)\n\n            if (paramsFromUrl.integration_target && paramsFromUrl.integration_id) {\n                const inputs = values.configuration?.inputs ?? {}\n                inputs[paramsFromUrl.integration_target] = {\n                    value: paramsFromUrl.integration_id,\n                }\n\n                actions.setConfigurationValues({\n                    inputs,\n                })\n            }\n        },\n\n        duplicate: async () => {\n            if (values.hogFunction) {\n                const newConfig = {\n                    ...values.configuration,\n                    name: `${values.configuration.name} (copy)`,\n                }\n                const originalTemplate = values.hogFunction.template?.id ?? 'new'\n                router.actions.push(hogFunctionNewUrl(newConfig.type, originalTemplate), undefined, {\n                    configuration: newConfig,\n                })\n            }\n        },\n        duplicateFromTemplate: async () => {\n            if (values.hogFunction?.template) {\n                const newConfig = {\n                    ...values.hogFunction.template,\n                }\n                router.actions.push(hogFunctionNewUrl(newConfig.type, newConfig.id), undefined, {\n                    configuration: newConfig,\n                })\n            }\n        },\n        resetToTemplate: async () => {\n            const template = values.hogFunction?.template ?? values.template\n            if (template) {\n                const config = templateToConfiguration(template)\n\n                const inputs = config.inputs ?? {}\n\n                // Keep any non-default values\n                Object.entries(values.configuration.inputs ?? {}).forEach(([key, value]) => {\n                    inputs[key] = inputs[key] ?? value\n                })\n\n                actions.setConfigurationValues({\n                    ...config,\n                    filters: config.filters ?? values.configuration.filters,\n                    // Keep some existing things when manually resetting the template\n                    name: values.configuration.name,\n                    description: values.configuration.description,\n                })\n\n                lemonToast.success('Template updates applied but not saved.')\n            }\n        },\n        setConfigurationValue: () => {\n            if (values.hasHadSubmissionErrors) {\n                // Clear the manually set errors otherwise the submission won't work\n                actions.setConfigurationManualErrors({})\n            }\n        },\n\n        deleteHogFunction: async () => {\n            if (!values.hogFunction) {\n                return\n            }\n            const { id, name, type, template } = values.hogFunction\n            await deleteWithUndo({\n                endpoint: `projects/${values.currentProjectId}/hog_functions`,\n                object: {\n                    id,\n                    name,\n                },\n                callback(undo) {\n                    if (undo) {\n                        router.actions.replace(hogFunctionUrl(type, id, template?.id))\n                    }\n                },\n            })\n\n            router.actions.replace(hogFunctionUrl(type, undefined, template?.id))\n        },\n\n        persistForUnload: () => {\n            actions.setUnsavedConfiguration(values.configuration)\n        },\n    })),\n    afterMount(({ props, actions, cache }) => {\n        cache.paramsFromUrl = {\n            integration_id: router.values.searchParams.integration_id,\n            integration_target: router.values.searchParams.integration_target,\n        }\n\n        if (props.templateId) {\n            cache.configFromUrl = router.values.hashParams.configuration\n            actions.loadTemplate() // comes with plugin info\n        } else if (props.id && props.id !== 'new') {\n            actions.loadHogFunction()\n        }\n\n        if (router.values.searchParams.integration_target) {\n            const searchParams = router.values.searchParams\n            delete searchParams.integration_id\n            delete searchParams.integration_target\n            // Clear query params so we don't keep trying to set the integration\n            router.actions.replace(router.values.location.pathname, searchParams, router.values.hashParams)\n        }\n    }),\n\n    subscriptions(({ props, actions, cache }) => ({\n        hogFunction: (hogFunction) => {\n            if (hogFunction && props.templateId) {\n                // Catch all for any scenario where we need to redirect away from the template to the actual hog function\n\n                cache.disabledBeforeUnload = true\n                router.actions.replace(hogFunctionUrl(hogFunction.type, hogFunction.id, hogFunction.template.id))\n            }\n        },\n        sparklineQuery: async (sparklineQuery) => {\n            if (sparklineQuery) {\n                actions.sparklineQueryChanged(sparklineQuery)\n            }\n        },\n        personsCountQuery: async (personsCountQuery) => {\n            if (personsCountQuery) {\n                actions.personsCountQueryChanged(personsCountQuery)\n            }\n        },\n    })),\n\n    beforeUnload(({ values, cache }) => ({\n        enabled: () => !cache.disabledBeforeUnload && !values.unsavedConfiguration && values.configurationChanged,\n        message: 'Changes you made will be discarded.',\n        onConfirm: () => {\n            cache.disabledBeforeUnload = true\n        },\n    })),\n])\n", "import { LemonSelect } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\n\nimport { HogFunctionFiltersType } from '~/types'\n\nimport { hogFunctionConfigurationLogic, HogFunctionConfigurationLogicProps } from '../hogFunctionConfigurationLogic'\n\ntype FilterOption = { value: string; label: string }\n\n// NOTE: This is all a bit WIP and will be improved upon over time\n// TODO: Make this more advanced with sub type filtering etc.\n// TODO: Make it possible for the renderer to limit the options based on the type\nconst getFilterOptions = (logicKey?: HogFunctionConfigurationLogicProps['logicKey']): FilterOption[] => {\n    if (logicKey && logicKey === 'errorTracking') {\n        return [\n            {\n                label: 'Error tracking issue created',\n                value: '$error_tracking_issue_created',\n            },\n        ]\n    }\n    return [\n        {\n            label: 'Team activity',\n            value: '$activity_log_entry_created',\n        },\n    ]\n}\n\nconst getSimpleFilterValue = (value?: HogFunctionFiltersType): string | undefined => {\n    return value?.events?.[0]?.id\n}\n\nconst setSimpleFilterValue = (options: FilterOption[], value: string): HogFunctionFiltersType => {\n    return {\n        events: [\n            {\n                name: options.find((option) => option.value === value)?.label,\n                id: value,\n                type: 'events',\n            },\n        ],\n    }\n}\n\nexport function HogFunctionFiltersInternal(): JSX.Element {\n    const { logicProps } = useValues(hogFunctionConfigurationLogic)\n\n    const options = getFilterOptions(logicProps.logicKey)\n\n    return (\n        <div className=\"p-3 space-y-2 border rounded bg-surface-primary\">\n            <LemonField name=\"filters\" label=\"Trigger\" help=\"Choose what event should trigger this destination\">\n                {({ value, onChange }) => (\n                    <>\n                        <LemonSelect\n                            options={options}\n                            value={getSimpleFilterValue(value)}\n                            onChange={(value) => onChange(setSimpleFilterValue(options, value))}\n                            placeholder=\"Select a filter\"\n                        />\n                    </>\n                )}\n            </LemonField>\n        </div>\n    )\n}\n", "import { closestCenter, DndContext } from '@dnd-kit/core'\nimport { arrayMove, SortableContext, useSortable, verticalListSortingStrategy } from '@dnd-kit/sortable'\nimport { CSS } from '@dnd-kit/utilities'\nimport { IconGear, IconInfo, IconLock, IconPlus, IconTrash, IconX } from '@posthog/icons'\nimport {\n    LemonButton,\n    LemonCheckbox,\n    LemonInput,\n    LemonInputSelect,\n    LemonLabel,\n    LemonSelect,\n    LemonSwitch,\n    LemonTag,\n    LemonTextArea,\n    Tooltip,\n} from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { CodeEditorInline, CodeEditorInlineProps } from 'lib/monaco/CodeEditorInline'\nimport { CodeEditorResizeable } from 'lib/monaco/CodeEditorResizable'\nimport { capitalizeFirstLetter } from 'lib/utils'\nimport { useEffect, useState } from 'react'\n\nimport {\n    HogFunctionConfigurationType,\n    HogFunctionInputSchemaType,\n    HogFunctionInputType,\n    HogFunctionMappingType,\n} from '~/types'\n\nimport { EmailTemplater } from './email-templater/EmailTemplater'\nimport { hogFunctionConfigurationLogic } from './hogFunctionConfigurationLogic'\nimport { HogFunctionInputIntegration } from './integrations/HogFunctionInputIntegration'\nimport { HogFunctionInputIntegrationField } from './integrations/HogFunctionInputIntegrationField'\n\nexport type HogFunctionInputProps = {\n    schema: HogFunctionInputSchemaType\n    value?: any\n    onChange?: (value: any) => void\n    disabled?: boolean\n}\n\nexport interface HogFunctionInputsProps {\n    configuration: HogFunctionConfigurationType | HogFunctionMappingType\n    setConfigurationValue: (key: string, value: any) => void\n}\n\nexport type HogFunctionInputWithSchemaProps = {\n    configuration: HogFunctionConfigurationType | HogFunctionMappingType\n    setConfigurationValue: (key: string, value: any) => void\n    schema: HogFunctionInputSchemaType\n}\n\nconst typeList = ['string', 'boolean', 'dictionary', 'choice', 'json', 'integration', 'email'] as const\n\nfunction JsonConfigField(props: {\n    onChange?: (value: string) => void\n    className?: string\n    autoFocus?: boolean\n    value?: string\n    templating?: boolean\n}): JSX.Element {\n    const { globalsWithInputs } = useValues(hogFunctionConfigurationLogic)\n    return (\n        <CodeEditorResizeable\n            language={props.templating ? 'hogJson' : 'json'}\n            value={typeof props.value !== 'string' ? JSON.stringify(props.value, null, 2) : props.value}\n            onChange={(v) => props.onChange?.(v ?? '')}\n            options={{\n                lineNumbers: 'off',\n                minimap: {\n                    enabled: false,\n                },\n                scrollbar: {\n                    vertical: 'hidden',\n                    verticalScrollbarSize: 0,\n                },\n            }}\n            globals={props.templating ? globalsWithInputs : undefined}\n        />\n    )\n}\n\nfunction EmailTemplateField({ schema }: { schema: HogFunctionInputSchemaType }): JSX.Element {\n    const { globalsWithInputs, logicProps } = useValues(hogFunctionConfigurationLogic)\n\n    return (\n        <>\n            <EmailTemplater\n                formLogic={hogFunctionConfigurationLogic}\n                formLogicProps={logicProps}\n                formKey=\"configuration\"\n                formFieldsPrefix={`inputs.${schema.key}.value`}\n                globals={globalsWithInputs}\n            />\n        </>\n    )\n}\n\nfunction HogFunctionTemplateInput(\n    props: Omit<CodeEditorInlineProps, 'globals'> & {\n        templating: boolean\n        onChange?: (value: string) => void\n        value?: string\n    }\n): JSX.Element {\n    const { globalsWithInputs } = useValues(hogFunctionConfigurationLogic)\n\n    if (!props.templating) {\n        return <LemonInput type=\"text\" value={props.value} onChange={props.onChange} />\n    }\n\n    return <CodeEditorInline {...props} globals={globalsWithInputs} />\n}\n\nfunction DictionaryField({\n    onChange,\n    value,\n    templating,\n}: {\n    onChange?: (value: any) => void\n    value: any\n    templating: boolean\n}): JSX.Element {\n    const [entries, setEntries] = useState<[string, string][]>(Object.entries(value ?? {}))\n\n    useEffect(() => {\n        // NOTE: Filter out all empty entries as fetch will throw if passed in\n        const val = Object.fromEntries(entries.filter(([key, val]) => key.trim() !== '' || val.trim() !== ''))\n        onChange?.(val)\n    }, [entries])\n\n    return (\n        <div className=\"space-y-2\">\n            {entries.map(([key, val], index) => (\n                <div className=\"flex items-center gap-2\" key={index}>\n                    <LemonInput\n                        value={key}\n                        className=\"flex-1 min-w-60\"\n                        onChange={(key) => {\n                            const newEntries = [...entries]\n                            newEntries[index] = [key, newEntries[index][1]]\n                            setEntries(newEntries)\n                        }}\n                        placeholder=\"Key\"\n                    />\n\n                    <HogFunctionTemplateInput\n                        className=\"overflow-hidden flex-2\"\n                        value={val}\n                        language=\"hogTemplate\"\n                        onChange={(val) => {\n                            const newEntries = [...entries]\n                            newEntries[index] = [newEntries[index][0], val ?? '']\n                            setEntries(newEntries)\n                        }}\n                        templating={templating}\n                    />\n\n                    <LemonButton\n                        icon={<IconX />}\n                        size=\"small\"\n                        onClick={() => {\n                            const newEntries = [...entries]\n                            newEntries.splice(index, 1)\n                            setEntries(newEntries)\n                        }}\n                    />\n                </div>\n            ))}\n            <LemonButton\n                icon={<IconPlus />}\n                size=\"small\"\n                type=\"secondary\"\n                onClick={() => {\n                    setEntries([...entries, ['', '']])\n                }}\n            >\n                Add entry\n            </LemonButton>\n        </div>\n    )\n}\n\nexport function HogFunctionInputRenderer({ value, onChange, schema, disabled }: HogFunctionInputProps): JSX.Element {\n    const templating = schema.templating ?? true\n    switch (schema.type) {\n        case 'string':\n            return (\n                <HogFunctionTemplateInput\n                    language=\"hogTemplate\"\n                    value={value}\n                    onChange={disabled ? () => {} : onChange}\n                    className=\"ph-no-capture\"\n                    templating={templating}\n                />\n            )\n        case 'json':\n            return (\n                <JsonConfigField value={value} onChange={onChange} className=\"ph-no-capture\" templating={templating} />\n            )\n        case 'choice':\n            return (\n                <LemonSelect\n                    fullWidth\n                    value={value}\n                    className=\"ph-no-capture\"\n                    onChange={onChange}\n                    options={schema.choices ?? []}\n                    disabled={disabled}\n                />\n            )\n        case 'dictionary':\n            return <DictionaryField value={value} onChange={onChange} templating={templating} />\n        case 'boolean':\n            return <LemonSwitch checked={value} onChange={(checked) => onChange?.(checked)} disabled={disabled} />\n        case 'integration':\n            return <HogFunctionInputIntegration schema={schema} value={value} onChange={onChange} />\n        case 'integration_field':\n            return <HogFunctionInputIntegrationField schema={schema} value={value} onChange={onChange} />\n        case 'email':\n            return <EmailTemplateField schema={schema} />\n        default:\n            return (\n                <strong className=\"text-danger\">\n                    Unknown field type \"<code>{schema.type}</code>\".\n                </strong>\n            )\n    }\n}\n\ntype HogFunctionInputSchemaControlsProps = {\n    value: HogFunctionInputSchemaType\n    onChange: (value: HogFunctionInputSchemaType | null) => void\n    onDone: () => void\n    supportsSecrets: boolean\n}\n\nfunction HogFunctionInputSchemaControls({\n    value,\n    onChange,\n    onDone,\n    supportsSecrets,\n}: HogFunctionInputSchemaControlsProps): JSX.Element {\n    const _onChange = (data: Partial<HogFunctionInputSchemaType> | null): void => {\n        if (data?.key?.length === 0) {\n            setLocalVariableError('Input variable name cannot be empty')\n            return\n        }\n        onChange(data ? { ...value, ...data } : null)\n    }\n\n    const [localVariableValue, setLocalVariableValue] = useState(value.key)\n    const [localVariableError, setLocalVariableError] = useState<string | null>(null)\n\n    return (\n        <div className=\"flex flex-col gap-2\">\n            <div className=\"flex flex-wrap items-center flex-1 gap-2\">\n                <LemonSelect\n                    size=\"small\"\n                    options={typeList.map((type) => ({\n                        label: capitalizeFirstLetter(type),\n                        value: type,\n                    }))}\n                    value={value.type}\n                    className=\"w-30\"\n                    onChange={(type) => _onChange({ type })}\n                />\n                <LemonCheckbox\n                    size=\"small\"\n                    checked={value.required}\n                    onChange={(required) => _onChange({ required })}\n                    label=\"Required\"\n                    bordered\n                />\n                {supportsSecrets ? (\n                    <LemonCheckbox\n                        size=\"small\"\n                        checked={value.secret}\n                        onChange={(secret) => _onChange({ secret })}\n                        label=\"Secret\"\n                        bordered\n                    />\n                ) : null}\n                <div className=\"flex-1\" />\n                <LemonButton status=\"danger\" icon={<IconTrash />} size=\"small\" onClick={() => onChange(null)} />\n                <LemonButton type=\"secondary\" size=\"small\" onClick={() => onDone()}>\n                    Done\n                </LemonButton>\n            </div>\n            <div className=\"flex flex-wrap flex-1 gap-2\">\n                <LemonField.Pure label=\"Display label\">\n                    <LemonInput\n                        className=\"min-w-60\"\n                        size=\"small\"\n                        value={value.label}\n                        onChange={(label) => _onChange({ label })}\n                        placeholder=\"Display label\"\n                    />\n                </LemonField.Pure>\n                <LemonField.Pure label=\"Input variable name\" error={localVariableError}>\n                    <LemonInput\n                        size=\"small\"\n                        value={localVariableValue}\n                        // Special case - the component is keyed by this so the whole thing will re-mount on changes\n                        // so we defer the change to blur\n                        onChange={(key) => setLocalVariableValue(key)}\n                        onBlur={() => _onChange({ key: localVariableValue })}\n                        placeholder=\"Variable name\"\n                    />\n                </LemonField.Pure>\n            </div>\n\n            <LemonField.Pure label=\"Description\">\n                <LemonTextArea\n                    minRows={1}\n                    value={value.description}\n                    onChange={(description) => _onChange({ description })}\n                    placeholder=\"Description\"\n                />\n            </LemonField.Pure>\n            {value.type === 'choice' && (\n                <LemonField.Pure label=\"Choices\">\n                    <LemonInputSelect\n                        mode=\"multiple\"\n                        allowCustomValues\n                        value={value.choices?.map((choice) => choice.value)}\n                        onChange={(choices) =>\n                            _onChange({ choices: choices.map((value) => ({ label: value, value })) })\n                        }\n                        placeholder=\"Choices\"\n                    />\n                </LemonField.Pure>\n            )}\n\n            {value.type === 'integration' && (\n                <LemonField.Pure label=\"Integration kind\">\n                    <LemonSelect\n                        value={value.integration}\n                        onChange={(integration) => _onChange({ integration })}\n                        options={[\n                            { label: 'Slack', value: 'slack' },\n                            { label: 'Salesforce', value: 'salesforce' },\n                            { label: 'Hubspot', value: 'hubspot' },\n                        ]}\n                        placeholder=\"Choose kind\"\n                    />\n                </LemonField.Pure>\n            )}\n\n            <LemonField.Pure label=\"Default value\">\n                <HogFunctionInputRenderer\n                    schema={value}\n                    value={value.default}\n                    onChange={(val) => _onChange({ default: val })}\n                />\n            </LemonField.Pure>\n        </div>\n    )\n}\n\nexport function HogFunctionInputWithSchema({\n    schema,\n    configuration,\n    setConfigurationValue,\n}: HogFunctionInputWithSchemaProps): JSX.Element {\n    const { attributes, listeners, setNodeRef, transform, transition } = useSortable({ id: schema.key })\n    const { showSource } = useValues(hogFunctionConfigurationLogic)\n    const [editing, setEditing] = useState(false)\n\n    const value = configuration.inputs?.[schema.key]\n\n    const onSchemaChange = (newSchema: HogFunctionInputSchemaType | null): void => {\n        let inputsSchema = configuration.inputs_schema || []\n        if (!newSchema) {\n            inputsSchema = inputsSchema.filter((s) => s.key !== schema.key)\n        } else {\n            const modifiedSchema = { ...schema, ...newSchema }\n            inputsSchema = inputsSchema.map((s) => (s.key === schema.key ? modifiedSchema : s))\n        }\n\n        if (newSchema?.key) {\n            setConfigurationValue(`inputs.${newSchema.key}`, value)\n        }\n\n        if (newSchema?.type && newSchema.type !== schema.type) {\n            setConfigurationValue(`inputs.${schema.key}`, null)\n        }\n\n        setConfigurationValue('inputs_schema', inputsSchema)\n    }\n\n    useEffect(() => {\n        if (!showSource) {\n            setEditing(false)\n        }\n    }, [showSource])\n\n    const supportsTemplating =\n        ['string', 'json', 'dictionary', 'email'].includes(schema.type) && schema.templating !== false\n    const supportsSecrets = 'type' in configuration // no secrets for mapping inputs\n\n    return (\n        <div\n            className=\"group\"\n            ref={setNodeRef}\n            // eslint-disable-next-line react/forbid-dom-props\n            style={{\n                transform: CSS.Transform.toString(transform),\n                transition,\n            }}\n        >\n            {!editing ? (\n                <LemonField name={`inputs.${schema.key}`} help={schema.description}>\n                    {({\n                        value,\n                        onChange,\n                    }: {\n                        value?: HogFunctionInputType\n                        onChange: (val: HogFunctionInputType) => void\n                    }) => {\n                        return (\n                            <>\n                                <div className=\"flex items-center gap-2\">\n                                    <LemonLabel\n                                        className={showSource ? 'cursor-grab' : ''}\n                                        showOptional={!schema.required}\n                                        {...attributes}\n                                        {...listeners}\n                                    >\n                                        {schema.label || schema.key}\n                                        {schema.secret ? (\n                                            <Tooltip title=\"This input is marked as secret. It will be encrypted and not visible after saving.\">\n                                                <IconLock />\n                                            </Tooltip>\n                                        ) : undefined}\n                                    </LemonLabel>\n                                    {showSource && (\n                                        <LemonTag type=\"muted\" className=\"font-mono\">\n                                            inputs.{schema.key}\n                                        </LemonTag>\n                                    )}\n                                    <div className=\"flex-1\" />\n\n                                    {supportsTemplating && (\n                                        <LemonButton\n                                            size=\"xsmall\"\n                                            to=\"https://posthog.com/docs/cdp/destinations/customizing-destinations#customizing-payload\"\n                                            sideIcon={<IconInfo />}\n                                            noPadding\n                                            className=\"p-1 transition-opacity opacity-0 group-hover:opacity-100\"\n                                        >\n                                            Supports templating\n                                        </LemonButton>\n                                    )}\n                                    {showSource && (\n                                        <LemonButton\n                                            size=\"small\"\n                                            noPadding\n                                            icon={<IconGear />}\n                                            onClick={() => setEditing(true)}\n                                        />\n                                    )}\n                                </div>\n                                {value?.secret ? (\n                                    <div className=\"flex items-center gap-2 p-1 border border-dashed rounded\">\n                                        <span className=\"flex-1 p-1 italic text-secondary\">\n                                            This value is secret and is not displayed here.\n                                        </span>\n                                        <LemonButton\n                                            onClick={() => {\n                                                onChange({ value: undefined })\n                                            }}\n                                            size=\"small\"\n                                            type=\"secondary\"\n                                        >\n                                            Edit\n                                        </LemonButton>\n                                    </div>\n                                ) : (\n                                    <HogFunctionInputRenderer\n                                        schema={schema}\n                                        value={value?.value}\n                                        onChange={(val) => onChange({ value: val })}\n                                    />\n                                )}\n                            </>\n                        )\n                    }}\n                </LemonField>\n            ) : (\n                <div className=\"p-2 space-y-4 border border-dashed rounded\">\n                    <HogFunctionInputSchemaControls\n                        value={schema}\n                        onChange={onSchemaChange}\n                        onDone={() => setEditing(false)}\n                        supportsSecrets={supportsSecrets}\n                    />\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport function HogFunctionInputs({\n    configuration,\n    setConfigurationValue,\n}: HogFunctionInputsProps): JSX.Element | null {\n    const { showSource } = useValues(hogFunctionConfigurationLogic)\n\n    if (!configuration?.inputs_schema?.length) {\n        if (!('type' in configuration)) {\n            // If this is a mapping, don't show any error message.\n            return null\n        }\n        return <span className=\"italic text-secondary\">This function does not require any input variables.</span>\n    }\n\n    const inputSchemas = configuration.inputs_schema\n    const inputSchemaIds = inputSchemas.map((schema) => schema.key)\n\n    return (\n        <>\n            <DndContext\n                collisionDetection={closestCenter}\n                onDragEnd={({ active, over }) => {\n                    if (over && active.id !== over.id) {\n                        const oldIndex = inputSchemaIds.indexOf(active.id as string)\n                        const newIndex = inputSchemaIds.indexOf(over.id as string)\n\n                        setConfigurationValue('inputs_schema', arrayMove(inputSchemas, oldIndex, newIndex))\n                    }\n                }}\n            >\n                <SortableContext disabled={!showSource} items={inputSchemaIds} strategy={verticalListSortingStrategy}>\n                    {configuration.inputs_schema\n                        ?.filter((i) => !i.hidden)\n                        .map((schema) => {\n                            return (\n                                <HogFunctionInputWithSchema\n                                    key={schema.key}\n                                    schema={schema}\n                                    configuration={configuration}\n                                    setConfigurationValue={setConfigurationValue}\n                                />\n                            )\n                        })}\n                </SortableContext>\n            </DndContext>\n        </>\n    )\n}\n", "import { LemonButton, LemonLabel, LemonModal } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { CodeEditorInline } from 'lib/monaco/CodeEditorInline'\nimport { capitalizeFirstLetter } from 'lib/utils'\nimport EmailEditor from 'react-email-editor'\n\nimport { emailTemplaterLogic, EmailTemplaterLogicProps } from './emailTemplaterLogic'\n\nfunction EmailTemplaterForm({\n    mode,\n    ...props\n}: EmailTemplaterLogicProps & {\n    mode: 'full' | 'preview'\n}): JSX.Element {\n    const { setEmailEditorRef, emailEditorReady, setIsModalOpen } = useActions(emailTemplaterLogic(props))\n\n    return (\n        <Form\n            className=\"flex flex-col border rounded overflow-hidden flex-1\"\n            logic={props.formLogic}\n            props={props.formLogicProps}\n            formKey={props.formKey}\n        >\n            {['from', 'to', 'subject'].map((field) => (\n                <LemonField\n                    key={field}\n                    name={`${props.formFieldsPrefix ? props.formFieldsPrefix + '.' : ''}${field}`}\n                    className=\"border-b shrink-0 gap-1 pl-2\"\n                    // We will handle the error display ourselves\n                    renderError={() => null}\n                >\n                    {({ value, onChange, error }) => (\n                        <div className=\"flex items-center\">\n                            <LemonLabel className={error ? 'text-danger' : ''}>\n                                {capitalizeFirstLetter(field)}\n                            </LemonLabel>\n                            <CodeEditorInline\n                                embedded\n                                className=\"flex-1\"\n                                globals={props.globals}\n                                value={value}\n                                onChange={onChange}\n                            />\n                        </div>\n                    )}\n                </LemonField>\n            ))}\n\n            {mode === 'full' ? (\n                <EmailEditor ref={(r) => setEmailEditorRef(r)} onReady={() => emailEditorReady()} />\n            ) : (\n                <LemonField\n                    name={`${props.formFieldsPrefix ? props.formFieldsPrefix + '.' : ''}html`}\n                    className=\"relative flex flex-col\"\n                >\n                    {({ value }) => (\n                        <>\n                            <div className=\"absolute inset-0 p-2 flex items-end justify-center transition-opacity opacity-0 hover:opacity-100\">\n                                <div className=\"opacity-50 bg-surface-primary absolute inset-0\" />\n                                <LemonButton type=\"primary\" size=\"small\" onClick={() => setIsModalOpen(true)}>\n                                    Click to modify content\n                                </LemonButton>\n                            </div>\n\n                            <iframe srcDoc={value} className=\"flex-1\" />\n                        </>\n                    )}\n                </LemonField>\n            )}\n        </Form>\n    )\n}\n\nexport function EmailTemplaterModal({ ...props }: EmailTemplaterLogicProps): JSX.Element {\n    const { isModalOpen } = useValues(emailTemplaterLogic(props))\n    const { setIsModalOpen, onSave } = useActions(emailTemplaterLogic(props))\n\n    return (\n        <LemonModal isOpen={isModalOpen} width=\"90vw\" onClose={() => setIsModalOpen(false)}>\n            <div className=\"h-[80vh] flex\">\n                <div className=\"flex flex-col flex-1\">\n                    <div className=\"shrink-0\">\n                        <h2>Editing email template</h2>\n                    </div>\n                    <EmailTemplaterForm {...props} mode=\"full\" />\n                    <div className=\"flex items-center mt-2 gap-2\">\n                        <div className=\"flex-1\" />\n                        <LemonButton onClick={() => setIsModalOpen(false)}>Cancel</LemonButton>\n                        <LemonButton type=\"primary\" onClick={() => onSave()}>\n                            Save\n                        </LemonButton>\n                    </div>\n                </div>\n            </div>\n        </LemonModal>\n    )\n}\n\nexport function EmailTemplater(props: EmailTemplaterLogicProps): JSX.Element {\n    return (\n        <div className=\"flex flex-col flex-1\">\n            <EmailTemplaterForm {...props} mode=\"preview\" />\n            <EmailTemplaterModal {...props} />\n        </div>\n    )\n}\n", "import { actions, connect, kea, listeners, LogicWrapper, path, props, reducers } from 'kea'\nimport { capitalizeFirstLetter } from 'lib/utils'\nimport { EditorRef as _EditorRef } from 'react-email-editor'\n\nimport type { emailTemplaterLogicType } from './emailTemplaterLogicType'\n\n// Helping kea-typegen navigate the exported type\nexport interface EditorRef extends _EditorRef {}\n\nexport type EmailTemplate = {\n    design: any\n    html: string\n    subject: string\n    text: string\n    from: string\n    to: string\n}\n\nexport interface EmailTemplaterLogicProps {\n    formLogic: LogicWrapper\n    formLogicProps: any\n    formKey: string\n    formFieldsPrefix?: string\n    globals?: Record<string, any>\n}\n\nexport const emailTemplaterLogic = kea<emailTemplaterLogicType>([\n    props({} as EmailTemplaterLogicProps),\n    connect({\n        // values: [teamLogic, ['currentTeam'], groupsModel, ['groupTypes'], userLogic, ['hasAvailableFeature']],\n    }),\n    path(() => ['scenes', 'pipeline', 'hogfunctions', 'emailTemplaterLogic']),\n    actions({\n        onSave: true,\n        setEmailEditorRef: (emailEditorRef: EditorRef | null) => ({ emailEditorRef }),\n        emailEditorReady: true,\n        setIsModalOpen: (isModalOpen: boolean) => ({ isModalOpen }),\n    }),\n    reducers({\n        emailEditorRef: [\n            null as EditorRef | null,\n            {\n                setEmailEditorRef: (_, { emailEditorRef }) => emailEditorRef,\n            },\n        ],\n        isModalOpen: [\n            false,\n            {\n                setIsModalOpen: (_, { isModalOpen }) => isModalOpen,\n            },\n        ],\n    }),\n\n    listeners(({ props, values, actions }) => ({\n        onSave: async () => {\n            const editor = values.emailEditorRef?.editor\n            if (!editor) {\n                return\n            }\n            const data = await new Promise<any>((res) => editor.exportHtml(res))\n\n            // TRICKY: We have to build the action we need in order to nicely callback to the form field\n            const setFormValue = props.formLogic.findMounted(props.formLogicProps)?.actions?.[\n                `set${capitalizeFirstLetter(props.formKey)}Value`\n            ]\n\n            const pathParts = props.formFieldsPrefix ? props.formFieldsPrefix.split('.') : []\n\n            setFormValue(pathParts.concat('design'), data.design)\n            setFormValue(pathParts.concat('html'), escapeHTMLStringCurlies(data.html))\n\n            // Load the logic and set the property...\n            actions.setIsModalOpen(false)\n        },\n\n        emailEditorReady: () => {\n            const pathParts = (props.formFieldsPrefix ? props.formFieldsPrefix.split('.') : []).concat('design')\n\n            let value = props.formLogic.findMounted(props.formLogicProps)?.values?.[props.formKey]\n\n            // Get the value from the form and set it in the editor\n            while (pathParts.length && value) {\n                value = value[pathParts.shift()!]\n            }\n\n            if (value) {\n                values.emailEditorRef?.editor?.loadDesign(value)\n            }\n        },\n    })),\n])\n\nfunction escapeHTMLStringCurlies(htmlString: string): string {\n    const parser = new DOMParser()\n    const doc = parser.parseFromString(htmlString, 'text/html')\n\n    function escapeCurlyBraces(text: string): string {\n        return text.replace(/{/g, '\\\\{')\n    }\n\n    function processNode(node: Node): void {\n        if (node.nodeType === Node.ELEMENT_NODE) {\n            const element = node as HTMLElement\n            if (element.tagName === 'STYLE' || element.tagName === 'SCRIPT') {\n                element.textContent = escapeCurlyBraces(element.textContent || '')\n            } else {\n                Array.from(node.childNodes).forEach(processNode)\n            }\n        } else if (node.nodeType === Node.COMMENT_NODE) {\n            const commentContent = (node as Comment).nodeValue || ''\n            ;(node as Comment).nodeValue = escapeCurlyBraces(commentContent)\n        }\n    }\n\n    processNode(doc.head)\n    processNode(doc.body)\n\n    const serializer = new XMLSerializer()\n    return serializer.serializeToString(doc)\n}\n", "import { useActions } from 'kea'\n\nimport { HogFunctionInputSchemaType } from '~/types'\n\nimport { hogFunctionConfigurationLogic } from '../hogFunctionConfigurationLogic'\nimport { IntegrationChoice, IntegrationConfigureProps } from './IntegrationChoice'\n\nexport type HogFunctionInputIntegrationProps = IntegrationConfigureProps & {\n    schema: HogFunctionInputSchemaType\n}\n\nexport function HogFunctionInputIntegration({ schema, ...props }: HogFunctionInputIntegrationProps): JSX.Element {\n    const { persistForUnload } = useActions(hogFunctionConfigurationLogic)\n    return (\n        <>\n            <IntegrationChoice\n                {...props}\n                schema={schema}\n                integration={schema.integration}\n                redirectUrl={`${window.location.pathname}?integration_target=${schema.key}`}\n                beforeRedirect={() => persistForUnload()}\n            />\n        </>\n    )\n}\n", "import { LemonSkeleton } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport {\n    GoogleAdsConversionActionPicker,\n    GoogleAdsCustomerIdPicker,\n} from 'lib/integrations/GoogleAdsIntegrationHelpers'\nimport { integrationsLogic } from 'lib/integrations/integrationsLogic'\nimport {\n    LinkedInAdsAccountIdPicker,\n    LinkedInAdsConversionRulePicker,\n} from 'lib/integrations/LinkedInIntegrationHelpers'\nimport { SlackChannelPicker } from 'lib/integrations/SlackIntegrationHelpers'\n\nimport { HogFunctionInputSchemaType } from '~/types'\n\nimport { hogFunctionConfigurationLogic } from '../hogFunctionConfigurationLogic'\n\nexport type HogFunctionInputIntegrationFieldProps = {\n    schema: HogFunctionInputSchemaType\n    value?: any\n    onChange?: (value: any) => void\n}\n\nexport function HogFunctionInputIntegrationField({\n    schema,\n    value,\n    onChange,\n}: HogFunctionInputIntegrationFieldProps): JSX.Element {\n    const { configuration } = useValues(hogFunctionConfigurationLogic)\n    const { integrationsLoading, integrations } = useValues(integrationsLogic)\n\n    if (integrationsLoading) {\n        return <LemonSkeleton className=\"h-10\" />\n    }\n\n    const relatedSchemaIntegration = configuration.inputs_schema?.find((input) => input.key === schema.integration_key)\n\n    if (!relatedSchemaIntegration) {\n        return (\n            <div className=\"text-danger\">\n                Bad configuration: integration key {schema.integration_key} not found in schema\n            </div>\n        )\n    }\n\n    const integrationId = configuration.inputs?.[relatedSchemaIntegration.key]?.value\n    const integration = integrations?.find((integration) => integration.id === integrationId)\n    let requiresFieldValue: string | undefined\n\n    if (schema.requires_field) {\n        const requiresFieldSchema = configuration.inputs_schema?.find((input) => input.key === schema.requires_field)\n\n        if (!requiresFieldSchema) {\n            return (\n                <div className=\"text-danger\">\n                    Bad configuration: required key {schema.requires_field} not found in schema\n                </div>\n            )\n        }\n\n        const requiresField = configuration.inputs?.[requiresFieldSchema.key]\n        requiresFieldValue = requiresField?.value\n        if (!requiresFieldValue) {\n            return (\n                <div className=\"border border-dashed h-10 rounded p-2 text-secondary italic\">\n                    Configure {requiresFieldSchema.label} to continue\n                </div>\n            )\n        }\n    }\n    if (!integration) {\n        return (\n            <div className=\"border border-dashed h-10 rounded p-2 text-secondary italic\">\n                Configure {relatedSchemaIntegration.label} to continue\n            </div>\n        )\n    }\n    if (schema.integration_field === 'slack_channel') {\n        return (\n            <SlackChannelPicker\n                value={value}\n                onChange={(x) => onChange?.(x?.split('|')[0])}\n                integration={integration}\n            />\n        )\n    }\n    if (schema.integration_field === 'google_ads_conversion_action' && requiresFieldValue) {\n        return (\n            <GoogleAdsConversionActionPicker\n                value={value}\n                requiresFieldValue={requiresFieldValue}\n                onChange={(x) => onChange?.(x?.split('|')[0])}\n                integration={integration}\n            />\n        )\n    }\n    if (schema.integration_field === 'google_ads_customer_id') {\n        return (\n            <GoogleAdsCustomerIdPicker\n                value={value}\n                onChange={(x) => onChange?.(x?.split('|')[0])}\n                integration={integration}\n            />\n        )\n    }\n    if (schema.integration_field === 'linkedin_ads_conversion_rule_id' && requiresFieldValue) {\n        return (\n            <LinkedInAdsConversionRulePicker\n                value={value}\n                requiresFieldValue={requiresFieldValue}\n                onChange={(x) => onChange?.(x?.split('|')[0])}\n                integration={integration}\n            />\n        )\n    }\n    if (schema.integration_field === 'linkedin_ads_account_id') {\n        return (\n            <LinkedInAdsAccountIdPicker\n                value={value}\n                onChange={(x) => onChange?.(x?.split('|')[0])}\n                integration={integration}\n            />\n        )\n    }\n    return (\n        <div className=\"text-danger\">\n            <p>Unsupported integration type: {schema.integration}</p>\n        </div>\n    )\n}\n", "import { LemonInputSelect, LemonInputSelectOption } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { useEffect, useMemo } from 'react'\n\nimport { GoogleAdsConversionActionType, IntegrationType } from '~/types'\n\nimport { googleAdsIntegrationLogic } from './googleAdsIntegrationLogic'\n\nconst getGoogleAdsAccountOptions = (\n    googleAdsAccounts?: { id: string; name: string }[] | null\n): LemonInputSelectOption[] | null => {\n    return googleAdsAccounts\n        ? googleAdsAccounts.map((customer) => ({\n              key: customer.id,\n              labelComponent: (\n                  <span className=\"flex items-center\">\n                      {customer.name} ({customer.id.replace(/(\\d{3})(\\d{3})(\\d{4})/, '$1-$2-$3')})\n                  </span>\n              ),\n              label: `${customer.name} (${customer.id.replace(/(\\d{3})(\\d{3})(\\d{4})/, '$1-$2-$3')})`,\n          }))\n        : null\n}\n\nconst getGoogleAdsConversionActionOptions = (\n    googleAdsConversionActions?: GoogleAdsConversionActionType[] | null\n): LemonInputSelectOption[] | null => {\n    return googleAdsConversionActions\n        ? googleAdsConversionActions.map(({ id, name }) => ({\n              key: id,\n              labelComponent: (\n                  <span className=\"flex items-center\">\n                      {name} ({id})\n                  </span>\n              ),\n              label: `${name} (${id})`,\n          }))\n        : null\n}\n\nexport type GoogleAdsPickerProps = {\n    integration: IntegrationType\n    value?: string\n    onChange?: (value: string | null) => void\n    disabled?: boolean\n    requiresFieldValue?: string\n}\n\nexport function GoogleAdsConversionActionPicker({\n    onChange,\n    value,\n    requiresFieldValue,\n    integration,\n    disabled,\n}: GoogleAdsPickerProps): JSX.Element {\n    const { googleAdsConversionActions, googleAdsConversionActionsLoading } = useValues(\n        googleAdsIntegrationLogic({ id: integration.id })\n    )\n    const { loadGoogleAdsConversionActions } = useActions(googleAdsIntegrationLogic({ id: integration.id }))\n\n    const googleAdsConversionActionOptions = useMemo(\n        () => getGoogleAdsConversionActionOptions(googleAdsConversionActions),\n        [googleAdsConversionActions]\n    )\n\n    useEffect(() => {\n        if (requiresFieldValue) {\n            loadGoogleAdsConversionActions(requiresFieldValue)\n        }\n    }, [loadGoogleAdsConversionActions, requiresFieldValue])\n\n    return (\n        <>\n            <LemonInputSelect\n                onChange={(val) => onChange?.(val[0] ?? null)}\n                value={value ? [value] : []}\n                onFocus={() =>\n                    !googleAdsConversionActions &&\n                    !googleAdsConversionActionsLoading &&\n                    requiresFieldValue &&\n                    loadGoogleAdsConversionActions(requiresFieldValue)\n                }\n                disabled={disabled}\n                mode=\"single\"\n                data-attr=\"select-google-ads-conversion-action\"\n                placeholder=\"Select a Conversion Action...\"\n                options={\n                    googleAdsConversionActionOptions ??\n                    (value\n                        ? [\n                              {\n                                  key: value,\n                                  label: value,\n                              },\n                          ]\n                        : [])\n                }\n                loading={googleAdsConversionActionsLoading}\n            />\n        </>\n    )\n}\n\nexport function GoogleAdsCustomerIdPicker({\n    onChange,\n    value,\n    integration,\n    disabled,\n}: GoogleAdsPickerProps): JSX.Element {\n    const { googleAdsAccessibleAccounts, googleAdsAccessibleAccountsLoading } = useValues(\n        googleAdsIntegrationLogic({ id: integration.id })\n    )\n    const { loadGoogleAdsAccessibleAccounts } = useActions(googleAdsIntegrationLogic({ id: integration.id }))\n\n    const googleAdsAccountOptions = useMemo(\n        () => getGoogleAdsAccountOptions(googleAdsAccessibleAccounts),\n        [googleAdsAccessibleAccounts]\n    )\n\n    useEffect(() => {\n        if (!disabled) {\n            loadGoogleAdsAccessibleAccounts()\n        }\n    }, [loadGoogleAdsAccessibleAccounts, disabled])\n\n    return (\n        <>\n            <LemonInputSelect\n                onChange={(val) => onChange?.(val[0] ?? null)}\n                value={value ? [value] : []}\n                onFocus={() =>\n                    !googleAdsAccessibleAccounts &&\n                    !googleAdsAccessibleAccountsLoading &&\n                    loadGoogleAdsAccessibleAccounts()\n                }\n                disabled={disabled}\n                mode=\"single\"\n                data-attr=\"select-google-ads-customer-id-channel\"\n                placeholder=\"Select a Customer ID...\"\n                options={\n                    googleAdsAccountOptions ??\n                    (value\n                        ? [\n                              {\n                                  key: value,\n                                  label: value.replace(/(\\d{3})(\\d{3})(\\d{4})/, '$1-$2-$3'),\n                              },\n                          ]\n                        : [])\n                }\n                loading={googleAdsAccessibleAccountsLoading}\n            />\n        </>\n    )\n}\n", "import { actions, kea, key, path, props } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\n\nimport { GoogleAdsConversionActionType } from '~/types'\n\nimport type { googleAdsIntegrationLogicType } from './googleAdsIntegrationLogicType'\n\nexport const googleAdsIntegrationLogic = kea<googleAdsIntegrationLogicType>([\n    props({} as { id: number }),\n    key((props) => props.id),\n    path((key) => ['lib', 'integrations', 'googleAdsIntegrationLogic', key]),\n    actions({\n        loadGoogleAdsConversionActions: (customerId: string) => customerId,\n        loadGoogleAdsAccessibleAccounts: true,\n    }),\n    loaders(({ props }) => ({\n        googleAdsConversionActions: [\n            null as GoogleAdsConversionActionType[] | null,\n            {\n                loadGoogleAdsConversionActions: async (customerId: string) => {\n                    const res = await api.integrations.googleAdsConversionActions(props.id, customerId)\n                    return res.conversionActions\n                },\n            },\n        ],\n        googleAdsAccessibleAccounts: [\n            null as { id: string; name: string }[] | null,\n            {\n                loadGoogleAdsAccessibleAccounts: async () => {\n                    const res = await api.integrations.googleAdsAccounts(props.id)\n                    return res.accessibleAccounts\n                },\n            },\n        ],\n    })),\n])\n", "import { LemonInputSelect, LemonInputSelectOption } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { useEffect, useMemo } from 'react'\n\nimport { IntegrationType, LinkedInAdsAccountType, LinkedInAdsConversionRuleType } from '~/types'\n\nimport { linkedInAdsIntegrationLogic } from './linkedInAdsIntegrationLogic'\n\nconst getLinkedInAdsAccountOptions = (\n    linkedInAdsAccounts?: LinkedInAdsAccountType[] | null\n): LemonInputSelectOption[] | null => {\n    return linkedInAdsAccounts\n        ? linkedInAdsAccounts.map((account) => ({\n              key: account.id.toString(),\n              labelComponent: (\n                  <span className=\"flex items-center\">\n                      {account.name} ({account.id.toString()})\n                  </span>\n              ),\n              label: `${account.name}`,\n          }))\n        : null\n}\n\nconst getLinkedInAdsConversionRuleOptions = (\n    linkedInAdsConversionRules?: LinkedInAdsConversionRuleType[] | null\n): LemonInputSelectOption[] | null => {\n    return linkedInAdsConversionRules\n        ? linkedInAdsConversionRules.map(({ id, name }) => ({\n              key: id.toString(),\n              labelComponent: (\n                  <span className=\"flex items-center\">\n                      {name} ({id})\n                  </span>\n              ),\n              label: `${name} (${id})`,\n          }))\n        : null\n}\n\nexport type LinkedInAdsPickerProps = {\n    integration: IntegrationType\n    value?: string\n    onChange?: (value: string | null) => void\n    disabled?: boolean\n    requiresFieldValue?: string\n}\n\nexport function LinkedInAdsConversionRulePicker({\n    onChange,\n    value,\n    requiresFieldValue,\n    integration,\n    disabled,\n}: LinkedInAdsPickerProps): JSX.Element {\n    const { linkedInAdsConversionRules, linkedInAdsConversionRulesLoading } = useValues(\n        linkedInAdsIntegrationLogic({ id: integration.id })\n    )\n    const { loadLinkedInAdsConversionRules } = useActions(linkedInAdsIntegrationLogic({ id: integration.id }))\n\n    const linkedInAdsConversionRuleOptions = useMemo(\n        () => getLinkedInAdsConversionRuleOptions(linkedInAdsConversionRules),\n        [linkedInAdsConversionRules]\n    )\n\n    useEffect(() => {\n        if (requiresFieldValue) {\n            loadLinkedInAdsConversionRules(requiresFieldValue)\n        }\n    }, [loadLinkedInAdsConversionRules, requiresFieldValue])\n\n    return (\n        <>\n            <LemonInputSelect\n                onChange={(val) => onChange?.(val[0] ?? null)}\n                value={value ? [value] : []}\n                onFocus={() =>\n                    !linkedInAdsConversionRules &&\n                    !linkedInAdsConversionRulesLoading &&\n                    requiresFieldValue &&\n                    loadLinkedInAdsConversionRules(requiresFieldValue)\n                }\n                disabled={disabled}\n                mode=\"single\"\n                data-attr=\"select-linkedin-ads-conversion-action\"\n                placeholder=\"Select a Conversion Action...\"\n                options={\n                    linkedInAdsConversionRuleOptions ??\n                    (value\n                        ? [\n                              {\n                                  key: value,\n                                  label: value,\n                              },\n                          ]\n                        : [])\n                }\n                loading={linkedInAdsConversionRulesLoading}\n            />\n        </>\n    )\n}\n\nexport function LinkedInAdsAccountIdPicker({\n    onChange,\n    value,\n    integration,\n    disabled,\n}: LinkedInAdsPickerProps): JSX.Element {\n    const { linkedInAdsAccounts, linkedInAdsAccountsLoading } = useValues(\n        linkedInAdsIntegrationLogic({ id: integration.id })\n    )\n    const { loadLinkedInAdsAccounts } = useActions(linkedInAdsIntegrationLogic({ id: integration.id }))\n\n    const linkedInAdsAccountOptions = useMemo(\n        () => getLinkedInAdsAccountOptions(linkedInAdsAccounts),\n        [linkedInAdsAccounts]\n    )\n\n    useEffect(() => {\n        if (!disabled) {\n            loadLinkedInAdsAccounts()\n        }\n    }, [loadLinkedInAdsAccounts])\n\n    return (\n        <>\n            <LemonInputSelect\n                onChange={(val) => onChange?.(val[0] ?? null)}\n                value={value ? [value] : []}\n                onFocus={() => !linkedInAdsAccounts && !linkedInAdsAccountsLoading && loadLinkedInAdsAccounts()}\n                disabled={disabled}\n                mode=\"single\"\n                data-attr=\"select-linkedin-ads-customer-id-channel\"\n                placeholder=\"Select a Account ID...\"\n                options={\n                    linkedInAdsAccountOptions ??\n                    (value\n                        ? [\n                              {\n                                  key: value,\n                                  label: value.replace(/(\\d{3})(\\d{3})(\\d{4})/, '$1-$2-$3'),\n                              },\n                          ]\n                        : [])\n                }\n                loading={linkedInAdsAccountsLoading}\n            />\n        </>\n    )\n}\n", "import { actions, kea, key, path, props } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\n\nimport { LinkedInAdsAccountType, LinkedInAdsConversionRuleType } from '~/types'\n\nimport type { linkedInAdsIntegrationLogicType } from './linkedInAdsIntegrationLogicType'\n\nexport const linkedInAdsIntegrationLogic = kea<linkedInAdsIntegrationLogicType>([\n    props({} as { id: number }),\n    key((props) => props.id),\n    path((key) => ['lib', 'integrations', 'linkedInAdsIntegrationLogic', key]),\n    actions({\n        loadLinkedInAdsConversionRules: (accountId: string) => accountId,\n        loadLinkedInAdsAccounts: true,\n    }),\n    loaders(({ props }) => ({\n        linkedInAdsConversionRules: [\n            null as LinkedInAdsConversionRuleType[] | null,\n            {\n                loadLinkedInAdsConversionRules: async (customerId: string) => {\n                    const res = await api.integrations.linkedInAdsConversionRules(props.id, customerId)\n                    return res.conversionRules\n                },\n            },\n        ],\n        linkedInAdsAccounts: [\n            null as LinkedInAdsAccountType[] | null,\n            {\n                loadLinkedInAdsAccounts: async () => {\n                    const res = await api.integrations.linkedInAdsAccounts(props.id)\n                    return res.adAccounts\n                },\n            },\n        ],\n    })),\n])\n", "import { IconInfo, IconX } from '@posthog/icons'\nimport {\n    LemonBanner,\n    LemonButton,\n    LemonDivider,\n    LemonLabel,\n    LemonSegmentedButton,\n    LemonSwitch,\n    LemonTable,\n    Spinner,\n    Tooltip,\n} from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport { TZLabel } from 'lib/components/TZLabel'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { CodeEditorResizeable } from 'lib/monaco/CodeEditorResizable'\nimport { editor as monacoEditor, MarkerSeverity } from 'monaco-editor'\nimport { useRef } from 'react'\n\nimport { hogFunctionConfigurationLogic } from './hogFunctionConfigurationLogic'\nimport { hogFunctionTestLogic } from './hogFunctionTestLogic'\n\nconst HogFunctionTestEditor = ({\n    value,\n    onChange,\n    readOnly = false,\n}: {\n    value: string\n    onChange?: (value?: string) => void\n    readOnly?: boolean\n}): JSX.Element => {\n    const editorRef = useRef<monacoEditor.IStandaloneCodeEditor | null>(null)\n    const decorationsRef = useRef<string[]>([]) // Track decoration IDs\n\n    const handleValidation = (newValue: string): void => {\n        if (!editorRef.current?.getModel()) {\n            return\n        }\n        const model = editorRef.current.getModel()!\n\n        // First clear everything\n        monacoEditor.setModelMarkers(model, 'owner', [])\n\n        // Clear existing decorations and get new empty array of IDs\n        decorationsRef.current = editorRef.current.deltaDecorations(decorationsRef.current, [])\n\n        // Now validate with clean state\n        try {\n            JSON.parse(newValue)\n            // Valid JSON - keep decorations cleared\n        } catch (err: any) {\n            // Invalid JSON - add new decoration\n            const match = err.message.match(/position (\\d+)/)\n            if (match) {\n                const position = parseInt(match[1], 10)\n                const pos = model.getPositionAt(position)\n\n                // Set error marker\n                monacoEditor.setModelMarkers(model, 'owner', [\n                    {\n                        startLineNumber: pos.lineNumber,\n                        startColumn: pos.column,\n                        endLineNumber: pos.lineNumber,\n                        endColumn: pos.column + 1,\n                        message: err.message,\n                        severity: MarkerSeverity.Error,\n                    },\n                ])\n\n                // Set new decoration and store the IDs\n                decorationsRef.current = editorRef.current.deltaDecorations(decorationsRef.current, [\n                    {\n                        range: {\n                            startLineNumber: pos.lineNumber,\n                            startColumn: 1,\n                            endLineNumber: pos.lineNumber,\n                            endColumn: model.getLineLength(pos.lineNumber) + 1,\n                        },\n                        options: {\n                            isWholeLine: true,\n                            className: 'bg-danger-highlight',\n                            glyphMarginClassName: 'text-danger flex items-center justify-center',\n                            glyphMarginHoverMessage: { value: err.message },\n                        },\n                    },\n                ])\n\n                // Scroll to error\n                editorRef.current.revealLineInCenter(pos.lineNumber)\n            }\n        }\n    }\n\n    return (\n        <CodeEditorResizeable\n            language=\"json\"\n            value={value}\n            height={400}\n            onChange={(newValue) => {\n                if (!readOnly) {\n                    onChange?.(newValue)\n                    handleValidation(newValue ?? '')\n                }\n            }}\n            onMount={(editor) => {\n                editorRef.current = editor\n                handleValidation(value)\n            }}\n            options={{\n                lineNumbers: 'on',\n                minimap: {\n                    enabled: false,\n                },\n                quickSuggestions: {\n                    other: true,\n                    strings: true,\n                },\n                suggest: {\n                    showWords: false,\n                    showFields: false,\n                    showKeywords: false,\n                },\n                scrollbar: {\n                    vertical: 'auto',\n                    verticalScrollbarSize: 14,\n                },\n                folding: true,\n                glyphMargin: true,\n                readOnly: readOnly,\n            }}\n        />\n    )\n}\n\nexport function HogFunctionTest(): JSX.Element {\n    const { logicProps } = useValues(hogFunctionConfigurationLogic)\n    const {\n        isTestInvocationSubmitting,\n        testResult,\n        expanded,\n        sampleGlobalsLoading,\n        sampleGlobalsError,\n        type,\n        savedGlobals,\n        testInvocation,\n        testResultMode,\n        sortedTestsResult,\n        jsonError,\n        fetchCancelled,\n    } = useValues(hogFunctionTestLogic(logicProps))\n    const {\n        submitTestInvocation,\n        setTestResult,\n        toggleExpanded,\n        loadSampleGlobals,\n        deleteSavedGlobals,\n        setSampleGlobals,\n        saveGlobals,\n        setTestResultMode,\n        cancelSampleGlobalsLoading,\n    } = useActions(hogFunctionTestLogic(logicProps))\n\n    const testResultsRef = useRef<HTMLDivElement>(null)\n\n    return (\n        <Form logic={hogFunctionTestLogic} props={logicProps} formKey=\"testInvocation\" enableFormOnSubmit>\n            <div\n                ref={testResultsRef}\n                className={clsx(\n                    'border rounded p-3 space-y-2',\n                    expanded ? 'bg-surface-secondary min-h-120' : 'bg-surface-primary'\n                )}\n            >\n                <div className=\"flex items-center justify-end gap-2\">\n                    <div className=\"flex-1 space-y-2\">\n                        <h2 className=\"flex items-center gap-2 mb-0\">\n                            <span>Testing</span>\n                            {sampleGlobalsLoading && !fetchCancelled ? <Spinner /> : null}\n                        </h2>\n                        {!expanded && <p>Click here to test your function with an example event</p>}\n                    </div>\n\n                    {!expanded ? (\n                        <LemonButton\n                            data-attr=\"expand-hog-testing\"\n                            type=\"secondary\"\n                            onClick={() => {\n                                toggleExpanded()\n                                // Add a small delay to allow the content to expand\n                                setTimeout(() => {\n                                    testResultsRef.current?.scrollIntoView({ behavior: 'smooth', block: 'start' })\n                                }, 100)\n                            }}\n                        >\n                            Start testing\n                        </LemonButton>\n                    ) : (\n                        <>\n                            {testResult ? (\n                                <LemonButton\n                                    type=\"primary\"\n                                    onClick={() => setTestResult(null)}\n                                    loading={isTestInvocationSubmitting}\n                                    data-attr=\"clear-hog-test-result\"\n                                >\n                                    Clear test result\n                                </LemonButton>\n                            ) : (\n                                <>\n                                    <More\n                                        dropdown={{ closeOnClickInside: false }}\n                                        overlay={\n                                            <>\n                                                <LemonField name=\"mock_async_functions\">\n                                                    {({ value, onChange }) => (\n                                                        <LemonSwitch\n                                                            onChange={(v) => onChange(!v)}\n                                                            checked={!value}\n                                                            data-attr=\"toggle-hog-test-mocking\"\n                                                            className=\"px-2 py-1\"\n                                                            label={\n                                                                <Tooltip\n                                                                    title={\n                                                                        <>\n                                                                            When disabled, async functions such as\n                                                                            `fetch` will not be called. Instead they\n                                                                            will be mocked out and logged.\n                                                                        </>\n                                                                    }\n                                                                >\n                                                                    <span className=\"flex gap-2\">\n                                                                        Make real HTTP requests\n                                                                        <IconInfo className=\"text-lg\" />\n                                                                    </span>\n                                                                </Tooltip>\n                                                            }\n                                                        />\n                                                    )}\n                                                </LemonField>\n                                                <LemonDivider />\n                                                <LemonButton\n                                                    fullWidth\n                                                    onClick={loadSampleGlobals}\n                                                    loading={sampleGlobalsLoading && !fetchCancelled}\n                                                    tooltip=\"Find the last event matching filters, and use it to populate the globals below.\"\n                                                >\n                                                    Fetch new event\n                                                </LemonButton>\n                                                <LemonDivider />\n                                                {savedGlobals.map(({ name, globals }, index) => (\n                                                    <div className=\"flex justify-between w-full\" key={index}>\n                                                        <LemonButton\n                                                            data-attr=\"open-hog-test-data\"\n                                                            key={index}\n                                                            onClick={() => setSampleGlobals(globals)}\n                                                            fullWidth\n                                                            className=\"flex-1\"\n                                                        >\n                                                            {name}\n                                                        </LemonButton>\n                                                        <LemonButton\n                                                            data-attr=\"delete-hog-test-data\"\n                                                            size=\"small\"\n                                                            icon={<IconX />}\n                                                            onClick={() => deleteSavedGlobals(index)}\n                                                            tooltip=\"Delete saved test data\"\n                                                        />\n                                                    </div>\n                                                ))}\n                                                {testInvocation.globals && (\n                                                    <LemonButton\n                                                        fullWidth\n                                                        data-attr=\"save-hog-test-data\"\n                                                        onClick={() => {\n                                                            const name = prompt('Name this test data')\n                                                            if (name) {\n                                                                saveGlobals(name, JSON.parse(testInvocation.globals))\n                                                            }\n                                                        }}\n                                                        disabledReason={(() => {\n                                                            try {\n                                                                JSON.parse(testInvocation.globals)\n                                                            } catch (e) {\n                                                                return 'Invalid globals JSON'\n                                                            }\n                                                            return undefined\n                                                        })()}\n                                                    >\n                                                        Save test data\n                                                    </LemonButton>\n                                                )}\n                                            </>\n                                        }\n                                    />\n                                    <LemonButton\n                                        type=\"primary\"\n                                        data-attr=\"test-hog-function\"\n                                        onClick={submitTestInvocation}\n                                        loading={isTestInvocationSubmitting}\n                                    >\n                                        Test function\n                                    </LemonButton>\n                                </>\n                            )}\n\n                            <LemonButton\n                                data-attr=\"hide-hog-testing\"\n                                icon={<IconX />}\n                                onClick={() => toggleExpanded()}\n                                tooltip=\"Hide testing\"\n                            />\n                        </>\n                    )}\n                </div>\n\n                {expanded && (\n                    <>\n                        {testResult ? (\n                            <div className=\"space-y-2\" data-attr=\"test-results\">\n                                <LemonBanner type={testResult.status === 'success' ? 'success' : 'error'}>\n                                    {testResult.status === 'success' ? 'Success' : 'Error'}\n                                </LemonBanner>\n\n                                {type === 'transformation' && testResult.status === 'success' ? (\n                                    <>\n                                        <div className=\"flex items-center justify-between gap-2\">\n                                            <LemonLabel>Transformation result</LemonLabel>\n\n                                            {sortedTestsResult?.hasDiff && (\n                                                <LemonSegmentedButton\n                                                    size=\"xsmall\"\n                                                    options={[\n                                                        { value: 'raw', label: 'Output' },\n                                                        { value: 'diff', label: 'Diff' },\n                                                    ]}\n                                                    onChange={(value) => setTestResultMode(value as 'raw' | 'diff')}\n                                                    value={testResultMode}\n                                                />\n                                            )}\n                                        </div>\n                                        <p>Below you can see the event after the transformation has been applied.</p>\n                                        {testResult.result ? (\n                                            <>\n                                                {!sortedTestsResult?.hasDiff && (\n                                                    <LemonBanner type=\"info\">\n                                                        The event was unmodified by the transformation.\n                                                    </LemonBanner>\n                                                )}\n                                                <CodeEditorResizeable\n                                                    language=\"json\"\n                                                    originalValue={\n                                                        sortedTestsResult?.hasDiff && testResultMode === 'diff'\n                                                            ? sortedTestsResult?.input\n                                                            : undefined\n                                                    }\n                                                    value={sortedTestsResult?.output}\n                                                    height={400}\n                                                    options={{\n                                                        readOnly: true,\n                                                        lineNumbers: 'off',\n                                                        minimap: {\n                                                            enabled: false,\n                                                        },\n                                                        quickSuggestions: {\n                                                            other: true,\n                                                            strings: true,\n                                                        },\n                                                        suggest: {\n                                                            showWords: false,\n                                                            showFields: false,\n                                                            showKeywords: false,\n                                                        },\n                                                        scrollbar: {\n                                                            vertical: 'hidden',\n                                                            verticalScrollbarSize: 0,\n                                                        },\n                                                        folding: true,\n                                                    }}\n                                                />\n                                            </>\n                                        ) : (\n                                            <LemonBanner type=\"warning\">\n                                                The event was dropped by the transformation. If this is expected then\n                                                great news! If not, you should double check the configuration.\n                                            </LemonBanner>\n                                        )}\n                                    </>\n                                ) : null}\n\n                                <LemonLabel>Test invocation logs</LemonLabel>\n\n                                <LemonTable\n                                    dataSource={testResult.logs ?? []}\n                                    columns={[\n                                        {\n                                            title: 'Timestamp',\n                                            key: 'timestamp',\n                                            dataIndex: 'timestamp',\n                                            render: (timestamp) => <TZLabel time={timestamp as string} />,\n                                            width: 0,\n                                        },\n                                        {\n                                            width: 100,\n                                            title: 'Level',\n                                            key: 'level',\n                                            dataIndex: 'level',\n                                        },\n                                        {\n                                            title: 'Message',\n                                            key: 'message',\n                                            dataIndex: 'message',\n                                            render: (message) => <code className=\"whitespace-pre-wrap\">{message}</code>,\n                                        },\n                                    ]}\n                                    className=\"ph-no-capture\"\n                                    rowKey=\"timestamp\"\n                                    pagination={{ pageSize: 200, hideOnSinglePage: true }}\n                                />\n                            </div>\n                        ) : (\n                            <div className=\"space-y-2\">\n                                <LemonField name=\"globals\">\n                                    {({ value, onChange }) => (\n                                        <>\n                                            <div className=\"space-y-2\">\n                                                <div>\n                                                    {type === 'broadcast'\n                                                        ? 'The test broadcast will be sent with this sample data:'\n                                                        : type === 'email'\n                                                        ? 'The provider will be tested with this sample data:'\n                                                        : 'Here are all the global variables you can use in your code:'}\n                                                </div>\n                                                {sampleGlobalsLoading && !fetchCancelled && (\n                                                    <div className=\"flex items-center gap-2 text-muted\">\n                                                        <Spinner />\n                                                        <span>Fetching new event...</span>\n                                                        <LemonButton\n                                                            size=\"small\"\n                                                            type=\"secondary\"\n                                                            onClick={() => cancelSampleGlobalsLoading()}\n                                                        >\n                                                            Cancel\n                                                        </LemonButton>\n                                                    </div>\n                                                )}\n                                                {sampleGlobalsError ? (\n                                                    <div className=\"text-warning\">{sampleGlobalsError}</div>\n                                                ) : null}\n                                            </div>\n                                            <HogFunctionTestEditor\n                                                value={value}\n                                                onChange={onChange}\n                                                readOnly={sampleGlobalsLoading}\n                                            />\n                                        </>\n                                    )}\n                                </LemonField>\n                            </div>\n                        )}\n                    </>\n                )}\n            </div>\n\n            {jsonError && <LemonBanner type=\"error\">JSON Error: {jsonError}</LemonBanner>}\n        </Form>\n    )\n}\n", "import { lemonToast } from '@posthog/lemon-ui'\nimport { actions, afterMount, connect, kea, key, listeners, path, props, reducers, selectors } from 'kea'\nimport { forms } from 'kea-forms'\nimport api from 'lib/api'\nimport { tryJsonParse } from 'lib/utils'\nimport { getCurrentTeamId } from 'lib/utils/getAppContext'\nimport { editor } from 'monaco-editor'\n\nimport { groupsModel } from '~/models/groupsModel'\nimport { HogFunctionInvocationGlobals, HogFunctionTestInvocationResult } from '~/types'\n\nimport {\n    hogFunctionConfigurationLogic,\n    HogFunctionConfigurationLogicProps,\n    sanitizeConfiguration,\n} from './hogFunctionConfigurationLogic'\nimport type { hogFunctionTestLogicType } from './hogFunctionTestLogicType'\n\nexport type HogFunctionTestInvocationForm = {\n    globals: string // HogFunctionInvocationGlobals\n    mock_async_functions: boolean\n}\n\nexport type HogTransformationEvent = {\n    event: any\n    uuid: string\n    distinct_id: string\n    timestamp: string\n    properties: any\n}\n\nconst convertToTransformationEvent = (result: any): HogTransformationEvent => {\n    const properties = result.properties ?? {}\n    properties.$ip = properties.$ip ?? '89.160.20.129'\n    // We don't want to use these values given they will change in the test invocation\n    delete properties.$transformations_failed\n    delete properties.$transformations_succeeded\n    return {\n        event: result.event,\n        uuid: result.uuid,\n        distinct_id: result.distinct_id,\n        timestamp: result.timestamp,\n        properties,\n    }\n}\n\nconst convertFromTransformationEvent = (result: HogTransformationEvent): Record<string, any> => {\n    delete result.properties.$transformations_failed\n    delete result.properties.$transformations_succeeded\n    return {\n        event: result.event,\n        uuid: result.uuid,\n        distinct_id: result.distinct_id,\n        timestamp: result.timestamp,\n        properties: result.properties,\n    }\n}\n\nexport interface CodeEditorValidation {\n    value: string\n    editor: editor.IStandaloneCodeEditor\n    decorations: string[]\n}\n\nexport const hogFunctionTestLogic = kea<hogFunctionTestLogicType>([\n    props({} as HogFunctionConfigurationLogicProps),\n    key(({ id, templateId }: HogFunctionConfigurationLogicProps) => {\n        return id ?? templateId ?? 'new'\n    }),\n\n    path((id) => ['scenes', 'pipeline', 'hogfunctions', 'hogFunctionTestLogic', id]),\n    connect((props: HogFunctionConfigurationLogicProps) => ({\n        values: [\n            hogFunctionConfigurationLogic(props),\n            [\n                'configuration',\n                'templateId',\n                'configurationHasErrors',\n                'sampleGlobals',\n                'sampleGlobalsLoading',\n                'exampleInvocationGlobals',\n                'sampleGlobalsError',\n                'type',\n            ],\n            groupsModel,\n            ['groupTypes'],\n        ],\n        actions: [\n            hogFunctionConfigurationLogic(props),\n            ['touchConfigurationField', 'loadSampleGlobalsSuccess', 'loadSampleGlobals', 'setSampleGlobals'],\n        ],\n    })),\n    actions({\n        setTestResult: (result: HogFunctionTestInvocationResult | null) => ({ result }),\n        toggleExpanded: (expanded?: boolean) => ({ expanded }),\n        saveGlobals: (name: string, globals: HogFunctionInvocationGlobals) => ({ name, globals }),\n        deleteSavedGlobals: (index: number) => ({ index }),\n        setTestResultMode: (mode: 'raw' | 'diff') => ({ mode }),\n        receiveExampleGlobals: (globals: HogFunctionInvocationGlobals | null) => ({ globals }),\n        setJsonError: (error: string | null) => ({ error }),\n        validateJson: (value: string, editor: editor.IStandaloneCodeEditor, decorations: string[]) =>\n            ({ value, editor, decorations } as CodeEditorValidation),\n        setDecorationIds: (decorationIds: string[]) => ({ decorationIds }),\n        cancelSampleGlobalsLoading: true,\n    }),\n    reducers({\n        expanded: [\n            false as boolean,\n            {\n                toggleExpanded: (state, { expanded }) => (expanded === undefined ? !state : expanded),\n            },\n        ],\n\n        testResult: [\n            null as HogFunctionTestInvocationResult | null,\n            {\n                setTestResult: (_, { result }) => result,\n            },\n        ],\n\n        testResultMode: [\n            'diff' as 'raw' | 'diff',\n            {\n                setTestResultMode: (_, { mode }) => mode,\n            },\n        ],\n\n        savedGlobals: [\n            [] as { name: string; globals: HogFunctionInvocationGlobals }[],\n            { persist: true, prefix: `${getCurrentTeamId()}__` },\n            {\n                saveGlobals: (state, { name, globals }) => [...state, { name, globals }],\n                deleteSavedGlobals: (state, { index }) => state.filter((_, i) => i !== index),\n            },\n        ],\n\n        jsonError: [\n            null as string | null,\n            {\n                setJsonError: (_, { error }) => error,\n            },\n        ],\n\n        currentDecorationIds: [\n            [] as string[],\n            {\n                setDecorationIds: (_, { decorationIds }) => decorationIds,\n                setJsonError: () => [], // Clear decorations when error state changes\n            },\n        ],\n\n        fetchCancelled: [\n            false as boolean,\n            {\n                loadSampleGlobals: () => false,\n                cancelSampleGlobalsLoading: () => true,\n                toggleExpanded: () => false,\n            },\n        ],\n    }),\n    listeners(({ values, actions }) => ({\n        loadSampleGlobalsSuccess: () => {\n            if (values.expanded && !values.fetchCancelled && values.sampleGlobals) {\n                actions.receiveExampleGlobals(values.sampleGlobals)\n            }\n        },\n        setSampleGlobals: ({ sampleGlobals }) => {\n            actions.receiveExampleGlobals(sampleGlobals)\n        },\n\n        receiveExampleGlobals: ({ globals }) => {\n            if (!globals) {\n                return\n            }\n\n            if (values.type === 'transformation') {\n                const event = convertToTransformationEvent(globals.event)\n                // Strip down to just the real values\n                actions.setTestInvocationValue('globals', JSON.stringify(event, null, 2))\n            } else {\n                actions.setTestInvocationValue('globals', JSON.stringify(globals, null, 2))\n            }\n        },\n\n        validateJson: ({ value, editor, decorations }: CodeEditorValidation) => {\n            if (!editor?.getModel()) {\n                return\n            }\n\n            const model = editor.getModel()!\n\n            try {\n                // Try parsing the JSON\n                JSON.parse(value)\n                // If valid, ensure everything is cleared\n                actions.setJsonError(null)\n                editor.removeDecorations(decorations)\n            } catch (err: any) {\n                actions.setJsonError(err.message)\n\n                const match = err.message.match(/position (\\d+)/)\n                if (!match) {\n                    return\n                }\n\n                const position = parseInt(match[1], 10)\n                const pos = model.getPositionAt(position)\n\n                // Set single error marker\n                editor.createDecorationsCollection([\n                    {\n                        range: {\n                            startLineNumber: pos.lineNumber,\n                            startColumn: pos.column,\n                            endLineNumber: pos.lineNumber,\n                            endColumn: pos.column + 1,\n                        },\n                        options: {\n                            isWholeLine: true,\n                            className: 'bg-danger-highlight',\n                            glyphMarginClassName: 'text-danger flex items-center justify-center',\n                            glyphMarginHoverMessage: { value: err.message },\n                        },\n                    },\n                ])\n                // Scroll to error\n                editor.revealLineInCenter(pos.lineNumber)\n            }\n        },\n\n        setTestResult: ({ result }) => {\n            if (result) {\n                setTimeout(() => {\n                    // First try to scroll the test results container into view\n                    const testResults = document.querySelector('[data-attr=\"test-results\"]')\n                    if (testResults) {\n                        testResults.scrollIntoView({ behavior: 'smooth', block: 'start' })\n                    }\n\n                    // Find the Monaco editor and scroll to the first difference\n                    const editors = document.querySelectorAll('[data-attr=\"test-results\"] .monaco-editor')\n                    if (editors.length > 0 && values.sortedTestsResult?.hasDiff) {\n                        const lastEditor = editors[editors.length - 1]\n                        const monacoEditor = lastEditor.querySelector('.monaco-scrollable-element')\n                        if (monacoEditor) {\n                            const inputLines = values.sortedTestsResult.input.split('\\n')\n                            const outputLines = values.sortedTestsResult.output.split('\\n')\n\n                            // Find the first line that differs\n                            let diffLineIndex = 0\n                            for (let i = 0; i < Math.max(inputLines.length, outputLines.length); i++) {\n                                if (inputLines[i] !== outputLines[i]) {\n                                    diffLineIndex = i\n                                    break\n                                }\n                            }\n\n                            // Calculate approximate scroll position for the diff, showing 2 lines of context above\n                            const lineHeight = 19 // Default Monaco line height\n                            monacoEditor.scrollTop = Math.max(0, (diffLineIndex - 2) * lineHeight)\n                        }\n                    }\n                }, 100)\n            }\n        },\n\n        cancelSampleGlobalsLoading: () => {\n            // Just mark as cancelled - we'll ignore any results that come back\n        },\n    })),\n\n    forms(({ props, actions, values }) => ({\n        testInvocation: {\n            defaults: {\n                mock_async_functions: false,\n            } as HogFunctionTestInvocationForm,\n            alwaysShowErrors: true,\n            errors: ({ globals }) => {\n                return {\n                    globals: !globals ? 'Required' : tryJsonParse(globals) ? undefined : 'Invalid JSON',\n                }\n            },\n            submit: async (data) => {\n                // Submit the test invocation\n                // Set the response somewhere\n\n                if (values.configurationHasErrors) {\n                    lemonToast.error('Please fix the configuration errors before testing.')\n                    // TODO: How to get the form to show errors without submitting?\n                    return\n                }\n\n                const parsedData = tryJsonParse(data.globals)\n                const configuration = sanitizeConfiguration(values.configuration) as Record<string, any>\n                configuration.template_id = values.templateId\n\n                // Transformations have a simpler UI just showing the event so we need to map it back to the event\n                const globals =\n                    values.type === 'transformation'\n                        ? {\n                              event: parsedData,\n                          }\n                        : parsedData\n\n                try {\n                    const res = await api.hogFunctions.createTestInvocation(props.id ?? 'new', {\n                        globals,\n                        mock_async_functions: data.mock_async_functions,\n                        configuration,\n                    })\n\n                    // Modify the result to match better our globals format\n                    if (values.type === 'transformation' && res.result) {\n                        res.result = convertFromTransformationEvent(res.result)\n                    }\n\n                    actions.setTestResult(res)\n                } catch (e) {\n                    lemonToast.error(`An unexpected server error occurred while testing the function. ${e}`)\n                }\n            },\n        },\n    })),\n\n    selectors(() => ({\n        sortedTestsResult: [\n            (s) => [s.configuration, s.testResult, s.testInvocation],\n            (\n                configuration,\n                testResult,\n                testInvocation\n            ): {\n                input: string\n                output: string\n                hasDiff: boolean\n            } | null => {\n                if (!testResult || configuration.type !== 'transformation') {\n                    return null\n                }\n\n                const input = JSON.stringify(JSON.parse(testInvocation.globals), null, 2)\n                const output = JSON.stringify(testResult.result, null, 2)\n\n                return {\n                    input,\n                    output,\n                    hasDiff: input !== output,\n                }\n            },\n        ],\n    })),\n\n    afterMount(({ actions, values }) => {\n        actions.receiveExampleGlobals(values.exampleInvocationGlobals)\n    }),\n])\n", "import { IconArrowRight, IconEllipsis, IconFilter, IconPlus } from '@posthog/icons'\nimport {\n    LemonBanner,\n    LemonButton,\n    LemonCollapse,\n    LemonCollapsePanel,\n    LemonLabel,\n    LemonSelect,\n    LemonTag,\n    Tooltip,\n} from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { Group } from 'kea-forms'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { memo, useEffect, useState } from 'react'\nimport { ActionFilter } from 'scenes/insights/filters/ActionFilter/ActionFilter'\nimport { MathAvailability } from 'scenes/insights/filters/ActionFilter/ActionFilterRow/ActionFilterRow'\n\nimport { groupsModel } from '~/models/groupsModel'\nimport { EntityTypes, HogFunctionConfigurationType, HogFunctionMappingType } from '~/types'\n\nimport { hogFunctionConfigurationLogic } from '../hogFunctionConfigurationLogic'\nimport { HogFunctionInputs } from '../HogFunctionInputs'\n\nconst humanize = (value: string): string => {\n    // Simple replacement from something like MY_STRING-here to My string here\n    return value\n        .toLowerCase()\n        .replace(/_/g, ' ')\n        .replace(/-/g, ' ')\n        .replace(/\\b\\w/g, (char) => char.toUpperCase())\n}\n\nconst MappingSummary = memo(function MappingSummary({\n    mapping,\n}: {\n    mapping: HogFunctionMappingType\n}): JSX.Element | null {\n    const events = mapping.filters?.events?.map((event) => event.name ?? event.id) ?? []\n    const actions = mapping.filters?.actions?.map((action) => action.name ?? action.id) ?? []\n\n    const propertyFiltersCount =\n        (mapping.filters?.events?.filter((event) => event.properties?.length ?? 0) ?? []).length +\n        (mapping.filters?.actions?.filter((action) => action.properties?.length ?? 0) ?? []).length\n\n    const eventSummary = [...events, ...actions].join(', ')\n\n    const firstInput = mapping.inputs_schema?.[0]\n    const firstInputValue = (firstInput?.key ? mapping.inputs?.[firstInput.key]?.value : null) ?? '(custom value)'\n\n    return (\n        <span className=\"flex items-center flex-1 gap-4\">\n            <span>\n                {eventSummary ? humanize(eventSummary) : <span className=\"text-secondary\">All events</span>}{' '}\n                {propertyFiltersCount ? (\n                    <span className=\"text-secondary\">\n                        <Tooltip title={`Events have ${propertyFiltersCount} additional filters`}>\n                            <IconFilter />\n                        </Tooltip>\n                    </span>\n                ) : null}\n            </span>\n            <IconArrowRight className=\"text-secondary\" />\n            <span>\n                {typeof firstInputValue === 'object' ? JSON.stringify(firstInputValue) : humanize(firstInputValue)}\n            </span>\n            <span className=\"flex-1\" />\n            {mapping.disabled ? <LemonTag type=\"danger\">Disabled</LemonTag> : null}\n        </span>\n    )\n})\n\nexport function HogFunctionMapping({\n    index,\n    mapping,\n    onChange,\n}: {\n    index: number\n    mapping: HogFunctionMappingType\n    onChange: (mapping: HogFunctionMappingType | null) => void\n}): JSX.Element | null {\n    const { groupsTaxonomicTypes } = useValues(groupsModel)\n    const { showSource } = useValues(hogFunctionConfigurationLogic)\n\n    return (\n        <>\n            <div className=\"p-3 pl-10 space-y-2\">\n                {mapping.disabled ? (\n                    <LemonBanner\n                        type=\"warning\"\n                        className=\"p-2\"\n                        action={{\n                            children: 'Enable',\n                            onClick: () => onChange({ ...mapping, disabled: false }),\n                        }}\n                    >\n                        This mapping is disabled. It will not trigger the function.\n                    </LemonBanner>\n                ) : null}\n                <LemonLabel>Match events and actions</LemonLabel>\n                <ActionFilter\n                    filters={mapping.filters ?? ({} as any)}\n                    setFilters={(f: any) => onChange({ ...mapping, filters: f })}\n                    typeKey=\"match-group\"\n                    mathAvailability={MathAvailability.None}\n                    hideRename\n                    hideDuplicate\n                    showNestedArrow={false}\n                    actionsTaxonomicGroupTypes={[TaxonomicFilterGroupType.Events, TaxonomicFilterGroupType.Actions]}\n                    propertiesTaxonomicGroupTypes={[\n                        TaxonomicFilterGroupType.EventProperties,\n                        TaxonomicFilterGroupType.EventFeatureFlags,\n                        TaxonomicFilterGroupType.Elements,\n                        TaxonomicFilterGroupType.PersonProperties,\n                        TaxonomicFilterGroupType.HogQLExpression,\n                        ...groupsTaxonomicTypes,\n                    ]}\n                    propertyFiltersPopover\n                    addFilterDefaultOptions={{\n                        id: '$pageview',\n                        name: '$pageview',\n                        type: EntityTypes.EVENTS,\n                    }}\n                    buttonProps={{\n                        type: 'secondary',\n                    }}\n                    buttonCopy=\"Add event matcher\"\n                />\n                <Group name={['mappings', index]}>\n                    <HogFunctionInputs\n                        configuration={mapping as HogFunctionConfigurationType}\n                        setConfigurationValue={(key, value) => {\n                            onChange({ ...mapping, [key]: value })\n                        }}\n                    />\n                </Group>\n                {showSource ? (\n                    <LemonButton\n                        icon={<IconPlus />}\n                        size=\"small\"\n                        type=\"secondary\"\n                        className=\"my-4\"\n                        onClick={() => {\n                            onChange({\n                                ...mapping,\n                                inputs_schema: [\n                                    ...(mapping.inputs_schema ?? []),\n                                    {\n                                        type: 'string',\n                                        key: `var_${(mapping.inputs_schema?.length ?? 0) + 1}`,\n                                        label: '',\n                                        required: false,\n                                    },\n                                ],\n                            })\n                        }}\n                    >\n                        Add input variable\n                    </LemonButton>\n                ) : null}\n            </div>\n        </>\n    )\n}\n\nexport function HogFunctionMappings(): JSX.Element | null {\n    const { useMapping, mappingTemplates, configuration } = useValues(hogFunctionConfigurationLogic)\n    const [activeKeys, setActiveKeys] = useState<number[]>([])\n\n    // If there is only one mapping template, then we start it expanded\n    useEffect(() => {\n        if (configuration.mappings?.length === 1) {\n            setActiveKeys([0])\n        }\n    }, [configuration.mappings?.length])\n\n    if (!useMapping) {\n        return null\n    }\n\n    return (\n        <LemonField name=\"mappings\">\n            {({\n                value,\n                onChange,\n            }: {\n                value: HogFunctionMappingType[]\n                onChange: (mappings: HogFunctionMappingType[]) => void\n            }) => {\n                const addMapping = (template: string): void => {\n                    const mappingTemplate = mappingTemplates.find((t) => t.name === template)\n                    if (mappingTemplate) {\n                        const { name, ...mapping } = mappingTemplate\n\n                        const inputs = mapping.inputs_schema\n                            ? Object.fromEntries(\n                                  mapping.inputs_schema\n                                      .filter((m) => m.default !== undefined)\n                                      .map((m) => [m.key, { value: structuredClone(m.default) }])\n                              )\n                            : {}\n                        onChange([...value, { ...mapping, name, inputs }])\n                        setActiveKeys([...activeKeys, value.length])\n                    }\n                    return\n                }\n\n                const duplicateMapping = (mapping: HogFunctionMappingType): void => {\n                    const index = value.findIndex((m) => m === mapping)\n                    if (index !== -1) {\n                        const newMappings = [...value]\n                        newMappings.splice(index + 1, 0, mapping)\n                        onChange(newMappings)\n                        setActiveKeys([index + 1])\n                    }\n                }\n\n                const removeMapping = (mapping: HogFunctionMappingType): void => {\n                    const index = value.findIndex((m) => m === mapping)\n                    if (index !== -1) {\n                        onChange(value.filter((_, i) => i !== index))\n                        setActiveKeys(activeKeys.filter((i) => i !== index))\n                    }\n                }\n\n                const toggleDisabled = (mapping: HogFunctionMappingType): void => {\n                    const index = value.findIndex((m) => m === mapping)\n                    if (index !== -1) {\n                        onChange(value.map((m, i) => (i === index ? { ...m, disabled: !m.disabled } : m)))\n                    }\n                }\n\n                const addMappingButton = mappingTemplates.length ? (\n                    <LemonSelect\n                        placeholder=\"Add mapping\"\n                        onChange={(template) => {\n                            addMapping(template)\n                        }}\n                        options={mappingTemplates.map((t) => ({\n                            label: t.name,\n                            value: t.name,\n                        }))}\n                    />\n                ) : null\n\n                return (\n                    <div className=\"p-3 border rounded bg-surface-primary\">\n                        <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1\">\n                                <LemonLabel>Mappings</LemonLabel>\n                                <p className=\"text-sm text-secondary\">\n                                    Configure which events should act as triggers including filters and custom\n                                    transformations\n                                </p>\n                            </div>\n                            {addMappingButton}\n                        </div>\n\n                        <div className=\"space-y-2\">\n                            {value.length ? (\n                                <div className=\"-mx-3 border-t border-b\">\n                                    <LemonCollapse\n                                        multiple\n                                        embedded\n                                        activeKeys={activeKeys}\n                                        onChange={(activeKeys) => setActiveKeys(activeKeys)}\n                                        panels={value.map(\n                                            (mapping, index): LemonCollapsePanel<number> => ({\n                                                key: index,\n                                                header: {\n                                                    children: <MappingSummary mapping={mapping} />,\n                                                    sideAction: {\n                                                        icon: <IconEllipsis />,\n                                                        dropdown: {\n                                                            overlay: (\n                                                                <div className=\"space-y-px\">\n                                                                    <LemonButton\n                                                                        onClick={() => toggleDisabled(mapping)}\n                                                                    >\n                                                                        {mapping.disabled ? 'Enable' : 'Disable'}\n                                                                    </LemonButton>\n                                                                    <LemonButton\n                                                                        onClick={() => duplicateMapping(mapping)}\n                                                                    >\n                                                                        Duplicate\n                                                                    </LemonButton>\n                                                                    <LemonButton\n                                                                        status=\"danger\"\n                                                                        onClick={() => removeMapping(mapping)}\n                                                                    >\n                                                                        Remove\n                                                                    </LemonButton>\n                                                                </div>\n                                                            ),\n                                                        },\n                                                    },\n                                                },\n                                                className: 'p-0 bg-accent-light',\n                                                content: (\n                                                    <HogFunctionMapping\n                                                        key={index}\n                                                        index={index}\n                                                        mapping={mapping}\n                                                        onChange={(mapping) => {\n                                                            if (!mapping) {\n                                                                onChange(value.filter((_, i) => i !== index))\n                                                            } else {\n                                                                onChange(\n                                                                    value.map((m, i) => (i === index ? mapping : m))\n                                                                )\n                                                            }\n                                                        }}\n                                                    />\n                                                ),\n                                            })\n                                        )}\n                                    />\n                                </div>\n                            ) : (\n                                <LemonBanner type=\"warning\" className=\"p-2\">\n                                    You have no mappings configured which effectively means the function is disabled as\n                                    there is nothing to trigger it.\n                                </LemonBanner>\n                            )}\n                        </div>\n                    </div>\n                )\n            }}\n        </LemonField>\n    )\n}\n", "import { LemonLabel, LemonSelect, SpinnerOverlay } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { Sparkline } from 'lib/components/Sparkline'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { urls } from 'scenes/urls'\n\nimport { Query } from '~/queries/Query/Query'\nimport { DataTableNode } from '~/queries/schema/schema-general'\nimport { InsightType } from '~/types'\n\nimport { hogFunctionConfigurationLogic } from '../hogFunctionConfigurationLogic'\nconst EVENT_THRESHOLD_ALERT_LEVEL = 8000\n\nexport function HogFunctionEventEstimates(): JSX.Element | null {\n    const { sparkline, sparklineLoading, eventsDataTableNode, showEventsList } =\n        useValues(hogFunctionConfigurationLogic)\n\n    const { setShowEventsList } = useActions(hogFunctionConfigurationLogic)\n\n    if (!eventsDataTableNode) {\n        return null\n    }\n\n    const dataTableNode: DataTableNode = {\n        ...eventsDataTableNode,\n        full: true,\n    }\n\n    const insightUrl = urls.insightNew({ type: InsightType.SQL, query: dataTableNode })\n\n    const canvasContent = {\n        type: 'doc',\n        content: [\n            {\n                type: 'ph-query',\n                attrs: {\n                    query: dataTableNode,\n                },\n            },\n        ],\n    }\n\n    const canvasUrl = urls.canvas() + '#\uD83E\uDD94=' + btoa(JSON.stringify(canvasContent))\n\n    return (\n        <div className=\"relative p-3 space-y-2 border rounded bg-surface-primary\">\n            <LemonLabel>Matching events</LemonLabel>\n            {sparkline && !sparklineLoading ? (\n                <>\n                    {sparkline.count > EVENT_THRESHOLD_ALERT_LEVEL ? (\n                        <LemonBanner type=\"warning\">\n                            <b>Warning:</b> This destination would have triggered{' '}\n                            <strong>\n                                {sparkline.count ?? 0} time{sparkline.count !== 1 ? 's' : ''}\n                            </strong>{' '}\n                            in the last 7 days. Consider the impact of this function on your destination.\n                        </LemonBanner>\n                    ) : (\n                        <p>\n                            This destination would have triggered{' '}\n                            <strong>\n                                {sparkline.count ?? 0} time{sparkline.count !== 1 ? 's' : ''}\n                            </strong>{' '}\n                            in the last 7 days.\n                        </p>\n                    )}\n                    <Sparkline type=\"bar\" className=\"w-full h-20\" data={sparkline.data} labels={sparkline.labels} />\n                </>\n            ) : sparklineLoading ? (\n                <div className=\"min-h-20\">\n                    <SpinnerOverlay />\n                </div>\n            ) : (\n                <p>The expected volume could not be calculated</p>\n            )}\n\n            <div className=\"flex flex-col gap-2 pt-2 border-t border-dashed\">\n                <LemonButton onClick={() => setShowEventsList(!showEventsList)} fullWidth center>\n                    {showEventsList ? 'Hide matching events' : 'Show matching events'}\n                </LemonButton>\n\n                {showEventsList ? (\n                    <>\n                        <div className=\"flex items-start justify-end\">\n                            <LemonSelect\n                                placeholder=\"Open in...\"\n                                onChange={(target) => {\n                                    if (target === 'insight') {\n                                        // Open a new tab\n                                        window.open(insightUrl, '_blank')\n                                    } else if (target === 'canvas') {\n                                        // Open a new tab\n                                        window.open(canvasUrl, '_blank')\n                                    }\n                                }}\n                                options={[\n                                    { label: 'New insight', value: 'insight' },\n                                    { label: 'New canvas', value: 'canvas' },\n                                ]}\n                            />\n                        </div>\n                        <div className=\"flex flex-col flex-1 overflow-y-auto border rounded max-h-200\">\n                            {eventsDataTableNode && (\n                                <Query\n                                    query={{\n                                        ...eventsDataTableNode,\n                                        full: false,\n                                        showEventFilter: false,\n                                        showPropertyFilter: false,\n                                        embedded: true,\n                                        showOpenEditorButton: false,\n                                        showHogQLEditor: false,\n                                        showTimings: false,\n                                    }}\n                                />\n                            )}\n                        </div>\n                    </>\n                ) : null}\n            </div>\n        </div>\n    )\n}\n"],
  "mappings": "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",
  "names": ["callbacks", "loaded", "runCallbacks", "callback", "shift", "win", "window", "__unlayer_lastEditorId", "EmailEditor", "React", "forwardRef", "props", "ref", "onLoad", "onReady", "scriptUrl", "_props$minHeight", "minHeight", "b", "_props$style", "style", "O", "w", "useState", "editor", "setEditor", "hasLoadedEmbedScript", "setHasLoadedEmbedScript", "editorId", "useMemo", "options", "appearance", "_props$options", "displayMode", "_props$options2", "locale", "_props$options3", "projectId", "_props$options4", "tools", "_props$options5", "id", "source", "name", "version", "useImperativeHandle", "useEffect", "destroy", "push", "scripts", "document", "querySelectorAll", "injected", "forEach", "script", "src", "includes", "embedScript", "createElement", "setAttribute", "onload", "head", "appendChild", "unlayer", "createEditor", "JSON", "stringify", "methodProps", "Object", "keys", "filter", "propName", "test", "methodProp", "addEventListener", "join", "flex", "display", "exports", "a", "require_dist", "__commonJSMin", "exports", "module", "init_dirname", "init_buffer", "init_process", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "NODE_STAGE_TO_PIPELINE_TAB", "pipelineNodeNewLogic", "userLogic", "id", "loadPluginsFromUrl", "s", "pluginsLoading", "_", "p", "stage", "pluginId", "batchDestination", "urls", "capitalizeFirstLetter", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "pipelineNodeLogic", "id", "tab", "title", "_", "s", "p", "stage", "breadcrumbTitle", "urls", "capitalizeFirstLetter", "NODE_STAGE_TO_PIPELINE_TAB", "SIDE_PANEL_CONTEXT_KEY", "node", "nodeBackend", "tabs", "PipelineNodeTab", "t", "values", "props", "actions", "nodeTab", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_kea_forms", "import_kea_router", "init_dirname", "init_buffer", "init_process", "import_chartjs_plugin_trendline", "import_kea", "init_dirname", "init_buffer", "init_process", "import_fast_deep_equal", "import_kea", "import_kea_forms", "import_kea_loaders", "import_kea_router", "import_kea_subscriptions", "EVENT_VOLUME_DAILY_WARNING_THRESHOLD", "UNSAVED_CONFIGURATION_TTL", "NEW_FUNCTION_TEMPLATE", "TYPES_WITH_GLOBALS", "sanitizeConfiguration", "data", "sanitizeInputs", "sanitizedInputs", "input", "secret", "value", "mapping", "templateToConfiguration", "template", "getInputs", "inputs_schema", "inputs", "schema", "getMappingInputs", "convertToHogFunctionInvocationGlobals", "event", "person", "team", "teamLogic", "projectUrl", "asDisplay", "hogFunctionConfigurationLogic", "id", "templateId", "logicKey", "baseKey", "projectLogic", "groupsModel", "userLogic", "pipelineNodeLogic", "showSource", "configuration", "sparklineQuery", "personsCountQuery", "error", "sampleGlobals", "showEventsList", "props", "_", "actions", "values", "res", "api_default", "Co", "lemonToast", "breakpoint", "result", "performQuery", "dataValues", "underThreshold", "overThreshold", "acc", "val", "count", "labels", "errorMessage", "response", "globals", "groupType", "index", "tuple", "properties", "e", "asyncActions", "payload", "s", "hogFunction", "hasAvailableFeature", "hasAddon", "hogFunctionLoading", "templateLoading", "inputErrors", "key", "missing", "emailTemplateErrors", "v", "currentProject", "groupTypes", "currentUrl", "eventId", "uuid", "personId", "dayjs", "exampleInvocationGlobals", "useMapping", "seriesProperties", "allPossibleEventFilters", "allPossibleActionFilters", "eventProperties", "hogql", "action", "actionProperties", "globalProperties", "property", "equal", "matchingFilters", "type", "query", "name", "escapePropertyAsHogQlIdentifier", "baseEventsQuery", "defaultDataTableColumns", "lastEventQuery", "configStr", "cache", "errorObject", "maybeValidationError", "baseConfig", "config", "t", "paramsFromUrl", "unsavedConfigurationToApply", "newConfig", "originalTemplate", "hogFunctionNewUrl", "deleteWithUndo", "undo", "hogFunctionUrl", "searchParams", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "getFilterOptions", "logicKey", "getSimpleFilterValue", "value", "setSimpleFilterValue", "options", "option", "HogFunctionFiltersInternal", "logicProps", "hogFunctionConfigurationLogic", "LemonField", "onChange", "LemonSelect", "import_jsx_runtime", "sanitizeActionFilters", "filters", "sanitized", "f", "HogFunctionFilters", "groupsTaxonomicTypes", "groupsModel", "configuration", "type", "useMapping", "hogFunctionConfigurationLogic", "LemonField", "value", "onChange", "PropertyFilters", "properties", "HogFunctionFiltersInternal", "isLegacyPlugin", "showMasking", "showDropEvents", "TestAccountFilterSwitch", "filter_test_accounts", "LemonLabel", "ActionFilter", "payload", "LemonSwitch", "drop_events", "LemonBanner", "LemonSelect", "val", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_react_email_editor", "init_dirname", "init_buffer", "init_process", "import_kea", "emailTemplaterLogic", "emailEditorRef", "isModalOpen", "_", "props", "values", "actions", "editor", "data", "res", "setFormValue", "capitalizeFirstLetter", "pathParts", "escapeHTMLStringCurlies", "value", "htmlString", "doc", "escapeCurlyBraces", "text", "processNode", "node", "element", "commentContent", "import_jsx_runtime", "EmailTemplaterForm", "mode", "props", "setEmailEditorRef", "emailEditorReady", "setIsModalOpen", "emailTemplaterLogic", "field", "LemonField", "value", "onChange", "error", "LemonLabel", "capitalizeFirstLetter", "CodeEditorInline", "EmailEditor", "LemonButton", "EmailTemplaterModal", "isModalOpen", "onSave", "LemonModal", "EmailTemplater", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "HogFunctionInputIntegration", "schema", "props", "persistForUnload", "hogFunctionConfigurationLogic", "IntegrationChoice", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "googleAdsIntegrationLogic", "props", "key", "customerId", "api_default", "import_jsx_runtime", "getGoogleAdsAccountOptions", "googleAdsAccounts", "customer", "getGoogleAdsConversionActionOptions", "googleAdsConversionActions", "id", "name", "GoogleAdsConversionActionPicker", "onChange", "value", "requiresFieldValue", "integration", "disabled", "googleAdsConversionActionsLoading", "googleAdsIntegrationLogic", "loadGoogleAdsConversionActions", "googleAdsConversionActionOptions", "LemonInputSelect", "val", "GoogleAdsCustomerIdPicker", "googleAdsAccessibleAccounts", "googleAdsAccessibleAccountsLoading", "loadGoogleAdsAccessibleAccounts", "googleAdsAccountOptions", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "linkedInAdsIntegrationLogic", "props", "key", "accountId", "customerId", "api_default", "import_jsx_runtime", "getLinkedInAdsAccountOptions", "linkedInAdsAccounts", "account", "getLinkedInAdsConversionRuleOptions", "linkedInAdsConversionRules", "id", "name", "LinkedInAdsConversionRulePicker", "onChange", "value", "requiresFieldValue", "integration", "disabled", "linkedInAdsConversionRulesLoading", "linkedInAdsIntegrationLogic", "loadLinkedInAdsConversionRules", "linkedInAdsConversionRuleOptions", "LemonInputSelect", "val", "LinkedInAdsAccountIdPicker", "linkedInAdsAccountsLoading", "loadLinkedInAdsAccounts", "linkedInAdsAccountOptions", "import_jsx_runtime", "HogFunctionInputIntegrationField", "schema", "value", "onChange", "configuration", "hogFunctionConfigurationLogic", "integrationsLoading", "integrations", "integrationsLogic", "LemonSkeleton", "relatedSchemaIntegration", "input", "integrationId", "integration", "requiresFieldValue", "requiresFieldSchema", "SlackChannelPicker", "x", "GoogleAdsConversionActionPicker", "GoogleAdsCustomerIdPicker", "LinkedInAdsConversionRulePicker", "LinkedInAdsAccountIdPicker", "import_jsx_runtime", "typeList", "JsonConfigField", "props", "globalsWithInputs", "hogFunctionConfigurationLogic", "CodeEditorResizeable", "v", "EmailTemplateField", "schema", "logicProps", "EmailTemplater", "HogFunctionTemplateInput", "CodeEditorInline", "LemonInput", "DictionaryField", "onChange", "value", "templating", "entries", "setEntries", "val", "key", "index", "newEntries", "LemonButton", "IconX", "IconPlus", "HogFunctionInputRenderer", "disabled", "LemonSelect", "LemonSwitch", "checked", "HogFunctionInputIntegration", "HogFunctionInputIntegrationField", "HogFunctionInputSchemaControls", "onDone", "supportsSecrets", "_onChange", "data", "setLocalVariableError", "localVariableValue", "setLocalVariableValue", "localVariableError", "type", "capitalizeFirstLetter", "LemonCheckbox", "required", "secret", "IconTrash", "LemonField", "label", "LemonTextArea", "description", "LemonInputSelect", "choice", "choices", "integration", "HogFunctionInputWithSchema", "configuration", "setConfigurationValue", "attributes", "listeners", "setNodeRef", "transform", "transition", "useSortable", "showSource", "editing", "setEditing", "onSchemaChange", "newSchema", "inputsSchema", "s", "modifiedSchema", "supportsTemplating", "CSS", "LemonLabel", "Tooltip", "IconLock", "LemonTag", "IconInfo", "IconGear", "HogFunctionInputs", "inputSchemas", "inputSchemaIds", "DndContext", "closestCenter", "active", "over", "oldIndex", "newIndex", "arrayMove", "SortableContext", "verticalListSortingStrategy", "i", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_kea_forms", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "convertToTransformationEvent", "result", "properties", "convertFromTransformationEvent", "hogFunctionTestLogic", "id", "templateId", "props", "hogFunctionConfigurationLogic", "groupsModel", "expanded", "name", "globals", "index", "mode", "error", "value", "editor", "decorations", "decorationIds", "state", "_", "getCurrentTeamId", "i", "values", "actions", "sampleGlobals", "event", "model", "err", "match", "position", "pos", "testResults", "editors", "monacoEditor", "inputLines", "outputLines", "diffLineIndex", "lineHeight", "tryJsonParse", "data", "lemonToast", "parsedData", "configuration", "sanitizeConfiguration", "res", "api_default", "e", "s", "testResult", "testInvocation", "input", "output", "import_jsx_runtime", "HogFunctionTestEditor", "value", "onChange", "readOnly", "editorRef", "decorationsRef", "handleValidation", "newValue", "model", "editor", "err", "match", "position", "pos", "MarkerSeverity", "CodeEditorResizeable", "HogFunctionTest", "logicProps", "hogFunctionConfigurationLogic", "isTestInvocationSubmitting", "testResult", "expanded", "sampleGlobalsLoading", "sampleGlobalsError", "type", "savedGlobals", "testInvocation", "testResultMode", "sortedTestsResult", "jsonError", "fetchCancelled", "hogFunctionTestLogic", "submitTestInvocation", "setTestResult", "toggleExpanded", "loadSampleGlobals", "deleteSavedGlobals", "setSampleGlobals", "saveGlobals", "setTestResultMode", "cancelSampleGlobalsLoading", "testResultsRef", "clsx", "Spinner", "LemonButton", "More", "LemonField", "LemonSwitch", "v", "Tooltip", "IconInfo", "LemonDivider", "name", "globals", "index", "IconX", "LemonBanner", "LemonLabel", "LemonSegmentedButton", "LemonTable", "timestamp", "TZLabel", "message", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_react", "import_jsx_runtime", "humanize", "value", "char", "MappingSummary", "mapping", "events", "event", "actions", "action", "propertyFiltersCount", "eventSummary", "firstInput", "firstInputValue", "Tooltip", "IconFilter", "IconArrowRight", "LemonTag", "HogFunctionMapping", "index", "onChange", "groupsTaxonomicTypes", "groupsModel", "showSource", "hogFunctionConfigurationLogic", "LemonBanner", "LemonLabel", "ActionFilter", "f", "HogFunctionInputs", "key", "LemonButton", "IconPlus", "HogFunctionMappings", "useMapping", "mappingTemplates", "configuration", "activeKeys", "setActiveKeys", "LemonField", "addMapping", "template", "mappingTemplate", "t", "name", "inputs", "m", "duplicateMapping", "newMappings", "removeMapping", "_", "i", "toggleDisabled", "addMappingButton", "LemonSelect", "LemonCollapse", "IconEllipsis", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "EVENT_THRESHOLD_ALERT_LEVEL", "HogFunctionEventEstimates", "sparkline", "sparklineLoading", "eventsDataTableNode", "showEventsList", "hogFunctionConfigurationLogic", "setShowEventsList", "dataTableNode", "insightUrl", "urls", "canvasContent", "canvasUrl", "LemonLabel", "LemonBanner", "Sparkline", "SpinnerOverlay", "LemonButton", "LemonSelect", "target", "Query", "import_jsx_runtime", "HogFunctionConfiguration", "templateId", "id", "logicKey", "displayOptions", "logicProps", "logic", "hogFunctionConfigurationLogic", "isConfigurationSubmitting", "configurationChanged", "showSource", "configuration", "loading", "loaded", "hogFunction", "willReEnableOnSave", "willChangeEnabledOnSave", "globalsWithInputs", "showPaygate", "hasAddon", "personsCount", "personsCountLoading", "personsListQuery", "template", "templateHasChanged", "type", "usesGroups", "hasGroupsAddon", "submitConfiguration", "resetForm", "setShowSource", "duplicate", "resetToTemplate", "duplicateFromTemplate", "setConfigurationValue", "deleteHogFunction", "canEditTransformationHogCode", "useFeatureFlag", "SpinnerOverlay", "NotFound", "isLegacyPlugin", "headerButtons", "More", "LemonButton", "LemonDivider", "saveButtons", "PayGateMini", "embedded", "includeHeaderButtons", "showOverview", "showFilters", "showExpectedVolume", "showStatus", "showEnabled", "canEditSource", "showPersonsCount", "showTesting", "showLeftPanel", "PageHeader", "LemonBanner", "clsx", "LemonField", "value", "onChange", "HogFunctionIconEditable", "val", "DestinationTag", "HogFunctionStatusIndicator", "LemonSwitch", "LemonInput", "LemonTextArea", "LemonDropdown", "Link", "LemonTag", "HogFunctionFilters", "LemonLabel", "urls", "HogFunctionEventEstimates", "PayGateButton", "HogFunctionInputs", "IconPlus", "HogFunctionMappings", "CodeEditorResizeable", "v", "HogFunctionTest"]
}
