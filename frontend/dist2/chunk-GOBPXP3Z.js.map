{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/classnames@2.5.1/node_modules/classnames/index.js", "../../products/llm_observability/frontend/LLMInputOutput.tsx", "../../products/llm_observability/frontend/utils.ts", "../../products/llm_observability/frontend/ConversationDisplay/ConversationMessagesDisplay.tsx", "../../products/llm_observability/frontend/ConversationDisplay/MetadataHeader.tsx", "../../products/llm_observability/frontend/components/MetadataTag.tsx"],
  "sourcesContent": ["/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = '';\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (arg) {\n\t\t\t\tclasses = appendClass(classes, parseValue(arg));\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}\n\n\tfunction parseValue (arg) {\n\t\tif (typeof arg === 'string' || typeof arg === 'number') {\n\t\t\treturn arg;\n\t\t}\n\n\t\tif (typeof arg !== 'object') {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (Array.isArray(arg)) {\n\t\t\treturn classNames.apply(null, arg);\n\t\t}\n\n\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\treturn arg.toString();\n\t\t}\n\n\t\tvar classes = '';\n\n\t\tfor (var key in arg) {\n\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\tclasses = appendClass(classes, key);\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}\n\n\tfunction appendClass (value, newClass) {\n\t\tif (!newClass) {\n\t\t\treturn value;\n\t\t}\n\t\n\t\tif (value) {\n\t\t\treturn value + ' ' + newClass;\n\t\t}\n\t\n\t\treturn value + newClass;\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n", "import { IconArrowDown, IconArrowUp } from 'lib/lemon-ui/icons'\nimport { LemonDivider } from 'lib/lemon-ui/LemonDivider'\n\nexport function LLMInputOutput({\n    inputDisplay,\n    outputDisplay,\n    inputHeading = 'Input',\n    outputHeading = 'Output',\n    bordered = false,\n}: {\n    inputDisplay: JSX.Element | JSX.Element[]\n    outputDisplay: JSX.Element | JSX.Element[]\n    inputHeading?: string\n    outputHeading?: string\n    bordered?: boolean\n}): JSX.Element {\n    return (\n        <>\n            <LemonDivider className=\"my-3\" />\n            <div className={bordered ? 'bg-surface-primary rounded-lg border p-2' : undefined}>\n                <h4 className=\"flex items-center gap-x-1.5 text-xs font-semibold mb-2\">\n                    <IconArrowUp className=\"text-base\" />\n                    {inputHeading}\n                </h4>\n                {inputDisplay}\n                <h4 className=\"flex items-center gap-x-1.5 text-xs font-semibold my-2\">\n                    <IconArrowDown className=\"text-base\" />\n                    {outputHeading}\n                </h4>\n                {outputDisplay}\n            </div>\n        </>\n    )\n}\n", "import { dayjs } from 'lib/dayjs'\n\nimport { LLMTrace, LLMTraceEvent } from '~/queries/schema/schema-general'\n\nimport {\n    AnthropicInputMessage,\n    AnthropicTextMessage,\n    AnthropicToolCallMessage,\n    AnthropicToolResultMessage,\n    CompatMessage,\n    CompatToolCall,\n    OpenAICompletionMessage,\n    OpenAIToolCall,\n} from './types'\n\nfunction formatUsage(inputTokens: number, outputTokens?: number | null): string | null {\n    return `${inputTokens} \u2192 ${outputTokens || 0} (\u2211\u00A0${inputTokens + (outputTokens || 0)})`\n}\n\nexport function formatLLMUsage(trace_or_event: LLMTrace | LLMTraceEvent): string | null {\n    if ('properties' in trace_or_event && typeof trace_or_event.properties.$ai_input_tokens === 'number') {\n        return formatUsage(trace_or_event.properties.$ai_input_tokens, trace_or_event.properties.$ai_output_tokens)\n    }\n\n    if (!('properties' in trace_or_event) && typeof trace_or_event.inputTokens === 'number') {\n        return formatUsage(trace_or_event.inputTokens, trace_or_event.outputTokens)\n    }\n\n    return null\n}\n\nexport function formatLLMLatency(latency: number): string {\n    return `${Math.round(latency * 100) / 100}\u00A0s`\n}\n\nconst usdFormatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    maximumFractionDigits: 4,\n})\n\nexport function formatLLMCost(cost: number): string {\n    return usdFormatter.format(cost)\n}\n\nexport function isLLMTraceEvent(item: LLMTrace | LLMTraceEvent): item is LLMTraceEvent {\n    return 'properties' in item\n}\n\nexport function isOpenAICompatToolCall(input: unknown): input is OpenAIToolCall {\n    return (\n        input !== null &&\n        typeof input === 'object' &&\n        'type' in input &&\n        'function' in input &&\n        input.type === 'function' &&\n        typeof input.function === 'object' &&\n        input.function !== null\n    )\n}\n\nexport function isOpenAICompatToolCallsArray(input: any): input is OpenAIToolCall[] {\n    return Array.isArray(input) && input.every(isOpenAICompatToolCall)\n}\n\nexport function isOpenAICompatMessage(output: unknown): output is OpenAICompletionMessage {\n    return (\n        !!output &&\n        typeof output === 'object' &&\n        'role' in output &&\n        'content' in output &&\n        typeof output.content === 'string'\n    )\n}\n\nexport function parseOpenAIToolCalls(toolCalls: OpenAIToolCall[]): CompatToolCall[] {\n    const toolsWithParsedArguments = toolCalls.map((toolCall) => ({\n        ...toolCall,\n        function: {\n            ...toolCall.function,\n            arguments:\n                typeof toolCall.function.arguments === 'string'\n                    ? JSON.parse(toolCall.function.arguments)\n                    : toolCall.function.arguments,\n        },\n    }))\n\n    return toolsWithParsedArguments\n}\n\nexport function isAnthropicTextMessage(output: unknown): output is AnthropicTextMessage {\n    return !!output && typeof output === 'object' && 'type' in output && output.type === 'text'\n}\n\nexport function isAnthropicToolCallMessage(output: unknown): output is AnthropicToolCallMessage {\n    return !!output && typeof output === 'object' && 'type' in output && output.type === 'tool_use'\n}\n\nexport function isAnthropicToolResultMessage(output: unknown): output is AnthropicToolResultMessage {\n    return !!output && typeof output === 'object' && 'type' in output && output.type === 'tool_result'\n}\n\nexport function isAnthropicRoleBasedMessage(input: unknown): input is AnthropicInputMessage {\n    return (\n        !!input &&\n        typeof input === 'object' &&\n        'role' in input &&\n        'content' in input &&\n        (typeof input.content === 'string' || Array.isArray(input.content))\n    )\n}\n\n/**\n * Normalizes a message from an LLM provider into a format that is compatible with the PostHog LLM Observability schema.\n *\n * @param output - Original message from an LLM provider.\n * @param defaultRole - Optional default role to use if the message doesn't have one.\n * @returns The normalized message.\n */\nexport function normalizeMessage(output: unknown, defaultRole?: string): CompatMessage[] {\n    const role = defaultRole || 'assistant'\n\n    // OpenAI\n    if (isOpenAICompatMessage(output)) {\n        return [\n            {\n                ...output,\n                role: output.role,\n                content: output.content,\n                tool_calls: isOpenAICompatToolCallsArray(output.tool_calls)\n                    ? parseOpenAIToolCalls(output.tool_calls)\n                    : undefined,\n                tool_call_id: output.tool_call_id,\n            },\n        ]\n    }\n\n    // Anthropic\n    // Text object\n    if (isAnthropicTextMessage(output)) {\n        return [\n            {\n                role,\n                content: output.text,\n            },\n        ]\n    }\n\n    // Tool call completion\n    if (isAnthropicToolCallMessage(output)) {\n        return [\n            {\n                role,\n                content: '',\n                tool_calls: [\n                    {\n                        type: 'function',\n                        id: output.id,\n                        function: {\n                            name: output.name,\n                            arguments: output.input,\n                        },\n                    },\n                ],\n            },\n        ]\n    }\n\n    // Tool result completion\n    if (isAnthropicToolResultMessage(output)) {\n        if (Array.isArray(output.content)) {\n            return output.content\n                .map((content) => normalizeMessage(content, role))\n                .flat()\n                .map((message) => ({\n                    ...message,\n                    tool_call_id: output.tool_use_id,\n                }))\n        }\n\n        return [\n            {\n                role,\n                content: output.content,\n                tool_call_id: output.tool_use_id,\n            },\n        ]\n    }\n\n    // Input message\n    if (isAnthropicRoleBasedMessage(output)) {\n        // Content is a nested array (tool responses, etc.)\n        if (Array.isArray(output.content)) {\n            return output.content.map((content) => normalizeMessage(content, output.role)).flat()\n        }\n\n        return [\n            {\n                role: output.role,\n                content: output.content,\n            },\n        ]\n    }\n\n    // Unsupported message.\n    return [\n        {\n            role: 'message',\n            content: typeof output === 'string' ? output : JSON.stringify(output),\n        },\n    ]\n}\n\nexport function normalizeMessages(output: unknown, defaultRole?: string): CompatMessage[] | null {\n    if (!output) {\n        return null\n    }\n\n    if (Array.isArray(output)) {\n        return output.map((message) => normalizeMessage(message, defaultRole)).flat()\n    }\n\n    if (typeof output === 'object' && 'choices' in output && Array.isArray(output.choices)) {\n        return output.choices.map((message) => normalizeMessage(message, defaultRole)).flat()\n    }\n\n    return null\n}\n\nexport function removeMilliseconds(timestamp: string): string {\n    return dayjs(timestamp).utc().format('YYYY-MM-DDTHH:mm:ss[Z]')\n}\n\nexport function formatLLMEventTitle(event: LLMTrace | LLMTraceEvent): string {\n    if (isLLMTraceEvent(event)) {\n        if (event.event === '$ai_generation') {\n            const title = event.properties.$ai_model || 'Generation'\n            if (event.properties.$ai_provider) {\n                return `${title} (${event.properties.$ai_provider})`\n            }\n\n            return title\n        }\n\n        return event.properties.$ai_span_name ?? 'Span'\n    }\n\n    return event.traceName ?? 'Trace'\n}\n", "import { IconEye, IconMarkdown, IconMarkdownFilled } from '@posthog/icons'\nimport { LemonButton } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { CopyToClipboardInline } from 'lib/components/CopyToClipboard'\nimport { JSONViewer } from 'lib/components/JSONViewer'\nimport { IconExclamation, IconEyeHidden } from 'lib/lemon-ui/icons'\nimport { LemonMarkdown } from 'lib/lemon-ui/LemonMarkdown'\nimport { isObject } from 'lib/utils'\nimport React from 'react'\n\nimport { LLMInputOutput } from '../LLMInputOutput'\nimport { CompatMessage } from '../types'\nimport { normalizeMessages } from '../utils'\n\nexport function ConversationMessagesDisplay({\n    input,\n    output,\n    httpStatus,\n    raisedError,\n    bordered = false,\n}: {\n    input: any\n    output: any\n    httpStatus?: number\n    raisedError?: boolean\n    bordered?: boolean\n}): JSX.Element {\n    const inputNormalized = normalizeMessages(input, 'user')\n    const outputNormalized = normalizeMessages(output, 'assistant')\n\n    const outputDisplay = raisedError ? (\n        <div className=\"flex items-center gap-1.5 rounded border text-default p-2 font-medium bg-[var(--bg-fill-error-tertiary)] border-danger overflow-x-scroll\">\n            <IconExclamation className=\"text-base\" />\n            {isObject(output) ? (\n                <JSONViewer src={output} collapsed={4} />\n            ) : (\n                <span className=\"font-mono\">\n                    {(() => {\n                        try {\n                            const parsedJson = JSON.parse(output)\n                            return isObject(parsedJson) ? (\n                                <JSONViewer src={parsedJson} collapsed={5} />\n                            ) : (\n                                JSON.stringify(output ?? null)\n                            )\n                        } catch {\n                            return JSON.stringify(output ?? null)\n                        }\n                    })()}\n                </span>\n            )}\n        </div>\n    ) : (\n        outputNormalized?.map((message, i) => <LLMMessageDisplay key={i} message={message} isOutput />) || (\n            <div className=\"rounded border text-default p-2 italic bg-[var(--bg-fill-error-tertiary)]\">No output</div>\n        )\n    )\n\n    return (\n        <LLMInputOutput\n            inputDisplay={\n                inputNormalized?.map((message, i) => (\n                    <>\n                        <LLMMessageDisplay key={i} message={message} />\n                        {i < inputNormalized.length - 1 && (\n                            <div className=\"border-l ml-2 h-2\" /> /* Spacer connecting messages visually */\n                        )}\n                    </>\n                )) || (\n                    <div className=\"rounded border text-default p-2 italic bg-[var(--bg-fill-error-tertiary)]\">\n                        No input\n                    </div>\n                )\n            }\n            outputDisplay={outputDisplay}\n            outputHeading={\n                raisedError\n                    ? `Error (${httpStatus})`\n                    : `Output${outputNormalized && outputNormalized.length > 1 ? ' (multiple choices)' : ''}`\n            }\n            bordered={bordered}\n        />\n    )\n}\n\nexport const LLMMessageDisplay = React.memo(\n    ({ message, isOutput }: { message: CompatMessage; isOutput?: boolean }): JSX.Element => {\n        const { role, content, ...additionalKwargs } = message\n        const [isRenderingMarkdown, setIsRenderingMarkdown] = React.useState(true)\n        const [show, setShow] = React.useState(true)\n\n        // Compute whether the content looks like Markdown.\n        // (Heuristic: looks for code blocks, blockquotes, or headings)\n        const isMarkdownCandidate = content ? /(\\n\\s*```|^>\\s|#{1,6}\\s)/.test(content) : false\n\n        // Render any additional keyword arguments as JSON.\n        const additionalKwargsEntries = Object.fromEntries(\n            Object.entries(additionalKwargs).filter(([, value]) => value !== undefined)\n        )\n\n        const renderMessageContent = (content: string): JSX.Element | null => {\n            if (!content) {\n                return null\n            }\n            const trimmed = content.trim()\n\n            // If content is valid JSON (we only check when it starts and ends with {} or [] to avoid false positives)\n            if (\n                (trimmed.startsWith('{') && trimmed.endsWith('}')) ||\n                (trimmed.startsWith('[') && trimmed.endsWith(']'))\n            ) {\n                try {\n                    const parsed = JSON.parse(content)\n                    if (typeof parsed === 'object' && parsed !== null) {\n                        return <JSONViewer src={parsed} name={null} collapsed={5} />\n                    }\n                } catch {\n                    // Not valid JSON. Fall through to Markdown/plain text handling.\n                }\n            }\n\n            // If the content appears to be Markdown, render based on the toggle.\n            if (isMarkdownCandidate) {\n                return isRenderingMarkdown ? (\n                    <LemonMarkdown>{content}</LemonMarkdown>\n                ) : (\n                    <span className=\"font-mono text-xs whitespace-pre-wrap\">{content}</span>\n                )\n            }\n\n            // Fallback: render as plain text.\n            return <span className=\"text-xs whitespace-pre-wrap\">{content}</span>\n        }\n\n        return (\n            <div\n                className={clsx(\n                    'rounded border text-default',\n                    isOutput\n                        ? 'bg-[var(--bg-fill-success-tertiary)]'\n                        : role === 'user'\n                        ? 'bg-[var(--bg-fill-tertiary)]'\n                        : role === 'assistant'\n                        ? 'bg-[var(--bg-fill-info-tertiary)]'\n                        : null\n                )}\n            >\n                <div className=\"flex items-center gap-1 w-full px-2 h-6 text-xs font-medium\">\n                    <span className=\"grow\">{role}</span>\n                    {content && (\n                        <>\n                            <LemonButton\n                                size=\"small\"\n                                noPadding\n                                icon={show ? <IconEyeHidden /> : <IconEye />}\n                                tooltip=\"Toggle message content\"\n                                onClick={() => setShow((prev) => !prev)}\n                            />\n                            {isMarkdownCandidate && (\n                                <LemonButton\n                                    size=\"small\"\n                                    noPadding\n                                    icon={isRenderingMarkdown ? <IconMarkdownFilled /> : <IconMarkdown />}\n                                    tooltip=\"Toggle markdown rendering\"\n                                    onClick={() => setIsRenderingMarkdown((prev) => !prev)}\n                                />\n                            )}\n                            <CopyToClipboardInline\n                                iconSize=\"small\"\n                                description=\"message content\"\n                                explicitValue={content}\n                            />\n                        </>\n                    )}\n                </div>\n                {show && !!content && <div className=\"p-2 border-t\">{renderMessageContent(content)}</div>}\n                {show && Object.keys(additionalKwargsEntries).length > 0 && (\n                    <div className=\"p-2 text-xs border-t\">\n                        <JSONViewer src={additionalKwargsEntries} name={null} collapsed={5} />\n                    </div>\n                )}\n            </div>\n        )\n    }\n)\nLLMMessageDisplay.displayName = 'LLMMessageDisplay'\n", "import { LemonTag } from '@posthog/lemon-ui'\nimport classNames from 'classnames'\nimport { lowercaseFirstLetter } from 'lib/utils'\n\nimport { MetadataTag } from '../components/MetadataTag'\n\nexport function MetadataHeader({\n    inputTokens,\n    outputTokens,\n    totalCostUsd,\n    model,\n    latency,\n    className,\n    isError,\n}: {\n    inputTokens?: number\n    outputTokens?: number\n    totalCostUsd?: number\n    model?: string\n    latency?: number\n    isError?: boolean\n    className?: string\n}): JSX.Element {\n    return (\n        <div className={classNames('flex flex-wrap gap-2', className)}>\n            {isError && <LemonTag type=\"danger\">Error</LemonTag>}\n            {typeof latency === 'number' && (\n                <MetadataTag label=\"Latency\">{`${Math.round(latency * 10e2) / 10e2} s of latency`}</MetadataTag>\n            )}\n            {typeof inputTokens === 'number' && typeof outputTokens === 'number' && (\n                <MetadataTag label=\"Token usage\">\n                    {`${inputTokens} prompt tokens \u2192 ${outputTokens} completion tokens (\u2211 ${\n                        inputTokens + outputTokens\n                    })`}\n                </MetadataTag>\n            )}\n            {model && (\n                <MetadataTag label=\"Model\" textToCopy={lowercaseFirstLetter(model)}>\n                    {model}\n                </MetadataTag>\n            )}\n            {typeof totalCostUsd === 'number' && (\n                <MetadataTag label=\"Total generation cost\">{`$${Math.round(totalCostUsd * 10e6) / 10e6}`}</MetadataTag>\n            )}\n        </div>\n    )\n}\n", "import { LemonTag, Tooltip } from '@posthog/lemon-ui'\nimport { CopyToClipboardInline } from 'lib/components/CopyToClipboard'\n\ninterface MetadataTagProps {\n    children: string\n    label: string\n    textToCopy?: string\n}\n\nexport function MetadataTag({ children, label, textToCopy }: MetadataTagProps): JSX.Element {\n    let wrappedChildren: React.ReactNode = children\n    if (typeof textToCopy === 'string') {\n        wrappedChildren = (\n            <CopyToClipboardInline iconSize=\"xsmall\" description={textToCopy} tooltipMessage={label}>\n                {children}\n            </CopyToClipboardInline>\n        )\n    } else {\n        wrappedChildren = <Tooltip title={label}>{children}</Tooltip>\n    }\n\n    return <LemonTag className=\"bg-surface-primary cursor-default\">{wrappedChildren}</LemonTag>\n}\n"],
  "mappings": "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",
  "names": ["require_classnames", "__commonJSMin", "exports", "module", "init_dirname", "init_buffer", "init_process", "hasOwn", "classNames", "classes", "i", "arg", "appendClass", "parseValue", "key", "value", "newClass", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "LLMInputOutput", "inputDisplay", "outputDisplay", "inputHeading", "outputHeading", "bordered", "LemonDivider", "IconArrowUp", "IconArrowDown", "init_dirname", "init_buffer", "init_process", "formatUsage", "inputTokens", "outputTokens", "formatLLMUsage", "trace_or_event", "formatLLMLatency", "latency", "usdFormatter", "formatLLMCost", "cost", "isLLMTraceEvent", "item", "isOpenAICompatToolCall", "input", "isOpenAICompatToolCallsArray", "isOpenAICompatMessage", "output", "parseOpenAIToolCalls", "toolCalls", "toolCall", "isAnthropicTextMessage", "isAnthropicToolCallMessage", "isAnthropicToolResultMessage", "isAnthropicRoleBasedMessage", "normalizeMessage", "defaultRole", "role", "content", "message", "normalizeMessages", "removeMilliseconds", "timestamp", "dayjs", "formatLLMEventTitle", "event", "title", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_react", "import_jsx_runtime", "ConversationMessagesDisplay", "input", "output", "httpStatus", "raisedError", "bordered", "inputNormalized", "normalizeMessages", "outputNormalized", "outputDisplay", "IconExclamation", "isObject", "JSONViewer", "parsedJson", "message", "i", "LLMMessageDisplay", "LLMInputOutput", "React", "isOutput", "role", "content", "additionalKwargs", "isRenderingMarkdown", "setIsRenderingMarkdown", "show", "setShow", "isMarkdownCandidate", "additionalKwargsEntries", "value", "renderMessageContent", "trimmed", "parsed", "LemonMarkdown", "clsx", "LemonButton", "IconEyeHidden", "IconEye", "prev", "IconMarkdownFilled", "IconMarkdown", "CopyToClipboardInline", "init_dirname", "init_buffer", "init_process", "import_classnames", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "MetadataTag", "children", "label", "textToCopy", "wrappedChildren", "CopyToClipboardInline", "Tooltip", "LemonTag", "import_jsx_runtime", "MetadataHeader", "inputTokens", "outputTokens", "totalCostUsd", "model", "latency", "className", "isError", "classNames", "LemonTag", "MetadataTag", "lowercaseFirstLetter"]
}
