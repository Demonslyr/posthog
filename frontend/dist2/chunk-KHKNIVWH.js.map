{
  "version": 3,
  "sources": ["../src/scenes/dashboard/newDashboardLogic.ts"],
  "sourcesContent": ["import { actions, connect, isBreakpoint, kea, key, listeners, path, props, reducers, selectors } from 'kea'\nimport { forms } from 'kea-forms'\nimport { actionToUrl, router, urlToAction } from 'kea-router'\nimport api from 'lib/api'\nimport { DashboardRestrictionLevel } from 'lib/constants'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast/LemonToast'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { MathAvailability } from 'scenes/insights/filters/ActionFilter/ActionFilterRow/ActionFilterRow'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { urls } from 'scenes/urls'\n\nimport { dashboardsModel } from '~/models/dashboardsModel'\nimport { legacyEntityToNode, sanitizeRetentionEntity } from '~/queries/nodes/InsightQuery/utils/filtersToQueryNode'\nimport { getQueryBasedDashboard } from '~/queries/nodes/InsightViz/utils'\nimport { NodeKind } from '~/queries/schema/schema-general'\nimport { isInsightVizNode } from '~/queries/utils'\nimport { DashboardTemplateType, DashboardTemplateVariableType, DashboardTile, DashboardType, JsonType } from '~/types'\n\nimport type { newDashboardLogicType } from './newDashboardLogicType'\n\nexport interface NewDashboardForm {\n    name: string\n    description: ''\n    show: boolean\n    useTemplate: string\n    restrictionLevel: DashboardRestrictionLevel\n}\n\nconst defaultFormValues: NewDashboardForm = {\n    name: '',\n    description: '',\n    show: false,\n    useTemplate: '',\n    restrictionLevel: DashboardRestrictionLevel.EveryoneInProjectCanEdit,\n}\n\nexport interface NewDashboardLogicProps {\n    featureFlagId?: number\n}\n\n// Currently this is a very generic recursive function incase we want to add template variables to aspects beyond events\nexport function applyTemplate(\n    obj: DashboardTile | JsonType,\n    variables: DashboardTemplateVariableType[],\n    queryKind: NodeKind | null\n): JsonType {\n    if (typeof obj === 'string') {\n        if (obj.startsWith('{') && obj.endsWith('}')) {\n            const variableId = obj.substring(1, obj.length - 1)\n            const variable = variables.find((variable) => variable.id === variableId)\n            if (variable && variable.default) {\n                // added for future compatibility - at the moment we only have event variables\n                const isEventVariable = variable.type === 'event'\n\n                if (queryKind && isEventVariable) {\n                    let mathAvailability = MathAvailability.None\n                    if (queryKind === NodeKind.TrendsQuery) {\n                        mathAvailability = MathAvailability.All\n                    } else if (queryKind === NodeKind.StickinessQuery) {\n                        mathAvailability = MathAvailability.ActorsOnly\n                    } else if (queryKind === NodeKind.FunnelsQuery) {\n                        mathAvailability = MathAvailability.FunnelsOnly\n                    }\n                    return (\n                        queryKind === NodeKind.RetentionQuery\n                            ? sanitizeRetentionEntity(variable.default as any)\n                            : legacyEntityToNode(variable.default as any, true, mathAvailability)\n                    ) as JsonType\n                }\n\n                return variable.default as JsonType\n            }\n            return obj\n        }\n    }\n    if (Array.isArray(obj)) {\n        return obj.map((item) => applyTemplate(item, variables, queryKind))\n    }\n    if (typeof obj === 'object' && obj !== null) {\n        const newObject: JsonType = {}\n        for (const [key, value] of Object.entries(obj)) {\n            newObject[key] = applyTemplate(value, variables, queryKind)\n        }\n        return newObject\n    }\n    return obj\n}\n\nfunction makeTilesUsingVariables(tiles: DashboardTile[], variables: DashboardTemplateVariableType[]): JsonType[] {\n    return tiles.map((tile: DashboardTile) => {\n        const isQueryBased = 'query' in tile && tile.query != null\n        const queryKind: NodeKind | null = isQueryBased\n            ? isInsightVizNode(tile.query as any)\n                ? (tile.query as any)?.source.kind\n                : (tile.query as any)?.kind\n            : null\n        return applyTemplate(tile, variables, queryKind)\n    })\n}\n\nexport const newDashboardLogic = kea<newDashboardLogicType>([\n    props({} as NewDashboardLogicProps),\n    key(({ featureFlagId }) => featureFlagId ?? 'new'),\n    path(['scenes', 'dashboard', 'newDashboardLogic']),\n    connect({\n        logic: [dashboardsModel],\n        values: [featureFlagLogic, ['featureFlags']],\n    }),\n    actions({\n        setIsLoading: (isLoading: boolean) => ({ isLoading }),\n        showNewDashboardModal: true,\n        showVariableSelectModal: (template: DashboardTemplateType) => ({ template }),\n        hideNewDashboardModal: true,\n        addDashboard: (form: Partial<NewDashboardForm>) => ({ form }),\n        setActiveDashboardTemplate: (template: DashboardTemplateType) => ({ template }),\n        clearActiveDashboardTemplate: true,\n        createDashboardFromTemplate: (\n            template: DashboardTemplateType,\n            variables: DashboardTemplateVariableType[],\n            redirectAfterCreation?: boolean,\n            creationContext: string | null = null\n        ) => ({\n            template,\n            variables,\n            redirectAfterCreation,\n            creationContext,\n        }),\n        submitNewDashboardSuccessWithResult: (result: DashboardType, variables?: DashboardTemplateVariableType[]) => ({\n            result,\n            variables,\n        }),\n    }),\n    reducers({\n        isLoading: [\n            false,\n            {\n                setIsLoading: (_, { isLoading }) => isLoading,\n                hideNewDashboardModal: () => false,\n                submitNewDashboardSuccess: () => false,\n                submitNewDashboardFailure: () => false,\n                clearActiveDashboardTemplate: () => false,\n            },\n        ],\n        newDashboardModalVisible: [\n            false,\n            {\n                showNewDashboardModal: () => true,\n                showVariableSelectModal: () => true,\n                hideNewDashboardModal: () => false,\n            },\n        ],\n        variableSelectModalVisible: [\n            false,\n            {\n                showVariableSelectModal: () => true,\n                hideNewDashboardModal: () => false,\n            },\n        ],\n        activeDashboardTemplate: [\n            null as DashboardTemplateType | null,\n            {\n                setActiveDashboardTemplate: (_, { template }) => template,\n                clearActiveDashboardTemplate: () => null,\n            },\n        ],\n    }),\n    forms(({ actions }) => ({\n        newDashboard: {\n            defaults: defaultFormValues,\n            errors: ({ name, restrictionLevel }) => ({\n                name: !name ? 'Please give your dashboard a name.' : null,\n                restrictionLevel: !restrictionLevel ? 'Restriction level needs to be specified.' : null,\n            }),\n            submit: async ({ name, description, useTemplate, restrictionLevel, show }, breakpoint) => {\n                actions.setIsLoading(true)\n                try {\n                    const result: DashboardType = await api.create(\n                        `api/environments/${teamLogic.values.currentTeamId}/dashboards/`,\n                        {\n                            name: name,\n                            description: description,\n                            use_template: useTemplate,\n                            restriction_level: restrictionLevel,\n                        } as Partial<DashboardType>\n                    )\n                    actions.hideNewDashboardModal()\n                    actions.resetNewDashboard()\n                    const queryBasedDashboard = getQueryBasedDashboard(result)\n                    queryBasedDashboard && dashboardsModel.actions.addDashboardSuccess(queryBasedDashboard)\n                    actions.submitNewDashboardSuccessWithResult(result)\n                    if (show) {\n                        breakpoint()\n                        router.actions.push(urls.dashboard(result.id))\n                    }\n                } catch (e: any) {\n                    if (!isBreakpoint(e)) {\n                        const message = e.code && e.detail ? `${e.code}: ${e.detail}` : e\n                        lemonToast.error(`Could not create dashboard: ${message}`)\n                    }\n                }\n                actions.setIsLoading(false)\n            },\n        },\n    })),\n    selectors(({ props }) => ({\n        isFeatureFlagDashboard: [() => [], () => props.featureFlagId],\n    })),\n    listeners(({ actions }) => ({\n        addDashboard: ({ form }) => {\n            actions.resetNewDashboard()\n            actions.setNewDashboardValues({ ...defaultFormValues, ...form })\n            actions.submitNewDashboard()\n        },\n        showNewDashboardModal: () => {\n            actions.resetNewDashboard()\n        },\n        hideNewDashboardModal: () => {\n            actions.clearActiveDashboardTemplate()\n            actions.resetNewDashboard()\n        },\n        createDashboardFromTemplate: async ({\n            template,\n            variables,\n            redirectAfterCreation = true,\n            creationContext = null,\n        }) => {\n            actions.setIsLoading(true)\n            const tiles = makeTilesUsingVariables(template.tiles, variables)\n            const dashboardJSON = {\n                ...template,\n                tiles,\n            }\n\n            try {\n                const result: DashboardType = await api.create(\n                    `api/environments/${teamLogic.values.currentTeamId}/dashboards/create_from_template_json`,\n                    { template: dashboardJSON, creation_context: creationContext }\n                )\n\n                actions.hideNewDashboardModal()\n                actions.resetNewDashboard()\n                const queryBasedDashboard = getQueryBasedDashboard(result)\n                queryBasedDashboard && dashboardsModel.actions.addDashboardSuccess(queryBasedDashboard)\n                actions.submitNewDashboardSuccessWithResult(result, variables)\n                if (redirectAfterCreation) {\n                    router.actions.push(urls.dashboard(result.id))\n                }\n            } catch (e: any) {\n                if (!isBreakpoint(e)) {\n                    const message = e.code && e.detail ? `${e.code}: ${e.detail}` : e\n                    lemonToast.error(`Could not create dashboard: ${message}`)\n                }\n            }\n            actions.setIsLoading(false)\n        },\n        showVariableSelectModal: ({ template }) => {\n            actions.setActiveDashboardTemplate(template)\n        },\n    })),\n    urlToAction(({ actions }) => ({\n        '/dashboard': (_, _searchParams, hashParams) => {\n            if ('newDashboard' in hashParams) {\n                actions.showNewDashboardModal()\n            }\n        },\n    })),\n    actionToUrl({\n        hideNewDashboardModal: () => {\n            const hashParams = router.values.hashParams\n            delete hashParams['newDashboard']\n            return [router.values.location.pathname, router.values.searchParams, hashParams]\n        },\n        showNewDashboardModal: () => {\n            const hashParams = router.values.hashParams\n            hashParams['newDashboard'] = 'modal'\n            return [router.values.location.pathname, router.values.searchParams, hashParams]\n        },\n    }),\n])\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_kea_router", "defaultFormValues", "applyTemplate", "obj", "variables", "queryKind", "variableId", "variable", "isEventVariable", "mathAvailability", "sanitizeRetentionEntity", "legacyEntityToNode", "item", "newObject", "key", "value", "makeTilesUsingVariables", "tiles", "tile", "isInsightVizNode", "newDashboardLogic", "featureFlagId", "dashboardsModel", "featureFlagLogic", "isLoading", "template", "form", "redirectAfterCreation", "creationContext", "result", "_", "actions", "name", "restrictionLevel", "description", "useTemplate", "show", "breakpoint", "api_default", "teamLogic", "queryBasedDashboard", "getQueryBasedDashboard", "urls", "e", "message", "lemonToast", "props", "dashboardJSON", "_searchParams", "hashParams"]
}
