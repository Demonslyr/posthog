{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/refractor@3.6.0/node_modules/refractor/lang/idris.js"],
  "sourcesContent": ["'use strict'\nvar refractorHaskell = require('./haskell.js')\nmodule.exports = idris\nidris.displayName = 'idris'\nidris.aliases = ['idr']\nfunction idris(Prism) {\n  Prism.register(refractorHaskell)\n  Prism.languages.idris = Prism.languages.extend('haskell', {\n    comment: {\n      pattern: /(?:(?:--|\\|\\|\\|).*$|\\{-[\\s\\S]*?-\\})/m\n    },\n    keyword:\n      /\\b(?:Type|case|class|codata|constructor|corecord|data|do|dsl|else|export|if|implementation|implicit|import|impossible|in|infix|infixl|infixr|instance|interface|let|module|mutual|namespace|of|parameters|partial|postulate|private|proof|public|quoteGoal|record|rewrite|syntax|then|total|using|where|with)\\b/,\n    builtin: undefined\n  })\n  Prism.languages.insertBefore('idris', 'keyword', {\n    'import-statement': {\n      pattern: /(^\\s*import\\s+)(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*/m,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\./\n      }\n    }\n  })\n  Prism.languages.idr = Prism.languages.idris\n}\n"],
  "mappings": "iHAAA,IAAAA,EAAAC,EAAA,CAAAC,EAAAC,IAAA,CAAAC,IAAAC,IAAAC,IACA,IAAIC,EAAmB,IACvBJ,EAAO,QAAUK,EACjBA,EAAM,YAAc,QACpBA,EAAM,QAAU,CAAC,KAAK,EACtB,SAASA,EAAMC,EAAO,CACpBA,EAAM,SAASF,CAAgB,EAC/BE,EAAM,UAAU,MAAQA,EAAM,UAAU,OAAO,UAAW,CACxD,QAAS,CACP,QAAS,sCACX,EACA,QACE,kTACF,QAAS,MACX,CAAC,EACDA,EAAM,UAAU,aAAa,QAAS,UAAW,CAC/C,mBAAoB,CAClB,QAAS,oDACT,WAAY,GACZ,OAAQ,CACN,YAAa,IACf,CACF,CACF,CAAC,EACDA,EAAM,UAAU,IAAMA,EAAM,UAAU,KACxC",
  "names": ["require_idris", "__commonJSMin", "exports", "module", "init_dirname", "init_buffer", "init_process", "refractorHaskell", "idris", "Prism"]
}
