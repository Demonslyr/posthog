{
  "version": 3,
  "sources": ["../src/scenes/persons/personDeleteModalLogic.tsx", "../src/queries/nodes/DataNode/ElapsedTime.tsx", "../src/queries/nodes/DataTable/renderColumn.tsx", "../src/lib/components/Property.tsx", "../src/queries/nodes/PersonsNode/DeletePersonButton.tsx", "../src/queries/nodes/DataTable/renderColumnMeta.tsx", "../src/queries/nodes/DataNode/LoadNext.tsx", "../src/queries/nodes/DataVisualization/Components/Table.tsx"],
  "sourcesContent": ["import { actions, kea, path, props, reducers } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast/LemonToast'\nimport { toParams } from 'lib/utils'\n\nimport { PersonType } from '~/types'\n\nimport { asDisplay } from './person-utils'\nimport type { personDeleteModalLogicType } from './personDeleteModalLogicType'\n\nexport interface PersonDeleteModalLogicProps {\n    person: PersonType\n}\nexport type PersonDeleteCallback = (person: PersonType, deleteEvents: boolean) => void\n\nexport const personDeleteModalLogic = kea<personDeleteModalLogicType>([\n    path(['scenes', 'persons', 'personDeleteModalLogic']),\n    props({} as PersonDeleteModalLogicProps),\n    actions({\n        showPersonDeleteModal: (person: PersonType | null, callback?: PersonDeleteCallback) => ({\n            person,\n            callback,\n        }),\n        deletePerson: (person: PersonType, deleteEvents: boolean) => ({ person, deleteEvents }),\n    }),\n    reducers({\n        personDeleteModal: [\n            null as PersonType | null,\n            {\n                showPersonDeleteModal: (_, { person }) => person,\n            },\n        ],\n        personDeleteCallback: [\n            null as PersonDeleteCallback | null,\n            {\n                showPersonDeleteModal: (_, { callback }) => callback ?? null,\n            },\n        ],\n    }),\n    loaders(({ actions, values }) => ({\n        deletedPerson: [\n            null as PersonType | null,\n            {\n                deletePerson: async ({ person, deleteEvents }) => {\n                    const params = deleteEvents ? { delete_events: true } : {}\n                    await api.delete(`api/person/${person.id}?${toParams(params)}`)\n                    lemonToast.success(\n                        <>\n                            The person <strong>{asDisplay(person)}</strong> was removed from the project.\n                            {deleteEvents\n                                ? ' Corresponding events will be deleted on a set schedule during non-peak usage times.'\n                                : ' Their ID(s) will be usable again in an hour or so.'}\n                        </>\n                    )\n                    values.personDeleteCallback?.(person, deleteEvents)\n                    actions.showPersonDeleteModal(null)\n                    return person\n                },\n            },\n        ],\n    })),\n])\n", "import clsx from 'clsx'\nimport { useValues } from 'kea'\nimport { Popover } from 'lib/lemon-ui/Popover'\nimport { useState } from 'react'\n\nimport { dataNodeLogic } from '~/queries/nodes/DataNode/dataNodeLogic'\nimport { QueryTiming } from '~/queries/schema/schema-general'\n\nexport interface TimingsProps {\n    timings: QueryTiming[]\n    elapsedTime?: number\n}\n\nexport function Timings({ timings, elapsedTime }: TimingsProps): JSX.Element | null {\n    return (\n        <div className=\"space-y-2 p-2\">\n            {timings.map(({ k: key, t: time }) => (\n                <div\n                    key={key}\n                    className={clsx(\n                        'flex justify-between items-start space-x-2',\n                        time > timings[timings.length - 1].t * 0.5 ? 'font-bold' : ''\n                    )}\n                >\n                    <div>{key == '.' ? 'Query total' : key}</div>\n                    <div>{time.toFixed(3)}s</div>\n                </div>\n            ))}\n            {elapsedTime !== undefined && timings.length > 0 ? (\n                <div className={clsx('flex justify-between items-start space-x-2')}>\n                    <div>+ HTTP overhead</div>\n                    <div>{(elapsedTime / 1000 - timings[timings.length - 1].t).toFixed(3)}s</div>\n                </div>\n            ) : null}\n        </div>\n    )\n}\n\nfunction ElapsedTimeWithTimings({\n    elapsedTime,\n    hasError,\n    timings,\n}: {\n    elapsedTime: number\n    hasError: boolean\n    timings: QueryTiming[]\n}): JSX.Element | null {\n    const [popoverVisible, setPopoverVisible] = useState(false)\n    return (\n        <Popover\n            onClickOutside={() => setPopoverVisible(false)}\n            visible={popoverVisible}\n            placement=\"bottom\"\n            overlay={<Timings timings={timings} elapsedTime={elapsedTime} />}\n        >\n            <div\n                onClick={() => setPopoverVisible((visible) => !visible)}\n                className={clsx(hasError ? 'text-danger' : '', 'cursor-help')}\n            >\n                {(elapsedTime / 1000).toFixed(elapsedTime < 1000 ? 2 : 1)}s\n            </div>\n        </Popover>\n    )\n}\n\nexport function ElapsedTime({ showTimings }: { showTimings?: boolean }): JSX.Element | null {\n    const { elapsedTime, loadingStart, responseError, isShowingCachedResults, timings, query } =\n        useValues(dataNodeLogic)\n    const [, setTick] = useState(0)\n\n    if ('query' in query && query.query === '') {\n        return null\n    }\n\n    let time = elapsedTime\n    if (isShowingCachedResults) {\n        time = 0\n    }\n\n    if (!isShowingCachedResults && loadingStart && !elapsedTime) {\n        time = performance.now() - loadingStart\n        window.requestAnimationFrame(() => {\n            setTick((tick) => tick + 1)\n        })\n    }\n\n    if (!time) {\n        return null\n    }\n\n    if (elapsedTime && timings && showTimings) {\n        return <ElapsedTimeWithTimings elapsedTime={elapsedTime} timings={timings} hasError={!!responseError} />\n    }\n\n    return <div className={responseError ? 'text-danger' : ''}>{(time / 1000).toFixed(time < 1000 ? 2 : 1)}s</div>\n}\n", "import { combineUrl, router } from 'kea-router'\nimport { CopyToClipboardInline } from 'lib/components/CopyToClipboard'\nimport { JSONViewer } from 'lib/components/JSONViewer'\nimport { Property } from 'lib/components/Property'\nimport { PropertyKeyInfo } from 'lib/components/PropertyKeyInfo'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { TZLabel } from 'lib/components/TZLabel'\nimport { LemonTag } from 'lib/lemon-ui/LemonTag/LemonTag'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { Spinner } from 'lib/lemon-ui/Spinner/Spinner'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { autoCaptureEventToDescription } from 'lib/utils'\nimport { GroupActorDisplay } from 'scenes/persons/GroupActorDisplay'\nimport { PersonDisplay, PersonDisplayProps } from 'scenes/persons/PersonDisplay'\nimport { urls } from 'scenes/urls'\n\nimport { errorColumn, loadingColumn } from '~/queries/nodes/DataTable/dataTableLogic'\nimport { renderHogQLX } from '~/queries/nodes/HogQLX/render'\nimport { DeletePersonButton } from '~/queries/nodes/PersonsNode/DeletePersonButton'\nimport {\n    DataTableNode,\n    EventsQueryPersonColumn,\n    HasPropertiesNode,\n    LLMTracePerson,\n} from '~/queries/schema/schema-general'\nimport { QueryContext } from '~/queries/types'\nimport { isActorsQuery, isEventsQuery, isHogQLQuery, isPersonsNode, isTracesQuery, trimQuotes } from '~/queries/utils'\nimport { AnyPropertyFilter, EventType, PersonType, PropertyFilterType, PropertyOperator } from '~/types'\n\nexport function renderColumn(\n    key: string,\n    value: any,\n    record: Record<string, any> | any[],\n    recordIndex: number,\n    query: DataTableNode,\n    setQuery?: (query: DataTableNode) => void,\n    context?: QueryContext<DataTableNode>\n): JSX.Element | string {\n    const queryContextColumnName = key.startsWith('context.columns.') ? trimQuotes(key.substring(16)) : undefined\n    const queryContextColumn = queryContextColumnName ? context?.columns?.[queryContextColumnName] : undefined\n\n    if (value === loadingColumn) {\n        return <Spinner />\n    } else if (value === errorColumn) {\n        return <LemonTag className=\"text-danger\">Error</LemonTag>\n    } else if (queryContextColumnName && queryContextColumn?.render) {\n        const Component = queryContextColumn?.render\n        return (\n            <Component\n                record={record}\n                columnName={queryContextColumnName}\n                value={value}\n                query={query}\n                recordIndex={recordIndex}\n            />\n        )\n    } else if (context?.columns?.[key] && context?.columns?.[key].render) {\n        const Component = context?.columns?.[key]?.render\n        return Component ? (\n            <Component record={record} columnName={key} value={value} query={query} recordIndex={recordIndex} />\n        ) : (\n            String(value)\n        )\n    } else if (typeof value === 'object' && Array.isArray(value) && value[0] === '__hx_tag') {\n        return renderHogQLX(value)\n    } else if (value === null) {\n        return (\n            <Tooltip title=\"NULL\" placement=\"right\" delayMs={0}>\n                <span className=\"cursor-default\" aria-hidden>\n                    \u2014\n                </span>\n            </Tooltip>\n        )\n    } else if (isHogQLQuery(query.source)) {\n        if (typeof value === 'string') {\n            try {\n                if (value.startsWith('{') && value.endsWith('}')) {\n                    return (\n                        <JSONViewer\n                            src={JSON.parse(value)}\n                            name={key}\n                            collapsed={Object.keys(JSON.stringify(value)).length > 10 ? 0 : 1}\n                        />\n                    )\n                }\n                if (value.startsWith('[') && value.endsWith(']')) {\n                    return (\n                        <JSONViewer\n                            src={JSON.parse(value)}\n                            name={key}\n                            collapsed={JSON.stringify(value).length > 10 ? 0 : 1}\n                        />\n                    )\n                }\n            } catch (e) {\n                // do nothing\n            }\n            if (value.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{3,6})?(?:Z|[+-]\\d{2}:\\d{2})?$/)) {\n                return <TZLabel time={value} showSeconds />\n            }\n        }\n        if (typeof value === 'object') {\n            if (Array.isArray(value)) {\n                return <JSONViewer src={value} name={key} collapsed={value.length > 10 ? 0 : 1} />\n            }\n            return <JSONViewer src={value} name={key} collapsed={Object.keys(value).length > 10 ? 0 : 1} />\n        }\n        return <Property value={value} />\n    } else if (key === 'event' && isEventsQuery(query.source)) {\n        const resultRow = record as any[]\n        const eventRecord = query.source.select.includes('*') ? resultRow[query.source.select.indexOf('*')] : null\n\n        if (value === '$autocapture' && eventRecord) {\n            return autoCaptureEventToDescription(eventRecord)\n        }\n        const content = <PropertyKeyInfo value={value} type={TaxonomicFilterGroupType.Events} />\n        const $sentry_url = eventRecord?.properties?.$sentry_url\n        return $sentry_url ? (\n            <Link to={$sentry_url} target=\"_blank\">\n                {content}\n            </Link>\n        ) : (\n            content\n        )\n    } else if (key === 'timestamp' || key === 'created_at' || key === 'session_start' || key === 'session_end') {\n        return <TZLabel time={value} showSeconds />\n    } else if (!Array.isArray(record) && key.startsWith('properties.')) {\n        // TODO: remove after removing the old events table\n        const propertyKey = trimQuotes(key.substring(11))\n        if (setQuery && (isEventsQuery(query.source) || isPersonsNode(query.source)) && query.showPropertyFilter) {\n            const newProperty: AnyPropertyFilter = {\n                key: propertyKey,\n                value: record.properties[propertyKey],\n                operator: PropertyOperator.Exact,\n                type: isPersonsNode(query.source) ? PropertyFilterType.Person : PropertyFilterType.Event,\n            }\n            const matchingProperty = (query.source.properties || []).find(\n                (p) => p.key === newProperty.key && p.type === newProperty.type\n            )\n            const newProperties = matchingProperty\n                ? (query.source.properties || []).filter((p) => p !== matchingProperty)\n                : [...(query.source.properties || []), newProperty]\n            const newUrl = query.propertiesViaUrl\n                ? combineUrl(\n                      router.values.location.pathname,\n                      {\n                          ...router.values.searchParams,\n                          properties: newProperties,\n                      },\n                      router.values.hashParams\n                  ).url\n                : '#'\n            return (\n                <Link\n                    className=\"ph-no-capture\"\n                    to={newUrl}\n                    onClick={(e) => {\n                        e.preventDefault()\n                        setQuery({\n                            ...query,\n                            source: {\n                                ...query.source,\n                                properties: newProperties,\n                            } as HasPropertiesNode,\n                        })\n                    }}\n                >\n                    <Property value={record.properties[propertyKey]} />\n                </Link>\n            )\n        }\n        return <Property value={record.properties[propertyKey]} />\n    } else if (!Array.isArray(record) && key.startsWith('person.properties.')) {\n        // TODO: remove after removing the old events table\n        const eventRecord = record as EventType\n        const propertyKey = trimQuotes(key.substring(18))\n        if (setQuery && isEventsQuery(query.source)) {\n            const newProperty: AnyPropertyFilter = {\n                key: propertyKey,\n                value: eventRecord.person?.properties[propertyKey],\n                operator: PropertyOperator.Exact,\n                type: PropertyFilterType.Person,\n            }\n            const matchingProperty = (query.source.properties || []).find(\n                (p) => p.key === newProperty.key && p.type === newProperty.type\n            )\n            const newProperties = matchingProperty\n                ? (query.source.properties || []).filter((p) => p !== matchingProperty)\n                : [...(query.source.properties || []), newProperty]\n            const newUrl = query.propertiesViaUrl\n                ? combineUrl(\n                      router.values.location.pathname,\n                      {\n                          ...router.values.searchParams,\n                          properties: newProperties,\n                      },\n                      router.values.hashParams\n                  ).url\n                : '#'\n            return (\n                <Link\n                    className=\"ph-no-capture\"\n                    to={newUrl}\n                    onClick={(e) => {\n                        e.preventDefault()\n                        setQuery({\n                            ...query,\n                            source: {\n                                ...query.source,\n                                properties: newProperties,\n                            } as HasPropertiesNode,\n                        })\n                    }}\n                >\n                    <Property value={eventRecord.person?.properties?.[propertyKey]} />\n                </Link>\n            )\n        }\n        return <Property value={eventRecord.person?.properties?.[propertyKey]} />\n    } else if (key === 'person') {\n        const personRecord = record as PersonType\n        const displayProps: PersonDisplayProps = {\n            withIcon: true,\n            person: record as PersonType,\n            noPopover: true,\n        }\n\n        if (isEventsQuery(query.source)) {\n            displayProps.person = value.distinct_id ? (value as EventsQueryPersonColumn) : value\n            displayProps.noPopover = false // If we are in an events list, the popover experience is better\n        }\n\n        if (isPersonsNode(query.source) && personRecord.distinct_ids) {\n            displayProps.href = urls.personByDistinctId(personRecord.distinct_ids[0])\n        }\n\n        if (isActorsQuery(query.source) && value) {\n            displayProps.person = value\n            displayProps.href = value.distinct_ids?.[0]\n                ? urls.personByDistinctId(value.distinct_ids[0])\n                : urls.personByUUID(value.id)\n        }\n\n        if (isTracesQuery(query.source)) {\n            displayProps.person = value.distinct_id ? (value as LLMTracePerson) : value\n            displayProps.noPopover = false // If we are in a traces list, the popover experience is better\n        }\n\n        return <PersonDisplay {...displayProps} />\n    } else if (key === 'group' && typeof value === 'object') {\n        return <GroupActorDisplay actor={value} />\n    } else if (key === 'person.$delete' && (isPersonsNode(query.source) || isActorsQuery(query.source))) {\n        if (!Array.isArray(record)) {\n            console.error('Expected record to be an array for person.$delete column')\n            return ''\n        }\n        const personRecord = record[0] as PersonType\n        return <DeletePersonButton person={personRecord} />\n    } else if (key.startsWith('context.columns.')) {\n        const columnName = trimQuotes(key.substring(16)) // 16 = \"context.columns.\".length\n        const Component = context?.columns?.[columnName]?.render\n        return Component ? (\n            <Component record={record} columnName={columnName} value={value} query={query} recordIndex={recordIndex} />\n        ) : (\n            String(value)\n        )\n    } else if (key === 'id' && (isPersonsNode(query.source) || isActorsQuery(query.source))) {\n        return (\n            <CopyToClipboardInline\n                explicitValue={String(value)}\n                iconStyle={{ color: 'var(--accent-primary)' }}\n                description=\"person id\"\n            >\n                {String(value)}\n            </CopyToClipboardInline>\n        )\n    }\n    if (typeof value === 'object') {\n        return <JSONViewer src={value} name={null} collapsed={Object.keys(value).length > 10 ? 0 : 1} />\n    } else if (\n        typeof value === 'string' &&\n        ((value.startsWith('{') && value.endsWith('}')) || (value.startsWith('[') && value.endsWith(']')))\n    ) {\n        try {\n            return <JSONViewer src={JSON.parse(value)} name={null} collapsed={Object.keys(value).length > 10 ? 0 : 1} />\n        } catch (e) {\n            // do nothing\n        }\n    }\n    return String(value)\n}\n", "import { Link } from '@posthog/lemon-ui'\nimport { isExternalLink } from 'lib/utils'\n\nexport function Property({ value }: { value: any }): JSX.Element {\n    let valueString: string\n    let valueComponent: JSX.Element | string\n    if (typeof value === 'object') {\n        valueString = valueComponent = JSON.stringify(value)\n    } else {\n        if (isExternalLink(value)) {\n            valueString = value\n            valueComponent = (\n                <Link to={valueString} target=\"_blank\">\n                    {value}\n                </Link>\n            )\n        } else {\n            valueString = valueComponent = String(value)\n        }\n    }\n    return <span title={valueString}>{valueComponent}</span>\n}\n", "import { IconTrash } from '@posthog/icons'\nimport { useActions } from 'kea'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { personDeleteModalLogic } from 'scenes/persons/personDeleteModalLogic'\n\nimport { dataNodeLogic } from '~/queries/nodes/DataNode/dataNodeLogic'\nimport { PersonType } from '~/types'\n\ninterface DeletePersonButtonProps {\n    person: PersonType\n}\nexport function DeletePersonButton({ person }: DeletePersonButtonProps): JSX.Element {\n    const { showPersonDeleteModal } = useActions(personDeleteModalLogic)\n    const { loadData } = useActions(dataNodeLogic)\n    return (\n        <LemonButton\n            onClick={() => showPersonDeleteModal(person, () => loadData())}\n            icon={<IconTrash />}\n            status=\"danger\"\n            size=\"small\"\n            data-attr=\"delete-person\"\n        />\n    )\n}\n", "import { PropertyKeyInfo } from 'lib/components/PropertyKeyInfo'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { SortingIndicator } from 'lib/lemon-ui/LemonTable/sorting'\n\nimport { getQueryFeatures, QueryFeature } from '~/queries/nodes/DataTable/queryFeatures'\nimport { extractExpressionComment, removeExpressionComment } from '~/queries/nodes/DataTable/utils'\nimport { DataTableNode, DataVisualizationNode, EventsQuery } from '~/queries/schema/schema-general'\nimport { QueryContext } from '~/queries/types'\nimport { isDataTableNode, isHogQLQuery, trimQuotes } from '~/queries/utils'\n\nexport interface ColumnMeta {\n    title?: JSX.Element | string\n    width?: string | number\n    align?: 'left' | 'right' | 'center'\n}\n\nexport function renderColumnMeta<T extends DataVisualizationNode | DataTableNode>(\n    key: string,\n    query: T,\n    context?: QueryContext<T>\n): ColumnMeta {\n    let width: string | number | undefined\n    let title: JSX.Element | string | undefined\n    const queryFeatures = getQueryFeatures(query.source)\n    let align: ColumnMeta['align']\n\n    const queryContextColumnName = key.startsWith('context.columns.') ? trimQuotes(key.substring(16)) : undefined\n    const queryContextColumn =\n        (queryContextColumnName ? context?.columns?.[queryContextColumnName] : undefined) ?? context?.columns?.[key]\n\n    if (queryContextColumnName && queryContextColumn && (queryContextColumn.title || queryContextColumn.renderTitle)) {\n        const Component = queryContextColumn.renderTitle\n        title = Component ? <Component columnName={queryContextColumnName} query={query} /> : queryContextColumn.title\n    } else if (isHogQLQuery(query.source)) {\n        title = key\n        if (title.startsWith('`') && title.endsWith('`')) {\n            title = title.substring(1, title.length - 1)\n        }\n        if (title.startsWith(\"tuple('__hx_tag', '\")) {\n            const tagName = title.substring(19, title.indexOf(\"'\", 19))\n            title =\n                tagName === '__hx_obj' ? 'Object' : tagName === 'RecordingButton' ? 'Recording' : '<' + tagName + ' />'\n        }\n    } else if (key === 'timestamp') {\n        title = 'Time'\n    } else if (key === 'created_at') {\n        title = 'First seen'\n    } else if (key === 'event') {\n        title = 'Event'\n    } else if (key === 'person') {\n        title = 'Person'\n    } else if (key.startsWith('properties.')) {\n        title = (\n            <PropertyKeyInfo\n                value={trimQuotes(removeExpressionComment(key.substring(11)))}\n                type={TaxonomicFilterGroupType.EventProperties}\n                disableIcon\n            />\n        )\n    } else if (key === 'person.$delete') {\n        title = ''\n        width = 0\n    } else if (key.startsWith('person.properties.')) {\n        title = (\n            <PropertyKeyInfo\n                value={trimQuotes(key.substring(18))}\n                type={TaxonomicFilterGroupType.PersonProperties}\n                disableIcon\n            />\n        )\n    } else if (queryContextColumnName) {\n        title = queryContextColumnName.replace('_', ' ')\n    } else {\n        title = queryFeatures.has(QueryFeature.selectAndOrderByColumns) ? extractExpressionComment(key) : key\n    }\n\n    if (queryContextColumn?.align) {\n        align = queryContextColumn.align\n    }\n\n    if (queryContextColumn?.width) {\n        width = queryContextColumn.width\n    } else if (context?.columns?.[key]?.width) {\n        width = context.columns[key].width\n    }\n\n    if (queryContextColumnName && queryContextColumn && (queryContextColumn.title || queryContextColumn.renderTitle)) {\n        const Component = queryContextColumn.renderTitle\n        title = Component ? <Component columnName={queryContextColumnName} query={query} /> : queryContextColumn.title\n    } else if (context?.columns?.[key]?.title || context?.columns?.[key]?.renderTitle) {\n        const Component = context?.columns?.[key]?.renderTitle\n        title = Component ? <Component columnName={key} query={query} /> : context?.columns?.[key]?.title\n    }\n\n    if (queryFeatures.has(QueryFeature.selectAndOrderByColumns) && isDataTableNode(query) && !query.allowSorting) {\n        query\n        const sortKey = queryFeatures.has(QueryFeature.selectAndOrderByColumns)\n            ? (query.source as EventsQuery)?.orderBy?.[0]\n            : null\n        const sortOrder = key === sortKey ? 1 : `-${key}` === sortKey ? -1 : undefined\n        if (sortOrder) {\n            title = (\n                <>\n                    {title}\n                    <SortingIndicator order={sortOrder} />\n                </>\n            )\n        }\n    }\n\n    return {\n        title,\n        ...(typeof width !== 'undefined' ? { width } : {}),\n        ...(align ? { align } : {}),\n    }\n}\n", "import { useActions, useValues } from 'kea'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { useMemo } from 'react'\n\nimport { dataNodeLogic } from '~/queries/nodes/DataNode/dataNodeLogic'\nimport { DataNode } from '~/queries/schema/schema-general'\nimport { isDataVisualizationNode, isHogQLQuery } from '~/queries/utils'\n\nimport { DEFAULT_PAGE_SIZE } from '../DataVisualization/Components/Table'\n\ninterface LoadNextProps {\n    query: DataNode\n}\nexport function LoadNext({ query }: LoadNextProps): JSX.Element {\n    const { canLoadNextData, nextDataLoading, numberOfRows, hasMoreData, dataLimit } = useValues(dataNodeLogic)\n    const { loadNextData } = useActions(dataNodeLogic)\n\n    const text = useMemo(() => {\n        // if hogql based viz, show a different text\n        if (isDataVisualizationNode(query) && isHogQLQuery(query.source)) {\n            // No data limit means the user is controlling the pagination\n            if (!dataLimit) {\n                if (numberOfRows && numberOfRows <= DEFAULT_PAGE_SIZE) {\n                    return `Showing ${numberOfRows === 1 ? '' : 'all'} ${numberOfRows === 1 ? 'one' : numberOfRows} ${\n                        numberOfRows === 1 ? 'entry' : 'entries'\n                    }`\n                }\n                // If the number of rows is greater than the default page size, it's handled by pagination component\n                return ''\n            }\n            if (numberOfRows && numberOfRows < dataLimit) {\n                return `Showing ${numberOfRows === 1 ? '' : 'all'} ${numberOfRows === 1 ? 'one' : numberOfRows} ${\n                    numberOfRows === 1 ? 'entry' : 'entries'\n                }`\n            }\n            return `Default limit of ${dataLimit} rows reached`\n        } else if (isHogQLQuery(query) && !canLoadNextData && hasMoreData && dataLimit) {\n            return `Default limit of ${dataLimit} rows reached. Try adding a LIMIT clause to adjust.`\n        }\n        let result = `Showing ${\n            hasMoreData && (numberOfRows ?? 0) > 1 ? 'first ' : canLoadNextData || numberOfRows === 1 ? '' : 'all '\n        }${numberOfRows === 1 ? 'one' : numberOfRows} ${numberOfRows === 1 ? 'entry' : 'entries'}`\n        if (canLoadNextData) {\n            result += '. Click to load more.'\n        } else if (hasMoreData) {\n            result += '. Reached the end of results.'\n        }\n        return result\n    }, [query, dataLimit, numberOfRows, canLoadNextData, hasMoreData])\n\n    // pagination component exists\n    if (\n        isDataVisualizationNode(query) &&\n        isHogQLQuery(query.source) &&\n        !dataLimit &&\n        (!numberOfRows || numberOfRows > DEFAULT_PAGE_SIZE)\n    ) {\n        return <></>\n    }\n\n    return (\n        <div className=\"m-2 flex items-center\">\n            <LemonButton onClick={loadNextData} loading={nextDataLoading} fullWidth center disabled={!canLoadNextData}>\n                {text}\n            </LemonButton>\n        </div>\n    )\n}\n\nexport function LoadPreviewText(): JSX.Element {\n    const { numberOfRows, hasMoreData } = useValues(dataNodeLogic)\n\n    return (\n        <>\n            Showing {hasMoreData && (numberOfRows ?? 0) > 1 ? 'first ' : ' '}\n            {numberOfRows === 1 ? 'one' : numberOfRows} {numberOfRows === 1 ? 'entry' : 'entries'}\n        </>\n    )\n}\n", "import { LemonTable, LemonTableColumn } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { execHog } from 'lib/hog'\nimport { lightenDarkenColor } from 'lib/utils'\nimport { InsightEmptyState, InsightErrorState } from 'scenes/insights/EmptyStates'\n\nimport { themeLogic } from '~/layout/navigation-3000/themeLogic'\nimport { DataVisualizationNode, HogQLQueryResponse, NodeKind } from '~/queries/schema/schema-general'\nimport { QueryContext } from '~/queries/types'\n\nimport { LoadNext } from '../../DataNode/LoadNext'\nimport { renderColumn } from '../../DataTable/renderColumn'\nimport { renderColumnMeta } from '../../DataTable/renderColumnMeta'\nimport { convertTableValue, dataVisualizationLogic, TableDataCell } from '../dataVisualizationLogic'\n\ninterface TableProps {\n    query: DataVisualizationNode\n    uniqueKey: string | number | undefined\n    context: QueryContext<DataVisualizationNode> | undefined\n    cachedResults: HogQLQueryResponse | undefined\n}\n\nexport const DEFAULT_PAGE_SIZE = 500\n\nexport const Table = (props: TableProps): JSX.Element => {\n    const { isDarkModeOn } = useValues(themeLogic)\n\n    const {\n        tabularData,\n        tabularColumns,\n        conditionalFormattingRules,\n        responseLoading,\n        responseError,\n        queryCancelled,\n        response,\n    } = useValues(dataVisualizationLogic)\n\n    const tableColumns: LemonTableColumn<TableDataCell<any>[], any>[] = tabularColumns.map(\n        ({ column, settings }, index) => {\n            const { title, ...columnMeta } = renderColumnMeta(column.name, props.query, props.context)\n\n            return {\n                ...columnMeta,\n                title: settings?.display?.label || title || column.name,\n                render: (_, data, recordIndex: number) => {\n                    return renderColumn(column.name, data[index].formattedValue, data, recordIndex, {\n                        kind: NodeKind.DataTableNode,\n                        source: props.query.source,\n                    })\n                },\n                style: (_, data) => {\n                    const cf = conditionalFormattingRules\n                        .filter((n) => n.columnName === column.name)\n                        .map((n) => {\n                            const res = execHog(n.bytecode, {\n                                globals: {\n                                    value: data[index].value,\n                                    input: convertTableValue(n.input, column.type.name),\n                                },\n                                functions: {},\n                                maxAsyncSteps: 0,\n                            })\n\n                            return {\n                                rule: n,\n                                result: res.result,\n                            }\n                        })\n\n                    const conditionalFormattingMatches = cf.find((n) => Boolean(n.result))\n\n                    if (conditionalFormattingMatches) {\n                        const ruleColor = conditionalFormattingMatches.rule.color\n                        const colorMode = conditionalFormattingMatches.rule.colorMode ?? 'light'\n\n                        // If the color mode matches the current theme, return as it was saved\n                        if ((colorMode === 'dark' && isDarkModeOn) || (colorMode === 'light' && !isDarkModeOn)) {\n                            return {\n                                backgroundColor: ruleColor,\n                            }\n                        }\n\n                        // If the color mode is dark, but we're in light mode - then lighten the color\n                        if (colorMode === 'dark' && !isDarkModeOn) {\n                            return {\n                                backgroundColor: lightenDarkenColor(ruleColor, 30),\n                            }\n                        }\n\n                        // If the color mode is light, but we're in dark mode - then darken the color\n                        return {\n                            backgroundColor: lightenDarkenColor(ruleColor, -30),\n                        }\n                    }\n\n                    return undefined\n                },\n            }\n        }\n    )\n\n    return (\n        <LemonTable\n            dataSource={tabularData}\n            columns={tableColumns}\n            loading={responseLoading}\n            pagination={{ pageSize: DEFAULT_PAGE_SIZE }}\n            emptyState={\n                responseError ? (\n                    <InsightErrorState\n                        query={props.query}\n                        excludeDetail\n                        title={\n                            queryCancelled\n                                ? 'The query was cancelled'\n                                : response && 'error' in response\n                                ? (response as any).error\n                                : responseError\n                        }\n                    />\n                ) : (\n                    <InsightEmptyState heading=\"There are no matching rows for this query\" detail=\"\" />\n                )\n            }\n            footer={tabularData.length > 0 ? <LoadNext query={props.query} /> : null}\n            rowClassName=\"DataVizRow\"\n        />\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "import_jsx_runtime", "personDeleteModalLogic", "person", "callback", "deleteEvents", "_", "actions", "values", "params", "api_default", "toParams", "lemonToast", "asDisplay", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_react", "import_jsx_runtime", "Timings", "timings", "elapsedTime", "key", "time", "clsx", "ElapsedTimeWithTimings", "hasError", "popoverVisible", "setPopoverVisible", "Popover", "visible", "ElapsedTime", "showTimings", "loadingStart", "responseError", "isShowingCachedResults", "query", "dataNodeLogic", "setTick", "tick", "init_dirname", "init_buffer", "init_process", "import_kea_router", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "Property", "value", "valueString", "valueComponent", "isExternalLink", "Link", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "DeletePersonButton", "person", "showPersonDeleteModal", "personDeleteModalLogic", "loadData", "dataNodeLogic", "LemonButton", "IconTrash", "import_jsx_runtime", "renderColumn", "key", "value", "record", "recordIndex", "query", "setQuery", "context", "queryContextColumnName", "trimQuotes", "queryContextColumn", "loadingColumn", "Spinner", "errorColumn", "LemonTag", "Component", "renderHogQLX", "Tooltip", "isHogQLQuery", "JSONViewer", "TZLabel", "Property", "isEventsQuery", "resultRow", "eventRecord", "autoCaptureEventToDescription", "content", "PropertyKeyInfo", "$sentry_url", "Link", "propertyKey", "isPersonsNode", "newProperty", "matchingProperty", "p", "newProperties", "newUrl", "e", "personRecord", "displayProps", "urls", "isActorsQuery", "isTracesQuery", "PersonDisplay", "GroupActorDisplay", "DeletePersonButton", "columnName", "CopyToClipboardInline", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "renderColumnMeta", "key", "query", "context", "width", "title", "queryFeatures", "getQueryFeatures", "align", "queryContextColumnName", "trimQuotes", "queryContextColumn", "Component", "isHogQLQuery", "tagName", "PropertyKeyInfo", "removeExpressionComment", "extractExpressionComment", "isDataTableNode", "sortKey", "sortOrder", "SortingIndicator", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "DEFAULT_PAGE_SIZE", "Table", "props", "isDarkModeOn", "themeLogic", "tabularData", "tabularColumns", "conditionalFormattingRules", "responseLoading", "responseError", "queryCancelled", "response", "dataVisualizationLogic", "tableColumns", "column", "settings", "index", "title", "columnMeta", "renderColumnMeta", "_", "data", "recordIndex", "renderColumn", "conditionalFormattingMatches", "n", "res", "execHog", "convertTableValue", "ruleColor", "colorMode", "lightenDarkenColor", "LemonTable", "InsightErrorState", "InsightEmptyState", "LoadNext", "import_jsx_runtime", "LoadNext", "query", "canLoadNextData", "nextDataLoading", "numberOfRows", "hasMoreData", "dataLimit", "dataNodeLogic", "loadNextData", "text", "isDataVisualizationNode", "isHogQLQuery", "DEFAULT_PAGE_SIZE", "result", "LemonButton", "LoadPreviewText"]
}
