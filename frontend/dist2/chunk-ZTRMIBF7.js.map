{
  "version": 3,
  "sources": ["../src/scenes/authentication/signup/verify-email/verifyEmailLogic.ts"],
  "sourcesContent": ["import { actions, kea, path, reducers } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport { urlToAction } from 'kea-router'\nimport api from 'lib/api'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast/LemonToast'\n\nimport type { verifyEmailLogicType } from './verifyEmailLogicType'\n\nexport interface ResponseType {\n    success: boolean\n    errorCode?: string\n    errorDetail?: string\n}\n\nexport interface ValidatedTokenResponseType extends ResponseType {\n    token?: string\n    uuid?: string\n}\n\nexport const verifyEmailLogic = kea<verifyEmailLogicType>([\n    path(['scenes', 'authentication', 'verifyEmailLogic']),\n    actions({\n        setView: (view: 'verify' | 'pending' | 'invalid' | 'success' | null) => ({ view }),\n        setUuid: (uuid: string | null) => ({ uuid }),\n        requestVerificationLink: (uuid: string) => ({ uuid }),\n        validateEmailTokenSuccess: (response: ValidatedTokenResponseType) => ({ response }),\n    }),\n    loaders(({ actions }) => ({\n        validatedEmailToken: [\n            null as ValidatedTokenResponseType | null,\n            {\n                validateEmailToken: async ({ uuid, token }: { uuid: string; token: string }, breakpoint) => {\n                    try {\n                        await api.create(`api/users/verify_email/`, { token, uuid })\n                        actions.setView('success')\n                        await breakpoint(2000)\n                        window.location.href = '/'\n                        return { success: true, token, uuid }\n                    } catch (e: any) {\n                        actions.setView('invalid')\n                        return { success: false, errorCode: e.code, errorDetail: e.detail }\n                    }\n                },\n            },\n        ],\n        newlyRequestedVerificationLink: [\n            null as boolean | null,\n            {\n                requestVerificationLink: async ({ uuid }: { uuid: string }) => {\n                    try {\n                        await api.create(`api/users/request_email_verification/`, { uuid })\n                        lemonToast.success(\n                            'A new verification link has been sent to the associated email address. Please check your inbox.'\n                        )\n                        return true\n                    } catch (e: any) {\n                        if (e.code === 'throttled') {\n                            lemonToast.error(\n                                'You have requested a new verification link too many times. Please try again later.'\n                            )\n                            return false\n                        }\n                        lemonToast.error(\n                            'Requesting verification link failed. Please try again later or contact support.'\n                        )\n                        return false\n                    }\n                },\n            },\n        ],\n    })),\n    reducers({\n        view: [\n            null as 'pending' | 'verify' | 'invalid' | 'success' | null,\n            {\n                setView: (_, { view }) => view,\n            },\n        ],\n        uuid: [\n            null as string | null,\n            {\n                setUuid: (_, { uuid }) => uuid,\n            },\n        ],\n    }),\n    urlToAction(({ actions }) => ({\n        '/verify_email/:uuid': ({ uuid }) => {\n            if (uuid) {\n                actions.setUuid(uuid)\n                actions.setView('pending')\n            }\n        },\n        '/verify_email/:uuid/:token': ({ uuid, token }) => {\n            if (token && uuid) {\n                actions.setUuid(uuid)\n                actions.setView('verify')\n                actions.validateEmailToken({ uuid, token })\n            }\n        },\n        '/verify_email': () => {\n            actions.setView('invalid')\n        },\n    })),\n])\n"],
  "mappings": "gJAAAA,IAAAC,IAAAC,IAAA,IAAAC,EAA6C,OAC7CC,EAAwB,OACxBC,EAA4B,OAiBrB,IAAMC,KAAmB,OAA0B,IACtD,QAAK,CAAC,SAAU,iBAAkB,kBAAkB,CAAC,KACrD,WAAQ,CACJ,QAAUC,IAA+D,CAAE,KAAAA,CAAK,GAChF,QAAUC,IAAyB,CAAE,KAAAA,CAAK,GAC1C,wBAA0BA,IAAkB,CAAE,KAAAA,CAAK,GACnD,0BAA4BC,IAA0C,CAAE,SAAAA,CAAS,EACrF,CAAC,KACD,WAAQ,CAAC,CAAE,QAAAC,CAAQ,KAAO,CACtB,oBAAqB,CACjB,KACA,CACI,mBAAoB,MAAO,CAAE,KAAAF,EAAM,MAAAG,CAAM,EAAoCC,IAAe,CACxF,GAAI,CACA,aAAMC,EAAI,OAAO,0BAA2B,CAAE,MAAAF,EAAO,KAAAH,CAAK,CAAC,EAC3DE,EAAQ,QAAQ,SAAS,EACzB,MAAME,EAAW,GAAI,EACrB,OAAO,SAAS,KAAO,IAChB,CAAE,QAAS,GAAM,MAAAD,EAAO,KAAAH,CAAK,CACxC,OAASM,EAAQ,CACb,OAAAJ,EAAQ,QAAQ,SAAS,EAClB,CAAE,QAAS,GAAO,UAAWI,EAAE,KAAM,YAAaA,EAAE,MAAO,CACtE,CACJ,CACJ,CACJ,EACA,+BAAgC,CAC5B,KACA,CACI,wBAAyB,MAAO,CAAE,KAAAN,CAAK,IAAwB,CAC3D,GAAI,CACA,aAAMK,EAAI,OAAO,wCAAyC,CAAE,KAAAL,CAAK,CAAC,EAClEO,EAAW,QACP,iGACJ,EACO,EACX,OAASD,EAAQ,CACb,OAAIA,EAAE,OAAS,aACXC,EAAW,MACP,oFACJ,EACO,KAEXA,EAAW,MACP,iFACJ,EACO,GACX,CACJ,CACJ,CACJ,CACJ,EAAE,KACF,YAAS,CACL,KAAM,CACF,KACA,CACI,QAAS,CAACC,EAAG,CAAE,KAAAT,CAAK,IAAMA,CAC9B,CACJ,EACA,KAAM,CACF,KACA,CACI,QAAS,CAACS,EAAG,CAAE,KAAAR,CAAK,IAAMA,CAC9B,CACJ,CACJ,CAAC,KACD,eAAY,CAAC,CAAE,QAAAE,CAAQ,KAAO,CAC1B,sBAAuB,CAAC,CAAE,KAAAF,CAAK,IAAM,CAC7BA,IACAE,EAAQ,QAAQF,CAAI,EACpBE,EAAQ,QAAQ,SAAS,EAEjC,EACA,6BAA8B,CAAC,CAAE,KAAAF,EAAM,MAAAG,CAAM,IAAM,CAC3CA,GAASH,IACTE,EAAQ,QAAQF,CAAI,EACpBE,EAAQ,QAAQ,QAAQ,EACxBA,EAAQ,mBAAmB,CAAE,KAAAF,EAAM,MAAAG,CAAM,CAAC,EAElD,EACA,gBAAiB,IAAM,CACnBD,EAAQ,QAAQ,SAAS,CAC7B,CACJ,EAAE,CACN,CAAC",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "import_kea_router", "verifyEmailLogic", "view", "uuid", "response", "actions", "token", "breakpoint", "api_default", "e", "lemonToast", "_"]
}
