import{$a as d,Io as t,Vd as a,Za as p,a as M}from"/static/chunk-RFJTZKD6.js";import{d as s,e as m,g as c,j as i}from"/static/chunk-SJXEOBQC.js";m();i();c();var e=s(M()),y=s(d()),n=s(p());var F=(0,e.kea)([(0,e.path)(["scenes","project","Settings","maxSettingsLogic"]),(0,e.actions)({setIsLoading:o=>({isLoading:o})}),(0,e.reducers)({isLoading:[!1,{loadCoreMemory:()=>!0,loadCoreMemorySuccess:()=>!1,loadCoreMemoryFailure:()=>!1}],isUpdating:[!1,{createCoreMemory:()=>!0,createCoreMemorySuccess:()=>!1,createCoreMemoryFailure:()=>!1,updateCoreMemory:()=>!0,updateCoreMemorySuccess:()=>!1,updateCoreMemoryFailure:()=>!1}]}),(0,n.loaders)(({values:o})=>({coreMemory:{__default:null,loadCoreMemory:async()=>(await t.coreMemory.list()).results[0]||null,updateCoreMemory:async r=>{if(!o.coreMemory){let u=await t.coreMemory.create(r);return a.success("The Max\u2019s memory has been created."),u}let l=await t.coreMemory.update(o.coreMemory.id,r);return a.success("The Max\u2019s memory has been updated."),l}}})),(0,y.forms)(({actions:o})=>({coreMemoryForm:{defaults:{text:""},submit:({text:r})=>{o.updateCoreMemory({text:r})}}})),(0,e.listeners)(({actions:o})=>({loadCoreMemorySuccess:({coreMemory:r})=>{o.setCoreMemoryFormValue("text",r.text)}})),(0,e.afterMount)(({actions:o})=>{o.loadCoreMemory()})]);export{F as a};
//# sourceMappingURL=/static/chunk-XXTLNI2H.js.map
