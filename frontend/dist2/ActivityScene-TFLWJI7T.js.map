{
  "version": 3,
  "sources": ["../src/scenes/activity/ActivityScene.tsx", "../src/scenes/activity/explore/EventsScene.tsx", "../src/scenes/activity/explore/eventsSceneLogic.tsx", "../src/scenes/activity/live/LiveEventsTable.tsx"],
  "sourcesContent": ["import { actions, kea, path, reducers, selectors, useActions, useValues } from 'kea'\nimport { urlToAction } from 'kea-router'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { LemonTab, LemonTabs } from 'lib/lemon-ui/LemonTabs'\nimport { capitalizeFirstLetter } from 'lib/utils'\nimport { Scene, SceneExport } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { ActivityTab, Breadcrumb } from '~/types'\n\nimport type { activitySceneLogicType } from './ActivitySceneType'\nimport { EventsScene } from './explore/EventsScene'\nimport { LiveEventsTable } from './live/LiveEventsTable'\n\nconst ACTIVITY_TABS: LemonTab<ActivityTab>[] = [\n    {\n        key: ActivityTab.ExploreEvents,\n        label: 'Explore',\n        content: <EventsScene />,\n        link: urls.activity(ActivityTab.ExploreEvents),\n    },\n    {\n        key: ActivityTab.LiveEvents,\n        label: 'Live',\n        content: <LiveEventsTable />,\n        link: urls.activity(ActivityTab.LiveEvents),\n    },\n]\n\nconst activitySceneLogic = kea<activitySceneLogicType>([\n    path(['scenes', 'events', 'activitySceneLogic']),\n    actions({\n        setTab: (tab: ActivityTab) => ({ tab }),\n    }),\n    reducers({\n        tab: [\n            ActivityTab.ExploreEvents as ActivityTab,\n            {\n                setTab: (_, { tab }) => tab,\n            },\n        ],\n    }),\n    selectors({\n        breadcrumbs: [\n            (s) => [s.tab],\n            (tab): Breadcrumb[] => [\n                {\n                    key: Scene.Activity,\n                    name: `Activity`,\n                    path: urls.activity(),\n                },\n                {\n                    key: tab,\n                    name: capitalizeFirstLetter(tab),\n                },\n            ],\n        ],\n    }),\n    urlToAction(({ actions }) => ({\n        [urls.activity(':tab')]: ({ tab }) => {\n            actions.setTab(tab as ActivityTab)\n        },\n    })),\n])\n\nexport function ActivityScene(): JSX.Element {\n    const { tab } = useValues(activitySceneLogic)\n    const { setTab } = useActions(activitySceneLogic)\n\n    return (\n        <>\n            <PageHeader tabbedPage />\n            <LemonTabs activeKey={tab} onChange={(t) => setTab(t)} tabs={ACTIVITY_TABS} />\n        </>\n    )\n}\n\nexport const scene: SceneExport = {\n    component: ActivityScene,\n    logic: activitySceneLogic,\n}\n", "import { useActions, useValues } from 'kea'\n\nimport { QueryFeature } from '~/queries/nodes/DataTable/queryFeatures'\nimport { Query } from '~/queries/Query/Query'\n\nimport { eventsSceneLogic } from './eventsSceneLogic'\n\nexport function EventsScene(): JSX.Element {\n    const { query } = useValues(eventsSceneLogic)\n    const { setQuery } = useActions(eventsSceneLogic)\n\n    return (\n        <Query\n            query={query}\n            setQuery={setQuery}\n            context={{\n                showOpenEditorButton: true,\n                extraDataTableQueryFeatures: [QueryFeature.highlightExceptionEventRows],\n            }}\n        />\n    )\n}\n", "import equal from 'fast-deep-equal'\nimport { actions, connect, kea, path, reducers, selectors } from 'kea'\nimport { actionToUrl, urlToAction } from 'kea-router'\nimport { UrlToActionPayload } from 'kea-router/lib/types'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast/LemonToast'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { objectsEqual } from 'lib/utils'\nimport { getDefaultEventsSceneQuery } from 'scenes/activity/explore/defaults'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { urls } from 'scenes/urls'\n\nimport { getDefaultEventsQueryForTeam } from '~/queries/nodes/DataTable/defaultEventsQuery'\nimport { Node } from '~/queries/schema/schema-general'\nimport { ActivityTab } from '~/types'\n\nimport type { eventsSceneLogicType } from './eventsSceneLogicType'\n\nexport const eventsSceneLogic = kea<eventsSceneLogicType>([\n    path(['scenes', 'events', 'eventsSceneLogic']),\n    connect({ values: [teamLogic, ['currentTeam'], featureFlagLogic, ['featureFlags']] }),\n\n    actions({ setQuery: (query: Node) => ({ query }) }),\n    reducers({ savedQuery: [null as Node | null, { setQuery: (_, { query }) => query }] }),\n    selectors({\n        defaultQuery: [\n            (s) => [s.currentTeam],\n            (currentTeam) => {\n                const defaultSourceForTeam = currentTeam && getDefaultEventsQueryForTeam(currentTeam)\n                const defaultForScene = getDefaultEventsSceneQuery()\n                return defaultSourceForTeam ? { ...defaultForScene, source: defaultSourceForTeam } : defaultForScene\n            },\n        ],\n        query: [(s) => [s.savedQuery, s.defaultQuery], (savedQuery, defaultQuery) => savedQuery || defaultQuery],\n    }),\n    actionToUrl(({ values }) => ({\n        setQuery: () => [\n            urls.activity(ActivityTab.ExploreEvents),\n            {},\n            objectsEqual(values.query, values.defaultQuery) ? {} : { q: values.query },\n            { replace: true },\n        ],\n    })),\n\n    urlToAction(({ actions, values }) => {\n        const eventsQueryHandler: UrlToActionPayload[keyof UrlToActionPayload] = (_, __, { q: queryParam }): void => {\n            if (!equal(queryParam, values.query)) {\n                // nothing in the URL\n                if (!queryParam) {\n                    // set the default unless it's already there\n                    if (!objectsEqual(values.query, values.defaultQuery)) {\n                        actions.setQuery(values.defaultQuery)\n                    }\n                } else {\n                    if (typeof queryParam === 'object') {\n                        actions.setQuery(queryParam)\n                    } else {\n                        lemonToast.error('Invalid query in URL')\n                        console.error({ queryParam })\n                    }\n                }\n            }\n        }\n        return {\n            [urls.activity(ActivityTab.ExploreEvents)]: eventsQueryHandler,\n        }\n    }),\n])\n", "import { IconPauseFilled, IconPlayFilled } from '@posthog/icons'\nimport { LemonButton, Spinner, Tooltip } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { PropertyKeyInfo } from 'lib/components/PropertyKeyInfo'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { TZLabel } from 'lib/components/TZLabel'\nimport { LemonTable, LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { liveEventsTableLogic } from 'scenes/activity/live/liveEventsTableLogic'\nimport { PersonDisplay } from 'scenes/persons/PersonDisplay'\n\nimport type { LiveEvent } from '~/types'\n\nconst columns: LemonTableColumns<LiveEvent> = [\n    {\n        title: 'Event',\n        key: 'event',\n        className: 'max-w-80',\n        render: function Render(_, event: LiveEvent) {\n            return <PropertyKeyInfo value={event.event} type={TaxonomicFilterGroupType.Events} />\n        },\n    },\n    {\n        title: 'Person distinct ID',\n        tooltip:\n            'Some events may be missing a person profile \u2013 this is expected, because live events are streamed before person processing completes',\n        key: 'person',\n        className: 'max-w-80',\n        render: function Render(_, event: LiveEvent) {\n            return <PersonDisplay person={{ distinct_id: event.distinct_id }} />\n        },\n    },\n    {\n        title: 'URL / Screen',\n        key: '$current_url',\n        className: 'max-w-80',\n        render: function Render(_, event: LiveEvent) {\n            return <span>{event.properties['$current_url'] || event.properties['$screen_name']}</span>\n        },\n    },\n    {\n        title: 'Time',\n        key: 'timestamp',\n        className: 'max-w-80',\n        render: function Render(_, event: LiveEvent) {\n            return <TZLabel time={event.timestamp} />\n        },\n    },\n]\n\nexport function LiveEventsTable(): JSX.Element {\n    const { events, stats, streamPaused } = useValues(liveEventsTableLogic)\n    const { pauseStream, resumeStream } = useActions(liveEventsTableLogic)\n\n    return (\n        <div data-attr=\"manage-events-table\">\n            <div className=\"mb-4 flex w-full justify-between items-center\">\n                <div className=\"flex justify-center\">\n                    <Tooltip title=\"Estimate of users active in the last 30 seconds.\" placement=\"right\">\n                        <div className=\"flex justify-center items-center bg-surface-primary px-3 py-2 rounded border border-primary text-xs font-medium text-secondary space-x-2.5\">\n                            <span className=\"relative flex h-2.5 w-2.5\">\n                                <span\n                                    className={clsx(\n                                        'absolute inline-flex h-full w-full rounded-full bg-danger',\n                                        stats?.users_on_product != null && 'animate-ping'\n                                    )}\n                                    // Unfortunately we can't use the `opacity-50` class, because we use Tailwind's\n                                    // `important: true` and because of that Tailwind's `opacity` completely overrides\n                                    // the animation (see https://github.com/tailwindlabs/tailwindcss/issues/9225)\n                                    // eslint-disable-next-line react/forbid-dom-props\n                                    style={{ opacity: 0.75 }}\n                                />\n                                <span className=\"relative inline-flex rounded-full h-2.5 w-2.5 bg-danger\" />\n                            </span>\n                            <span className=\"text-sm cursor-default\">\n                                Users active right now: <b>{stats?.users_on_product ?? '0'}</b>\n                            </span>\n                        </div>\n                    </Tooltip>\n                </div>\n\n                <div>\n                    <LemonButton\n                        icon={\n                            streamPaused ? (\n                                <IconPlayFilled className=\"w-4 h-4\" />\n                            ) : (\n                                <IconPauseFilled className=\"w-4 h-4\" />\n                            )\n                        }\n                        type=\"secondary\"\n                        onClick={streamPaused ? resumeStream : pauseStream}\n                    >\n                        {streamPaused ? 'Play' : 'Pause'}\n                    </LemonButton>\n                </div>\n            </div>\n            <LemonTable\n                columns={columns}\n                data-attr=\"live-events-table\"\n                rowKey=\"uuid\"\n                dataSource={events}\n                useURLForSorting={false}\n                emptyState={\n                    <div className=\"flex flex-col justify-center items-center gap-4 p-6\">\n                        {!streamPaused ? (\n                            <Spinner className=\"text-4xl\" textColored />\n                        ) : (\n                            <IconPauseFilled className=\"text-4xl\" />\n                        )}\n                        <span className=\"text-lg font-title font-semibold leading-tight\">\n                            {!streamPaused ? 'Waiting for events\u2026' : 'Stream paused'}\n                        </span>\n                    </div>\n                }\n                nouns={['event', 'events']}\n            />\n        </div>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_fast_deep_equal", "import_kea", "import_kea_router", "eventsSceneLogic", "teamLogic", "featureFlagLogic", "query", "_", "s", "currentTeam", "defaultSourceForTeam", "getDefaultEventsQueryForTeam", "defaultForScene", "getDefaultEventsSceneQuery", "savedQuery", "defaultQuery", "values", "urls", "objectsEqual", "actions", "eventsQueryHandler", "__", "queryParam", "equal", "lemonToast", "import_jsx_runtime", "EventsScene", "query", "eventsSceneLogic", "setQuery", "Query", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_jsx_runtime", "columns", "_", "event", "PropertyKeyInfo", "PersonDisplay", "TZLabel", "LiveEventsTable", "events", "stats", "streamPaused", "liveEventsTableLogic", "pauseStream", "resumeStream", "Tooltip", "clsx", "LemonButton", "IconPlayFilled", "IconPauseFilled", "LemonTable", "Spinner", "import_jsx_runtime", "ACTIVITY_TABS", "EventsScene", "urls", "LiveEventsTable", "activitySceneLogic", "tab", "_", "s", "capitalizeFirstLetter", "actions", "ActivityScene", "setTab", "PageHeader", "LemonTabs", "t", "scene"]
}
