{
  "version": 3,
  "sources": ["../src/scenes/saved-insights/SavedInsights.tsx", "../src/lib/components/Alerts/views/Alerts.tsx", "../src/lib/components/Alerts/alertLogic.ts", "../src/lib/components/Alerts/alertsLogic.ts", "../src/lib/components/Alerts/views/EditAlertModal.tsx", "../src/lib/components/Alerts/views/ManageAlertsModal.tsx", "../src/lib/components/MemberSelectMultiple.tsx", "../src/lib/components/Alerts/alertFormLogic.ts", "../src/lib/components/Alerts/SnoozeButton.tsx", "../src/lib/components/Cards/InsightCard/index.tsx", "../src/lib/components/Cards/InsightCard/InsightCard.tsx", "../../node_modules/.pnpm/react-intersection-observer@9.5.3_react@18.2.0/node_modules/src/InView.tsx", "../../node_modules/.pnpm/react-intersection-observer@9.5.3_react@18.2.0/node_modules/src/observe.ts", "../../node_modules/.pnpm/react-intersection-observer@9.5.3_react@18.2.0/node_modules/src/useInView.tsx", "../src/lib/components/Cards/InsightCard/InsightMeta.tsx", "../src/lib/components/Cards/CardMeta.tsx", "../src/lib/components/Cards/InsightCard/TopHeading.tsx", "../src/scenes/saved-insights/newInsightsMenu.tsx", "../src/scenes/saved-insights/SavedInsightsFilters.tsx", "../src/scenes/saved-insights/ReloadInsight.tsx"],
  "sourcesContent": ["import './SavedInsights.scss'\n\nimport {\n    IconAI,\n    IconBrackets,\n    IconCorrelationAnalysis,\n    IconCursor,\n    IconFlask,\n    IconFunnels,\n    IconGraph,\n    IconHogQL,\n    IconLifecycle,\n    IconPerson,\n    IconPieChart,\n    IconPlusSmall,\n    IconRetention,\n    IconStar,\n    IconStarFilled,\n    IconStickiness,\n    IconTrends,\n    IconUserPaths,\n    IconVideoCamera,\n    IconWarning,\n} from '@posthog/icons'\nimport { LemonSelectOptions } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { AccessControlledLemonButton } from 'lib/components/AccessControlledLemonButton'\nimport { ActivityLog } from 'lib/components/ActivityLog/ActivityLog'\nimport { Alerts } from 'lib/components/Alerts/views/Alerts'\nimport { InsightCard } from 'lib/components/Cards/InsightCard'\nimport { ObjectTags } from 'lib/components/ObjectTags/ObjectTags'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { TZLabel } from 'lib/components/TZLabel'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { IconAction, IconGridView, IconListView, IconTableChart } from 'lib/lemon-ui/icons'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonDivider } from 'lib/lemon-ui/LemonDivider'\nimport { LemonSegmentedButton } from 'lib/lemon-ui/LemonSegmentedButton'\nimport { LemonTable, LemonTableColumn, LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { createdAtColumn, createdByColumn } from 'lib/lemon-ui/LemonTable/columnUtils'\nimport { LemonTableLink } from 'lib/lemon-ui/LemonTable/LemonTableLink'\nimport { LemonTabs } from 'lib/lemon-ui/LemonTabs'\nimport { PaginationControl, usePagination } from 'lib/lemon-ui/PaginationControl'\nimport { SpinnerOverlay } from 'lib/lemon-ui/Spinner/Spinner'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { isNonEmptyObject } from 'lib/utils'\nimport { deleteInsightWithUndo } from 'lib/utils/deleteWithUndo'\nimport { SavedInsightsEmptyState } from 'scenes/insights/EmptyStates'\nimport { useSummarizeInsight } from 'scenes/insights/summarizeInsight'\nimport { organizationLogic } from 'scenes/organizationLogic'\nimport { projectLogic } from 'scenes/projectLogic'\nimport { overlayForNewInsightMenu } from 'scenes/saved-insights/newInsightsMenu'\nimport { SavedInsightsFilters } from 'scenes/saved-insights/SavedInsightsFilters'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { NodeKind } from '~/queries/schema/schema-general'\nimport { isNodeWithSource } from '~/queries/utils'\nimport {\n    AccessControlResourceType,\n    ActivityScope,\n    InsightType,\n    LayoutView,\n    QueryBasedInsightModel,\n    SavedInsightsTabs,\n} from '~/types'\n\nimport { ReloadInsight } from './ReloadInsight'\nimport { INSIGHTS_PER_PAGE, savedInsightsLogic } from './savedInsightsLogic'\n\ninterface NewInsightButtonProps {\n    dataAttr: string\n}\n\nexport interface InsightTypeMetadata {\n    name: string\n    description?: string\n    /** Override the description on the insight page tab, for additional info. */\n    tooltipDescription?: string\n    icon: (props?: any) => JSX.Element | null\n    inMenu: boolean\n}\n\nexport const QUERY_TYPES_METADATA: Record<NodeKind, InsightTypeMetadata> = {\n    [NodeKind.TrendsQuery]: {\n        name: 'Trends',\n        description: 'Visualize and break down how actions or events vary over time.',\n        icon: IconTrends,\n        inMenu: true,\n    },\n    [NodeKind.FunnelsQuery]: {\n        name: 'Funnel',\n        description: 'Discover how many users complete or drop out of a sequence of actions.',\n        icon: IconFunnels,\n        inMenu: true,\n    },\n    [NodeKind.RetentionQuery]: {\n        name: 'Retention',\n        description: 'See how many users return on subsequent days after an initial action.',\n        icon: IconRetention,\n        inMenu: true,\n    },\n    [NodeKind.PathsQuery]: {\n        name: 'Paths',\n        description: 'Trace the journeys users take within your product and where they drop off.',\n        icon: IconUserPaths,\n        inMenu: true,\n    },\n    [NodeKind.StickinessQuery]: {\n        name: 'Stickiness',\n        description: 'See what keeps users coming back by viewing the interval between repeated actions.',\n        icon: IconStickiness,\n        inMenu: true,\n    },\n    [NodeKind.LifecycleQuery]: {\n        name: 'Lifecycle',\n        description: 'Understand growth by breaking down new, resurrected, returning and dormant users.',\n        tooltipDescription:\n            \"Understand growth by breaking down new, resurrected, returning and dormant users. Doesn't include anonymous events and users/groups appear as new when they are first identified.\",\n        icon: IconLifecycle,\n        inMenu: true,\n    },\n    [NodeKind.FunnelCorrelationQuery]: {\n        name: 'Funnel Correlation',\n        description: 'See which events or properties correlate to a funnel result.',\n        icon: IconCorrelationAnalysis,\n        inMenu: false,\n    },\n    [NodeKind.EventsNode]: {\n        name: 'Events',\n        description: 'List and explore events.',\n        icon: IconCursor,\n        inMenu: true,\n    },\n    [NodeKind.ActionsNode]: {\n        name: 'Actions',\n        description: 'List and explore actions.',\n        icon: IconAction,\n        inMenu: true,\n    },\n    [NodeKind.DataWarehouseNode]: {\n        name: 'Data Warehouse',\n        description: 'List and explore data warehouse tables.',\n        icon: IconTableChart,\n        inMenu: true,\n    },\n    [NodeKind.EventsQuery]: {\n        name: 'Events Query',\n        description: 'List and explore events.',\n        icon: IconCursor,\n        inMenu: true,\n    },\n    [NodeKind.PersonsNode]: {\n        name: 'Persons',\n        description: 'List and explore your persons.',\n        icon: IconPerson,\n        inMenu: true,\n    },\n    [NodeKind.ActorsQuery]: {\n        name: 'Persons',\n        description: 'List of persons matching specified conditions.',\n        icon: IconPerson,\n        inMenu: false,\n    },\n    [NodeKind.InsightActorsQuery]: {\n        name: 'Persons',\n        description: 'List of persons matching specified conditions, derived from an insight.',\n        icon: IconPerson,\n        inMenu: false,\n    },\n    [NodeKind.InsightActorsQueryOptions]: {\n        name: 'Persons',\n        description: 'Options for InsightActorsQuery.',\n        icon: IconPerson,\n        inMenu: false,\n    },\n    [NodeKind.FunnelsActorsQuery]: {\n        name: 'Persons',\n        description: 'List of persons matching specified conditions, derived from an insight.',\n        icon: IconPerson,\n        inMenu: false,\n    },\n    [NodeKind.FunnelCorrelationActorsQuery]: {\n        name: 'Persons',\n        description: 'List of persons matching specified conditions, derived from an insight.',\n        icon: IconPerson,\n        inMenu: false,\n    },\n    [NodeKind.DataTableNode]: {\n        name: 'Data table',\n        description: 'Slice and dice your data in a table.',\n        icon: IconTableChart,\n        inMenu: true,\n    },\n    [NodeKind.DataVisualizationNode]: {\n        name: 'Data visualization',\n        description: 'Slice and dice your data in a table or chart.',\n        icon: IconTableChart,\n        inMenu: false,\n    },\n    [NodeKind.SavedInsightNode]: {\n        name: 'Insight visualization by short id',\n        description: 'View your insights.',\n        icon: IconGraph,\n        inMenu: true,\n    },\n    [NodeKind.InsightVizNode]: {\n        name: 'Insight visualization',\n        description: 'View your insights.',\n        icon: IconGraph,\n        inMenu: true,\n    },\n    [NodeKind.SessionsTimelineQuery]: {\n        name: 'Sessions',\n        description: 'Sessions timeline query.',\n        icon: IconTrends,\n        inMenu: true,\n    },\n    [NodeKind.HogQLQuery]: {\n        name: 'SQL',\n        description: 'Direct SQL query.',\n        icon: IconBrackets,\n        inMenu: true,\n    },\n    [NodeKind.HogQLASTQuery]: {\n        name: 'SQL AST',\n        description: 'Direct SQL AST query.',\n        icon: IconBrackets,\n        inMenu: false,\n    },\n    [NodeKind.HogQLMetadata]: {\n        name: 'SQL Metadata',\n        description: 'Metadata for a SQL query.',\n        icon: IconHogQL,\n        inMenu: true,\n    },\n    [NodeKind.HogQLAutocomplete]: {\n        name: 'SQL Autocomplete',\n        description: 'Autocomplete for the SQL query editor.',\n        icon: IconHogQL,\n        inMenu: false,\n    },\n    [NodeKind.DatabaseSchemaQuery]: {\n        name: 'Database Schema',\n        description: 'Introspect the PostHog database schema.',\n        icon: IconHogQL,\n        inMenu: true,\n    },\n    [NodeKind.WebOverviewQuery]: {\n        name: 'Overview Stats',\n        description: 'View overview stats for a website.',\n        icon: IconPieChart,\n        inMenu: true,\n    },\n    [NodeKind.WebStatsTableQuery]: {\n        name: 'Web Table',\n        description: 'A table of results from web analytics, with a breakdown.',\n        icon: IconPieChart,\n        inMenu: true,\n    },\n    [NodeKind.WebGoalsQuery]: {\n        name: 'Goals',\n        description: 'View goal conversions.',\n        icon: IconPieChart,\n        inMenu: true,\n    },\n    [NodeKind.WebExternalClicksTableQuery]: {\n        name: 'External click urls',\n        description: 'View clicks on external links.',\n        icon: IconPieChart,\n        inMenu: true,\n    },\n    [NodeKind.WebVitalsQuery]: {\n        name: 'Web vitals',\n        description: 'View web vitals.',\n        icon: IconPieChart,\n        inMenu: true,\n    },\n    [NodeKind.WebVitalsPathBreakdownQuery]: {\n        name: 'Web vitals path breakdown',\n        description: 'View web vitals broken down by path.',\n        icon: IconPieChart,\n        inMenu: true,\n    },\n    [NodeKind.HogQuery]: {\n        name: 'Hog',\n        description: 'Hog query.',\n        icon: IconHogQL,\n        inMenu: true,\n    },\n    [NodeKind.SessionAttributionExplorerQuery]: {\n        name: 'Session Attribution',\n        description: 'Session Attribution Explorer.',\n        icon: IconPieChart,\n        inMenu: true,\n    },\n    [NodeKind.ErrorTrackingQuery]: {\n        name: 'Error Tracking',\n        description: 'List and explore exception groups.',\n        icon: IconWarning,\n        inMenu: false,\n    },\n    [NodeKind.RecordingsQuery]: {\n        name: 'Session Recordings',\n        description: 'View available recordings.',\n        icon: IconVideoCamera,\n        inMenu: false,\n    },\n    [NodeKind.ExperimentQuery]: {\n        name: 'Experiment Result',\n        description: 'View experiment result.',\n        icon: IconFlask,\n        inMenu: false,\n    },\n    [NodeKind.ExperimentExposureQuery]: {\n        name: 'Experiment Exposure',\n        description: 'View experiment exposure.',\n        icon: IconFlask,\n        inMenu: false,\n    },\n    [NodeKind.ExperimentTrendsQuery]: {\n        name: 'Experiment Trends Result',\n        description: 'View experiment trend result.',\n        icon: IconFlask,\n        inMenu: false,\n    },\n    [NodeKind.ExperimentFunnelsQuery]: {\n        name: 'Experiment Funnels Result',\n        description: 'View experiment funnel result.',\n        icon: IconFlask,\n        inMenu: false,\n    },\n    [NodeKind.ExperimentMetric]: {\n        name: 'Experiment Metric',\n        description: 'Experiment metric configuration.',\n        icon: IconFlask,\n        inMenu: false,\n    },\n    [NodeKind.ExperimentEventMetricConfig]: {\n        name: 'Experiment Event Metric Config',\n        description: 'Configuration for experiment event metrics.',\n        icon: IconFlask,\n        inMenu: false,\n    },\n    [NodeKind.ExperimentActionMetricConfig]: {\n        name: 'Experiment Action Metric Config',\n        description: 'Configuration for experiment action metrics.',\n        icon: IconFlask,\n        inMenu: false,\n    },\n    [NodeKind.ExperimentDataWarehouseMetricConfig]: {\n        name: 'Experiment Data Warehouse Metric Config',\n        description: 'Configuration for experiment data warehouse metrics.',\n        icon: IconFlask,\n        inMenu: false,\n    },\n    [NodeKind.TeamTaxonomyQuery]: {\n        name: 'Team Taxonomy',\n        icon: IconHogQL,\n        inMenu: false,\n    },\n    [NodeKind.EventTaxonomyQuery]: {\n        name: 'Event Taxonomy',\n        icon: IconHogQL,\n        inMenu: false,\n    },\n    [NodeKind.SuggestedQuestionsQuery]: {\n        name: 'AI Suggested Questions',\n        icon: IconHogQL,\n        inMenu: false,\n    },\n    [NodeKind.ActorsPropertyTaxonomyQuery]: {\n        name: 'Actor Property Taxonomy',\n        description: \"View the taxonomy of the actor's property.\",\n        icon: IconHogQL,\n        inMenu: false,\n    },\n    [NodeKind.TracesQuery]: {\n        name: 'LLM Observability Traces',\n        icon: IconAI,\n        inMenu: false,\n    },\n}\n\nexport const INSIGHT_TYPES_METADATA: Record<InsightType, InsightTypeMetadata> = {\n    [InsightType.TRENDS]: QUERY_TYPES_METADATA[NodeKind.TrendsQuery],\n    [InsightType.FUNNELS]: QUERY_TYPES_METADATA[NodeKind.FunnelsQuery],\n    [InsightType.RETENTION]: QUERY_TYPES_METADATA[NodeKind.RetentionQuery],\n    [InsightType.PATHS]: QUERY_TYPES_METADATA[NodeKind.PathsQuery],\n    [InsightType.STICKINESS]: QUERY_TYPES_METADATA[NodeKind.StickinessQuery],\n    [InsightType.LIFECYCLE]: QUERY_TYPES_METADATA[NodeKind.LifecycleQuery],\n    [InsightType.SQL]: {\n        name: 'SQL',\n        description: 'Use SQL to query your data.',\n        icon: IconHogQL,\n        inMenu: true,\n    },\n    [InsightType.JSON]: {\n        name: 'Custom',\n        description: 'Save components powered by our JSON query language.',\n        icon: IconBrackets,\n        inMenu: true,\n    },\n    [InsightType.HOG]: {\n        name: 'Hog',\n        description: 'Use Hog to query your data.',\n        icon: IconHogQL,\n        inMenu: true,\n    },\n}\n\nexport const INSIGHT_TYPE_OPTIONS: LemonSelectOptions<string> = [\n    { value: 'All types', label: 'All types' },\n    ...Object.entries(INSIGHT_TYPES_METADATA).map(([value, meta]) => ({\n        value,\n        label: meta.name,\n        icon: meta.icon ? <meta.icon /> : undefined,\n    })),\n]\n\nexport const scene: SceneExport = {\n    component: SavedInsights,\n    logic: savedInsightsLogic,\n}\n\nexport function InsightIcon({\n    insight,\n    className,\n}: {\n    insight: QueryBasedInsightModel\n    className?: string\n}): JSX.Element | null {\n    let Icon: (props?: any) => JSX.Element | null = () => null\n\n    if ('query' in insight && isNonEmptyObject(insight.query)) {\n        const insightType = isNodeWithSource(insight.query) ? insight.query.source.kind : insight.query.kind\n        const insightMetadata = QUERY_TYPES_METADATA[insightType]\n        Icon = insightMetadata && insightMetadata.icon\n    }\n\n    return Icon ? <Icon className={className} /> : null\n}\n\nexport function NewInsightButton({ dataAttr }: NewInsightButtonProps): JSX.Element {\n    return (\n        <LemonButton\n            type=\"primary\"\n            to={urls.insightNew()}\n            sideAction={{\n                dropdown: {\n                    placement: 'bottom-end',\n                    className: 'new-insight-overlay',\n                    actionable: true,\n                    overlay: overlayForNewInsightMenu(dataAttr),\n                },\n                'data-attr': 'saved-insights-new-insight-dropdown',\n            }}\n            data-attr=\"saved-insights-new-insight-button\"\n            size=\"small\"\n            icon={<IconPlusSmall />}\n        >\n            New insight\n        </LemonButton>\n    )\n}\n\nfunction SavedInsightsGrid(): JSX.Element {\n    const { loadInsights, renameInsight, duplicateInsight } = useActions(savedInsightsLogic)\n    const { insights, insightsLoading, pagination } = useValues(savedInsightsLogic)\n    const { currentProjectId } = useValues(projectLogic)\n\n    const paginationState = usePagination(insights?.results || [], pagination)\n\n    return (\n        <>\n            <div className=\"saved-insights-grid mb-2\">\n                {paginationState.dataSourcePage.map((insight) => {\n                    return (\n                        <InsightCard\n                            key={insight.short_id}\n                            insight={insight}\n                            rename={() => renameInsight(insight)}\n                            duplicate={() => duplicateInsight(insight)}\n                            deleteWithUndo={async () =>\n                                await deleteInsightWithUndo({\n                                    object: insight,\n                                    endpoint: `projects/${currentProjectId}/insights`,\n                                    callback: loadInsights,\n                                })\n                            }\n                            placement=\"SavedInsightGrid\"\n                        />\n                    )\n                })}\n                {insightsLoading && (\n                    <div className=\"min-h-[30rem]\">\n                        <SpinnerOverlay sceneLevel />\n                    </div>\n                )}\n            </div>\n            <PaginationControl {...paginationState} nouns={['insight', 'insights']} bordered />\n        </>\n    )\n}\n\nexport function SavedInsights(): JSX.Element {\n    const { featureFlags } = useValues(featureFlagLogic)\n    const showAlerts = featureFlags[FEATURE_FLAGS.ALERTS]\n\n    const { loadInsights, updateFavoritedInsight, renameInsight, duplicateInsight, setSavedInsightsFilters } =\n        useActions(savedInsightsLogic)\n    const { insights, count, insightsLoading, filters, sorting, pagination, alertModalId } =\n        useValues(savedInsightsLogic)\n    const { hasTagging } = useValues(organizationLogic)\n    const { currentProjectId } = useValues(projectLogic)\n    const summarizeInsight = useSummarizeInsight()\n\n    const { tab, layoutView, page } = filters\n\n    const startCount = (page - 1) * INSIGHTS_PER_PAGE + 1\n    const endCount = page * INSIGHTS_PER_PAGE < count ? page * INSIGHTS_PER_PAGE : count\n\n    const columns: LemonTableColumns<QueryBasedInsightModel> = [\n        {\n            key: 'id',\n            width: 32,\n            render: function renderType(_, insight) {\n                return <InsightIcon insight={insight} className=\"text-secondary text-2xl\" />\n            },\n        },\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            render: function renderName(name: string, insight) {\n                return (\n                    <>\n                        <LemonTableLink\n                            to={urls.insightView(insight.short_id)}\n                            title={\n                                <>\n                                    {name || <i>{summarizeInsight(insight.query)}</i>}\n\n                                    <AccessControlledLemonButton\n                                        userAccessLevel={insight.user_access_level}\n                                        minAccessLevel=\"editor\"\n                                        resourceType={AccessControlResourceType.Insight}\n                                        className=\"ml-1\"\n                                        size=\"xsmall\"\n                                        onClick={(e) => {\n                                            e.preventDefault()\n                                            updateFavoritedInsight(insight, !insight.favorited)\n                                        }}\n                                        icon={\n                                            insight.favorited ? (\n                                                <IconStarFilled className=\"text-warning\" />\n                                            ) : (\n                                                <IconStar className=\"text-secondary\" />\n                                            )\n                                        }\n                                        tooltip={`${insight.favorited ? 'Remove from' : 'Add to'} favorite insights`}\n                                    />\n                                </>\n                            }\n                            description={insight.description}\n                        />\n                    </>\n                )\n            },\n        },\n        ...(hasTagging\n            ? [\n                  {\n                      title: 'Tags',\n                      dataIndex: 'tags' as keyof QueryBasedInsightModel,\n                      key: 'tags',\n                      render: function renderTags(tags: string[]) {\n                          return <ObjectTags tags={tags} staticOnly />\n                      },\n                  },\n              ]\n            : []),\n        ...(tab === SavedInsightsTabs.Yours\n            ? []\n            : [\n                  createdByColumn() as LemonTableColumn<\n                      QueryBasedInsightModel,\n                      keyof QueryBasedInsightModel | undefined\n                  >,\n              ]),\n        createdAtColumn() as LemonTableColumn<QueryBasedInsightModel, keyof QueryBasedInsightModel | undefined>,\n        {\n            title: 'Last modified',\n            sorter: true,\n            dataIndex: 'last_modified_at',\n            render: function renderLastModified(last_modified_at: string) {\n                return (\n                    <div className=\"whitespace-nowrap\">{last_modified_at && <TZLabel time={last_modified_at} />}</div>\n                )\n            },\n        },\n        {\n            width: 0,\n            render: function Render(_, insight) {\n                return (\n                    <More\n                        overlay={\n                            <>\n                                <LemonButton to={urls.insightView(insight.short_id)} fullWidth>\n                                    View\n                                </LemonButton>\n\n                                <LemonDivider />\n\n                                <AccessControlledLemonButton\n                                    userAccessLevel={insight.user_access_level}\n                                    minAccessLevel=\"editor\"\n                                    resourceType={AccessControlResourceType.Insight}\n                                    to={urls.insightEdit(insight.short_id)}\n                                    fullWidth\n                                >\n                                    Edit\n                                </AccessControlledLemonButton>\n\n                                <AccessControlledLemonButton\n                                    userAccessLevel={insight.user_access_level}\n                                    minAccessLevel=\"editor\"\n                                    resourceType={AccessControlResourceType.Insight}\n                                    onClick={() => renameInsight(insight)}\n                                    data-attr={`insight-item-${insight.short_id}-dropdown-rename`}\n                                    fullWidth\n                                >\n                                    Rename\n                                </AccessControlledLemonButton>\n\n                                <LemonButton\n                                    onClick={() => duplicateInsight(insight)}\n                                    data-attr=\"duplicate-insight-from-list-view\"\n                                    fullWidth\n                                >\n                                    Duplicate\n                                </LemonButton>\n\n                                <LemonDivider />\n\n                                <AccessControlledLemonButton\n                                    userAccessLevel={insight.user_access_level}\n                                    minAccessLevel=\"editor\"\n                                    resourceType={AccessControlResourceType.Insight}\n                                    status=\"danger\"\n                                    onClick={() =>\n                                        void deleteInsightWithUndo({\n                                            object: insight,\n                                            endpoint: `projects/${currentProjectId}/insights`,\n                                            callback: loadInsights,\n                                        })\n                                    }\n                                    data-attr={`insight-item-${insight.short_id}-dropdown-remove`}\n                                    fullWidth\n                                >\n                                    Delete insight\n                                </AccessControlledLemonButton>\n                            </>\n                        }\n                    />\n                )\n            },\n        },\n    ]\n\n    return (\n        <div className=\"saved-insights\">\n            <PageHeader buttons={<NewInsightButton dataAttr=\"saved-insights-create-new-insight\" />} />\n            <LemonTabs\n                activeKey={tab}\n                onChange={(tab) => setSavedInsightsFilters({ tab })}\n                tabs={[\n                    { key: SavedInsightsTabs.All, label: 'All insights' },\n                    { key: SavedInsightsTabs.Yours, label: 'Your insights' },\n                    { key: SavedInsightsTabs.Favorites, label: 'Favorites' },\n                    { key: SavedInsightsTabs.History, label: 'History' },\n                    ...(showAlerts\n                        ? [\n                              {\n                                  key: SavedInsightsTabs.Alerts,\n                                  label: <div className=\"flex items-center gap-2\">Alerts</div>,\n                              },\n                          ]\n                        : []),\n                ]}\n            />\n\n            {tab === SavedInsightsTabs.History ? (\n                <ActivityLog scope={ActivityScope.INSIGHT} />\n            ) : tab === SavedInsightsTabs.Alerts ? (\n                <Alerts alertId={alertModalId} />\n            ) : (\n                <>\n                    <SavedInsightsFilters filters={filters} setFilters={setSavedInsightsFilters} />\n                    <LemonDivider className=\"my-4\" />\n                    <div className=\"flex justify-between mb-4 gap-2 flex-wrap mt-2 items-center\">\n                        <span className=\"text-secondary\">\n                            {count\n                                ? `${startCount}${endCount - startCount > 1 ? '-' + endCount : ''} of ${count} insight${\n                                      count === 1 ? '' : 's'\n                                  }`\n                                : null}\n                        </span>\n                        <div>\n                            <LemonSegmentedButton\n                                onChange={(newValue) => setSavedInsightsFilters({ layoutView: newValue })}\n                                value={layoutView}\n                                options={[\n                                    {\n                                        value: LayoutView.List,\n                                        label: 'List',\n                                        icon: <IconListView />,\n                                    },\n                                    {\n                                        value: LayoutView.Card,\n                                        label: 'Cards',\n                                        icon: <IconGridView />,\n                                    },\n                                ]}\n                                size=\"small\"\n                            />\n                        </div>\n                    </div>\n                    {!insightsLoading && insights.count < 1 ? (\n                        <SavedInsightsEmptyState />\n                    ) : (\n                        <>\n                            <ReloadInsight />\n                            {layoutView === LayoutView.List ? (\n                                <LemonTable\n                                    loading={insightsLoading}\n                                    columns={columns}\n                                    dataSource={insights.results}\n                                    pagination={pagination}\n                                    noSortingCancellation\n                                    sorting={sorting}\n                                    onSort={(newSorting) =>\n                                        setSavedInsightsFilters({\n                                            order: newSorting\n                                                ? `${newSorting.order === -1 ? '-' : ''}${newSorting.columnKey}`\n                                                : undefined,\n                                        })\n                                    }\n                                    rowKey=\"id\"\n                                    loadingSkeletonRows={15}\n                                    nouns={['insight', 'insights']}\n                                />\n                            ) : (\n                                <SavedInsightsGrid />\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </div>\n    )\n}\n", "import { LemonTag, Tooltip } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { router } from 'kea-router'\nimport { DetectiveHog } from 'lib/components/hedgehogs'\nimport { ProductIntroduction } from 'lib/components/ProductIntroduction/ProductIntroduction'\nimport { TZLabel } from 'lib/components/TZLabel'\nimport { LemonTable, LemonTableColumn, LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { createdByColumn } from 'lib/lemon-ui/LemonTable/columnUtils'\nimport { LemonTableLink } from 'lib/lemon-ui/LemonTable/LemonTableLink'\nimport { urls } from 'scenes/urls'\n\nimport { ProductKey } from '~/types'\n\nimport { AlertState } from '../../../../queries/schema/schema-general'\nimport { alertLogic } from '../alertLogic'\nimport { alertsLogic } from '../alertsLogic'\nimport { AlertType } from '../types'\nimport { EditAlertModal } from './EditAlertModal'\nimport { AlertStateIndicator } from './ManageAlertsModal'\n\ninterface AlertsProps {\n    alertId: AlertType['id'] | null\n}\n\nexport function Alerts({ alertId }: AlertsProps): JSX.Element {\n    const { push } = useActions(router)\n    const logic = alertsLogic()\n    const { loadAlerts } = useActions(logic)\n    const { alertsSortedByState, alertsLoading } = useValues(logic)\n\n    const { alert } = useValues(alertLogic({ alertId }))\n\n    const columns: LemonTableColumns<AlertType> = [\n        {\n            key: 'id',\n            width: 32,\n        },\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            render: function renderName(name: any, alert) {\n                return (\n                    <>\n                        <LemonTableLink\n                            to={urls.alert(alert.id)}\n                            className={alert.enabled ? '' : 'text-muted'}\n                            title={\n                                <div className=\"flex flex-row gap-3 items-center\">\n                                    <div>{name}</div>\n                                </div>\n                            }\n                        />\n                    </>\n                )\n            },\n        },\n        {\n            title: 'Status',\n            dataIndex: 'state',\n            render: function renderStateIndicator(_, alert: AlertType) {\n                return alert.enabled ? <AlertStateIndicator alert={alert} /> : null\n            },\n        },\n        {\n            title: 'Last checked',\n            sorter: true,\n            dataIndex: 'last_checked_at',\n            render: function renderLastChecked(last_checked_at: any) {\n                return <div className=\"whitespace-nowrap\">{last_checked_at && <TZLabel time={last_checked_at} />}</div>\n            },\n        },\n        {\n            title: 'Last notified',\n            sorter: true,\n            dataIndex: 'last_notified_at',\n            render: function renderLastModified(last_notified_at: any) {\n                return (\n                    <div className=\"whitespace-nowrap\">{last_notified_at && <TZLabel time={last_notified_at} />}</div>\n                )\n            },\n        },\n        createdByColumn() as LemonTableColumn<AlertType, keyof AlertType | undefined>,\n        {\n            title: 'Insight',\n            dataIndex: 'insight',\n            key: 'insight',\n            render: function renderInsightLink(insight: any) {\n                return (\n                    <LemonTableLink\n                        to={urls.insightView(insight.short_id)}\n                        title={\n                            <Tooltip title={insight.name}>\n                                <div>{insight.name || insight.derived_name}</div>\n                            </Tooltip>\n                        }\n                    />\n                )\n            },\n        },\n        {\n            title: 'Enabled',\n            dataIndex: 'enabled',\n            key: 'enabled',\n            render: (enabled: any) =>\n                enabled ? <LemonTag type=\"success\">ENABLED</LemonTag> : <LemonTag type=\"danger\">DISABLED</LemonTag>,\n        },\n    ]\n\n    // TODO: add info here to sign up for alerts early access\n    return (\n        <>\n            {alertsSortedByState.length === 0 && !alertsLoading && (\n                <ProductIntroduction\n                    productName=\"Alerts\"\n                    productKey={ProductKey.ALERTS}\n                    thingName=\"alert\"\n                    description=\"Alerts enable you to monitor your insight and notify you when certain conditions are met. Please note that alerts are in alpha and may not be fully reliable.\"\n                    // TODO: update docs link when ready\n                    // docsURL=\"https://posthog.com/docs/data/annotations\"\n                    isEmpty={alertsSortedByState.length === 0 && !alertsLoading}\n                    customHog={DetectiveHog}\n                    actionElementOverride={\n                        <span className=\"italic\">\n                            To get started, visit a trends insight, expand options in the header and click 'Manage\n                            Alerts'\n                        </span>\n                    }\n                />\n            )}\n\n            {alert && (\n                <EditAlertModal\n                    onClose={() => push(urls.alerts())}\n                    isOpen\n                    alertId={alert.id}\n                    insightShortId={alert.insight.short_id}\n                    insightId={alert.insight.id}\n                    insightLogicProps={{ dashboardItemId: alert.insight.short_id }}\n                    onEditSuccess={() => {\n                        loadAlerts()\n                        push(urls.alerts())\n                    }}\n                />\n            )}\n\n            <LemonTable\n                loading={alertsLoading}\n                columns={columns}\n                dataSource={alertsSortedByState}\n                noSortingCancellation\n                rowKey=\"id\"\n                loadingSkeletonRows={5}\n                nouns={['alert', 'alerts']}\n                rowClassName={(alert) => (alert.state === AlertState.NOT_FIRING ? null : 'highlighted')}\n            />\n        </>\n    )\n}\n", "import { events, kea, key, path, props } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\n\nimport type { alertLogicType } from './alertLogicType'\nimport { AlertType } from './types'\n\nexport interface AlertLogicProps {\n    alertId?: AlertType['id'] | null\n}\n\nexport const alertLogic = kea<alertLogicType>([\n    path(['lib', 'components', 'Alerts', 'alertLogic']),\n    props({} as AlertLogicProps),\n    key(({ alertId }) => alertId ?? 'new'),\n\n    loaders(({ props }) => ({\n        alert: [\n            null as AlertType | null,\n            {\n                loadAlert: async () => {\n                    if (!props.alertId) {\n                        return null\n                    }\n\n                    return await api.alerts.get(props.alertId)\n                },\n            },\n        ],\n    })),\n\n    events(({ actions }) => ({\n        afterMount() {\n            actions.loadAlert()\n        },\n    })),\n])\n", "import { afterMount, kea, path, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\n\nimport { AlertState } from '~/queries/schema/schema-general'\n\nimport { AlertLogicProps } from './alertLogic'\nimport type { alertsLogicType } from './alertsLogicType'\nimport { AlertType } from './types'\n\nexport interface AlertsLogicProps extends AlertLogicProps {}\n\nexport const alertsLogic = kea<alertsLogicType>([\n    path(['lib', 'components', 'Alerts', 'alertsLogic']),\n\n    loaders({\n        alerts: {\n            __default: [] as AlertType[],\n            loadAlerts: async () => {\n                const response = await api.alerts.list()\n                return response.results\n            },\n        },\n    }),\n\n    selectors({\n        alertsSortedByState: [\n            (s) => [s.alerts],\n            (alerts: AlertType[]): AlertType[] => alerts.sort((a, b) => alertComparatorKey(a) - alertComparatorKey(b)),\n        ],\n    }),\n\n    afterMount(({ actions }) => actions.loadAlerts()),\n])\n\nconst alertComparatorKey = (alert: AlertType): number => {\n    if (!alert.enabled) {\n        return 100\n    }\n\n    switch (alert.state) {\n        case AlertState.FIRING:\n            return 1\n        case AlertState.ERRORED:\n            return 2\n        case AlertState.SNOOZED:\n            return 3\n        case AlertState.NOT_FIRING:\n            return 4\n    }\n}\n", "import { IconInfo } from '@posthog/icons'\nimport {\n    LemonBanner,\n    LemonCheckbox,\n    LemonInput,\n    LemonSegmentedButton,\n    LemonSelect,\n    SpinnerOverlay,\n    Tooltip,\n} from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { Form, Group } from 'kea-forms'\nimport { AlertStateIndicator } from 'lib/components/Alerts/views/ManageAlertsModal'\nimport { MemberSelectMultiple } from 'lib/components/MemberSelectMultiple'\nimport { TZLabel } from 'lib/components/TZLabel'\nimport { UserActivityIndicator } from 'lib/components/UserActivityIndicator/UserActivityIndicator'\nimport { dayjs } from 'lib/dayjs'\nimport { IconChevronLeft } from 'lib/lemon-ui/icons'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { LemonModal } from 'lib/lemon-ui/LemonModal'\nimport { alphabet, formatDate } from 'lib/utils'\nimport { useCallback } from 'react'\nimport { trendsDataLogic } from 'scenes/trends/trendsDataLogic'\n\nimport {\n    AlertCalculationInterval,\n    AlertConditionType,\n    AlertState,\n    InsightThresholdType,\n} from '~/queries/schema/schema-general'\nimport { InsightLogicProps, InsightShortId, QueryBasedInsightModel } from '~/types'\n\nimport { alertFormLogic, canCheckOngoingInterval } from '../alertFormLogic'\nimport { alertLogic } from '../alertLogic'\nimport { SnoozeButton } from '../SnoozeButton'\nimport { AlertType } from '../types'\n\nexport function AlertStateTable({ alert }: { alert: AlertType }): JSX.Element | null {\n    if (!alert.checks || alert.checks.length === 0) {\n        return null\n    }\n\n    return (\n        <div className=\"bg-primary p-4 mt-10 rounded-lg\">\n            <div className=\"flex flex-row gap-2 items-center mb-2\">\n                <h3 className=\"m-0\">Current status: </h3>\n                <AlertStateIndicator alert={alert} />\n                <h3 className=\"m-0\">\n                    {alert.snoozed_until && ` until ${formatDate(dayjs(alert?.snoozed_until), 'MMM D, HH:mm')}`}\n                </h3>\n            </div>\n            <table className=\"w-full table-auto border-spacing-2 border-collapse\">\n                <thead>\n                    <tr className=\"text-left\">\n                        <th>Status</th>\n                        <th className=\"text-right\">Time</th>\n                        <th className=\"text-right pr-4\">Value</th>\n                        <th>Targets notified</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {alert.checks.map((check) => (\n                        <tr key={check.id}>\n                            <td>{check.state}</td>\n                            <td className=\"text-right\">\n                                <TZLabel time={check.created_at} />\n                            </td>\n                            <td className=\"text-right pr-4\">{check.calculated_value}</td>\n                            <td>{check.targets_notified ? 'Yes' : 'No'}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\ninterface EditAlertModalProps {\n    isOpen: boolean | undefined\n    alertId?: AlertType['id']\n    insightId: QueryBasedInsightModel['id']\n    insightShortId: InsightShortId\n    onEditSuccess: () => void\n    onClose?: () => void\n    insightLogicProps?: InsightLogicProps\n}\n\nexport function EditAlertModal({\n    isOpen,\n    alertId,\n    insightId,\n    insightShortId,\n    onClose,\n    onEditSuccess,\n    insightLogicProps,\n}: EditAlertModalProps): JSX.Element {\n    const _alertLogic = alertLogic({ alertId })\n    const { alert, alertLoading } = useValues(_alertLogic)\n    const { loadAlert } = useActions(_alertLogic)\n\n    // need to reload edited alert as well\n    const _onEditSuccess = useCallback(() => {\n        loadAlert()\n        onEditSuccess()\n    }, [loadAlert, onEditSuccess])\n\n    const formLogicProps = {\n        alert,\n        insightId,\n        onEditSuccess: _onEditSuccess,\n        insightVizDataLogicProps: insightLogicProps,\n    }\n    const formLogic = alertFormLogic(formLogicProps)\n    const { alertForm, isAlertFormSubmitting, alertFormChanged } = useValues(formLogic)\n    const { deleteAlert, snoozeAlert, clearSnooze } = useActions(formLogic)\n    const { setAlertFormValue } = useActions(formLogic)\n\n    const trendsLogic = trendsDataLogic({ dashboardItemId: insightShortId })\n    const { alertSeries, isNonTimeSeriesDisplay, isBreakdownValid, formula } = useValues(trendsLogic)\n\n    const creatingNewAlert = alertForm.id === undefined\n    // can only check ongoing interval for absolute value/increase alerts with upper threshold\n    const can_check_ongoing_interval = canCheckOngoingInterval(alertForm)\n\n    return (\n        <LemonModal onClose={onClose} isOpen={isOpen} width={600} simple title=\"\">\n            {alertLoading ? (\n                <SpinnerOverlay />\n            ) : (\n                <Form\n                    logic={alertFormLogic}\n                    props={formLogicProps}\n                    formKey=\"alertForm\"\n                    enableFormOnSubmit\n                    className=\"LemonModal__layout\"\n                >\n                    <LemonModal.Header>\n                        <div className=\"flex items-center gap-2\">\n                            <LemonButton icon={<IconChevronLeft />} onClick={onClose} size=\"xsmall\" />\n\n                            <h3>{creatingNewAlert ? 'New' : 'Edit '} Alert</h3>\n                        </div>\n                    </LemonModal.Header>\n\n                    <LemonModal.Content>\n                        <div className=\"space-y-8\">\n                            <div className=\"space-y-4\">\n                                <div className=\"flex gap-4 items-center\">\n                                    <LemonField className=\"flex-auto\" name=\"name\">\n                                        <LemonInput placeholder=\"Alert name\" data-attr=\"alertForm-name\" />\n                                    </LemonField>\n                                    <LemonField name=\"enabled\">\n                                        <LemonCheckbox\n                                            checked={alertForm?.enabled}\n                                            data-attr=\"alertForm-enabled\"\n                                            fullWidth\n                                            label=\"Enabled\"\n                                        />\n                                    </LemonField>\n                                </div>\n                                {alert?.created_by ? (\n                                    <UserActivityIndicator\n                                        at={alert.created_at}\n                                        by={alert.created_by}\n                                        prefix=\"Created\"\n                                        // className=\"mb-4\"\n                                    />\n                                ) : null}\n                            </div>\n\n                            <div className=\"space-y-6\">\n                                <h3>Definition</h3>\n                                <div className=\"space-y-5\">\n                                    {isBreakdownValid && (\n                                        <LemonBanner type=\"warning\">\n                                            For trends with breakdown, the alert will fire if any of the breakdown\n                                            values breaches the threshold.\n                                        </LemonBanner>\n                                    )}\n                                    <div className=\"flex gap-4 items-center\">\n                                        <div>When</div>\n                                        <Group name={['config']}>\n                                            <LemonField name=\"series_index\" className=\"flex-auto\">\n                                                <LemonSelect\n                                                    fullWidth\n                                                    data-attr=\"alertForm-series-index\"\n                                                    options={alertSeries?.map(\n                                                        ({ custom_name, name, event }, index) => ({\n                                                            label: isBreakdownValid\n                                                                ? 'any breakdown value'\n                                                                : formula\n                                                                ? `Formula (${formula})`\n                                                                : `${alphabet[index]} - ${\n                                                                      custom_name ?? name ?? event\n                                                                  }`,\n                                                            value: isBreakdownValid || formula ? 0 : index,\n                                                        })\n                                                    )}\n                                                    disabledReason={\n                                                        (isBreakdownValid &&\n                                                            `For trends with breakdown, the alert will fire if any of the breakdown\n                                            values breaches the threshold.`) ||\n                                                        (formula &&\n                                                            `When using formula mode, can only alert on formula value`)\n                                                    }\n                                                />\n                                            </LemonField>\n                                        </Group>\n                                        <Group name={['condition']}>\n                                            <LemonField name=\"type\">\n                                                <LemonSelect\n                                                    fullWidth\n                                                    className=\"w-40\"\n                                                    data-attr=\"alertForm-condition\"\n                                                    options={[\n                                                        {\n                                                            label: 'has value',\n                                                            value: AlertConditionType.ABSOLUTE_VALUE,\n                                                        },\n                                                        {\n                                                            label: 'increases by',\n                                                            value: AlertConditionType.RELATIVE_INCREASE,\n                                                            disabledReason:\n                                                                isNonTimeSeriesDisplay &&\n                                                                'This condition is only supported for time series trends',\n                                                        },\n                                                        {\n                                                            label: 'decreases by',\n                                                            value: AlertConditionType.RELATIVE_DECREASE,\n                                                            disabledReason:\n                                                                isNonTimeSeriesDisplay &&\n                                                                'This condition is only supported for time series trends',\n                                                        },\n                                                    ]}\n                                                />\n                                            </LemonField>\n                                        </Group>\n                                    </div>\n                                    <div className=\"flex gap-4 items-center\">\n                                        <div>less than</div>\n                                        <LemonField name=\"lower\">\n                                            <LemonInput\n                                                type=\"number\"\n                                                className=\"w-30\"\n                                                data-attr=\"alertForm-lower-threshold\"\n                                                value={\n                                                    alertForm.threshold.configuration.type ===\n                                                        InsightThresholdType.PERCENTAGE &&\n                                                    alertForm.threshold.configuration.bounds?.lower\n                                                        ? alertForm.threshold.configuration.bounds?.lower * 100\n                                                        : alertForm.threshold.configuration.bounds?.lower\n                                                }\n                                                onChange={(value) =>\n                                                    setAlertFormValue('threshold', {\n                                                        configuration: {\n                                                            type: alertForm.threshold.configuration.type,\n                                                            bounds: {\n                                                                ...alertForm.threshold.configuration.bounds,\n                                                                lower:\n                                                                    value &&\n                                                                    alertForm.threshold.configuration.type ===\n                                                                        InsightThresholdType.PERCENTAGE\n                                                                        ? value / 100\n                                                                        : value,\n                                                            },\n                                                        },\n                                                    })\n                                                }\n                                            />\n                                        </LemonField>\n                                        <div>or more than</div>\n                                        <LemonField name=\"upper\">\n                                            <LemonInput\n                                                type=\"number\"\n                                                className=\"w-30\"\n                                                data-attr=\"alertForm-upper-threshold\"\n                                                value={\n                                                    alertForm.threshold.configuration.type ===\n                                                        InsightThresholdType.PERCENTAGE &&\n                                                    alertForm.threshold.configuration.bounds?.upper\n                                                        ? alertForm.threshold.configuration.bounds?.upper * 100\n                                                        : alertForm.threshold.configuration.bounds?.upper\n                                                }\n                                                onChange={(value) =>\n                                                    setAlertFormValue('threshold', {\n                                                        configuration: {\n                                                            type: alertForm.threshold.configuration.type,\n                                                            bounds: {\n                                                                ...alertForm.threshold.configuration.bounds,\n                                                                upper:\n                                                                    value &&\n                                                                    alertForm.threshold.configuration.type ===\n                                                                        InsightThresholdType.PERCENTAGE\n                                                                        ? value / 100\n                                                                        : value,\n                                                            },\n                                                        },\n                                                    })\n                                                }\n                                            />\n                                        </LemonField>\n                                        {alertForm.condition.type !== AlertConditionType.ABSOLUTE_VALUE && (\n                                            <Group name={['threshold', 'configuration']}>\n                                                <LemonField name=\"type\">\n                                                    <LemonSegmentedButton\n                                                        options={[\n                                                            {\n                                                                value: InsightThresholdType.PERCENTAGE,\n                                                                label: '%',\n                                                                tooltip: 'Percent',\n                                                            },\n                                                            {\n                                                                value: InsightThresholdType.ABSOLUTE,\n                                                                label: '#',\n                                                                tooltip: 'Absolute number',\n                                                            },\n                                                        ]}\n                                                    />\n                                                </LemonField>\n                                            </Group>\n                                        )}\n                                    </div>\n                                    <div className=\"flex gap-4 items-center\">\n                                        <div>\n                                            {alertForm.condition.type === AlertConditionType.ABSOLUTE_VALUE\n                                                ? 'check'\n                                                : 'compare'}\n                                        </div>\n                                        <LemonField name=\"calculation_interval\">\n                                            <LemonSelect\n                                                fullWidth\n                                                className=\"w-28\"\n                                                data-attr=\"alertForm-calculation-interval\"\n                                                options={Object.values(AlertCalculationInterval).map((interval) => ({\n                                                    label: interval,\n                                                    value: interval,\n                                                }))}\n                                            />\n                                        </LemonField>\n                                        <div>and notify</div>\n                                        <div className=\"flex-auto\">\n                                            <MemberSelectMultiple\n                                                value={alertForm.subscribed_users?.map((u) => u.id) ?? []}\n                                                idKey=\"id\"\n                                                onChange={(value) => setAlertFormValue('subscribed_users', value)}\n                                            />\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"space-y-2\">\n                                <h3 className=\"text-secondary\">Advanced</h3>\n                                <Group name={['config']}>\n                                    <div className=\"flex gap-1\">\n                                        <LemonField name=\"check_ongoing_interval\">\n                                            <LemonCheckbox\n                                                checked={\n                                                    can_check_ongoing_interval &&\n                                                    alertForm?.config.check_ongoing_interval\n                                                }\n                                                data-attr=\"alertForm-check-ongoing-interval\"\n                                                fullWidth\n                                                label=\"Check ongoing period\"\n                                                disabledReason={\n                                                    !can_check_ongoing_interval &&\n                                                    'Can only alert for ongoing period when checking for absolute value/increase above threshold'\n                                                }\n                                            />\n                                        </LemonField>\n                                        <Tooltip\n                                            title={`Checks the insight value for the on going period (current week/month) that hasn't yet completed. Use this if you want to be alerted right away when the insight value rises/increases above threshold`}\n                                            placement=\"right\"\n                                            delayMs={0}\n                                        >\n                                            <IconInfo />\n                                        </Tooltip>\n                                    </div>\n                                </Group>\n                                <LemonField name=\"skip_weekend\">\n                                    <LemonCheckbox\n                                        checked={\n                                            (alertForm?.calculation_interval === AlertCalculationInterval.DAILY ||\n                                                alertForm?.calculation_interval === AlertCalculationInterval.HOURLY) &&\n                                            alertForm?.skip_weekend\n                                        }\n                                        data-attr=\"alertForm-skip-weekend\"\n                                        fullWidth\n                                        label=\"Skip checking on weekends\"\n                                        disabledReason={\n                                            alertForm?.calculation_interval !== AlertCalculationInterval.DAILY &&\n                                            alertForm?.calculation_interval !== AlertCalculationInterval.HOURLY &&\n                                            'Can only skip weekend checking for hourly/daily alerts'\n                                        }\n                                    />\n                                </LemonField>\n                            </div>\n                        </div>\n\n                        {alert && <AlertStateTable alert={alert} />}\n                    </LemonModal.Content>\n\n                    <LemonModal.Footer>\n                        <div className=\"flex-1\">\n                            <div className=\"flex gap-2\">\n                                {!creatingNewAlert ? (\n                                    <LemonButton type=\"secondary\" status=\"danger\" onClick={deleteAlert}>\n                                        Delete alert\n                                    </LemonButton>\n                                ) : null}\n                                {!creatingNewAlert && alert?.state === AlertState.FIRING ? (\n                                    <SnoozeButton onChange={snoozeAlert} value={alert?.snoozed_until} />\n                                ) : null}\n                                {!creatingNewAlert && alert?.state === AlertState.SNOOZED ? (\n                                    <LemonButton\n                                        type=\"secondary\"\n                                        status=\"default\"\n                                        onClick={clearSnooze}\n                                        tooltip={`Currently snoozed until ${formatDate(\n                                            dayjs(alert?.snoozed_until),\n                                            'MMM D, HH:mm'\n                                        )}`}\n                                    >\n                                        Clear snooze\n                                    </LemonButton>\n                                ) : null}\n                            </div>\n                        </div>\n                        <LemonButton\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                            loading={isAlertFormSubmitting}\n                            disabledReason={!alertFormChanged && 'No changes to save'}\n                        >\n                            {creatingNewAlert ? 'Create alert' : 'Save'}\n                        </LemonButton>\n                    </LemonModal.Footer>\n                </Form>\n            )}\n        </LemonModal>\n    )\n}\n", "import { Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { router } from 'kea-router'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonModal } from 'lib/lemon-ui/LemonModal'\nimport { LemonTag } from 'lib/lemon-ui/LemonTag'\nimport { ProfileBubbles } from 'lib/lemon-ui/ProfilePicture'\nimport { pluralize } from 'lib/utils'\nimport { urls } from 'scenes/urls'\n\nimport { AlertState, InsightThresholdType } from '~/queries/schema/schema-general'\nimport { InsightShortId } from '~/types'\n\nimport { insightAlertsLogic, InsightAlertsLogicProps } from '../insightAlertsLogic'\nimport { AlertType } from '../types'\n\nexport function AlertStateIndicator({ alert }: { alert: AlertType }): JSX.Element {\n    switch (alert.state) {\n        case AlertState.FIRING:\n            return <LemonTag type=\"danger\">FIRING</LemonTag>\n        case AlertState.ERRORED:\n            return <LemonTag type=\"danger\">ERRORED</LemonTag>\n        case AlertState.SNOOZED:\n            return <LemonTag type=\"muted\">SNOOZED</LemonTag>\n        case AlertState.NOT_FIRING:\n            return <LemonTag type=\"success\">NOT FIRING</LemonTag>\n    }\n}\n\ninterface AlertListItemProps {\n    alert: AlertType\n    onClick: () => void\n}\n\nexport function AlertListItem({ alert, onClick }: AlertListItemProps): JSX.Element {\n    const bounds = alert.threshold?.configuration?.bounds\n    const isPercentage = alert.threshold?.configuration.type === InsightThresholdType.PERCENTAGE\n\n    return (\n        <LemonButton type=\"secondary\" onClick={onClick} data-attr=\"alert-list-item\" fullWidth>\n            <div className=\"flex justify-between flex-auto items-center p-2\">\n                <div className=\"flex flex-row gap-3 items-center\">\n                    <span>{alert.name}</span>\n                    <AlertStateIndicator alert={alert} />\n\n                    {alert.enabled ? (\n                        <div className=\"text-secondary pl-3\">\n                            {bounds?.lower != null &&\n                                `Low ${isPercentage ? bounds.lower * 100 : bounds.lower}${isPercentage ? '%' : ''}`}\n                            {bounds?.lower != null && bounds?.upper != null ? ' \u00B7 ' : ''}\n                            {bounds?.upper != null &&\n                                `High ${isPercentage ? bounds.upper * 100 : bounds.upper}${isPercentage ? '%' : ''}`}\n                        </div>\n                    ) : (\n                        <div className=\"text-secondary pl-3\">Disabled</div>\n                    )}\n                </div>\n\n                <ProfileBubbles limit={4} people={alert.subscribed_users?.map(({ email }) => ({ email }))} />\n            </div>\n        </LemonButton>\n    )\n}\n\ninterface ManageAlertsModalProps extends InsightAlertsLogicProps {\n    isOpen: boolean\n    insightShortId: InsightShortId\n    onClose?: () => void\n}\n\nexport function ManageAlertsModal(props: ManageAlertsModalProps): JSX.Element {\n    const { push } = useActions(router)\n    const logic = insightAlertsLogic(props)\n\n    const { alerts } = useValues(logic)\n\n    return (\n        <LemonModal onClose={props.onClose} isOpen={props.isOpen} width={600} simple title=\"\">\n            <LemonModal.Header>\n                <h3 className=\"!m-0\">Manage Alerts</h3>\n            </LemonModal.Header>\n            <LemonModal.Content>\n                <div className=\"mb-4\">\n                    With alerts, PostHog will monitor your insight and notify you when certain conditions are met. We do\n                    not evaluate alerts in real-time, but rather on a schedule (hourly, daily...).\n                    <br />\n                    <Link to={urls.alerts()} target=\"_blank\">\n                        View all your alerts here\n                    </Link>\n                </div>\n\n                {alerts.length ? (\n                    <div className=\"space-y-2\">\n                        <div>\n                            <strong>{alerts?.length}</strong> {pluralize(alerts.length || 0, 'alert', 'alerts', false)}\n                        </div>\n\n                        {alerts.map((alert) => (\n                            <AlertListItem\n                                key={alert.id}\n                                alert={alert}\n                                onClick={() => push(urls.insightAlert(props.insightShortId, alert.id))}\n                            />\n                        ))}\n                    </div>\n                ) : (\n                    <div className=\"flex flex-col p-4 items-center text-center\">\n                        <h3>There are no alerts for this insight</h3>\n\n                        <p>Once alerts are created they will display here. </p>\n                    </div>\n                )}\n            </LemonModal.Content>\n\n            <LemonModal.Footer>\n                <LemonButton type=\"primary\" onClick={() => push(urls.insightAlert(props.insightShortId, 'new'))}>\n                    New alert\n                </LemonButton>\n                <LemonButton type=\"secondary\" onClick={props.onClose}>\n                    Close\n                </LemonButton>\n            </LemonModal.Footer>\n        </LemonModal>\n    )\n}\n", "import { LemonInputSelect } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { fullName } from 'lib/utils'\nimport { useEffect } from 'react'\nimport { membersLogic } from 'scenes/organization/membersLogic'\n\nimport { UserBasicType } from '~/types'\n\ntype UserIdType = string | number\n\nexport type MemberSelectMultipleProps = {\n    idKey: 'email' | 'uuid' | 'id'\n    value: UserIdType[]\n    onChange: (values: UserBasicType[]) => void\n}\n\nexport function MemberSelectMultiple({ idKey, value, onChange }: MemberSelectMultipleProps): JSX.Element {\n    const { filteredMembers, membersLoading } = useValues(membersLogic)\n    const { ensureAllMembersLoaded } = useActions(membersLogic)\n\n    useEffect(() => {\n        ensureAllMembersLoaded()\n    }, [])\n\n    const options = filteredMembers.map((member) => ({\n        key: member.user[idKey].toString(),\n        label: fullName(member.user),\n        value: member.user[idKey],\n    }))\n\n    return (\n        <LemonInputSelect\n            placeholder=\"Search for team members to add\u2026\"\n            value={value.map((v) => v.toString())}\n            loading={membersLoading}\n            onChange={(newValues: UserIdType[]) => {\n                const selectedUsers = filteredMembers.filter((member) =>\n                    newValues.includes(member.user[idKey].toString())\n                )\n                onChange(selectedUsers.map((member) => member.user))\n            }}\n            mode=\"multiple\"\n            options={options}\n            data-attr=\"subscribed-users\"\n        />\n    )\n}\n", "import { actions, connect, kea, key, listeners, path, props } from 'kea'\nimport { forms } from 'kea-forms'\nimport api from 'lib/api'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast/LemonToast'\nimport { trendsDataLogic } from 'scenes/trends/trendsDataLogic'\n\nimport {\n    AlertCalculationInterval,\n    AlertConditionType,\n    GoalLine,\n    InsightsThresholdBounds,\n    InsightThresholdType,\n} from '~/queries/schema/schema-general'\nimport { InsightLogicProps, QueryBasedInsightModel } from '~/types'\n\nimport type { alertFormLogicType } from './alertFormLogicType'\nimport { AlertType, AlertTypeWrite } from './types'\n\nexport type AlertFormType = Pick<\n    AlertType,\n    | 'name'\n    | 'enabled'\n    | 'created_at'\n    | 'calculation_interval'\n    | 'threshold'\n    | 'condition'\n    | 'subscribed_users'\n    | 'checks'\n    | 'config'\n    | 'skip_weekend'\n> & {\n    id?: AlertType['id']\n    created_by?: AlertType['created_by'] | null\n    insight?: QueryBasedInsightModel['id']\n}\n\nexport function canCheckOngoingInterval(alert?: AlertType | AlertFormType): boolean {\n    return (\n        (alert?.condition.type === AlertConditionType.ABSOLUTE_VALUE ||\n            alert?.condition.type === AlertConditionType.RELATIVE_INCREASE) &&\n        alert?.threshold.configuration.bounds?.upper != null &&\n        !isNaN(alert?.threshold.configuration.bounds.upper)\n    )\n}\n\nexport interface AlertFormLogicProps {\n    alert: AlertType | null\n    insightId: QueryBasedInsightModel['id']\n    onEditSuccess: () => void\n    insightVizDataLogicProps?: InsightLogicProps\n}\n\nconst getThresholdBounds = (goalLines?: GoalLine[] | null): InsightsThresholdBounds => {\n    if (goalLines == null || goalLines.length == 0) {\n        return {}\n    }\n\n    // Simple assumption that the alert should be triggered when the first/smallest goal line is crossed\n    const smallerValue = Math.min(...goalLines.map((line) => line.value))\n    return { upper: smallerValue }\n}\n\nexport const alertFormLogic = kea<alertFormLogicType>([\n    path(['lib', 'components', 'Alerts', 'alertFormLogic']),\n    props({} as AlertFormLogicProps),\n    key(({ alert }) => alert?.id ?? 'new'),\n\n    connect((props: AlertFormLogicProps) => ({\n        values: [trendsDataLogic({ dashboardId: undefined, ...props.insightVizDataLogicProps }), ['goalLines']],\n    })),\n\n    actions({\n        deleteAlert: true,\n        snoozeAlert: (snoozeUntil: string) => ({ snoozeUntil }),\n        clearSnooze: true,\n    }),\n\n    forms(({ props, values }) => ({\n        alertForm: {\n            defaults:\n                props.alert ??\n                ({\n                    id: undefined,\n                    name: values.goalLines && values.goalLines.length > 0 ? `Crossed ${values.goalLines[0].label}` : '',\n                    created_by: null,\n                    created_at: '',\n                    enabled: true,\n                    config: {\n                        type: 'TrendsAlertConfig',\n                        series_index: 0,\n                        check_ongoing_interval: false,\n                    },\n                    threshold: {\n                        configuration: {\n                            type: InsightThresholdType.ABSOLUTE,\n                            bounds: getThresholdBounds(values.goalLines),\n                        },\n                    },\n                    condition: {\n                        type: AlertConditionType.ABSOLUTE_VALUE,\n                    },\n                    subscribed_users: [],\n                    checks: [],\n                    calculation_interval: AlertCalculationInterval.DAILY,\n                    skip_weekend: false,\n                    insight: props.insightId,\n                } as AlertFormType),\n            errors: ({ name }) => ({\n                name: !name ? 'You need to give your alert a name' : undefined,\n            }),\n            submit: async (alert) => {\n                const payload: AlertTypeWrite = {\n                    ...alert,\n                    subscribed_users: alert.subscribed_users?.map(({ id }) => id),\n                    insight: props.insightId,\n                    // can only skip weekends for hourly/daily alerts\n                    skip_weekend:\n                        (alert.calculation_interval === AlertCalculationInterval.DAILY ||\n                            alert.calculation_interval === AlertCalculationInterval.HOURLY) &&\n                        alert.skip_weekend,\n                    // can only check ongoing interval for absolute value/increase alerts with upper threshold\n                    config: {\n                        ...alert.config,\n                        check_ongoing_interval: canCheckOngoingInterval(alert) && alert.config.check_ongoing_interval,\n                    },\n                }\n\n                // absolute value alert can only have absolute threshold\n                if (payload.condition.type === AlertConditionType.ABSOLUTE_VALUE) {\n                    payload.threshold.configuration.type = InsightThresholdType.ABSOLUTE\n                }\n\n                try {\n                    if (alert.id === undefined) {\n                        const updatedAlert: AlertType = await api.alerts.create(payload)\n\n                        lemonToast.success(`Alert created.`)\n                        props.onEditSuccess()\n\n                        return updatedAlert\n                    }\n\n                    const updatedAlert: AlertType = await api.alerts.update(alert.id, payload)\n\n                    lemonToast.success(`Alert saved.`)\n                    props.onEditSuccess()\n\n                    return updatedAlert\n                } catch (error: any) {\n                    const field = error.data?.attr?.replace(/_/g, ' ')\n                    lemonToast.error(`Error saving alert: ${field}: ${error.detail}`)\n                    throw error\n                }\n            },\n        },\n    })),\n\n    listeners(({ props, values }) => ({\n        deleteAlert: async () => {\n            // deletion only allowed on created alert (which will have alertId)\n            if (!values.alertForm.id) {\n                throw new Error(\"Cannot delete alert that doesn't exist\")\n            }\n            await api.alerts.delete(values.alertForm.id)\n            props.onEditSuccess()\n        },\n        snoozeAlert: async ({ snoozeUntil }) => {\n            // resolution only allowed on created alert (which will have alertId)\n            if (!values.alertForm.id) {\n                throw new Error(\"Cannot resolve alert that doesn't exist\")\n            }\n            await api.alerts.update(values.alertForm.id, { snoozed_until: snoozeUntil })\n            props.onEditSuccess()\n        },\n        clearSnooze: async () => {\n            // resolution only allowed on created alert (which will have alertId)\n            if (!values.alertForm.id) {\n                throw new Error(\"Cannot resolve alert that doesn't exist\")\n            }\n            await api.alerts.update(values.alertForm.id, { snoozed_until: null })\n            props.onEditSuccess()\n        },\n    })),\n])\n", "import { dayjs } from 'lib/dayjs'\nimport { formatDate } from 'lib/utils'\n\nimport { DateFilter } from '../DateFilter/DateFilter'\n\nconst DATETIME_FORMAT = 'MMM D - HH:mm'\n\ninterface SnoozeButtonProps {\n    onChange: (snoonzeUntil: string) => void\n    value?: string\n}\n\nexport function SnoozeButton({ onChange, value }: SnoozeButtonProps): JSX.Element {\n    return (\n        <DateFilter\n            dateFrom={value ?? null}\n            onChange={(snoozeUntil) => {\n                snoozeUntil && onChange(snoozeUntil)\n            }}\n            placeholder=\"Snooze until\"\n            max={31}\n            isFixedDateMode\n            showRollingRangePicker={false}\n            allowedRollingDateOptions={['days', 'weeks', 'months', 'years']}\n            showCustom\n            dateOptions={[\n                {\n                    key: 'Tomorrow',\n                    values: ['+1d'],\n                    getFormattedDate: (date: dayjs.Dayjs): string => formatDate(date.add(1, 'd'), DATETIME_FORMAT),\n                    defaultInterval: 'day',\n                },\n                {\n                    key: 'One week from now',\n                    values: ['+1w'],\n                    getFormattedDate: (date: dayjs.Dayjs): string => formatDate(date.add(1, 'w'), DATETIME_FORMAT),\n                    defaultInterval: 'day',\n                },\n            ]}\n            size=\"medium\"\n        />\n    )\n}\n", "export { InsightCard } from './InsightCard'\n", "import './InsightCard.scss'\n\nimport { useMergeRefs } from '@floating-ui/react'\nimport clsx from 'clsx'\nimport { BindLogic, useValues } from 'kea'\nimport { Resizeable } from 'lib/components/Cards/CardMeta'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { usePageVisibility } from 'lib/hooks/usePageVisibility'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport React, { useState } from 'react'\nimport { Layout } from 'react-grid-layout'\nimport { useInView } from 'react-intersection-observer'\nimport { insightDataLogic } from 'scenes/insights/insightDataLogic'\nimport { insightLogic } from 'scenes/insights/insightLogic'\n\nimport { ErrorBoundary } from '~/layout/ErrorBoundary'\nimport { themeLogic } from '~/layout/navigation-3000/themeLogic'\nimport { Query } from '~/queries/Query/Query'\nimport { HogQLVariable } from '~/queries/schema/schema-general'\nimport {\n    DashboardBasicType,\n    DashboardPlacement,\n    DashboardTile,\n    DashboardType,\n    InsightColor,\n    InsightLogicProps,\n    QueryBasedInsightModel,\n} from '~/types'\n\nimport { ResizeHandle1D, ResizeHandle2D } from '../handles'\nimport { InsightMeta } from './InsightMeta'\n\nexport interface InsightCardProps extends Resizeable {\n    /** Insight to display. */\n    insight: QueryBasedInsightModel\n    /** id of the dashboard the card is on (when the card is being displayed on a dashboard) **/\n    dashboardId?: DashboardType['id']\n    /** Whether the insight has been called to load. */\n    loadingQueued?: boolean\n    /** Whether the insight is loading. */\n    loading?: boolean\n    /** Whether an error occurred on the server. */\n    apiErrored?: boolean\n    /** Whether the card should be highlighted with a blue border. */\n    highlighted?: boolean\n    /** Whether loading timed out. */\n    timedOut?: boolean\n    /** Whether the editing controls should be enabled or not. */\n    showEditingControls?: boolean\n    /** Whether the  controls for showing details should be enabled or not. */\n    showDetailsControls?: boolean\n    /** Layout of the card on a grid. */\n    layout?: Layout\n    ribbonColor?: InsightColor | null\n    updateColor?: (newColor: DashboardTile['color']) => void\n    removeFromDashboard?: () => void\n    deleteWithUndo?: () => Promise<void>\n    refresh?: () => void\n    refreshEnabled?: boolean\n    rename?: () => void\n    duplicate?: () => void\n    moveToDashboard?: (dashboard: DashboardBasicType) => void\n    /** buttons to add to the \"more\" menu on the card**/\n    moreButtons?: JSX.Element | null\n    placement: DashboardPlacement | 'SavedInsightGrid'\n    /** Priority for loading the insight, lower is earlier. */\n    loadPriority?: number\n    doNotLoad?: boolean\n    /** Dashboard variables to override the ones in the insight */\n    variablesOverride?: Record<string, HogQLVariable>\n    className?: string\n    style?: React.CSSProperties\n    children?: React.ReactNode\n}\n\nfunction InsightCardInternal(\n    {\n        insight,\n        dashboardId,\n        ribbonColor,\n        loadingQueued,\n        loading,\n        apiErrored,\n        timedOut,\n        highlighted,\n        showResizeHandles,\n        canResizeWidth,\n        showEditingControls,\n        showDetailsControls,\n        updateColor,\n        removeFromDashboard,\n        deleteWithUndo,\n        refresh,\n        refreshEnabled,\n        rename,\n        duplicate,\n        moveToDashboard,\n        className,\n        moreButtons,\n        placement,\n        loadPriority,\n        doNotLoad,\n        variablesOverride,\n        children,\n        ...divProps\n    }: InsightCardProps,\n    ref: React.Ref<HTMLDivElement>\n): JSX.Element | null {\n    const { featureFlags } = useValues(featureFlagLogic)\n\n    const { ref: inViewRef, inView } = useInView()\n    const { isVisible: isPageVisible } = usePageVisibility()\n    /** Wether the page is active and the line graph is currently in view. Used to free resources, by not rendering\n     * insight cards that aren't visible. See also https://wiki.whatwg.org/wiki/Canvas_Context_Loss_and_Restoration.\n     */\n    const isVisible =\n        featureFlags[FEATURE_FLAGS.EXPERIMENTAL_DASHBOARD_ITEM_RENDERING] === true ? inView && isPageVisible : true\n\n    const mergedRefs = useMergeRefs([ref, inViewRef])\n\n    const { theme } = useValues(themeLogic)\n    const insightLogicProps: InsightLogicProps = {\n        dashboardItemId: insight.short_id,\n        dashboardId: dashboardId,\n        cachedInsight: insight,\n        loadPriority,\n        doNotLoad,\n    }\n\n    const { insightLoading } = useValues(insightLogic(insightLogicProps))\n    const { insightDataLoading } = useValues(insightDataLogic(insightLogicProps))\n\n    if (insightLoading || insightDataLoading) {\n        loading = true\n    }\n\n    const [areDetailsShown, setAreDetailsShown] = useState(false)\n\n    return (\n        <div\n            className={clsx('InsightCard border', highlighted && 'InsightCard--highlighted', className)}\n            data-attr=\"insight-card\"\n            {...divProps}\n            // eslint-disable-next-line react/forbid-dom-props\n            style={{ ...(divProps?.style ?? {}), ...(theme?.boxStyle ?? {}) }}\n            ref={mergedRefs}\n        >\n            {isVisible ? (\n                <ErrorBoundary tags={{ feature: 'insight' }}>\n                    <BindLogic logic={insightLogic} props={insightLogicProps}>\n                        <InsightMeta\n                            insight={insight}\n                            ribbonColor={ribbonColor}\n                            dashboardId={dashboardId}\n                            updateColor={updateColor}\n                            removeFromDashboard={removeFromDashboard}\n                            deleteWithUndo={deleteWithUndo}\n                            refresh={refresh}\n                            refreshEnabled={refreshEnabled}\n                            loading={loadingQueued || loading}\n                            rename={rename}\n                            duplicate={duplicate}\n                            moveToDashboard={moveToDashboard}\n                            areDetailsShown={areDetailsShown}\n                            setAreDetailsShown={setAreDetailsShown}\n                            showEditingControls={showEditingControls}\n                            showDetailsControls={showDetailsControls}\n                            moreButtons={moreButtons}\n                            variablesOverride={variablesOverride}\n                        />\n                        <div className=\"InsightCard__viz\">\n                            <Query\n                                query={insight.query}\n                                cachedResults={insight}\n                                context={{\n                                    insightProps: insightLogicProps,\n                                }}\n                                readOnly\n                                embedded\n                                inSharedMode={placement === DashboardPlacement.Public}\n                                variablesOverride={variablesOverride}\n                            />\n                        </div>\n                    </BindLogic>\n                    {showResizeHandles && (\n                        <>\n                            {canResizeWidth ? <ResizeHandle1D orientation=\"vertical\" /> : null}\n                            <ResizeHandle1D orientation=\"horizontal\" />\n                            {canResizeWidth ? <ResizeHandle2D /> : null}\n                        </>\n                    )}\n                    {children /* Extras, specifically resize handles injected by ReactGridLayout */}\n                </ErrorBoundary>\n            ) : null}\n        </div>\n    )\n}\nexport const InsightCard = React.forwardRef(InsightCardInternal) as typeof InsightCardInternal\n", "import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === 'function') {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n", "import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === 'root'\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n", "import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n", "import { lemonToast } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { CardMeta } from 'lib/components/Cards/CardMeta'\nimport { TopHeading } from 'lib/components/Cards/InsightCard/TopHeading'\nimport { ExportButton } from 'lib/components/ExportButton/ExportButton'\nimport { ObjectTags } from 'lib/components/ObjectTags/ObjectTags'\nimport { DashboardPrivilegeLevel } from 'lib/constants'\nimport { dayjs } from 'lib/dayjs'\nimport { LemonButton, LemonButtonWithDropdown } from 'lib/lemon-ui/LemonButton'\nimport { LemonDivider } from 'lib/lemon-ui/LemonDivider'\nimport { LemonMarkdown } from 'lib/lemon-ui/LemonMarkdown'\nimport { LemonTableLoader } from 'lib/lemon-ui/LemonTable/LemonTableLoader'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { Spinner } from 'lib/lemon-ui/Spinner'\nimport { Splotch, SplotchColor } from 'lib/lemon-ui/Splotch'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { capitalizeFirstLetter } from 'lib/utils'\nimport React from 'react'\nimport { insightDataLogic } from 'scenes/insights/insightDataLogic'\nimport { insightLogic } from 'scenes/insights/insightLogic'\nimport { insightVizDataLogic } from 'scenes/insights/insightVizDataLogic'\nimport { useSummarizeInsight } from 'scenes/insights/summarizeInsight'\nimport { urls } from 'scenes/urls'\n\nimport { dashboardsModel } from '~/models/dashboardsModel'\nimport { ExporterFormat, InsightColor, QueryBasedInsightModel } from '~/types'\n\nimport { InsightCardProps } from './InsightCard'\nimport { InsightDetails } from './InsightDetails'\n\ninterface InsightMetaProps\n    extends Pick<\n        InsightCardProps,\n        | 'ribbonColor'\n        | 'updateColor'\n        | 'removeFromDashboard'\n        | 'deleteWithUndo'\n        | 'refresh'\n        | 'refreshEnabled'\n        | 'loading'\n        | 'rename'\n        | 'duplicate'\n        | 'dashboardId'\n        | 'moveToDashboard'\n        | 'showEditingControls'\n        | 'showDetailsControls'\n        | 'moreButtons'\n        | 'variablesOverride'\n    > {\n    insight: QueryBasedInsightModel\n    areDetailsShown?: boolean\n    setAreDetailsShown?: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nexport function InsightMeta({\n    insight,\n    ribbonColor,\n    dashboardId,\n    updateColor,\n    variablesOverride,\n    removeFromDashboard,\n    deleteWithUndo,\n    refresh,\n    refreshEnabled,\n    loading,\n    rename,\n    duplicate,\n    moveToDashboard,\n    areDetailsShown,\n    setAreDetailsShown,\n    showEditingControls = true,\n    showDetailsControls = true,\n    moreButtons,\n}: InsightMetaProps): JSX.Element {\n    const { short_id, name, dashboards, next_allowed_client_refresh: nextAllowedClientRefresh } = insight\n    const { insightProps } = useValues(insightLogic)\n    const { exportContext } = useValues(insightDataLogic(insightProps))\n    const { samplingFactor } = useValues(insightVizDataLogic(insightProps))\n    const { nameSortedDashboards } = useValues(dashboardsModel)\n\n    const otherDashboards = nameSortedDashboards.filter((d) => !dashboards?.includes(d.id))\n\n    // (@zach) Access Control TODO: add access control checks for remove from dashboard\n    const editable = insight.effective_privilege_level >= DashboardPrivilegeLevel.CanEdit\n\n    const summary = useSummarizeInsight()(insight.query)\n    const refreshDisabledReason =\n        nextAllowedClientRefresh && dayjs(nextAllowedClientRefresh).isAfter(dayjs())\n            ? 'You are viewing the most recent calculated results.'\n            : loading || !refreshEnabled\n            ? 'Refreshing...'\n            : undefined\n\n    return (\n        <CardMeta\n            ribbonColor={ribbonColor}\n            showEditingControls={showEditingControls}\n            showDetailsControls={showDetailsControls}\n            refresh={refresh}\n            refreshDisabledReason={refreshDisabledReason}\n            setAreDetailsShown={setAreDetailsShown}\n            areDetailsShown={areDetailsShown}\n            topHeading={<TopHeading query={insight.query} />}\n            content={\n                <InsightMetaContent\n                    link={urls.insightView(short_id, dashboardId, variablesOverride)}\n                    title={name}\n                    fallbackTitle={summary}\n                    description={insight.description}\n                    loading={loading}\n                    tags={insight.tags}\n                />\n            }\n            metaDetails={<InsightDetails query={insight.query} footerInfo={insight} />}\n            samplingFactor={samplingFactor}\n            moreButtons={\n                <>\n                    <>\n                        <LemonButton to={urls.insightView(short_id, dashboardId, variablesOverride)} fullWidth>\n                            View\n                        </LemonButton>\n                        {refresh && (\n                            <LemonButton\n                                onClick={() => {\n                                    refresh()\n                                }}\n                                disabledReason={refreshDisabledReason}\n                                fullWidth\n                            >\n                                Refresh\n                            </LemonButton>\n                        )}\n                    </>\n                    {editable && updateColor && (\n                        <LemonButtonWithDropdown\n                            dropdown={{\n                                overlay: Object.values(InsightColor).map((availableColor) => (\n                                    <LemonButton\n                                        key={availableColor}\n                                        active={availableColor === (ribbonColor || InsightColor.White)}\n                                        onClick={() => updateColor(availableColor)}\n                                        icon={\n                                            availableColor !== InsightColor.White ? (\n                                                <Splotch color={availableColor as string as SplotchColor} />\n                                            ) : null\n                                        }\n                                        fullWidth\n                                    >\n                                        {availableColor !== InsightColor.White\n                                            ? capitalizeFirstLetter(availableColor)\n                                            : 'No color'}\n                                    </LemonButton>\n                                )),\n                                placement: 'right-start',\n                                fallbackPlacements: ['left-start'],\n                                actionable: true,\n                                closeParentPopoverOnClickInside: true,\n                            }}\n                            fullWidth\n                        >\n                            Set color\n                        </LemonButtonWithDropdown>\n                    )}\n                    {editable && moveToDashboard && otherDashboards.length > 0 && (\n                        <LemonButtonWithDropdown\n                            dropdown={{\n                                overlay: otherDashboards.map((otherDashboard) => (\n                                    <LemonButton\n                                        key={otherDashboard.id}\n                                        onClick={() => {\n                                            moveToDashboard(otherDashboard)\n                                        }}\n                                        fullWidth\n                                    >\n                                        {otherDashboard.name || <i>Untitled</i>}\n                                    </LemonButton>\n                                )),\n                                placement: 'right-start',\n                                fallbackPlacements: ['left-start'],\n                                actionable: true,\n                                closeParentPopoverOnClickInside: true,\n                            }}\n                            fullWidth\n                        >\n                            Move to\n                        </LemonButtonWithDropdown>\n                    )}\n                    <LemonDivider />\n                    {editable && (\n                        <LemonButton to={urls.insightEdit(short_id)} fullWidth>\n                            Edit\n                        </LemonButton>\n                    )}\n                    {editable && (\n                        <LemonButton onClick={rename} fullWidth>\n                            Rename\n                        </LemonButton>\n                    )}\n                    <LemonButton\n                        onClick={duplicate}\n                        fullWidth\n                        data-attr={\n                            dashboardId ? 'duplicate-insight-from-dashboard' : 'duplicate-insight-from-card-list-view'\n                        }\n                    >\n                        Duplicate\n                    </LemonButton>\n                    {exportContext ? (\n                        <>\n                            <LemonDivider />\n                            <ExportButton\n                                fullWidth\n                                items={[\n                                    {\n                                        export_format: ExporterFormat.PNG,\n                                        insight: insight.id,\n                                        dashboard: insightProps.dashboardId,\n                                    },\n                                    {\n                                        export_format: ExporterFormat.CSV,\n                                        export_context: exportContext,\n                                    },\n                                    {\n                                        export_format: ExporterFormat.XLSX,\n                                        export_context: exportContext,\n                                    },\n                                ]}\n                            />\n                        </>\n                    ) : null}\n                    {moreButtons && (\n                        <>\n                            <LemonDivider />\n                            {moreButtons}\n                        </>\n                    )}\n                    {editable && (\n                        <>\n                            <LemonDivider />\n                            {removeFromDashboard ? (\n                                <LemonButton status=\"danger\" onClick={removeFromDashboard} fullWidth>\n                                    Remove from dashboard\n                                </LemonButton>\n                            ) : (\n                                <LemonButton\n                                    status=\"danger\"\n                                    onClick={() => {\n                                        void (async () => {\n                                            try {\n                                                await deleteWithUndo?.()\n                                            } catch (error: any) {\n                                                lemonToast.error(`Failed to delete insight meta: ${error.detail}`)\n                                            }\n                                        })()\n                                    }}\n                                    fullWidth\n                                >\n                                    Delete insight\n                                </LemonButton>\n                            )}\n                        </>\n                    )}\n                </>\n            }\n        />\n    )\n}\n\nexport function InsightMetaContent({\n    title,\n    fallbackTitle,\n    description,\n    link,\n    loading,\n    tags,\n}: {\n    title: string\n    fallbackTitle?: string\n    description?: string\n    link?: string\n    loading?: boolean\n    tags?: string[]\n}): JSX.Element {\n    let titleEl: JSX.Element = (\n        <h4 title={title} data-attr=\"insight-card-title\">\n            {title || <i>{fallbackTitle || 'Untitled'}</i>}\n            {loading && (\n                <Tooltip\n                    title=\"This insight is queued to check for newer results. It will be updated soon.\"\n                    placement=\"top-end\"\n                >\n                    <span className=\"text-accent-primary text-sm font-medium ml-1.5\">\n                        <Spinner className=\"mr-1.5 text-base\" />\n                        Refreshing\n                    </span>\n                </Tooltip>\n            )}\n        </h4>\n    )\n    if (link) {\n        titleEl = <Link to={link}>{titleEl}</Link>\n    }\n\n    return (\n        <>\n            {titleEl}\n            {!!description && (\n                <LemonMarkdown className=\"CardMeta__description\" lowKeyHeadings>\n                    {description}\n                </LemonMarkdown>\n            )}\n            {tags && tags.length > 0 && <ObjectTags tags={tags} staticOnly />}\n            <LemonTableLoader loading={loading} />\n        </>\n    )\n}\n", "import './CardMeta.scss'\n\nimport { IconPieChart } from '@posthog/icons'\nimport clsx from 'clsx'\nimport { useResizeObserver } from 'lib/hooks/useResizeObserver'\nimport { IconRefresh, IconSubtitles, IconSubtitlesOff } from 'lib/lemon-ui/icons'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport React from 'react'\nimport { Transition } from 'react-transition-group'\n\nimport { InsightColor } from '~/types'\n\nexport interface Resizeable {\n    showResizeHandles?: boolean\n    canResizeWidth?: boolean\n}\n\nexport interface CardMetaProps extends Pick<React.HTMLAttributes<HTMLDivElement>, 'className'> {\n    areDetailsShown?: boolean\n    setAreDetailsShown?: React.Dispatch<React.SetStateAction<boolean>>\n    ribbonColor?: InsightColor | null\n    /** Whether the editing controls should be enabled or not. */\n    showEditingControls?: boolean\n    /** Whether the  controls for showing details should be enabled or not. */\n    showDetailsControls?: boolean\n    refresh?: () => void\n    refreshDisabledReason?: string\n    content?: JSX.Element | null\n    metaDetails?: JSX.Element | null\n    moreButtons?: JSX.Element | null\n    topHeading?: JSX.Element | null\n    samplingFactor?: number | null\n}\n\nexport function CardMeta({\n    ribbonColor,\n    showEditingControls,\n    showDetailsControls,\n    refresh,\n    refreshDisabledReason,\n    content: meta,\n    metaDetails,\n    moreButtons,\n    topHeading,\n    areDetailsShown,\n    setAreDetailsShown,\n    className,\n    samplingFactor,\n}: CardMetaProps): JSX.Element {\n    const { ref: primaryRef, width: primaryWidth } = useResizeObserver()\n    const { ref: detailsRef, height: detailsHeight } = useResizeObserver()\n\n    const showDetailsButtonLabel = !!primaryWidth && primaryWidth > 480\n\n    return (\n        <div className={clsx('CardMeta', className, areDetailsShown && 'CardMeta--details-shown')}>\n            <div className=\"CardMeta__primary\" ref={primaryRef}>\n                {ribbonColor &&\n                    ribbonColor !==\n                        InsightColor.White /* White has historically meant no color synonymously to null */ && (\n                        <div className={clsx('CardMeta__ribbon', ribbonColor)} />\n                    )}\n                <div className=\"CardMeta__main\">\n                    <div className=\"CardMeta__top\">\n                        <h5>\n                            {topHeading}\n                            {samplingFactor && samplingFactor < 1 && (\n                                <Tooltip\n                                    title={`Results calculated from ${100 * samplingFactor}% of users`}\n                                    placement=\"right\"\n                                >\n                                    <IconPieChart\n                                        className=\"ml-1.5 text-base align-[-0.25em]\"\n                                        style={{ color: 'var(--primary-3000-hover)' }}\n                                    />\n                                </Tooltip>\n                            )}\n                        </h5>\n                        <div className=\"CardMeta__controls\">\n                            {showDetailsControls && setAreDetailsShown && (\n                                <LemonButton\n                                    icon={!areDetailsShown ? <IconSubtitles /> : <IconSubtitlesOff />}\n                                    onClick={() => setAreDetailsShown((state) => !state)}\n                                    size=\"small\"\n                                    active={areDetailsShown}\n                                >\n                                    {showDetailsButtonLabel && `${!areDetailsShown ? 'Show' : 'Hide'} details`}\n                                </LemonButton>\n                            )}\n                            {showEditingControls && refresh && (\n                                <LemonButton\n                                    icon={<IconRefresh />}\n                                    size=\"small\"\n                                    onClick={() => refresh()}\n                                    disabledReason={refreshDisabledReason}\n                                />\n                            )}\n                            {showEditingControls && <More overlay={moreButtons} />}\n                        </div>\n                    </div>\n                    {meta}\n                </div>\n            </div>\n\n            <div className=\"CardMeta__divider\" />\n            <div\n                className=\"CardMeta__details\"\n                // eslint-disable-next-line react/forbid-dom-props\n                style={{\n                    height: areDetailsShown && detailsHeight ? detailsHeight + 1 : 0,\n                }}\n            >\n                {/* By using a transition about displaying then we make sure we aren't rendering the content when not needed */}\n                <Transition in={areDetailsShown} timeout={200} mountOnEnter unmountOnExit>\n                    <div className=\"CardMeta__details__content\" ref={detailsRef}>\n                        {/* Stops the padding getting in the height calc  */}\n                        <div className=\"p-4\">{metaDetails}</div>\n                    </div>\n                </Transition>\n            </div>\n        </div>\n    )\n}\n", "import { dateFilterToText } from 'lib/utils'\nimport { InsightTypeMetadata, QUERY_TYPES_METADATA } from 'scenes/saved-insights/SavedInsights'\n\nimport { Node, NodeKind } from '~/queries/schema/schema-general'\nimport {\n    containsHogQLQuery,\n    dateRangeFor,\n    isDataTableNode,\n    isInsightQueryNode,\n    isInsightVizNode,\n} from '~/queries/utils'\n\nexport function TopHeading({ query }: { query: Node | null }): JSX.Element {\n    let insightType: InsightTypeMetadata\n\n    if (query?.kind) {\n        if ((isDataTableNode(query) && containsHogQLQuery(query)) || isInsightVizNode(query)) {\n            insightType = QUERY_TYPES_METADATA[query.source.kind]\n        } else {\n            insightType = QUERY_TYPES_METADATA[query.kind]\n        }\n    } else {\n        // maintain the existing default\n        insightType = QUERY_TYPES_METADATA[NodeKind.TrendsQuery]\n    }\n\n    let date_from, date_to\n    if (query) {\n        const queryDateRange = dateRangeFor(query)\n        if (queryDateRange) {\n            date_from = queryDateRange.date_from\n            date_to = queryDateRange.date_to\n        }\n    }\n\n    let dateText: string | null = null\n    if (insightType?.name !== 'Retention') {\n        const defaultDateRange =\n            query == undefined || isInsightQueryNode(query) || isInsightVizNode(query) ? 'Last 7 days' : null\n        dateText = dateFilterToText(date_from, date_to, defaultDateRange)\n    }\n    return (\n        <>\n            <span title={insightType?.description}>{insightType?.name}</span>\n            {dateText ? <> \u2022 {dateText}</> : null}\n        </>\n    )\n}\n", "import { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\nimport { ReactNode } from 'react'\nimport { INSIGHT_TYPE_URLS } from 'scenes/insights/utils'\nimport { INSIGHT_TYPES_METADATA } from 'scenes/saved-insights/SavedInsights'\n\nimport { InsightType } from '~/types'\n\nexport function overlayForNewInsightMenu(dataAttr: string): ReactNode[] {\n    const menuEntries = Object.entries(INSIGHT_TYPES_METADATA).filter(\n        ([insightType]) => insightType !== InsightType.JSON\n    )\n\n    return menuEntries.map(\n        ([listedInsightType, listedInsightTypeMetadata]) =>\n            listedInsightTypeMetadata.inMenu && (\n                <LemonButton\n                    key={listedInsightType}\n                    icon={listedInsightTypeMetadata.icon && <listedInsightTypeMetadata.icon />}\n                    to={INSIGHT_TYPE_URLS[listedInsightType as InsightType]}\n                    data-attr={dataAttr}\n                    data-attr-insight-type={listedInsightType}\n                    onClick={() => {\n                        eventUsageLogic.actions.reportSavedInsightNewInsightClicked(listedInsightType)\n                    }}\n                    fullWidth\n                >\n                    <div className=\"flex flex-col text-sm py-1\">\n                        <strong>{listedInsightTypeMetadata.name}</strong>\n                        <span className=\"text-xs font-sans font-normal\">{listedInsightTypeMetadata.description}</span>\n                    </div>\n                </LemonButton>\n            )\n    )\n}\n", "import { IconCalendar } from '@posthog/icons'\nimport { useValues } from 'kea'\nimport { DateFilter } from 'lib/components/DateFilter/DateFilter'\nimport { MemberSelect } from 'lib/components/MemberSelect'\nimport { LemonInput } from 'lib/lemon-ui/LemonInput/LemonInput'\nimport { LemonSelect } from 'lib/lemon-ui/LemonSelect'\nimport { INSIGHT_TYPE_OPTIONS } from 'scenes/saved-insights/SavedInsights'\nimport { SavedInsightFilters } from 'scenes/saved-insights/savedInsightsLogic'\n\nimport { dashboardsModel } from '~/models/dashboardsModel'\nimport { SavedInsightsTabs } from '~/types'\n\nexport function SavedInsightsFilters({\n    filters,\n    setFilters,\n}: {\n    filters: SavedInsightFilters\n    setFilters: (filters: Partial<SavedInsightFilters>) => void\n}): JSX.Element {\n    const { nameSortedDashboards } = useValues(dashboardsModel)\n\n    const { tab, createdBy, insightType, dateFrom, dateTo, dashboardId, search } = filters\n\n    return (\n        <div className=\"flex justify-between gap-2 mb-2 items-center flex-wrap\">\n            <LemonInput\n                type=\"search\"\n                placeholder=\"Search for insights\"\n                onChange={(value) => setFilters({ search: value })}\n                value={search || ''}\n            />\n            <div className=\"flex items-center gap-2 flex-wrap\">\n                {nameSortedDashboards.length > 0 && (\n                    <div className=\"flex items-center gap-2\">\n                        <span>On dashboard:</span>\n                        <LemonSelect\n                            size=\"small\"\n                            options={nameSortedDashboards.map((nsd) => ({\n                                value: nsd.id,\n                                label: nsd.name,\n                            }))}\n                            value={dashboardId}\n                            onChange={(newValue) => {\n                                setFilters({ dashboardId: newValue })\n                            }}\n                            dropdownMatchSelectWidth={false}\n                            data-attr=\"insight-on-dashboard\"\n                            allowClear={true}\n                        />\n                    </div>\n                )}\n                <div className=\"flex items-center gap-2\">\n                    <span>Type:</span>\n                    <LemonSelect\n                        size=\"small\"\n                        options={INSIGHT_TYPE_OPTIONS}\n                        value={insightType}\n                        onChange={(v: any): void => setFilters({ insightType: v })}\n                        dropdownMatchSelectWidth={false}\n                        data-attr=\"insight-type\"\n                    />\n                </div>\n                <div className=\"flex items-center gap-2\">\n                    <span>Last modified:</span>\n                    <DateFilter\n                        disabled={false}\n                        dateFrom={dateFrom}\n                        dateTo={dateTo}\n                        onChange={(fromDate, toDate) => setFilters({ dateFrom: fromDate, dateTo: toDate ?? undefined })}\n                        makeLabel={(key) => (\n                            <>\n                                <IconCalendar />\n                                <span className=\"hide-when-small\"> {key}</span>\n                            </>\n                        )}\n                    />\n                </div>\n                {tab !== SavedInsightsTabs.Yours ? (\n                    <div className=\"flex items-center gap-2\">\n                        <span>Created by:</span>\n                        <MemberSelect\n                            value={createdBy === 'All users' ? null : createdBy}\n                            onChange={(user) => setFilters({ createdBy: user?.id || 'All users' })}\n                        />\n                    </div>\n                ) : null}\n            </div>\n        </div>\n    )\n}\n", "import { Link } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { parseDraftQueryFromLocalStorage } from 'scenes/insights/utils'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { urls } from 'scenes/urls'\n\nimport { Node } from '~/queries/schema/schema-general'\n\nexport function ReloadInsight(): JSX.Element {\n    const { currentTeamId } = useValues(teamLogic)\n    const draftQueryLocalStorage = localStorage.getItem(`draft-query-${currentTeamId}`)\n    let draftQuery: { query: Node<Record<string, any>>; timestamp: number } | null = null\n    if (draftQueryLocalStorage) {\n        const parsedQuery = parseDraftQueryFromLocalStorage(draftQueryLocalStorage)\n        if (parsedQuery) {\n            draftQuery = parsedQuery\n        } else {\n            localStorage.removeItem(`draft-query-${currentTeamId}`)\n        }\n    }\n\n    if (!draftQuery?.query) {\n        return <> </>\n    }\n    return (\n        <div className=\"text-secondary mb-4\">\n            You have an unsaved insight from {new Date(draftQuery.timestamp).toLocaleString()}.{' '}\n            <Link to={urls.insightNew({ query: draftQuery.query })}>Click here</Link> to view it.\n        </div>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "alertLogic", "alertId", "props", "api_default", "actions", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "alertsLogic", "api_default", "s", "alerts", "a", "b", "alertComparatorKey", "actions", "alert", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "import_jsx_runtime", "AlertStateIndicator", "alert", "LemonTag", "AlertListItem", "onClick", "bounds", "isPercentage", "LemonButton", "ProfileBubbles", "email", "ManageAlertsModal", "props", "push", "logic", "insightAlertsLogic", "alerts", "LemonModal", "Link", "urls", "pluralize", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "MemberSelectMultiple", "idKey", "value", "onChange", "filteredMembers", "membersLoading", "membersLogic", "ensureAllMembersLoaded", "options", "member", "fullName", "LemonInputSelect", "v", "newValues", "selectedUsers", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "canCheckOngoingInterval", "alert", "getThresholdBounds", "goalLines", "line", "alertFormLogic", "props", "trendsDataLogic", "snoozeUntil", "values", "name", "payload", "id", "updatedAlert", "api_default", "lemonToast", "error", "field", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "DATETIME_FORMAT", "SnoozeButton", "onChange", "value", "DateFilter", "snoozeUntil", "date", "formatDate", "import_jsx_runtime", "AlertStateTable", "alert", "AlertStateIndicator", "formatDate", "dayjs", "check", "TZLabel", "EditAlertModal", "isOpen", "alertId", "insightId", "insightShortId", "onClose", "onEditSuccess", "insightLogicProps", "_alertLogic", "alertLogic", "alertLoading", "loadAlert", "_onEditSuccess", "formLogicProps", "formLogic", "alertFormLogic", "alertForm", "isAlertFormSubmitting", "alertFormChanged", "deleteAlert", "snoozeAlert", "clearSnooze", "setAlertFormValue", "trendsLogic", "trendsDataLogic", "alertSeries", "isNonTimeSeriesDisplay", "isBreakdownValid", "formula", "creatingNewAlert", "can_check_ongoing_interval", "canCheckOngoingInterval", "LemonModal", "SpinnerOverlay", "LemonButton", "IconChevronLeft", "LemonField", "LemonInput", "LemonCheckbox", "UserActivityIndicator", "LemonBanner", "LemonSelect", "custom_name", "name", "event", "index", "alphabet", "value", "LemonSegmentedButton", "AlertCalculationInterval", "interval", "MemberSelectMultiple", "u", "Tooltip", "IconInfo", "SnoozeButton", "import_jsx_runtime", "Alerts", "alertId", "push", "logic", "alertsLogic", "loadAlerts", "alertsSortedByState", "alertsLoading", "alert", "alertLogic", "columns", "name", "LemonTableLink", "urls", "_", "AlertStateIndicator", "last_checked_at", "TZLabel", "last_notified_at", "createdByColumn", "insight", "Tooltip", "enabled", "LemonTag", "ProductIntroduction", "DetectiveHog", "EditAlertModal", "LemonTable", "init_dirname", "init_buffer", "init_process", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_react", "React", "React2", "observerMap", "RootIds", "rootId", "unsupportedValue", "getRootId", "root", "RootIds", "rootId", "optionsToId", "options", "key", "createObserver", "id", "instance", "observerMap", "elements", "thresholds", "observer", "entries", "entry", "_a", "inView", "threshold", "callback", "observe", "element", "fallbackInView", "unsupportedValue", "bounds", "callbacks", "useInView", "threshold", "delay", "trackVisibility", "rootMargin", "root", "triggerOnce", "skip", "initialInView", "fallbackInView", "onChange", "_a", "ref", "setRef", "callback", "state", "setState", "unobserve", "observe", "inView", "entry", "entryTarget", "previousEntryTarget", "result", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_jsx_runtime", "CardMeta", "ribbonColor", "showEditingControls", "showDetailsControls", "refresh", "refreshDisabledReason", "meta", "metaDetails", "moreButtons", "topHeading", "areDetailsShown", "setAreDetailsShown", "className", "samplingFactor", "primaryRef", "primaryWidth", "useResizeObserver", "detailsRef", "detailsHeight", "showDetailsButtonLabel", "clsx", "Tooltip", "IconPieChart", "LemonButton", "IconSubtitlesOff", "IconSubtitles", "state", "IconRefresh", "More", "Transition_default", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "TopHeading", "query", "insightType", "isDataTableNode", "containsHogQLQuery", "isInsightVizNode", "QUERY_TYPES_METADATA", "date_from", "date_to", "queryDateRange", "dateRangeFor", "dateText", "defaultDateRange", "isInsightQueryNode", "dateFilterToText", "import_jsx_runtime", "InsightMeta", "insight", "ribbonColor", "dashboardId", "updateColor", "variablesOverride", "removeFromDashboard", "deleteWithUndo", "refresh", "refreshEnabled", "loading", "rename", "duplicate", "moveToDashboard", "areDetailsShown", "setAreDetailsShown", "showEditingControls", "showDetailsControls", "moreButtons", "short_id", "name", "dashboards", "nextAllowedClientRefresh", "insightProps", "insightLogic", "exportContext", "insightDataLogic", "samplingFactor", "insightVizDataLogic", "nameSortedDashboards", "dashboardsModel", "otherDashboards", "d", "editable", "summary", "useSummarizeInsight", "refreshDisabledReason", "dayjs", "CardMeta", "TopHeading", "InsightMetaContent", "urls", "InsightDetails", "LemonButton", "LemonButtonWithDropdown", "InsightColor", "availableColor", "Splotch", "capitalizeFirstLetter", "otherDashboard", "LemonDivider", "ExportButton", "error", "lemonToast", "title", "fallbackTitle", "description", "link", "tags", "titleEl", "Tooltip", "Spinner", "Link", "LemonMarkdown", "ObjectTags", "LemonTableLoader", "import_jsx_runtime", "InsightCardInternal", "insight", "dashboardId", "ribbonColor", "loadingQueued", "loading", "apiErrored", "timedOut", "highlighted", "showResizeHandles", "canResizeWidth", "showEditingControls", "showDetailsControls", "updateColor", "removeFromDashboard", "deleteWithUndo", "refresh", "refreshEnabled", "rename", "duplicate", "moveToDashboard", "className", "moreButtons", "placement", "loadPriority", "doNotLoad", "variablesOverride", "children", "divProps", "ref", "featureFlags", "featureFlagLogic", "inViewRef", "inView", "useInView", "isPageVisible", "usePageVisibility", "isVisible", "FEATURE_FLAGS", "mergedRefs", "useMergeRefs", "theme", "themeLogic", "insightLogicProps", "insightLoading", "insightLogic", "insightDataLoading", "insightDataLogic", "areDetailsShown", "setAreDetailsShown", "clsx", "ErrorBoundary", "InsightMeta", "Query", "ResizeHandle1D", "ResizeHandle2D", "InsightCard", "React", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "overlayForNewInsightMenu", "dataAttr", "INSIGHT_TYPES_METADATA", "insightType", "listedInsightType", "listedInsightTypeMetadata", "LemonButton", "INSIGHT_TYPE_URLS", "eventUsageLogic", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "SavedInsightsFilters", "filters", "setFilters", "nameSortedDashboards", "dashboardsModel", "tab", "createdBy", "insightType", "dateFrom", "dateTo", "dashboardId", "search", "LemonInput", "value", "LemonSelect", "nsd", "newValue", "INSIGHT_TYPE_OPTIONS", "v", "DateFilter", "fromDate", "toDate", "key", "IconCalendar", "MemberSelect", "user", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "ReloadInsight", "currentTeamId", "teamLogic", "draftQueryLocalStorage", "draftQuery", "parsedQuery", "parseDraftQueryFromLocalStorage", "Link", "urls", "import_jsx_runtime", "QUERY_TYPES_METADATA", "IconTrends", "IconFunnels", "IconRetention", "IconUserPaths", "IconStickiness", "IconLifecycle", "IconCorrelationAnalysis", "IconCursor", "IconAction", "IconTableChart", "IconPerson", "IconGraph", "IconBrackets", "IconHogQL", "IconPieChart", "IconWarning", "IconVideoCamera", "IconFlask", "IconAI", "INSIGHT_TYPES_METADATA", "INSIGHT_TYPE_OPTIONS", "value", "meta", "scene", "SavedInsights", "savedInsightsLogic", "InsightIcon", "insight", "className", "Icon", "isNonEmptyObject", "insightType", "isNodeWithSource", "insightMetadata", "NewInsightButton", "dataAttr", "LemonButton", "urls", "overlayForNewInsightMenu", "IconPlusSmall", "SavedInsightsGrid", "loadInsights", "renameInsight", "duplicateInsight", "insights", "insightsLoading", "pagination", "currentProjectId", "projectLogic", "paginationState", "usePagination", "InsightCard", "deleteInsightWithUndo", "SpinnerOverlay", "PaginationControl", "featureFlags", "featureFlagLogic", "showAlerts", "FEATURE_FLAGS", "updateFavoritedInsight", "setSavedInsightsFilters", "count", "filters", "sorting", "alertModalId", "hasTagging", "organizationLogic", "summarizeInsight", "useSummarizeInsight", "tab", "layoutView", "page", "startCount", "INSIGHTS_PER_PAGE", "endCount", "columns", "_", "name", "LemonTableLink", "AccessControlledLemonButton", "e", "IconStarFilled", "IconStar", "tags", "ObjectTags", "createdByColumn", "createdAtColumn", "last_modified_at", "TZLabel", "More", "LemonDivider", "PageHeader", "LemonTabs", "ActivityLog", "Alerts", "SavedInsightsFilters", "LemonSegmentedButton", "newValue", "IconListView", "IconGridView", "SavedInsightsEmptyState", "ReloadInsight", "LemonTable", "newSorting"]
}
