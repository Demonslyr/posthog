{
  "version": 3,
  "sources": ["../src/scenes/feature-flags/FeatureFlags.tsx"],
  "sourcesContent": ["import { IconLock } from '@posthog/icons'\nimport { LemonDialog, LemonInput, LemonSelect, LemonTag, lemonToast } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { router } from 'kea-router'\nimport { AccessControlledLemonButton } from 'lib/components/AccessControlledLemonButton'\nimport { ActivityLog } from 'lib/components/ActivityLog/ActivityLog'\nimport { FeatureFlagHog } from 'lib/components/hedgehogs'\nimport { MemberSelect } from 'lib/components/MemberSelect'\nimport { ObjectTags } from 'lib/components/ObjectTags/ObjectTags'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { ProductIntroduction } from 'lib/components/ProductIntroduction/ProductIntroduction'\nimport PropertyFiltersDisplay from 'lib/components/PropertyFilters/components/PropertyFiltersDisplay'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonDivider } from 'lib/lemon-ui/LemonDivider'\nimport { LemonTable, LemonTableColumn, LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { createdAtColumn, createdByColumn } from 'lib/lemon-ui/LemonTable/columnUtils'\nimport { LemonTableLink } from 'lib/lemon-ui/LemonTable/LemonTableLink'\nimport { LemonTabs } from 'lib/lemon-ui/LemonTabs'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { copyToClipboard } from 'lib/utils/copyToClipboard'\nimport { deleteWithUndo } from 'lib/utils/deleteWithUndo'\nimport stringWithWBR from 'lib/utils/stringWithWBR'\nimport { projectLogic } from 'scenes/projectLogic'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { groupsModel, Noun } from '~/models/groupsModel'\nimport { InsightVizNode, NodeKind } from '~/queries/schema/schema-general'\nimport { AccessControlResourceType, ProductKey } from '~/types'\nimport {\n    ActivityScope,\n    AnyPropertyFilter,\n    AvailableFeature,\n    BaseMathType,\n    FeatureFlagFilters,\n    FeatureFlagType,\n} from '~/types'\n\nimport { featureFlagsLogic, FeatureFlagsTab, FLAGS_PER_PAGE } from './featureFlagsLogic'\n\nexport const scene: SceneExport = {\n    component: FeatureFlags,\n    logic: featureFlagsLogic,\n}\n\nexport function OverViewTab({\n    flagPrefix = '',\n    searchPlaceholder = 'Search for feature flags',\n    nouns = ['feature flag', 'feature flags'],\n}: {\n    flagPrefix?: string\n    searchPlaceholder?: string\n    nouns?: [string, string]\n}): JSX.Element {\n    const { currentProjectId } = useValues(projectLogic)\n    const { aggregationLabel } = useValues(groupsModel)\n\n    const flagLogic = featureFlagsLogic({ flagPrefix })\n    const { featureFlagsLoading, featureFlags, count, pagination, filters, shouldShowEmptyState } = useValues(flagLogic)\n    const { updateFeatureFlag, loadFeatureFlags, setFeatureFlagsFilters } = useActions(flagLogic)\n    const { hasAvailableFeature } = useValues(userLogic)\n\n    const page = filters.page || 1\n    const startCount = (page - 1) * FLAGS_PER_PAGE + 1\n    const endCount = page * FLAGS_PER_PAGE < count ? page * FLAGS_PER_PAGE : count\n\n    const tryInInsightsUrl = (featureFlag: FeatureFlagType): string => {\n        const query: InsightVizNode = {\n            kind: NodeKind.InsightVizNode,\n            source: {\n                kind: NodeKind.TrendsQuery,\n                series: [\n                    {\n                        event: '$pageview',\n                        name: '$pageview',\n                        kind: NodeKind.EventsNode,\n                        math: BaseMathType.UniqueUsers,\n                    },\n                ],\n                breakdownFilter: {\n                    breakdown_type: 'event',\n                    breakdown: `$feature/${featureFlag.key}`,\n                },\n            },\n        }\n        return urls.insightNew({ query })\n    }\n\n    const columns: LemonTableColumns<FeatureFlagType> = [\n        {\n            title: 'Key',\n            dataIndex: 'key',\n            className: 'ph-no-capture',\n            sticky: true,\n            width: '40%',\n            sorter: (a: FeatureFlagType, b: FeatureFlagType) => (a.key || '').localeCompare(b.key || ''),\n            render: function Render(_, featureFlag: FeatureFlagType) {\n                return (\n                    <LemonTableLink\n                        to={featureFlag.id ? urls.featureFlag(featureFlag.id) : undefined}\n                        title={\n                            <>\n                                <span>{stringWithWBR(featureFlag.key, 17)}</span>\n                                {!featureFlag.can_edit && (\n                                    <Tooltip title=\"You don't have edit permissions for this feature flag.\">\n                                        <IconLock\n                                            style={{\n                                                marginLeft: 6,\n                                                verticalAlign: '-0.125em',\n                                                display: 'inline',\n                                            }}\n                                        />\n                                    </Tooltip>\n                                )}\n                            </>\n                        }\n                        description={featureFlag.name}\n                    />\n                )\n            },\n        },\n        ...(hasAvailableFeature(AvailableFeature.TAGGING)\n            ? [\n                  {\n                      title: 'Tags',\n                      dataIndex: 'tags' as keyof FeatureFlagType,\n                      render: function Render(tags: FeatureFlagType['tags']) {\n                          return tags ? <ObjectTags tags={tags} staticOnly /> : null\n                      },\n                  } as LemonTableColumn<FeatureFlagType, keyof FeatureFlagType | undefined>,\n              ]\n            : []),\n        createdByColumn<FeatureFlagType>() as LemonTableColumn<FeatureFlagType, keyof FeatureFlagType | undefined>,\n        createdAtColumn<FeatureFlagType>() as LemonTableColumn<FeatureFlagType, keyof FeatureFlagType | undefined>,\n        {\n            title: 'Release conditions',\n            width: 100,\n            render: function Render(_, featureFlag: FeatureFlagType) {\n                const releaseText = groupFilters(featureFlag.filters, undefined, aggregationLabel)\n                return typeof releaseText === 'string' && releaseText.startsWith('100% of') ? (\n                    <LemonTag type=\"highlight\">{releaseText}</LemonTag>\n                ) : (\n                    releaseText\n                )\n            },\n        },\n        {\n            title: 'Status',\n            dataIndex: 'active',\n            sorter: (a: FeatureFlagType, b: FeatureFlagType) => Number(a.active) - Number(b.active),\n            width: 100,\n            render: function RenderActive(_, featureFlag: FeatureFlagType) {\n                return (\n                    <div className=\"flex justify-start gap-1\">\n                        {featureFlag.performed_rollback ? (\n                            <LemonTag type=\"warning\" className=\"uppercase\">\n                                Rolled Back\n                            </LemonTag>\n                        ) : featureFlag.active ? (\n                            <LemonTag type=\"success\" className=\"uppercase\">\n                                Enabled\n                            </LemonTag>\n                        ) : (\n                            <LemonTag type=\"default\" className=\"uppercase\">\n                                Disabled\n                            </LemonTag>\n                        )}\n                        {featureFlag.status === 'STALE' && (\n                            <Tooltip\n                                title={\n                                    <>\n                                        <div className=\"text-sm\">Flag at least 30 days old and fully rolled out</div>\n                                        <div className=\"text-xs\">\n                                            Make sure to remove any references to this flag in your code before deleting\n                                            it.\n                                        </div>\n                                    </>\n                                }\n                                placement=\"left\"\n                            >\n                                <span>\n                                    <LemonTag type=\"warning\" className=\"uppercase cursor-default\">\n                                        Stale\n                                    </LemonTag>\n                                </span>\n                            </Tooltip>\n                        )}\n                    </div>\n                )\n            },\n        },\n        {\n            width: 0,\n            render: function Render(_, featureFlag: FeatureFlagType) {\n                return (\n                    <More\n                        overlay={\n                            <>\n                                <LemonButton\n                                    onClick={() => {\n                                        void copyToClipboard(featureFlag.key, 'feature flag key')\n                                    }}\n                                    fullWidth\n                                >\n                                    Copy feature flag key\n                                </LemonButton>\n\n                                <AccessControlledLemonButton\n                                    userAccessLevel={featureFlag.user_access_level}\n                                    minAccessLevel=\"editor\"\n                                    resourceType={AccessControlResourceType.FeatureFlag}\n                                    data-attr={`feature-flag-${featureFlag.key}-switch`}\n                                    onClick={() => {\n                                        const newValue = !featureFlag.active\n                                        LemonDialog.open({\n                                            title: `${newValue === true ? 'Enable' : 'Disable'} this flag?`,\n                                            description: `This flag will be immediately ${\n                                                newValue === true ? 'rolled out to' : 'rolled back from'\n                                            } the users matching the release conditions.`,\n                                            primaryButton: {\n                                                children: 'Confirm',\n                                                type: 'primary',\n                                                onClick: () => {\n                                                    featureFlag.id\n                                                        ? updateFeatureFlag({\n                                                              id: featureFlag.id,\n                                                              payload: { active: newValue },\n                                                          })\n                                                        : null\n                                                },\n                                                size: 'small',\n                                            },\n                                            secondaryButton: {\n                                                children: 'Cancel',\n                                                type: 'tertiary',\n                                                size: 'small',\n                                            },\n                                        })\n                                    }}\n                                    id={`feature-flag-${featureFlag.id}-switch`}\n                                    fullWidth\n                                >\n                                    {featureFlag.active ? 'Disable' : 'Enable'} feature flag\n                                </AccessControlledLemonButton>\n\n                                {featureFlag.id && (\n                                    <AccessControlledLemonButton\n                                        userAccessLevel={featureFlag.user_access_level}\n                                        minAccessLevel=\"editor\"\n                                        resourceType={AccessControlResourceType.FeatureFlag}\n                                        fullWidth\n                                        disabled={!featureFlag.can_edit}\n                                        onClick={() =>\n                                            featureFlag.id && router.actions.push(urls.featureFlag(featureFlag.id))\n                                        }\n                                    >\n                                        Edit\n                                    </AccessControlledLemonButton>\n                                )}\n\n                                <LemonButton to={tryInInsightsUrl(featureFlag)} data-attr=\"usage\" fullWidth>\n                                    Try out in Insights\n                                </LemonButton>\n\n                                <LemonDivider />\n\n                                {featureFlag.id && (\n                                    <AccessControlledLemonButton\n                                        userAccessLevel={featureFlag.user_access_level}\n                                        minAccessLevel=\"editor\"\n                                        resourceType={AccessControlResourceType.FeatureFlag}\n                                        status=\"danger\"\n                                        onClick={() => {\n                                            void deleteWithUndo({\n                                                endpoint: `projects/${currentProjectId}/feature_flags`,\n                                                object: { name: featureFlag.key, id: featureFlag.id },\n                                                callback: loadFeatureFlags,\n                                            }).catch((e) => {\n                                                lemonToast.error(`Failed to delete feature flag: ${e.detail}`)\n                                            })\n                                        }}\n                                        disabledReason={\n                                            !featureFlag.can_edit\n                                                ? \"You have only 'View' access for this feature flag. To make changes, please contact the flag's creator.\"\n                                                : (featureFlag.features?.length || 0) > 0\n                                                ? 'This feature flag is in use with an early access feature. Delete the early access feature to delete this flag'\n                                                : (featureFlag.experiment_set?.length || 0) > 0\n                                                ? 'This feature flag is linked to an experiment. Delete the experiment to delete this flag'\n                                                : null\n                                        }\n                                        fullWidth\n                                    >\n                                        Delete feature flag\n                                    </AccessControlledLemonButton>\n                                )}\n                            </>\n                        }\n                    />\n                )\n            },\n        },\n    ]\n\n    const filtersSection = (\n        <div className=\"flex justify-between mb-4 gap-2 flex-wrap\">\n            <LemonInput\n                className=\"w-60\"\n                type=\"search\"\n                placeholder={searchPlaceholder || ''}\n                onChange={(search) => setFeatureFlagsFilters({ search, page: 1 })}\n                value={filters.search || ''}\n                data-attr=\"feature-flag-search\"\n            />\n            <div className=\"flex items-center gap-2\">\n                <span>\n                    <b>Type</b>\n                </span>\n                <LemonSelect\n                    dropdownMatchSelectWidth={false}\n                    size=\"small\"\n                    onChange={(type) => {\n                        if (type) {\n                            if (type === 'all') {\n                                if (filters) {\n                                    const { type, ...restFilters } = filters\n                                    setFeatureFlagsFilters({ ...restFilters, page: 1 }, true)\n                                }\n                            } else {\n                                setFeatureFlagsFilters({ type, page: 1 })\n                            }\n                        }\n                    }}\n                    options={[\n                        { label: 'All', value: 'all' },\n                        { label: 'Boolean', value: 'boolean' },\n                        {\n                            label: 'Multiple variants',\n                            value: 'multivariant',\n                            'data-attr': 'feature-flag-select-type-option-multiple-variants',\n                        },\n                        { label: 'Experiment', value: 'experiment' },\n                        { label: 'Remote config', value: 'remote_config' },\n                    ]}\n                    value={filters.type ?? 'all'}\n                    data-attr=\"feature-flag-select-type\"\n                />\n                <span>\n                    <b>Status</b>\n                </span>\n                <LemonSelect\n                    dropdownMatchSelectWidth={false}\n                    size=\"small\"\n                    onChange={(status) => {\n                        if (status === 'all') {\n                            if (filters) {\n                                const { active, ...restFilters } = filters\n                                setFeatureFlagsFilters({ ...restFilters, page: 1 }, true)\n                            }\n                        } else {\n                            setFeatureFlagsFilters({ active: status, page: 1 })\n                        }\n                    }}\n                    options={[\n                        { label: 'All', value: 'all', 'data-attr': 'feature-flag-select-status-all' },\n                        { label: 'Enabled', value: 'true' },\n                        {\n                            label: 'Disabled',\n                            value: 'false',\n                            'data-attr': 'feature-flag-select-status-disabled',\n                        },\n                    ]}\n                    value={filters.active ?? 'all'}\n                    data-attr=\"feature-flag-select-status\"\n                />\n                <span className=\"ml-1\">\n                    <b>Created by</b>\n                </span>\n                <MemberSelect\n                    defaultLabel=\"Any user\"\n                    value={filters.created_by_id ?? null}\n                    onChange={(user) => {\n                        if (!user) {\n                            if (filters) {\n                                const { created_by_id, ...restFilters } = filters\n                                setFeatureFlagsFilters({ ...restFilters, page: 1 }, true)\n                            }\n                        } else {\n                            setFeatureFlagsFilters({ created_by_id: user.id, page: 1 })\n                        }\n                    }}\n                    data-attr=\"feature-flag-select-created-by\"\n                />\n            </div>\n        </div>\n    )\n\n    return (\n        <>\n            <ProductIntroduction\n                productName=\"Feature flags\"\n                productKey={ProductKey.FEATURE_FLAGS}\n                thingName=\"feature flag\"\n                description=\"Use feature flags to safely deploy and roll back new features in an easy-to-manage way. Roll variants out to certain groups, a percentage of users, or everyone all at once.\"\n                docsURL=\"https://posthog.com/docs/feature-flags/manual\"\n                action={() => router.actions.push(urls.featureFlag('new'))}\n                isEmpty={shouldShowEmptyState}\n                customHog={FeatureFlagHog}\n            />\n            <div>{filtersSection}</div>\n            <LemonDivider className=\"my-4\" />\n            <div className=\"mb-4\">\n                <span className=\"text-secondary \">\n                    {count\n                        ? `${startCount}${endCount - startCount > 1 ? '-' + endCount : ''} of ${count} flag${\n                              count === 1 ? '' : 's'\n                          }`\n                        : null}\n                </span>\n            </div>\n\n            <LemonTable\n                dataSource={featureFlags.results}\n                columns={columns}\n                rowKey=\"key\"\n                defaultSorting={{\n                    columnKey: 'created_at',\n                    order: -1,\n                }}\n                noSortingCancellation\n                loading={featureFlagsLoading}\n                pagination={pagination}\n                nouns={nouns}\n                data-attr=\"feature-flag-table\"\n                emptyState=\"No results for this filter, change filter or create a new flag.\"\n                onSort={(newSorting) =>\n                    setFeatureFlagsFilters({\n                        order: newSorting ? `${newSorting.order === -1 ? '-' : ''}${newSorting.columnKey}` : undefined,\n                        page: 1,\n                    })\n                }\n            />\n        </>\n    )\n}\n\nexport function FeatureFlags(): JSX.Element {\n    const { activeTab } = useValues(featureFlagsLogic)\n    const { setActiveTab } = useActions(featureFlagsLogic)\n\n    return (\n        <div className=\"feature_flags\">\n            <PageHeader\n                buttons={\n                    <LemonButton type=\"primary\" to={urls.featureFlag('new')} data-attr=\"new-feature-flag\">\n                        New feature flag\n                    </LemonButton>\n                }\n            />\n            <LemonTabs\n                activeKey={activeTab}\n                onChange={(newKey) => setActiveTab(newKey)}\n                tabs={[\n                    {\n                        key: FeatureFlagsTab.OVERVIEW,\n                        label: 'Overview',\n                        content: <OverViewTab />,\n                    },\n                    {\n                        key: FeatureFlagsTab.HISTORY,\n                        label: 'History',\n                        content: <ActivityLog scope={ActivityScope.FEATURE_FLAG} />,\n                    },\n                ]}\n                data-attr=\"feature-flags-tab-navigation\"\n            />\n        </div>\n    )\n}\n\nexport function groupFilters(\n    filters: FeatureFlagFilters,\n    stringOnly?: true,\n    aggregationLabel?: (groupTypeIndex: number | null | undefined, deferToUserWording?: boolean) => Noun\n): string\nexport function groupFilters(\n    filters: FeatureFlagFilters,\n    stringOnly?: false,\n    aggregationLabel?: (groupTypeIndex: number | null | undefined, deferToUserWording?: boolean) => Noun\n): JSX.Element | string\nexport function groupFilters(\n    filters: FeatureFlagFilters,\n    stringOnly?: boolean,\n    aggregationLabel?: (groupTypeIndex: number | null | undefined, deferToUserWording?: boolean) => Noun\n): JSX.Element | string {\n    const aggregationTargetName =\n        aggregationLabel && filters.aggregation_group_type_index != null\n            ? aggregationLabel(filters.aggregation_group_type_index).plural\n            : 'users'\n    const groups = filters.groups || []\n\n    if (groups.length === 0 || !groups.some((group) => group.rollout_percentage !== 0)) {\n        // There are no rollout groups or all are at 0%\n        return `No ${aggregationTargetName}`\n    }\n    if (\n        groups.some((group) => !group.properties?.length && [null, undefined, 100].includes(group.rollout_percentage))\n    ) {\n        // There's some group without filters that has 100% rollout\n        return `100% of all ${aggregationTargetName}`\n    }\n\n    if (groups.length === 1) {\n        const { properties, rollout_percentage = null } = groups[0]\n        if ((properties?.length || 0) > 0) {\n            return stringOnly ? (\n                `${rollout_percentage ?? 100}% of one group`\n            ) : (\n                <div className=\"flex items-center\">\n                    <span className=\"shrink-0 mr-2\">{rollout_percentage ?? 100}% of</span>\n                    <PropertyFiltersDisplay filters={properties as AnyPropertyFilter[]} />\n                </div>\n            )\n        } else if (rollout_percentage !== null) {\n            return `${rollout_percentage}% of all ${aggregationTargetName}`\n        }\n        console.error('A group with full rollout was not detected early')\n        return `100% of all ${aggregationTargetName}`\n    }\n    return 'Multiple groups'\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "import_jsx_runtime", "scene", "FeatureFlags", "featureFlagsLogic", "OverViewTab", "flagPrefix", "searchPlaceholder", "nouns", "currentProjectId", "projectLogic", "aggregationLabel", "groupsModel", "flagLogic", "featureFlagsLoading", "featureFlags", "count", "pagination", "filters", "shouldShowEmptyState", "updateFeatureFlag", "loadFeatureFlags", "setFeatureFlagsFilters", "hasAvailableFeature", "userLogic", "page", "startCount", "FLAGS_PER_PAGE", "endCount", "tryInInsightsUrl", "featureFlag", "query", "urls", "columns", "b", "_", "LemonTableLink", "stringWithWBR", "Tooltip", "IconLock", "tags", "ObjectTags", "createdByColumn", "createdAtColumn", "releaseText", "groupFilters", "LemonTag", "More", "LemonButton", "copyToClipboard", "AccessControlledLemonButton", "newValue", "LemonDialog", "LemonDivider", "deleteWithUndo", "e", "lemonToast", "filtersSection", "LemonInput", "search", "LemonSelect", "type", "restFilters", "status", "active", "MemberSelect", "user", "created_by_id", "ProductIntroduction", "FeatureFlagHog", "LemonTable", "newSorting", "activeTab", "setActiveTab", "PageHeader", "LemonTabs", "newKey", "ActivityLog", "stringOnly", "aggregationTargetName", "groups", "group", "properties", "rollout_percentage", "PropertyFiltersDisplay_default"]
}
