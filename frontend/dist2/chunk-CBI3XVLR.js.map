{
  "version": 3,
  "sources": ["../src/scenes/error-tracking/AssigneeSelect.tsx", "../src/scenes/error-tracking/assigneeSelectLogic.tsx", "../src/scenes/error-tracking/ErrorTrackingFilters.tsx", "../src/scenes/error-tracking/errorTrackingIssueSceneLogic.ts"],
  "sourcesContent": ["import { IconPlusSmall, IconX } from '@posthog/icons'\nimport { LemonButton, LemonButtonProps, LemonDropdown, LemonInput } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { useEffect, useMemo, useState } from 'react'\nimport { urls } from 'scenes/urls'\n\nimport { ErrorTrackingIssue, ErrorTrackingIssueAssignee } from '~/queries/schema/schema-general'\n\nimport { assigneeSelectLogic } from './assigneeSelectLogic'\n\ntype AssigneeDisplayType = { id: string | number; icon: JSX.Element; displayName?: string }\n\nexport const AssigneeSelect = ({\n    assignee,\n    onChange,\n    showName = false,\n    showIcon = true,\n    unassignedLabel = 'Unassigned',\n    ...buttonProps\n}: {\n    assignee: ErrorTrackingIssue['assignee']\n    onChange: (assignee: ErrorTrackingIssue['assignee']) => void\n    showName?: boolean\n    showIcon?: boolean\n    unassignedLabel?: string\n} & Partial<Pick<LemonButtonProps, 'type' | 'size'>>): JSX.Element => {\n    const logic = assigneeSelectLogic({ assignee })\n    const { computeAssignee, search, groupOptions, memberOptions, userGroupsLoading, membersLoading } = useValues(logic)\n    const { setSearch, ensureAssigneeTypesLoaded } = useActions(logic)\n    const [showPopover, setShowPopover] = useState(false)\n\n    const _onChange = (value: ErrorTrackingIssue['assignee']): void => {\n        setSearch('')\n        setShowPopover(false)\n        onChange(value)\n    }\n\n    useEffect(() => {\n        ensureAssigneeTypesLoaded()\n    }, [])\n\n    const displayAssignee = useMemo(() => computeAssignee(assignee), [assignee, computeAssignee])\n\n    return (\n        <LemonDropdown\n            closeOnClickInside={false}\n            visible={showPopover}\n            matchWidth={false}\n            onVisibilityChange={(visible) => setShowPopover(visible)}\n            overlay={\n                <div className=\"max-w-100 space-y-2 overflow-hidden\">\n                    <LemonInput\n                        type=\"search\"\n                        placeholder=\"Search\"\n                        autoFocus\n                        value={search}\n                        onChange={setSearch}\n                        fullWidth\n                    />\n                    <ul className=\"space-y-2\">\n                        {assignee && (\n                            <li>\n                                <LemonButton\n                                    fullWidth\n                                    role=\"menuitem\"\n                                    size=\"small\"\n                                    icon={<IconX />}\n                                    onClick={() => _onChange(null)}\n                                >\n                                    Remove assignee\n                                </LemonButton>\n                            </li>\n                        )}\n\n                        <Section\n                            title=\"Groups\"\n                            loading={userGroupsLoading}\n                            search={!!search}\n                            type=\"user_group\"\n                            items={groupOptions}\n                            onSelect={_onChange}\n                            activeId={assignee?.id}\n                            emptyState={\n                                <LemonButton\n                                    fullWidth\n                                    size=\"small\"\n                                    icon={<IconPlusSmall />}\n                                    to={urls.settings('environment-error-tracking', 'user-groups')}\n                                >\n                                    <div className=\"text-secondary\">Create user group</div>\n                                </LemonButton>\n                            }\n                        />\n\n                        <Section\n                            title=\"Users\"\n                            loading={membersLoading}\n                            search={!!search}\n                            type=\"user\"\n                            items={memberOptions}\n                            onSelect={_onChange}\n                            activeId={assignee?.id}\n                        />\n                    </ul>\n                </div>\n            }\n        >\n            <LemonButton\n                tooltip={displayAssignee.displayName}\n                icon={showIcon ? displayAssignee.icon : null}\n                {...buttonProps}\n            >\n                {showName ? <span className=\"pl-1\">{displayAssignee.displayName ?? unassignedLabel}</span> : null}\n            </LemonButton>\n        </LemonDropdown>\n    )\n}\n\nconst Section = ({\n    loading,\n    search,\n    type,\n    items,\n    onSelect,\n    activeId,\n    emptyState,\n    title,\n}: {\n    title: string\n    loading: boolean\n    search: boolean\n    type: ErrorTrackingIssueAssignee['type']\n    items: AssigneeDisplayType[]\n    onSelect: (value: ErrorTrackingIssue['assignee']) => void\n    activeId?: string | number\n    emptyState?: JSX.Element\n}): JSX.Element => {\n    return (\n        <li>\n            <section className=\"space-y-px\">\n                <h5 className=\"mx-2 my-0.5\">{title}</h5>\n                {items.map((item) => (\n                    <li key={item.id}>\n                        <LemonButton\n                            fullWidth\n                            role=\"menuitem\"\n                            size=\"small\"\n                            icon={item.icon}\n                            onClick={() => onSelect(activeId === item.id ? null : { type, id: item.id })}\n                            active={activeId === item.id}\n                        >\n                            <span className=\"flex items-center justify-between gap-2 flex-1\">\n                                <span>{item.displayName}</span>\n                            </span>\n                        </LemonButton>\n                    </li>\n                ))}\n\n                {loading ? (\n                    <div className=\"p-2 text-secondary italic truncate border-t\">Loading...</div>\n                ) : items.length === 0 ? (\n                    search ? (\n                        <div className=\"p-2 text-secondary italic truncate border-t\">\n                            <span>No matches</span>\n                        </div>\n                    ) : (\n                        <div className=\"border-t pt-1\">{emptyState}</div>\n                    )\n                ) : null}\n            </section>\n        </li>\n    )\n}\n", "import { IconPerson } from '@posthog/icons'\nimport { Lettermark, ProfilePicture } from '@posthog/lemon-ui'\nimport { actions, connect, kea, listeners, path, props, reducers, selectors } from 'kea'\nimport { fullName } from 'lib/utils'\nimport { membersLogic } from 'scenes/organization/membersLogic'\nimport { userGroupsLogic } from 'scenes/settings/environment/userGroupsLogic'\n\nimport { ErrorTrackingIssue } from '~/queries/schema/schema-general'\nimport { OrganizationMemberType, UserGroup } from '~/types'\n\nimport type { assigneeSelectLogicType } from './assigneeSelectLogicType'\n\nexport type AssigneeDisplayType = { id: string | number; icon: JSX.Element; displayName?: string }\n\nexport type ErrorTrackingAssigneeSelectProps = {\n    assignee: ErrorTrackingIssue['assignee']\n}\n\nconst groupDisplay = (group: UserGroup, index: number): AssigneeDisplayType => ({\n    id: group.id,\n    displayName: group.name,\n    icon: <Lettermark name={group.name} index={index} rounded />,\n})\n\nconst userDisplay = (member: OrganizationMemberType): AssigneeDisplayType => ({\n    id: member.user.id,\n    displayName: fullName(member.user),\n    icon: <ProfilePicture size=\"md\" user={member.user} />,\n})\n\nconst unassignedUser = {\n    id: 'unassigned',\n    icon: <IconPerson className=\"rounded-full border border-dashed border-muted text-secondary p-0.5\" />,\n}\n\nexport const assigneeSelectLogic = kea<assigneeSelectLogicType>([\n    path(['scenes', 'error-tracking', 'assigneeSelectLogic']),\n    props({} as ErrorTrackingAssigneeSelectProps),\n\n    connect(() => ({\n        values: [\n            membersLogic,\n            ['meFirstMembers', 'filteredMembers', 'membersLoading'],\n            userGroupsLogic,\n            ['userGroups', 'filteredGroups', 'userGroupsLoading'],\n        ],\n        actions: [\n            membersLogic,\n            ['setSearch as setMembersSearch', 'ensureAllMembersLoaded'],\n            userGroupsLogic,\n            ['setSearch as setGroupsSearch', 'ensureAllGroupsLoaded'],\n        ],\n    })),\n\n    actions({\n        ensureAssigneeTypesLoaded: true,\n        setSearch: (search) => ({ search }),\n    }),\n\n    reducers({\n        search: ['', { setSearch: (_, { search }) => search }],\n    }),\n\n    listeners(({ values, actions }) => ({\n        setSearch: () => {\n            actions.setGroupsSearch(values.search)\n            actions.setMembersSearch(values.search)\n        },\n        ensureAssigneeTypesLoaded: () => {\n            actions.ensureAllGroupsLoaded()\n            actions.ensureAllMembersLoaded()\n        },\n    })),\n\n    selectors({\n        loading: [\n            (s) => [s.membersLoading, s.userGroupsLoading],\n            (membersLoading, userGroupsLoading): boolean => membersLoading || userGroupsLoading,\n        ],\n\n        groupOptions: [(s) => [s.filteredGroups], (groups): AssigneeDisplayType[] => groups.map(groupDisplay)],\n        memberOptions: [(s) => [s.filteredMembers], (members): AssigneeDisplayType[] => members.map(userDisplay)],\n\n        computeAssignee: [\n            (s) => [s.userGroups, s.meFirstMembers],\n            (groups, members): ((assignee: ErrorTrackingIssue['assignee']) => AssigneeDisplayType) => {\n                return (assignee: ErrorTrackingIssue['assignee']) => {\n                    if (assignee) {\n                        if (assignee.type === 'user_group') {\n                            const assignedGroup = groups.find((group) => group.id === assignee.id)\n                            return assignedGroup ? groupDisplay(assignedGroup, 0) : unassignedUser\n                        }\n\n                        const assignedMember = members.find((member) => member.user.id === assignee.id)\n                        return assignedMember ? userDisplay(assignedMember) : unassignedUser\n                    }\n\n                    return unassignedUser\n                }\n            },\n        ],\n    }),\n])\n", "import { LemonInput } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { DateFilter } from 'lib/components/DateFilter/DateFilter'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport UniversalFilters from 'lib/components/UniversalFilters/UniversalFilters'\nimport { universalFiltersLogic } from 'lib/components/UniversalFilters/universalFiltersLogic'\nimport { isUniversalGroupFilterLike } from 'lib/components/UniversalFilters/utils'\nimport { dateMapping } from 'lib/utils'\nimport { useEffect, useState } from 'react'\nimport { TestAccountFilter } from 'scenes/insights/filters/TestAccountFilter'\n\nimport { errorTrackingLogic } from './errorTrackingLogic'\n\nconst errorTrackingDateOptions = dateMapping.filter((dm) => dm.key != 'Yesterday')\n\nexport const ErrorTrackingFilters = (): JSX.Element => {\n    return (\n        <div className=\"space-y-1\">\n            <div className=\"flex gap-2 items-center\">\n                <UniversalSearch />\n                <InternalAccounts />\n            </div>\n            <div className=\"flex gap-2\">\n                <DateRange />\n                <FilterGroup />\n            </div>\n        </div>\n    )\n}\n\nconst FilterGroup = (): JSX.Element => {\n    const { filterGroup } = useValues(errorTrackingLogic)\n    const { setFilterGroup } = useActions(errorTrackingLogic)\n\n    return (\n        <UniversalFilters\n            rootKey=\"error-tracking\"\n            group={filterGroup}\n            // TODO: Probably makes sense to create a new taxonomic group for exception-specific event property filters only, keep it clean.\n            taxonomicGroupTypes={[\n                TaxonomicFilterGroupType.EventProperties,\n                TaxonomicFilterGroupType.PersonProperties,\n                TaxonomicFilterGroupType.Cohorts,\n            ]}\n            onChange={setFilterGroup}\n        >\n            <RecordingsUniversalFilterGroup />\n        </UniversalFilters>\n    )\n}\n\nconst RecordingsUniversalFilterGroup = (): JSX.Element => {\n    const { filterGroup } = useValues(universalFiltersLogic)\n    const { replaceGroupValue, removeGroupValue } = useActions(universalFiltersLogic)\n    const [allowInitiallyOpen, setAllowInitiallyOpen] = useState<boolean>(false)\n\n    useEffect(() => {\n        setAllowInitiallyOpen(true)\n    }, [])\n\n    return (\n        <>\n            {filterGroup.values.map((filterOrGroup, index) => {\n                return isUniversalGroupFilterLike(filterOrGroup) ? (\n                    <UniversalFilters.Group key={index} index={index} group={filterOrGroup}>\n                        <RecordingsUniversalFilterGroup />\n                        <UniversalFilters.AddFilterButton size=\"small\" type=\"secondary\" />\n                    </UniversalFilters.Group>\n                ) : (\n                    <UniversalFilters.Value\n                        key={index}\n                        index={index}\n                        filter={filterOrGroup}\n                        onRemove={() => removeGroupValue(index)}\n                        onChange={(value) => replaceGroupValue(index, value)}\n                        initiallyOpen={allowInitiallyOpen}\n                    />\n                )\n            })}\n        </>\n    )\n}\n\nconst DateRange = (): JSX.Element => {\n    const { dateRange } = useValues(errorTrackingLogic)\n    const { setDateRange } = useActions(errorTrackingLogic)\n\n    return (\n        <DateFilter\n            size=\"small\"\n            dateFrom={dateRange.date_from}\n            dateTo={dateRange.date_to}\n            dateOptions={errorTrackingDateOptions}\n            onChange={(changedDateFrom, changedDateTo) =>\n                setDateRange({ date_from: changedDateFrom, date_to: changedDateTo })\n            }\n        />\n    )\n}\n\nconst UniversalSearch = (): JSX.Element => {\n    const { searchQuery } = useValues(errorTrackingLogic)\n    const { setSearchQuery } = useActions(errorTrackingLogic)\n\n    return (\n        <LemonInput\n            type=\"search\"\n            placeholder=\"Search...\"\n            value={searchQuery}\n            onChange={setSearchQuery}\n            className=\"flex-grow max-w-none\"\n            size=\"small\"\n        />\n    )\n}\n\nconst InternalAccounts = (): JSX.Element => {\n    const { filterTestAccounts } = useValues(errorTrackingLogic)\n    const { setFilterTestAccounts } = useActions(errorTrackingLogic)\n\n    return (\n        <div>\n            <TestAccountFilter\n                size=\"small\"\n                filters={{ filter_test_accounts: filterTestAccounts }}\n                onChange={({ filter_test_accounts }) => setFilterTestAccounts(filter_test_accounts || false)}\n            />\n        </div>\n    )\n}\n", "import { actions, connect, kea, key, listeners, path, props, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport { router } from 'kea-router'\nimport api from 'lib/api'\nimport { dayjs } from 'lib/dayjs'\nimport { Scene } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { ErrorTrackingIssue, ErrorTrackingIssueAssignee } from '~/queries/schema/schema-general'\nimport { Breadcrumb } from '~/types'\n\nimport type { errorTrackingIssueSceneLogicType } from './errorTrackingIssueSceneLogicType'\nimport { errorTrackingLogic } from './errorTrackingLogic'\nimport { errorTrackingIssueEventsQuery, errorTrackingIssueQuery } from './queries'\n\nexport interface ErrorTrackingIssueSceneLogicProps {\n    id: ErrorTrackingIssue['id']\n    fingerprint?: string\n}\n\nexport enum EventsMode {\n    Latest = 'latest',\n    Earliest = 'earliest',\n    Recommended = 'recommended',\n    All = 'all',\n}\n\nexport const errorTrackingIssueSceneLogic = kea<errorTrackingIssueSceneLogicType>([\n    path((key) => ['scenes', 'error-tracking', 'errorTrackingIssueSceneLogic', key]),\n    props({} as ErrorTrackingIssueSceneLogicProps),\n    key((props) => props.id),\n\n    connect({\n        values: [errorTrackingLogic, ['dateRange', 'filterTestAccounts', 'filterGroup', 'customSparklineConfig']],\n        actions: [errorTrackingLogic, ['setDateRange', 'setFilterTestAccounts', 'setFilterGroup']],\n    }),\n\n    actions({\n        initIssue: true,\n        setIssue: (issue: ErrorTrackingIssue) => ({ issue }),\n        setEventsMode: (mode: EventsMode) => ({ mode }),\n        updateIssue: (issue: Partial<Pick<ErrorTrackingIssue, 'assignee' | 'status'>>) => ({ issue }),\n        assignIssue: (assignee: ErrorTrackingIssueAssignee | null) => ({ assignee }),\n    }),\n\n    reducers({\n        eventsMode: [\n            EventsMode.Latest as EventsMode,\n            {\n                setEventsMode: (_, { mode }) => mode,\n            },\n        ],\n    }),\n\n    loaders(({ props, values }) => ({\n        issue: [\n            null as ErrorTrackingIssue | null,\n            {\n                loadRelationalIssue: async () => {\n                    const response = await api.errorTracking.getIssue(props.id, props.fingerprint)\n                    return { ...values.issue, ...response }\n                },\n                loadClickHouseIssue: async (firstSeen: string) => {\n                    const dateRange = {\n                        date_from: firstSeen,\n                        date_to: values.issue?.last_seen || dayjs().toISOString(),\n                    }\n                    const response = await api.query(\n                        errorTrackingIssueQuery({\n                            issueId: props.id,\n                            dateRange: dateRange,\n                            customVolume: values.customSparklineConfig,\n                        }),\n                        {},\n                        undefined,\n                        true\n                    )\n\n                    // ErrorTrackingQuery returns a list of issues\n                    // when a fingerprint is supplied there will only be a single issue\n                    return response.results[0]\n                },\n                updateIssue: async ({ issue }) => {\n                    const response = await api.errorTracking.updateIssue(props.id, issue)\n                    return { ...values.issue, ...response }\n                },\n                assignIssue: async ({ assignee }) => {\n                    await api.errorTracking.assignIssue(props.id, assignee)\n                    return values.issue ? { ...values.issue, assignee } : values.issue\n                },\n                setIssue: ({ issue }) => issue,\n            },\n        ],\n    })),\n\n    selectors({\n        breadcrumbs: [\n            (s) => [s.issue],\n            (issue): Breadcrumb[] => {\n                const exceptionType = issue?.name || 'Unknown Type'\n                return [\n                    {\n                        key: Scene.ErrorTracking,\n                        name: 'Error tracking',\n                        path: urls.errorTracking(),\n                    },\n                    {\n                        key: [Scene.ErrorTrackingIssue, exceptionType],\n                        name: exceptionType,\n                    },\n                ]\n            },\n        ],\n\n        eventsQuery: [\n            (s) => [s.issue, s.filterTestAccounts, s.filterGroup, s.dateRange],\n            (issue, filterTestAccounts, filterGroup, dateRange) =>\n                errorTrackingIssueEventsQuery({\n                    issue,\n                    filterTestAccounts: filterTestAccounts,\n                    filterGroup: filterGroup,\n                    dateRange,\n                }),\n        ],\n\n        issueProperties: [\n            (s) => [s.issue],\n            (issue): Record<string, any> => (issue && issue.earliest ? JSON.parse(issue.earliest) : {}),\n        ],\n    }),\n\n    listeners(({ values, actions }) => {\n        const loadIssue = (): void => {\n            if (!values.issueLoading) {\n                const issue = values.issue\n                if (!issue) {\n                    actions.loadRelationalIssue()\n                } else {\n                    actions.loadClickHouseIssue(issue.first_seen)\n                }\n            }\n        }\n\n        return {\n            setIssueSuccess: loadIssue,\n            initIssue: loadIssue,\n            loadRelationalIssueSuccess: loadIssue,\n            loadRelationalIssueFailure: ({ errorObject: { status, data } }) => {\n                if (status == 308 && 'issue_id' in data) {\n                    router.actions.replace(urls.errorTrackingIssue(data.issue_id))\n                }\n            },\n            setDateRange: loadIssue,\n            setFilterTestAccounts: loadIssue,\n            setFilterGroup: loadIssue,\n        }\n    }),\n])\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "groupDisplay", "group", "index", "Lettermark", "userDisplay", "member", "fullName", "ProfilePicture", "unassignedUser", "IconPerson", "assigneeSelectLogic", "membersLogic", "userGroupsLogic", "search", "_", "values", "actions", "s", "membersLoading", "userGroupsLoading", "groups", "members", "assignee", "assignedGroup", "assignedMember", "import_jsx_runtime", "AssigneeSelect", "assignee", "onChange", "showName", "showIcon", "unassignedLabel", "buttonProps", "logic", "assigneeSelectLogic", "computeAssignee", "search", "groupOptions", "memberOptions", "userGroupsLoading", "membersLoading", "setSearch", "ensureAssigneeTypesLoaded", "showPopover", "setShowPopover", "_onChange", "value", "displayAssignee", "LemonDropdown", "visible", "LemonInput", "LemonButton", "IconX", "Section", "IconPlusSmall", "urls", "loading", "type", "items", "onSelect", "activeId", "emptyState", "title", "item", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "errorTrackingDateOptions", "dateMapping", "dm", "ErrorTrackingFilters", "UniversalSearch", "InternalAccounts", "DateRange", "FilterGroup", "filterGroup", "errorTrackingLogic", "setFilterGroup", "UniversalFilters_default", "RecordingsUniversalFilterGroup", "universalFiltersLogic", "replaceGroupValue", "removeGroupValue", "allowInitiallyOpen", "setAllowInitiallyOpen", "filterOrGroup", "index", "isUniversalGroupFilterLike", "value", "dateRange", "setDateRange", "DateFilter", "changedDateFrom", "changedDateTo", "searchQuery", "setSearchQuery", "LemonInput", "filterTestAccounts", "setFilterTestAccounts", "TestAccountFilter", "filter_test_accounts", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "import_kea_router", "errorTrackingIssueSceneLogic", "key", "props", "errorTrackingLogic", "issue", "mode", "assignee", "_", "values", "response", "api_default", "firstSeen", "dateRange", "dayjs", "errorTrackingIssueQuery", "s", "exceptionType", "urls", "filterTestAccounts", "filterGroup", "errorTrackingIssueEventsQuery", "actions", "loadIssue", "status", "data"]
}
