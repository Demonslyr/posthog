{
  "version": 3,
  "sources": ["../../products/messaging/frontend/Broadcasts.tsx", "../../products/messaging/frontend/broadcastsLogic.tsx"],
  "sourcesContent": ["import { IconPlusSmall } from '@posthog/icons'\nimport { useValues } from 'kea'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { HogFunctionConfiguration } from 'scenes/pipeline/hogfunctions/HogFunctionConfiguration'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { broadcastsLogic } from './broadcastsLogic'\nimport { FunctionsTable } from './FunctionsTable'\nimport { MessagingTabs } from './MessagingTabs'\n\nexport function Broadcasts(): JSX.Element {\n    const { broadcastId } = useValues(broadcastsLogic)\n    return broadcastId ? (\n        <HogFunctionConfiguration\n            id={broadcastId === 'new' ? null : broadcastId}\n            templateId={broadcastId === 'new' ? 'template-new-broadcast' : ''}\n        />\n    ) : (\n        <>\n            <MessagingTabs key=\"tabs\" />\n            <PageHeader\n                caption=\"Send one time communications to your users\"\n                buttons={\n                    <LemonButton\n                        data-attr=\"new-broadcast\"\n                        to={urls.messagingBroadcastNew()}\n                        type=\"primary\"\n                        icon={<IconPlusSmall />}\n                    >\n                        New broadcast\n                    </LemonButton>\n                }\n            />\n            <FunctionsTable type=\"broadcast\" />\n        </>\n    )\n}\n\nexport const scene: SceneExport = {\n    component: Broadcasts,\n    logic: broadcastsLogic,\n}\n", "import { actions, kea, path, reducers, selectors } from 'kea'\nimport { urlToAction } from 'kea-router'\nimport { Scene } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { Breadcrumb } from '~/types'\n\nimport type { broadcastsLogicType } from './broadcastsLogicType'\n\nexport const broadcastsLogic = kea<broadcastsLogicType>([\n    path(['products', 'messaging', 'frontend', 'broadcastsLogic']),\n    actions({\n        editBroadcast: (id: string | null) => ({ id }),\n    }),\n    reducers({\n        broadcastId: [null as string | null, { editBroadcast: (_, { id }) => id }],\n    }),\n    selectors({\n        breadcrumbs: [\n            (s) => [s.broadcastId],\n            (broadcastId): Breadcrumb[] => {\n                return [\n                    {\n                        key: Scene.MessagingBroadcasts,\n                        name: 'Messaging',\n                        path: urls.messagingBroadcasts(),\n                    },\n                    {\n                        key: 'broadcasts',\n                        name: 'Broadcasts',\n                        path: urls.messagingBroadcasts(),\n                    },\n                    ...(broadcastId === 'new'\n                        ? [\n                              {\n                                  key: 'new-broadcast',\n                                  name: 'New broadcast',\n                                  path: urls.messagingBroadcastNew(),\n                              },\n                          ]\n                        : broadcastId\n                        ? [\n                              {\n                                  key: 'edit-broadcast',\n                                  name: 'Edit broadcast',\n                                  path: urls.messagingBroadcast(broadcastId),\n                              },\n                          ]\n                        : []),\n                ]\n            },\n        ],\n    }),\n    urlToAction(({ actions }) => ({\n        '/messaging/broadcasts/new': () => {\n            actions.editBroadcast('new')\n        },\n        '/messaging/broadcasts/:id': ({ id }) => {\n            actions.editBroadcast(id ?? null)\n        },\n        '/messaging/broadcasts': () => {\n            actions.editBroadcast(null)\n        },\n    })),\n])\n"],
  "mappings": "mrDAAAA,IAAAC,IAAAC,IACA,IAAAC,EAA0B,OCD1BC,IAAAC,IAAAC,IAAA,IAAAC,EAAwD,OACxDC,EAA4B,OAQrB,IAAMC,KAAkB,OAAyB,IACpD,QAAK,CAAC,WAAY,YAAa,WAAY,iBAAiB,CAAC,KAC7D,WAAQ,CACJ,cAAgBC,IAAuB,CAAE,GAAAA,CAAG,EAChD,CAAC,KACD,YAAS,CACL,YAAa,CAAC,KAAuB,CAAE,cAAe,CAACC,EAAG,CAAE,GAAAD,CAAG,IAAMA,CAAG,CAAC,CAC7E,CAAC,KACD,aAAU,CACN,YAAa,CACRE,GAAM,CAACA,EAAE,WAAW,EACpBC,GACU,CACH,CACI,0BACA,KAAM,YACN,KAAMC,EAAK,oBAAoB,CACnC,EACA,CACI,IAAK,aACL,KAAM,aACN,KAAMA,EAAK,oBAAoB,CACnC,EACA,GAAID,IAAgB,MACd,CACI,CACI,IAAK,gBACL,KAAM,gBACN,KAAMC,EAAK,sBAAsB,CACrC,CACJ,EACAD,EACA,CACI,CACI,IAAK,iBACL,KAAM,iBACN,KAAMC,EAAK,mBAAmBD,CAAW,CAC7C,CACJ,EACA,CAAC,CACX,CAER,CACJ,CAAC,KACD,eAAY,CAAC,CAAE,QAAAE,CAAQ,KAAO,CAC1B,4BAA6B,IAAM,CAC/BA,EAAQ,cAAc,KAAK,CAC/B,EACA,4BAA6B,CAAC,CAAE,GAAAL,CAAG,IAAM,CACrCK,EAAQ,cAAcL,GAAM,IAAI,CACpC,EACA,wBAAyB,IAAM,CAC3BK,EAAQ,cAAc,IAAI,CAC9B,CACJ,EAAE,CACN,CAAC,EDjDO,IAAAC,EAAA,OAHD,SAASC,GAA0B,CACtC,GAAM,CAAE,YAAAC,CAAY,KAAI,aAAUC,CAAe,EACjD,OAAOD,KACH,OAACE,EAAA,CACG,GAAIF,IAAgB,MAAQ,KAAOA,EACnC,WAAYA,IAAgB,MAAQ,yBAA2B,GACnE,KAEA,oBACI,oBAACG,EAAA,GAAkB,MAAO,KAC1B,OAACC,EAAA,CACG,QAAQ,6CACR,WACI,OAACC,EAAA,CACG,YAAU,gBACV,GAAIC,EAAK,sBAAsB,EAC/B,KAAK,UACL,QAAM,OAACC,EAAA,EAAc,EACxB,yBAED,EAER,KACA,OAACC,EAAA,CAAe,KAAK,YAAY,GACrC,CAER,CAEO,IAAMC,EAAqB,CAC9B,UAAWV,EACX,MAAOE,CACX",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "broadcastsLogic", "id", "_", "s", "broadcastId", "urls", "actions", "import_jsx_runtime", "Broadcasts", "broadcastId", "broadcastsLogic", "HogFunctionConfiguration", "MessagingTabs", "PageHeader", "LemonButton", "urls", "IconPlusSmall", "FunctionsTable", "scene"]
}
