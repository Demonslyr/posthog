import{b as I,c as A,d as C,e as X,f as B}from"/static/chunk-O3CE2WEF.js";import{d as L,e as F,f as g}from"/static/chunk-HRNZBUVG.js";import{$a as ie,Do as E,Io as f,Ip as K,Ko as M,Vd as O,Za as ne,a as re,df as G,f as se,m as W,r as j,rp as Z}from"/static/chunk-TW5IU73S.js";import{Fc as $,Gc as z,Ma as P,Wa as J,na as v}from"/static/chunk-3UDJFOQH.js";import{d as D,e as H,g as U,j as Y}from"/static/chunk-SJXEOBQC.js";H();Y();U();var y=D(re()),ee=D(ie()),te=D(ne()),h=D(se());var T=D(j()),ae={open:{label:P.icontains,value:"icontains"},rating:{label:P.exact,value:"exact"},single_choice:{label:P.exact,value:"exact"},multiple_choice:{label:P.icontains,value:"icontains"},link:{label:P.exact,value:"exact"}};var w=e=>e===0?"$survey_response":`$survey_response_${e}`;function oe(e){return{...e,id:g.id,name:`${e.name} (copy)`,archived:!1,start_date:null,end_date:null,targeting_flag_filters:e.targeting_flag?.filters??g.targeting_flag_filters,linked_flag_id:e.linked_flag?.id??g.linked_flag_id}}var R="YYYY-MM-DD HH:mm:ss";function N(e){return e.end_date?(0,v.default)(e.end_date).endOf("day").format(R):(0,v.default)().endOf("day").format(R)}var Ze=(0,y.kea)([(0,y.props)({}),(0,y.key)(({id:e})=>e),(0,y.path)(e=>["scenes","surveys","surveyLogic",e]),(0,y.connect)(()=>({actions:[I,["loadSurveys"],K,["reportSurveyCreated","reportSurveyEdited","reportSurveyArchived","reportSurveyViewed","reportSurveyCycleDetected"]],values:[W,["featureFlags as enabledFlags"],I,["surveys"]]})),(0,y.actions)({setSurveyMissing:!0,editingSurvey:e=>({editing:e}),setDefaultForQuestionType:(e,t,s,r,n)=>({idx:e,type:t,isEditingQuestion:s,isEditingDescription:r,isEditingThankYouMessage:n}),setQuestionBranchingType:(e,t,s)=>({questionIndex:e,type:t,specificQuestionIndex:s}),setResponseBasedBranchingForQuestion:(e,t,s,r)=>({questionIndex:e,responseValue:t,nextStep:s,specificQuestionIndex:r}),setDataCollectionType:e=>({dataCollectionType:e}),resetBranchingForQuestion:e=>({questionIndex:e}),deleteBranchingLogic:!0,archiveSurvey:!0,setWritingHTMLDescription:e=>({writingHTML:e}),setSurveyTemplateValues:e=>({template:e}),setSelectedPageIndex:e=>({idx:e}),setSelectedSection:e=>({section:e}),resetTargeting:!0,resetSurveyAdaptiveSampling:!0,resetSurveyResponseLimits:!0,setFlagPropertyErrors:e=>({errors:e}),setPropertyFilters:e=>({propertyFilters:e}),setAnswerFilters:(e,t=!0)=>({filters:e,reloadResults:t}),setDateRange:e=>({dateRange:e}),setInterval:e=>({interval:e}),setCompareFilter:e=>({compareFilter:e})}),(0,te.loaders)(({props:e,actions:t,values:s})=>({responseSummary:{summarize:async({questionIndex:r})=>f.surveys.summarize_responses(e.id,r)},survey:{loadSurvey:async()=>{if(e.id&&e.id!=="new")try{let n=await f.surveys.get(e.id);return t.reportSurveyViewed(n),t.setAnswerFilters(n.questions.map((i,a)=>({key:X(a),operator:ae[i.type].value,type:"event",value:[]})),!1),n}catch(n){if(n.status===404)return t.setSurveyMissing(),{...g};throw n}if(e.id==="new"&&h.router.values.hashParams.fromTemplate){let n=s.survey;return n.appearance={...L,...M.values.currentTeam?.survey_config?.appearance,...n.appearance},n}let r=g;return r.appearance={...L,...M.values.currentTeam?.survey_config?.appearance,...r.appearance},r},createSurvey:async r=>await f.surveys.create(V(r)),updateSurvey:async r=>await f.surveys.update(e.id,V(r)),launchSurvey:async()=>{let r=(0,v.default)();return await f.surveys.update(e.id,{start_date:r.toISOString()})},stopSurvey:async()=>await f.surveys.update(e.id,{end_date:(0,v.default)().toISOString()}),resumeSurvey:async()=>await f.surveys.update(e.id,{end_date:null})},duplicatedSurvey:{duplicateSurvey:async()=>{let{survey:r}=s,n=oe(r),i=await f.surveys.create(V(n));return O.success("Survey duplicated.",{toastId:`survey-duplicated-${i.id}`,button:{label:"View Survey",action:()=>{h.router.actions.push(E.survey(i.id))}}}),t.reportSurveyCreated(i,!0),r}},surveyUserStats:{loadSurveyUserStats:async()=>{let r=s.survey,n=(0,v.default)(r.start_date||r.created_at).format(R),i=N(r),a={kind:"HogQLQuery",query:Z`
                        SELECT
                            (SELECT COUNT(DISTINCT person_id)
                                FROM events
                                WHERE event = 'survey shown'
                                    AND properties.$survey_id = ${e.id}
                                    AND timestamp >= ${n}
                                    AND timestamp <= ${i}
                                    AND {filters}),
                            (SELECT COUNT(DISTINCT person_id)
                                FROM events
                                WHERE event = 'survey dismissed'
                                    AND properties.$survey_id = ${e.id}
                                    AND timestamp >= ${n}
                                    AND timestamp <= ${i}
                                    AND {filters}),
                            (SELECT COUNT(DISTINCT person_id)
                                FROM events
                                WHERE event = 'survey sent'
                                    AND properties.$survey_id = ${e.id}
                                    AND timestamp >= ${n}
                                    AND timestamp <= ${i}
                                    AND {filters})
                    `,filters:{properties:[...s.propertyFilters,...s.answerFilters]}},o=await f.query(a),{results:u}=o;if(u&&u[0]){let[c,p,S]=u[0],m=c-p-S;return{seen:m<0?0:m,dismissed:p,sent:S}}return{seen:0,dismissed:0,sent:0}}},surveyRatingResults:{loadSurveyRatingResults:async({questionIndex:r})=>{let n=s.survey.questions[r];if(n.type!=="rating")throw new Error("Survey question type must be rating");let i=s.survey,a=(0,v.default)(i.start_date||i.created_at).format(R),o=N(i),u={kind:"HogQLQuery",query:`
                        SELECT
                            JSONExtractString(properties, '${w(r)}') AS survey_response,
                            COUNT(survey_response)
                        FROM events
                        WHERE event = 'survey sent'
                            AND properties.$survey_id = '${e.id}'
                            AND timestamp >= '${a}'
                            AND timestamp <= '${o}'
                            AND {filters}
                        GROUP BY survey_response
                    `,filters:{properties:[...s.propertyFilters,...s.answerFilters]}},c=await f.query(u),{results:p}=c,S=0,m=n.scale===10?11:n.scale,l=new Array(m).fill(0);return p?.forEach(([d,_])=>{S+=_;let b=n.scale===10?d:d-1;l[b]=_}),{...s.surveyRatingResults,[r]:{total:S,data:l}}}},surveyRecurringNPSResults:{loadSurveyRecurringNPSResults:async({questionIndex:r})=>{if(s.survey.questions[r].type!=="rating")throw new Error("Survey question type must be rating");let i=s.survey,a=(0,v.default)(i.start_date||i.created_at).format(R),o=N(i),u={kind:"HogQLQuery",query:`
                        SELECT
                            JSONExtractString(properties, '$survey_iteration') AS survey_iteration,
                            JSONExtractString(properties, '${w(r)}') AS survey_response,
                            COUNT(survey_response)
                        FROM events
                        WHERE event = 'survey sent'
                            AND properties.$survey_id = '${i.id}'
                            AND timestamp >= '${a}'
                            AND timestamp <= '${o}'
                            AND {filters}
                        GROUP BY survey_response, survey_iteration
                    `,filters:{properties:[...s.propertyFilters,...s.answerFilters]}},c=await f.query(u),{results:p}=c,S=100,m=new Array(i.iteration_count).fill(0),l=new Map;return p?.forEach(([d,_,b])=>{let k=0,Q=0,q=0;if(parseInt(_)>=9?k+=parseInt(b):parseInt(_)>6?Q+=parseInt(b):q+=parseInt(b),l.has(d)){let x=l.get(d);x!==void 0&&(x.Detractors+=q,x.Promoters+=k,x.Passives+=Q)}else l.set(d,{Detractors:q,Passives:Q,Promoters:k})}),l.forEach((d,_)=>{let b=d.Promoters+d.Passives+d.Detractors,k=d.Promoters/b*100-d.Detractors/b*100;m[parseInt(_)-1]=k,S+=100}),{...s.surveyRecurringNPSResults,[r]:{total:S,data:m}}}},surveySingleChoiceResults:{loadSurveySingleChoiceResults:async({questionIndex:r})=>{let n=s.survey,i=(0,v.default)(n.start_date||n.created_at).format(R),a=N(n),o={kind:"HogQLQuery",query:`
                        SELECT
                            JSONExtractString(properties, '${w(r)}') AS survey_response,
                            COUNT(survey_response)
                        FROM events
                        WHERE event = 'survey sent'
                            AND properties.$survey_id = '${e.id}'
                            AND timestamp >= '${i}'
                            AND timestamp <= '${a}'
                            AND {filters}
                        GROUP BY survey_response
                    `,filters:{properties:[...s.propertyFilters,...s.answerFilters]}},u=await f.query(o),{results:c}=u,p=c?.map(l=>l[0]),S=c?.map(l=>l[1]),m=S?.reduce((l,d)=>l+d,0);return{...s.surveySingleChoiceResults,[r]:{labels:p,data:S,total:m}}}},surveyMultipleChoiceResults:{loadSurveyMultipleChoiceResults:async({questionIndex:r})=>{let n=s.survey.questions[r];if(n.type!=="multiple_choice")throw new Error("Survey question type must be multiple_choice");let i=s.survey,a=(0,v.default)(i.start_date||i.created_at).format(R),o=N(i),u={kind:"HogQLQuery",query:`
                        SELECT
                            count(),
                            arrayJoin(JSONExtractArrayRaw(properties, '${w(r)}')) AS choice
                        FROM events
                        WHERE event == 'survey sent'
                            AND properties.$survey_id == '${i.id}'
                            AND timestamp >= '${a}'
                            AND timestamp <= '${o}'
                            AND {filters}
                        GROUP BY choice
                        ORDER BY count() DESC
                    `,filters:{properties:[...s.propertyFilters,...s.answerFilters]}},c=await f.query(u),{results:p}=c;p=p?.map(l=>[l[0],l[1].slice(1,l[1].length-1)]),n.choices.forEach((l,d)=>{let _=d==n.choices.length-1&&n?.hasOpenChoice;p?.length&&!_&&!p.some(b=>b[1]===l)&&p.push([0,l])});let S=p?.map(l=>l[0]),m=p?.map(l=>l[1]);return{...s.surveyMultipleChoiceResults,[r]:{labels:m,data:S}}}},surveyOpenTextResults:{loadSurveyOpenTextResults:async({questionIndex:r})=>{if(s.survey.questions[r].type!=="open")throw new Error("Survey question type must be open");let i=s.survey,a=(0,v.default)(i.start_date||i.created_at).format(R),o=N(i),u={kind:"HogQLQuery",query:`
                        SELECT distinct_id, properties, person.properties
                        FROM events
                        WHERE event == 'survey sent'
                            AND properties.$survey_id == '${i.id}'
                            AND trim(JSONExtractString(properties, '${w(r)}')) != ''
                            AND timestamp >= '${a}'
                            AND timestamp <= '${o}'
                            AND {filters}
                        LIMIT 20
                    `,filters:{properties:[...s.propertyFilters,...s.answerFilters]}},c=await f.query(u),{results:p}=c,S=p?.map(m=>{let l=m[0],d=JSON.parse(m[1]),_=JSON.parse(m[2]);return{distinct_id:l,properties:d,personProperties:_}})||[];return{...s.surveyOpenTextResults,[r]:{events:S}}}}})),(0,y.listeners)(({actions:e,values:t})=>{let s=z(()=>{e.loadSurveyUserStats(),t.survey.questions.forEach((r,n)=>{switch(r.type){case"rating":e.loadSurveyRatingResults({questionIndex:n}),t.survey.iteration_count&&t.survey.iteration_count>0&&e.loadSurveyRecurringNPSResults({questionIndex:n});break;case"single_choice":e.loadSurveySingleChoiceResults({questionIndex:n});break;case"multiple_choice":e.loadSurveyMultipleChoiceResults({questionIndex:n});break;case"open":e.loadSurveyOpenTextResults({questionIndex:n});break}})},1e3);return{createSurveySuccess:({survey:r})=>{O.success((0,T.jsxs)(T.Fragment,{children:["Survey ",r.name," created"]})),e.loadSurveys(),h.router.actions.replace(E.survey(r.id)),e.reportSurveyCreated(r)},updateSurveySuccess:({survey:r})=>{O.success((0,T.jsxs)(T.Fragment,{children:["Survey ",r.name," updated"]})),e.editingSurvey(!1),e.reportSurveyEdited(r),e.loadSurveys()},duplicateSurveySuccess:()=>{e.loadSurveys()},launchSurveySuccess:({survey:r})=>{O.success((0,T.jsxs)(T.Fragment,{children:["Survey ",r.name," launched"]})),e.loadSurveys()},stopSurveySuccess:()=>{e.loadSurveys()},resumeSurveySuccess:()=>{e.loadSurveys()},archiveSurvey:()=>{e.updateSurvey({archived:!0})},loadSurveySuccess:()=>{if(e.loadSurveyUserStats(),t.survey.start_date&&G.findMounted()?.actions.markTaskAsCompleted("launch_survey"),"created_at"in t.survey){let r={date_from:(0,v.default)(t.survey.created_at).startOf("day").format(R),date_to:N(t.survey)};e.setDateRange(r)}},resetSurveyResponseLimits:()=>{e.setSurveyValue("responses_limit",null)},resetSurveyAdaptiveSampling:()=>{e.setSurveyValues({response_sampling_interval:null,response_sampling_interval_type:null,response_sampling_limit:null,response_sampling_start_date:null,response_sampling_daily_limits:null})},resetTargeting:()=>{e.setSurveyValue("linked_flag_id",g.linked_flag_id),e.setSurveyValue("targeting_flag_filters",g.targeting_flag_filters),e.setSurveyValue("linked_flag",g.linked_flag),e.setSurveyValue("targeting_flag",g.targeting_flag),e.setSurveyValue("conditions",g.conditions),e.setSurveyValue("remove_targeting_flag",!0),e.setSurveyValue("responses_limit",g.responses_limit),e.setSurveyValues({iteration_count:g.iteration_count,iteration_frequency_days:g.iteration_frequency_days}),e.setFlagPropertyErrors(null)},submitSurveyFailure:async()=>{$(t.flagPropertyErrors)||t.urlMatchTypeValidationError?e.setSelectedSection("DisplayConditions"):$(t.survey.appearance)?e.setSelectedSection("customization"):e.setSelectedSection("steps"),setTimeout(()=>document.querySelector(".Field--error")?.scrollIntoView({block:"center",behavior:"smooth"}),5)},setPropertyFilters:()=>{s()},setAnswerFilters:({reloadResults:r})=>{r&&s()}}}),(0,y.reducers)({isEditingSurvey:[!1,{editingSurvey:(e,{editing:t})=>t}],surveyMissing:[!1,{setSurveyMissing:()=>!0}],dataCollectionType:["until_stopped",{setDataCollectionType:(e,{dataCollectionType:t})=>t}],propertyFilters:[[],{setPropertyFilters:(e,{propertyFilters:t})=>t}],survey:[{...g},{setDefaultForQuestionType:(e,{idx:t,type:s,isEditingQuestion:r,isEditingDescription:n,isEditingThankYouMessage:i})=>{let a=r?e.questions[t].question:F[s].questions[0].question,o=n?e.questions[t].description:F[s].questions[0].description,u=i?e.appearance?.thankYouMessageHeader:F[s].appearance.thankYouMessageHeader,c=[...e.questions];return c[t]={...e.questions[t],...F[s].questions[0],question:a,description:o},{...e,questions:c,appearance:{...e.appearance,...F[s].appearance,thankYouMessageHeader:u}}},setSurveyTemplateValues:(e,{template:t})=>({...g,...t}),setQuestionBranchingType:(e,{questionIndex:t,type:s,specificQuestionIndex:r})=>{let n=[...e.questions],i=n[t];if(s==="next_question")delete i.branching;else if(s==="end")i.branching={type:"end"};else if(s==="response_based"){if(i.type!=="rating"&&i.type!=="single_choice")throw new Error("Survey question type must be rating or single_choice");i.branching={type:"response_based",responseValues:{}}}else s==="specific_question"&&(i.branching={type:"specific_question",index:r});return n[t]=i,{...e,questions:n}},setResponseBasedBranchingForQuestion:(e,{questionIndex:t,responseValue:s,nextStep:r,specificQuestionIndex:n})=>{let i=[...e.questions],a=i[t];if(a.type!=="rating"&&a.type!=="single_choice")throw new Error("Survey question type must be rating or single_choice");if(a.branching?.type!=="response_based")throw new Error("Survey question branching type must be response_based");return"responseValues"in a.branching&&(r==="next_question"?delete a.branching.responseValues[s]:r==="end"?a.branching.responseValues[s]="end":r==="specific_question"&&(a.branching.responseValues[s]=n)),i[t]=a,{...e,questions:i}},resetBranchingForQuestion:(e,{questionIndex:t})=>{let s=[...e.questions],r=s[t];return delete r.branching,s[t]=r,{...e,questions:s}},deleteBranchingLogic:e=>{let t=[...e.questions];return t.forEach(s=>{delete s.branching}),{...e,questions:t}}}],selectedPageIndex:[0,{setSelectedPageIndex:(e,{idx:t})=>t}],selectedSection:["steps",{setSelectedSection:(e,{section:t})=>t}],surveyRatingResultsReady:[{},{loadSurveyRatingResultsSuccess:(e,{payload:t})=>!t||!t.hasOwnProperty("questionIndex")?{...e}:{...e,[t.questionIndex]:!0}}],surveyRecurringNPSResultsReady:[{},{loadSurveyRecurringNPSResultsSuccess:(e,{payload:t})=>!t||!t.hasOwnProperty("questionIndex")?{...e}:{...e,[t.questionIndex]:!0}}],surveySingleChoiceResultsReady:[{},{loadSurveySingleChoiceResultsSuccess:(e,{payload:t})=>!t||!t.hasOwnProperty("questionIndex")?{...e}:{...e,[t.questionIndex]:!0}}],surveyMultipleChoiceResultsReady:[{},{loadSurveyMultipleChoiceResultsSuccess:(e,{payload:t})=>!t||!t.hasOwnProperty("questionIndex")?{...e}:{...e,[t.questionIndex]:!0}}],surveyOpenTextResultsReady:[{},{loadSurveyOpenTextResultsSuccess:(e,{payload:t})=>!t||!t.hasOwnProperty("questionIndex")?{...e}:{...e,[t.questionIndex]:!0}}],writingHTMLDescription:[!1,{setWritingHTMLDescription:(e,{writingHTML:t})=>t}],flagPropertyErrors:[null,{setFlagPropertyErrors:(e,{errors:t})=>t}],answerFilters:[[],{setAnswerFilters:(e,{filters:t})=>t}],dateRange:[null,{setDateRange:(e,{dateRange:t})=>t}],interval:[null,{setInterval:(e,{interval:t})=>t}],compareFilter:[null,{setCompareFilter:(e,{compareFilter:t})=>t}]}),(0,y.selectors)({isAnyResultsLoading:[e=>[e.surveyUserStatsLoading,e.surveyRatingResultsReady,e.surveySingleChoiceResultsReady,e.surveyMultipleChoiceResultsReady,e.surveyOpenTextResultsReady,e.surveyRecurringNPSResultsReady],(e,t,s,r,n,i)=>e||!t||!s||!r||!n||!i],isSurveyRunning:[e=>[e.survey],e=>!!(e.start_date&&!e.end_date)],surveyUsesLimit:[e=>[e.survey],e=>!!(e.responses_limit&&e.responses_limit>0)],surveyUsesAdaptiveLimit:[e=>[e.survey],e=>!!(e.response_sampling_interval&&e.response_sampling_interval>0&&e.response_sampling_interval_type!==""&&e.response_sampling_limit&&e.response_sampling_limit>0)],surveyShufflingQuestionsAvailable:[e=>[e.survey],e=>e.questions.length>1],showSurveyRepeatSchedule:[e=>[e.survey],e=>e.schedule==="recurring"],descriptionContentType:[e=>[e.survey],e=>t=>e.questions[t].descriptionContentType],surveyRepeatedActivationAvailable:[e=>[e.survey],e=>e.conditions?.events?.values!=null&&e.conditions?.events?.values?.length>0],hasTargetingSet:[e=>[e.survey],e=>{let t=!!e.linked_flag_id||e.linked_flag&&Object.keys(e.linked_flag).length>0,s=e.targeting_flag&&Object.keys(e.targeting_flag).length>0||e.targeting_flag_filters&&Object.keys(e.targeting_flag_filters).length>0,r=e.conditions&&Object.keys(e.conditions).length>0;return!!t||!!s||!!r}],breadcrumbs:[e=>[e.survey],e=>[{key:"Surveys",name:"Surveys",path:E.surveys()},{key:["Survey",e?.id||"new"],name:e.name}]],dataTableQuery:[e=>[e.survey,e.propertyFilters,e.answerFilters],(e,t,s)=>{if(e.id==="new")return null;let r=e,n=(0,v.default)(r.start_date||r.created_at).format("YYYY-MM-DD");return{kind:"DataTableNode",source:{kind:"EventsQuery",select:["*",...e.questions.map((i,a)=>i.type==="multiple_choice"?`coalesce(arrayStringConcat(JSONExtractArrayRaw(properties, '${w(a)}'), ', ')) -- ${i.question}`:`coalesce(JSONExtractString(properties, '${w(a)}')) -- ${i.question}`),"timestamp","person","coalesce(JSONExtractString(properties, '$lib_version')) -- Library Version","coalesce(JSONExtractString(properties, '$lib')) -- Library","coalesce(JSONExtractString(properties, '$current_url')) -- URL"],orderBy:["timestamp DESC"],where:["event == 'survey sent'"],after:n,properties:[{type:"event",key:"$survey_id",operator:"exact",value:e.id},...t,...s]},propertiesViaUrl:!0,showExport:!0,showReload:!0,showEventFilter:!1,showPropertyFilter:!1,showTimings:!1}}],targetingFlagFilters:[e=>[e.survey],e=>e.targeting_flag_filters?{...e.targeting_flag_filters,groups:e.targeting_flag_filters.groups,multivariate:null,payloads:{},super_groups:void 0}:e.targeting_flag?.filters||void 0],urlMatchTypeValidationError:[e=>[e.survey],e=>{if(e.conditions?.url&&["regex","not_regex"].includes(e.conditions?.urlMatchType||"exact"))try{new RegExp(e.conditions.url)}catch(t){return t.message}return null}],deviceTypesMatchTypeValidationError:[e=>[e.survey],e=>{if(e.conditions?.deviceTypes&&["regex","not_regex"].includes(e.conditions?.deviceTypesMatchType||"exact"))try{new RegExp(e.conditions.deviceTypes?.at(0)||"")}catch(t){return t.message}return null}],surveyNPSScore:[e=>[e.surveyRatingResults],e=>{if(e){let t=Object.keys(e)[0],s=e[t];if(s.total===0)return"No data available";let r=s.data;if(r.length===11){let n=r.slice(9,11).reduce((u,c)=>u+c,0),i=r.slice(7,9).reduce((u,c)=>u+c,0),a=r.slice(0,7).reduce((u,c)=>u+c,0);return((n-a)/(n+i+a)*100).toFixed(1)}}}],getBranchingDropdownValue:[e=>[e.survey],e=>(t,s)=>{if(s.branching?.type){let{type:r}=s.branching;if(r==="specific_question"){let n=s.branching.index;return`specific_question:${n}`}return r}return t<e.questions.length-1?"next_question":"end"}],getResponseBasedBranchingDropdownValue:[e=>[e.survey],e=>(t,s,r)=>{if(!s.branching||!("responseValues"in s.branching))return"next_question";if(Number.isInteger(s.branching.responseValues[r])){let n=s.branching.responseValues[r];return`specific_question:${n}`}return s.branching?.responseValues?.[r]?s.branching.responseValues[r]:t<e.questions.length-1?"next_question":"end"}],hasCycle:[e=>[e.survey],e=>{let t=new Map;e.questions.forEach((n,i)=>{if(t.has(i)||t.set(i,new Set),n.branching?.type!=="end"){if(n.branching?.type==="specific_question"&&Number.isInteger(n.branching.index)){let a=n.branching.index;t.get(i).add(a);return}else if(n.branching?.type==="response_based"&&J(n.branching?.responseValues))for(let[a,o]of Object.entries(n.branching?.responseValues))Number.isInteger(o)&&t.get(i).add(o);if(i<e.questions.length-1){let a=i+1;t.get(i).add(a)}}});let s=!1;function r(n,i){if(!s)for(let a of t.get(n)||[]){if(i.includes(a)){s=!0;return}r(a,i.concat(a))}}return r(0,[0]),s}],hasBranchingLogic:[e=>[e.survey],e=>e.questions.some(t=>t.branching&&Object.keys(t.branching).length>0)],surveyAsInsightURL:[e=>[e.survey],e=>{let t={kind:"InsightVizNode",source:{kind:"TrendsQuery",properties:[{key:"$survey_id",value:e.id,operator:"exact",type:"event"}],series:[{kind:"EventsNode",event:"survey sent",name:"survey sent",math:"total"},{kind:"EventsNode",event:"survey shown",name:"survey shown",math:"total"},{kind:"EventsNode",event:"survey dismissed",name:"survey dismissed",math:"total"}]}};return E.insightNew({query:t})}],defaultInterval:[e=>[e.survey],e=>{let t=(0,v.default)(e.start_date||e.created_at),r=(e.end_date?(0,v.default)(e.end_date):(0,v.default)()).diff(t,"weeks");return r<=4?"day":r<=12?"week":"month"}]}),(0,ee.forms)(({actions:e,props:t,values:s})=>({survey:{defaults:{...g},errors:({name:r,questions:n,appearance:i})=>{let a=B(i);return{name:!r&&"Please enter a name.",questions:n.map(o=>{let u={question:!o.question&&"Please enter a question label."};if(o.type==="link"&&o.link)if(o.link.startsWith("mailto:")){if(!/^mailto:[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(o.link))return{...u,link:"Please enter a valid mailto link (e.g., mailto:example@domain.com)."}}else try{if(new URL(o.link).protocol!=="https:")return{...u,link:"Only HTTPS links are supported for security reasons."}}catch{return{...u,link:"Please enter a valid HTTPS URL."}}return o.type==="rating"?{...u,display:!o.display&&"Please choose a display type.",scale:!o.scale&&"Please choose a scale.",lowerBoundLabel:!o.lowerBoundLabel&&"Please enter a lower bound label.",upperBoundLabel:!o.upperBoundLabel&&"Please enter an upper bound label."}:o.type==="single_choice"||o.type==="multiple_choice"?{...u,choices:o.choices.some(c=>!c.trim())?"Please ensure all choices are non-empty.":void 0}:u}),targeting_flag_filters:s.flagPropertyErrors,urlMatchType:s.urlMatchTypeValidationError,appearance:a&&{backgroundColor:C(a.backgroundColor,"background color"),borderColor:C(a.borderColor,"border color"),ratingButtonActiveColor:C(a.ratingButtonActiveColor,"rating button active color"),ratingButtonColor:C(a.ratingButtonColor,"rating button color"),submitButtonColor:C(a.submitButtonColor,"button color"),submitButtonTextColor:C(a.submitButtonTextColor,"button text color")}}},submit:r=>{if(s.hasCycle)return e.reportSurveyCycleDetected(s.survey),O.error("Your survey contains an endless cycle. Please revisit your branching rules.");let n={...r,appearance:B(r.appearance)};e.editingSurvey(!1),t.id&&t.id!=="new"?e.updateSurvey(n):e.createSurvey(n)}}})),(0,h.urlToAction)(({actions:e,props:t})=>({[E.survey(t.id??"new")]:(s,{edit:r},n,{method:i})=>{t.id==="new"&&e.editingSurvey(!0),i==="PUSH"&&(t.id?e.loadSurvey():e.resetSurvey()),r&&e.editingSurvey(!0)}})),(0,h.actionToUrl)(({values:e})=>({setSurveyTemplateValues:()=>{let t=h.router.values.hashParams;return t.fromTemplate=!0,[E.survey(e.survey.id),h.router.values.searchParams,t]},editingSurvey:({editing:t})=>{let s=h.router.values.searchParams;return t?s.edit=!0:delete s.edit,[h.router.values.location.pathname,h.router.values.searchParams,h.router.values.hashParams]}})),(0,y.afterMount)(({props:e,actions:t})=>{e.id!=="new"&&t.loadSurvey(),e.id==="new"&&t.resetSurvey()})]);function V(e){if(!e.questions)return e;let t=A(e.appearance?.thankYouMessageHeader||""),s=A(e.appearance?.thankYouMessageDescription||""),r={...e.appearance,...t&&{thankYouMessageHeader:t},...s&&{thankYouMessageDescription:s}};return e.type!=="widget"&&(delete r.widgetType,delete r.widgetLabel,delete r.widgetColor),{...e,questions:e.questions?.map(n=>({...n,description:A(n.description||""),question:A(n.question||"")})),appearance:r}}export{Ze as a};
//# sourceMappingURL=/static/chunk-RKCB37WE.js.map
