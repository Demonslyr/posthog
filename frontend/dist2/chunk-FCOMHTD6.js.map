{
  "version": 3,
  "sources": ["../src/scenes/settings/environment/userGroupsLogic.tsx"],
  "sourcesContent": ["import { LemonDialog, LemonInput } from '@posthog/lemon-ui'\nimport Fuse from 'fuse.js'\nimport { actions, kea, listeners, path, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\n\nimport { UserBasicType, UserGroup } from '~/types'\n\nimport type { userGroupsLogicType } from './userGroupsLogicType'\n\nexport interface UserGroupsFuse extends Fuse<UserGroup> {}\n\nexport const userGroupsLogic = kea<userGroupsLogicType>([\n    path(['scenes', 'settings', 'environment', 'userGroupsLogic']),\n\n    actions({\n        ensureAllGroupsLoaded: true,\n        openGroupCreationForm: true,\n        setSearch: (search) => ({ search }),\n    }),\n\n    reducers({\n        search: ['', { setSearch: (_, { search }) => search }],\n    }),\n\n    loaders(({ values }) => ({\n        userGroups: [\n            [] as UserGroup[],\n            {\n                loadUserGroups: async () => {\n                    const response = await api.userGroups.list()\n                    return response.results\n                },\n                deleteUserGroup: async (id: string) => {\n                    await api.userGroups.delete(id)\n                    const newValues = [...values.userGroups]\n                    return newValues.filter((v) => v.id !== id)\n                },\n                createUserGroup: async (name: string) => {\n                    const response = await api.userGroups.create(name)\n                    return [...values.userGroups, response]\n                },\n                addMember: async ({ id, user }: { id: string; user: UserBasicType }) => {\n                    const group = values.userGroups.find((g) => g.id === id)\n                    if (group) {\n                        await api.userGroups.addMember(id, user.id)\n                        group.members = [...group.members, user]\n                        return values.userGroups.map((g) => (g.id === id ? group : g))\n                    }\n                    return values.userGroups\n                },\n                removeMember: async ({ id, user }: { id: string; user: UserBasicType }) => {\n                    const group = values.userGroups.find((g) => g.id === id)\n                    if (group) {\n                        await api.userGroups.removeMember(id, user.id)\n                        group.members = group.members.filter((m) => m.id !== user.id)\n                        return values.userGroups.map((g) => (g.id === id ? group : g))\n                    }\n                    return values.userGroups\n                },\n            },\n        ],\n    })),\n\n    selectors({\n        userGroupsFuse: [\n            (s) => [s.userGroups],\n            (userGroups): UserGroupsFuse => new Fuse<UserGroup>(userGroups, { keys: ['name'], threshold: 0.3 }),\n        ],\n        filteredGroups: [\n            (s) => [s.userGroups, s.userGroupsFuse, s.search],\n            (userGroups, userGroupsFuse, search): UserGroup[] =>\n                search ? userGroupsFuse.search(search).map((result) => result.item) : userGroups ?? [],\n        ],\n    }),\n\n    listeners(({ values, actions }) => ({\n        openGroupCreationForm: () => {\n            LemonDialog.openForm({\n                title: 'Create user group',\n                initialValues: { name: '' },\n                content: (\n                    <LemonField name=\"name\">\n                        <LemonInput placeholder=\"Name\" autoFocus />\n                    </LemonField>\n                ),\n                errors: { name: (name) => (!name ? 'You must enter a name' : undefined) },\n                onSubmit: ({ name }) => actions.createUserGroup(name),\n            })\n        },\n\n        ensureAllGroupsLoaded: () => {\n            if (values.userGroupsLoading) {\n                return\n            }\n            if (values.userGroups.length === 0) {\n                actions.loadUserGroups()\n            }\n        },\n    })),\n])\n"],
  "mappings": "wKAAAA,IAAAC,IAAAC,IAEA,IAAAC,EAAmE,OACnEC,EAAwB,OAiFA,IAAAC,EAAA,OAvEXC,KAAkB,OAAyB,IACpD,QAAK,CAAC,SAAU,WAAY,cAAe,iBAAiB,CAAC,KAE7D,WAAQ,CACJ,sBAAuB,GACvB,sBAAuB,GACvB,UAAYC,IAAY,CAAE,OAAAA,CAAO,EACrC,CAAC,KAED,YAAS,CACL,OAAQ,CAAC,GAAI,CAAE,UAAW,CAACC,EAAG,CAAE,OAAAD,CAAO,IAAMA,CAAO,CAAC,CACzD,CAAC,KAED,WAAQ,CAAC,CAAE,OAAAE,CAAO,KAAO,CACrB,WAAY,CACR,CAAC,EACD,CACI,eAAgB,UACK,MAAMC,EAAI,WAAW,KAAK,GAC3B,QAEpB,gBAAiB,MAAOC,IACpB,MAAMD,EAAI,WAAW,OAAOC,CAAE,EACZ,CAAC,GAAGF,EAAO,UAAU,EACtB,OAAQG,GAAMA,EAAE,KAAOD,CAAE,GAE9C,gBAAiB,MAAOE,GAAiB,CACrC,IAAMC,EAAW,MAAMJ,EAAI,WAAW,OAAOG,CAAI,EACjD,MAAO,CAAC,GAAGJ,EAAO,WAAYK,CAAQ,CAC1C,EACA,UAAW,MAAO,CAAE,GAAAH,EAAI,KAAAI,CAAK,IAA2C,CACpE,IAAMC,EAAQP,EAAO,WAAW,KAAMQ,GAAMA,EAAE,KAAON,CAAE,EACvD,OAAIK,GACA,MAAMN,EAAI,WAAW,UAAUC,EAAII,EAAK,EAAE,EAC1CC,EAAM,QAAU,CAAC,GAAGA,EAAM,QAASD,CAAI,EAChCN,EAAO,WAAW,IAAKQ,GAAOA,EAAE,KAAON,EAAKK,EAAQC,CAAE,GAE1DR,EAAO,UAClB,EACA,aAAc,MAAO,CAAE,GAAAE,EAAI,KAAAI,CAAK,IAA2C,CACvE,IAAMC,EAAQP,EAAO,WAAW,KAAMQ,GAAMA,EAAE,KAAON,CAAE,EACvD,OAAIK,GACA,MAAMN,EAAI,WAAW,aAAaC,EAAII,EAAK,EAAE,EAC7CC,EAAM,QAAUA,EAAM,QAAQ,OAAQE,GAAMA,EAAE,KAAOH,EAAK,EAAE,EACrDN,EAAO,WAAW,IAAKQ,GAAOA,EAAE,KAAON,EAAKK,EAAQC,CAAE,GAE1DR,EAAO,UAClB,CACJ,CACJ,CACJ,EAAE,KAEF,aAAU,CACN,eAAgB,CACXU,GAAM,CAACA,EAAE,UAAU,EACnBC,GAA+B,IAAIC,EAAgBD,EAAY,CAAE,KAAM,CAAC,MAAM,EAAG,UAAW,EAAI,CAAC,CACtG,EACA,eAAgB,CACXD,GAAM,CAACA,EAAE,WAAYA,EAAE,eAAgBA,EAAE,MAAM,EAChD,CAACC,EAAYE,EAAgBf,IACzBA,EAASe,EAAe,OAAOf,CAAM,EAAE,IAAKgB,GAAWA,EAAO,IAAI,EAAIH,GAAc,CAAC,CAC7F,CACJ,CAAC,KAED,aAAU,CAAC,CAAE,OAAAX,EAAQ,QAAAe,CAAQ,KAAO,CAChC,sBAAuB,IAAM,CACzBC,EAAY,SAAS,CACjB,MAAO,oBACP,cAAe,CAAE,KAAM,EAAG,EAC1B,WACI,OAACC,EAAA,CAAW,KAAK,OACb,mBAACC,EAAA,CAAW,YAAY,OAAO,UAAS,GAAC,EAC7C,EAEJ,OAAQ,CAAE,KAAOd,GAAWA,EAAiC,OAA1B,uBAAqC,EACxE,SAAU,CAAC,CAAE,KAAAA,CAAK,IAAMW,EAAQ,gBAAgBX,CAAI,CACxD,CAAC,CACL,EAEA,sBAAuB,IAAM,CACrBJ,EAAO,mBAGPA,EAAO,WAAW,SAAW,GAC7Be,EAAQ,eAAe,CAE/B,CACJ,EAAE,CACN,CAAC",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "import_jsx_runtime", "userGroupsLogic", "search", "_", "values", "api_default", "id", "v", "name", "response", "user", "group", "g", "m", "s", "userGroups", "Fuse", "userGroupsFuse", "result", "actions", "LemonDialog", "LemonField", "LemonInput"]
}
