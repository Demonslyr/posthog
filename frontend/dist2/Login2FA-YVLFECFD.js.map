{
  "version": 3,
  "sources": ["../src/scenes/authentication/Login2FA.tsx", "../src/scenes/authentication/login2FALogic.ts"],
  "sourcesContent": ["import { LemonButton, LemonInput } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport { BridgePage } from 'lib/components/BridgePage/BridgePage'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\n\nimport { login2FALogic } from './login2FALogic'\n\nexport function Login2FA(): JSX.Element {\n    const { isTwofactortokenSubmitting, generalError } = useValues(login2FALogic)\n    const { preflight } = useValues(preflightLogic)\n\n    return (\n        <BridgePage\n            view=\"login\"\n            hedgehog\n            message={\n                <>\n                    Welcome to\n                    <br /> PostHog{preflight?.cloud ? ' Cloud' : ''}!\n                </>\n            }\n        >\n            <div className=\"space-y-2\">\n                <h2>Two-Factor Authentication</h2>\n                <p>Enter a token from your authenticator app or a backup code.</p>\n\n                <Form logic={login2FALogic} formKey=\"twofactortoken\" enableFormOnSubmit className=\"space-y-4\">\n                    {generalError && <LemonBanner type=\"error\">{generalError.detail}</LemonBanner>}\n                    <LemonField name=\"token\" label=\"Authenticator token\">\n                        <LemonInput\n                            className=\"ph-ignore-input\"\n                            autoFocus\n                            data-attr=\"token\"\n                            placeholder=\"123456\"\n                            inputMode=\"numeric\"\n                            autoComplete=\"one-time-code\"\n                        />\n                    </LemonField>\n                    <LemonButton\n                        type=\"primary\"\n                        status=\"alt\"\n                        htmlType=\"submit\"\n                        data-attr=\"2fa-login\"\n                        fullWidth\n                        center\n                        loading={isTwofactortokenSubmitting}\n                        size=\"large\"\n                    >\n                        Login\n                    </LemonButton>\n                </Form>\n            </div>\n        </BridgePage>\n    )\n}\n", "import { actions, connect, kea, listeners, path, reducers } from 'kea'\nimport { forms } from 'kea-forms'\nimport api from 'lib/api'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\n\nimport type { login2FALogicType } from './login2FALogicType'\nimport { handleLoginRedirect } from './loginLogic'\n\nexport interface AuthenticateResponseType {\n    success: boolean\n    errorCode?: string\n    errorDetail?: string\n}\n\nexport interface TwoFactorForm {\n    token: string\n}\n\nexport enum LoginStep {\n    LOGIN = 'login',\n    TWO_FACTOR = 'two_factor',\n}\n\nexport const login2FALogic = kea<login2FALogicType>([\n    path(['scenes', 'authentication', 'login2FALogic']),\n    connect({\n        values: [preflightLogic, ['preflight'], featureFlagLogic, ['featureFlags']],\n    }),\n    actions({\n        setGeneralError: (code: string, detail: string) => ({ code, detail }),\n        setLoginStep: (step: LoginStep) => ({ step }),\n        clearGeneralError: true,\n    }),\n    reducers({\n        generalError: [\n            null as { code: string; detail: string } | null,\n            {\n                setGeneralError: (_, error) => error,\n                clearGeneralError: () => null,\n            },\n        ],\n    }),\n    forms(({ actions }) => ({\n        twofactortoken: {\n            defaults: { token: '' } as TwoFactorForm,\n            errors: ({ token }) => ({\n                token: !token ? 'Please enter a token to continue' : null,\n            }),\n            submit: async ({ token }, breakpoint) => {\n                breakpoint()\n                try {\n                    return await api.create<any>('api/login/token', { token })\n                } catch (e) {\n                    const { code, detail } = e as Record<string, any>\n                    actions.setGeneralError(code, detail)\n                    throw e\n                }\n            },\n        },\n    })),\n    listeners({\n        submitTwofactortokenSuccess: () => {\n            handleLoginRedirect()\n            // Reload the page after login to ensure POSTHOG_APP_CONTEXT is set correctly.\n            window.location.reload()\n        },\n    }),\n])\n"],
  "mappings": "+jCAAAA,IAAAC,IAAAC,IACA,IAAAC,EAA0B,OAC1BC,EAAqB,OCFrBC,IAAAC,IAAAC,IAAA,IAAAC,EAAiE,OACjEC,EAAsB,OAuBf,IAAMC,KAAgB,OAAuB,IAChD,QAAK,CAAC,SAAU,iBAAkB,eAAe,CAAC,KAClD,WAAQ,CACJ,OAAQ,CAACC,EAAgB,CAAC,WAAW,EAAGC,EAAkB,CAAC,cAAc,CAAC,CAC9E,CAAC,KACD,WAAQ,CACJ,gBAAiB,CAACC,EAAcC,KAAoB,CAAE,KAAAD,EAAM,OAAAC,CAAO,GACnE,aAAeC,IAAqB,CAAE,KAAAA,CAAK,GAC3C,kBAAmB,EACvB,CAAC,KACD,YAAS,CACL,aAAc,CACV,KACA,CACI,gBAAiB,CAACC,EAAGC,IAAUA,EAC/B,kBAAmB,IAAM,IAC7B,CACJ,CACJ,CAAC,KACD,SAAM,CAAC,CAAE,QAAAC,CAAQ,KAAO,CACpB,eAAgB,CACZ,SAAU,CAAE,MAAO,EAAG,EACtB,OAAQ,CAAC,CAAE,MAAAC,CAAM,KAAO,CACpB,MAAQA,EAA6C,KAArC,kCACpB,GACA,OAAQ,MAAO,CAAE,MAAAA,CAAM,EAAGC,IAAe,CACrCA,EAAW,EACX,GAAI,CACA,OAAO,MAAMC,EAAI,OAAY,kBAAmB,CAAE,MAAAF,CAAM,CAAC,CAC7D,OAASG,EAAG,CACR,GAAM,CAAE,KAAAT,EAAM,OAAAC,CAAO,EAAIQ,EACzB,MAAAJ,EAAQ,gBAAgBL,EAAMC,CAAM,EAC9BQ,CACV,CACJ,CACJ,CACJ,EAAE,KACF,aAAU,CACN,4BAA6B,IAAM,CAC/BC,EAAoB,EAEpB,OAAO,SAAS,OAAO,CAC3B,CACJ,CAAC,CACL,CAAC,EDjDe,IAAAC,EAAA,OATT,SAASC,GAAwB,CACpC,GAAM,CAAE,2BAAAC,EAA4B,aAAAC,CAAa,KAAI,aAAUC,CAAa,EACtE,CAAE,UAAAC,CAAU,KAAI,aAAUC,CAAc,EAE9C,SACI,OAACC,EAAA,CACG,KAAK,QACL,SAAQ,GACR,WACI,oBAAE,0BAEE,OAAC,OAAG,EAAE,WAASF,GAAW,MAAQ,SAAW,GAAG,KACpD,EAGJ,oBAAC,OAAI,UAAU,YACX,oBAAC,MAAG,qCAAyB,KAC7B,OAAC,KAAE,uEAA2D,KAE9D,QAAC,QAAK,MAAOD,EAAe,QAAQ,iBAAiB,mBAAkB,GAAC,UAAU,YAC7E,UAAAD,MAAgB,OAACK,EAAA,CAAY,KAAK,QAAS,SAAAL,EAAa,OAAO,KAChE,OAACM,EAAA,CAAW,KAAK,QAAQ,MAAM,sBAC3B,mBAACC,EAAA,CACG,UAAU,kBACV,UAAS,GACT,YAAU,QACV,YAAY,SACZ,UAAU,UACV,aAAa,gBACjB,EACJ,KACA,OAACC,EAAA,CACG,KAAK,UACL,OAAO,MACP,SAAS,SACT,YAAU,YACV,UAAS,GACT,OAAM,GACN,QAAST,EACT,KAAK,QACR,iBAED,GACJ,GACJ,EACJ,CAER",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "login2FALogic", "preflightLogic", "featureFlagLogic", "code", "detail", "step", "_", "error", "actions", "token", "breakpoint", "api_default", "e", "handleLoginRedirect", "import_jsx_runtime", "Login2FA", "isTwofactortokenSubmitting", "generalError", "login2FALogic", "preflight", "preflightLogic", "BridgePage", "LemonBanner", "LemonField", "LemonInput", "LemonButton"]
}
