{
  "version": 3,
  "sources": ["../src/scenes/error-tracking/errorTrackingLogic.ts", "../src/scenes/error-tracking/ErrorTrackingSetupPrompt.tsx"],
  "sourcesContent": ["import type { LemonSegmentedButtonOption } from '@posthog/lemon-ui'\nimport { actions, afterMount, connect, kea, path, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport { subscriptions } from 'kea-subscriptions'\nimport api from 'lib/api'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { isDefinitionStale } from 'lib/utils/definitions'\n\nimport {\n    DateRange,\n    ErrorTrackingIssue,\n    ErrorTrackingIssueAssignee,\n    ErrorTrackingSparklineConfig,\n} from '~/queries/schema/schema-general'\nimport { EventDefinitionType, FilterLogicalOperator, UniversalFiltersGroup } from '~/types'\n\nimport type { errorTrackingLogicType } from './errorTrackingLogicType'\n\nconst lastHour = { value: '1h', label: '1h' }\nconst lastDay = { value: '24h', label: '24h' }\nconst lastMonth = { value: 'mStart', label: 'Month' }\nconst lastYear = { value: 'yStart', label: 'Year' }\n\nexport type SparklineOption = LemonSegmentedButtonOption<string>\n\nconst customOptions: Record<string, { custom: SparklineOption; default: SparklineOption }> = {\n    // ordering of the keys is important here\n    // the shorter period should always be on the rhs\n    // this will maintain the order when we call Object.values()\n    // to render the options in the sparkline header\n    dStart: { default: lastDay, custom: lastHour }, // today\n    '-24h': { default: lastDay, custom: lastHour },\n    mStart: { custom: lastMonth, default: lastDay },\n    yStart: { custom: lastYear, default: lastMonth },\n    all: { custom: lastYear, default: lastMonth },\n}\n\nexport const DEFAULT_ERROR_TRACKING_DATE_RANGE = { date_from: '-7d', date_to: null }\n\nexport const DEFAULT_ERROR_TRACKING_FILTER_GROUP = {\n    type: FilterLogicalOperator.And,\n    values: [{ type: FilterLogicalOperator.And, values: [] }],\n}\n\nexport const SPARKLINE_CONFIGURATIONS: Record<string, ErrorTrackingSparklineConfig> = {\n    '1h': { value: 60, interval: 'minute' },\n    '24h': { value: 24, interval: 'hour' },\n    '7d': { value: 168, interval: 'hour' }, // 7d * 24h = 168h\n    '14d': { value: 336, interval: 'hour' }, // 14d * 24h = 336h\n    '90d': { value: 90, interval: 'day' },\n    '180d': { value: 26, interval: 'week' }, // 180d / 7d = 26 weeks\n    mStart: { value: 31, interval: 'day' },\n    yStart: { value: 52, interval: 'week' },\n}\n\nexport function constructSparklineConfig(selectedPeriod: string): ErrorTrackingSparklineConfig | null {\n    if (selectedPeriod in SPARKLINE_CONFIGURATIONS) {\n        return SPARKLINE_CONFIGURATIONS[selectedPeriod]\n    }\n\n    const [value, unit] = selectedPeriod.match(/\\d+|\\D+/g) as RegExpMatchArray\n    return {\n        value: Number(value) * (unit === 'y' ? 12 : 1),\n        interval: unit === 'h' ? 'hour' : unit === 'd' ? 'day' : unit === 'w' ? 'week' : 'month',\n    }\n}\n\nexport const errorTrackingLogic = kea<errorTrackingLogicType>([\n    path(['scenes', 'error-tracking', 'errorTrackingLogic']),\n\n    connect({\n        values: [featureFlagLogic, ['featureFlags']],\n    }),\n\n    actions({\n        setDateRange: (dateRange: DateRange) => ({ dateRange }),\n        setAssignee: (assignee: ErrorTrackingIssue['assignee']) => ({ assignee }),\n        setSearchQuery: (searchQuery: string) => ({ searchQuery }),\n        setFilterGroup: (filterGroup: UniversalFiltersGroup) => ({ filterGroup }),\n        setFilterTestAccounts: (filterTestAccounts: boolean) => ({ filterTestAccounts }),\n        setSparklineSelectedPeriod: (period: string | null) => ({ period }),\n    }),\n    reducers({\n        dateRange: [\n            DEFAULT_ERROR_TRACKING_DATE_RANGE as DateRange,\n            { persist: true },\n            {\n                setDateRange: (_, { dateRange }) => dateRange,\n            },\n        ],\n        assignee: [\n            null as ErrorTrackingIssueAssignee | null,\n            {\n                setAssignee: (_, { assignee }) => assignee,\n            },\n        ],\n        filterGroup: [\n            DEFAULT_ERROR_TRACKING_FILTER_GROUP as UniversalFiltersGroup,\n            { persist: true },\n            {\n                setFilterGroup: (_, { filterGroup }) => filterGroup,\n            },\n        ],\n        filterTestAccounts: [\n            false as boolean,\n            { persist: true },\n            {\n                setFilterTestAccounts: (_, { filterTestAccounts }) => filterTestAccounts,\n            },\n        ],\n        searchQuery: [\n            '' as string,\n            {\n                setSearchQuery: (_, { searchQuery }) => searchQuery,\n            },\n        ],\n        sparklineSelectedPeriod: [\n            lastDay.value as string | null,\n            { persist: true },\n            {\n                setSparklineSelectedPeriod: (_, { period }) => period,\n            },\n        ],\n    }),\n    loaders({\n        hasSentExceptionEvent: {\n            __default: undefined as boolean | undefined,\n            loadExceptionEventDefinition: async (): Promise<boolean> => {\n                const exceptionDefinition = await api.eventDefinitions.list({\n                    event_type: EventDefinitionType.Event,\n                    search: '$exception',\n                })\n                const definition = exceptionDefinition.results.find((r) => r.name === '$exception')\n                return definition ? !isDefinitionStale(definition) : false\n            },\n        },\n    }),\n    selectors({\n        sparklineOptions: [\n            (s) => [s.dateRange],\n            ({ date_from }): { custom: SparklineOption; default: SparklineOption } | null => {\n                if (!date_from) {\n                    return null\n                }\n\n                const isRelative = date_from.match(/-\\d+[hdmy]/)\n                if (date_from in customOptions) {\n                    return customOptions[date_from]\n                } else if (isRelative) {\n                    const value = date_from?.replace('-', '')\n                    return { custom: { value: value, label: value }, default: lastDay }\n                }\n                return null\n            },\n        ],\n        customSparklineConfig: [\n            (s) => [s.sparklineOptions],\n            (sparklineOptions): ErrorTrackingSparklineConfig | null =>\n                sparklineOptions ? constructSparklineConfig(sparklineOptions.custom.value) : null,\n        ],\n    }),\n    subscriptions(({ values, actions }) => ({\n        sparklineOptions: (sparklineOptions: { custom: SparklineOption; default: SparklineOption } | null) => {\n            if (!sparklineOptions) {\n                actions.setSparklineSelectedPeriod(null)\n            } else {\n                const options = Object.values(sparklineOptions).map((o) => o.value)\n                const validOption = values.sparklineSelectedPeriod && options.includes(values.sparklineSelectedPeriod)\n\n                if (!validOption) {\n                    actions.setSparklineSelectedPeriod(sparklineOptions.custom.value)\n                }\n            }\n        },\n    })),\n\n    afterMount(({ actions }) => {\n        actions.loadExceptionEventDefinition()\n    }),\n])\n", "import { IconExternal } from '@posthog/icons'\nimport { LemonButton, Spinner } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { ProductIntroduction } from 'lib/components/ProductIntroduction/ProductIntroduction'\nimport { useFeatureFlag } from 'lib/hooks/useFeatureFlag'\nimport posthog from 'posthog-js'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { ProductKey } from '~/types'\n\nimport { errorTrackingLogic } from './errorTrackingLogic'\n\nexport const ErrorTrackingSetupPrompt = ({ children }: { children: React.ReactElement }): JSX.Element => {\n    const { hasSentExceptionEvent, hasSentExceptionEventLoading } = useValues(errorTrackingLogic)\n    const { currentTeam, currentTeamLoading } = useValues(teamLogic)\n    const hasErrorTracking = useFeatureFlag('ERROR_TRACKING')\n\n    const exceptionAutocaptureEnabled = currentTeam && currentTeam.autocapture_exceptions_opt_in\n\n    return hasSentExceptionEventLoading || currentTeamLoading ? (\n        <div className=\"flex justify-center\">\n            <Spinner />\n        </div>\n    ) : !hasErrorTracking ? (\n        <BetaAccessBanner />\n    ) : !hasSentExceptionEvent && !exceptionAutocaptureEnabled ? (\n        <IngestionStatusCheck />\n    ) : (\n        children\n    )\n}\n\nconst IngestionStatusCheck = (): JSX.Element | null => {\n    const { updateCurrentTeam } = useActions(teamLogic)\n\n    return (\n        <ProductIntroduction\n            productName=\"Error tracking\"\n            thingName=\"issue\"\n            titleOverride=\"You haven't captured any exceptions\"\n            description=\"To start capturing exceptions you need to enable exception autocapture. Exception autocapture only applies to the JS SDK. Installation for other platforms are described in the docs.\"\n            isEmpty={true}\n            productKey={ProductKey.ERROR_TRACKING}\n            actionElementOverride={\n                <>\n                    <LemonButton\n                        type=\"primary\"\n                        onClick={() => updateCurrentTeam({ autocapture_exceptions_opt_in: true })}\n                    >\n                        Enable exception autocapture\n                    </LemonButton>\n                    <LemonButton\n                        targetBlank\n                        sideIcon={<IconExternal className=\"w-5 h-5\" />}\n                        to=\"https://posthog.com/docs/error-tracking/installation\"\n                    >\n                        Read the docs\n                    </LemonButton>\n                </>\n            }\n        />\n    )\n}\n\nconst BetaAccessBanner = (): JSX.Element | null => {\n    return (\n        <ProductIntroduction\n            productName=\"Error tracking\"\n            thingName=\"issue\"\n            titleOverride=\"Welcome to Error Tracking\"\n            description=\"Error tracking is in beta for our JS, Node and Python SDKs.\"\n            isEmpty={true}\n            docsURL=\"https://posthog.com/docs/error-tracking\"\n            productKey={ProductKey.ERROR_TRACKING}\n            actionElementOverride={\n                <LemonButton\n                    type=\"primary\"\n                    onClick={() => posthog.updateEarlyAccessFeatureEnrollment('error-tracking', true)}\n                >\n                    Get started\n                </LemonButton>\n            }\n        />\n    )\n}\n"],
  "mappings": "2PAAAA,IAAAC,IAAAC,IACA,IAAAC,EAA6E,OAC7EC,EAAwB,OACxBC,EAA8B,OAe9B,IAAMC,EAAW,CAAE,MAAO,KAAM,MAAO,IAAK,EACtCC,EAAU,CAAE,MAAO,MAAO,MAAO,KAAM,EACvCC,EAAY,CAAE,MAAO,SAAU,MAAO,OAAQ,EAC9CC,EAAW,CAAE,MAAO,SAAU,MAAO,MAAO,EAI5CC,EAAuF,CAKzF,OAAQ,CAAE,QAASH,EAAS,OAAQD,CAAS,EAC7C,OAAQ,CAAE,QAASC,EAAS,OAAQD,CAAS,EAC7C,OAAQ,CAAE,OAAQE,EAAW,QAASD,CAAQ,EAC9C,OAAQ,CAAE,OAAQE,EAAU,QAASD,CAAU,EAC/C,IAAK,CAAE,OAAQC,EAAU,QAASD,CAAU,CAChD,EAEaG,EAAoC,CAAE,UAAW,MAAO,QAAS,IAAK,EAEtEC,EAAsC,CAC/C,WACA,OAAQ,CAAC,CAAE,WAAiC,OAAQ,CAAC,CAAE,CAAC,CAC5D,EAEaC,EAAyE,CAClF,KAAM,CAAE,MAAO,GAAI,SAAU,QAAS,EACtC,MAAO,CAAE,MAAO,GAAI,SAAU,MAAO,EACrC,KAAM,CAAE,MAAO,IAAK,SAAU,MAAO,EACrC,MAAO,CAAE,MAAO,IAAK,SAAU,MAAO,EACtC,MAAO,CAAE,MAAO,GAAI,SAAU,KAAM,EACpC,OAAQ,CAAE,MAAO,GAAI,SAAU,MAAO,EACtC,OAAQ,CAAE,MAAO,GAAI,SAAU,KAAM,EACrC,OAAQ,CAAE,MAAO,GAAI,SAAU,MAAO,CAC1C,EAEO,SAASC,EAAyBC,EAA6D,CAClG,GAAIA,KAAkBF,EAClB,OAAOA,EAAyBE,CAAc,EAGlD,GAAM,CAACC,EAAOC,CAAI,EAAIF,EAAe,MAAM,UAAU,EACrD,MAAO,CACH,MAAO,OAAOC,CAAK,GAAKC,IAAS,IAAM,GAAK,GAC5C,SAAUA,IAAS,IAAM,OAASA,IAAS,IAAM,MAAQA,IAAS,IAAM,OAAS,OACrF,CACJ,CAEO,IAAMC,KAAqB,OAA4B,IAC1D,QAAK,CAAC,SAAU,iBAAkB,oBAAoB,CAAC,KAEvD,WAAQ,CACJ,OAAQ,CAACC,EAAkB,CAAC,cAAc,CAAC,CAC/C,CAAC,KAED,WAAQ,CACJ,aAAeC,IAA0B,CAAE,UAAAA,CAAU,GACrD,YAAcC,IAA8C,CAAE,SAAAA,CAAS,GACvE,eAAiBC,IAAyB,CAAE,YAAAA,CAAY,GACxD,eAAiBC,IAAwC,CAAE,YAAAA,CAAY,GACvE,sBAAwBC,IAAiC,CAAE,mBAAAA,CAAmB,GAC9E,2BAA6BC,IAA2B,CAAE,OAAAA,CAAO,EACrE,CAAC,KACD,YAAS,CACL,UAAW,CACPd,EACA,CAAE,QAAS,EAAK,EAChB,CACI,aAAc,CAACe,EAAG,CAAE,UAAAN,CAAU,IAAMA,CACxC,CACJ,EACA,SAAU,CACN,KACA,CACI,YAAa,CAACM,EAAG,CAAE,SAAAL,CAAS,IAAMA,CACtC,CACJ,EACA,YAAa,CACTT,EACA,CAAE,QAAS,EAAK,EAChB,CACI,eAAgB,CAACc,EAAG,CAAE,YAAAH,CAAY,IAAMA,CAC5C,CACJ,EACA,mBAAoB,CAChB,GACA,CAAE,QAAS,EAAK,EAChB,CACI,sBAAuB,CAACG,EAAG,CAAE,mBAAAF,CAAmB,IAAMA,CAC1D,CACJ,EACA,YAAa,CACT,GACA,CACI,eAAgB,CAACE,EAAG,CAAE,YAAAJ,CAAY,IAAMA,CAC5C,CACJ,EACA,wBAAyB,CACrBf,EAAQ,MACR,CAAE,QAAS,EAAK,EAChB,CACI,2BAA4B,CAACmB,EAAG,CAAE,OAAAD,CAAO,IAAMA,CACnD,CACJ,CACJ,CAAC,KACD,WAAQ,CACJ,sBAAuB,CACnB,UAAW,OACX,6BAA8B,SAA8B,CAKxD,IAAME,GAJsB,MAAMC,EAAI,iBAAiB,KAAK,CACxD,mBACA,OAAQ,YACZ,CAAC,GACsC,QAAQ,KAAM,GAAM,EAAE,OAAS,YAAY,EAClF,OAAOD,EAAa,CAACE,EAAkBF,CAAU,EAAI,EACzD,CACJ,CACJ,CAAC,KACD,aAAU,CACN,iBAAkB,CACbG,GAAM,CAACA,EAAE,SAAS,EACnB,CAAC,CAAE,UAAAC,CAAU,IAAoE,CAC7E,GAAI,CAACA,EACD,OAAO,KAGX,IAAMC,EAAaD,EAAU,MAAM,YAAY,EAC/C,GAAIA,KAAarB,EACb,OAAOA,EAAcqB,CAAS,EAC3B,GAAIC,EAAY,CACnB,IAAMhB,EAAQe,GAAW,QAAQ,IAAK,EAAE,EACxC,MAAO,CAAE,OAAQ,CAAE,MAAOf,EAAO,MAAOA,CAAM,EAAG,QAAST,CAAQ,CACtE,CACA,OAAO,IACX,CACJ,EACA,sBAAuB,CAClBuB,GAAM,CAACA,EAAE,gBAAgB,EACzBG,GACGA,EAAmBnB,EAAyBmB,EAAiB,OAAO,KAAK,EAAI,IACrF,CACJ,CAAC,KACD,iBAAc,CAAC,CAAE,OAAAC,EAAQ,QAAAC,CAAQ,KAAO,CACpC,iBAAmBF,GAAmF,CAClG,GAAI,CAACA,EACDE,EAAQ,2BAA2B,IAAI,MACpC,CACH,IAAMC,EAAU,OAAO,OAAOH,CAAgB,EAAE,IAAKI,GAAMA,EAAE,KAAK,EAC9CH,EAAO,yBAA2BE,EAAQ,SAASF,EAAO,uBAAuB,GAGjGC,EAAQ,2BAA2BF,EAAiB,OAAO,KAAK,CAExE,CACJ,CACJ,EAAE,KAEF,cAAW,CAAC,CAAE,QAAAE,CAAQ,IAAM,CACxBA,EAAQ,6BAA6B,CACzC,CAAC,CACL,CAAC,ECnLDG,IAAAC,IAAAC,IAEA,IAAAC,EAAsC,OAmB1B,IAAAC,EAAA,OATCC,GAA2B,CAAC,CAAE,SAAAC,CAAS,IAAqD,CACrG,GAAM,CAAE,sBAAAC,EAAuB,6BAAAC,CAA6B,KAAI,aAAUC,CAAkB,EACtF,CAAE,YAAAC,EAAa,mBAAAC,CAAmB,KAAI,aAAUC,CAAS,EACzDC,EAAmBC,EAAe,gBAAgB,EAElDC,EAA8BL,GAAeA,EAAY,8BAE/D,OAAOF,GAAgCG,KACnC,OAAC,OAAI,UAAU,sBACX,mBAACK,EAAA,EAAQ,EACb,EACCH,EAED,CAACN,GAAyB,CAACQ,KAC3B,OAACE,EAAA,EAAqB,EAEtBX,KAJA,OAACY,EAAA,EAAiB,CAM1B,EAEMD,EAAuB,IAA0B,CACnD,GAAM,CAAE,kBAAAE,CAAkB,KAAI,cAAWP,CAAS,EAElD,SACI,OAACQ,EAAA,CACG,YAAY,iBACZ,UAAU,QACV,cAAc,sCACd,YAAY,wLACZ,QAAS,GACT,4BACA,yBACI,oBACI,oBAACC,EAAA,CACG,KAAK,UACL,QAAS,IAAMF,EAAkB,CAAE,8BAA+B,EAAK,CAAC,EAC3E,wCAED,KACA,OAACE,EAAA,CACG,YAAW,GACX,YAAU,OAACC,EAAA,CAAa,UAAU,UAAU,EAC5C,GAAG,uDACN,yBAED,GACJ,EAER,CAER,EAEMJ,EAAmB,OAEjB,OAACE,EAAA,CACG,YAAY,iBACZ,UAAU,QACV,cAAc,4BACd,YAAY,8DACZ,QAAS,GACT,QAAQ,0CACR,4BACA,yBACI,OAACC,EAAA,CACG,KAAK,UACL,QAAS,IAAME,EAAQ,mCAAmC,iBAAkB,EAAI,EACnF,uBAED,EAER",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "import_kea_subscriptions", "lastHour", "lastDay", "lastMonth", "lastYear", "customOptions", "DEFAULT_ERROR_TRACKING_DATE_RANGE", "DEFAULT_ERROR_TRACKING_FILTER_GROUP", "SPARKLINE_CONFIGURATIONS", "constructSparklineConfig", "selectedPeriod", "value", "unit", "errorTrackingLogic", "featureFlagLogic", "dateRange", "assignee", "searchQuery", "filterGroup", "filterTestAccounts", "period", "_", "definition", "api_default", "isDefinitionStale", "s", "date_from", "isRelative", "sparklineOptions", "values", "actions", "options", "o", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "ErrorTrackingSetupPrompt", "children", "hasSentExceptionEvent", "hasSentExceptionEventLoading", "errorTrackingLogic", "currentTeam", "currentTeamLoading", "teamLogic", "hasErrorTracking", "useFeatureFlag", "exceptionAutocaptureEnabled", "Spinner", "IngestionStatusCheck", "BetaAccessBanner", "updateCurrentTeam", "ProductIntroduction", "LemonButton", "IconExternal", "Co"]
}
