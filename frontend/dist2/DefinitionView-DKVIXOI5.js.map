{
  "version": 3,
  "sources": ["../src/scenes/data-management/definition/DefinitionView.tsx"],
  "sourcesContent": ["import { LemonDivider, LemonTag } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { EditableField } from 'lib/components/EditableField/EditableField'\nimport { NotFound } from 'lib/components/NotFound'\nimport { ObjectTags } from 'lib/components/ObjectTags/ObjectTags'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { TZLabel } from 'lib/components/TZLabel'\nimport { UserActivityIndicator } from 'lib/components/UserActivityIndicator/UserActivityIndicator'\nimport { IconPlayCircle } from 'lib/lemon-ui/icons'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonDialog } from 'lib/lemon-ui/LemonDialog'\nimport { SpinnerOverlay } from 'lib/lemon-ui/Spinner/Spinner'\nimport { getFilterLabel } from 'lib/taxonomy'\nimport { useMemo } from 'react'\nimport { definitionLogic, DefinitionLogicProps } from 'scenes/data-management/definition/definitionLogic'\nimport { EventDefinitionProperties } from 'scenes/data-management/events/EventDefinitionProperties'\nimport { LinkedHogFunctions } from 'scenes/pipeline/hogfunctions/list/LinkedHogFunctions'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { defaultDataTableColumns } from '~/queries/nodes/DataTable/utils'\nimport { Query } from '~/queries/Query/Query'\nimport { NodeKind } from '~/queries/schema/schema-general'\nimport { FilterLogicalOperator, PropertyDefinition, ReplayTabs } from '~/types'\n\nexport const scene: SceneExport = {\n    component: DefinitionView,\n    logic: definitionLogic,\n    paramsToProps: ({ params: { id } }): (typeof definitionLogic)['props'] => ({\n        id,\n    }),\n}\n\nexport function DefinitionView(props: DefinitionLogicProps = {}): JSX.Element {\n    const logic = definitionLogic(props)\n    const { definition, definitionLoading, definitionMissing, hasTaxonomyFeatures, singular, isEvent, isProperty } =\n        useValues(logic)\n    const { deleteDefinition } = useActions(logic)\n\n    const memoizedQuery = useMemo(\n        () => ({\n            kind: NodeKind.DataTableNode,\n            source: {\n                kind: NodeKind.EventsQuery,\n                select: defaultDataTableColumns(NodeKind.EventsQuery),\n                event: definition.name,\n            },\n            full: true,\n            showEventFilter: false,\n        }),\n        [definition.name]\n    )\n\n    if (definitionLoading) {\n        return <SpinnerOverlay sceneLevel />\n    }\n\n    if (definitionMissing) {\n        return <NotFound object=\"event\" />\n    }\n\n    return (\n        <>\n            <PageHeader\n                buttons={\n                    <>\n                        {isEvent && (\n                            <LemonButton\n                                type=\"secondary\"\n                                to={urls.replay(ReplayTabs.Home, {\n                                    filter_group: {\n                                        type: FilterLogicalOperator.And,\n                                        values: [\n                                            {\n                                                type: FilterLogicalOperator.And,\n                                                values: [\n                                                    {\n                                                        id: definition.name,\n                                                        type: 'events',\n                                                        order: 0,\n                                                        name: definition.name,\n                                                    },\n                                                ],\n                                            },\n                                        ],\n                                    },\n                                })}\n                                sideIcon={<IconPlayCircle />}\n                                data-attr=\"event-definition-view-recordings\"\n                            >\n                                View recordings\n                            </LemonButton>\n                        )}\n                        <LemonButton\n                            data-attr=\"delete-definition\"\n                            type=\"secondary\"\n                            status=\"danger\"\n                            onClick={() =>\n                                LemonDialog.open({\n                                    title: `Delete this ${singular} definition?`,\n                                    description: (\n                                        <>\n                                            <p>\n                                                <strong>\n                                                    {getFilterLabel(\n                                                        definition.name,\n                                                        isEvent\n                                                            ? TaxonomicFilterGroupType.Events\n                                                            : TaxonomicFilterGroupType.EventProperties\n                                                    )}\n                                                </strong>{' '}\n                                                will no\u00A0longer appear in\u00A0selectors. Associated\u00A0data will remain\n                                                in\u00A0the\u00A0database.\n                                            </p>\n                                            <p>\n                                                This\u00A0definition will be recreated if\u00A0the\u00A0{singular} is\u00A0ever seen again\n                                                in\u00A0the\u00A0event\u00A0stream.\n                                            </p>\n                                        </>\n                                    ),\n                                    primaryButton: {\n                                        status: 'danger',\n                                        children: 'Delete definition',\n                                        onClick: () => deleteDefinition(),\n                                    },\n                                    secondaryButton: {\n                                        children: 'Cancel',\n                                    },\n                                    width: 448,\n                                })\n                            }\n                            tooltip=\"Delete this definition. Associated data will remain.\"\n                        >\n                            Delete\n                        </LemonButton>\n                        {(hasTaxonomyFeatures || isProperty) && (\n                            <LemonButton\n                                data-attr=\"edit-definition\"\n                                type=\"secondary\"\n                                to={\n                                    isEvent\n                                        ? urls.eventDefinitionEdit(definition.id)\n                                        : urls.propertyDefinitionEdit(definition.id)\n                                }\n                            >\n                                Edit\n                            </LemonButton>\n                        )}\n                    </>\n                }\n            />\n\n            <div className=\"space-y-2\">\n                {definition.description || isProperty || hasTaxonomyFeatures ? (\n                    <EditableField\n                        multiline\n                        name=\"description\"\n                        markdown\n                        value={definition.description || ''}\n                        placeholder=\"Description (optional)\"\n                        mode=\"view\"\n                        data-attr=\"definition-description-view\"\n                        className=\"definition-description\"\n                        compactButtons\n                        maxLength={600}\n                    />\n                ) : null}\n                <ObjectTags\n                    tags={definition.tags ?? []}\n                    data-attr=\"definition-tags-view\"\n                    className=\"definition-tags\"\n                    saving={definitionLoading}\n                />\n\n                <UserActivityIndicator at={definition.updated_at} by={definition.updated_by} />\n                <div className=\"flex flex-wrap items-center gap-2 text-secondary\">\n                    <div>Raw event name:</div>\n                    <LemonTag className=\"font-mono\">{definition.name}</LemonTag>\n                </div>\n            </div>\n\n            <LemonDivider className=\"my-6\" />\n            <div className=\"flex flex-wrap\">\n                {isEvent && definition.created_at && (\n                    <div className=\"flex-1 flex flex-col\">\n                        <h5>First seen</h5>\n                        <b>\n                            <TZLabel time={definition.created_at} />\n                        </b>\n                    </div>\n                )}\n                {isEvent && definition.last_seen_at && (\n                    <div className=\"flex-1 flex flex-col\">\n                        <h5>Last seen</h5>\n                        <b>\n                            <TZLabel time={definition.last_seen_at} />\n                        </b>\n                    </div>\n                )}\n\n                {isProperty && (\n                    <div className=\"flex-1 flex flex-col\">\n                        <h5>Property type</h5>\n                        <b>{(definition as PropertyDefinition).property_type ?? '-'}</b>\n                    </div>\n                )}\n            </div>\n\n            <LemonDivider className=\"my-6\" />\n\n            {isEvent && definition.id !== 'new' && (\n                <>\n                    <EventDefinitionProperties definition={definition} />\n\n                    <LemonDivider className=\"my-6\" />\n                    <h2 className=\"flex-1 subtitle\">Connected destinations</h2>\n                    <p>Get notified via Slack, webhooks or more whenever this event is captured.</p>\n\n                    <LinkedHogFunctions\n                        logicKey=\"event-definitions\"\n                        type=\"destination\"\n                        filters={{\n                            events: [\n                                {\n                                    id: `${definition.name}`,\n                                    type: 'events',\n                                },\n                            ],\n                        }}\n                    />\n                    <LemonDivider className=\"my-6\" />\n                    <h3>Matching events</h3>\n                    <p>This is the list of recent events that match this definition.</p>\n                    <Query query={memoizedQuery} />\n                </>\n            )}\n        </>\n    )\n}\n"],
  "mappings": "q/DAAAA,IAAAC,IAAAC,IACA,IAAAC,EAAsC,OAatC,IAAAC,EAAwB,OAyCT,IAAAC,EAAA,OA7BFC,GAAqB,CAC9B,UAAWC,EACX,MAAOC,EACP,cAAe,CAAC,CAAE,OAAQ,CAAE,GAAAC,CAAG,CAAE,KAA0C,CACvE,GAAAA,CACJ,EACJ,EAEO,SAASF,EAAeG,EAA8B,CAAC,EAAgB,CAC1E,IAAMC,EAAQH,EAAgBE,CAAK,EAC7B,CAAE,WAAAE,EAAY,kBAAAC,EAAmB,kBAAAC,EAAmB,oBAAAC,EAAqB,SAAAC,EAAU,QAAAC,EAAS,WAAAC,CAAW,KACzG,aAAUP,CAAK,EACb,CAAE,iBAAAQ,CAAiB,KAAI,cAAWR,CAAK,EAEvCS,KAAgB,WAClB,KAAO,CACH,qBACA,OAAQ,CACJ,mBACA,OAAQC,eAA4C,EACpD,MAAOT,EAAW,IACtB,EACA,KAAM,GACN,gBAAiB,EACrB,GACA,CAACA,EAAW,IAAI,CACpB,EAEA,OAAIC,KACO,OAACS,EAAA,CAAe,WAAU,GAAC,EAGlCR,KACO,OAACS,EAAA,CAAS,OAAO,QAAQ,KAIhC,oBACI,oBAACC,EAAA,CACG,WACI,oBACK,UAAAP,MACG,OAACQ,EAAA,CACG,KAAK,YACL,GAAIC,EAAK,cAAwB,CAC7B,aAAc,CACV,WACA,OAAQ,CACJ,CACI,WACA,OAAQ,CACJ,CACI,GAAId,EAAW,KACf,KAAM,SACN,MAAO,EACP,KAAMA,EAAW,IACrB,CACJ,CACJ,CACJ,CACJ,CACJ,CAAC,EACD,YAAU,OAACe,EAAA,EAAe,EAC1B,YAAU,mCACb,2BAED,KAEJ,OAACF,EAAA,CACG,YAAU,oBACV,KAAK,YACL,OAAO,SACP,QAAS,IACLG,EAAY,KAAK,CACb,MAAO,eAAeZ,CAAQ,eAC9B,eACI,oBACI,qBAAC,KACG,oBAAC,UACI,SAAAa,EACGjB,EAAW,KACXK,6BAGJ,EACJ,EAAU,IAAI,mGAGlB,KACA,QAAC,KAAE,+DAC2CD,EAAS,wDAEvD,GACJ,EAEJ,cAAe,CACX,OAAQ,SACR,SAAU,oBACV,QAAS,IAAMG,EAAiB,CACpC,EACA,gBAAiB,CACb,SAAU,QACd,EACA,MAAO,GACX,CAAC,EAEL,QAAQ,uDACX,kBAED,GACEJ,GAAuBG,OACrB,OAACO,EAAA,CACG,YAAU,kBACV,KAAK,YACL,GACIR,EACMS,EAAK,oBAAoBd,EAAW,EAAE,EACtCc,EAAK,uBAAuBd,EAAW,EAAE,EAEtD,gBAED,GAER,EAER,KAEA,QAAC,OAAI,UAAU,YACV,UAAAA,EAAW,aAAeM,GAAcH,KACrC,OAACe,EAAA,CACG,UAAS,GACT,KAAK,cACL,SAAQ,GACR,MAAOlB,EAAW,aAAe,GACjC,YAAY,yBACZ,KAAK,OACL,YAAU,8BACV,UAAU,yBACV,eAAc,GACd,UAAW,IACf,EACA,QACJ,OAACmB,EAAA,CACG,KAAMnB,EAAW,MAAQ,CAAC,EAC1B,YAAU,uBACV,UAAU,kBACV,OAAQC,EACZ,KAEA,OAACmB,EAAA,CAAsB,GAAIpB,EAAW,WAAY,GAAIA,EAAW,WAAY,KAC7E,QAAC,OAAI,UAAU,mDACX,oBAAC,OAAI,2BAAe,KACpB,OAACqB,EAAA,CAAS,UAAU,YAAa,SAAArB,EAAW,KAAK,GACrD,GACJ,KAEA,OAACsB,EAAA,CAAa,UAAU,OAAO,KAC/B,QAAC,OAAI,UAAU,iBACV,UAAAjB,GAAWL,EAAW,eACnB,QAAC,OAAI,UAAU,uBACX,oBAAC,MAAG,sBAAU,KACd,OAAC,KACG,mBAACuB,EAAA,CAAQ,KAAMvB,EAAW,WAAY,EAC1C,GACJ,EAEHK,GAAWL,EAAW,iBACnB,QAAC,OAAI,UAAU,uBACX,oBAAC,MAAG,qBAAS,KACb,OAAC,KACG,mBAACuB,EAAA,CAAQ,KAAMvB,EAAW,aAAc,EAC5C,GACJ,EAGHM,MACG,QAAC,OAAI,UAAU,uBACX,oBAAC,MAAG,yBAAa,KACjB,OAAC,KAAI,SAAAN,EAAkC,eAAiB,IAAI,GAChE,GAER,KAEA,OAACsB,EAAA,CAAa,UAAU,OAAO,EAE9BjB,GAAWL,EAAW,KAAO,UAC1B,oBACI,oBAACwB,EAAA,CAA0B,WAAYxB,EAAY,KAEnD,OAACsB,EAAA,CAAa,UAAU,OAAO,KAC/B,OAAC,MAAG,UAAU,kBAAkB,kCAAsB,KACtD,OAAC,KAAE,qFAAyE,KAE5E,OAACG,EAAA,CACG,SAAS,oBACT,KAAK,cACL,QAAS,CACL,OAAQ,CACJ,CACI,GAAI,GAAGzB,EAAW,IAAI,GACtB,KAAM,QACV,CACJ,CACJ,EACJ,KACA,OAACsB,EAAA,CAAa,UAAU,OAAO,KAC/B,OAAC,MAAG,2BAAe,KACnB,OAAC,KAAE,yEAA6D,KAChE,OAACI,EAAA,CAAM,MAAOlB,EAAe,GACjC,GAER,CAER",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "scene", "DefinitionView", "definitionLogic", "id", "props", "logic", "definition", "definitionLoading", "definitionMissing", "hasTaxonomyFeatures", "singular", "isEvent", "isProperty", "deleteDefinition", "memoizedQuery", "defaultDataTableColumns", "SpinnerOverlay", "NotFound", "PageHeader", "LemonButton", "urls", "IconPlayCircle", "LemonDialog", "getFilterLabel", "EditableField", "ObjectTags", "UserActivityIndicator", "LemonTag", "LemonDivider", "TZLabel", "EventDefinitionProperties", "LinkedHogFunctions", "Query"]
}
