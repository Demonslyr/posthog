{
  "version": 3,
  "sources": ["../src/lib/components/VersionChecker/VersionCheckerBanner.tsx", "../src/lib/components/VersionChecker/versionCheckerLogic.ts"],
  "sourcesContent": ["import { useValues } from 'kea'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { versionCheckerLogic } from './versionCheckerLogic'\n\nexport function VersionCheckerBanner(): JSX.Element | null {\n    const { currentTeamId } = useValues(teamLogic)\n    const { versionWarning } = useValues(versionCheckerLogic({ teamId: currentTeamId }))\n    if (!versionWarning) {\n        return null\n    }\n\n    const dismissKey = `version-checker-${versionWarning.latestAvailableVersion}-${versionWarning.latestUsedVersion}`\n\n    return (\n        <LemonBanner\n            type={versionWarning.level}\n            dismissKey={dismissKey}\n            action={{\n                children: 'Update now',\n                to: 'https://posthog.com/docs/libraries/js#option-2-install-via-npm',\n                targetBlank: true,\n            }}\n            className=\"mb-4\"\n        >\n            <b>Your PostHog SDK needs updating.</b> The latest version of <code>posthog-js</code> is{' '}\n            <b>{versionWarning.latestAvailableVersion}</b>, but you're using <b>{versionWarning.latestUsedVersion}</b>.{' '}\n            <br />\n            {versionWarning.level === 'error' ? (\n                <>\n                    If something is not working as expected, try updating the SDK to the latest version where new\n                    features and bug fixes are available.\n                </>\n            ) : undefined}\n        </LemonBanner>\n    )\n}\n", "import { actions, afterMount, kea, key, listeners, path, props, reducers, sharedListeners } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { isNotNil } from 'lib/utils'\nimport {\n    diffVersions,\n    highestVersion,\n    isEqualVersion,\n    parseVersion,\n    SemanticVersion,\n    tryParseVersion,\n    versionToString,\n} from 'lib/utils/semver'\n\nimport { HogQLQuery, NodeKind } from '~/queries/schema/schema-general'\nimport { hogql } from '~/queries/utils'\n\nimport type { versionCheckerLogicType } from './versionCheckerLogicType'\n\n// If you would like to deprecate all posthog-js versions older than a specific version\n// (i.e. after fixing an important bug) please edit\n// https://github.com/PostHog/posthog-js/blob/main/deprecation.json\n\nconst CHECK_INTERVAL_MS = 1000 * 60 * 60 * 6 // 6 hour\n\nexport type SDKVersion = {\n    version: SemanticVersion\n    timestamp?: string\n}\n\nexport type SDKVersionWarning = {\n    latestUsedVersion: string\n    latestAvailableVersion: string\n    numVersionsBehind?: number\n    level: 'warning' | 'info' | 'error'\n}\n\nexport interface PosthogJSDeprecation {\n    deprecateBeforeVersion?: string\n    deprecateOlderThanDays?: number\n}\n\nexport interface AvailableVersions {\n    sdkVersions?: SemanticVersion[]\n    deprecation?: PosthogJSDeprecation\n}\n\nexport interface VersionCheckerLogicProps {\n    teamId: number | null\n}\n\nexport const versionCheckerLogic = kea<versionCheckerLogicType>([\n    props({ teamId: null } as VersionCheckerLogicProps),\n    key(({ teamId }) => teamId || 'no-team-id'),\n    path((key) => ['components', 'VersionChecker', 'versionCheckerLogic', key]),\n    actions({\n        setVersionWarning: (versionWarning: SDKVersionWarning | null) => ({ versionWarning }),\n        setSdkVersions: (sdkVersions: SDKVersion[]) => ({ sdkVersions }),\n    }),\n    loaders(({ values }) => ({\n        availableVersions: [\n            {} as AvailableVersions,\n            {\n                loadAvailableVersions: async (): Promise<AvailableVersions> => {\n                    // Make both requests simultaneously and don't return until both have finished, to avoid a flash\n                    // of partial results in the UI.\n                    const availableVersionsPromise: Promise<SemanticVersion[]> = fetch(\n                        'https://api.github.com/repos/posthog/posthog-js/tags'\n                    )\n                        .then((r) => r.json())\n                        .then((r) => r.map((x: any) => tryParseVersion(x.name)).filter(isNotNil))\n                    const deprecationPromise: Promise<PosthogJSDeprecation> = fetch(\n                        'https://raw.githubusercontent.com/PostHog/posthog-js/main/deprecation.json'\n                    ).then((r) => r.json())\n                    const settled = await Promise.allSettled([availableVersionsPromise, deprecationPromise])\n                    const availableVersions = settled[0].status === 'fulfilled' ? settled[0].value : []\n                    const deprecation = settled[1].status === 'fulfilled' ? settled[1].value : {}\n                    // if one or more of the requests failed, merge in the previous value if we have one\n                    return {\n                        ...values.availableVersions,\n                        sdkVersions: availableVersions,\n                        deprecation: deprecation,\n                    }\n                },\n            },\n        ],\n        usedVersions: [\n            null as SDKVersion[] | null,\n            {\n                loadUsedVersions: async () => {\n                    const query: HogQLQuery = {\n                        kind: NodeKind.HogQLQuery,\n                        query: hogql`SELECT properties.$lib_version AS lib_version, max(timestamp) AS latest_timestamp, count(lib_version) as count\n                                FROM events\n                                WHERE timestamp >= now() - INTERVAL 1 DAY \n                                AND timestamp <= now()\n                                AND properties.$lib = 'web'\n                                GROUP BY lib_version\n                                ORDER BY latest_timestamp DESC\n                                limit 10`,\n                    }\n\n                    const res = await api.query(query, undefined, undefined, true)\n\n                    return (\n                        res.results\n                            ?.map((x) => {\n                                const version = tryParseVersion(x[0])\n                                if (!version) {\n                                    return null\n                                }\n                                return {\n                                    version,\n                                    timestamp: x[1],\n                                }\n                            })\n                            .filter(isNotNil) ?? null\n                    )\n                },\n            },\n        ],\n    })),\n\n    reducers({\n        lastCheckTimestamp: [\n            0,\n            { persist: true },\n            {\n                loadUsedVersionsSuccess: () => Date.now(),\n            },\n        ],\n        versionWarning: [\n            null as SDKVersionWarning | null,\n            // bumping cache key due to an incorrect tag being cached on 2024-02-12\n            { persist: true, prefix: '2024-02-12' },\n            {\n                setVersionWarning: (_, { versionWarning }) => versionWarning,\n            },\n        ],\n    }),\n\n    sharedListeners(({ values, actions }) => ({\n        checkForVersionWarning: () => {\n            if (!values.usedVersions?.length) {\n                return\n            }\n            const { deprecation, sdkVersions } = values.availableVersions\n\n            // We want the highest semantic version to be the latest used one, rather than\n            // the one with the latest timestamp, because secondary installations can spew old versions\n            const latestUsedVersion = highestVersion(values.usedVersions.map((v) => v.version))\n\n            // the latest version published on github\n            const latestAvailableVersion = sdkVersions?.[0]\n\n            // the version where, anything before this deprecated (i.e. this version is allowed, before it is not)\n            const deprecateBeforeVersion = deprecation?.deprecateBeforeVersion\n                ? parseVersion(deprecation.deprecateBeforeVersion)\n                : null\n\n            let warning: SDKVersionWarning | null = null\n\n            if (deprecateBeforeVersion) {\n                const diff = diffVersions(deprecateBeforeVersion, latestUsedVersion)\n                // if they are behind the deprecatedBeforeVersion by any amount, show an error\n                if (diff && diff.diff > 0) {\n                    warning = {\n                        latestUsedVersion: versionToString(latestUsedVersion),\n                        latestAvailableVersion: versionToString(latestAvailableVersion || deprecateBeforeVersion),\n                        level: 'error',\n                    }\n                }\n            }\n\n            if (!warning && sdkVersions && latestAvailableVersion) {\n                const diff = diffVersions(latestAvailableVersion, latestUsedVersion)\n\n                if (diff && diff.diff > 0) {\n                    // there's a difference between the latest used version and the latest available version\n\n                    let numVersionsBehind = sdkVersions.findIndex((v) => isEqualVersion(v, latestUsedVersion))\n                    if (numVersionsBehind === -1) {\n                        // if we couldn't find the versions, use the length of the list as a fallback\n                        numVersionsBehind = sdkVersions.length - 1\n                    }\n                    if (numVersionsBehind < diff.diff) {\n                        // we might have deleted versions, but if the actual diff is X then we must be at least X versions behind\n                        numVersionsBehind = diff.diff\n                    }\n\n                    let level: 'warning' | 'info' | 'error' | undefined\n                    if (diff.kind === 'major') {\n                        level = 'info' // it is desirable to be on the latest major version, but not critical\n                    } else if (diff.kind === 'minor') {\n                        level = numVersionsBehind >= 40 ? 'warning' : undefined\n                    }\n\n                    if (level === undefined && numVersionsBehind >= 50) {\n                        level = 'error'\n                    }\n\n                    // we check if there is a \"latest user version string\" to avoid returning odd data in unexpected cases\n                    if (level && !!versionToString(latestUsedVersion).trim().length) {\n                        warning = {\n                            latestUsedVersion: versionToString(latestUsedVersion),\n                            latestAvailableVersion: versionToString(latestAvailableVersion),\n                            level,\n                            numVersionsBehind,\n                        }\n                    }\n                }\n            }\n\n            actions.setVersionWarning(warning)\n        },\n    })),\n\n    listeners(({ sharedListeners }) => ({\n        loadAvailableVersionsSuccess: sharedListeners.checkForVersionWarning,\n        loadUsedVersionsSuccess: sharedListeners.checkForVersionWarning,\n    })),\n\n    afterMount(({ actions, values }) => {\n        if (values.lastCheckTimestamp < Date.now() - CHECK_INTERVAL_MS) {\n            actions.loadAvailableVersions()\n            actions.loadUsedVersions()\n        }\n    }),\n])\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "CHECK_INTERVAL_MS", "versionCheckerLogic", "teamId", "key", "versionWarning", "sdkVersions", "values", "availableVersionsPromise", "r", "x", "tryParseVersion", "isNotNil", "deprecationPromise", "settled", "availableVersions", "deprecation", "query", "hogql", "api_default", "version", "_", "actions", "latestUsedVersion", "highestVersion", "v", "latestAvailableVersion", "deprecateBeforeVersion", "parseVersion", "warning", "diff", "diffVersions", "versionToString", "numVersionsBehind", "isEqualVersion", "level", "sharedListeners", "import_jsx_runtime", "VersionCheckerBanner", "currentTeamId", "teamLogic", "versionWarning", "versionCheckerLogic", "dismissKey", "LemonBanner"]
}
