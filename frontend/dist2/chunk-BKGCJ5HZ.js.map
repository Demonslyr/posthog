{
  "version": 3,
  "sources": ["../src/scenes/dashboard/NewDashboardModal.tsx", "../src/scenes/dashboard/DashboardTemplateVariables.tsx"],
  "sourcesContent": ["import { LemonButton, LemonInput } from '@posthog/lemon-ui'\nimport { useActions, useMountedLogic, useValues } from 'kea'\nimport { LemonModal } from 'lib/lemon-ui/LemonModal'\nimport { pluralize } from 'lib/utils'\nimport { dashboardTemplatesLogic } from 'scenes/dashboard/dashboards/templates/dashboardTemplatesLogic'\nimport { newDashboardLogic } from 'scenes/dashboard/newDashboardLogic'\n\nimport { DashboardTemplateChooser } from './DashboardTemplateChooser'\nimport { DashboardTemplateVariables } from './DashboardTemplateVariables'\nimport { dashboardTemplateVariablesLogic } from './dashboardTemplateVariablesLogic'\n\nexport function NewDashboardModal(): JSX.Element {\n    const builtLogic = useMountedLogic(newDashboardLogic)\n    const { hideNewDashboardModal, clearActiveDashboardTemplate, createDashboardFromTemplate } =\n        useActions(newDashboardLogic)\n    const { newDashboardModalVisible, activeDashboardTemplate, variableSelectModalVisible } =\n        useValues(newDashboardLogic)\n    const { variables } = useValues(dashboardTemplateVariablesLogic)\n\n    const templatesLogic = dashboardTemplatesLogic({\n        scope: builtLogic.props.featureFlagId ? 'feature_flag' : 'default',\n    })\n    const { templateFilter } = useValues(templatesLogic)\n    const { setTemplateFilter } = useActions(templatesLogic)\n\n    const _dashboardTemplateChooser = builtLogic.props.featureFlagId ? (\n        <DashboardTemplateChooser scope=\"feature_flag\" />\n    ) : (\n        <DashboardTemplateChooser />\n    )\n\n    return (\n        <LemonModal\n            onClose={hideNewDashboardModal}\n            isOpen={newDashboardModalVisible}\n            title={activeDashboardTemplate ? 'Choose your events' : 'Create a dashboard'}\n            data-attr=\"new-dashboard-chooser\"\n            description={\n                activeDashboardTemplate ? (\n                    <p>\n                        The <i>{activeDashboardTemplate.template_name}</i> template requires you to choose{' '}\n                        {pluralize((activeDashboardTemplate.variables || []).length, 'event', 'events', true)}.\n                    </p>\n                ) : (\n                    <div className=\"flex flex-col gap-2\">\n                        <div>Choose a template or start with a blank slate</div>\n                        <div>\n                            <LemonInput\n                                type=\"search\"\n                                placeholder=\"Filter templates\"\n                                onChange={setTemplateFilter}\n                                value={templateFilter}\n                                fullWidth={true}\n                            />\n                        </div>\n                    </div>\n                )\n            }\n            footer={\n                activeDashboardTemplate ? (\n                    <>\n                        {variableSelectModalVisible ? (\n                            <div />\n                        ) : (\n                            <LemonButton onClick={clearActiveDashboardTemplate} type=\"secondary\">\n                                Back\n                            </LemonButton>\n                        )}\n                        <LemonButton\n                            onClick={() => {\n                                activeDashboardTemplate &&\n                                    createDashboardFromTemplate(activeDashboardTemplate, variables)\n                            }}\n                            type=\"primary\"\n                        >\n                            Create\n                        </LemonButton>\n                    </>\n                ) : null\n            }\n        >\n            <div className=\"NewDashboardModal\">\n                {activeDashboardTemplate ? <DashboardTemplateVariables /> : _dashboardTemplateChooser}\n            </div>\n        </LemonModal>\n    )\n}\n", "import { LemonLabel } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { useEffect } from 'react'\nimport { ActionFilter } from 'scenes/insights/filters/ActionFilter/ActionFilter'\n\nimport { FilterType, InsightType } from '~/types'\n\nimport { dashboardTemplateVariablesLogic } from './dashboardTemplateVariablesLogic'\nimport { newDashboardLogic } from './newDashboardLogic'\n\nexport function DashboardTemplateVariables(): JSX.Element {\n    const { activeDashboardTemplate } = useValues(newDashboardLogic)\n    const theDashboardTemplateVariablesLogic = dashboardTemplateVariablesLogic({\n        variables: activeDashboardTemplate?.variables || [],\n    })\n    const { variables } = useValues(theDashboardTemplateVariablesLogic)\n    const { setVariable, setVariables } = useActions(theDashboardTemplateVariablesLogic)\n\n    // this is a hack, I'm not sure why it's not set properly initially. Figure it out.\n    useEffect(() => {\n        setVariables(activeDashboardTemplate?.variables || [])\n    }, [activeDashboardTemplate])\n\n    return (\n        <div className=\"mb-4 DashboardTemplateVariables max-w-192\">\n            {variables.map((variable, index) => (\n                <div key={index} className=\"mb-6\">\n                    <div className=\"mb-2\">\n                        <LemonLabel showOptional={!variable.required} info={<>{variable.description}</>}>\n                            {variable.name}\n                        </LemonLabel>\n                        <p className=\"text-sm text-secondary\">{variable.description}</p>\n                    </div>\n                    <div>\n                        <ActionFilter\n                            filters={{\n                                insight: InsightType.TRENDS,\n                                events: [variable.default],\n                            }}\n                            setFilters={(filters: FilterType) => {\n                                setVariable(variable.name, filters)\n                            }}\n                            typeKey={'variable_' + variable.name}\n                            hideDeleteBtn={true}\n                            hideRename={true}\n                            hideDuplicate={true}\n                            entitiesLimit={1}\n                        />\n                    </div>\n                </div>\n            ))}\n        </div>\n    )\n}\n"],
  "mappings": "uWAAAA,IAAAC,IAAAC,IACA,IAAAC,EAAuD,OCDvDC,IAAAC,IAAAC,IACA,IAAAC,EAAsC,OACtCC,EAA0B,OAyBN,IAAAC,EAAA,OAjBb,SAASC,GAA0C,CACtD,GAAM,CAAE,wBAAAC,CAAwB,KAAI,aAAUC,CAAiB,EACzDC,EAAqCC,EAAgC,CACvE,UAAWH,GAAyB,WAAa,CAAC,CACtD,CAAC,EACK,CAAE,UAAAI,CAAU,KAAI,aAAUF,CAAkC,EAC5D,CAAE,YAAAG,EAAa,aAAAC,CAAa,KAAI,cAAWJ,CAAkC,EAGnF,sBAAU,IAAM,CACZI,EAAaN,GAAyB,WAAa,CAAC,CAAC,CACzD,EAAG,CAACA,CAAuB,CAAC,KAGxB,OAAC,OAAI,UAAU,4CACV,SAAAI,EAAU,IAAI,CAACG,EAAUC,OACtB,QAAC,OAAgB,UAAU,OACvB,qBAAC,OAAI,UAAU,OACX,oBAACC,EAAA,CAAW,aAAc,CAACF,EAAS,SAAU,QAAM,mBAAG,SAAAA,EAAS,YAAY,EACvE,SAAAA,EAAS,KACd,KACA,OAAC,KAAE,UAAU,yBAA0B,SAAAA,EAAS,YAAY,GAChE,KACA,OAAC,OACG,mBAACG,EAAA,CACG,QAAS,CACL,iBACA,OAAQ,CAACH,EAAS,OAAO,CAC7B,EACA,WAAaI,GAAwB,CACjCN,EAAYE,EAAS,KAAMI,CAAO,CACtC,EACA,QAAS,YAAcJ,EAAS,KAChC,cAAe,GACf,WAAY,GACZ,cAAe,GACf,cAAe,EACnB,EACJ,IAtBMC,CAuBV,CACH,EACL,CAER,CD3BQ,IAAAI,EAAA,OAfD,SAASC,IAAiC,CAC7C,IAAMC,KAAa,mBAAgBC,CAAiB,EAC9C,CAAE,sBAAAC,EAAuB,6BAAAC,EAA8B,4BAAAC,CAA4B,KACrF,cAAWH,CAAiB,EAC1B,CAAE,yBAAAI,EAA0B,wBAAAC,EAAyB,2BAAAC,CAA2B,KAClF,aAAUN,CAAiB,EACzB,CAAE,UAAAO,CAAU,KAAI,aAAUC,CAA+B,EAEzDC,EAAiBC,EAAwB,CAC3C,MAAOX,EAAW,MAAM,cAAgB,eAAiB,SAC7D,CAAC,EACK,CAAE,eAAAY,CAAe,KAAI,aAAUF,CAAc,EAC7C,CAAE,kBAAAG,CAAkB,KAAI,cAAWH,CAAc,EAEjDI,EAA4Bd,EAAW,MAAM,iBAC/C,OAACe,EAAA,CAAyB,MAAM,eAAe,KAE/C,OAACA,EAAA,EAAyB,EAG9B,SACI,OAACC,EAAA,CACG,QAASd,EACT,OAAQG,EACR,MAAOC,EAA0B,qBAAuB,qBACxD,YAAU,wBACV,YACIA,KACI,QAAC,KAAE,oBACK,OAAC,KAAG,SAAAA,EAAwB,cAAc,EAAI,mCAAiC,IAClFW,GAAWX,EAAwB,WAAa,CAAC,GAAG,OAAQ,QAAS,SAAU,EAAI,EAAE,KAC1F,KAEA,QAAC,OAAI,UAAU,sBACX,oBAAC,OAAI,yDAA6C,KAClD,OAAC,OACG,mBAACY,EAAA,CACG,KAAK,SACL,YAAY,mBACZ,SAAUL,EACV,MAAOD,EACP,UAAW,GACf,EACJ,GACJ,EAGR,OACIN,KACI,oBACK,UAAAC,KACG,OAAC,QAAI,KAEL,OAACY,EAAA,CAAY,QAAShB,EAA8B,KAAK,YAAY,gBAErE,KAEJ,OAACgB,EAAA,CACG,QAAS,IAAM,CACXb,GACIF,EAA4BE,EAAyBE,CAAS,CACtE,EACA,KAAK,UACR,kBAED,GACJ,EACA,KAGR,mBAAC,OAAI,UAAU,oBACV,SAAAF,KAA0B,OAACc,EAAA,EAA2B,EAAKN,EAChE,EACJ,CAER",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "DashboardTemplateVariables", "activeDashboardTemplate", "newDashboardLogic", "theDashboardTemplateVariablesLogic", "dashboardTemplateVariablesLogic", "variables", "setVariable", "setVariables", "variable", "index", "LemonLabel", "ActionFilter", "filters", "import_jsx_runtime", "NewDashboardModal", "builtLogic", "newDashboardLogic", "hideNewDashboardModal", "clearActiveDashboardTemplate", "createDashboardFromTemplate", "newDashboardModalVisible", "activeDashboardTemplate", "variableSelectModalVisible", "variables", "dashboardTemplateVariablesLogic", "templatesLogic", "dashboardTemplatesLogic", "templateFilter", "setTemplateFilter", "_dashboardTemplateChooser", "DashboardTemplateChooser", "LemonModal", "pluralize", "LemonInput", "LemonButton", "DashboardTemplateVariables"]
}
