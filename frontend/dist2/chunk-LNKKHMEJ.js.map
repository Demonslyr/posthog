{
  "version": 3,
  "sources": ["../src/scenes/project-homepage/projectHomepageLogic.tsx", "../src/scenes/project-homepage/RecentInsights.tsx"],
  "sourcesContent": ["import { afterMount, connect, kea, path, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { DashboardLogicProps } from 'scenes/dashboard/dashboardLogic'\nimport { projectLogic } from 'scenes/projectLogic'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { getQueryBasedInsightModel } from '~/queries/nodes/InsightViz/utils'\nimport { DashboardPlacement, InsightModel, PersonType, QueryBasedInsightModel } from '~/types'\n\nimport type { projectHomepageLogicType } from './projectHomepageLogicType'\n\nexport const projectHomepageLogic = kea<projectHomepageLogicType>([\n    path(['scenes', 'project-homepage', 'projectHomepageLogic']),\n    connect({\n        values: [teamLogic, ['currentTeam'], projectLogic, ['currentProjectId']],\n    }),\n\n    selectors({\n        primaryDashboardId: [() => [teamLogic.selectors.currentTeam], (currentTeam) => currentTeam?.primary_dashboard],\n        dashboardLogicProps: [\n            (s) => [s.primaryDashboardId],\n            (primaryDashboardId): DashboardLogicProps | null =>\n                primaryDashboardId\n                    ? {\n                          id: primaryDashboardId,\n                          placement: DashboardPlacement.ProjectHomepage,\n                      }\n                    : null,\n        ],\n    }),\n\n    loaders(({ values }) => ({\n        recentInsights: [\n            [] as QueryBasedInsightModel[],\n            {\n                loadRecentInsights: async () => {\n                    const insights = await api.get<InsightModel[]>(\n                        `api/environments/${values.currentProjectId}/insights/my_last_viewed`\n                    )\n                    return insights.map((legacyInsight) => getQueryBasedInsightModel(legacyInsight))\n                },\n            },\n        ],\n        persons: [\n            [] as PersonType[],\n            {\n                loadPersons: async () => {\n                    const response = await api.persons.list()\n                    return response.results\n                },\n            },\n        ],\n    })),\n\n    afterMount(({ actions }) => {\n        actions.loadPersons()\n    }),\n])\n", "import './ProjectHomepage.scss'\n\nimport { useActions, useValues } from 'kea'\nimport { CompactList } from 'lib/components/CompactList/CompactList'\nimport { dayjs } from 'lib/dayjs'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\nimport { useEffect } from 'react'\nimport { InsightIcon } from 'scenes/saved-insights/SavedInsights'\nimport { urls } from 'scenes/urls'\n\nimport { QueryBasedInsightModel } from '~/types'\n\nimport { ProjectHomePageCompactListItem } from './ProjectHomePageCompactListItem'\nimport { projectHomepageLogic } from './projectHomepageLogic'\n\ninterface InsightRowProps {\n    insight: QueryBasedInsightModel\n}\n\nexport function InsightRow({ insight }: InsightRowProps): JSX.Element {\n    const { reportInsightOpenedFromRecentInsightList } = useActions(eventUsageLogic)\n\n    return (\n        <ProjectHomePageCompactListItem\n            title={insight.name || insight.derived_name || 'Insight'}\n            subtitle={`Last modified ${dayjs(insight.last_modified_at).fromNow()}`}\n            prefix={<InsightIcon insight={insight} />}\n            to={urls.insightView(insight.short_id)}\n            onClick={() => {\n                reportInsightOpenedFromRecentInsightList()\n            }}\n        />\n    )\n}\n\nexport function RecentInsights(): JSX.Element {\n    const { recentInsights, recentInsightsLoading } = useValues(projectHomepageLogic)\n    const { loadRecentInsights } = useActions(projectHomepageLogic)\n\n    useEffect(() => {\n        loadRecentInsights()\n    }, [])\n    return (\n        <>\n            <CompactList\n                title=\"Your recently viewed insights\"\n                viewAllURL={urls.savedInsights()}\n                loading={recentInsightsLoading}\n                emptyMessage={{\n                    title: 'You have no recently viewed insights',\n                    description: \"Explore this project's insights by clicking below.\",\n                    buttonText: 'View insights',\n                    buttonTo: urls.savedInsights(),\n                }}\n                items={recentInsights.slice(0, 5)}\n                renderRow={(insight: QueryBasedInsightModel, index) => <InsightRow key={index} insight={insight} />}\n            />\n        </>\n    )\n}\n"],
  "mappings": "yUAAAA,IAAAC,IAAAC,IAAA,IAAAC,EAA0D,OAC1DC,EAAwB,OAWjB,IAAMC,KAAuB,OAA8B,IAC9D,QAAK,CAAC,SAAU,mBAAoB,sBAAsB,CAAC,KAC3D,WAAQ,CACJ,OAAQ,CAACC,EAAW,CAAC,aAAa,EAAGC,EAAc,CAAC,kBAAkB,CAAC,CAC3E,CAAC,KAED,aAAU,CACN,mBAAoB,CAAC,IAAM,CAACD,EAAU,UAAU,WAAW,EAAIE,GAAgBA,GAAa,iBAAiB,EAC7G,oBAAqB,CAChBC,GAAM,CAACA,EAAE,kBAAkB,EAC3BC,GACGA,EACM,CACI,GAAIA,EACJ,4BACJ,EACA,IACd,CACJ,CAAC,KAED,WAAQ,CAAC,CAAE,OAAAC,CAAO,KAAO,CACrB,eAAgB,CACZ,CAAC,EACD,CACI,mBAAoB,UACC,MAAMC,EAAI,IACvB,oBAAoBD,EAAO,gBAAgB,0BAC/C,GACgB,IAAKE,GAAkBC,EAA0BD,CAAa,CAAC,CAEvF,CACJ,EACA,QAAS,CACL,CAAC,EACD,CACI,YAAa,UACQ,MAAMD,EAAI,QAAQ,KAAK,GACxB,OAExB,CACJ,CACJ,EAAE,KAEF,cAAW,CAAC,CAAE,QAAAG,CAAQ,IAAM,CACxBA,EAAQ,YAAY,CACxB,CAAC,CACL,CAAC,EC1DDC,IAAAC,IAAAC,IAEA,IAAAC,EAAsC,OAItC,IAAAC,EAA0B,OAoBN,IAAAC,EAAA,OAPb,SAASC,EAAW,CAAE,QAAAC,CAAQ,EAAiC,CAClE,GAAM,CAAE,yCAAAC,CAAyC,KAAI,cAAWC,CAAe,EAE/E,SACI,OAACC,EAAA,CACG,MAAOH,EAAQ,MAAQA,EAAQ,cAAgB,UAC/C,SAAU,oBAAiB,EAAAI,SAAMJ,EAAQ,gBAAgB,EAAE,QAAQ,CAAC,GACpE,UAAQ,OAACK,EAAA,CAAY,QAASL,EAAS,EACvC,GAAIM,EAAK,YAAYN,EAAQ,QAAQ,EACrC,QAAS,IAAM,CACXC,EAAyC,CAC7C,EACJ,CAER,CAEO,SAASM,IAA8B,CAC1C,GAAM,CAAE,eAAAC,EAAgB,sBAAAC,CAAsB,KAAI,aAAUC,CAAoB,EAC1E,CAAE,mBAAAC,CAAmB,KAAI,cAAWD,CAAoB,EAE9D,sBAAU,IAAM,CACZC,EAAmB,CACvB,EAAG,CAAC,CAAC,KAED,mBACI,mBAACC,EAAA,CACG,MAAM,gCACN,WAAYN,EAAK,cAAc,EAC/B,QAASG,EACT,aAAc,CACV,MAAO,uCACP,YAAa,qDACb,WAAY,gBACZ,SAAUH,EAAK,cAAc,CACjC,EACA,MAAOE,EAAe,MAAM,EAAG,CAAC,EAChC,UAAW,CAACR,EAAiCa,OAAU,OAACd,EAAA,CAAuB,QAASC,GAAhBa,CAAyB,EACrG,EACJ,CAER",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "projectHomepageLogic", "teamLogic", "projectLogic", "currentTeam", "s", "primaryDashboardId", "values", "api_default", "legacyInsight", "getQueryBasedInsightModel", "actions", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "InsightRow", "insight", "reportInsightOpenedFromRecentInsightList", "eventUsageLogic", "ProjectHomePageCompactListItem", "dayjs", "InsightIcon", "urls", "RecentInsights", "recentInsights", "recentInsightsLoading", "projectHomepageLogic", "loadRecentInsights", "CompactList", "index"]
}
