{
  "version": 3,
  "sources": ["../src/scenes/notebooks/NotebookCanvasScene.tsx"],
  "sourcesContent": ["import './NotebookScene.scss'\n\nimport { IconEllipsis } from '@posthog/icons'\nimport { LemonBanner, LemonButton, LemonMenu, lemonToast } from '@posthog/lemon-ui'\nimport { useActions } from 'kea'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { uuid } from 'lib/utils'\nimport { copyToClipboard } from 'lib/utils/copyToClipboard'\nimport { getTextFromFile, selectFiles } from 'lib/utils/file-utils'\nimport { useMemo } from 'react'\nimport { SceneExport } from 'scenes/sceneTypes'\n\nimport { Notebook } from './Notebook/Notebook'\nimport { notebookLogic, NotebookLogicProps } from './Notebook/notebookLogic'\n\nexport const scene: SceneExport = {\n    component: NotebookCanvas,\n}\n\nexport function NotebookCanvas(): JSX.Element {\n    const id = useMemo(() => uuid(), [])\n\n    const logicProps: NotebookLogicProps = {\n        shortId: `canvas-${id}`,\n        mode: 'canvas',\n    }\n\n    const { duplicateNotebook, exportJSON, setLocalContent } = useActions(notebookLogic(logicProps))\n\n    return (\n        <>\n            <PageHeader\n                buttons={\n                    <>\n                        <LemonMenu\n                            items={[\n                                {\n                                    label: 'Clear canvas',\n                                    onClick: () => setLocalContent({ type: 'doc', content: [] }, true),\n                                },\n                                {\n                                    label: 'Export as JSON',\n                                    onClick: () => exportJSON(),\n                                },\n                                {\n                                    label: 'Load from JSON',\n                                    onClick: () => {\n                                        void selectFiles({\n                                            contentType: 'application/json',\n                                            multiple: false,\n                                        })\n                                            .then((files) => getTextFromFile(files[0]))\n                                            .then((text) => {\n                                                const data = JSON.parse(text)\n                                                if (data.type !== 'doc') {\n                                                    throw new Error('Not a notebook')\n                                                }\n                                                // Looks like a notebook\n                                                setLocalContent(data, true)\n                                            })\n                                            .catch((e) => {\n                                                lemonToast.error(e.message)\n                                            })\n                                    },\n                                },\n                            ]}\n                        >\n                            <LemonButton icon={<IconEllipsis />} size=\"small\" />\n                        </LemonMenu>\n                        <LemonButton\n                            type=\"secondary\"\n                            onClick={() => {\n                                void copyToClipboard(window.location.href, 'Canvas URL')\n                            }}\n                        >\n                            Share\n                        </LemonButton>\n                        <LemonButton type=\"primary\" onClick={duplicateNotebook}>\n                            Save as Notebook\n                        </LemonButton>\n                    </>\n                }\n            />\n            <div className=\"flex flex-col flex-1\">\n                <div className=\"relative flex-1\">\n                    <div className=\"absolute inset-0 flex flex-col p-3 overflow-y-auto\">\n                        <LemonBanner type=\"info\" className=\"mb-4\">\n                            <b>This is a canvas.</b> You can change anything you like and it is persisted to the URL for\n                            easy sharing.\n                        </LemonBanner>\n                        <Notebook {...logicProps} />\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n"],
  "mappings": "ynGAAAA,IAAAC,IAAAC,IAIA,IAAAC,EAA2B,OAK3B,IAAAC,EAAwB,OAwBJ,IAAAC,EAAA,OAlBPC,EAAqB,CAC9B,UAAWC,CACf,EAEO,SAASA,GAA8B,CAG1C,IAAMC,EAAiC,CACnC,QAAS,aAHF,WAAQ,IAAMC,EAAK,EAAG,CAAC,CAAC,CAGV,GACrB,KAAM,QACV,EAEM,CAAE,kBAAAC,EAAmB,WAAAC,EAAY,gBAAAC,CAAgB,KAAI,cAAWC,EAAcL,CAAU,CAAC,EAE/F,SACI,oBACI,oBAACM,EAAA,CACG,WACI,oBACI,oBAACC,EAAA,CACG,MAAO,CACH,CACI,MAAO,eACP,QAAS,IAAMH,EAAgB,CAAE,KAAM,MAAO,QAAS,CAAC,CAAE,EAAG,EAAI,CACrE,EACA,CACI,MAAO,iBACP,QAAS,IAAMD,EAAW,CAC9B,EACA,CACI,MAAO,iBACP,QAAS,IAAM,CACNK,EAAY,CACb,YAAa,mBACb,SAAU,EACd,CAAC,EACI,KAAMC,GAAUC,EAAgBD,EAAM,CAAC,CAAC,CAAC,EACzC,KAAME,GAAS,CACZ,IAAMC,EAAO,KAAK,MAAMD,CAAI,EAC5B,GAAIC,EAAK,OAAS,MACd,MAAM,IAAI,MAAM,gBAAgB,EAGpCR,EAAgBQ,EAAM,EAAI,CAC9B,CAAC,EACA,MAAO,GAAM,CACVC,EAAW,MAAM,EAAE,OAAO,CAC9B,CAAC,CACT,CACJ,CACJ,EAEA,mBAACC,EAAA,CAAY,QAAM,OAACC,EAAA,EAAa,EAAI,KAAK,QAAQ,EACtD,KACA,OAACD,EAAA,CACG,KAAK,YACL,QAAS,IAAM,CACNE,EAAgB,OAAO,SAAS,KAAM,YAAY,CAC3D,EACH,iBAED,KACA,OAACF,EAAA,CAAY,KAAK,UAAU,QAASZ,EAAmB,4BAExD,GACJ,EAER,KACA,OAAC,OAAI,UAAU,uBACX,mBAAC,OAAI,UAAU,kBACX,oBAAC,OAAI,UAAU,qDACX,qBAACe,EAAA,CAAY,KAAK,OAAO,UAAU,OAC/B,oBAAC,KAAE,6BAAiB,EAAI,sFAE5B,KACA,OAACC,EAAA,CAAU,GAAGlB,EAAY,GAC9B,EACJ,EACJ,GACJ,CAER",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "scene", "NotebookCanvas", "logicProps", "uuid", "duplicateNotebook", "exportJSON", "setLocalContent", "notebookLogic", "PageHeader", "LemonMenu", "selectFiles", "files", "getTextFromFile", "text", "data", "lemonToast", "LemonButton", "IconEllipsis", "copyToClipboard", "LemonBanner", "Notebook"]
}
