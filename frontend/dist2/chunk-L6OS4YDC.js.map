{
  "version": 3,
  "sources": ["../src/scenes/dashboard/DeleteDashboardModal.tsx", "../src/scenes/dashboard/DuplicateDashboardModal.tsx", "../src/scenes/dashboard/DashboardHeader.tsx", "../src/lib/components/Cards/TextCard/TextCardModal.tsx", "../src/lib/components/Cards/TextCard/textCardModalLogic.ts", "../src/lib/components/FullScreen.tsx", "../src/lib/components/Subscriptions/SubscriptionsModal.tsx", "../src/lib/components/Subscriptions/utils.tsx", "../src/lib/components/Subscriptions/views/EditSubscription.tsx", "../src/lib/components/Subscriptions/subscriptionLogic.ts", "../src/lib/components/Subscriptions/subscriptionsLogic.ts", "../src/lib/components/Subscriptions/views/ManageSubscriptions.tsx", "../src/scenes/dashboard/addInsightToDashboardModalLogic.ts", "../src/scenes/dashboard/DashboardTemplateEditor.tsx", "../src/scenes/dashboard/dashboardTemplateEditorLogic.ts"],
  "sourcesContent": ["import { useActions, useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonCheckbox } from 'lib/lemon-ui/LemonCheckbox'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { LemonModal } from 'lib/lemon-ui/LemonModal'\nimport { deleteDashboardLogic } from 'scenes/dashboard/deleteDashboardLogic'\n\nexport function DeleteDashboardModal(): JSX.Element {\n    const { hideDeleteDashboardModal } = useActions(deleteDashboardLogic)\n    const { isDeleteDashboardSubmitting, deleteDashboardModalVisible } = useValues(deleteDashboardLogic)\n\n    return (\n        <LemonModal\n            title=\"Delete dashboard\"\n            onClose={hideDeleteDashboardModal}\n            isOpen={deleteDashboardModalVisible}\n            footer={\n                <>\n                    <LemonButton\n                        form=\"delete-dashboard-form\"\n                        type=\"secondary\"\n                        data-attr=\"dashboard-delete\"\n                        disabled={isDeleteDashboardSubmitting}\n                        onClick={hideDeleteDashboardModal}\n                    >\n                        Cancel\n                    </LemonButton>\n                    <LemonButton\n                        form=\"delete-dashboard-form\"\n                        htmlType=\"submit\"\n                        type=\"secondary\"\n                        status=\"danger\"\n                        data-attr=\"dashboard-delete-submit\"\n                        loading={isDeleteDashboardSubmitting}\n                        disabled={isDeleteDashboardSubmitting}\n                    >\n                        Delete dashboard\n                    </LemonButton>\n                </>\n            }\n        >\n            <Form\n                logic={deleteDashboardLogic}\n                formKey=\"deleteDashboard\"\n                id=\"delete-dashboard-form\"\n                enableFormOnSubmit\n                className=\"space-y-2\"\n            >\n                <LemonField\n                    name=\"deleteInsights\"\n                    help=\"This will only delete insights if they're not on any other dashboards.\"\n                >\n                    {({ value, onChange }) => (\n                        <LemonCheckbox\n                            data-attr=\"delete-dashboard-insights-checkbox\"\n                            checked={value}\n                            label=\"Delete this dashboard's insights\"\n                            onChange={onChange}\n                        />\n                    )}\n                </LemonField>\n            </Form>\n        </LemonModal>\n    )\n}\n", "import { useActions, useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonCheckbox } from 'lib/lemon-ui/LemonCheckbox'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { LemonModal } from 'lib/lemon-ui/LemonModal'\nimport { duplicateDashboardLogic } from 'scenes/dashboard/duplicateDashboardLogic'\n\nexport function DuplicateDashboardModal(): JSX.Element {\n    const { hideDuplicateDashboardModal, duplicateAndGoToDashboard } = useActions(duplicateDashboardLogic)\n    const { isDuplicateDashboardSubmitting, duplicateDashboardModalVisible } = useValues(duplicateDashboardLogic)\n\n    return (\n        <LemonModal\n            title=\"Duplicate dashboard\"\n            onClose={hideDuplicateDashboardModal}\n            isOpen={duplicateDashboardModalVisible}\n            footer={\n                <>\n                    <LemonButton\n                        form=\"new-dashboard-form\"\n                        type=\"secondary\"\n                        data-attr=\"dashboard-cancel\"\n                        disabled={isDuplicateDashboardSubmitting}\n                        onClick={hideDuplicateDashboardModal}\n                    >\n                        Cancel\n                    </LemonButton>\n                    <LemonButton\n                        form=\"new-dashboard-form\"\n                        type=\"secondary\"\n                        data-attr=\"dashboard-submit-and-go\"\n                        disabled={isDuplicateDashboardSubmitting}\n                        onClick={duplicateAndGoToDashboard}\n                    >\n                        Duplicate and go to dashboard\n                    </LemonButton>\n                    <LemonButton\n                        form=\"duplicate-dashboard-form\"\n                        htmlType=\"submit\"\n                        type=\"primary\"\n                        data-attr=\"duplicate-dashboard-submit\"\n                        loading={isDuplicateDashboardSubmitting}\n                        disabled={isDuplicateDashboardSubmitting}\n                    >\n                        Duplicate\n                    </LemonButton>\n                </>\n            }\n        >\n            <Form\n                logic={duplicateDashboardLogic}\n                formKey=\"duplicateDashboard\"\n                id=\"duplicate-dashboard-form\"\n                enableFormOnSubmit\n                className=\"space-y-2\"\n            >\n                <LemonField\n                    name=\"duplicateTiles\"\n                    help=\"Choose whether to duplicate this dashboard's insights and text or attach them to the new dashboard.\"\n                >\n                    {({ value, onChange }) => (\n                        <LemonCheckbox checked={value} label=\"Duplicate this dashboard's tiles\" onChange={onChange} />\n                    )}\n                </LemonField>\n            </Form>\n        </LemonModal>\n    )\n}\n", "import { useActions, useValues } from 'kea'\nimport { router } from 'kea-router'\nimport { AccessControlledLemonButton } from 'lib/components/AccessControlledLemonButton'\nimport { TextCardModal } from 'lib/components/Cards/TextCard/TextCardModal'\nimport { EditableField } from 'lib/components/EditableField/EditableField'\nimport { ExportButton, ExportButtonItem } from 'lib/components/ExportButton/ExportButton'\nimport { FullScreen } from 'lib/components/FullScreen'\nimport { ObjectTags } from 'lib/components/ObjectTags/ObjectTags'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { SharingModal } from 'lib/components/Sharing/SharingModal'\nimport { SubscribeButton, SubscriptionsModal } from 'lib/components/Subscriptions/SubscriptionsModal'\nimport { privilegeLevelToName } from 'lib/constants'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonDivider } from 'lib/lemon-ui/LemonDivider'\nimport { isLemonSelectSection } from 'lib/lemon-ui/LemonSelect'\nimport { ProfileBubbles } from 'lib/lemon-ui/ProfilePicture/ProfileBubbles'\nimport { humanFriendlyDetailedTime, slugify } from 'lib/utils'\nimport { DashboardEventSource } from 'lib/utils/eventUsageLogic'\nimport { deleteDashboardLogic } from 'scenes/dashboard/deleteDashboardLogic'\nimport { DeleteDashboardModal } from 'scenes/dashboard/DeleteDashboardModal'\nimport { duplicateDashboardLogic } from 'scenes/dashboard/duplicateDashboardLogic'\nimport { DuplicateDashboardModal } from 'scenes/dashboard/DuplicateDashboardModal'\nimport { urls } from 'scenes/urls'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { dashboardsModel } from '~/models/dashboardsModel'\nimport { notebooksModel } from '~/models/notebooksModel'\nimport { tagsModel } from '~/models/tagsModel'\nimport {\n    AccessControlResourceType,\n    DashboardMode,\n    DashboardType,\n    ExporterFormat,\n    QueryBasedInsightModel,\n} from '~/types'\n\nimport { addInsightToDashboardLogic } from './addInsightToDashboardModalLogic'\nimport { DASHBOARD_RESTRICTION_OPTIONS } from './DashboardCollaborators'\nimport { dashboardCollaboratorsLogic } from './dashboardCollaboratorsLogic'\nimport { dashboardLogic } from './dashboardLogic'\nimport { DashboardTemplateEditor } from './DashboardTemplateEditor'\nimport { dashboardTemplateEditorLogic } from './dashboardTemplateEditorLogic'\n\nexport const DASHBOARD_CANNOT_EDIT_MESSAGE =\n    \"You don't have edit permissions for this dashboard. Ask a dashboard collaborator with edit access to add you.\"\n\nexport function DashboardHeader(): JSX.Element | null {\n    const {\n        dashboard,\n        dashboardLoading,\n        dashboardMode,\n        canEditDashboard,\n        showSubscriptions,\n        subscriptionId,\n        apiUrl,\n        showTextTileModal,\n        textTileId,\n    } = useValues(dashboardLogic)\n    const { setDashboardMode, triggerDashboardUpdate } = useActions(dashboardLogic)\n    const { asDashboardTemplate } = useValues(dashboardLogic)\n    const { updateDashboard, pinDashboard, unpinDashboard } = useActions(dashboardsModel)\n    const { createNotebookFromDashboard } = useActions(notebooksModel)\n    const { showAddInsightToDashboardModal } = useActions(addInsightToDashboardLogic)\n    const { setDashboardTemplate, openDashboardTemplateEditor } = useActions(dashboardTemplateEditorLogic)\n\n    const { user } = useValues(userLogic)\n\n    const { showDuplicateDashboardModal } = useActions(duplicateDashboardLogic)\n    const { showDeleteDashboardModal } = useActions(deleteDashboardLogic)\n\n    const { tags } = useValues(tagsModel)\n\n    const { push } = useActions(router)\n\n    const exportOptions: ExportButtonItem[] = [\n        {\n            export_format: ExporterFormat.PNG,\n            dashboard: dashboard?.id,\n            export_context: {\n                path: apiUrl(),\n            },\n        },\n    ]\n    if (user?.is_staff) {\n        exportOptions.push({\n            export_format: ExporterFormat.JSON,\n            export_context: {\n                localData: JSON.stringify(asDashboardTemplate),\n                filename: `dashboard-${slugify(dashboard?.name || 'nameless dashboard')}.json`,\n                mediaType: ExporterFormat.JSON,\n            },\n        })\n    }\n\n    return dashboard || dashboardLoading ? (\n        <>\n            {dashboardMode === DashboardMode.Fullscreen && (\n                <FullScreen onExit={() => setDashboardMode(null, DashboardEventSource.Browser)} />\n            )}\n            {dashboard && (\n                <>\n                    <SubscriptionsModal\n                        isOpen={showSubscriptions}\n                        closeModal={() => push(urls.dashboard(dashboard.id))}\n                        dashboardId={dashboard.id}\n                        subscriptionId={subscriptionId}\n                    />\n                    <SharingModal\n                        title=\"Dashboard permissions & sharing\"\n                        isOpen={dashboardMode === DashboardMode.Sharing}\n                        closeModal={() => push(urls.dashboard(dashboard.id))}\n                        dashboardId={dashboard.id}\n                    />\n                    {canEditDashboard && (\n                        <TextCardModal\n                            isOpen={showTextTileModal}\n                            onClose={() => push(urls.dashboard(dashboard.id))}\n                            dashboard={dashboard}\n                            textTileId={textTileId}\n                        />\n                    )}\n                    {canEditDashboard && <DeleteDashboardModal />}\n                    {canEditDashboard && <DuplicateDashboardModal />}\n                </>\n            )}\n\n            <PageHeader\n                buttons={\n                    dashboardMode === DashboardMode.Edit ? (\n                        <>\n                            <LemonButton\n                                data-attr=\"dashboard-edit-mode-discard\"\n                                type=\"secondary\"\n                                onClick={() =>\n                                    setDashboardMode(null, DashboardEventSource.DashboardHeaderDiscardChanges)\n                                }\n                                tabIndex={9}\n                            >\n                                Cancel\n                            </LemonButton>\n                            <LemonButton\n                                data-attr=\"dashboard-edit-mode-save\"\n                                type=\"primary\"\n                                onClick={() =>\n                                    setDashboardMode(null, DashboardEventSource.DashboardHeaderSaveDashboard)\n                                }\n                                tabIndex={10}\n                                disabledReason={\n                                    dashboardLoading\n                                        ? 'Wait for dashboard to finish loading'\n                                        : canEditDashboard\n                                        ? undefined\n                                        : 'Not privileged to edit this dashboard'\n                                }\n                            >\n                                Save\n                            </LemonButton>\n                        </>\n                    ) : dashboardMode === DashboardMode.Fullscreen ? (\n                        <LemonButton\n                            type=\"secondary\"\n                            onClick={() => setDashboardMode(null, DashboardEventSource.DashboardHeaderExitFullscreen)}\n                            data-attr=\"dashboard-exit-presentation-mode\"\n                            disabled={dashboardLoading}\n                        >\n                            Exit full screen\n                        </LemonButton>\n                    ) : (\n                        <>\n                            <More\n                                data-attr=\"dashboard-three-dots-options-menu\"\n                                overlay={\n                                    dashboard ? (\n                                        <>\n                                            {dashboard.created_by && (\n                                                <>\n                                                    <div className=\"flex p-2 text-secondary\">\n                                                        Created by{' '}\n                                                        {dashboard.created_by.first_name ||\n                                                            dashboard.created_by.email ||\n                                                            '-'}{' '}\n                                                        on {humanFriendlyDetailedTime(dashboard.created_at)}\n                                                    </div>\n                                                    <LemonDivider />\n                                                </>\n                                            )}\n                                            {canEditDashboard && (\n                                                <LemonButton\n                                                    onClick={() =>\n                                                        setDashboardMode(\n                                                            DashboardMode.Edit,\n                                                            DashboardEventSource.MoreDropdown\n                                                        )\n                                                    }\n                                                    fullWidth\n                                                >\n                                                    Edit layout (E)\n                                                </LemonButton>\n                                            )}\n                                            <LemonButton\n                                                onClick={() =>\n                                                    setDashboardMode(\n                                                        DashboardMode.Fullscreen,\n                                                        DashboardEventSource.MoreDropdown\n                                                    )\n                                                }\n                                                fullWidth\n                                            >\n                                                Go full screen (F)\n                                            </LemonButton>\n                                            {canEditDashboard &&\n                                                (dashboard.pinned ? (\n                                                    <LemonButton\n                                                        onClick={() =>\n                                                            unpinDashboard(\n                                                                dashboard.id,\n                                                                DashboardEventSource.MoreDropdown\n                                                            )\n                                                        }\n                                                        fullWidth\n                                                    >\n                                                        Unpin dashboard\n                                                    </LemonButton>\n                                                ) : (\n                                                    <LemonButton\n                                                        onClick={() =>\n                                                            pinDashboard(\n                                                                dashboard.id,\n                                                                DashboardEventSource.MoreDropdown\n                                                            )\n                                                        }\n                                                        fullWidth\n                                                    >\n                                                        Pin dashboard\n                                                    </LemonButton>\n                                                ))}\n                                            <SubscribeButton dashboardId={dashboard.id} />\n                                            <ExportButton fullWidth items={exportOptions} />\n                                            {user?.is_staff && (\n                                                <LemonButton\n                                                    onClick={() => {\n                                                        if (asDashboardTemplate) {\n                                                            setDashboardTemplate(asDashboardTemplate)\n                                                            openDashboardTemplateEditor()\n                                                        }\n                                                    }}\n                                                    fullWidth\n                                                >\n                                                    Save as template\n                                                </LemonButton>\n                                            )}\n                                            <LemonDivider />\n                                            <LemonButton\n                                                onClick={() => {\n                                                    showDuplicateDashboardModal(dashboard.id, dashboard.name)\n                                                }}\n                                                fullWidth\n                                            >\n                                                Duplicate dashboard\n                                            </LemonButton>\n                                            <LemonButton\n                                                onClick={() => createNotebookFromDashboard(dashboard)}\n                                                fullWidth\n                                            >\n                                                Create notebook from dashboard\n                                            </LemonButton>\n\n                                            {canEditDashboard && (\n                                                <AccessControlledLemonButton\n                                                    userAccessLevel={dashboard.user_access_level}\n                                                    minAccessLevel=\"editor\"\n                                                    resourceType={AccessControlResourceType.Dashboard}\n                                                    onClick={() => {\n                                                        showDeleteDashboardModal(dashboard.id)\n                                                    }}\n                                                    status=\"danger\"\n                                                    fullWidth\n                                                >\n                                                    Delete dashboard\n                                                </AccessControlledLemonButton>\n                                            )}\n                                        </>\n                                    ) : undefined\n                                }\n                            />\n                            <LemonDivider vertical />\n                            {dashboard && (\n                                <>\n                                    {dashboard.access_control_version === 'v1' && (\n                                        <CollaboratorBubbles\n                                            dashboard={dashboard}\n                                            onClick={() => push(urls.dashboardSharing(dashboard.id))}\n                                        />\n                                    )}\n                                    <LemonButton\n                                        type=\"secondary\"\n                                        data-attr=\"dashboard-share-button\"\n                                        onClick={() => push(urls.dashboardSharing(dashboard.id))}\n                                    >\n                                        Share\n                                    </LemonButton>\n                                </>\n                            )}\n                            {dashboard ? (\n                                <AccessControlledLemonButton\n                                    userAccessLevel={dashboard.user_access_level}\n                                    minAccessLevel=\"editor\"\n                                    resourceType={AccessControlResourceType.Dashboard}\n                                    onClick={showAddInsightToDashboardModal}\n                                    type=\"primary\"\n                                    data-attr=\"dashboard-add-graph-header\"\n                                    sideAction={{\n                                        dropdown: {\n                                            placement: 'bottom-end',\n                                            overlay: (\n                                                <>\n                                                    <AccessControlledLemonButton\n                                                        userAccessLevel={dashboard.user_access_level}\n                                                        minAccessLevel=\"editor\"\n                                                        resourceType={AccessControlResourceType.Dashboard}\n                                                        fullWidth\n                                                        onClick={() => {\n                                                            push(urls.dashboardTextTile(dashboard.id, 'new'))\n                                                        }}\n                                                        data-attr=\"add-text-tile-to-dashboard\"\n                                                    >\n                                                        Add text card\n                                                    </AccessControlledLemonButton>\n                                                </>\n                                            ),\n                                        },\n                                        disabled: false,\n                                        'data-attr': 'dashboard-add-dropdown',\n                                    }}\n                                >\n                                    Add insight\n                                </AccessControlledLemonButton>\n                            ) : null}\n                        </>\n                    )\n                }\n                caption={\n                    <>\n                        {dashboard && !!(canEditDashboard || dashboard.description) && (\n                            <EditableField\n                                multiline\n                                name=\"description\"\n                                markdown\n                                value={dashboard.description}\n                                placeholder=\"Description (optional)\"\n                                onSave={(value) =>\n                                    updateDashboard({ id: dashboard.id, description: value, allowUndo: true })\n                                }\n                                saveOnBlur={true}\n                                compactButtons\n                                mode={!canEditDashboard ? 'view' : undefined}\n                            />\n                        )}\n                        {dashboard?.tags && (\n                            <>\n                                {canEditDashboard ? (\n                                    <ObjectTags\n                                        tags={dashboard.tags}\n                                        onChange={(tags) => triggerDashboardUpdate({ tags })}\n                                        saving={dashboardLoading}\n                                        tagsAvailable={tags.filter((tag) => !dashboard.tags?.includes(tag))}\n                                        className=\"mt-2\"\n                                    />\n                                ) : dashboard.tags.length ? (\n                                    <ObjectTags\n                                        tags={dashboard.tags}\n                                        saving={dashboardLoading}\n                                        staticOnly\n                                        className=\"mt-2\"\n                                    />\n                                ) : null}\n                            </>\n                        )}\n                    </>\n                }\n                delimited\n            />\n            <DashboardTemplateEditor />\n        </>\n    ) : null\n}\n\nfunction CollaboratorBubbles({\n    dashboard,\n    onClick,\n}: {\n    dashboard: DashboardType<QueryBasedInsightModel>\n    onClick: () => void\n}): JSX.Element | null {\n    const { allCollaborators } = useValues(dashboardCollaboratorsLogic({ dashboardId: dashboard.id }))\n\n    if (!dashboard) {\n        return null\n    }\n\n    const effectiveRestrictionLevelOption = DASHBOARD_RESTRICTION_OPTIONS[dashboard.effective_restriction_level]\n    const tooltipParts: string[] = []\n    if (\n        isLemonSelectSection(effectiveRestrictionLevelOption) &&\n        typeof effectiveRestrictionLevelOption?.title === 'string'\n    ) {\n        tooltipParts.push(effectiveRestrictionLevelOption.title)\n    }\n    if (dashboard.is_shared) {\n        tooltipParts.push('Shared publicly')\n    }\n\n    return (\n        <ProfileBubbles\n            people={allCollaborators.map((collaborator) => ({\n                email: collaborator.user.email,\n                name: collaborator.user.first_name,\n                title: `${collaborator.user.first_name} <${collaborator.user.email}> (${\n                    privilegeLevelToName[collaborator.level]\n                })`,\n            }))}\n            tooltip={tooltipParts.join(' \u2022 ')}\n            onClick={onClick}\n        />\n    )\n}\n", "import { useActions, useValues } from 'kea'\nimport { Field, Form } from 'kea-forms'\nimport { textCardModalLogic } from 'lib/components/Cards/TextCard/textCardModalLogic'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonModal } from 'lib/lemon-ui/LemonModal'\nimport { LemonTextAreaMarkdown } from 'lib/lemon-ui/LemonTextArea'\n\nimport { DashboardType, QueryBasedInsightModel } from '~/types'\n\nexport function TextCardModal({\n    isOpen,\n    onClose,\n    dashboard,\n    textTileId,\n}: {\n    isOpen: boolean\n    onClose: () => void\n    dashboard: DashboardType<QueryBasedInsightModel>\n    textTileId: number | 'new' | null\n}): JSX.Element {\n    const modalLogic = textCardModalLogic({ dashboard, textTileId: textTileId ?? 'new', onClose })\n    const { isTextTileSubmitting, textTileValidationErrors } = useValues(modalLogic)\n    const { submitTextTile, resetTextTile } = useActions(modalLogic)\n\n    const handleClose = (): void => {\n        resetTextTile()\n        onClose()\n    }\n\n    return (\n        <LemonModal\n            closable={true}\n            isOpen={isOpen}\n            title=\"\"\n            onClose={handleClose}\n            footer={\n                <>\n                    <LemonButton\n                        disabledReason={isTextTileSubmitting ? 'Cannot cancel card creation in progress' : null}\n                        type=\"secondary\"\n                        onClick={handleClose}\n                    >\n                        Cancel\n                    </LemonButton>\n                    <LemonButton\n                        disabledReason={textTileValidationErrors.body as string | null}\n                        loading={isTextTileSubmitting}\n                        form=\"text-tile-form\"\n                        htmlType=\"submit\"\n                        type=\"primary\"\n                        onClick={submitTextTile}\n                        data-attr={textTileId === 'new' ? 'save-new-text-tile' : 'edit-text-tile-text'}\n                    >\n                        Save\n                    </LemonButton>\n                </>\n            }\n        >\n            <Form\n                logic={textCardModalLogic}\n                props={{ dashboard, textTileId }}\n                formKey=\"textTile\"\n                id=\"text-tile-form\"\n                className=\"\"\n                enableFormOnSubmit\n            >\n                <Field name=\"body\" label=\"\">\n                    <LemonTextAreaMarkdown data-attr=\"text-card-edit-area\" />\n                </Field>\n            </Form>\n        </LemonModal>\n    )\n}\n", "import { lemonToast } from '@posthog/lemon-ui'\nimport { connect, kea, key, listeners, path, props } from 'kea'\nimport { forms } from 'kea-forms'\n\nimport { dashboardsModel } from '~/models/dashboardsModel'\nimport { DashboardTile, DashboardType, QueryBasedInsightModel } from '~/types'\n\nimport type { textCardModalLogicType } from './textCardModalLogicType'\n\nexport interface TextTileForm {\n    body: string\n}\n\nexport interface TextCardModalProps {\n    dashboard: DashboardType<QueryBasedInsightModel>\n    textTileId: number | 'new'\n    onClose: () => void\n}\n\nconst getTileBody = (dashboard: DashboardType<QueryBasedInsightModel>, textTileId: number): string => {\n    const dashboardTiles = dashboard.tiles\n    const matchedTile = dashboardTiles?.find((tt) => tt.id === textTileId)\n    return matchedTile?.text?.body || ''\n}\n\nexport const textCardModalLogic = kea<textCardModalLogicType>([\n    path(['scenes', 'dashboard', 'dashboardTextTileModal', 'logic']),\n    props({} as TextCardModalProps),\n    key((props) => `textCardModalLogic-${props.dashboard.id}-${props.textTileId}`),\n    connect({ actions: [dashboardsModel, ['updateDashboard']] }),\n    listeners(({ props, actions }) => ({\n        submitTextTileFailure: (error) => {\n            if (props.dashboard && props.textTileId) {\n                lemonToast.error(`Could not save text: ${error.error} (${JSON.stringify(error.errors)})`)\n            }\n            actions.resetTextTile()\n            props?.onClose?.()\n        },\n        submitTextTileSuccess: () => {\n            actions.resetTextTile()\n            props?.onClose?.()\n        },\n    })),\n    forms(({ props, actions }) => ({\n        textTile: {\n            defaults: {\n                body:\n                    props.textTileId && props.textTileId !== 'new'\n                        ? getTileBody(props.dashboard, props.textTileId)\n                        : '',\n            } as TextTileForm,\n            errors: ({ body }) => {\n                return {\n                    body: !body ? 'This card would be empty! Type something first' : null,\n                }\n            },\n            submit: (formValues) => {\n                // only id and body, layout and color could be out-of-date\n                const textTiles = (props.dashboard.tiles || []).map((t) => ({ id: t.id, text: t.text }))\n\n                if (props.textTileId === 'new') {\n                    actions.updateDashboard({ id: props.dashboard.id, tiles: [{ text: formValues }] })\n                } else {\n                    const updatedTiles = [...textTiles].reduce((acc, tile) => {\n                        if (tile.id === props.textTileId && tile.text) {\n                            tile.text.body = formValues.body\n                            acc.push(tile)\n                        }\n                        return acc\n                    }, [] as Partial<DashboardTile>[])\n                    actions.updateDashboard({ id: props.dashboard.id, tiles: updatedTiles })\n                }\n            },\n        },\n    })),\n])\n", "import { useEffect } from 'react'\n\nexport function FullScreen({ onExit }: { onExit?: () => any }): null {\n    const selector = '.layout-top-content'\n    useEffect(() => {\n        const myClasses = window.document.querySelectorAll<HTMLElement>(selector)\n\n        for (let i = 0; i < myClasses.length; i++) {\n            myClasses[i].style.display = 'none'\n        }\n\n        const handler = (): void => {\n            if (window.document.fullscreenElement === null) {\n                onExit?.()\n            }\n        }\n\n        try {\n            void document.body.requestFullscreen().then(() => {\n                window.addEventListener('fullscreenchange', handler, false)\n            })\n        } catch {\n            // will break on IE11\n        }\n\n        try {\n            window.dispatchEvent(new window.Event('scroll'))\n            window.dispatchEvent(new window.Event('resize'))\n        } catch {\n            // will break on IE11\n        }\n\n        return () => {\n            const elements = window.document.querySelectorAll<HTMLElement>(selector)\n\n            for (let i = 0; i < elements.length; i++) {\n                elements[i].style.display = 'block'\n            }\n            try {\n                window.removeEventListener('fullscreenchange', handler, false)\n                if (document.fullscreenElement !== null) {\n                    void document.exitFullscreen()\n                }\n            } catch {\n                // will break on IE11\n            }\n\n            try {\n                window.dispatchEvent(new window.Event('scroll'))\n                window.dispatchEvent(new window.Event('resize'))\n            } catch {\n                // will break on IE11\n            }\n        }\n    }, [])\n\n    return null\n}\n", "import { LemonButton, LemonButtonWithDropdown } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { router } from 'kea-router'\nimport { LemonModal } from 'lib/lemon-ui/LemonModal'\nimport { Spinner } from 'lib/lemon-ui/Spinner/Spinner'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { AvailableFeature } from '~/types'\n\nimport { PayGateMini } from '../PayGateMini/PayGateMini'\nimport { SubscriptionBaseProps, urlForSubscription, urlForSubscriptions } from './utils'\nimport { EditSubscription } from './views/EditSubscription'\nimport { ManageSubscriptions } from './views/ManageSubscriptions'\n\nexport interface SubscriptionsModalProps extends SubscriptionBaseProps {\n    isOpen: boolean\n    closeModal: () => void\n    subscriptionId: number | 'new' | null\n    inline?: boolean\n}\n\nexport function SubscriptionsModal(props: SubscriptionsModalProps): JSX.Element {\n    const { closeModal, dashboardId, insightShortId, subscriptionId, isOpen, inline } = props\n    const { push } = useActions(router)\n    const { userLoading } = useValues(userLogic)\n\n    if (userLoading) {\n        return <Spinner className=\"text-2xl\" />\n    }\n    return (\n        <LemonModal onClose={closeModal} isOpen={isOpen} width={600} simple title=\"\" inline={inline}>\n            <PayGateMini\n                feature={AvailableFeature.SUBSCRIPTIONS}\n                background={false}\n                className=\"py-8\"\n                docsLink=\"https://posthog.com/docs/user-guides/subscriptions\"\n            >\n                {!subscriptionId ? (\n                    <ManageSubscriptions\n                        insightShortId={insightShortId}\n                        dashboardId={dashboardId}\n                        onCancel={closeModal}\n                        onSelect={(id) => push(urlForSubscription(id, props))}\n                    />\n                ) : (\n                    <EditSubscription\n                        id={subscriptionId}\n                        insightShortId={insightShortId}\n                        dashboardId={dashboardId}\n                        onCancel={() => push(urlForSubscriptions(props))}\n                        onDelete={() => push(urlForSubscriptions(props))}\n                    />\n                )}\n            </PayGateMini>\n        </LemonModal>\n    )\n}\n\nexport function SubscribeButton(props: SubscriptionBaseProps): JSX.Element {\n    const { push } = useActions(router)\n\n    return (\n        <LemonButtonWithDropdown\n            fullWidth\n            dropdown={{\n                actionable: true,\n                closeParentPopoverOnClickInside: true,\n                placement: 'right-start',\n                overlay: (\n                    <>\n                        <LemonButton onClick={() => push(urlForSubscription('new', props))} fullWidth>\n                            New subscription\n                        </LemonButton>\n                        <LemonButton onClick={() => push(urlForSubscriptions(props))} fullWidth>\n                            Manage subscriptions\n                        </LemonButton>\n                    </>\n                ),\n            }}\n        >\n            Subscribe\n        </LemonButtonWithDropdown>\n    )\n}\n", "import { IconLetter } from '@posthog/icons'\nimport { LemonSelectOptions } from '@posthog/lemon-ui'\nimport { IconSlack } from 'lib/lemon-ui/icons'\nimport { range } from 'lib/utils'\nimport { urls } from 'scenes/urls'\n\nimport { InsightShortId } from '~/types'\n\nexport interface SubscriptionBaseProps {\n    dashboardId?: number\n    insightShortId?: InsightShortId\n}\n\nexport const urlForSubscriptions = ({ dashboardId, insightShortId }: SubscriptionBaseProps): string => {\n    if (insightShortId) {\n        return urls.insightSubcriptions(insightShortId)\n    } else if (dashboardId) {\n        return urls.dashboardSubcriptions(dashboardId)\n    }\n    return ''\n}\n\nexport const urlForSubscription = (\n    id: number | 'new',\n    { dashboardId, insightShortId }: SubscriptionBaseProps\n): string => {\n    if (insightShortId) {\n        return urls.insightSubcription(insightShortId, id.toString())\n    } else if (dashboardId) {\n        return urls.dashboardSubcription(dashboardId, id.toString())\n    }\n    return ''\n}\n\nexport const targetTypeOptions: LemonSelectOptions<'email' | 'slack'> = [\n    { value: 'email', label: 'Email', icon: <IconLetter /> },\n    { value: 'slack', label: 'Slack', icon: <IconSlack /> },\n    // { value: 'webhook', label: 'Webhook', icon: <IconOpenInNew /> },\n]\n\nexport const intervalOptions: LemonSelectOptions<number> = range(1, 13).map((x) => ({ value: x, label: x.toString() }))\n\nexport const frequencyOptionsSingular: LemonSelectOptions<'daily' | 'weekly' | 'monthly'> = [\n    { value: 'daily', label: 'day' },\n    { value: 'weekly', label: 'week' },\n    { value: 'monthly', label: 'month' },\n]\nexport const frequencyOptionsPlural: LemonSelectOptions<'daily' | 'weekly' | 'monthly'> = [\n    { value: 'daily', label: 'days' },\n    { value: 'weekly', label: 'weeks' },\n    { value: 'monthly', label: 'months' },\n]\n\nexport const weekdayOptions: LemonSelectOptions<\n    'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday'\n> = [\n    { value: 'monday', label: 'Monday' },\n    { value: 'tuesday', label: 'Tuesday' },\n    { value: 'wednesday', label: 'Wednesday' },\n    { value: 'thursday', label: 'Thursday' },\n    { value: 'friday', label: 'Friday' },\n    { value: 'saturday', label: 'Saturday' },\n    { value: 'sunday', label: 'Sunday' },\n]\n\nexport const monthlyWeekdayOptions: LemonSelectOptions<\n    'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday' | 'day'\n> = [...weekdayOptions, { value: 'day', label: 'day' }]\n\nexport const bysetposOptions: LemonSelectOptions<'1' | '2' | '3' | '4' | '-1'> = [\n    { value: '1', label: 'first' },\n    { value: '2', label: 'second' },\n    { value: '3', label: 'third' },\n    { value: '4', label: 'fourth' },\n    { value: '-1', label: 'last' },\n]\n\nexport const timeOptions: LemonSelectOptions<string> = range(0, 24).map((x) => ({\n    value: String(x),\n    label: `${String(x).padStart(2, '0')}:00`,\n}))\n", "import { LemonInput, LemonTextArea, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport api from 'lib/api'\nimport { UserActivityIndicator } from 'lib/components/UserActivityIndicator/UserActivityIndicator'\nimport { usersLemonSelectOptions } from 'lib/components/UserSelectItem'\nimport { dayjs } from 'lib/dayjs'\nimport { integrationsLogic } from 'lib/integrations/integrationsLogic'\nimport { SlackChannelPicker } from 'lib/integrations/SlackIntegrationHelpers'\nimport { IconChevronLeft } from 'lib/lemon-ui/icons'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { LemonInputSelect } from 'lib/lemon-ui/LemonInputSelect/LemonInputSelect'\nimport { LemonLabel } from 'lib/lemon-ui/LemonLabel/LemonLabel'\nimport { LemonModal } from 'lib/lemon-ui/LemonModal'\nimport { LemonSelect } from 'lib/lemon-ui/LemonSelect'\nimport { LemonSkeleton } from 'lib/lemon-ui/LemonSkeleton'\nimport { membersLogic } from 'scenes/organization/membersLogic'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\n\nimport { subscriptionLogic } from '../subscriptionLogic'\nimport { subscriptionsLogic } from '../subscriptionsLogic'\nimport {\n    bysetposOptions,\n    frequencyOptionsPlural,\n    frequencyOptionsSingular,\n    intervalOptions,\n    monthlyWeekdayOptions,\n    SubscriptionBaseProps,\n    targetTypeOptions,\n    timeOptions,\n    weekdayOptions,\n} from '../utils'\n\ninterface EditSubscriptionProps extends SubscriptionBaseProps {\n    id: number | 'new'\n    onCancel: () => void\n    onDelete: () => void\n}\n\nexport function EditSubscription({\n    id,\n    insightShortId,\n    dashboardId,\n    onCancel,\n    onDelete,\n}: EditSubscriptionProps): JSX.Element {\n    const logicProps = {\n        id,\n        insightShortId,\n        dashboardId,\n    }\n    const logic = subscriptionLogic(logicProps)\n    const subscriptionslogic = subscriptionsLogic({\n        insightShortId,\n        dashboardId,\n    })\n\n    const { meFirstMembers, membersLoading } = useValues(membersLogic)\n    const { subscription, subscriptionLoading, isSubscriptionSubmitting, subscriptionChanged } = useValues(logic)\n    const { preflight, siteUrlMisconfigured } = useValues(preflightLogic)\n    const { deleteSubscription } = useActions(subscriptionslogic)\n    const { slackIntegrations } = useValues(integrationsLogic)\n    // TODO: Fix this so that we use the appropriate config...\n    const firstSlackIntegration = slackIntegrations?.[0]\n\n    const emailDisabled = !preflight?.email_service_available\n\n    const _onDelete = (): void => {\n        if (id !== 'new') {\n            deleteSubscription(id)\n            onDelete()\n        }\n    }\n\n    const formatter = new Intl.DateTimeFormat('en-US', { timeZoneName: 'shortGeneric' })\n    const parts = formatter.formatToParts(new Date())\n    const currentTimezone = parts?.find((part) => part.type === 'timeZoneName')?.value\n\n    return (\n        <Form\n            logic={subscriptionLogic}\n            props={logicProps}\n            formKey=\"subscription\"\n            enableFormOnSubmit\n            className=\"LemonModal__layout\"\n        >\n            <LemonModal.Header>\n                <div className=\"flex items-center gap-2\">\n                    <LemonButton icon={<IconChevronLeft />} onClick={onCancel} size=\"xsmall\" />\n\n                    <h3>{id === 'new' ? 'New' : 'Edit '} Subscription</h3>\n                </div>\n            </LemonModal.Header>\n\n            <LemonModal.Content className=\"space-y-2\">\n                {!subscription ? (\n                    subscriptionLoading ? (\n                        <div className=\"space-y-4\">\n                            <LemonSkeleton className=\"w-1/2 h-4\" />\n                            <LemonSkeleton.Row />\n                            <LemonSkeleton className=\"w-1/2 h-4\" />\n                            <LemonSkeleton.Row />\n                            <LemonSkeleton className=\"w-1/2 h-4\" />\n                            <LemonSkeleton.Row />\n                        </div>\n                    ) : (\n                        <div className=\"p-4 text-center\">\n                            <h2>Not found</h2>\n                            <p>This subscription could not be found. It may have been deleted.</p>\n                        </div>\n                    )\n                ) : (\n                    <>\n                        {subscription?.created_by ? (\n                            <UserActivityIndicator\n                                at={subscription.created_at}\n                                by={subscription.created_by}\n                                prefix=\"Created\"\n                                className=\"mb-4\"\n                            />\n                        ) : null}\n\n                        {siteUrlMisconfigured && (\n                            <LemonBanner type=\"warning\">\n                                <>\n                                    Your <code>SITE_URL</code> environment variable seems misconfigured. Your{' '}\n                                    <code>SITE_URL</code> is set to{' '}\n                                    <b>\n                                        <code>{preflight?.site_url}</code>\n                                    </b>{' '}\n                                    but you're currently browsing this page from{' '}\n                                    <b>\n                                        <code>{window.location.origin}</code>\n                                    </b>\n                                    . <br />\n                                    If this value is not configured correctly PostHog may be unable to correctly send\n                                    Subscriptions.{' '}\n                                    <Link\n                                        to=\"https://posthog.com/docs/configuring-posthog/environment-variables?utm_medium=in-product&utm_campaign=subcriptions-system-status-site-url-misconfig\"\n                                        target=\"_blank\"\n                                        targetBlankIcon\n                                    >\n                                        Learn more\n                                    </Link>\n                                </>\n                            </LemonBanner>\n                        )}\n\n                        <LemonField name=\"title\" label=\"Name\">\n                            <LemonInput placeholder=\"e.g. Weekly team report\" />\n                        </LemonField>\n\n                        <LemonField name=\"target_type\" label=\"Destination\">\n                            <LemonSelect options={targetTypeOptions} />\n                        </LemonField>\n\n                        {subscription.target_type === 'email' ? (\n                            <>\n                                {emailDisabled && (\n                                    <LemonBanner type=\"error\">\n                                        <>\n                                            Email subscriptions are not currently possible as this PostHog instance\n                                            isn't{' '}\n                                            <Link\n                                                to=\"https://posthog.com/docs/self-host/configure/email\"\n                                                target=\"_blank\"\n                                                targetBlankIcon\n                                            >\n                                                configured&nbsp;to&nbsp;send&nbsp;emails&nbsp;\n                                            </Link>\n                                            .\n                                        </>\n                                    </LemonBanner>\n                                )}\n\n                                <LemonField\n                                    name=\"target_value\"\n                                    label=\"Who do you want to subscribe\"\n                                    help=\"Enter the email addresses of the users you want to share with\"\n                                >\n                                    {({ value, onChange }) => (\n                                        <LemonInputSelect\n                                            onChange={(val) => onChange(val.join(','))}\n                                            value={value?.split(',').filter(Boolean)}\n                                            disabled={emailDisabled}\n                                            mode=\"multiple\"\n                                            allowCustomValues\n                                            data-attr=\"subscribed-emails\"\n                                            options={usersLemonSelectOptions(meFirstMembers.map((x) => x.user))}\n                                            loading={membersLoading}\n                                            placeholder=\"Enter an email address\"\n                                        />\n                                    )}\n                                </LemonField>\n\n                                <LemonField name=\"invite_message\" label=\"Message\" showOptional>\n                                    <LemonTextArea placeholder=\"Your message to new subscribers (optional)\" />\n                                </LemonField>\n                            </>\n                        ) : null}\n\n                        {subscription.target_type === 'slack' ? (\n                            <>\n                                {!firstSlackIntegration ? (\n                                    <>\n                                        <LemonBanner type=\"info\">\n                                            <div className=\"flex justify-between gap-2\">\n                                                <span>\n                                                    Slack is not yet configured for this project. Add PostHog to your\n                                                    Slack workspace to continue.\n                                                </span>\n                                                <Link\n                                                    to={api.integrations.authorizeUrl({\n                                                        kind: 'slack',\n                                                        next: window.location.pathname + '?target_type=slack',\n                                                    })}\n                                                    disableClientSideRouting\n                                                >\n                                                    <img\n                                                        alt=\"Add to Slack\"\n                                                        height=\"40\"\n                                                        width=\"139\"\n                                                        src=\"https://platform.slack-edge.com/img/add_to_slack.png\"\n                                                        srcSet=\"https://platform.slack-edge.com/img/add_to_slack.png 1x, https://platform.slack-edge.com/img/add_to_slack@2x.png 2x\"\n                                                    />\n                                                </Link>\n                                            </div>\n                                        </LemonBanner>\n                                    </>\n                                ) : (\n                                    <>\n                                        <LemonField\n                                            name=\"target_value\"\n                                            label=\"Which Slack channel to send reports to\"\n                                            help={\n                                                <>\n                                                    Private channels are only shown if you have{' '}\n                                                    <Link to=\"https://posthog.com/docs/webhooks/slack\" target=\"_blank\">\n                                                        added the PostHog Slack App\n                                                    </Link>{' '}\n                                                    to them\n                                                </>\n                                            }\n                                        >\n                                            {({ value, onChange }) => (\n                                                <SlackChannelPicker\n                                                    value={value}\n                                                    onChange={onChange}\n                                                    integration={firstSlackIntegration}\n                                                />\n                                            )}\n                                        </LemonField>\n                                    </>\n                                )}\n                            </>\n                        ) : null}\n\n                        {subscription.target_type === 'webhook' ? (\n                            <>\n                                <LemonField name=\"target_value\" label=\"Webhook URL\">\n                                    <LemonInput placeholder=\"https://example.com/webhooks/1234\" />\n                                </LemonField>\n                                <div className=\"text-xs text-secondary mt-2\">\n                                    Webhooks will be called with a HTTP POST request. The webhook endpoint should\n                                    respond with a healthy HTTP code (2xx).\n                                </div>\n                            </>\n                        ) : null}\n\n                        <div>\n                            <div className=\"flex items-baseline justify-between w-full\">\n                                <LemonLabel className=\"mb-2\">Recurrence</LemonLabel>\n                                <div className=\"text-xs text-secondary text-right\">{currentTimezone}</div>\n                            </div>\n                            <div className=\"flex gap-2 items-center rounded border p-2 flex-wrap\">\n                                <span>Send every</span>\n                                <LemonField name=\"interval\">\n                                    <LemonSelect options={intervalOptions} />\n                                </LemonField>\n                                <LemonField name=\"frequency\">\n                                    <LemonSelect\n                                        options={\n                                            subscription.interval === 1\n                                                ? frequencyOptionsSingular\n                                                : frequencyOptionsPlural\n                                        }\n                                    />\n                                </LemonField>\n\n                                {subscription.frequency === 'weekly' && (\n                                    <>\n                                        <span>on</span>\n                                        <LemonField name=\"byweekday\">\n                                            {({ value, onChange }) => (\n                                                <LemonSelect\n                                                    options={weekdayOptions}\n                                                    value={value ? value[0] : null}\n                                                    onChange={(val) => onChange([val])}\n                                                />\n                                            )}\n                                        </LemonField>\n                                    </>\n                                )}\n\n                                {subscription.frequency === 'monthly' && (\n                                    <>\n                                        <span>on the</span>\n                                        <LemonField name=\"bysetpos\">\n                                            {({ value, onChange }) => (\n                                                <LemonSelect\n                                                    options={bysetposOptions}\n                                                    value={value ? String(value) : null}\n                                                    onChange={(val) => {\n                                                        onChange(typeof val === 'string' ? parseInt(val, 10) : null)\n                                                    }}\n                                                />\n                                            )}\n                                        </LemonField>\n                                        <LemonField name=\"byweekday\">\n                                            {({ value, onChange }) => (\n                                                <LemonSelect\n                                                    dropdownMatchSelectWidth={false}\n                                                    options={monthlyWeekdayOptions}\n                                                    // \"day\" is a special case where it is a list of all available days\n                                                    value={value ? (value.length === 1 ? value[0] : 'day') : null}\n                                                    onChange={(val) =>\n                                                        onChange(\n                                                            val === 'day'\n                                                                ? Object.values(weekdayOptions).map((v) => v.value)\n                                                                : [val]\n                                                        )\n                                                    }\n                                                />\n                                            )}\n                                        </LemonField>\n                                    </>\n                                )}\n                                <span>by</span>\n                                <LemonField name=\"start_date\">\n                                    {({ value, onChange }) => (\n                                        <LemonSelect\n                                            options={timeOptions}\n                                            value={dayjs(value).hour().toString()}\n                                            onChange={(val) => {\n                                                onChange(\n                                                    dayjs()\n                                                        .hour(typeof val === 'string' ? parseInt(val, 10) : 0)\n                                                        .minute(0)\n                                                        .second(0)\n                                                        .toISOString()\n                                                )\n                                            }}\n                                        />\n                                    )}\n                                </LemonField>\n                            </div>\n                        </div>\n                    </>\n                )}\n            </LemonModal.Content>\n\n            <LemonModal.Footer>\n                <div className=\"flex-1\">\n                    {subscription && id !== 'new' && (\n                        <LemonButton\n                            type=\"secondary\"\n                            status=\"danger\"\n                            onClick={_onDelete}\n                            disabled={subscriptionLoading}\n                        >\n                            Delete subscription\n                        </LemonButton>\n                    )}\n                </div>\n                <LemonButton type=\"secondary\" onClick={onCancel}>\n                    Cancel\n                </LemonButton>\n                <LemonButton\n                    type=\"primary\"\n                    htmlType=\"submit\"\n                    loading={isSubscriptionSubmitting}\n                    disabled={!subscriptionChanged || subscriptionLoading}\n                >\n                    {id === 'new' ? 'Create subscription' : 'Save'}\n                </LemonButton>\n            </LemonModal.Footer>\n        </Form>\n    )\n}\n", "import { kea, key, listeners, path, props } from 'kea'\nimport { forms } from 'kea-forms'\nimport { loaders } from 'kea-loaders'\nimport { beforeUnload, router, urlToAction } from 'kea-router'\nimport api from 'lib/api'\nimport { dayjs } from 'lib/dayjs'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast/LemonToast'\nimport { isEmail, isURL } from 'lib/utils'\nimport { getInsightId } from 'scenes/insights/utils'\n\nimport { SubscriptionType } from '~/types'\n\nimport type { subscriptionLogicType } from './subscriptionLogicType'\nimport { subscriptionsLogic } from './subscriptionsLogic'\nimport { SubscriptionBaseProps, urlForSubscription } from './utils'\n\nconst NEW_SUBSCRIPTION: Partial<SubscriptionType> = {\n    frequency: 'weekly',\n    interval: 1,\n    start_date: dayjs().hour(9).minute(0).second(0).toISOString(),\n    target_type: 'email',\n    byweekday: ['monday'],\n    bysetpos: 1,\n}\n\nexport interface SubscriptionsLogicProps extends SubscriptionBaseProps {\n    id: number | 'new'\n}\nexport const subscriptionLogic = kea<subscriptionLogicType>([\n    path(['lib', 'components', 'Subscriptions', 'subscriptionLogic']),\n    props({} as SubscriptionsLogicProps),\n    key(({ id, insightShortId, dashboardId }) => `${insightShortId || dashboardId}-${id ?? 'new'}`),\n\n    loaders(({ props }) => ({\n        subscription: {\n            __default: undefined as unknown as SubscriptionType,\n            loadSubscription: async () => {\n                if (props.id && props.id !== 'new') {\n                    return await api.subscriptions.get(props.id)\n                }\n                return { ...NEW_SUBSCRIPTION }\n            },\n        },\n    })),\n\n    forms(({ props, actions }) => ({\n        subscription: {\n            defaults: {} as unknown as SubscriptionType,\n            errors: ({ frequency, interval, target_value, target_type, title, start_date }) => ({\n                frequency: !frequency ? 'You need to set a schedule frequency' : undefined,\n                title: !title ? 'You need to give your subscription a name' : undefined,\n                interval: !interval ? 'You need to set an interval' : undefined,\n                start_date: !start_date ? 'You need to set a delivery time' : undefined,\n                target_type: !['slack', 'email', 'webhook'].includes(target_type)\n                    ? 'Unsupported target type'\n                    : undefined,\n                target_value: !target_value\n                    ? 'This field is required.'\n                    : target_type == 'email'\n                    ? !target_value\n                        ? 'At least one email is required'\n                        : !target_value.split(',').every((email) => isEmail(email))\n                        ? 'All emails must be valid'\n                        : undefined\n                    : target_type == 'slack'\n                    ? !target_value\n                        ? 'A channel is required'\n                        : undefined\n                    : target_type == 'webhook'\n                    ? !isURL(target_value)\n                        ? 'Must be a valid URL'\n                        : undefined\n                    : undefined,\n            }),\n            submit: async (subscription, breakpoint) => {\n                const insightId = props.insightShortId ? await getInsightId(props.insightShortId) : undefined\n\n                const payload = {\n                    ...subscription,\n                    insight: insightId,\n                    dashboard: props.dashboardId,\n                }\n\n                breakpoint()\n\n                const updatedSub: SubscriptionType =\n                    props.id === 'new'\n                        ? await api.subscriptions.create(payload)\n                        : await api.subscriptions.update(props.id, payload)\n\n                actions.resetSubscription()\n\n                if (updatedSub.id !== props.id) {\n                    router.actions.replace(urlForSubscription(updatedSub.id, props))\n                }\n\n                // If a subscriptionsLogic for this insight/dashboard is mounted already, let's make sure\n                // this change is propagated to `subscriptions` there\n                subscriptionsLogic.findMounted(props)?.actions.loadSubscriptions()\n                actions.loadSubscriptionSuccess(updatedSub)\n                lemonToast.success(`Subscription saved.`)\n\n                return updatedSub\n            },\n        },\n    })),\n\n    listeners(({ actions }) => ({\n        setSubscriptionValue: ({ name, value }) => {\n            const key = Array.isArray(name) ? name[0] : name\n            if (key === 'frequency') {\n                if (value === 'daily') {\n                    actions.setSubscriptionValues({\n                        bysetpos: null,\n                        byweekday: null,\n                    })\n                } else {\n                    actions.setSubscriptionValues({\n                        bysetpos: NEW_SUBSCRIPTION.bysetpos,\n                        byweekday: NEW_SUBSCRIPTION.byweekday,\n                    })\n                }\n            }\n\n            if (key === 'target_type') {\n                actions.setSubscriptionValues({\n                    target_value: '',\n                })\n            }\n        },\n    })),\n    beforeUnload(({ actions, values }) => ({\n        enabled: () => values.subscriptionChanged,\n        message: 'Changes you made will be discarded.',\n        onConfirm: () => {\n            actions.resetSubscription()\n        },\n    })),\n\n    urlToAction(({ actions }) => ({\n        '/*/*/subscriptions/new': (_, searchParams) => {\n            actions.loadSubscriptionSuccess({ ...NEW_SUBSCRIPTION })\n            if (searchParams.target_type) {\n                actions.setSubscriptionValue('target_type', searchParams.target_type)\n            }\n        },\n        '/*/*/subscriptions/:id': () => {\n            actions.loadSubscription()\n        },\n    })),\n])\n", "import { actions, afterMount, BreakPointFunction, kea, key, listeners, path, props, reducers } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { deleteWithUndo } from 'lib/utils/deleteWithUndo'\nimport { getInsightId } from 'scenes/insights/utils'\n\nimport { SubscriptionType } from '~/types'\n\nimport type { subscriptionsLogicType } from './subscriptionsLogicType'\nimport { SubscriptionBaseProps } from './utils'\n\nexport const subscriptionsLogic = kea<subscriptionsLogicType>([\n    path(['lib', 'components', 'Subscriptions', 'subscriptionsLogic']),\n    props({} as SubscriptionBaseProps),\n    key(({ insightShortId, dashboardId }) =>\n        insightShortId ? `insight-${insightShortId}` : dashboardId ? `dashboard-${dashboardId}` : 'subscriptions'\n    ),\n    actions({\n        deleteSubscription: (id: number) => ({ id }),\n    }),\n\n    loaders(({ props }) => ({\n        subscriptions: {\n            __default: [] as SubscriptionType[],\n            loadSubscriptions: async (_?: any, breakpoint?: BreakPointFunction) => {\n                if (!props.dashboardId && !props.insightShortId) {\n                    return []\n                }\n\n                breakpoint?.()\n\n                const insightId = props.insightShortId ? await getInsightId(props.insightShortId) : undefined\n                const response = await api.subscriptions.list({\n                    dashboardId: props.dashboardId,\n                    insightId: insightId,\n                })\n                breakpoint?.()\n                return response.results\n            },\n        },\n    })),\n\n    reducers({\n        subscriptions: {\n            deleteSubscription: (state, { id }) => state.filter((a) => a.id !== id),\n        },\n    }),\n\n    listeners(({ actions }) => ({\n        deleteSubscription: async ({ id }) => {\n            await deleteWithUndo({\n                endpoint: api.subscriptions.determineDeleteEndpoint(),\n                object: { name: 'Subscription', id },\n                callback: () => actions.loadSubscriptions(),\n            })\n        },\n    })),\n\n    afterMount(({ actions }) => actions.loadSubscriptions()),\n])\n", "import { IconEllipsis } from '@posthog/icons'\nimport { useActions, useValues } from 'kea'\nimport { IconSlack } from 'lib/lemon-ui/icons'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonModal } from 'lib/lemon-ui/LemonModal'\nimport { LemonSkeleton } from 'lib/lemon-ui/LemonSkeleton'\nimport { ProfileBubbles } from 'lib/lemon-ui/ProfilePicture'\nimport { capitalizeFirstLetter, pluralize } from 'lib/utils'\n\nimport { SubscriptionType } from '~/types'\n\nimport { subscriptionsLogic } from '../subscriptionsLogic'\nimport { SubscriptionBaseProps } from '../utils'\n\ninterface SubscriptionListItemProps {\n    subscription: SubscriptionType\n    onClick: () => void\n    onDelete?: () => void\n}\n\nexport function SubscriptionListItem({ subscription, onClick, onDelete }: SubscriptionListItemProps): JSX.Element {\n    return (\n        <LemonButton\n            type=\"secondary\"\n            onClick={onClick}\n            data-attr=\"subscription-list-item\"\n            fullWidth\n            sideAction={{\n                icon: <IconEllipsis />,\n\n                dropdown: {\n                    overlay: (\n                        <>\n                            {onDelete && (\n                                <LemonButton\n                                    onClick={onDelete}\n                                    data-attr=\"subscription-list-item-delete\"\n                                    status=\"danger\"\n                                    fullWidth\n                                >\n                                    Delete Subscription\n                                </LemonButton>\n                            )}\n                        </>\n                    ),\n                },\n            }}\n        >\n            <div className=\"flex justify-between flex-auto items-center p-2\">\n                <div>\n                    <div className=\"text-link font-medium\">{subscription.title}</div>\n                    <div className=\"text-sm text-text-3000\">{capitalizeFirstLetter(subscription.summary)}</div>\n                </div>\n                {subscription.target_type === 'email' ? (\n                    <ProfileBubbles\n                        limit={4}\n                        people={subscription.target_value.split(',').map((email) => ({ email }))}\n                    />\n                ) : null}\n                {subscription.target_type === 'slack' ? <IconSlack /> : null}\n            </div>\n        </LemonButton>\n    )\n}\n\ninterface ManageSubscriptionsProps extends SubscriptionBaseProps {\n    onCancel: () => void\n    onSelect: (value: number | 'new') => void\n}\n\nexport function ManageSubscriptions({\n    insightShortId,\n    dashboardId,\n    onCancel,\n    onSelect,\n}: ManageSubscriptionsProps): JSX.Element {\n    const logic = subscriptionsLogic({\n        insightShortId,\n        dashboardId,\n    })\n\n    const { subscriptions, subscriptionsLoading } = useValues(logic)\n    const { deleteSubscription } = useActions(logic)\n\n    return (\n        <>\n            <LemonModal.Header>\n                <h3> Manage Subscriptions</h3>\n            </LemonModal.Header>\n            <LemonModal.Content>\n                {subscriptionsLoading && !subscriptions.length ? (\n                    <div className=\"space-y-2\">\n                        <LemonSkeleton className=\"w-1/2 h-4\" />\n                        <LemonSkeleton.Row repeat={2} />\n                    </div>\n                ) : subscriptions.length ? (\n                    <div className=\"space-y-2\">\n                        <div>\n                            <strong>{subscriptions?.length}</strong>\n                            {' active '}\n                            {pluralize(subscriptions.length || 0, 'subscription', 'subscriptions', false)}\n                        </div>\n\n                        {subscriptions.map((sub) => (\n                            <SubscriptionListItem\n                                key={sub.id}\n                                subscription={sub}\n                                onClick={() => onSelect(sub.id)}\n                                onDelete={() => deleteSubscription(sub.id)}\n                            />\n                        ))}\n                    </div>\n                ) : (\n                    <div className=\"flex flex-col p-4 items-center text-center\">\n                        <h3>There are no subscriptions for this insight</h3>\n\n                        <p>Once subscriptions are created they will display here. </p>\n\n                        <LemonButton type=\"primary\" onClick={() => onSelect('new')}>\n                            Add subscription\n                        </LemonButton>\n                    </div>\n                )}\n            </LemonModal.Content>\n\n            <LemonModal.Footer>\n                <div className=\"flex-1\">\n                    {subscriptions.length ? (\n                        <LemonButton type=\"secondary\" onClick={() => onSelect('new')}>\n                            Add subscription\n                        </LemonButton>\n                    ) : null}\n                </div>\n                <LemonButton type=\"secondary\" onClick={onCancel}>\n                    Close\n                </LemonButton>\n            </LemonModal.Footer>\n        </>\n    )\n}\n", "import { actions, kea, path, reducers } from 'kea'\n\nimport type { addInsightToDashboardLogicType } from './addInsightToDashboardModalLogicType'\n\nexport const addInsightToDashboardLogic = kea<addInsightToDashboardLogicType>([\n    path(['scenes', 'dashboard', 'addInsightToDashboardLogic']),\n    actions({\n        showAddInsightToDashboardModal: true,\n        hideAddInsightToDashboardModal: true,\n    }),\n    reducers({\n        addInsightToDashboardModalVisible: [\n            false,\n            {\n                showAddInsightToDashboardModal: () => true,\n                hideAddInsightToDashboardModal: () => false,\n            },\n        ],\n    }),\n])\n", "import { LemonButton, LemonModal } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { CodeEditor } from 'lib/monaco/CodeEditor'\n\nimport { dashboardTemplateEditorLogic } from './dashboardTemplateEditorLogic'\n\nexport function DashboardTemplateEditor({ inline = false }: { inline?: boolean }): JSX.Element {\n    const {\n        closeDashboardTemplateEditor,\n        createDashboardTemplate,\n        updateDashboardTemplate,\n        setEditorValue,\n        updateValidationErrors,\n    } = useActions(dashboardTemplateEditorLogic)\n\n    const { isOpenNewDashboardTemplateModal, editorValue, validationErrors, templateSchema, id } =\n        useValues(dashboardTemplateEditorLogic)\n\n    return (\n        <LemonModal\n            title={id ? 'Edit dashboard template' : 'New dashboard template'}\n            isOpen={isOpenNewDashboardTemplateModal}\n            width={1000}\n            onClose={() => {\n                closeDashboardTemplateEditor()\n            }}\n            inline={inline}\n            footer={\n                id ? (\n                    <LemonButton\n                        type=\"primary\"\n                        data-attr=\"update-dashboard-template-button\"\n                        onClick={() => {\n                            updateDashboardTemplate({ id })\n                        }}\n                        disabledReason={\n                            validationErrors.length\n                                ? `There are ${validationErrors.length} errors to resolve: ${validationErrors.map(\n                                      (e) => ' ' + e\n                                  )}`\n                                : undefined\n                        }\n                    >\n                        Update template\n                    </LemonButton>\n                ) : (\n                    <LemonButton\n                        type=\"primary\"\n                        data-attr=\"create-dashboard-template-button\"\n                        onClick={() => {\n                            createDashboardTemplate()\n                        }}\n                        disabledReason={\n                            validationErrors.length\n                                ? `There are ${validationErrors.length} errors to resolve:${validationErrors.map(\n                                      (e) => ' ' + e\n                                  )}`\n                                : undefined\n                        }\n                    >\n                        Create new template\n                    </LemonButton>\n                )\n            }\n        >\n            <CodeEditor\n                className=\"border\"\n                language=\"json\"\n                value={editorValue}\n                onChange={(v) => {\n                    setEditorValue(v ?? '')\n                }}\n                onValidate={(markers) => {\n                    updateValidationErrors(markers)\n                }}\n                path={id ? `dashboard-templates/${id}.json` : 'dashboard-templates/new.json'}\n                schema={templateSchema}\n                height={600}\n            />\n        </LemonModal>\n    )\n}\n", "import { lemonToast } from '@posthog/lemon-ui'\nimport { actions, afterMount, connect, kea, listeners, path, reducers } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\n\nimport { DashboardTemplateEditorType, DashboardTemplateType, MonacoMarker } from '~/types'\n\nimport { dashboardTemplatesLogic } from './dashboards/templates/dashboardTemplatesLogic'\nimport type { dashboardTemplateEditorLogicType } from './dashboardTemplateEditorLogicType'\n\nexport const dashboardTemplateEditorLogic = kea<dashboardTemplateEditorLogicType>([\n    path(['scenes', 'dashboard', 'dashboardTemplateEditorLogic']),\n    connect({ logic: [dashboardTemplatesLogic], values: [featureFlagLogic, ['featureFlags']] }),\n    actions({\n        setEditorValue: (value: string) => ({ value }),\n        setDashboardTemplate: (dashboardTemplate: DashboardTemplateEditorType) => ({\n            dashboardTemplate,\n        }),\n        clear: true,\n        setDashboardTemplateId: (id: string | null) => ({ id }),\n        openDashboardTemplateEditor: true,\n        closeDashboardTemplateEditor: true,\n        updateValidationErrors: (markers: MonacoMarker[] | undefined) => ({ markers }),\n    }),\n    reducers({\n        editorValue: [\n            '' as string,\n            {\n                setEditorValue: (_, { value }) => value,\n                clear: () => '',\n            },\n        ],\n        dashboardTemplate: [\n            null as DashboardTemplateEditorType | null,\n            {\n                clear: () => null,\n                setDashboardTemplate: (_, { dashboardTemplate }) => dashboardTemplate,\n            },\n        ],\n        validationErrors: [\n            [] as string[],\n            {\n                updateValidationErrors: (_, { markers }): string[] => {\n                    if (!markers || markers.length === 0) {\n                        return []\n                    }\n                    return markers.map((marker: MonacoMarker) => marker.message)\n                },\n                clear: () => [],\n            },\n        ],\n        id: [\n            null as string | null,\n            {\n                setDashboardTemplateId: (_, { id }) => id,\n                clear: () => null,\n            },\n        ],\n        isOpenNewDashboardTemplateModal: [\n            false as boolean,\n            {\n                openDashboardTemplateEditor: () => true,\n                closeDashboardTemplateEditor: () => false,\n            },\n        ],\n    }),\n    loaders(({ values }) => ({\n        dashboardTemplate: [\n            undefined as DashboardTemplateEditorType | undefined | null,\n            {\n                createDashboardTemplate: async (): Promise<DashboardTemplateEditorType | undefined> => {\n                    if (!values.dashboardTemplate) {\n                        lemonToast.error('Unable to create dashboard template')\n                        return\n                    }\n                    const response = await api.dashboardTemplates.create(values.dashboardTemplate)\n                    lemonToast.success('Dashboard template created')\n                    return response\n                },\n                getDashboardTemplate: async (id: string): Promise<DashboardTemplateType> => {\n                    const response = await api.dashboardTemplates.get(id)\n                    return response\n                },\n                updateDashboardTemplate: async ({\n                    id,\n                    dashboardTemplateUpdates,\n                }: {\n                    id: string\n                    dashboardTemplateUpdates?: Partial<DashboardTemplateType>\n                }): Promise<DashboardTemplateEditorType | undefined> => {\n                    let response = null\n                    if (dashboardTemplateUpdates) {\n                        response = await api.dashboardTemplates.update(id, dashboardTemplateUpdates)\n                    } else if (values.dashboardTemplate) {\n                        response = await api.dashboardTemplates.update(id, values.dashboardTemplate)\n                    } else {\n                        lemonToast.error('Unable to update dashboard template')\n                        return\n                    }\n                    lemonToast.success('Dashboard template updated')\n                    return response\n                },\n                deleteDashboardTemplate: async (id: string): Promise<null> => {\n                    await api.dashboardTemplates.delete(id)\n                    lemonToast.success('Dashboard template deleted')\n                    return null\n                },\n            },\n        ],\n        templateSchema: [\n            null as Record<string, any> | null,\n            {\n                getTemplateSchema: async (): Promise<Record<string, any>> => {\n                    return await api.dashboardTemplates.getSchema()\n                },\n            },\n        ],\n    })),\n    listeners(({ values, actions }) => ({\n        createDashboardTemplateSuccess: async () => {\n            actions.closeDashboardTemplateEditor()\n            dashboardTemplatesLogic.actions.getAllTemplates()\n        },\n        updateDashboardTemplateSuccess: async () => {\n            actions.closeDashboardTemplateEditor()\n            dashboardTemplatesLogic.actions.getAllTemplates()\n        },\n        deleteDashboardTemplateSuccess: async () => {\n            dashboardTemplatesLogic.actions.getAllTemplates()\n        },\n        closeDashboardTemplateEditor: () => {\n            actions.clear()\n        },\n        setDashboardTemplateId: ({ id }) => {\n            if (id) {\n                actions.getDashboardTemplate(id)\n            }\n        },\n        getDashboardTemplateSuccess: async ({ dashboardTemplate }) => {\n            if (dashboardTemplate) {\n                actions.setEditorValue(JSON.stringify(dashboardTemplate))\n            }\n        },\n        setEditorValue: async ({ value }, breakpoint) => {\n            await breakpoint(500)\n            if (values.validationErrors.length == 0 && value?.length) {\n                try {\n                    const dashboardTemplate = JSON.parse(value)\n                    actions.setDashboardTemplate(dashboardTemplate)\n                } catch (error) {\n                    console.error('error', error)\n                    lemonToast.error('Unable to parse dashboard template')\n                }\n            }\n        },\n        updateValidationErrors: async ({ markers }) => {\n            // used to handle the race condition between the editor updating and the validation errors updating\n            // otherwise the dashboard template might not be updated with the latest value\n            if (!markers?.length) {\n                actions.setEditorValue(values.editorValue)\n            }\n        },\n        setDashboardTemplate: async ({ dashboardTemplate }) => {\n            if (dashboardTemplate) {\n                actions.setEditorValue(JSON.stringify(dashboardTemplate, null, 4))\n            }\n        },\n    })),\n    afterMount(({ actions }) => {\n        actions.getTemplateSchema()\n    }),\n])\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_jsx_runtime", "DeleteDashboardModal", "hideDeleteDashboardModal", "deleteDashboardLogic", "isDeleteDashboardSubmitting", "deleteDashboardModalVisible", "LemonModal", "LemonButton", "LemonField", "value", "onChange", "LemonCheckbox", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_jsx_runtime", "DuplicateDashboardModal", "hideDuplicateDashboardModal", "duplicateAndGoToDashboard", "duplicateDashboardLogic", "isDuplicateDashboardSubmitting", "duplicateDashboardModalVisible", "LemonModal", "LemonButton", "LemonField", "value", "onChange", "LemonCheckbox", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "getTileBody", "dashboard", "textTileId", "tt", "textCardModalLogic", "props", "dashboardsModel", "actions", "error", "lemonToast", "body", "formValues", "textTiles", "t", "updatedTiles", "acc", "tile", "import_jsx_runtime", "TextCardModal", "isOpen", "onClose", "dashboard", "textTileId", "modalLogic", "textCardModalLogic", "isTextTileSubmitting", "textTileValidationErrors", "submitTextTile", "resetTextTile", "handleClose", "LemonModal", "LemonButton", "LemonTextAreaMarkdown", "init_dirname", "init_buffer", "init_process", "import_react", "FullScreen", "onExit", "selector", "myClasses", "i", "handler", "elements", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "urlForSubscriptions", "dashboardId", "insightShortId", "urls", "urlForSubscription", "id", "targetTypeOptions", "IconLetter", "IconSlack", "intervalOptions", "range", "x", "frequencyOptionsSingular", "frequencyOptionsPlural", "weekdayOptions", "monthlyWeekdayOptions", "bysetposOptions", "timeOptions", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_kea_loaders", "import_kea_router", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "subscriptionsLogic", "insightShortId", "dashboardId", "id", "props", "_", "breakpoint", "insightId", "getInsightId", "response", "api_default", "state", "actions", "deleteWithUndo", "NEW_SUBSCRIPTION", "dayjs", "subscriptionLogic", "id", "insightShortId", "dashboardId", "props", "api_default", "actions", "frequency", "interval", "target_value", "target_type", "title", "start_date", "email", "isEmail", "isURL", "subscription", "breakpoint", "insightId", "getInsightId", "payload", "updatedSub", "urlForSubscription", "subscriptionsLogic", "lemonToast", "name", "value", "key", "values", "_", "searchParams", "import_jsx_runtime", "EditSubscription", "id", "insightShortId", "dashboardId", "onCancel", "onDelete", "logicProps", "logic", "subscriptionLogic", "subscriptionslogic", "subscriptionsLogic", "meFirstMembers", "membersLoading", "membersLogic", "subscription", "subscriptionLoading", "isSubscriptionSubmitting", "subscriptionChanged", "preflight", "siteUrlMisconfigured", "preflightLogic", "deleteSubscription", "slackIntegrations", "integrationsLogic", "firstSlackIntegration", "emailDisabled", "_onDelete", "currentTimezone", "part", "LemonModal", "LemonButton", "IconChevronLeft", "UserActivityIndicator", "LemonBanner", "Link", "LemonField", "LemonInput", "LemonSelect", "targetTypeOptions", "value", "onChange", "LemonInputSelect", "val", "usersLemonSelectOptions", "x", "LemonTextArea", "SlackChannelPicker", "api_default", "LemonLabel", "intervalOptions", "frequencyOptionsSingular", "frequencyOptionsPlural", "weekdayOptions", "bysetposOptions", "monthlyWeekdayOptions", "v", "timeOptions", "dayjs", "LemonSkeleton", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "SubscriptionListItem", "subscription", "onClick", "onDelete", "LemonButton", "IconEllipsis", "capitalizeFirstLetter", "ProfileBubbles", "email", "IconSlack", "ManageSubscriptions", "insightShortId", "dashboardId", "onCancel", "onSelect", "logic", "subscriptionsLogic", "subscriptions", "subscriptionsLoading", "deleteSubscription", "LemonModal", "LemonSkeleton", "pluralize", "sub", "import_jsx_runtime", "SubscriptionsModal", "props", "closeModal", "dashboardId", "insightShortId", "subscriptionId", "isOpen", "inline", "push", "userLoading", "userLogic", "Spinner", "LemonModal", "PayGateMini", "EditSubscription", "urlForSubscriptions", "ManageSubscriptions", "id", "urlForSubscription", "SubscribeButton", "LemonButtonWithDropdown", "LemonButton", "init_dirname", "init_buffer", "init_process", "import_kea", "addInsightToDashboardLogic", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "dashboardTemplateEditorLogic", "dashboardTemplatesLogic", "featureFlagLogic", "value", "dashboardTemplate", "id", "markers", "_", "marker", "values", "lemonToast", "response", "api_default", "dashboardTemplateUpdates", "actions", "breakpoint", "error", "import_jsx_runtime", "DashboardTemplateEditor", "inline", "closeDashboardTemplateEditor", "createDashboardTemplate", "updateDashboardTemplate", "setEditorValue", "updateValidationErrors", "dashboardTemplateEditorLogic", "isOpenNewDashboardTemplateModal", "editorValue", "validationErrors", "templateSchema", "id", "LemonModal", "LemonButton", "e", "CodeEditor", "v", "markers", "import_jsx_runtime", "DASHBOARD_CANNOT_EDIT_MESSAGE", "DashboardHeader", "dashboard", "dashboardLoading", "dashboardMode", "canEditDashboard", "showSubscriptions", "subscriptionId", "apiUrl", "showTextTileModal", "textTileId", "dashboardLogic", "setDashboardMode", "triggerDashboardUpdate", "asDashboardTemplate", "updateDashboard", "pinDashboard", "unpinDashboard", "dashboardsModel", "createNotebookFromDashboard", "notebooksModel", "showAddInsightToDashboardModal", "addInsightToDashboardLogic", "setDashboardTemplate", "openDashboardTemplateEditor", "dashboardTemplateEditorLogic", "user", "userLogic", "showDuplicateDashboardModal", "duplicateDashboardLogic", "showDeleteDashboardModal", "deleteDashboardLogic", "tags", "tagsModel", "push", "exportOptions", "slugify", "FullScreen", "SubscriptionsModal", "urls", "SharingModal", "TextCardModal", "DeleteDashboardModal", "DuplicateDashboardModal", "PageHeader", "LemonButton", "More", "humanFriendlyDetailedTime", "LemonDivider", "SubscribeButton", "ExportButton", "AccessControlledLemonButton", "CollaboratorBubbles", "EditableField", "value", "ObjectTags", "tag", "DashboardTemplateEditor", "onClick", "allCollaborators", "dashboardCollaboratorsLogic", "effectiveRestrictionLevelOption", "DASHBOARD_RESTRICTION_OPTIONS", "tooltipParts", "isLemonSelectSection", "ProfileBubbles", "collaborator", "privilegeLevelToName"]
}
