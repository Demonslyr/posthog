{
  "version": 3,
  "sources": ["../src/scenes/persons-management/PersonsManagementScene.tsx", "../src/scenes/persons-management/personsManagementSceneLogic.tsx", "../src/scenes/cohorts/Cohorts.tsx", "../src/scenes/groups/Groups.tsx", "../src/scenes/persons-management/tabs/Persons.tsx", "../src/scenes/persons-management/tabs/personsSceneLogic.ts"],
  "sourcesContent": ["import { useActions, useValues } from 'kea'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { LemonTab, LemonTabs } from 'lib/lemon-ui/LemonTabs'\nimport { SceneExport } from 'scenes/sceneTypes'\n\nimport { groupsModel } from '~/models/groupsModel'\n\nimport { personsManagementSceneLogic } from './personsManagementSceneLogic'\n\nexport function PersonsManagementScene(): JSX.Element {\n    const { tabs, activeTab, tabKey } = useValues(personsManagementSceneLogic)\n    const { setTabKey } = useActions(personsManagementSceneLogic)\n    const { showGroupsOptions } = useValues(groupsModel)\n\n    const lemonTabs: LemonTab<string>[] = tabs.map((tab) => ({\n        key: tab.key,\n        label: <span data-attr={`persons-management-${tab.key}-tab`}>{tab.label}</span>,\n        content: tab.content,\n    }))\n\n    return (\n        <>\n            <PageHeader\n                caption={\n                    showGroupsOptions\n                        ? 'A catalog of identified persons, groups, and your created cohorts.'\n                        : 'A catalog of identified persons and your created cohorts.'\n                }\n                buttons={activeTab?.buttons}\n            />\n\n            <LemonTabs activeKey={tabKey} onChange={(t) => setTabKey(t)} tabs={lemonTabs} />\n        </>\n    )\n}\n\nexport const scene: SceneExport = {\n    component: PersonsManagementScene,\n    logic: personsManagementSceneLogic,\n}\n", "import { LemonButton } from '@posthog/lemon-ui'\nimport { actions, connect, kea, path, reducers, selectors } from 'kea'\nimport { actionToUrl, router, urlToAction } from 'kea-router'\nimport { GroupsAccessStatus } from 'lib/introductions/groupsAccessLogic'\nimport { LemonTab } from 'lib/lemon-ui/LemonTabs'\nimport { capitalizeFirstLetter } from 'lib/utils'\nimport { Cohorts } from 'scenes/cohorts/Cohorts'\nimport { Groups } from 'scenes/groups/Groups'\nimport { Scene } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { groupsModel } from '~/models/groupsModel'\nimport { Breadcrumb } from '~/types'\n\nimport type { personsManagementSceneLogicType } from './personsManagementSceneLogicType'\nimport { Persons } from './tabs/Persons'\n\nexport type PersonsManagementTab = {\n    key: string\n    url: string\n    label: string\n    content: any\n    buttons?: any\n}\n\nexport type PersonsManagementTabs = Record<\n    string,\n    { url: string; label: LemonTab<any>['label']; content: any; buttons?: any }\n>\n\nexport const personsManagementSceneLogic = kea<personsManagementSceneLogicType>([\n    path(['scenes', 'persons-management', 'personsManagementSceneLogic']),\n    connect({\n        values: [groupsModel, ['aggregationLabel', 'groupTypes', 'groupsAccessStatus']],\n    }),\n    actions({\n        setTabKey: (tabKey: string) => ({ tabKey }),\n    }),\n    reducers({\n        tabKey: [\n            'persons' as string,\n            {\n                setTabKey: (_, { tabKey }) => tabKey,\n            },\n        ],\n    }),\n    selectors({\n        tabs: [\n            (s) => [s.groupTabs],\n            (groupTabs): PersonsManagementTab[] => {\n                return [\n                    {\n                        key: 'persons',\n                        url: urls.persons(),\n                        label: 'Persons',\n                        content: <Persons />,\n                    },\n                    {\n                        key: 'cohorts',\n                        url: urls.cohorts(),\n                        label: 'Cohorts',\n                        content: <Cohorts />,\n                        buttons: (\n                            <LemonButton\n                                type=\"primary\"\n                                data-attr=\"new-cohort\"\n                                onClick={() => router.actions.push(urls.cohort('new'))}\n                            >\n                                New cohort\n                            </LemonButton>\n                        ),\n                    },\n                    ...groupTabs,\n                ]\n            },\n        ],\n\n        activeTab: [\n            (s) => [s.tabs, s.tabKey],\n            (tabs, tabKey): PersonsManagementTab | null => {\n                return tabs.find((x) => x.key === tabKey) ?? null\n            },\n        ],\n\n        groupTabs: [\n            (s) => [s.groupTypes, s.groupsAccessStatus, s.aggregationLabel],\n            (groupTypes, groupsAccessStatus, aggregationLabel): PersonsManagementTab[] => {\n                const showGroupsIntroductionPage = [\n                    GroupsAccessStatus.HasAccess,\n                    GroupsAccessStatus.HasGroupTypes,\n                    GroupsAccessStatus.NoAccess,\n                ].includes(groupsAccessStatus)\n\n                const groupTabs: PersonsManagementTab[] = [\n                    ...(showGroupsIntroductionPage\n                        ? [\n                              {\n                                  key: 'groups-0',\n                                  label: 'Groups',\n                                  url: urls.groups(0),\n                                  content: <Groups groupTypeIndex={0} />,\n                              },\n                          ]\n                        : Array.from(groupTypes.values()).map((groupType) => ({\n                              key: `groups-${groupType.group_type_index}`,\n                              label: capitalizeFirstLetter(aggregationLabel(groupType.group_type_index).plural),\n                              url: urls.groups(groupType.group_type_index),\n                              content: <Groups groupTypeIndex={groupType.group_type_index} />,\n                          }))),\n                ]\n\n                return groupTabs\n            },\n        ],\n        breadcrumbs: [\n            (s) => [s.tabs, s.activeTab],\n            (tabs, activeTab): Breadcrumb[] => {\n                return [\n                    {\n                        key: Scene.PersonsManagement,\n                        name: `People`,\n                        path: tabs[0].url,\n                    },\n                    activeTab\n                        ? {\n                              key: activeTab.key,\n                              name: activeTab.label,\n                              path: activeTab.url,\n                          }\n                        : {\n                              key: 'loading',\n                              name: 'Loading...',\n                          },\n                ]\n            },\n        ],\n    }),\n    actionToUrl(({ values }) => ({\n        setTabKey: ({ tabKey }) => {\n            const tab = values.tabs.find((x) => x.key === tabKey)\n            if (!tab) {\n                return values.tabs[0].url\n            }\n            // Preserve existing search params when changing tabs\n            return [tab.url, router.values.searchParams, router.values.hashParams, { replace: true }]\n        },\n    })),\n    urlToAction(({ actions }) => {\n        return {\n            [urls.persons()]: () => {\n                actions.setTabKey('persons')\n            },\n            [urls.cohorts()]: () => {\n                actions.setTabKey('cohorts')\n            },\n            [urls.groups(':key')]: ({ key }) => {\n                actions.setTabKey(`groups-${key}`)\n            },\n        }\n    }),\n])\n", "import './Cohorts.scss'\n\nimport { LemonInput } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { combineUrl, router } from 'kea-router'\nimport { ListHog } from 'lib/components/hedgehogs'\nimport { ProductIntroduction } from 'lib/components/ProductIntroduction/ProductIntroduction'\nimport { dayjs } from 'lib/dayjs'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonDivider } from 'lib/lemon-ui/LemonDivider'\nimport { LemonTable, LemonTableColumn, LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { createdAtColumn, createdByColumn } from 'lib/lemon-ui/LemonTable/columnUtils'\nimport { LemonTableLink } from 'lib/lemon-ui/LemonTable/LemonTableLink'\nimport { Spinner } from 'lib/lemon-ui/Spinner/Spinner'\nimport { useState } from 'react'\nimport { urls } from 'scenes/urls'\n\nimport { CohortType, ProductKey } from '~/types'\n\nimport { cohortsModel } from '../../models/cohortsModel'\n\nexport function Cohorts(): JSX.Element {\n    const { cohorts, cohortsLoading, pagination, cohortFilters } = useValues(cohortsModel)\n    const { deleteCohort, exportCohortPersons, setCohortFilters } = useActions(cohortsModel)\n    const { searchParams } = useValues(router)\n    const [searchTerm, setSearchTerm] = useState(cohortFilters.search || '')\n\n    const columns: LemonTableColumns<CohortType> = [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            className: 'ph-no-capture',\n            width: '30%',\n            sorter: (a, b) => (a.name || '').localeCompare(b.name || ''),\n            render: function Render(name, { id, description }) {\n                return (\n                    <>\n                        <LemonTableLink\n                            to={combineUrl(urls.cohort(id), searchParams).url}\n                            title={name ? <>{name}</> : 'Untitled'}\n                            description={description}\n                        />\n                    </>\n                )\n            },\n        },\n        {\n            title: 'Users in cohort',\n            align: 'right',\n            render: function RenderCount(_: any, cohort: CohortType) {\n                return cohort.count?.toLocaleString()\n            },\n            dataIndex: 'count',\n            sorter: (a, b) => (a.count || 0) - (b.count || 0),\n        },\n        createdByColumn<CohortType>() as LemonTableColumn<CohortType, keyof CohortType | undefined>,\n        createdAtColumn<CohortType>() as LemonTableColumn<CohortType, keyof CohortType | undefined>,\n        {\n            title: 'Last calculated',\n            tooltip:\n                'PostHog calculates what users belong to each cohort. This is then used when filtering on cohorts in the Trends page etc. Calculating happens every 24 hours, or whenever a cohort is updated',\n            render: function RenderCalculation(_: any, cohort: CohortType) {\n                if (cohort.is_static) {\n                    return <>N/A</>\n                }\n                return cohort.is_calculating ? (\n                    <span className=\"flex items-center\">\n                        in progress <Spinner className=\"ml-2\" />\n                    </span>\n                ) : (\n                    dayjs(cohort.last_calculation).fromNow()\n                )\n            },\n        },\n        {\n            width: 0,\n            render: function RenderActions(_, cohort) {\n                return (\n                    <More\n                        overlay={\n                            <>\n                                <LemonButton to={urls.cohort(cohort.id)} fullWidth>\n                                    Edit\n                                </LemonButton>\n                                <LemonButton\n                                    to={\n                                        combineUrl(urls.replay(), {\n                                            filters: {\n                                                properties: [\n                                                    {\n                                                        key: 'id',\n                                                        label: cohort.name,\n                                                        type: 'cohort',\n                                                        value: cohort.id,\n                                                    },\n                                                ],\n                                            },\n                                        }).url\n                                    }\n                                    fullWidth\n                                >\n                                    View session recordings\n                                </LemonButton>\n                                <LemonButton\n                                    onClick={() =>\n                                        exportCohortPersons(cohort.id, [\n                                            'distinct_ids.0',\n                                            'id',\n                                            'name',\n                                            'properties.email',\n                                        ])\n                                    }\n                                    tooltip=\"Export specific columns for users belonging to this cohort in CSV format. Includes distinct id, internal id, email, and name\"\n                                    fullWidth\n                                >\n                                    Export important columns for users\n                                </LemonButton>\n                                <LemonButton\n                                    onClick={() => exportCohortPersons(cohort.id)}\n                                    tooltip=\"Export all users belonging to this cohort in CSV format.\"\n                                    fullWidth\n                                >\n                                    Export all columns for users\n                                </LemonButton>\n                                <LemonDivider />\n                                <LemonButton status=\"danger\" onClick={() => deleteCohort(cohort)} fullWidth>\n                                    Delete cohort\n                                </LemonButton>\n                            </>\n                        }\n                    />\n                )\n            },\n        },\n    ]\n\n    return (\n        <>\n            <ProductIntroduction\n                productName=\"Cohorts\"\n                productKey={ProductKey.COHORTS}\n                thingName=\"cohort\"\n                description=\"Use cohorts to group people together, such as users who used your app in the last week, or people who viewed the signup page but didn\u2019t convert.\"\n                isEmpty={cohorts.count == 0 && !cohortsLoading && !searchTerm}\n                docsURL=\"https://posthog.com/docs/data/cohorts\"\n                action={() => router.actions.push(urls.cohort('new'))}\n                customHog={ListHog}\n            />\n\n            <div className=\"flex justify-between items-center mb-4 gap-2\">\n                <LemonInput\n                    type=\"search\"\n                    placeholder=\"Search for cohorts\"\n                    onChange={(search) => {\n                        setSearchTerm(search)\n                        setCohortFilters({ search: search || undefined, page: 1 })\n                    }}\n                    value={searchTerm}\n                />\n            </div>\n            <LemonTable\n                columns={columns}\n                loading={cohortsLoading}\n                rowKey=\"id\"\n                pagination={pagination}\n                dataSource={cohorts.results}\n                nouns={['cohort', 'cohorts']}\n                data-attr=\"cohorts-table\"\n            />\n        </>\n    )\n}\n", "import { useActions, useValues } from 'kea'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { PropertiesTable } from 'lib/components/PropertiesTable'\nimport { TZLabel } from 'lib/components/TZLabel'\nimport { groupsAccessLogic, GroupsAccessStatus } from 'lib/introductions/groupsAccessLogic'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { LemonDivider } from 'lib/lemon-ui/LemonDivider'\nimport { LemonInput } from 'lib/lemon-ui/LemonInput/LemonInput'\nimport { LemonTable } from 'lib/lemon-ui/LemonTable'\nimport { LemonTableLink } from 'lib/lemon-ui/LemonTable/LemonTableLink'\nimport { LemonTableColumns } from 'lib/lemon-ui/LemonTable/types'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { capitalizeFirstLetter } from 'lib/utils'\nimport { GroupsIntroduction } from 'scenes/groups/GroupsIntroduction'\nimport { groupDisplayId } from 'scenes/persons/GroupActorDisplay'\nimport { urls } from 'scenes/urls'\n\nimport { Group, PropertyDefinitionType } from '~/types'\n\nimport { groupsListLogic } from './groupsListLogic'\n\nexport function Groups({ groupTypeIndex }: { groupTypeIndex: number }): JSX.Element {\n    const {\n        groupTypeName: { singular, plural },\n        groups,\n        groupsLoading,\n        search,\n    } = useValues(groupsListLogic({ groupTypeIndex }))\n    const { loadGroups, setSearch } = useActions(groupsListLogic({ groupTypeIndex }))\n    const { groupsAccessStatus } = useValues(groupsAccessLogic)\n\n    if (groupTypeIndex === undefined) {\n        throw new Error('groupTypeIndex is undefined')\n    }\n\n    if (\n        groupsAccessStatus == GroupsAccessStatus.HasAccess ||\n        groupsAccessStatus == GroupsAccessStatus.HasGroupTypes ||\n        groupsAccessStatus == GroupsAccessStatus.NoAccess\n    ) {\n        return (\n            <>\n                <GroupsIntroduction />\n            </>\n        )\n    }\n\n    const columns: LemonTableColumns<Group> = [\n        {\n            title: capitalizeFirstLetter(plural),\n            key: 'group_key',\n            render: function Render(_, group: Group) {\n                return (\n                    <LemonTableLink\n                        to={urls.group(group.group_type_index.toString(), group.group_key)}\n                        title={groupDisplayId(group.group_key, group.group_properties)}\n                    />\n                )\n            },\n        },\n        {\n            title: 'First seen',\n            key: 'created_at',\n            render: function Render(_, group: Group) {\n                return <TZLabel time={group.created_at} />\n            },\n        },\n    ]\n\n    return (\n        <>\n            <LemonInput\n                type=\"search\"\n                placeholder={`Search for ${plural}`}\n                onChange={setSearch}\n                value={search}\n                data-attr=\"group-search\"\n                className=\"mb-4\"\n            />\n            <LemonDivider className=\"mb-4\" />\n            <LemonTable\n                columns={columns}\n                rowKey=\"group_key\"\n                loading={groupsLoading}\n                dataSource={groups.results}\n                expandable={{\n                    expandedRowRender: function RenderPropertiesTable({ group_properties }) {\n                        return <PropertiesTable type={PropertyDefinitionType.Group} properties={group_properties} />\n                    },\n                    rowExpandable: ({ group_properties }) =>\n                        !!group_properties && Object.keys(group_properties).length > 0,\n                }}\n                pagination={{\n                    controlled: true,\n                    onBackward: groups.previous\n                        ? () => {\n                              loadGroups(groups.previous)\n                              window.scrollTo(0, 0)\n                          }\n                        : undefined,\n                    onForward: groups.next\n                        ? () => {\n                              loadGroups(groups.next)\n                              window.scrollTo(0, 0)\n                          }\n                        : undefined,\n                }}\n                emptyState={\n                    <>\n                        <LemonBanner type=\"info\">\n                            No {plural} found. Make sure to send properties with your {singular} for them to show up in\n                            the list.{' '}\n                            <Link to=\"https://posthog.com/docs/user-guides/group-analytics\" target=\"_blank\">\n                                Read more here.\n                            </Link>\n                        </LemonBanner>\n                        <CodeSnippet language={Language.JavaScript} wrap>\n                            {`posthog.group('${singular}', your_${singular}_id, {\\n` +\n                                `    name: 'Awesome ${singular}',\\n` +\n                                '    value: 11\\n' +\n                                '});'}\n                        </CodeSnippet>\n                    </>\n                }\n            />\n        </>\n    )\n}\n", "import { useActions, useValues } from 'kea'\nimport { personsSceneLogic } from 'scenes/persons-management/tabs/personsSceneLogic'\n\nimport { Query } from '~/queries/Query/Query'\n\nexport function Persons(): JSX.Element {\n    const { query } = useValues(personsSceneLogic)\n    const { setQuery } = useActions(personsSceneLogic)\n\n    return <Query query={query} setQuery={setQuery} context={{ alwaysRefresh: true }} />\n}\n", "import { actions, kea, path, reducers } from 'kea'\n\nimport { defaultDataTableColumns } from '~/queries/nodes/DataTable/utils'\nimport { DataTableNode, NodeKind } from '~/queries/schema/schema-general'\n\nimport type { personsSceneLogicType } from './personsSceneLogicType'\n\nexport const personsSceneLogic = kea<personsSceneLogicType>([\n    path(['scenes', 'persons', 'personsSceneLogic']),\n\n    actions({ setQuery: (query: DataTableNode) => ({ query }) }),\n    reducers({\n        query: [\n            {\n                kind: NodeKind.DataTableNode,\n                source: { kind: NodeKind.ActorsQuery, select: defaultDataTableColumns(NodeKind.ActorsQuery) },\n                full: true,\n                propertiesViaUrl: true,\n            } as DataTableNode,\n            { setQuery: (_, { query }) => query },\n        ],\n    }),\n\n    // NOTE: Temp disabled as it triggers a loop bug\n\n    // actionToUrl(({ values }) => ({\n    //     setQuery: () => [\n    //         urls.persons(),\n    //         {},\n    //         objectsEqual(values.query, getDefaultQuery(values.queryFlagEnabled)) ? {} : { q: values.query },\n    //         { replace: true },\n    //     ],\n    // })),\n\n    // urlToAction(({ actions, values }) => ({\n    //     [urls.persons()]: (_, __, { q: queryParam }): void => {\n    //         if (!equal(queryParam, values.query)) {\n    //             // nothing in the URL\n    //             if (!queryParam) {\n    //                 const defaultQuery = getDefaultQuery(values.queryFlagEnabled)\n    //                 // set the default unless it's already there\n    //                 if (!objectsEqual(values.query, defaultQuery)) {\n    //                     actions.setQuery(defaultQuery)\n    //                 }\n    //             } else {\n    //                 if (typeof queryParam === 'object') {\n    //                     actions.setQuery(queryParam)\n    //                 } else {\n    //                     lemonToast.error('Invalid query in URL')\n    //                     console.error({ queryParam })\n    //                 }\n    //             }\n    //         }\n    //     },\n    // })),\n])\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "import_react", "import_jsx_runtime", "Cohorts", "cohorts", "cohortsLoading", "pagination", "cohortFilters", "cohortsModel", "deleteCohort", "exportCohortPersons", "setCohortFilters", "searchParams", "searchTerm", "setSearchTerm", "columns", "a", "b", "name", "id", "description", "LemonTableLink", "urls", "_", "cohort", "createdByColumn", "createdAtColumn", "Spinner", "dayjs", "More", "LemonButton", "LemonDivider", "ProductIntroduction", "ListHog", "LemonInput", "search", "LemonTable", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "Groups", "groupTypeIndex", "singular", "plural", "groups", "groupsLoading", "search", "groupsListLogic", "loadGroups", "setSearch", "groupsAccessStatus", "groupsAccessLogic", "GroupsIntroduction", "columns", "capitalizeFirstLetter", "_", "group", "LemonTableLink", "urls", "groupDisplayId", "TZLabel", "LemonInput", "LemonDivider", "LemonTable", "group_properties", "PropertiesTable", "LemonBanner", "Link", "CodeSnippet", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "personsSceneLogic", "query", "defaultDataTableColumns", "_", "import_jsx_runtime", "Persons", "query", "personsSceneLogic", "setQuery", "Query", "import_jsx_runtime", "personsManagementSceneLogic", "groupsModel", "tabKey", "_", "s", "groupTabs", "urls", "Persons", "Cohorts", "LemonButton", "tabs", "x", "groupTypes", "groupsAccessStatus", "aggregationLabel", "Groups", "groupType", "capitalizeFirstLetter", "activeTab", "values", "tab", "actions", "key", "import_jsx_runtime", "PersonsManagementScene", "tabs", "activeTab", "tabKey", "personsManagementSceneLogic", "setTabKey", "showGroupsOptions", "groupsModel", "lemonTabs", "tab", "PageHeader", "LemonTabs", "t", "scene"]
}
