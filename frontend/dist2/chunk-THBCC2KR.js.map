{
  "version": 3,
  "sources": ["../src/scenes/dashboard/dashboards/DashboardsTable.tsx"],
  "sourcesContent": ["import { IconHome, IconLock, IconPin, IconPinFilled, IconShare } from '@posthog/icons'\nimport { LemonInput } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { AccessControlledLemonButton } from 'lib/components/AccessControlledLemonButton'\nimport { MemberSelect } from 'lib/components/MemberSelect'\nimport { ObjectTags } from 'lib/components/ObjectTags/ObjectTags'\nimport { DashboardPrivilegeLevel } from 'lib/constants'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonDivider } from 'lib/lemon-ui/LemonDivider'\nimport { LemonRow } from 'lib/lemon-ui/LemonRow'\nimport { LemonTable, LemonTableColumn, LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { createdAtColumn, createdByColumn } from 'lib/lemon-ui/LemonTable/columnUtils'\nimport { LemonTableLink } from 'lib/lemon-ui/LemonTable/LemonTableLink'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { DashboardEventSource } from 'lib/utils/eventUsageLogic'\nimport { dashboardLogic } from 'scenes/dashboard/dashboardLogic'\nimport { DashboardsFilters, dashboardsLogic } from 'scenes/dashboard/dashboards/dashboardsLogic'\nimport { deleteDashboardLogic } from 'scenes/dashboard/deleteDashboardLogic'\nimport { duplicateDashboardLogic } from 'scenes/dashboard/duplicateDashboardLogic'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { urls } from 'scenes/urls'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { dashboardsModel, nameCompareFunction } from '~/models/dashboardsModel'\nimport { AccessControlResourceType, AvailableFeature, DashboardBasicType, DashboardMode, DashboardType } from '~/types'\n\nimport { DASHBOARD_CANNOT_EDIT_MESSAGE } from '../DashboardHeader'\n\nexport function DashboardsTableContainer(): JSX.Element {\n    const { dashboardsLoading } = useValues(dashboardsModel)\n    const { dashboards, filters } = useValues(dashboardsLogic)\n\n    return <DashboardsTable dashboards={dashboards} dashboardsLoading={dashboardsLoading} filters={filters} />\n}\n\ninterface DashboardsTableProps {\n    dashboards: DashboardBasicType[]\n    filters: DashboardsFilters\n    dashboardsLoading: boolean\n    extraActions?: JSX.Element | JSX.Element[]\n    hideActions?: boolean\n}\n\nexport function DashboardsTable({\n    dashboards,\n    dashboardsLoading,\n    filters,\n    extraActions,\n    hideActions,\n}: DashboardsTableProps): JSX.Element {\n    const { unpinDashboard, pinDashboard } = useActions(dashboardsModel)\n    const { setFilters, tableSortingChanged } = useActions(dashboardsLogic)\n    const { tableSorting } = useValues(dashboardsLogic)\n    const { hasAvailableFeature } = useValues(userLogic)\n    const { currentTeam } = useValues(teamLogic)\n    const { showDuplicateDashboardModal } = useActions(duplicateDashboardLogic)\n    const { showDeleteDashboardModal } = useActions(deleteDashboardLogic)\n\n    const columns: LemonTableColumns<DashboardType> = [\n        {\n            width: 0,\n            dataIndex: 'pinned',\n            render: function Render(pinned, { id }) {\n                return (\n                    <LemonButton\n                        size=\"small\"\n                        onClick={\n                            pinned\n                                ? () => unpinDashboard(id, DashboardEventSource.DashboardsList)\n                                : () => pinDashboard(id, DashboardEventSource.DashboardsList)\n                        }\n                        tooltip={pinned ? 'Unpin dashboard' : 'Pin dashboard'}\n                        icon={pinned ? <IconPinFilled /> : <IconPin />}\n                    />\n                )\n            },\n        },\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            width: '40%',\n            render: function Render(_, { id, name, description, is_shared, effective_privilege_level }) {\n                const isPrimary = id === currentTeam?.primary_dashboard\n                const canEditDashboard = effective_privilege_level >= DashboardPrivilegeLevel.CanEdit\n                return (\n                    <LemonTableLink\n                        to={urls.dashboard(id)}\n                        title={\n                            <>\n                                <span data-attr=\"dashboard-name\">{name || 'Untitled'}</span>\n                                {is_shared && (\n                                    <Tooltip title=\"This dashboard is shared publicly.\">\n                                        <IconShare className=\"ml-1 text-base text-link\" />\n                                    </Tooltip>\n                                )}\n                                {!canEditDashboard && (\n                                    <Tooltip title={DASHBOARD_CANNOT_EDIT_MESSAGE}>\n                                        <IconLock className=\"ml-1 text-base text-secondary\" />\n                                    </Tooltip>\n                                )}\n                                {isPrimary && (\n                                    <Tooltip title=\"The primary dashboard is shown on the project home page.\">\n                                        <span>\n                                            <IconHome className=\"ml-1 text-base text-warning\" />\n                                        </span>\n                                    </Tooltip>\n                                )}\n                            </>\n                        }\n                        description={description}\n                    />\n                )\n            },\n            sorter: nameCompareFunction,\n        },\n        ...(hasAvailableFeature(AvailableFeature.TAGGING)\n            ? [\n                  {\n                      title: 'Tags',\n                      dataIndex: 'tags' as keyof DashboardType,\n                      render: function Render(tags: DashboardType['tags']) {\n                          return tags ? <ObjectTags tags={tags} staticOnly /> : null\n                      },\n                  } as LemonTableColumn<DashboardType, keyof DashboardType | undefined>,\n              ]\n            : []),\n        createdByColumn<DashboardType>() as LemonTableColumn<DashboardType, keyof DashboardType | undefined>,\n        createdAtColumn<DashboardType>() as LemonTableColumn<DashboardType, keyof DashboardType | undefined>,\n        hideActions\n            ? {}\n            : {\n                  width: 0,\n                  render: function RenderActions(_, { id, name, user_access_level }: DashboardType) {\n                      return (\n                          <More\n                              overlay={\n                                  <>\n                                      <LemonButton\n                                          to={urls.dashboard(id)}\n                                          onClick={() => {\n                                              dashboardLogic({ id }).mount()\n                                              dashboardLogic({ id }).actions.setDashboardMode(\n                                                  null,\n                                                  DashboardEventSource.DashboardsList\n                                              )\n                                          }}\n                                          fullWidth\n                                      >\n                                          View\n                                      </LemonButton>\n\n                                      <AccessControlledLemonButton\n                                          userAccessLevel={user_access_level}\n                                          minAccessLevel=\"editor\"\n                                          resourceType={AccessControlResourceType.Dashboard}\n                                          to={urls.dashboard(id)}\n                                          onClick={() => {\n                                              dashboardLogic({ id }).mount()\n                                              dashboardLogic({ id }).actions.setDashboardMode(\n                                                  DashboardMode.Edit,\n                                                  DashboardEventSource.DashboardsList\n                                              )\n                                          }}\n                                          fullWidth\n                                      >\n                                          Edit\n                                      </AccessControlledLemonButton>\n\n                                      <LemonButton\n                                          onClick={() => {\n                                              showDuplicateDashboardModal(id, name)\n                                          }}\n                                          fullWidth\n                                      >\n                                          Duplicate\n                                      </LemonButton>\n\n                                      <LemonDivider />\n\n                                      <LemonRow icon={<IconHome className=\"text-warning\" />} fullWidth status=\"warning\">\n                                          <span className=\"text-secondary\">\n                                              Change the default dashboard\n                                              <br />\n                                              from the <Link to={urls.projectHomepage()}>project home page</Link>.\n                                          </span>\n                                      </LemonRow>\n\n                                      <LemonDivider />\n\n                                      <AccessControlledLemonButton\n                                          userAccessLevel={user_access_level}\n                                          minAccessLevel=\"editor\"\n                                          resourceType={AccessControlResourceType.Dashboard}\n                                          onClick={() => {\n                                              showDeleteDashboardModal(id)\n                                          }}\n                                          fullWidth\n                                          status=\"danger\"\n                                      >\n                                          Delete dashboard\n                                      </AccessControlledLemonButton>\n                                  </>\n                              }\n                          />\n                      )\n                  },\n              },\n    ]\n\n    return (\n        <>\n            <div className=\"flex justify-between gap-2 flex-wrap mb-4\">\n                <LemonInput\n                    type=\"search\"\n                    placeholder=\"Search for dashboards\"\n                    onChange={(x) => setFilters({ search: x })}\n                    value={filters.search}\n                />\n                <div className=\"flex items-center gap-4 flex-wrap\">\n                    <div className=\"flex items-center gap-2\">\n                        <span>Filter to:</span>\n                        <div className=\"flex items-center gap-2\">\n                            <LemonButton\n                                active={filters.pinned}\n                                type=\"secondary\"\n                                size=\"small\"\n                                onClick={() => setFilters({ pinned: !filters.pinned })}\n                                icon={<IconPin />}\n                            >\n                                Pinned\n                            </LemonButton>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                            <LemonButton\n                                active={filters.shared}\n                                type=\"secondary\"\n                                size=\"small\"\n                                onClick={() => setFilters({ shared: !filters.shared })}\n                                icon={<IconShare />}\n                            >\n                                Shared\n                            </LemonButton>\n                        </div>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                        <span>Created by:</span>\n                        <MemberSelect\n                            value={filters.createdBy === 'All users' ? null : filters.createdBy}\n                            onChange={(user) => setFilters({ createdBy: user?.uuid || 'All users' })}\n                        />\n                    </div>\n                    {extraActions}\n                </div>\n            </div>\n            <LemonTable\n                data-attr=\"dashboards-table\"\n                pagination={{ pageSize: 100 }}\n                dataSource={dashboards as DashboardType[]}\n                rowKey=\"id\"\n                rowClassName={(record) => (record._highlight ? 'highlighted' : null)}\n                columns={columns}\n                loading={dashboardsLoading}\n                defaultSorting={tableSorting}\n                onSort={tableSortingChanged}\n                emptyState=\"No dashboards matching your filters!\"\n                nouns={['dashboard', 'dashboards']}\n            />\n        </>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "DashboardsTableContainer", "dashboardsLoading", "dashboardsModel", "dashboards", "filters", "dashboardsLogic", "DashboardsTable", "extraActions", "hideActions", "unpinDashboard", "pinDashboard", "setFilters", "tableSortingChanged", "tableSorting", "hasAvailableFeature", "userLogic", "currentTeam", "teamLogic", "showDuplicateDashboardModal", "duplicateDashboardLogic", "showDeleteDashboardModal", "deleteDashboardLogic", "columns", "pinned", "id", "LemonButton", "IconPinFilled", "IconPin", "_", "name", "description", "is_shared", "effective_privilege_level", "isPrimary", "canEditDashboard", "LemonTableLink", "urls", "Tooltip", "IconShare", "DASHBOARD_CANNOT_EDIT_MESSAGE", "IconLock", "IconHome", "nameCompareFunction", "tags", "ObjectTags", "createdByColumn", "createdAtColumn", "user_access_level", "More", "dashboardLogic", "AccessControlledLemonButton", "LemonDivider", "LemonRow", "Link", "LemonInput", "x", "MemberSelect", "user", "LemonTable", "record"]
}
