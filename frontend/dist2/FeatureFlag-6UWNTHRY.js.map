{
  "version": 3,
  "sources": ["../src/scenes/feature-flags/FeatureFlag.tsx", "../src/scenes/feature-flags/JSONEditorInput.tsx", "../src/scenes/FeatureFlagPermissions.tsx", "../src/scenes/feature-flags/FeatureFlagAnalysisTab.tsx", "../src/scenes/feature-flags/FeatureFlagAutoRollout.tsx", "../src/scenes/feature-flags/FeatureFlagProjects.tsx", "../src/scenes/feature-flags/FeatureFlagSchedule.tsx", "../src/scenes/feature-flags/FeatureFlagStatusIndicator.tsx", "../src/scenes/feature-flags/RecentFeatureFlagInsightsCard.tsx"],
  "sourcesContent": ["import './FeatureFlag.scss'\n\nimport { IconBalance, IconCollapse, IconExpand, IconPlus, IconRewindPlay, IconTrash } from '@posthog/icons'\nimport { LemonDialog, LemonSegmentedButton, LemonSkeleton, LemonSwitch } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { Form, Group } from 'kea-forms'\nimport { router } from 'kea-router'\nimport { AccessControlAction } from 'lib/components/AccessControlAction'\nimport { AccessControlledLemonButton } from 'lib/components/AccessControlledLemonButton'\nimport { AccessDenied } from 'lib/components/AccessDenied'\nimport { ActivityLog } from 'lib/components/ActivityLog/ActivityLog'\nimport { CopyToClipboardInline } from 'lib/components/CopyToClipboard'\nimport { NotFound } from 'lib/components/NotFound'\nimport { ObjectTags } from 'lib/components/ObjectTags/ObjectTags'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonCheckbox } from 'lib/lemon-ui/LemonCheckbox'\nimport { LemonDivider } from 'lib/lemon-ui/LemonDivider'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { LemonInput } from 'lib/lemon-ui/LemonInput/LemonInput'\nimport { LemonTab, LemonTabs } from 'lib/lemon-ui/LemonTabs'\nimport { LemonTag } from 'lib/lemon-ui/LemonTag/LemonTag'\nimport { LemonTextArea } from 'lib/lemon-ui/LemonTextArea/LemonTextArea'\nimport { Lettermark, LettermarkColor } from 'lib/lemon-ui/Lettermark'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { featureFlagLogic as enabledFeaturesLogic } from 'lib/logic/featureFlagLogic'\nimport { alphabet, capitalizeFirstLetter } from 'lib/utils'\nimport posthog from 'posthog-js'\nimport { PostHogFeature } from 'posthog-js/react'\nimport { useEffect, useState } from 'react'\nimport { Dashboard } from 'scenes/dashboard/Dashboard'\nimport { dashboardLogic } from 'scenes/dashboard/dashboardLogic'\nimport { EmptyDashboardComponent } from 'scenes/dashboard/EmptyDashboardComponent'\nimport { UTM_TAGS } from 'scenes/feature-flags/FeatureFlagSnippets'\nimport { JSONEditorInput } from 'scenes/feature-flags/JSONEditorInput'\nimport { FeatureFlagPermissions } from 'scenes/FeatureFlagPermissions'\nimport { concatWithPunctuation } from 'scenes/insights/utils'\nimport { NotebookSelectButton } from 'scenes/notebooks/NotebookSelectButton/NotebookSelectButton'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { tagsModel } from '~/models/tagsModel'\nimport { defaultDataTableColumns } from '~/queries/nodes/DataTable/utils'\nimport { Query } from '~/queries/Query/Query'\nimport { NodeKind } from '~/queries/schema/schema-general'\nimport {\n    AccessControlResourceType,\n    ActivityScope,\n    AnyPropertyFilter,\n    AvailableFeature,\n    DashboardPlacement,\n    DashboardType,\n    FeatureFlagGroupType,\n    FeatureFlagType,\n    NotebookNodeType,\n    PropertyFilterType,\n    PropertyOperator,\n    QueryBasedInsightModel,\n    ReplayTabs,\n} from '~/types'\n\nimport { AnalysisTab } from './FeatureFlagAnalysisTab'\nimport { FeatureFlagAutoRollback } from './FeatureFlagAutoRollout'\nimport { FeatureFlagCodeExample } from './FeatureFlagCodeExample'\nimport { featureFlagLogic, getRecordingFilterForFlagVariant } from './featureFlagLogic'\nimport FeatureFlagProjects from './FeatureFlagProjects'\nimport { FeatureFlagReleaseConditions } from './FeatureFlagReleaseConditions'\nimport FeatureFlagSchedule from './FeatureFlagSchedule'\nimport { featureFlagsLogic, FeatureFlagsTab } from './featureFlagsLogic'\nimport { FeatureFlagStatusIndicator } from './FeatureFlagStatusIndicator'\nimport { RecentFeatureFlagInsights } from './RecentFeatureFlagInsightsCard'\n\nexport const scene: SceneExport = {\n    component: FeatureFlag,\n    logic: featureFlagLogic,\n    paramsToProps: ({ params: { id } }): (typeof featureFlagLogic)['props'] => ({\n        id: id && id !== 'new' ? parseInt(id) : 'new',\n    }),\n}\n\nfunction focusVariantKeyField(index: number): void {\n    setTimeout(\n        () => document.querySelector<HTMLElement>(`.VariantFormList input[data-key-index=\"${index}\"]`)?.focus(),\n        50\n    )\n}\n\nexport function FeatureFlag({ id }: { id?: string } = {}): JSX.Element {\n    const {\n        props,\n        featureFlag,\n        featureFlagLoading,\n        featureFlagMissing,\n        isEditingFlag,\n        newCohortLoading,\n        activeTab,\n        accessDeniedToFeatureFlag,\n    } = useValues(featureFlagLogic)\n    const { featureFlags } = useValues(enabledFeaturesLogic)\n    const {\n        deleteFeatureFlag,\n        restoreFeatureFlag,\n        editFeatureFlag,\n        loadFeatureFlag,\n        saveFeatureFlag,\n        createStaticCohort,\n        setFeatureFlagFilters,\n        setActiveTab,\n    } = useActions(featureFlagLogic)\n\n    const { tags } = useValues(tagsModel)\n    const { hasAvailableFeature } = useValues(userLogic)\n\n    // whether the key for an existing flag is being changed\n    const [hasKeyChanged, setHasKeyChanged] = useState(false)\n\n    const [advancedSettingsExpanded, setAdvancedSettingsExpanded] = useState(false)\n\n    const isNewFeatureFlag = id === 'new' || id === undefined\n\n    if (featureFlagMissing) {\n        return <NotFound object=\"feature flag\" />\n    }\n\n    if (featureFlagLoading) {\n        return (\n            <div className=\"space-y-2\">\n                <LemonSkeleton active className=\"h-4 w-2/5\" />\n                <LemonSkeleton active className=\"h-4 w-full\" />\n                <LemonSkeleton active className=\"h-4 w-full\" />\n                <LemonSkeleton active className=\"h-4 w-3/5\" />\n            </div>\n        )\n    }\n\n    if (accessDeniedToFeatureFlag) {\n        return <AccessDenied object=\"feature flag\" />\n    }\n\n    const tabs = [\n        {\n            label: 'Overview',\n            key: FeatureFlagsTab.OVERVIEW,\n            content: (\n                <>\n                    <div className=\"flex gap-4 flex-wrap\">\n                        <div className=\"w-full\">\n                            <FeatureFlagRollout readOnly />\n                            {!featureFlag.is_remote_configuration && (\n                                <>\n                                    {/* TODO: In a follow up, clean up super_groups and combine into regular ReleaseConditions component */}\n                                    {featureFlag.filters.super_groups && (\n                                        <FeatureFlagReleaseConditions readOnly isSuper filters={featureFlag.filters} />\n                                    )}\n\n                                    <div className=\"flex gap-x-8\">\n                                        <div className=\"grow\">\n                                            <FeatureFlagReleaseConditions readOnly filters={featureFlag.filters} />\n                                        </div>\n\n                                        <div className=\"max-w-120 w-full\">\n                                            <h3 className=\"l3\">Insights that use this feature flag</h3>\n                                            <RecentFeatureFlagInsights />\n                                            <div className=\"my-4\" />\n                                        </div>\n                                    </div>\n\n                                    {featureFlags[FEATURE_FLAGS.AUTO_ROLLBACK_FEATURE_FLAGS] && (\n                                        <FeatureFlagAutoRollback readOnly />\n                                    )}\n                                    <LemonDivider className=\"mb-4\" />\n                                </>\n                            )}\n                        </div>\n                    </div>\n\n                    <FeatureFlagCodeExample featureFlag={featureFlag} />\n                </>\n            ),\n        },\n    ] as LemonTab<FeatureFlagsTab>[]\n\n    if (featureFlag.key && id) {\n        tabs.push({\n            label: 'Usage',\n            key: FeatureFlagsTab.USAGE,\n            content: <UsageTab id={id} featureFlag={featureFlag} />,\n        })\n\n        tabs.push({\n            label: 'Projects',\n            key: FeatureFlagsTab.PROJECTS,\n            content: <FeatureFlagProjects />,\n        })\n\n        tabs.push({\n            label: 'Schedule',\n            key: FeatureFlagsTab.SCHEDULE,\n            content: <FeatureFlagSchedule />,\n        })\n    }\n\n    if (featureFlags[FEATURE_FLAGS.FF_DASHBOARD_TEMPLATES] && featureFlag.key && id) {\n        tabs.push({\n            label: (\n                <div className=\"flex flex-row\">\n                    <div>Analysis</div>\n                    <LemonTag className=\"ml-1 float-right uppercase\" type=\"warning\">\n                        {' '}\n                        Beta\n                    </LemonTag>\n                </div>\n            ),\n            key: FeatureFlagsTab.Analysis,\n            content: (\n                <PostHogFeature flag={FEATURE_FLAGS.FF_DASHBOARD_TEMPLATES} match={true}>\n                    <AnalysisTab id={id} featureFlag={featureFlag} />\n                </PostHogFeature>\n            ),\n        })\n    }\n\n    if (featureFlag.id) {\n        tabs.push({\n            label: 'History',\n            key: FeatureFlagsTab.HISTORY,\n            content: <ActivityLog scope={ActivityScope.FEATURE_FLAG} id={featureFlag.id} />,\n        })\n    }\n\n    if (featureFlag.can_edit) {\n        tabs.push({\n            label: 'Permissions',\n            key: FeatureFlagsTab.PERMISSIONS,\n            content: <FeatureFlagPermissions featureFlag={featureFlag} />,\n        })\n    }\n\n    return (\n        <>\n            <div className=\"feature-flag\">\n                {isNewFeatureFlag || isEditingFlag ? (\n                    <Form\n                        id=\"feature-flag\"\n                        logic={featureFlagLogic}\n                        props={props}\n                        formKey=\"featureFlag\"\n                        enableFormOnSubmit\n                        className=\"space-y-4\"\n                    >\n                        <PageHeader\n                            buttons={\n                                <div className=\"flex items-center gap-2\">\n                                    <LemonButton\n                                        data-attr=\"cancel-feature-flag\"\n                                        type=\"secondary\"\n                                        onClick={() => {\n                                            if (isEditingFlag) {\n                                                editFeatureFlag(false)\n                                                loadFeatureFlag()\n                                            } else {\n                                                router.actions.push(urls.featureFlags())\n                                            }\n                                        }}\n                                    >\n                                        Cancel\n                                    </LemonButton>\n                                    <LemonButton\n                                        type=\"primary\"\n                                        data-attr=\"save-feature-flag\"\n                                        htmlType=\"submit\"\n                                        form=\"feature-flag\"\n                                    >\n                                        Save\n                                    </LemonButton>\n                                </div>\n                            }\n                        />\n                        {featureFlag.experiment_set && featureFlag.experiment_set.length > 0 && (\n                            <LemonBanner type=\"warning\">\n                                This feature flag is linked to an experiment. Edit settings here only for advanced\n                                functionality. If unsure, go back to{' '}\n                                <Link to={urls.experiment(featureFlag.experiment_set[0])}>\n                                    the experiment creation screen.\n                                </Link>\n                            </LemonBanner>\n                        )}\n                        <div className=\"my-4\">\n                            <div className=\"max-w-1/2 space-y-4\">\n                                <LemonField\n                                    name=\"key\"\n                                    label=\"Key\"\n                                    help={\n                                        hasKeyChanged && id !== 'new' ? (\n                                            <span className=\"text-warning\">\n                                                <b>Warning! </b>Changing this key will\n                                                <Link\n                                                    to={`https://posthog.com/docs/feature-flags${UTM_TAGS}#feature-flag-persistence`}\n                                                    target=\"_blank\"\n                                                    targetBlankIcon\n                                                >\n                                                    {' '}\n                                                    affect the persistence of your flag\n                                                </Link>\n                                            </span>\n                                        ) : undefined\n                                    }\n                                >\n                                    {({ value, onChange }) => (\n                                        <>\n                                            <LemonInput\n                                                value={value}\n                                                onChange={(v) => {\n                                                    if (v !== value) {\n                                                        setHasKeyChanged(true)\n                                                    }\n                                                    onChange(v)\n                                                }}\n                                                data-attr=\"feature-flag-key\"\n                                                className=\"ph-ignore-input\"\n                                                autoFocus\n                                                placeholder=\"examples: new-landing-page, betaFeature, ab_test_1\"\n                                                autoComplete=\"off\"\n                                                autoCapitalize=\"off\"\n                                                autoCorrect=\"off\"\n                                                spellCheck={false}\n                                            />\n                                            <span className=\"text-secondary text-sm\">\n                                                Feature flag keys must be unique\n                                            </span>\n                                        </>\n                                    )}\n                                </LemonField>\n\n                                <LemonField name=\"name\" label=\"Description\">\n                                    <LemonTextArea\n                                        className=\"ph-ignore-input\"\n                                        data-attr=\"feature-flag-description\"\n                                        defaultValue={featureFlag.name || ''}\n                                    />\n                                </LemonField>\n                                {hasAvailableFeature(AvailableFeature.TAGGING) && (\n                                    <LemonField name=\"tags\" label=\"Tags\">\n                                        {({ value, onChange }) => {\n                                            return (\n                                                <ObjectTags\n                                                    saving={featureFlagLoading}\n                                                    tags={value}\n                                                    onChange={(tags) => onChange(tags)}\n                                                    tagsAvailable={tags.filter(\n                                                        (tag) => !featureFlag.tags?.includes(tag)\n                                                    )}\n                                                    className=\"mt-2\"\n                                                />\n                                            )\n                                        }}\n                                    </LemonField>\n                                )}\n                                <LemonField name=\"active\">\n                                    {({ value, onChange }) => (\n                                        <div className=\"border rounded p-4\">\n                                            <LemonCheckbox\n                                                id=\"flag-enabled-checkbox\"\n                                                label=\"Enable feature flag\"\n                                                onChange={() => onChange(!value)}\n                                                checked={value}\n                                                dataAttr=\"feature-flag-enabled-checkbox\"\n                                            />\n                                        </div>\n                                    )}\n                                </LemonField>\n                                {!featureFlag.is_remote_configuration && (\n                                    <LemonField name=\"ensure_experience_continuity\">\n                                        {({ value, onChange }) => (\n                                            <div className=\"border rounded p-4\">\n                                                <LemonCheckbox\n                                                    id=\"continuity-checkbox\"\n                                                    label=\"Persist flag across authentication steps\"\n                                                    onChange={() => onChange(!value)}\n                                                    fullWidth\n                                                    checked={value}\n                                                />\n                                                <div className=\"text-secondary text-sm pl-7\">\n                                                    If your feature flag is applied before identifying the user, use\n                                                    this to ensure that the flag value remains consistent for the same\n                                                    user. Depending on your setup, this option might not always be\n                                                    suitable. This feature requires creating profiles for anonymous\n                                                    users.{' '}\n                                                    <Link\n                                                        to=\"https://posthog.com/docs/feature-flags/creating-feature-flags#persisting-feature-flags-across-authentication-steps\"\n                                                        target=\"_blank\"\n                                                    >\n                                                        Learn more\n                                                    </Link>\n                                                </div>\n                                            </div>\n                                        )}\n                                    </LemonField>\n                                )}\n                            </div>\n                        </div>\n                        <LemonDivider />\n                        <FeatureFlagRollout />\n                        <LemonDivider />\n                        {!featureFlag.is_remote_configuration && (\n                            <>\n                                <FeatureFlagReleaseConditions\n                                    id={`${featureFlag.id}`}\n                                    filters={featureFlag.filters}\n                                    onChange={setFeatureFlagFilters}\n                                />\n                                <LemonDivider />\n                            </>\n                        )}\n\n                        <FeatureFlagCodeExample featureFlag={featureFlag} />\n                        <LemonDivider />\n                        {isNewFeatureFlag && (\n                            <>\n                                <div>\n                                    <LemonButton\n                                        fullWidth\n                                        onClick={() => setAdvancedSettingsExpanded(!advancedSettingsExpanded)}\n                                        sideIcon={advancedSettingsExpanded ? <IconCollapse /> : <IconExpand />}\n                                    >\n                                        <div>\n                                            <h3 className=\"l4 mt-2\">Advanced settings</h3>\n                                            <div className=\"text-secondary mb-2 font-medium\">\n                                                Define who can modify this flag.\n                                            </div>\n                                        </div>\n                                    </LemonButton>\n                                </div>\n                                {advancedSettingsExpanded && (\n                                    <>\n                                        {featureFlags[FEATURE_FLAGS.AUTO_ROLLBACK_FEATURE_FLAGS] && (\n                                            <FeatureFlagAutoRollback />\n                                        )}\n                                        <div className=\"border rounded bg-surface-primary\">\n                                            <h3 className=\"p-2 mb-0\">Permissions</h3>\n                                            <LemonDivider className=\"my-0\" />\n                                            <div className=\"p-3\">\n                                                <FeatureFlagPermissions featureFlag={featureFlag} />\n                                            </div>\n                                        </div>\n                                    </>\n                                )}\n                                <LemonDivider />\n                            </>\n                        )}\n                        <div className=\"flex items-center gap-2 justify-end\">\n                            <LemonButton\n                                data-attr=\"cancel-feature-flag\"\n                                type=\"secondary\"\n                                onClick={() => {\n                                    if (isEditingFlag) {\n                                        editFeatureFlag(false)\n                                        loadFeatureFlag()\n                                    } else {\n                                        router.actions.push(urls.featureFlags())\n                                    }\n                                }}\n                            >\n                                Cancel\n                            </LemonButton>\n                            <LemonButton\n                                type=\"primary\"\n                                data-attr=\"save-feature-flag\"\n                                htmlType=\"submit\"\n                                form=\"feature-flag\"\n                            >\n                                Save\n                            </LemonButton>\n                        </div>\n                    </Form>\n                ) : (\n                    <>\n                        <PageHeader\n                            notebookProps={{\n                                href: urls.featureFlag(id),\n                            }}\n                            caption={\n                                <div>\n                                    <div className=\"flex flex-wrap items-center gap-2\">\n                                        <div className=\"flex space-x-1\">\n                                            <div>\n                                                <span className=\"text-secondary\">Key:</span>{' '}\n                                                <CopyToClipboardInline\n                                                    tooltipMessage={null}\n                                                    description=\"Feature flag key\"\n                                                    className=\"justify-end\"\n                                                >\n                                                    {featureFlag.key}\n                                                </CopyToClipboardInline>\n                                            </div>\n                                        </div>\n                                        <div>\n                                            {featureFlag?.tags && (\n                                                <>\n                                                    {featureFlag.tags.length > 0 ? (\n                                                        <span className=\"text-secondary\">Tags:</span>\n                                                    ) : null}{' '}\n                                                    {featureFlag.can_edit ? (\n                                                        <ObjectTags\n                                                            tags={featureFlag.tags}\n                                                            onChange={(tags) => {\n                                                                saveFeatureFlag({ tags })\n                                                            }}\n                                                            tagsAvailable={tags.filter(\n                                                                (tag) => !featureFlag.tags?.includes(tag)\n                                                            )}\n                                                        />\n                                                    ) : featureFlag.tags.length > 0 ? (\n                                                        <ObjectTags tags={featureFlag.tags} staticOnly />\n                                                    ) : null}\n                                                </>\n                                            )}\n                                        </div>\n                                    </div>\n                                    <div className=\"mt-2\">{featureFlag.name || <i>Description (optional)</i>}</div>\n                                </div>\n                            }\n                            buttons={\n                                <>\n                                    <div className=\"flex items-center gap-2\">\n                                        <More\n                                            loading={newCohortLoading}\n                                            overlay={\n                                                <>\n                                                    {featureFlags[FEATURE_FLAGS.FEATURE_FLAG_COHORT_CREATION] && (\n                                                        <>\n                                                            <LemonButton\n                                                                loading={newCohortLoading}\n                                                                onClick={() => {\n                                                                    createStaticCohort()\n                                                                }}\n                                                                fullWidth\n                                                            >\n                                                                Create Cohort\n                                                            </LemonButton>\n                                                            <LemonDivider />\n                                                        </>\n                                                    )}\n\n                                                    <AccessControlledLemonButton\n                                                        userAccessLevel={featureFlag.user_access_level}\n                                                        minAccessLevel=\"editor\"\n                                                        resourceType={AccessControlResourceType.FeatureFlag}\n                                                        data-attr={\n                                                            featureFlag.deleted\n                                                                ? 'restore-feature-flag'\n                                                                : 'delete-feature-flag'\n                                                        }\n                                                        status=\"danger\"\n                                                        fullWidth\n                                                        onClick={() => {\n                                                            featureFlag.deleted\n                                                                ? restoreFeatureFlag(featureFlag)\n                                                                : deleteFeatureFlag(featureFlag)\n                                                        }}\n                                                        disabledReason={\n                                                            !featureFlag.can_edit\n                                                                ? \"You have only 'View' access for this feature flag. To make changes, please contact the flag's creator.\"\n                                                                : (featureFlag.features?.length || 0) > 0\n                                                                ? 'This feature flag is in use with an early access feature. Delete the early access feature to delete this flag'\n                                                                : (featureFlag.experiment_set?.length || 0) > 0\n                                                                ? 'This feature flag is linked to an experiment. Delete the experiment to delete this flag'\n                                                                : null\n                                                        }\n                                                    >\n                                                        {featureFlag.deleted ? 'Restore' : 'Delete'} feature flag\n                                                    </AccessControlledLemonButton>\n                                                </>\n                                            }\n                                        />\n\n                                        <LemonDivider vertical />\n\n                                        <NotebookSelectButton\n                                            resource={{\n                                                type: NotebookNodeType.FeatureFlag,\n                                                attrs: { id: featureFlag.id },\n                                            }}\n                                            type=\"secondary\"\n                                        />\n\n                                        <AccessControlledLemonButton\n                                            userAccessLevel={featureFlag.user_access_level}\n                                            minAccessLevel=\"editor\"\n                                            resourceType={AccessControlResourceType.FeatureFlag}\n                                            data-attr=\"edit-feature-flag\"\n                                            type=\"secondary\"\n                                            disabledReason={\n                                                !featureFlag.can_edit\n                                                    ? \"You have only 'View' access for this feature flag. To make changes, please contact the flag's creator.\"\n                                                    : featureFlag.deleted\n                                                    ? 'This feature flag has been deleted. Restore it to edit.'\n                                                    : null\n                                            }\n                                            onClick={() => {\n                                                editFeatureFlag(true)\n                                            }}\n                                        >\n                                            Edit\n                                        </AccessControlledLemonButton>\n                                    </div>\n                                </>\n                            }\n                        />\n                        <LemonTabs\n                            activeKey={activeTab}\n                            onChange={(tab) => tab !== activeTab && setActiveTab(tab)}\n                            tabs={tabs}\n                        />\n                    </>\n                )}\n            </div>\n        </>\n    )\n}\n\nfunction UsageTab({ featureFlag }: { id: string; featureFlag: FeatureFlagType }): JSX.Element {\n    const {\n        key: featureFlagKey,\n        usage_dashboard: dashboardId,\n        has_enriched_analytics: hasEnrichedAnalytics,\n    } = featureFlag\n    const { generateUsageDashboard, enrichUsageDashboard } = useActions(featureFlagLogic)\n    const { featureFlagLoading } = useValues(featureFlagLogic)\n    let dashboard: DashboardType<QueryBasedInsightModel> | null = null\n    if (dashboardId) {\n        // FIXME: Refactor out into <ConnectedDashboard />, as React hooks under conditional branches are no good\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const dashboardLogicValues = useValues(\n            dashboardLogic({ id: dashboardId, placement: DashboardPlacement.FeatureFlag })\n        )\n        dashboard = dashboardLogicValues.dashboard\n    }\n\n    const { closeEnrichAnalyticsNotice } = useActions(featureFlagsLogic)\n    const { enrichAnalyticsNoticeAcknowledged } = useValues(featureFlagsLogic)\n\n    useEffect(() => {\n        if (\n            dashboard &&\n            hasEnrichedAnalytics &&\n            !(dashboard.tiles?.find((tile) => (tile.insight?.name?.indexOf('Feature Viewed') ?? -1) > -1) !== undefined)\n        ) {\n            enrichUsageDashboard()\n        }\n    }, [dashboard, hasEnrichedAnalytics, enrichUsageDashboard])\n\n    const propertyFilter: AnyPropertyFilter[] = [\n        {\n            key: '$feature_flag',\n            type: PropertyFilterType.Event,\n            value: featureFlagKey,\n            operator: PropertyOperator.Exact,\n        },\n    ]\n\n    if (featureFlag.deleted) {\n        return (\n            <div data-attr=\"feature-flag-usage-deleted-banner\">\n                <LemonBanner type=\"error\">This feature flag has been deleted.</LemonBanner>\n            </div>\n        )\n    }\n\n    return (\n        <div data-attr=\"feature-flag-usage-container\">\n            {dashboard ? (\n                <>\n                    {!hasEnrichedAnalytics && !enrichAnalyticsNoticeAcknowledged && (\n                        <LemonBanner type=\"info\" className=\"mb-3\" onClose={() => closeEnrichAnalyticsNotice()}>\n                            Get richer insights automatically by{' '}\n                            <Link to=\"https://posthog.com/docs/libraries/js#enriched-analytics\" target=\"_blank\">\n                                enabling enriched analytics for flags{' '}\n                            </Link>\n                        </LemonBanner>\n                    )}\n                    <Dashboard id={dashboardId!.toString()} placement={DashboardPlacement.FeatureFlag} />\n                </>\n            ) : (\n                <div>\n                    <b>Dashboard</b>\n                    <div className=\"text-secondary mb-2\">\n                        There is currently no connected dashboard to this feature flag. If there was previously a\n                        connected dashboard, it may have been deleted.\n                    </div>\n                    {featureFlagLoading ? (\n                        <EmptyDashboardComponent loading={true} canEdit={false} />\n                    ) : (\n                        <LemonButton type=\"primary\" onClick={() => generateUsageDashboard()}>\n                            Generate Usage Dashboard\n                        </LemonButton>\n                    )}\n                </div>\n            )}\n            <div className=\"mt-4 mb-4\">\n                <b>Log</b>\n                <div className=\"text-secondary\">{`Feature flag calls for \"${featureFlagKey}\" will appear here`}</div>\n            </div>\n            <Query\n                query={{\n                    kind: NodeKind.DataTableNode,\n                    source: {\n                        kind: NodeKind.EventsQuery,\n                        select: [...defaultDataTableColumns(NodeKind.EventsQuery), 'properties.$feature_flag_response'],\n                        event: '$feature_flag_called',\n                        properties: propertyFilter,\n                        after: '-30d',\n                    },\n                    full: false,\n                    showDateRange: true,\n                }}\n            />\n        </div>\n    )\n}\n\nfunction variantConcatWithPunctuation(phrases: string[]): string {\n    if (phrases === null || phrases.length < 3) {\n        return concatWithPunctuation(phrases)\n    }\n    return `${phrases[0]} and ${phrases.length - 1} more sets`\n}\n\nfunction FeatureFlagRollout({ readOnly }: { readOnly?: boolean }): JSX.Element {\n    const {\n        multivariateEnabled,\n        variants,\n        areVariantRolloutsValid,\n        variantRolloutSum,\n        nonEmptyVariants,\n        aggregationTargetName,\n        featureFlag,\n        recordingFilterForFlag,\n        flagStatus,\n        flagType,\n        flagTypeString,\n        hasEncryptedPayloadBeenSaved,\n        hasExperiment,\n        isDraftExperiment,\n    } = useValues(featureFlagLogic)\n    const {\n        distributeVariantsEqually,\n        addVariant,\n        removeVariant,\n        setMultivariateEnabled,\n        setFeatureFlag,\n        saveFeatureFlag,\n        setRemoteConfigEnabled,\n        resetEncryptedPayload,\n    } = useActions(featureFlagLogic)\n\n    const filterGroups: FeatureFlagGroupType[] = featureFlag.filters.groups || []\n\n    const confirmRevertMultivariateEnabled = (): void => {\n        LemonDialog.open({\n            title: 'Change value type?',\n            description: 'The existing variants will be lost',\n            primaryButton: {\n                children: 'Confirm',\n                type: 'primary',\n                onClick: () => setMultivariateEnabled(false),\n                size: 'small',\n            },\n            secondaryButton: {\n                children: 'Cancel',\n                type: 'tertiary',\n                size: 'small',\n            },\n        })\n    }\n\n    const confirmEncryptedPayloadReset = (): void => {\n        LemonDialog.open({\n            title: 'Reset payload?',\n            description: 'The existing payload will not be reset until the feature flag is saved.',\n            primaryButton: {\n                children: 'Reset',\n                onClick: resetEncryptedPayload,\n                size: 'small',\n                status: 'danger',\n            },\n            secondaryButton: {\n                children: 'Cancel',\n                type: 'tertiary',\n                size: 'small',\n            },\n        })\n    }\n\n    const reportViewRecordingsClicked = (variantKey?: string): void => {\n        const properties: Record<string, string> = {\n            multivariate: multivariateEnabled.toString(),\n        }\n        if (variantKey) {\n            properties.variant_key = variantKey\n        }\n        posthog.capture('viewed recordings from feature flag', properties)\n    }\n\n    const canEditVariant = (index: number): boolean => {\n        if (hasExperiment && !isDraftExperiment) {\n            return false\n        }\n        if (hasExperiment && isDraftExperiment && index === 0) {\n            return false\n        }\n        return true\n    }\n\n    return (\n        <>\n            {readOnly ? (\n                <>\n                    <div className=\"flex flex-col mb-4\">\n                        <div className=\"grid grid-cols-8\">\n                            <div className=\"col-span-2 card-secondary\">Status</div>\n                            <div className=\"col-span-6 card-secondary\">Type</div>\n                            <div className=\"col-span-2\">\n                                {featureFlag.deleted ? (\n                                    <LemonTag size=\"medium\" type=\"danger\" className=\"uppercase\">\n                                        Deleted\n                                    </LemonTag>\n                                ) : (\n                                    <div className=\"flex gap-2\">\n                                        <AccessControlAction\n                                            userAccessLevel={featureFlag.user_access_level}\n                                            minAccessLevel=\"editor\"\n                                            resourceType={AccessControlResourceType.FeatureFlag}\n                                        >\n                                            {({ disabledReason: accessControlDisabledReason }) => (\n                                                <>\n                                                    <LemonSwitch\n                                                        onChange={(newValue) => {\n                                                            LemonDialog.open({\n                                                                title: `${\n                                                                    newValue === true ? 'Enable' : 'Disable'\n                                                                } this flag?`,\n                                                                description: `This flag will be immediately ${\n                                                                    newValue === true\n                                                                        ? 'rolled out to'\n                                                                        : 'rolled back from'\n                                                                } the users matching the release conditions.`,\n                                                                primaryButton: {\n                                                                    children: 'Confirm',\n                                                                    type: 'primary',\n                                                                    onClick: () => {\n                                                                        const updatedFlag = {\n                                                                            ...featureFlag,\n                                                                            active: newValue,\n                                                                        }\n                                                                        setFeatureFlag(updatedFlag)\n                                                                        saveFeatureFlag(updatedFlag)\n                                                                    },\n                                                                    size: 'small',\n                                                                },\n                                                                secondaryButton: {\n                                                                    children: 'Cancel',\n                                                                    type: 'tertiary',\n                                                                    size: 'small',\n                                                                },\n                                                            })\n                                                        }}\n                                                        label=\"Enabled\"\n                                                        disabledReason={\n                                                            accessControlDisabledReason ||\n                                                            (!featureFlag.can_edit\n                                                                ? \"You only have view access to this feature flag. To make changes, contact the flag's creator.\"\n                                                                : null)\n                                                        }\n                                                        checked={featureFlag.active}\n                                                    />\n                                                    {!featureFlag.is_remote_configuration && (\n                                                        <FeatureFlagStatusIndicator flagStatus={flagStatus} />\n                                                    )}\n                                                </>\n                                            )}\n                                        </AccessControlAction>\n                                    </div>\n                                )}\n                            </div>\n                            <div className=\"col-span-6\">\n                                <span className=\"mt-1\">{flagTypeString}</span>\n                            </div>\n                        </div>\n\n                        <span className=\"card-secondary mt-4\">Flag persistence</span>\n                        <span>\n                            This flag{' '}\n                            <b>{featureFlag.ensure_experience_continuity ? 'persists' : 'does not persist'} </b>\n                            across authentication events.\n                        </span>\n                    </div>\n                    <LemonDivider className=\"my-3\" />\n                    {featureFlag.filters.multivariate && (\n                        <>\n                            <h3 className=\"l3\">Variant keys</h3>\n                            <div className=\"border rounded p-4 mb-4 bg-surface-primary\">\n                                <div className=\"grid grid-cols-10 gap-4 font-semibold\">\n                                    <div className=\"col-span-2\">Key</div>\n                                    <div className=\"col-span-2\">Description</div>\n                                    <div className=\"col-span-2\">Payload</div>\n                                    <div>Rollout</div>\n                                </div>\n                                <LemonDivider className=\"my-3\" />\n                                {variants.map((variant, index) => (\n                                    <div key={index}>\n                                        <div className=\"grid grid-cols-10 gap-4\">\n                                            <div className=\"col-span-2\">\n                                                <Lettermark name={alphabet[index]} color={LettermarkColor.Gray} />\n                                                <CopyToClipboardInline\n                                                    tooltipMessage={null}\n                                                    description=\"key\"\n                                                    style={{\n                                                        marginLeft: '0.5rem',\n                                                    }}\n                                                    iconStyle={{ color: 'var(--text-secondary)' }}\n                                                >\n                                                    {variant.key}\n                                                </CopyToClipboardInline>\n                                            </div>\n                                            <div className=\"col-span-2\">\n                                                <span className={variant.name ? '' : 'text-muted'}>\n                                                    {variant.name || 'There is no description for this variant key'}\n                                                </span>\n                                            </div>\n                                            <div className=\"col-span-2\">\n                                                {featureFlag.filters.payloads?.[index] ? (\n                                                    <JSONEditorInput\n                                                        readOnly={true}\n                                                        value={featureFlag.filters.payloads[index]}\n                                                    />\n                                                ) : (\n                                                    <span className=\"text-secondary\">\n                                                        No payload associated with this variant\n                                                    </span>\n                                                )}\n                                            </div>\n                                            <div>{variant.rollout_percentage}%</div>\n                                            <div className=\"col-span-2\">\n                                                <LemonButton\n                                                    size=\"xsmall\"\n                                                    icon={<IconRewindPlay />}\n                                                    type=\"secondary\"\n                                                    onClick={() => {\n                                                        reportViewRecordingsClicked(variant.key)\n                                                        router.actions.push(\n                                                            urls.replay(\n                                                                ReplayTabs.Home,\n                                                                getRecordingFilterForFlagVariant(\n                                                                    featureFlag.key,\n                                                                    variant.key,\n                                                                    featureFlag.has_enriched_analytics\n                                                                )\n                                                            )\n                                                        )\n                                                    }}\n                                                >\n                                                    View recordings\n                                                </LemonButton>\n                                            </div>\n                                        </div>\n                                        {index !== variants.length - 1 && <LemonDivider className=\"my-3\" />}\n                                    </div>\n                                ))}\n                            </div>\n                        </>\n                    )}\n                </>\n            ) : (\n                <div className=\"mb-8\">\n                    <h3 className=\"l3\">Served value</h3>\n                    <div className=\"mb-2\" data-attr=\"feature-flag-served-value-segmented-button\">\n                        <LemonSegmentedButton\n                            size=\"small\"\n                            options={[\n                                {\n                                    label: 'Release toggle (boolean)',\n                                    value: 'boolean',\n                                    disabledReason: hasExperiment\n                                        ? 'This feature flag is associated with an experiment.'\n                                        : undefined,\n                                },\n                                {\n                                    label: <span>Multiple variants with rollout percentages (A/B/n test)</span>,\n                                    value: 'multivariate',\n                                },\n                                {\n                                    label: <span>Remote config (single payload)</span>,\n                                    value: 'remote_config',\n                                    disabledReason: hasExperiment\n                                        ? 'This feature flag is associated with an experiment.'\n                                        : undefined,\n                                },\n                            ]}\n                            onChange={(value) => {\n                                if (['boolean', 'remote_config'].includes(value) && nonEmptyVariants.length) {\n                                    confirmRevertMultivariateEnabled()\n                                } else {\n                                    setMultivariateEnabled(value === 'multivariate')\n                                    setRemoteConfigEnabled(value === 'remote_config')\n                                    focusVariantKeyField(0)\n                                }\n                            }}\n                            value={flagType}\n                        />\n                    </div>\n                    <div className=\"text-secondary mb-4\">\n                        {featureFlag.is_remote_configuration ? (\n                            <span>\n                                Remote config flags provide runtime configuration values in your app. Read more in the{' '}\n                                <Link to=\"https://posthog.com/docs/feature-flags/remote-config\">\n                                    remote config flags documentation\n                                </Link>\n                                .\n                            </span>\n                        ) : (\n                            <>\n                                {capitalizeFirstLetter(aggregationTargetName)} will be served{' '}\n                                {multivariateEnabled ? (\n                                    <>\n                                        <strong>a variant key</strong> according to the below distribution\n                                    </>\n                                ) : (\n                                    <strong>\n                                        <code>true</code>\n                                    </strong>\n                                )}{' '}\n                                <span>if they match one or more release condition groups.</span>\n                            </>\n                        )}\n                    </div>\n                </div>\n            )}\n            {!multivariateEnabled && (\n                <div className=\"mb-6 flex flex-col gap-y-4\">\n                    <div>\n                        <h3 className=\"l3\">Payload</h3>\n                        {readOnly ? (\n                            featureFlag.filters.payloads?.['true'] ? (\n                                <JSONEditorInput readOnly={readOnly} value={featureFlag.filters.payloads?.['true']} />\n                            ) : (\n                                <span className=\"text-secondary\">No payload associated with this flag</span>\n                            )\n                        ) : (\n                            <div className=\"w-1/2\">\n                                <div className=\"text-secondary mb-4\">\n                                    {featureFlag.is_remote_configuration ? (\n                                        <>Specify a valid JSON payload to be returned for the config flag</>\n                                    ) : (\n                                        <>\n                                            Specify a valid JSON payload to be returned when the served value is{' '}\n                                            <strong>\n                                                <code>true</code>\n                                            </strong>\n                                        </>\n                                    )}\n                                </div>\n                                {featureFlag.is_remote_configuration && (\n                                    <LemonField name=\"has_encrypted_payloads\">\n                                        {({ value, onChange }) => (\n                                            <div className=\"border rounded mb-4 p-4\">\n                                                <LemonCheckbox\n                                                    id=\"flag-payload-encrypted-checkbox\"\n                                                    label=\"Encrypt remote configuration payload\"\n                                                    onChange={() => onChange(!value)}\n                                                    checked={value}\n                                                    dataAttr=\"feature-flag-payload-encrypted-checkbox\"\n                                                    disabledReason={\n                                                        hasEncryptedPayloadBeenSaved &&\n                                                        'An encrypted payload has already been saved for this flag. Reset the payload or create a new flag to create an unencrypted configuration payload.'\n                                                    }\n                                                />\n                                            </div>\n                                        )}\n                                    </LemonField>\n                                )}\n                                <div className=\"flex gap-2\">\n                                    <Group name={['filters', 'payloads']}>\n                                        <LemonField name=\"true\" className=\"grow\">\n                                            <JSONEditorInput\n                                                readOnly={\n                                                    readOnly ||\n                                                    (featureFlag.has_encrypted_payloads &&\n                                                        Boolean(featureFlag.filters?.payloads?.['true']))\n                                                }\n                                                placeholder={'Examples: \"A string\", 2500, {\"key\": \"value\"}'}\n                                            />\n                                        </LemonField>\n                                    </Group>\n                                    {featureFlag.has_encrypted_payloads && (\n                                        <LemonButton\n                                            className=\"grow-0\"\n                                            icon={<IconTrash />}\n                                            type=\"secondary\"\n                                            size=\"small\"\n                                            status=\"danger\"\n                                            onClick={confirmEncryptedPayloadReset}\n                                        >\n                                            Reset\n                                        </LemonButton>\n                                    )}\n                                </div>\n                                {featureFlag.is_remote_configuration && (\n                                    <div className=\"text-sm text-secondary mt-4\">\n                                        Note: remote config flags must be accessed through payloads, e.g.{' '}\n                                        <span className=\"font-mono font-bold\">\n                                            {featureFlag.has_encrypted_payloads\n                                                ? 'getDecryptedFeatureFlagPayload'\n                                                : 'getFeatureFlagPayload'}\n                                        </span>\n                                        . Using standard SDK methods such as{' '}\n                                        <span className=\"font-mono font-bold\">getFeatureFlag</span> or{' '}\n                                        <span className=\"font-mono font-bold\">isFeatureEnabled</span> will always return{' '}\n                                        <span className=\"font-mono font-bold\">true</span>\n                                    </div>\n                                )}\n                            </div>\n                        )}\n                    </div>\n                    {readOnly && !featureFlag.is_remote_configuration && (\n                        <div>\n                            <h3 className=\"l3\">Recordings</h3>\n                            <p>Watch recordings of people who have been exposed to the feature flag.</p>\n                            <div className=\"inline-block\">\n                                <LemonButton\n                                    onClick={() => {\n                                        reportViewRecordingsClicked()\n                                        router.actions.push(urls.replay(ReplayTabs.Home, recordingFilterForFlag))\n                                    }}\n                                    icon={<IconRewindPlay />}\n                                    type=\"secondary\"\n                                    size=\"small\"\n                                >\n                                    View recordings\n                                </LemonButton>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            )}\n            {!readOnly && multivariateEnabled && (\n                <div className=\"feature-flag-variants\">\n                    <h3 className=\"l4\">Variant keys</h3>\n                    <span>The rollout percentage of feature flag variants must add up to 100%</span>\n                    <div className=\"VariantFormList space-y-2\">\n                        <div className=\"VariantFormList__row grid label-row gap-2 items-center\">\n                            <div />\n                            <div className=\"col-span-4\">Variant key</div>\n                            <div className=\"col-span-6\">Description</div>\n                            <div className=\"col-span-8\">\n                                <div className=\"flex flex-col\">\n                                    <b>Payload</b>\n                                    <span className=\"text-secondary font-normal\">\n                                        Specify return payload when the variant key matches\n                                    </span>\n                                </div>\n                            </div>\n                            <div className=\"col-span-3 flex justify-between items-center gap-1\">\n                                <span>Rollout</span>\n                                <LemonButton\n                                    onClick={distributeVariantsEqually}\n                                    tooltip=\"Normalize variant rollout percentages\"\n                                >\n                                    <IconBalance />\n                                </LemonButton>\n                            </div>\n                        </div>\n                        {variants.map((variant, index) => (\n                            <Group key={index} name=\"filters\">\n                                <div className=\"VariantFormList__row grid gap-2\">\n                                    <div className=\"flex items-center justify-center\">\n                                        <Lettermark name={alphabet[index]} color={LettermarkColor.Gray} />\n                                    </div>\n                                    <div className=\"col-span-4\">\n                                        <LemonField name={['multivariate', 'variants', index, 'key']}>\n                                            <LemonInput\n                                                data-attr=\"feature-flag-variant-key\"\n                                                data-key-index={index.toString()}\n                                                className=\"ph-ignore-input\"\n                                                placeholder={`example-variant-${index + 1}`}\n                                                autoComplete=\"off\"\n                                                autoCapitalize=\"off\"\n                                                autoCorrect=\"off\"\n                                                spellCheck={false}\n                                                disabled={!canEditVariant(index)}\n                                            />\n                                        </LemonField>\n                                    </div>\n                                    <div className=\"col-span-6\">\n                                        <LemonField name={['multivariate', 'variants', index, 'name']}>\n                                            <LemonInput\n                                                data-attr=\"feature-flag-variant-name\"\n                                                className=\"ph-ignore-input\"\n                                                placeholder=\"Description\"\n                                            />\n                                        </LemonField>\n                                    </div>\n                                    <div className=\"col-span-8\">\n                                        <LemonField name={['payloads', index]}>\n                                            {({ value, onChange }) => {\n                                                return (\n                                                    <JSONEditorInput\n                                                        onChange={onChange}\n                                                        value={value}\n                                                        placeholder='{\"key\": \"value\"}'\n                                                    />\n                                                )\n                                            }}\n                                        </LemonField>\n                                    </div>\n                                    <div className=\"col-span-3\">\n                                        <LemonField name={['multivariate', 'variants', index, 'rollout_percentage']}>\n                                            {({ value, onChange }) => (\n                                                <div>\n                                                    <LemonInput\n                                                        type=\"number\"\n                                                        min={0}\n                                                        max={100}\n                                                        // .toString() prevents user from typing leading zeroes\n                                                        value={value.toString()}\n                                                        onChange={(changedValue) => {\n                                                            const valueInt =\n                                                                changedValue !== undefined && !isNaN(changedValue)\n                                                                    ? parseInt(changedValue.toString())\n                                                                    : 0\n\n                                                            onChange(valueInt)\n                                                        }}\n                                                        suffix={<span>%</span>}\n                                                        data-attr=\"feature-flag-variant-rollout-percentage-input\"\n                                                    />\n                                                    {filterGroups.filter((group) => group.variant === variant.key)\n                                                        .length > 0 && (\n                                                        <span className=\"text-secondary text-xs\">\n                                                            Overridden by{' '}\n                                                            <strong>\n                                                                {variantConcatWithPunctuation(\n                                                                    filterGroups\n                                                                        .filter(\n                                                                            (group) =>\n                                                                                group.variant != null &&\n                                                                                group.variant === variant.key\n                                                                        )\n                                                                        .map(\n                                                                            (variant) =>\n                                                                                'Set ' +\n                                                                                (filterGroups.findIndex(\n                                                                                    (group) => group === variant\n                                                                                ) +\n                                                                                    1)\n                                                                        )\n                                                                )}\n                                                            </strong>\n                                                        </span>\n                                                    )}\n                                                </div>\n                                            )}\n                                        </LemonField>\n                                    </div>\n                                    <div className=\"flex items-center justify-center\">\n                                        {variants.length > 1 && (\n                                            <LemonButton\n                                                icon={<IconTrash />}\n                                                data-attr={`delete-prop-filter-${index}`}\n                                                noPadding\n                                                onClick={() => removeVariant(index)}\n                                                disabledReason={\n                                                    !canEditVariant(index)\n                                                        ? isDraftExperiment\n                                                            ? 'Cannot delete the control variant from an experiment.'\n                                                            : 'Cannot delete variants from a feature flag that is part of a launched experiment.'\n                                                        : undefined\n                                                }\n                                                tooltipPlacement=\"top-end\"\n                                            />\n                                        )}\n                                    </div>\n                                </div>\n                            </Group>\n                        ))}\n                        {variants.length > 0 && !areVariantRolloutsValid && (\n                            <p className=\"text-danger\">\n                                Percentage rollouts for variants must sum to 100 (currently {variantRolloutSum}\n                                ).\n                            </p>\n                        )}\n                        <LemonButton\n                            type=\"secondary\"\n                            onClick={() => {\n                                const newIndex = variants.length\n                                addVariant()\n                                focusVariantKeyField(newIndex)\n                            }}\n                            icon={<IconPlus />}\n                            disabledReason={\n                                hasExperiment && !isDraftExperiment\n                                    ? 'Cannot add variants to a feature flag that is part of a launched experiment. To update variants, reset the experiment to draft.'\n                                    : undefined\n                            }\n                            tooltipPlacement=\"top-start\"\n                            center\n                        >\n                            Add variant\n                        </LemonButton>\n                    </div>\n                </div>\n            )}\n        </>\n    )\n}\n", "import './JSONEditorInput.scss'\n\nimport { CodeEditor } from 'lib/monaco/CodeEditor'\nimport { useState } from 'react'\n\nimport { JsonType } from '~/types'\n\ninterface EditorProps {\n    onChange?: (val: string | undefined) => void\n    lineHeight?: number\n    defaultNumberOfLines?: number\n    value?: JsonType\n    readOnly?: boolean\n    placeholder?: string\n}\n\nexport function JSONEditorInput({\n    onChange,\n    placeholder,\n    lineHeight = 20,\n    defaultNumberOfLines = 1,\n    value = '',\n    readOnly = false,\n}: EditorProps): JSX.Element {\n    const valString = value?.toString() || ''\n    const _lineHeight = lineHeight\n    const defaultLines = Math.max(defaultNumberOfLines, valString.split(/\\r\\n|\\r|\\n/).length) + 1\n    const defaultHeight = _lineHeight * defaultLines\n    const [height, setHeight] = useState(defaultHeight)\n    const [focused, setFocused] = useState(false)\n\n    const updateHeight = (val: string | undefined): void => {\n        if (val) {\n            const lineCount = val.split(/\\r\\n|\\r|\\n/).length\n            const newLineCount = Math.max(lineCount, defaultNumberOfLines) + 1\n            setHeight(_lineHeight * newLineCount)\n        } else {\n            setHeight(_lineHeight * (defaultNumberOfLines + 1))\n        }\n    }\n\n    const onFocus = (): void => setFocused(true)\n    const onBlur = (): void => setFocused(false)\n\n    return (\n        <div className=\"JsonEditorInput\" onFocus={onFocus} onBlur={onBlur}>\n            <CodeEditor\n                className=\"border\"\n                language=\"json\"\n                height={height}\n                value={value?.toString()}\n                options={{\n                    readOnly: readOnly,\n                    lineHeight: _lineHeight,\n                    minimap: {\n                        enabled: false,\n                    },\n                    scrollbar: {\n                        alwaysConsumeMouseWheel: false,\n                    },\n                    padding: {\n                        bottom: 0,\n                        top: 10,\n                    },\n                    overviewRulerLanes: 0,\n                    hideCursorInOverviewRuler: true,\n                    overviewRulerBorder: false,\n                    glyphMargin: true,\n                    folding: false,\n                    lineNumbers: 'off',\n                    lineDecorationsWidth: 0,\n                    lineNumbersMinChars: 0,\n                    renderLineHighlight: 'none',\n                    cursorStyle: 'block-outline',\n                    scrollBeyondLastLine: false,\n                    quickSuggestions: false,\n                    contextmenu: false,\n                }}\n                onChange={(val) => {\n                    updateHeight(val)\n                    onChange?.(val)\n                }}\n            />\n            {!focused && !value?.toString() && placeholder && (\n                <div className=\"placeholder\">\n                    <div className=\"placeholderLabelContainer\">{placeholder}</div>\n                </div>\n            )}\n        </div>\n    )\n}\n", "import { IconGear, IconTrash } from '@posthog/icons'\nimport { LemonButton, LemonTable } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { PayGateMini } from 'lib/components/PayGateMini/PayGateMini'\nimport { TitleWithIcon } from 'lib/components/TitleWithIcon'\nimport { useFeatureFlag } from 'lib/hooks/useFeatureFlag'\nimport { LemonInputSelect, LemonInputSelectOption } from 'lib/lemon-ui/LemonInputSelect/LemonInputSelect'\nimport { LemonTableColumns } from 'lib/lemon-ui/LemonTable'\n\nimport { AccessControlPopoutCTA } from '~/layout/navigation-3000/sidepanel/panels/access_control/AccessControlPopoutCTA'\nimport { AccessControlResourceType, AccessLevel, AvailableFeature, FeatureFlagType, Resource, RoleType } from '~/types'\n\nimport { featureFlagPermissionsLogic } from './feature-flags/featureFlagPermissionsLogic'\nimport { permissionsLogic } from './settings/organization/Permissions/permissionsLogic'\nimport { rolesLogic } from './settings/organization/Permissions/Roles/rolesLogic'\nimport { teamLogic } from './teamLogic'\nimport { urls } from './urls'\n\ninterface ResourcePermissionProps {\n    addableRoles: RoleType[]\n    addableRolesLoading: boolean\n    onChange: (newValue: string[]) => void\n    rolesToAdd: string[]\n    onAdd: () => void\n    roles: RoleType[]\n    deleteAssociatedRole: (id: RoleType['id']) => void\n    resourceType: Resource\n    canEdit: boolean\n}\n\nfunction roleLemonSelectOptions(roles: RoleType[]): LemonInputSelectOption[] {\n    return roles.map((role) => ({\n        key: role.id,\n        label: `${role.name}`,\n        labelComponent: (\n            <span>\n                <b>{`${role.name}`}</b>\n            </span>\n        ),\n    }))\n}\n\nexport function FeatureFlagPermissions({ featureFlag }: { featureFlag: FeatureFlagType }): JSX.Element {\n    const { addableRoles, unfilteredAddableRolesLoading, rolesToAdd, derivedRoles } = useValues(\n        featureFlagPermissionsLogic({ flagId: featureFlag.id })\n    )\n    const { setRolesToAdd, addAssociatedRoles, deleteAssociatedRole } = useActions(\n        featureFlagPermissionsLogic({ flagId: featureFlag.id })\n    )\n    const { currentTeam } = useValues(teamLogic)\n\n    const newAccessControl = useFeatureFlag('ROLE_BASED_ACCESS_CONTROL')\n    // Only render the new access control if they have been migrated and have the feature flag enabled\n    if (newAccessControl && currentTeam?.access_control_version === 'v2') {\n        if (!featureFlag.id) {\n            return <p>Please save the feature flag before changing the access controls.</p>\n        }\n        return <AccessControlPopoutCTA resourceType={AccessControlResourceType.FeatureFlag} />\n    }\n\n    return (\n        <PayGateMini feature={AvailableFeature.ROLE_BASED_ACCESS}>\n            <ResourcePermission\n                resourceType={Resource.FEATURE_FLAGS}\n                onChange={(roleIds) => setRolesToAdd(roleIds)}\n                rolesToAdd={rolesToAdd}\n                addableRoles={addableRoles}\n                addableRolesLoading={unfilteredAddableRolesLoading}\n                onAdd={() => addAssociatedRoles()}\n                roles={derivedRoles}\n                deleteAssociatedRole={(id) => deleteAssociatedRole({ roleId: id })}\n                canEdit={featureFlag.can_edit}\n            />\n        </PayGateMini>\n    )\n}\n\nexport function ResourcePermission({\n    rolesToAdd,\n    addableRoles,\n    onChange,\n    addableRolesLoading,\n    onAdd,\n    roles,\n    deleteAssociatedRole,\n    resourceType,\n    canEdit,\n}: ResourcePermissionProps): JSX.Element {\n    const { allPermissions } = useValues(permissionsLogic)\n    const { roles: possibleRolesWithAccess } = useValues(rolesLogic)\n    const resourceLevel = allPermissions.find((permission) => permission.resource === resourceType)\n    // TODO: feature_flag_access_level should eventually be generic in this component\n    const rolesWithAccess = possibleRolesWithAccess.filter(\n        (role) => role.feature_flags_access_level === AccessLevel.WRITE\n    )\n    interface TableRoleType extends RoleType {\n        deletable?: boolean\n    }\n\n    const columns: LemonTableColumns<TableRoleType> = [\n        {\n            title: 'Role',\n            dataIndex: 'name',\n            key: 'name',\n            render: function RenderRoleName(_, role) {\n                return (\n                    <>\n                        {role.name === 'Organization default' ? (\n                            <TitleWithIcon\n                                icon={\n                                    <LemonButton\n                                        icon={<IconGear />}\n                                        to={`${urls.settings('organization-roles')}`}\n                                        targetBlank\n                                        size=\"small\"\n                                        noPadding\n                                        tooltip=\"Organization-wide permissions for roles can be managed in the organization settings.\"\n                                        className=\"ml-1\"\n                                    />\n                                }\n                            >\n                                All users by default\n                            </TitleWithIcon>\n                        ) : (\n                            role.name\n                        )}\n                    </>\n                )\n            },\n        },\n        {\n            title: 'Access',\n            dataIndex: 'feature_flags_access_level',\n            key: 'feature_flags_access_level',\n            render: function RenderAccessLevel(_, role) {\n                return (\n                    <div className=\"flex flex-row justify-between\">\n                        {role.feature_flags_access_level === AccessLevel.WRITE ? 'Edit' : 'View'}\n                        {role.deletable && (\n                            <LemonButton\n                                icon={<IconTrash />}\n                                onClick={() => deleteAssociatedRole(role.id)}\n                                tooltip=\"Remove custom role from feature flag\"\n                                tooltipPlacement=\"bottom-start\"\n                                size=\"small\"\n                            />\n                        )}\n                    </div>\n                )\n            },\n        },\n    ]\n    const tableData: TableRoleType[] = [\n        {\n            id: '',\n            name: 'Organization default',\n            feature_flags_access_level: resourceLevel ? resourceLevel.access_level : AccessLevel.WRITE,\n            created_by: null,\n            created_at: '',\n        } as TableRoleType,\n        ...rolesWithAccess,\n        ...roles.map((role) => ({ ...role, feature_flags_access_level: AccessLevel.WRITE, deletable: true })), // associated flag roles with custom write access\n    ]\n\n    return (\n        <>\n            <LemonTable dataSource={tableData} columns={columns} className=\"mt-4\" />\n            {canEdit && (\n                <>\n                    <h5 className=\"mt-4\">Custom edit roles</h5>\n                    <div className=\"flex gap-2\">\n                        <div className=\"flex-1\">\n                            <LemonInputSelect\n                                placeholder=\"Search for roles to add\u2026\"\n                                loading={addableRolesLoading}\n                                onChange={onChange}\n                                value={rolesToAdd}\n                                mode=\"multiple\"\n                                data-attr=\"resource-permissioning-select\"\n                                options={roleLemonSelectOptions(addableRoles)}\n                            />\n                        </div>\n                        <LemonButton type=\"primary\" loading={false} disabled={rolesToAdd.length === 0} onClick={onAdd}>\n                            Add\n                        </LemonButton>\n                    </div>\n                </>\n            )}\n        </>\n    )\n}\n", "import { LemonButton } from '@posthog/lemon-ui'\nimport { BindLogic, useActions, useValues } from 'kea'\nimport { dashboardsLogic } from 'scenes/dashboard/dashboards/dashboardsLogic'\nimport { DashboardsTable } from 'scenes/dashboard/dashboards/DashboardsTable'\nimport { DashboardTemplateChooser } from 'scenes/dashboard/DashboardTemplateChooser'\nimport { newDashboardLogic } from 'scenes/dashboard/newDashboardLogic'\nimport { NewDashboardModal } from 'scenes/dashboard/NewDashboardModal'\n\nimport { dashboardsModel } from '~/models/dashboardsModel'\nimport { FeatureFlagType } from '~/types'\n\nimport { featureFlagLogic } from './featureFlagLogic'\n\nexport function AnalysisTab({ featureFlag }: { id: string; featureFlag: FeatureFlagType }): JSX.Element {\n    return (\n        <div className=\"NewDashboardModal\">\n            <BindLogic logic={newDashboardLogic} props={{ featureFlagId: featureFlag.id as number }}>\n                {featureFlag.analytics_dashboards && featureFlag.analytics_dashboards.length > 0 ? (\n                    <FeatureFlagDashboardsTableContainer />\n                ) : (\n                    featureFlag.id && (\n                        <>\n                            <DashboardTemplateChooser scope=\"feature_flag\" />\n                            <NewDashboardModal />\n                        </>\n                    )\n                )}\n            </BindLogic>\n        </div>\n    )\n}\n\nfunction FeatureFlagDashboardsTableContainer(): JSX.Element {\n    const { filteredDashboards } = useValues(featureFlagLogic)\n    const { showNewDashboardModal } = useActions(newDashboardLogic)\n\n    const { dashboardsLoading } = useValues(dashboardsModel)\n    const { filters } = useValues(dashboardsLogic)\n\n    return (\n        <>\n            <DashboardsTable\n                extraActions={\n                    <div className=\"flex items-center gap-2\">\n                        <LemonButton type=\"primary\" onClick={showNewDashboardModal}>\n                            New dashboard\n                        </LemonButton>\n                    </div>\n                }\n                hideActions={true}\n                dashboards={filteredDashboards}\n                dashboardsLoading={dashboardsLoading}\n                filters={filters}\n            />\n            <NewDashboardModal />\n        </>\n    )\n}\n", "import { IconTrash } from '@posthog/icons'\nimport { LemonButton, LemonDivider, LemonInput, LemonSelect, LemonTag, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { Group } from 'kea-forms'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { Spinner } from 'lib/lemon-ui/Spinner/Spinner'\nimport { capitalizeFirstLetter, genericOperatorMap, humanFriendlyNumber } from 'lib/utils'\nimport { ActionFilter } from 'scenes/insights/filters/ActionFilter/ActionFilter'\nimport { MathAvailability } from 'scenes/insights/filters/ActionFilter/ActionFilterRow/ActionFilterRow'\nimport { urls } from 'scenes/urls'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { RolloutConditionType } from '~/types'\n\nimport { featureFlagLogic } from './featureFlagLogic'\n\ninterface FeatureFlagAutoRollbackProps {\n    readOnly?: boolean\n}\n\nexport function FeatureFlagAutoRollback({ readOnly }: FeatureFlagAutoRollbackProps): JSX.Element {\n    const { featureFlag, sentryIntegrationEnabled, sentryErrorCount, insightRollingAverages } =\n        useValues(featureFlagLogic)\n    const { addRollbackCondition, removeRollbackCondition, loadInsightAtIndex } = useActions(featureFlagLogic)\n    const { user } = useValues(userLogic)\n\n    return (\n        <div>\n            <div className=\"mb-2\">\n                <b>Auto rollback</b>\n                <LemonTag type=\"warning\" className=\"uppercase ml-2\">\n                    Beta\n                </LemonTag>\n                {!readOnly && (\n                    <div className=\"mt-2\">\n                        Specify the conditions in which this feature flag will automatically roll back.\n                    </div>\n                )}\n            </div>\n            {readOnly &&\n                featureFlag.rollback_conditions &&\n                featureFlag.rollback_conditions.map((rollback_condition, index) => (\n                    <>\n                        {index > 0 && <div className=\"condition-set-separator\">OR</div>}\n                        {rollback_condition.threshold_type === 'insight' &&\n                        rollback_condition.threshold_metric?.events?.[0]?.name ? (\n                            <div className=\"mb-4 border rounded p-4 bg-surface-primary\">\n                                <b>{`${capitalizeFirstLetter(rollback_condition.threshold_type)} based rollback`}</b>\n                                <LemonDivider className=\"my-3\" />\n                                <div className=\"flex items-center\">\n                                    {insightRollingAverages[index] && (\n                                        <>\n                                            <b>{rollback_condition.threshold_metric.events[0].name}</b>\n                                            &nbsp; trailing average is {insightRollingAverages[index]}.\n                                        </>\n                                    )}\n                                    &nbsp;Trigger when trailing average of &nbsp;\n                                    <b>{rollback_condition.threshold_metric.events[0].name}</b>\n                                    &nbsp; is&nbsp;\n                                    {rollback_condition.operator &&\n                                        genericOperatorMap[rollback_condition.operator]}{' '}\n                                    {rollback_condition.threshold}\n                                </div>\n                            </div>\n                        ) : (\n                            <div className=\"mb-4 border rounded p-4 bg-surface-primary\">\n                                <b>{`${capitalizeFirstLetter(rollback_condition.threshold_type)} based rollback`}</b>\n                                <LemonDivider className=\"my-3\" />\n                                <div className=\"flex items-center\">\n                                    Trigger when there is a&nbsp;<b>{rollback_condition.threshold}%</b>&nbsp;increase in\n                                    errors\n                                </div>\n                            </div>\n                        )}\n                    </>\n                ))}\n            {!readOnly &&\n                featureFlag.rollback_conditions &&\n                featureFlag.rollback_conditions.map((_, index) => (\n                    <>\n                        {index > 0 && <div className=\"condition-set-separator\">OR</div>}\n                        <div className=\"mb-4 border rounded p-4 bg-surface-primary\">\n                            <Group name={['rollback_conditions', index]}>\n                                <div className=\"flex items-center justify-between\">\n                                    <div className=\"flex\">\n                                        <div className=\"mt-3 mr-3\">\n                                            <b>Rollback Condition Type</b>\n                                        </div>\n                                        <LemonField name=\"threshold_type\">\n                                            {({ value, onChange }) => (\n                                                <LemonSelect\n                                                    value={value}\n                                                    onChange={onChange}\n                                                    options={[\n                                                        { value: RolloutConditionType.Sentry, label: 'Error Based' },\n                                                        { value: RolloutConditionType.Insight, label: 'Metric Based' },\n                                                    ]}\n                                                />\n                                            )}\n                                        </LemonField>\n                                    </div>\n                                    <LemonButton\n                                        icon={<IconTrash />}\n                                        noPadding\n                                        onClick={() => {\n                                            removeRollbackCondition(index)\n                                        }}\n                                    />\n                                </div>\n                                <LemonDivider className=\"my-3\" />\n                                {featureFlag.rollback_conditions[index].threshold_type == 'insight' ? (\n                                    <div className=\"flex gap-2 items-center mt-4\">\n                                        <LemonField name=\"threshold_metric\">\n                                            {({ value, onChange }) => (\n                                                <ActionFilter\n                                                    filters={value}\n                                                    setFilters={(payload) => {\n                                                        onChange({\n                                                            ...payload,\n                                                        })\n                                                        loadInsightAtIndex(index, payload)\n                                                    }}\n                                                    typeKey={'feature-flag-rollback-trends-' + index}\n                                                    buttonCopy=\"Add graph series\"\n                                                    showSeriesIndicator={false}\n                                                    showNestedArrow\n                                                    hideRename={true}\n                                                    entitiesLimit={1}\n                                                    mathAvailability={MathAvailability.None}\n                                                    propertiesTaxonomicGroupTypes={[\n                                                        TaxonomicFilterGroupType.EventProperties,\n                                                        TaxonomicFilterGroupType.PersonProperties,\n                                                        TaxonomicFilterGroupType.EventFeatureFlags,\n                                                        TaxonomicFilterGroupType.Cohorts,\n                                                        TaxonomicFilterGroupType.Elements,\n                                                    ]}\n                                                />\n                                            )}\n                                        </LemonField>\n                                        <span>\n                                            trailing 7 day average is&nbsp;\n                                            {insightRollingAverages[index] !== undefined ? (\n                                                <b>{insightRollingAverages[index]}</b>\n                                            ) : (\n                                                <Spinner />\n                                            )}\n                                            . Trigger when trailing average is\n                                        </span>\n                                        <LemonField name=\"operator\">\n                                            {({ value, onChange }) => (\n                                                <LemonSelect\n                                                    value={value}\n                                                    onChange={onChange}\n                                                    options={[\n                                                        { label: 'greater than', value: 'gt' },\n                                                        { label: 'less than', value: 'lt' },\n                                                    ]}\n                                                />\n                                            )}\n                                        </LemonField>\n                                        <LemonField name=\"threshold\">\n                                            <LemonInput min={0} type=\"number\" />\n                                        </LemonField>\n                                    </div>\n                                ) : sentryIntegrationEnabled ? (\n                                    <div>\n                                        <div className=\"flex items-center\">\n                                            {sentryErrorCount ? (\n                                                <span>\n                                                    <b>{humanFriendlyNumber(sentryErrorCount)} </b> Sentry errors in the\n                                                    past 24 hours.{' '}\n                                                </span>\n                                            ) : (\n                                                <Spinner />\n                                            )}\n                                            <span>&nbsp;Trigger when there is a</span>\n                                            <LemonField name=\"threshold\" className=\"ml-3 mr-3\">\n                                                {({ value, onChange }) => (\n                                                    <LemonInput\n                                                        value={value}\n                                                        suffix={<>%</>}\n                                                        type=\"number\"\n                                                        min={0}\n                                                        onChange={onChange}\n                                                    />\n                                                )}\n                                            </LemonField>\n                                            <LemonField name=\"operator\" className=\"mr-3\">\n                                                {({ value, onChange }) => (\n                                                    <LemonSelect\n                                                        options={[\n                                                            { label: 'increase', value: 'gt' },\n                                                            { label: 'decrease', value: 'lt' },\n                                                        ]}\n                                                        value={value}\n                                                        onChange={onChange}\n                                                    />\n                                                )}\n                                            </LemonField>\n                                            <span>\n                                                to{' '}\n                                                {sentryErrorCount ? (\n                                                    <b>\n                                                        {humanFriendlyNumber(\n                                                            Math.round(\n                                                                sentryErrorCount *\n                                                                    (1 +\n                                                                        (featureFlag.rollback_conditions[index]\n                                                                            .threshold || 0) /\n                                                                            100)\n                                                            )\n                                                        )}\n                                                    </b>\n                                                ) : (\n                                                    <Spinner />\n                                                )}{' '}\n                                                errors.\n                                            </span>\n                                            <div />\n                                        </div>\n                                    </div>\n                                ) : user?.is_staff ? (\n                                    <div className=\"mt-4\">\n                                        <b>This feature requires an active Sentry integration.</b>\n                                        <br />\n                                        <Link to={urls.instanceSettings()}>Go to Instance Settings</Link> and update the{' '}\n                                        <code>\"SENTRY_\"</code> properties from your Sentry account to enable.\n                                    </div>\n                                ) : (\n                                    <p className=\"text-secondary\">\n                                        This PostHog instance is not configured for Sentry. Please contact the instance\n                                        owner to configure it.\n                                    </p>\n                                )}\n                            </Group>\n                        </div>\n                    </>\n                ))}\n            {!readOnly && (\n                <LemonButton type=\"secondary\" onClick={addRollbackCondition}>\n                    Add condition\n                </LemonButton>\n            )}\n        </div>\n    )\n}\n", "import { IconArrowRight } from '@posthog/icons'\nimport { LemonBanner, LemonButton, LemonSelect, LemonTag } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { OrganizationMembershipLevel } from 'lib/constants'\nimport { IconSync } from 'lib/lemon-ui/icons'\nimport { LemonTable, LemonTableColumn, LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { createdAtColumn, createdByColumn } from 'lib/lemon-ui/LemonTable/columnUtils'\nimport { LemonTableLink } from 'lib/lemon-ui/LemonTable/LemonTableLink'\nimport { useEffect } from 'react'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { urls } from 'scenes/urls'\n\nimport { cohortsModel } from '~/models/cohortsModel'\nimport { groupsModel, type Noun } from '~/models/groupsModel'\nimport { CohortType, FeatureFlagType, OrganizationFeatureFlag, OrganizationType } from '~/types'\n\nimport { organizationLogic } from '../organizationLogic'\nimport { featureFlagLogic } from './featureFlagLogic'\nimport { groupFilters } from './FeatureFlags'\n\nfunction checkHasStaticCohort(featureFlag: FeatureFlagType, cohorts: CohortType[]): boolean {\n    const staticCohorts = new Set()\n    cohorts.forEach((cohort) => {\n        if (cohort.is_static) {\n            staticCohorts.add(cohort.id)\n        }\n    })\n\n    for (const group of featureFlag.filters.groups) {\n        for (const prop of group.properties || []) {\n            if (prop.type === 'cohort' && staticCohorts.has(prop.value)) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nconst getColumns = ({\n    aggregationLabel,\n    currentTeamId,\n    currentOrganization,\n}: {\n    aggregationLabel: (groupTypeIndex: number | null | undefined, deferToUserWording?: boolean) => Noun\n    currentTeamId: number | null\n    currentOrganization: OrganizationType | null\n}): LemonTableColumns<OrganizationFeatureFlag> => {\n    return [\n        {\n            title: 'Project',\n            dataIndex: 'team_id',\n            width: '45%',\n            render: (dataValue, record) => {\n                const team = currentOrganization?.teams?.find((t) => t.id === Number(dataValue))\n                if (!team) {\n                    return '(project does not exist)'\n                }\n                const isCurrentTeam = team.id === currentTeamId\n                const linkText = isCurrentTeam ? `${team.name} (current)` : team.name\n\n                return (\n                    <LemonTableLink\n                        to={\n                            !isCurrentTeam\n                                ? urls.project(team.id, record.flag_id ? urls.featureFlag(record.flag_id) : '')\n                                : undefined\n                        }\n                        title={linkText}\n                    />\n                )\n            },\n        },\n        createdByColumn() as LemonTableColumn<OrganizationFeatureFlag, keyof OrganizationFeatureFlag | undefined>,\n        createdAtColumn() as LemonTableColumn<OrganizationFeatureFlag, keyof OrganizationFeatureFlag | undefined>,\n        {\n            title: 'Release conditions',\n            width: 200,\n            render: function Render(_, record: OrganizationFeatureFlag) {\n                const releaseText = groupFilters(record.filters, undefined, aggregationLabel)\n                return typeof releaseText === 'string' && releaseText.startsWith('100% of') ? (\n                    <LemonTag type=\"highlight\">{releaseText}</LemonTag>\n                ) : (\n                    releaseText\n                )\n            },\n        },\n        {\n            title: 'Status',\n            dataIndex: 'active',\n            render: (dataValue) => {\n                return dataValue ? (\n                    <LemonTag type=\"success\" className=\"uppercase\">\n                        Enabled\n                    </LemonTag>\n                ) : (\n                    <LemonTag type=\"default\" className=\"uppercase\">\n                        Disabled\n                    </LemonTag>\n                )\n            },\n        },\n    ]\n}\n\nfunction InfoBanner(): JSX.Element {\n    const { currentOrganization } = useValues(organizationLogic)\n    const { featureFlag } = useValues(featureFlagLogic)\n    const hasMultipleProjects = (currentOrganization?.teams?.length ?? 0) > 1\n\n    const isMember =\n        !currentOrganization?.membership_level ||\n        currentOrganization.membership_level < OrganizationMembershipLevel.Admin\n\n    let text\n\n    if (isMember && !hasMultipleProjects) {\n        text = `You currently have access to only one project. If your organization manages multiple projects and you wish to copy this feature flag across them, request project access from your administrator.`\n    } else if (!hasMultipleProjects) {\n        text = `This feature enables the copying of a feature flag across different projects. Once additional projects are added within your organization, you'll be able to replicate this flag to them.`\n    } else if (!featureFlag.can_edit) {\n        text = `You don't have the necessary permissions to copy this flag to another project. Contact your administrator to request editing rights.`\n    } else {\n        return <></>\n    }\n\n    return (\n        <LemonBanner type=\"info\" className=\"mb-4\">\n            {text}\n        </LemonBanner>\n    )\n}\n\nfunction FeatureFlagCopySection(): JSX.Element {\n    const { featureFlag, copyDestinationProject, projectsWithCurrentFlag, featureFlagCopyLoading } =\n        useValues(featureFlagLogic)\n    const { setCopyDestinationProject, copyFlag } = useActions(featureFlagLogic)\n    const { currentOrganization } = useValues(organizationLogic)\n    const { currentTeam } = useValues(teamLogic)\n    const { cohorts } = useValues(cohortsModel)\n\n    const hasStaticCohort = checkHasStaticCohort(featureFlag, cohorts.results)\n    const hasMultipleProjects = (currentOrganization?.teams?.length ?? 0) > 1\n\n    return hasMultipleProjects && featureFlag.can_edit ? (\n        <>\n            <h3 className=\"l3\">Feature flag copy</h3>\n            <div>Copy your flag and its configuration to another project.</div>\n            {hasStaticCohort && (\n                <LemonBanner type=\"info\" className=\"mt-4\">\n                    The flag you are about to copy references a static cohort. If the cohort with identical name does\n                    not exist in the target project, it will be copied as an empty cohort. This is because the\n                    associated persons might not exist in the target project.\n                </LemonBanner>\n            )}\n            <div className=\"inline-flex gap-4 my-6\">\n                <div>\n                    <div className=\"font-semibold leading-6 h-6\">Key</div>\n                    <div className=\"border px-3 rounded h-10 text-center flex items-center justify-center max-w-200\">\n                        <span className=\"font-semibold truncate\">{featureFlag.key}</span>\n                    </div>\n                </div>\n                <div>\n                    <div className=\"h-6\" />\n                    <IconArrowRight className=\"h-10\" fontSize=\"30\" />\n                </div>\n                <div>\n                    <div className=\"font-semibold leading-6 h-6\">Destination project</div>\n                    <LemonSelect\n                        dropdownMatchSelectWidth={false}\n                        value={copyDestinationProject}\n                        onChange={(id) => setCopyDestinationProject(id)}\n                        options={\n                            currentOrganization?.teams\n                                ?.map((team) => ({ value: team.id, label: team.name }))\n                                .sort((a, b) => a.label.localeCompare(b.label))\n                                .filter((option) => option.value !== currentTeam?.id) || []\n                        }\n                        className=\"min-w-[10rem]\"\n                    />\n                </div>\n                <div>\n                    <div className=\"h-6\" />\n                    <LemonButton\n                        disabledReason={!copyDestinationProject && 'Select destination project'}\n                        loading={featureFlagCopyLoading}\n                        type=\"primary\"\n                        icon={<IconSync />}\n                        onClick={() => copyFlag()}\n                        className=\"w-28 max-w-28\"\n                    >\n                        {projectsWithCurrentFlag.find((p) => Number(p.team_id) === copyDestinationProject)\n                            ? 'Update'\n                            : 'Copy'}\n                    </LemonButton>\n                </div>\n            </div>\n        </>\n    ) : (\n        <></>\n    )\n}\n\nexport default function FeatureFlagProjects(): JSX.Element {\n    const { projectsWithCurrentFlag } = useValues(featureFlagLogic)\n    const { loadProjectsWithCurrentFlag } = useActions(featureFlagLogic)\n    const { currentTeamId } = useValues(teamLogic)\n    const { currentOrganization } = useValues(organizationLogic)\n    const { aggregationLabel } = useValues(groupsModel)\n\n    useEffect(() => {\n        loadProjectsWithCurrentFlag()\n    }, [])\n\n    return (\n        <div>\n            <InfoBanner />\n            <FeatureFlagCopySection />\n            <LemonTable\n                loading={false}\n                dataSource={projectsWithCurrentFlag}\n                columns={getColumns({ currentTeamId, currentOrganization, aggregationLabel })}\n                emptyState=\"This feature flag is not being used in any other project.\"\n            />\n        </div>\n    )\n}\n", "import {\n    LemonBanner,\n    LemonButton,\n    LemonCalendarSelectInput,\n    LemonCheckbox,\n    LemonDivider,\n    LemonSelect,\n    LemonTable,\n    LemonTableColumn,\n    LemonTableColumns,\n    LemonTag,\n    LemonTagType,\n} from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { dayjs } from 'lib/dayjs'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { atColumn, createdAtColumn, createdByColumn } from 'lib/lemon-ui/LemonTable/columnUtils'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { hasFormErrors } from 'lib/utils'\n\nimport { groupsModel } from '~/models/groupsModel'\nimport { ScheduledChangeOperationType, ScheduledChangeType } from '~/types'\n\nimport { featureFlagLogic } from './featureFlagLogic'\nimport { FeatureFlagReleaseConditions } from './FeatureFlagReleaseConditions'\nimport { groupFilters } from './FeatureFlags'\n\nexport const DAYJS_FORMAT = 'MMMM DD, YYYY h:mm A'\n\nexport default function FeatureFlagSchedule(): JSX.Element {\n    const {\n        featureFlag,\n        scheduledChanges,\n        scheduledChangeOperation,\n        scheduleDateMarker,\n        schedulePayload,\n        schedulePayloadErrors,\n    } = useValues(featureFlagLogic)\n    const {\n        deleteScheduledChange,\n        setScheduleDateMarker,\n        setSchedulePayload,\n        setScheduledChangeOperation,\n        createScheduledChange,\n    } = useActions(featureFlagLogic)\n    const { aggregationLabel } = useValues(groupsModel)\n\n    const aggregationGroupTypeIndex = featureFlag.filters.aggregation_group_type_index\n\n    const scheduleFilters = { ...schedulePayload.filters, aggregation_group_type_index: aggregationGroupTypeIndex }\n\n    const columns: LemonTableColumns<ScheduledChangeType> = [\n        {\n            title: 'Change',\n            dataIndex: 'payload',\n            render: function Render(_, scheduledChange: ScheduledChangeType) {\n                const { payload } = scheduledChange\n\n                if (payload.operation === ScheduledChangeOperationType.UpdateStatus) {\n                    const isEnabled = payload.value\n                    return (\n                        <LemonTag type={isEnabled ? 'success' : 'default'} className=\"uppercase\">\n                            {isEnabled ? 'Enable' : 'Disable'}\n                        </LemonTag>\n                    )\n                } else if (payload.operation === ScheduledChangeOperationType.AddReleaseCondition) {\n                    const releaseText = groupFilters(payload.value, undefined, aggregationLabel)\n                    return (\n                        <div className=\"inline-flex leading-8\">\n                            <span className=\"mr-2\">\n                                <b>Add release condition:</b>\n                            </span>\n                            {typeof releaseText === 'string' && releaseText.startsWith('100% of') ? (\n                                <LemonTag type=\"highlight\">{releaseText}</LemonTag>\n                            ) : (\n                                releaseText\n                            )}\n                        </div>\n                    )\n                }\n\n                return JSON.stringify(payload)\n            },\n        },\n        atColumn('scheduled_at', 'Scheduled at') as LemonTableColumn<\n            ScheduledChangeType,\n            keyof ScheduledChangeType | undefined\n        >,\n        createdAtColumn() as LemonTableColumn<ScheduledChangeType, keyof ScheduledChangeType | undefined>,\n        createdByColumn() as LemonTableColumn<ScheduledChangeType, keyof ScheduledChangeType | undefined>,\n        {\n            title: 'Status',\n            dataIndex: 'executed_at',\n            render: function Render(_, scheduledChange: ScheduledChangeType) {\n                const { executed_at, failure_reason } = scheduledChange\n\n                function getStatus(): { type: LemonTagType; text: string } {\n                    if (failure_reason) {\n                        return { type: 'danger', text: 'Error' }\n                    } else if (executed_at) {\n                        return { type: 'completion', text: 'Complete' }\n                    }\n                    return { type: 'default', text: 'Scheduled' }\n                }\n                const { type, text } = getStatus()\n                return (\n                    <Tooltip\n                        title={\n                            failure_reason\n                                ? `Failed: ${failure_reason}`\n                                : executed_at && `Completed: ${dayjs(executed_at).format('MMMM D, YYYY h:mm A')}`\n                        }\n                    >\n                        <LemonTag type={type}>\n                            <b className=\"uppercase\">{text}</b>\n                        </LemonTag>\n                    </Tooltip>\n                )\n            },\n        },\n        {\n            width: 0,\n            render: function Render(_, scheduledChange: ScheduledChangeType) {\n                return (\n                    !scheduledChange.executed_at &&\n                    featureFlag.can_edit && (\n                        <More\n                            overlay={\n                                <LemonButton\n                                    status=\"danger\"\n                                    onClick={() => deleteScheduledChange(scheduledChange.id)}\n                                    fullWidth\n                                >\n                                    Delete scheduled change\n                                </LemonButton>\n                            }\n                        />\n                    )\n                )\n            },\n        },\n    ]\n\n    return (\n        <div>\n            {featureFlag.can_edit ? (\n                <div>\n                    <h3 className=\"l3\">Add a scheduled change</h3>\n                    <div className=\"mb-6\">Automatically change flag properties at a future point in time.</div>\n                    <div className=\"inline-flex gap-10 mb-8\">\n                        <div>\n                            <div className=\"font-semibold leading-6 h-6 mb-1\">Change type</div>\n                            <LemonSelect<ScheduledChangeOperationType>\n                                className=\"w-50\"\n                                placeholder=\"Select variant\"\n                                value={scheduledChangeOperation}\n                                onChange={(value) => value && setScheduledChangeOperation(value)}\n                                options={[\n                                    { label: 'Change status', value: ScheduledChangeOperationType.UpdateStatus },\n                                    {\n                                        label: 'Add a condition',\n                                        value: ScheduledChangeOperationType.AddReleaseCondition,\n                                    },\n                                ]}\n                            />\n                        </div>\n                        <div className=\"w-50\">\n                            <div className=\"font-semibold leading-6 h-6 mb-1\">Date and time</div>\n                            <LemonCalendarSelectInput\n                                value={scheduleDateMarker}\n                                onChange={(value) => setScheduleDateMarker(value)}\n                                placeholder=\"Select date\"\n                                selectionPeriod=\"upcoming\"\n                                granularity=\"minute\"\n                            />\n                        </div>\n                    </div>\n\n                    <div className=\"space-y-4\">\n                        {scheduledChangeOperation === ScheduledChangeOperationType.UpdateStatus && (\n                            <>\n                                <div className=\"border rounded p-4\">\n                                    <LemonCheckbox\n                                        id=\"flag-enabled-checkbox\"\n                                        label=\"Enable feature flag\"\n                                        onChange={(value) => {\n                                            setSchedulePayload(null, value)\n                                        }}\n                                        checked={schedulePayload.active}\n                                    />\n                                </div>\n                            </>\n                        )}\n                        {scheduledChangeOperation === ScheduledChangeOperationType.AddReleaseCondition && (\n                            <FeatureFlagReleaseConditions\n                                id={`schedule-release-conditions-${featureFlag.id}`}\n                                filters={scheduleFilters}\n                                onChange={(value, errors) => setSchedulePayload(value, null, errors)}\n                                hideMatchOptions\n                            />\n                        )}\n                        <div className=\"flex items-center justify-end\">\n                            <LemonButton\n                                type=\"primary\"\n                                onClick={createScheduledChange}\n                                disabledReason={\n                                    !scheduleDateMarker\n                                        ? 'Select the scheduled date and time'\n                                        : hasFormErrors(schedulePayloadErrors)\n                                        ? 'Fix release condition errors'\n                                        : undefined\n                                }\n                            >\n                                Schedule\n                            </LemonButton>\n                        </div>\n                        <LemonDivider className=\"\" />\n                    </div>\n                </div>\n            ) : (\n                <LemonBanner type=\"info\" className=\"mb-2\">\n                    You don't have the necessary permissions to schedule changes to this flag. Contact your\n                    administrator to request editing rights.\n                </LemonBanner>\n            )}\n            <LemonTable\n                rowClassName={(record) => (record.executed_at ? 'opacity-75' : '')}\n                className=\"mt-4\"\n                loading={false}\n                dataSource={scheduledChanges}\n                columns={columns}\n                defaultSorting={{\n                    columnKey: 'scheduled_at',\n                    order: 1,\n                }}\n                emptyState=\"You do not have any scheduled changes\"\n            />\n        </div>\n    )\n}\n", "import { LemonTag } from 'lib/lemon-ui/LemonTag'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\n\nimport { FeatureFlagStatus, FeatureFlagStatusResponse } from '~/types'\n\nexport function FeatureFlagStatusIndicator({\n    flagStatus,\n}: {\n    flagStatus: FeatureFlagStatusResponse | null\n}): JSX.Element | null {\n    if (\n        !flagStatus ||\n        [\n            FeatureFlagStatus.ACTIVE,\n            FeatureFlagStatus.INACTIVE,\n            FeatureFlagStatus.DELETED,\n            FeatureFlagStatus.UNKNOWN,\n        ].includes(flagStatus.status)\n    ) {\n        return null\n    }\n\n    return (\n        <Tooltip\n            title={\n                <>\n                    <div className=\"text-sm\">{flagStatus.reason}</div>\n                    <div className=\"text-xs\">\n                        {flagStatus.status === FeatureFlagStatus.STALE &&\n                            'Make sure to remove any references to this flag in your code before deleting it.'}\n                        {flagStatus.status === FeatureFlagStatus.INACTIVE &&\n                            'It is probably not being used in your code, but be sure to remove any references to this flag before deleting it.'}\n                    </div>\n                </>\n            }\n            placement=\"right\"\n        >\n            <span>\n                <LemonTag type=\"warning\" className=\"uppercase cursor-default\">\n                    {flagStatus.status}\n                </LemonTag>\n            </span>\n        </Tooltip>\n    )\n}\n", "import { useValues } from 'kea'\nimport { CompactList } from 'lib/components/CompactList/CompactList'\nimport { InsightRow } from 'scenes/project-homepage/RecentInsights'\nimport { urls } from 'scenes/urls'\n\nimport { InsightVizNode, NodeKind } from '~/queries/schema/schema-general'\nimport { BaseMathType, QueryBasedInsightModel } from '~/types'\n\nimport { featureFlagLogic } from './featureFlagLogic'\n\nexport function RecentFeatureFlagInsights(): JSX.Element {\n    const { relatedInsights, relatedInsightsLoading, featureFlag } = useValues(featureFlagLogic)\n    const query: InsightVizNode = {\n        kind: NodeKind.InsightVizNode,\n        source: {\n            kind: NodeKind.TrendsQuery,\n            series: [\n                { event: '$pageview', name: '$pageview', kind: NodeKind.EventsNode, math: BaseMathType.UniqueUsers },\n            ],\n            breakdownFilter: {\n                breakdown_type: 'event',\n                breakdown: `$feature/${featureFlag.key}`,\n            },\n        },\n    }\n    return (\n        <CompactList\n            loading={relatedInsightsLoading}\n            emptyMessage={{\n                title: 'You have no insights that use this feature flag',\n                description: \"Explore this feature flag's insights by creating one below.\",\n                buttonText: 'Create insight',\n                buttonTo: urls.insightNew({ query }),\n            }}\n            items={relatedInsights.slice(0, 5)}\n            renderRow={(insight: QueryBasedInsightModel, index) => <InsightRow key={index} insight={insight} />}\n            contentHeightBehavior=\"shrink\"\n        />\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_kea_router", "import_react", "init_dirname", "init_buffer", "init_process", "import_react", "import_jsx_runtime", "JSONEditorInput", "onChange", "placeholder", "lineHeight", "defaultNumberOfLines", "value", "readOnly", "valString", "_lineHeight", "defaultLines", "defaultHeight", "height", "setHeight", "focused", "setFocused", "updateHeight", "val", "lineCount", "newLineCount", "CodeEditor", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "roleLemonSelectOptions", "roles", "role", "FeatureFlagPermissions", "featureFlag", "addableRoles", "unfilteredAddableRolesLoading", "rolesToAdd", "derivedRoles", "featureFlagPermissionsLogic", "setRolesToAdd", "addAssociatedRoles", "deleteAssociatedRole", "currentTeam", "teamLogic", "useFeatureFlag", "AccessControlPopoutCTA", "PayGateMini", "ResourcePermission", "roleIds", "id", "onChange", "addableRolesLoading", "onAdd", "resourceType", "canEdit", "allPermissions", "permissionsLogic", "possibleRolesWithAccess", "rolesLogic", "resourceLevel", "permission", "rolesWithAccess", "columns", "_", "TitleWithIcon", "LemonButton", "IconGear", "urls", "IconTrash", "tableData", "LemonTable", "LemonInputSelect", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "AnalysisTab", "featureFlag", "newDashboardLogic", "FeatureFlagDashboardsTableContainer", "DashboardTemplateChooser", "NewDashboardModal", "filteredDashboards", "featureFlagLogic", "showNewDashboardModal", "dashboardsLoading", "dashboardsModel", "filters", "dashboardsLogic", "DashboardsTable", "LemonButton", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_jsx_runtime", "FeatureFlagAutoRollback", "readOnly", "featureFlag", "sentryIntegrationEnabled", "sentryErrorCount", "insightRollingAverages", "featureFlagLogic", "addRollbackCondition", "removeRollbackCondition", "loadInsightAtIndex", "user", "userLogic", "LemonTag", "rollback_condition", "index", "capitalizeFirstLetter", "LemonDivider", "genericOperatorMap", "_", "LemonField", "value", "onChange", "LemonSelect", "LemonButton", "IconTrash", "ActionFilter", "payload", "Spinner", "LemonInput", "humanFriendlyNumber", "Link", "urls", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "checkHasStaticCohort", "featureFlag", "cohorts", "staticCohorts", "cohort", "group", "prop", "getColumns", "aggregationLabel", "currentTeamId", "currentOrganization", "dataValue", "record", "team", "t", "isCurrentTeam", "linkText", "LemonTableLink", "urls", "createdByColumn", "createdAtColumn", "_", "releaseText", "groupFilters", "LemonTag", "InfoBanner", "organizationLogic", "featureFlagLogic", "hasMultipleProjects", "isMember", "text", "LemonBanner", "FeatureFlagCopySection", "copyDestinationProject", "projectsWithCurrentFlag", "featureFlagCopyLoading", "setCopyDestinationProject", "copyFlag", "currentTeam", "teamLogic", "cohortsModel", "hasStaticCohort", "IconArrowRight", "LemonSelect", "id", "a", "b", "option", "LemonButton", "IconSync", "p", "FeatureFlagProjects", "loadProjectsWithCurrentFlag", "groupsModel", "LemonTable", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "FeatureFlagSchedule", "featureFlag", "scheduledChanges", "scheduledChangeOperation", "scheduleDateMarker", "schedulePayload", "schedulePayloadErrors", "featureFlagLogic", "deleteScheduledChange", "setScheduleDateMarker", "setSchedulePayload", "setScheduledChangeOperation", "createScheduledChange", "aggregationLabel", "groupsModel", "aggregationGroupTypeIndex", "scheduleFilters", "columns", "_", "scheduledChange", "payload", "isEnabled", "LemonTag", "releaseText", "groupFilters", "atColumn", "createdAtColumn", "createdByColumn", "executed_at", "failure_reason", "getStatus", "type", "text", "Tooltip", "dayjs", "More", "LemonButton", "LemonSelect", "value", "LemonCalendarSelectInput", "LemonCheckbox", "FeatureFlagReleaseConditions", "errors", "hasFormErrors", "LemonDivider", "LemonBanner", "LemonTable", "record", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "FeatureFlagStatusIndicator", "flagStatus", "Tooltip", "LemonTag", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "RecentFeatureFlagInsights", "relatedInsights", "relatedInsightsLoading", "featureFlag", "featureFlagLogic", "query", "CompactList", "urls", "insight", "index", "InsightRow", "import_jsx_runtime", "scene", "FeatureFlag", "featureFlagLogic", "id", "focusVariantKeyField", "index", "props", "featureFlag", "featureFlagLoading", "featureFlagMissing", "isEditingFlag", "newCohortLoading", "activeTab", "accessDeniedToFeatureFlag", "featureFlags", "deleteFeatureFlag", "restoreFeatureFlag", "editFeatureFlag", "loadFeatureFlag", "saveFeatureFlag", "createStaticCohort", "setFeatureFlagFilters", "setActiveTab", "tags", "tagsModel", "hasAvailableFeature", "userLogic", "hasKeyChanged", "setHasKeyChanged", "advancedSettingsExpanded", "setAdvancedSettingsExpanded", "isNewFeatureFlag", "NotFound", "LemonSkeleton", "AccessDenied", "tabs", "FeatureFlagRollout", "FeatureFlagReleaseConditions", "RecentFeatureFlagInsights", "FEATURE_FLAGS", "FeatureFlagAutoRollback", "LemonDivider", "FeatureFlagCodeExample", "UsageTab", "FeatureFlagProjects", "FeatureFlagSchedule", "LemonTag", "PostHogFeature", "AnalysisTab", "ActivityLog", "FeatureFlagPermissions", "PageHeader", "LemonButton", "urls", "LemonBanner", "Link", "LemonField", "UTM_TAGS", "value", "onChange", "LemonInput", "v", "LemonTextArea", "ObjectTags", "tag", "LemonCheckbox", "IconCollapse", "IconExpand", "CopyToClipboardInline", "More", "AccessControlledLemonButton", "NotebookSelectButton", "LemonTabs", "tab", "featureFlagKey", "dashboardId", "hasEnrichedAnalytics", "generateUsageDashboard", "enrichUsageDashboard", "dashboard", "dashboardLogic", "closeEnrichAnalyticsNotice", "featureFlagsLogic", "enrichAnalyticsNoticeAcknowledged", "tile", "propertyFilter", "Dashboard", "EmptyDashboardComponent", "Query", "defaultDataTableColumns", "variantConcatWithPunctuation", "phrases", "concatWithPunctuation", "readOnly", "multivariateEnabled", "variants", "areVariantRolloutsValid", "variantRolloutSum", "nonEmptyVariants", "aggregationTargetName", "recordingFilterForFlag", "flagStatus", "flagType", "flagTypeString", "hasEncryptedPayloadBeenSaved", "hasExperiment", "isDraftExperiment", "distributeVariantsEqually", "addVariant", "removeVariant", "setMultivariateEnabled", "setFeatureFlag", "setRemoteConfigEnabled", "resetEncryptedPayload", "filterGroups", "confirmRevertMultivariateEnabled", "LemonDialog", "confirmEncryptedPayloadReset", "reportViewRecordingsClicked", "variantKey", "properties", "Co", "canEditVariant", "AccessControlAction", "accessControlDisabledReason", "LemonSwitch", "newValue", "updatedFlag", "FeatureFlagStatusIndicator", "variant", "Lettermark", "alphabet", "JSONEditorInput", "IconRewindPlay", "getRecordingFilterForFlagVariant", "LemonSegmentedButton", "capitalizeFirstLetter", "IconTrash", "IconBalance", "changedValue", "valueInt", "group", "newIndex", "IconPlus"]
}
