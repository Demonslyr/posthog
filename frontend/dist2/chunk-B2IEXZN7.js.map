{
  "version": 3,
  "sources": ["../src/scenes/data-management/DataManagementScene.tsx", "../src/scenes/annotations/index.ts", "../src/scenes/annotations/Annotations.tsx", "../src/scenes/data-management/revenue/RevenueEventsSettings.tsx", "../src/scenes/data-management/revenue/revenueEventsSettingsLogic.ts", "../src/scenes/data-management/actions/ActionsTable.tsx", "../src/scenes/actions/actionsLogic.ts", "../src/scenes/data-management/events/EventDefinitionsTable.tsx", "../src/scenes/data-management/events/EventDefinitionProperties.tsx", "../src/scenes/data-management/events/eventDefinitionsTableLogic.ts", "../src/scenes/data-management/ingestion-warnings/IngestionWarningsView.tsx", "../src/scenes/data-management/ingestion-warnings/ingestionWarningsLogic.ts", "../src/scenes/data-management/properties/PropertyDefinitionsTable.tsx", "../src/scenes/data-management/properties/propertyDefinitionsTableLogic.ts"],
  "sourcesContent": ["import { IconInfo } from '@posthog/icons'\nimport { actions, connect, kea, path, reducers, selectors, useActions, useValues } from 'kea'\nimport { actionToUrl, combineUrl, router, urlToAction } from 'kea-router'\nimport { ActivityLog } from 'lib/components/ActivityLog/ActivityLog'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { TitleWithIcon } from 'lib/components/TitleWithIcon'\nimport { FEATURE_FLAGS, FeatureFlagKey } from 'lib/constants'\nimport { LemonTab, LemonTabs } from 'lib/lemon-ui/LemonTabs'\nimport { LemonTag } from 'lib/lemon-ui/LemonTag'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { capitalizeFirstLetter } from 'lib/utils'\nimport React from 'react'\nimport { NewActionButton } from 'scenes/actions/NewActionButton'\nimport { Annotations } from 'scenes/annotations'\nimport { NewAnnotationButton } from 'scenes/annotations/AnnotationModal'\nimport { RevenueEventsSettings } from 'scenes/data-management/revenue/RevenueEventsSettings'\nimport { Scene, SceneExport } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { ActivityScope, Breadcrumb } from '~/types'\n\nimport { ActionsTable } from './actions/ActionsTable'\nimport type { dataManagementSceneLogicType } from './DataManagementSceneType'\nimport { EventDefinitionsTable } from './events/EventDefinitionsTable'\nimport { IngestionWarningsView } from './ingestion-warnings/IngestionWarningsView'\nimport { PropertyDefinitionsTable } from './properties/PropertyDefinitionsTable'\n\nexport enum DataManagementTab {\n    Actions = 'actions',\n    EventDefinitions = 'events',\n    PropertyDefinitions = 'properties',\n    Annotations = 'annotations',\n    History = 'history',\n    IngestionWarnings = 'warnings',\n    Revenue = 'revenue',\n}\nconst tabs: Record<\n    DataManagementTab,\n    {\n        url: string\n        label: LemonTab<any>['label']\n        content: JSX.Element\n        buttons?: React.ReactNode\n        flag?: FeatureFlagKey\n    }\n> = {\n    [DataManagementTab.EventDefinitions]: {\n        url: urls.eventDefinitions(),\n        label: 'Events',\n        content: <EventDefinitionsTable />,\n    },\n    [DataManagementTab.Actions]: {\n        url: urls.actions(),\n        label: (\n            <TitleWithIcon\n                icon={\n                    <Tooltip title=\"Actions consist of one or more events that you have decided to put into a deliberately-labeled bucket. They're used in insights and dashboards.\">\n                        <IconInfo />\n                    </Tooltip>\n                }\n            >\n                Actions\n            </TitleWithIcon>\n        ),\n        buttons: <NewActionButton />,\n        content: <ActionsTable />,\n    },\n    [DataManagementTab.PropertyDefinitions]: {\n        url: urls.propertyDefinitions(),\n        label: (\n            <TitleWithIcon\n                icon={\n                    <Tooltip title=\"Properties are additional data sent along with an event capture. Use properties to understand additional information about events and the actors that generate them.\">\n                        <IconInfo />\n                    </Tooltip>\n                }\n            >\n                Properties\n            </TitleWithIcon>\n        ),\n        content: <PropertyDefinitionsTable />,\n    },\n    [DataManagementTab.Annotations]: {\n        url: urls.annotations(),\n        content: <Annotations />,\n        label: 'Annotations',\n        buttons: <NewAnnotationButton />,\n    },\n    [DataManagementTab.History]: {\n        url: urls.dataManagementHistory(),\n        label: 'History',\n        content: (\n            <ActivityLog\n                scope={ActivityScope.DATA_MANAGEMENT}\n                caption=\"Only actions taken in the UI are captured in History. Automatic creation of definitions by ingestion is not shown here.\"\n            />\n        ),\n    },\n    [DataManagementTab.Revenue]: {\n        url: urls.revenue(),\n        label: (\n            <>\n                Revenue{' '}\n                <LemonTag type=\"warning\" size=\"small\" className=\"ml-2\">\n                    BETA\n                </LemonTag>\n            </>\n        ),\n        content: <RevenueEventsSettings />,\n        flag: FEATURE_FLAGS.WEB_REVENUE_TRACKING,\n    },\n    [DataManagementTab.IngestionWarnings]: {\n        url: urls.ingestionWarnings(),\n        label: 'Ingestion warnings',\n        content: <IngestionWarningsView />,\n        flag: FEATURE_FLAGS.INGESTION_WARNINGS_ENABLED,\n    },\n}\n\nconst dataManagementSceneLogic = kea<dataManagementSceneLogicType>([\n    path(['scenes', 'events', 'dataManagementSceneLogic']),\n    connect({\n        values: [featureFlagLogic, ['featureFlags']],\n    }),\n    actions({\n        setTab: (tab: DataManagementTab) => ({ tab }),\n    }),\n    reducers({\n        tab: [\n            DataManagementTab.EventDefinitions as DataManagementTab,\n            {\n                setTab: (_, { tab }) => tab,\n            },\n        ],\n    }),\n    selectors({\n        breadcrumbs: [\n            (s) => [s.tab],\n            (tab): Breadcrumb[] => {\n                return [\n                    {\n                        key: Scene.DataManagement,\n                        name: `Data management`,\n                        path: tabs.events.url,\n                    },\n                    {\n                        key: tab,\n                        name: capitalizeFirstLetter(tab),\n                        path: tabs[tab].url,\n                    },\n                ]\n            },\n        ],\n        enabledTabs: [\n            (s) => [s.featureFlags],\n            (featureFlags): DataManagementTab[] => {\n                const allTabs = Object.entries(tabs)\n                return allTabs\n                    .filter(([_, tab]) => {\n                        return !tab.flag || !!featureFlags[tab.flag]\n                    })\n                    .map(([tabName, _]) => tabName) as DataManagementTab[]\n            },\n        ],\n    }),\n    actionToUrl(() => ({\n        setTab: ({ tab }) => {\n            const tabUrl = tabs[tab as DataManagementTab]?.url || tabs.events.url\n            if (combineUrl(tabUrl).pathname === router.values.location.pathname) {\n                // don't clear the parameters if we're already on the right page\n                // otherwise we can't use a url with parameters as a landing page\n                return\n            }\n            return tabUrl\n        },\n    })),\n    urlToAction(({ actions, values }) => {\n        return Object.fromEntries(\n            Object.entries(tabs).map(([key, tab]) => [\n                tab.url,\n                () => {\n                    if (values.tab !== key) {\n                        actions.setTab(key as DataManagementTab)\n                    }\n                },\n            ])\n        )\n    }),\n])\n\nexport function DataManagementScene(): JSX.Element {\n    const { enabledTabs, tab } = useValues(dataManagementSceneLogic)\n    const { setTab } = useActions(dataManagementSceneLogic)\n\n    const lemonTabs: LemonTab<DataManagementTab>[] = enabledTabs.map((key) => ({\n        key: key as DataManagementTab,\n        label: <span data-attr={`data-management-${key}-tab`}>{tabs[key].label}</span>,\n        content: tabs[key].content,\n    }))\n\n    return (\n        <>\n            <PageHeader\n                caption=\"Use data management to organize events that come into PostHog. Reduce noise, clarify usage, and help collaborators get the most value from your data.\"\n                tabbedPage\n                buttons={<>{tabs[tab].buttons}</>}\n            />\n\n            <LemonTabs activeKey={tab} onChange={(t) => setTab(t)} tabs={lemonTabs} />\n        </>\n    )\n}\n\nexport const scene: SceneExport = {\n    component: DataManagementScene,\n    logic: dataManagementSceneLogic,\n}\n", "export { Annotations } from './Annotations'\n", "import { IconPencil } from '@posthog/icons'\nimport { Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { MicrophoneHog } from 'lib/components/hedgehogs'\nimport { ProductIntroduction } from 'lib/components/ProductIntroduction/ProductIntroduction'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonTable, LemonTableColumn, LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { createdAtColumn } from 'lib/lemon-ui/LemonTable/columnUtils'\nimport { LemonTag } from 'lib/lemon-ui/LemonTag/LemonTag'\nimport { ProfilePicture } from 'lib/lemon-ui/ProfilePicture'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { shortTimeZone } from 'lib/utils'\nimport { organizationLogic } from 'scenes/organizationLogic'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { urls } from 'scenes/urls'\n\nimport { AnnotationScope, AnnotationType, InsightShortId, ProductKey } from '~/types'\n\nimport { AnnotationModal } from './AnnotationModal'\nimport {\n    ANNOTATION_DAYJS_FORMAT,\n    annotationModalLogic,\n    annotationScopeToLevel,\n    annotationScopeToName,\n} from './annotationModalLogic'\n\nexport function Annotations(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n    const { currentOrganization } = useValues(organizationLogic)\n    const { annotations, annotationsLoading, next, loadingNext, timezone, shouldShowEmptyState } =\n        useValues(annotationModalLogic)\n    const { loadAnnotationsNext, openModalToCreateAnnotation } = useActions(annotationModalLogic)\n\n    const columns: LemonTableColumns<AnnotationType> = [\n        {\n            title: 'Annotation',\n            key: 'annotation',\n            width: '30%',\n            render: function RenderAnnotation(_, annotation: AnnotationType): JSX.Element {\n                return (\n                    <div className=\"ph-no-capture font-semibold\">\n                        <Link subtle to={urls.annotation(annotation.id)}>\n                            {annotation.content}\n                        </Link>\n                    </div>\n                )\n            },\n        },\n        {\n            title: `Date and time (${shortTimeZone(timezone)})`,\n            dataIndex: 'date_marker',\n            render: function RenderDateMarker(_, annotation: AnnotationType): string {\n                // Format marker. Minute precision is used, because that's as detailed as our graphs can be\n                return annotation.date_marker?.format(ANNOTATION_DAYJS_FORMAT) || ''\n            },\n            sorter: (a, b) => a.date_marker?.diff(b.date_marker) || 1,\n        },\n        {\n            title: 'Scope',\n            key: 'scope',\n            render: function RenderType(_, annotation: AnnotationType): JSX.Element {\n                const scopeName = annotationScopeToName[annotation.scope]\n                const tooltip =\n                    annotation.scope === AnnotationScope.Insight\n                        ? `This annotation only applies to the \"${annotation.insight_name}\" insight`\n                        : annotation.scope === AnnotationScope.Dashboard\n                        ? `This annotation applies to all insights on the ${annotation.dashboard_name} dashboard`\n                        : annotation.scope === AnnotationScope.Project\n                        ? `This annotation applies to all insights in the ${currentTeam?.name} project`\n                        : `This annotation applies to all insights in the ${currentOrganization?.name} organization`\n                return (\n                    <Tooltip title={tooltip} placement=\"right\">\n                        <LemonTag className=\"uppercase\">\n                            {annotation.scope === AnnotationScope.Insight ? (\n                                <Link\n                                    to={urls.insightView(annotation.insight_short_id as InsightShortId)}\n                                    className=\"flex items-center\"\n                                    target=\"_blank\"\n                                    targetBlankIcon\n                                >\n                                    {scopeName}\n                                </Link>\n                            ) : (\n                                scopeName\n                            )}\n                        </LemonTag>\n                    </Tooltip>\n                )\n            },\n            sorter: (a, b) => annotationScopeToLevel[a.scope] - annotationScopeToLevel[b.scope],\n        },\n        {\n            title: 'Created\u00A0by',\n            dataIndex: 'created_by',\n            render: function Render(_: any, item) {\n                const { created_by, creation_type } = item\n                return (\n                    <div className=\"flex flex-row items-center\">\n                        <ProfilePicture\n                            user={creation_type === 'GIT' ? { first_name: 'GitHub Actions' } : created_by}\n                            showName\n                            size=\"md\"\n                            type={creation_type === 'GIT' ? 'bot' : 'person'}\n                        />\n                    </div>\n                )\n            },\n            sorter: (a, b) =>\n                (a.created_by?.first_name || a.created_by?.email || '').localeCompare(\n                    b.created_by?.first_name || b.created_by?.email || ''\n                ),\n        },\n        createdAtColumn() as LemonTableColumn<AnnotationType, keyof AnnotationType | undefined>,\n        {\n            key: 'actions',\n            width: 0,\n            render: function RenderActions(_, annotation): JSX.Element {\n                return <LemonButton icon={<IconPencil />} size=\"small\" to={urls.annotation(annotation.id)} />\n            },\n        },\n    ]\n\n    return (\n        <>\n            <p>\n                Annotations allow you to mark when certain changes happened so you can easily see how they impacted your\n                metrics.\n            </p>\n            <div data-attr=\"annotations-content\">\n                <div className=\"mt-4\">\n                    <ProductIntroduction\n                        productName=\"Annotations\"\n                        productKey={ProductKey.ANNOTATIONS}\n                        thingName=\"annotation\"\n                        description=\"Annotations allow you to mark when certain changes happened so you can easily see how they impacted your metrics.\"\n                        docsURL=\"https://posthog.com/docs/data/annotations\"\n                        action={() => openModalToCreateAnnotation()}\n                        isEmpty={annotations.length === 0 && !annotationsLoading}\n                        customHog={MicrophoneHog}\n                    />\n                </div>\n                {!shouldShowEmptyState && (\n                    <>\n                        <LemonTable\n                            data-attr=\"annotations-table\"\n                            rowKey=\"id\"\n                            dataSource={annotations}\n                            columns={columns}\n                            defaultSorting={{\n                                columnKey: 'date_marker',\n                                order: -1,\n                            }}\n                            noSortingCancellation\n                            loading={annotationsLoading}\n                            emptyState=\"No annotations yet\"\n                        />\n                        {next && (\n                            <div className=\"flex justify-center mt-6\">\n                                <LemonButton\n                                    type=\"primary\"\n                                    loading={loadingNext}\n                                    onClick={(): void => {\n                                        loadAnnotationsNext()\n                                    }}\n                                >\n                                    Load more annotations\n                                </LemonButton>\n                            </div>\n                        )}\n                    </>\n                )}\n            </div>\n            <AnnotationModal />\n        </>\n    )\n}\n", "import { IconTrash } from '@posthog/icons'\nimport { useActions, useValues } from 'kea'\nimport { ProductIntroduction } from 'lib/components/ProductIntroduction/ProductIntroduction'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { TaxonomicPopover } from 'lib/components/TaxonomicPopover/TaxonomicPopover'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonTable } from 'lib/lemon-ui/LemonTable'\nimport { useCallback, useRef } from 'react'\nimport { revenueEventsSettingsLogic } from 'scenes/data-management/revenue/revenueEventsSettingsLogic'\n\nimport { RevenueTrackingEventItem } from '~/queries/schema/schema-general'\n\nconst ADD_EVENT_BUTTON_ID = 'data-management-revenue-settings-add-event'\n\nexport function RevenueEventsSettings(): JSX.Element {\n    const { saveDisabledReason, events } = useValues(revenueEventsSettingsLogic)\n    const { addEvent, deleteEvent, updatePropertyName, save } = useActions(revenueEventsSettingsLogic)\n\n    const renderPropertyColumn = useCallback(\n        (_, item: RevenueTrackingEventItem) => {\n            return (\n                <TaxonomicPopover\n                    groupType={TaxonomicFilterGroupType.EventProperties}\n                    onChange={(newPropertyName) => updatePropertyName(item.eventName, newPropertyName)}\n                    value={item.revenueProperty}\n                    placeholder=\"Choose event property\"\n                    excludedProperties={{}}\n                    showNumericalPropsOnly={true}\n                    disabledReason={\n                        item.eventName === '$pageview' || item.eventName === '$autocapture'\n                            ? 'Built-in events must use revenue'\n                            : undefined\n                    }\n                />\n            )\n        },\n        [updatePropertyName]\n    )\n\n    const buttonRef = useRef<HTMLButtonElement | null>(null)\n\n    return (\n        <div className=\"space-y-4\">\n            <ProductIntroduction\n                productName=\"Revenue tracking\"\n                thingName=\"revenue event\"\n                description=\"Revenue events are used to track revenue in Web analytics. You can choose which custom events PostHog should consider as revenue events, and which event property corresponds to the value of the event.\"\n                isEmpty={events.length === 0}\n                action={() => buttonRef.current?.click()}\n            />\n            <LemonTable<RevenueTrackingEventItem>\n                columns={[\n                    { key: 'eventName', title: 'Event name', dataIndex: 'eventName' },\n                    {\n                        key: 'revenueProperty',\n                        title: 'Revenue property',\n                        dataIndex: 'revenueProperty',\n                        render: renderPropertyColumn,\n                    },\n                    {\n                        key: 'delete',\n                        title: '',\n                        render: (_, item) => (\n                            <LemonButton\n                                type=\"secondary\"\n                                onClick={() => deleteEvent(item.eventName)}\n                                icon={<IconTrash />}\n                            >\n                                Delete\n                            </LemonButton>\n                        ),\n                    },\n                ]}\n                dataSource={events}\n                rowKey={(item) => item.eventName}\n            />\n\n            <TaxonomicPopover\n                type=\"primary\"\n                groupType={TaxonomicFilterGroupType.CustomEvents}\n                onChange={addEvent}\n                value={undefined}\n                placeholder=\"Create revenue event\"\n                excludedProperties={{\n                    [TaxonomicFilterGroupType.CustomEvents]: [null, ...events.map((item) => item.eventName)],\n                }}\n                id={ADD_EVENT_BUTTON_ID}\n                ref={buttonRef}\n            />\n            <div className=\"mt-4\">\n                <LemonButton type=\"primary\" onClick={save} disabledReason={saveDisabledReason}>\n                    Save\n                </LemonButton>\n            </div>\n        </div>\n    )\n}\n", "import { actions, afterMount, connect, kea, path, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport { TaxonomicFilterValue } from 'lib/components/TaxonomicFilter/types'\nimport { objectsEqual } from 'lib/utils'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { RevenueTrackingConfig, RevenueTrackingEventItem } from '~/queries/schema/schema-general'\n\nimport type { revenueEventsSettingsLogicType } from './revenueEventsSettingsLogicType'\n\nconst createEmptyConfig = (): RevenueTrackingConfig => ({ events: [] })\n\nexport const revenueEventsSettingsLogic = kea<revenueEventsSettingsLogicType>([\n    path(['scenes', 'data-management', 'revenue', 'revenueEventsSettingsLogic']),\n    connect({\n        values: [teamLogic, ['currentTeam', 'currentTeamId']],\n        actions: [teamLogic, ['updateCurrentTeam']],\n    }),\n    actions({\n        addEvent: (eventName: TaxonomicFilterValue) => ({ eventName }),\n        deleteEvent: (eventName: string) => ({ eventName }),\n        updatePropertyName: (eventName: string, revenueProperty: string) => ({ eventName, revenueProperty }),\n    }),\n    reducers(({ values }) => ({\n        revenueTrackingConfig: [\n            null as RevenueTrackingConfig | null,\n            {\n                addEvent: (state, { eventName }) => {\n                    if (\n                        !state ||\n                        !eventName ||\n                        typeof eventName !== 'string' ||\n                        eventName == '$pageview' ||\n                        eventName == '$autocapture'\n                    ) {\n                        return state\n                    }\n                    const existingEvents = new Set(state.events.map((item: RevenueTrackingEventItem) => item.eventName))\n                    if (existingEvents.has(eventName)) {\n                        return state\n                    }\n\n                    return { ...state, events: [...state.events, { eventName, revenueProperty: 'revenue' }] }\n                },\n                deleteEvent: (state, { eventName }) => {\n                    if (!state) {\n                        return state\n                    }\n                    return { ...state, events: state.events.filter((item) => item.eventName !== eventName) }\n                },\n                updatePropertyName: (state, { eventName, revenueProperty }) => {\n                    if (!state) {\n                        return state\n                    }\n                    return {\n                        ...state,\n                        events: state.events.map((item) => {\n                            if (item.eventName === eventName) {\n                                return { ...item, revenueProperty }\n                            }\n                            return item\n                        }),\n                    }\n                },\n            },\n        ],\n        savedRevenueTrackingConfig: [\n            values.currentTeam?.revenue_tracking_config || {},\n            {\n                saveChanges: (_, team) => team.revenue_tracking_config || {},\n            },\n        ],\n    })),\n    selectors({\n        events: [\n            (s) => [s.revenueTrackingConfig],\n            (revenueTrackingConfig: RevenueTrackingConfig | null) => revenueTrackingConfig?.events || [],\n        ],\n        saveDisabledReason: [\n            (s) => [s.revenueTrackingConfig, s.savedRevenueTrackingConfig],\n            (config, savedConfig): string | null => {\n                if (!config) {\n                    return 'Loading...'\n                }\n                if (objectsEqual(config, savedConfig)) {\n                    return 'No changes to save'\n                }\n                return null\n            },\n        ],\n    }),\n    loaders(({ values, actions }) => ({\n        saveChanges: {\n            save: () => {\n                if (values.saveDisabledReason) {\n                    return null\n                }\n                actions.updateCurrentTeam({\n                    revenue_tracking_config: values.revenueTrackingConfig || createEmptyConfig(),\n                })\n                return null\n            },\n        },\n        revenueTrackingConfig: {\n            loadRevenueTrackingConfig: async () => {\n                if (values.currentTeam) {\n                    return values.currentTeam.revenue_tracking_config || createEmptyConfig()\n                }\n                return null\n            },\n        },\n    })),\n    afterMount(({ actions }) => {\n        actions.loadRevenueTrackingConfig()\n    }),\n])\n", "import { IconCheckCircle, IconPin, IconPinFilled } from '@posthog/icons'\nimport { LemonInput, LemonSegmentedButton } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport api from 'lib/api'\nimport { ObjectTags } from 'lib/components/ObjectTags/ObjectTags'\nimport { ProductIntroduction } from 'lib/components/ProductIntroduction/ProductIntroduction'\nimport { IconPlayCircle } from 'lib/lemon-ui/icons'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonDivider } from 'lib/lemon-ui/LemonDivider'\nimport { LemonTable } from 'lib/lemon-ui/LemonTable'\nimport { createdAtColumn, createdByColumn } from 'lib/lemon-ui/LemonTable/columnUtils'\nimport { LemonTableLink } from 'lib/lemon-ui/LemonTable/LemonTableLink'\nimport { LemonTableColumn, LemonTableColumns } from 'lib/lemon-ui/LemonTable/types'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast/LemonToast'\nimport { stripHTTP } from 'lib/utils'\nimport { deleteWithUndo } from 'lib/utils/deleteWithUndo'\nimport { actionsLogic } from 'scenes/actions/actionsLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { actionsModel } from '~/models/actionsModel'\nimport { InsightVizNode, NodeKind } from '~/queries/schema/schema-general'\nimport { ActionType, AvailableFeature, ChartDisplayType, FilterLogicalOperator, ProductKey, ReplayTabs } from '~/types'\n\nimport { NewActionButton } from '../../actions/NewActionButton'\nimport { teamLogic } from '../../teamLogic'\nimport { urls } from '../../urls'\n\nexport function ActionsTable(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n    const { actionsLoading } = useValues(actionsModel({ params: 'include_count=1' }))\n    const { loadActions, pinAction, unpinAction } = useActions(actionsModel)\n\n    const { filterType, searchTerm, actionsFiltered, shouldShowEmptyState } = useValues(actionsLogic)\n    const { setFilterType, setSearchTerm } = useActions(actionsLogic)\n\n    const { hasAvailableFeature } = useValues(userLogic)\n    const { updateHasSeenProductIntroFor } = useActions(userLogic)\n\n    const tryInInsightsUrl = (action: ActionType): string => {\n        const query: InsightVizNode = {\n            kind: NodeKind.InsightVizNode,\n            source: {\n                kind: NodeKind.TrendsQuery,\n                series: [\n                    {\n                        id: action.id,\n                        name: action.name || undefined,\n                        kind: NodeKind.ActionsNode,\n                    },\n                ],\n                interval: 'day',\n                trendsFilter: { display: ChartDisplayType.ActionsLineGraph },\n            },\n        }\n        return urls.insightNew({ query })\n    }\n\n    const columns: LemonTableColumns<ActionType> = [\n        {\n            width: 0,\n            title: 'Pinned',\n            dataIndex: 'pinned_at',\n            sorter: (a: ActionType, b: ActionType) =>\n                (b.pinned_at ? new Date(b.pinned_at).getTime() : 0) -\n                (a.pinned_at ? new Date(a.pinned_at).getTime() : 0),\n            render: function Render(pinned, action) {\n                return (\n                    <LemonButton\n                        size=\"small\"\n                        onClick={pinned ? () => unpinAction(action) : () => pinAction(action)}\n                        tooltip={pinned ? 'Unpin action' : 'Pin action'}\n                        icon={pinned ? <IconPinFilled /> : <IconPin />}\n                    />\n                )\n            },\n        },\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            width: '25%',\n            sorter: (a: ActionType, b: ActionType) => (a.name || '').localeCompare(b.name || ''),\n            render: function RenderName(_, action: ActionType, index: number): JSX.Element {\n                return (\n                    <LemonTableLink\n                        data-attr={'action-link-' + index}\n                        to={urls.action(action.id)}\n                        title={action.name || <i>Unnamed</i>}\n                        description={action.description}\n                    />\n                )\n            },\n        },\n        {\n            title: 'Type',\n            key: 'type',\n            render: function RenderType(_, action: ActionType): JSX.Element {\n                return (\n                    <span>\n                        {action.steps?.length ? (\n                            action.steps.map((step, index) => (\n                                <div key={index}>\n                                    {(() => {\n                                        let url = stripHTTP(step.url || '')\n                                        url = url.slice(0, 40) + (url.length > 40 ? '...' : '')\n                                        switch (step.event) {\n                                            case '$autocapture':\n                                                return 'Autocapture'\n                                            case '$pageview':\n                                                switch (step.url_matching) {\n                                                    case 'regex':\n                                                        return (\n                                                            <>\n                                                                Page view URL matches regex <strong>{url}</strong>\n                                                            </>\n                                                        )\n                                                    case 'exact':\n                                                        return (\n                                                            <>\n                                                                Page view URL matches exactly <strong>{url}</strong>\n                                                            </>\n                                                        )\n                                                    default:\n                                                        return (\n                                                            <>\n                                                                Page view URL contains <strong>{url}</strong>\n                                                            </>\n                                                        )\n                                                }\n                                            case '':\n                                            case null:\n                                            case undefined:\n                                                return 'Any event'\n                                            default:\n                                                return (\n                                                    <>\n                                                        Event: <strong>{step.event}</strong>\n                                                    </>\n                                                )\n                                        }\n                                    })()}\n                                </div>\n                            ))\n                        ) : (\n                            <i>Empty \u2013 set this action up</i>\n                        )}\n                    </span>\n                )\n            },\n        },\n        ...(hasAvailableFeature(AvailableFeature.TAGGING)\n            ? [\n                  {\n                      title: 'Tags',\n                      dataIndex: 'tags',\n                      width: 250,\n                      key: 'tags',\n                      render: function renderTags(tags: string[]) {\n                          return <ObjectTags tags={tags} staticOnly />\n                      },\n                  } as LemonTableColumn<ActionType, keyof ActionType | undefined>,\n              ]\n            : []),\n        createdByColumn() as LemonTableColumn<ActionType, keyof ActionType | undefined>,\n        createdAtColumn() as LemonTableColumn<ActionType, keyof ActionType | undefined>,\n        ...(currentTeam?.slack_incoming_webhook\n            ? [\n                  {\n                      title: 'Webhook',\n                      dataIndex: 'post_to_slack',\n                      sorter: (a: ActionType, b: ActionType) => Number(a.post_to_slack) - Number(b.post_to_slack),\n                      render: function RenderActions(post_to_slack): JSX.Element | null {\n                          return post_to_slack ? <IconCheckCircle /> : null\n                      },\n                  } as LemonTableColumn<ActionType, keyof ActionType | undefined>,\n              ]\n            : []),\n        {\n            width: 0,\n            render: function RenderActions(_, action) {\n                return (\n                    <More\n                        overlay={\n                            <>\n                                <LemonButton to={urls.action(action.id)} fullWidth>\n                                    Edit\n                                </LemonButton>\n                                <LemonButton to={urls.duplicateAction(action)} fullWidth>\n                                    Duplicate\n                                </LemonButton>\n                                <LemonButton\n                                    to={urls.replay(ReplayTabs.Home, {\n                                        filter_group: {\n                                            type: FilterLogicalOperator.And,\n                                            values: [\n                                                {\n                                                    type: FilterLogicalOperator.And,\n                                                    values: [\n                                                        {\n                                                            id: action.id,\n                                                            type: 'actions',\n                                                            order: 0,\n                                                            name: action.name,\n                                                        },\n                                                    ],\n                                                },\n                                            ],\n                                        },\n                                    })}\n                                    sideIcon={<IconPlayCircle />}\n                                    fullWidth\n                                    data-attr=\"action-table-view-recordings\"\n                                >\n                                    View recordings\n                                </LemonButton>\n                                <LemonButton to={tryInInsightsUrl(action)} fullWidth>\n                                    Try out in Insights\n                                </LemonButton>\n                                <LemonDivider />\n                                <LemonButton\n                                    status=\"danger\"\n                                    onClick={() => {\n                                        deleteWithUndo({\n                                            endpoint: api.actions.determineDeleteEndpoint(),\n                                            object: action,\n                                            callback: loadActions,\n                                        }).catch((e: any) => {\n                                            lemonToast.error(`Error deleting action: ${e.detail}`)\n                                        })\n                                    }}\n                                    fullWidth\n                                >\n                                    Delete action\n                                </LemonButton>\n                            </>\n                        }\n                    />\n                )\n            },\n        },\n    ]\n\n    return (\n        <div data-attr=\"manage-events-table\">\n            <ProductIntroduction\n                productName=\"Actions\"\n                productKey={ProductKey.ACTIONS}\n                thingName=\"action\"\n                isEmpty={shouldShowEmptyState}\n                description=\"Use actions to combine events that you want to have tracked together or to make detailed Autocapture events easier to reuse.\"\n                docsURL=\"https://posthog.com/docs/data/actions\"\n                actionElementOverride={\n                    <NewActionButton onSelectOption={() => updateHasSeenProductIntroFor(ProductKey.ACTIONS, true)} />\n                }\n            />\n            {(shouldShowEmptyState && filterType === 'me') || !shouldShowEmptyState ? (\n                <div className=\"flex items-center justify-between gap-2 mb-4\">\n                    <LemonInput\n                        type=\"search\"\n                        placeholder=\"Search for actions\"\n                        onChange={setSearchTerm}\n                        value={searchTerm}\n                    />\n                    <LemonSegmentedButton\n                        value={filterType}\n                        onChange={setFilterType}\n                        options={[\n                            { value: 'all', label: 'All actions' },\n                            { value: 'me', label: 'My actions' },\n                        ]}\n                    />\n                </div>\n            ) : null}\n            {(!shouldShowEmptyState || filterType === 'me') && (\n                <>\n                    <LemonTable\n                        columns={columns}\n                        loading={actionsLoading}\n                        rowKey=\"id\"\n                        pagination={{ pageSize: 100 }}\n                        data-attr=\"actions-table\"\n                        dataSource={actionsFiltered}\n                        defaultSorting={{\n                            columnKey: 'created_by',\n                            order: -1,\n                        }}\n                        emptyState=\"No results. Create a new action?\"\n                    />\n                </>\n            )}\n        </div>\n    )\n}\n", "import Fuse from 'fuse.js'\nimport { actions, connect, kea, path, reducers, selectors } from 'kea'\nimport { subscriptions } from 'kea-subscriptions'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { DataManagementTab } from 'scenes/data-management/DataManagementScene'\nimport { Scene } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { actionsModel } from '~/models/actionsModel'\nimport { ActionType, Breadcrumb } from '~/types'\n\nimport type { actionsLogicType } from './actionsLogicType'\n\nexport type ActionsFilterType = 'all' | 'me'\n\nexport const actionsFuse = new Fuse<ActionType>([], {\n    keys: [{ name: 'name', weight: 2 }, 'description', 'tags'],\n    threshold: 0.3,\n    ignoreLocation: true,\n    includeMatches: true,\n})\n\nexport const actionsLogic = kea<actionsLogicType>([\n    path(['scenes', 'actions', 'actionsLogic']),\n    connect(() => ({\n        values: [\n            actionsModel({ params: 'include_count=1' }),\n            ['actions', 'actionsLoading'],\n            userLogic,\n            ['user'],\n            featureFlagLogic,\n            ['featureFlags'],\n        ],\n    })),\n    actions({\n        setFilterType: (filterType: ActionsFilterType) => ({ filterType }),\n        setSearchTerm: (searchTerm: string) => ({ searchTerm }),\n    }),\n    reducers({\n        filterType: [\n            'all' as ActionsFilterType,\n            { persist: true },\n            {\n                setFilterType: (_, { filterType }) => filterType,\n            },\n        ],\n        searchTerm: [\n            '',\n            {\n                setSearchTerm: (_, { searchTerm }) => searchTerm,\n            },\n        ],\n    }),\n    selectors({\n        actionsFiltered: [\n            (s) => [s.actions, s.filterType, s.searchTerm, s.user],\n            (actions, filterType, searchTerm, user) => {\n                let data: ActionType[] = actions\n                if (searchTerm) {\n                    data = actionsFuse.search(searchTerm).map((result) => result.item)\n                }\n                if (filterType === 'me') {\n                    data = data.filter((item) => item.created_by?.uuid === user?.uuid)\n                }\n                return data\n            },\n        ],\n        breadcrumbs: [\n            () => [],\n            (): Breadcrumb[] => [\n                {\n                    key: Scene.DataManagement,\n                    name: `Data management`,\n                    path: urls.eventDefinitions(),\n                },\n                {\n                    key: DataManagementTab.Actions,\n                    name: 'Actions',\n                    path: urls.actions(),\n                },\n            ],\n        ],\n        shouldShowEmptyState: [\n            (s) => [s.actionsFiltered, s.actionsLoading, s.searchTerm],\n            (actionsFiltered, actionsLoading, searchTerm): boolean => {\n                return actionsFiltered.length == 0 && !actionsLoading && !searchTerm.length\n            },\n        ],\n    }),\n    subscriptions({\n        actions: (actions) => {\n            actionsFuse.setCollection(actions)\n        },\n    }),\n])\n", "import { LemonButton, LemonInput, LemonSelect, LemonSelectOptions, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { ObjectTags } from 'lib/components/ObjectTags/ObjectTags'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { TZLabel } from 'lib/components/TZLabel'\nimport { EVENT_DEFINITIONS_PER_PAGE } from 'lib/constants'\nimport { IconPlayCircle } from 'lib/lemon-ui/icons'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonTable, LemonTableColumn, LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { DefinitionHeader, getEventDefinitionIcon } from 'scenes/data-management/events/DefinitionHeader'\nimport { EventDefinitionProperties } from 'scenes/data-management/events/EventDefinitionProperties'\nimport { eventDefinitionsTableLogic } from 'scenes/data-management/events/eventDefinitionsTableLogic'\nimport { organizationLogic } from 'scenes/organizationLogic'\nimport { urls } from 'scenes/urls'\n\nimport { EventDefinition, EventDefinitionType, FilterLogicalOperator, ReplayTabs } from '~/types'\n\nconst eventTypeOptions: LemonSelectOptions<EventDefinitionType> = [\n    { value: EventDefinitionType.Event, label: 'All events', 'data-attr': 'event-type-option-event' },\n    {\n        value: EventDefinitionType.EventCustom,\n        label: 'Custom events',\n        'data-attr': 'event-type-option-event-custom',\n    },\n    {\n        value: EventDefinitionType.EventPostHog,\n        label: 'PostHog events',\n        'data-attr': 'event-type-option-event-posthog',\n    },\n]\n\nexport function EventDefinitionsTable(): JSX.Element {\n    const { eventDefinitions, eventDefinitionsLoading, filters } = useValues(eventDefinitionsTableLogic)\n    const { loadEventDefinitions, setFilters } = useActions(eventDefinitionsTableLogic)\n    const { hasTagging } = useValues(organizationLogic)\n\n    const columns: LemonTableColumns<EventDefinition> = [\n        {\n            key: 'icon',\n            width: 0,\n            render: function Render(_, definition: EventDefinition) {\n                return <span className=\"text-xl text-secondary\">{getEventDefinitionIcon(definition)}</span>\n            },\n        },\n        {\n            title: 'Name',\n            key: 'name',\n            render: function Render(_, definition: EventDefinition) {\n                return (\n                    <DefinitionHeader\n                        definition={definition}\n                        to={urls.eventDefinition(definition.id)}\n                        taxonomicGroupType={TaxonomicFilterGroupType.Events}\n                    />\n                )\n            },\n            sorter: true,\n        },\n        {\n            title: 'Last seen',\n            key: 'last_seen_at',\n            className: 'definition-column-last_seen_at',\n            render: function Render(_, definition: EventDefinition) {\n                return definition.last_seen_at ? <TZLabel time={definition.last_seen_at} /> : null\n            },\n            sorter: true,\n        },\n        ...(hasTagging\n            ? [\n                  {\n                      title: 'Tags',\n                      key: 'tags',\n                      render: function Render(_, definition: EventDefinition) {\n                          return <ObjectTags tags={definition.tags ?? []} staticOnly />\n                      },\n                  } as LemonTableColumn<EventDefinition, keyof EventDefinition | undefined>,\n              ]\n            : []),\n        {\n            key: 'actions',\n            width: 0,\n            render: function RenderActions(_, definition: EventDefinition) {\n                return (\n                    <More\n                        data-attr={`event-definitions-table-more-button-${definition.name}`}\n                        overlay={\n                            <>\n                                <LemonButton\n                                    to={urls.replay(ReplayTabs.Home, {\n                                        filter_group: {\n                                            type: FilterLogicalOperator.And,\n                                            values: [\n                                                {\n                                                    type: FilterLogicalOperator.And,\n                                                    values: [\n                                                        {\n                                                            id: definition.name,\n                                                            type: 'events',\n                                                            order: 0,\n                                                            name: definition.name,\n                                                        },\n                                                    ],\n                                                },\n                                            ],\n                                        },\n                                    })}\n                                    fullWidth\n                                    sideIcon={<IconPlayCircle />}\n                                    data-attr=\"event-definitions-table-view-recordings\"\n                                >\n                                    View recordings\n                                </LemonButton>\n                            </>\n                        }\n                    />\n                )\n            },\n        },\n    ]\n\n    return (\n        <div data-attr=\"manage-events-table\">\n            <LemonBanner className=\"mb-4\" type=\"info\">\n                Looking for{' '}\n                {filters.event_type === 'event_custom'\n                    ? 'custom '\n                    : filters.event_type === 'event_posthog'\n                    ? 'PostHog '\n                    : ''}\n                event usage statistics?{' '}\n                <Link\n                    to={urls.insightNewHogQL({\n                        query:\n                            'SELECT event, count()\\n' +\n                            'FROM events\\n' +\n                            'WHERE {filters}\\n' +\n                            (filters.event_type === 'event_custom'\n                                ? \"AND event NOT LIKE '$%'\\n\"\n                                : filters.event_type === 'event_posthog'\n                                ? \"AND event LIKE '$%'\\n\"\n                                : '') +\n                            'GROUP BY event\\n' +\n                            'ORDER BY count() DESC',\n                        filters: { dateRange: { date_from: '-24h' } },\n                    })}\n                >\n                    Query with SQL\n                </Link>\n            </LemonBanner>\n\n            <div className=\"flex justify-between items-center gap-2 mb-4\">\n                <LemonInput\n                    type=\"search\"\n                    placeholder=\"Search for events\"\n                    onChange={(v) => setFilters({ event: v || '' })}\n                    value={filters.event}\n                />\n                <div className=\"flex items-center gap-2\">\n                    <span>Type:</span>\n                    <LemonSelect\n                        value={filters.event_type}\n                        options={eventTypeOptions}\n                        data-attr=\"event-type-filter\"\n                        dropdownMatchSelectWidth={false}\n                        onChange={(value) => {\n                            setFilters({ event_type: value as EventDefinitionType })\n                        }}\n                        size=\"small\"\n                    />\n                </div>\n            </div>\n            <LemonTable\n                columns={columns}\n                data-attr=\"events-definition-table\"\n                loading={eventDefinitionsLoading}\n                rowKey=\"id\"\n                pagination={{\n                    controlled: true,\n                    currentPage: eventDefinitions?.page ?? 1,\n                    entryCount: eventDefinitions?.count ?? 0,\n                    pageSize: EVENT_DEFINITIONS_PER_PAGE,\n                    onForward: eventDefinitions.next\n                        ? () => {\n                              loadEventDefinitions(eventDefinitions.next)\n                          }\n                        : undefined,\n                    onBackward: eventDefinitions.previous\n                        ? () => {\n                              loadEventDefinitions(eventDefinitions.previous)\n                          }\n                        : undefined,\n                }}\n                onSort={(newSorting) =>\n                    setFilters({\n                        ordering: newSorting\n                            ? `${newSorting.order === -1 ? '-' : ''}${newSorting.columnKey}`\n                            : undefined,\n                    })\n                }\n                expandable={{\n                    expandedRowRender: function RenderPropertiesTable(definition) {\n                        return (\n                            <div className=\"p-4\">\n                                <EventDefinitionProperties definition={definition} />\n                            </div>\n                        )\n                    },\n                    rowExpandable: () => true,\n                    noIndent: true,\n                }}\n                dataSource={eventDefinitions.results}\n                useURLForSorting={false}\n                emptyState=\"No event definitions\"\n                nouns={['event', 'events']}\n            />\n        </div>\n    )\n}\n", "import { LemonTag } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { ObjectTags } from 'lib/components/ObjectTags/ObjectTags'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { PROPERTY_DEFINITIONS_PER_EVENT } from 'lib/constants'\nimport { LemonTable, LemonTableColumn, LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { useEffect } from 'react'\nimport { eventDefinitionsTableLogic } from 'scenes/data-management/events/eventDefinitionsTableLogic'\nimport { organizationLogic } from 'scenes/organizationLogic'\nimport { urls } from 'scenes/urls'\n\nimport { EventDefinition, PropertyDefinition } from '~/types'\n\nimport { DefinitionHeader } from './DefinitionHeader'\n\nexport function EventDefinitionProperties({ definition }: { definition: EventDefinition }): JSX.Element {\n    const { loadPropertiesForEvent } = useActions(eventDefinitionsTableLogic)\n    const { eventPropertiesCacheMap, eventDefinitionPropertiesLoading } = useValues(eventDefinitionsTableLogic)\n    const { hasTagging } = useValues(organizationLogic)\n\n    useEffect(() => {\n        loadPropertiesForEvent(definition)\n    }, [])\n\n    const columns: LemonTableColumns<PropertyDefinition> = [\n        {\n            title: 'Property',\n            key: 'property',\n            render: function Render(_, _definition: PropertyDefinition) {\n                return (\n                    <DefinitionHeader\n                        definition={_definition}\n                        to={urls.propertyDefinition(_definition.id)}\n                        taxonomicGroupType={TaxonomicFilterGroupType.EventProperties}\n                    />\n                )\n            },\n        },\n        {\n            title: 'Type',\n            key: 'type',\n            render: function Render(_, _definition: PropertyDefinition) {\n                return <LemonTag type=\"muted\">{_definition.property_type ?? '-'}</LemonTag>\n            },\n        },\n        ...(hasTagging\n            ? [\n                  {\n                      title: 'Tags',\n                      key: 'tags',\n                      render: function Render(_, _definition: PropertyDefinition) {\n                          return <ObjectTags tags={_definition.tags ?? []} staticOnly />\n                      },\n                  } as LemonTableColumn<PropertyDefinition, keyof PropertyDefinition | undefined>,\n              ]\n            : []),\n        {\n            title: 'Example',\n            key: 'example',\n            align: 'right',\n            render: function Render(_, _definition: PropertyDefinition) {\n                return (\n                    <LemonTag className=\"font-mono\" type=\"muted\">\n                        {_definition.example ?? '-'}\n                    </LemonTag>\n                )\n            },\n        },\n    ]\n\n    return (\n        <div>\n            <h3>Top properties</h3>\n            <p>\n                Please note that description and tags are shared across events. PostHog properties are excluded from\n                this list.\n            </p>\n            <LemonTable\n                id={`event-properties-definition-table-${definition.id}`}\n                data-attr=\"event-properties-definition-nested-table\"\n                columns={columns}\n                dataSource={eventPropertiesCacheMap?.[definition.id]?.results ?? []}\n                emptyState=\"This event has no properties\"\n                nouns={['property definition', 'property definitions']}\n                pagination={{\n                    controlled: true,\n                    pageSize: PROPERTY_DEFINITIONS_PER_EVENT,\n                    currentPage: eventPropertiesCacheMap?.[definition.id]?.page ?? 1,\n                    entryCount: eventPropertiesCacheMap?.[definition.id]?.count ?? 0,\n                    onForward: eventPropertiesCacheMap?.[definition.id]?.next\n                        ? () => {\n                              loadPropertiesForEvent(definition, eventPropertiesCacheMap[definition.id].next)\n                          }\n                        : undefined,\n                    onBackward: eventPropertiesCacheMap?.[definition.id]?.previous\n                        ? () => {\n                              loadPropertiesForEvent(definition, eventPropertiesCacheMap[definition.id].previous)\n                          }\n                        : undefined,\n                }}\n                loading={eventDefinitionPropertiesLoading.includes(definition.id)}\n            />\n        </div>\n    )\n}\n", "import { actions, kea, key, listeners, path, props, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport { actionToUrl, combineUrl, router, urlToAction } from 'kea-router'\nimport api, { PaginatedResponse } from 'lib/api'\nimport { convertPropertyGroupToProperties } from 'lib/components/PropertyFilters/utils'\nimport { EVENT_DEFINITIONS_PER_PAGE, PROPERTY_DEFINITIONS_PER_EVENT } from 'lib/constants'\nimport { PROPERTY_KEYS } from 'lib/taxonomy'\nimport { objectsEqual } from 'lib/utils'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\n\nimport { AnyPropertyFilter, EventDefinition, EventDefinitionType, PropertyDefinition } from '~/types'\n\nimport type { eventDefinitionsTableLogicType } from './eventDefinitionsTableLogicType'\n\nexport interface EventDefinitionsPaginatedResponse extends PaginatedResponse<EventDefinition> {\n    current?: string\n    count?: number\n    page?: number\n}\n\nexport interface PropertyDefinitionsPaginatedResponse extends PaginatedResponse<PropertyDefinition> {\n    current?: string\n    count?: number\n    page?: number\n}\n\nexport interface Filters {\n    event: string\n    properties: AnyPropertyFilter[]\n    event_type: EventDefinitionType\n    ordering?: string\n}\n\nfunction cleanFilters(filter: Partial<Filters>): Filters {\n    return {\n        event: '',\n        properties: [],\n        event_type: EventDefinitionType.Event,\n        ordering: 'event',\n        ...filter,\n    }\n}\n\nexport function createDefinitionKey(event?: EventDefinition, property?: PropertyDefinition): string {\n    return `${event?.id ?? 'event'}-${property?.id ?? 'property'}`\n}\n\nexport function normalizePropertyDefinitionEndpointUrl(\n    url: string | null | undefined,\n    searchParams: Record<string, any> = {},\n    full: boolean = false\n): string | null {\n    if (!full && !url) {\n        return null\n    }\n    return api.propertyDefinitions.determineListEndpoint({\n        ...(url ? combineUrl(url).searchParams : {}),\n        ...searchParams,\n    })\n}\n\nfunction normalizeEventDefinitionEndpointUrl({\n    url,\n    searchParams = {},\n    full = false,\n    eventTypeFilter = EventDefinitionType.Event,\n}: {\n    url?: string | null | undefined\n    searchParams?: Record<string, any>\n    full?: boolean\n    eventTypeFilter?: EventDefinitionType\n}): string | null {\n    if (!full && !url) {\n        return null\n    }\n    const params = {\n        ...(url\n            ? {\n                  ...combineUrl(url).searchParams,\n                  event_type: eventTypeFilter,\n              }\n            : {}),\n        ...searchParams,\n    }\n    return api.eventDefinitions.determineListEndpoint(params)\n}\n\nexport interface EventDefinitionsTableLogicProps {\n    key: string\n}\n\nexport const eventDefinitionsTableLogic = kea<eventDefinitionsTableLogicType>([\n    path((key) => ['scenes', 'data-management', 'events', 'eventDefinitionsTableLogic', key]),\n    props({} as EventDefinitionsTableLogicProps),\n    key((props) => props.key || 'scene'),\n    actions({\n        loadEventDefinitions: (url: string | null = '') => ({ url }),\n        loadEventExample: (definition: EventDefinition) => ({ definition }),\n        loadPropertiesForEvent: (definition: EventDefinition, url: string | null = '') => ({ definition, url }),\n        setFilters: (filters: Partial<Filters>) => ({ filters }),\n        setLocalEventDefinition: (definition: EventDefinition) => ({ definition }),\n        setLocalPropertyDefinition: (event: EventDefinition, definition: PropertyDefinition) => ({ event, definition }),\n        setEventDefinitionPropertiesLoading: (ids: string[]) => ({ ids }),\n    }),\n    reducers({\n        filters: [\n            cleanFilters({}),\n            {\n                setFilters: (state, { filters }) => ({\n                    ...state,\n                    ...filters,\n                    properties: convertPropertyGroupToProperties(filters.properties) ?? [],\n                }),\n            },\n        ],\n        eventDefinitionPropertiesLoading: [\n            [] as string[],\n            {\n                setEventDefinitionPropertiesLoading: (_, { ids }) => ids ?? [],\n            },\n        ],\n    }),\n    loaders(({ values, cache, actions }) => ({\n        eventDefinitions: [\n            {\n                count: 0,\n                next: undefined,\n                current: undefined,\n                previous: undefined,\n                results: [],\n            } as EventDefinitionsPaginatedResponse,\n            {\n                loadEventDefinitions: async ({ url: _url }, breakpoint) => {\n                    let url = normalizeEventDefinitionEndpointUrl({\n                        url: _url,\n                        eventTypeFilter: values.filters.event_type,\n                    })\n                    if (url && url in (cache.apiCache ?? {})) {\n                        return cache.apiCache[url]\n                    }\n\n                    if (!url) {\n                        url = api.eventDefinitions.determineListEndpoint({\n                            event_type: values.filters.event_type,\n                        })\n                    }\n                    await breakpoint(200)\n                    cache.eventsStartTime = performance.now()\n                    const response = await api.get(url)\n                    breakpoint()\n\n                    cache.apiCache = {\n                        ...(cache.apiCache ?? {}),\n                        [url]: {\n                            ...response,\n                            previous: normalizeEventDefinitionEndpointUrl({\n                                url: response.previous,\n                                eventTypeFilter: values.filters.event_type,\n                            }),\n                            next: normalizeEventDefinitionEndpointUrl({\n                                url: response.next,\n                                eventTypeFilter: values.filters.event_type,\n                            }),\n                            current: url,\n                            page:\n                                Math.floor((combineUrl(url).searchParams.offset ?? 0) / EVENT_DEFINITIONS_PER_PAGE) + 1,\n                        },\n                    }\n                    return cache.apiCache[url]\n                },\n                setLocalEventDefinition: ({ definition }) => {\n                    if (!values.eventDefinitions.current) {\n                        return values.eventDefinitions\n                    }\n                    // Update cache as well\n                    cache.apiCache = {\n                        ...(cache.apiCache ?? {}),\n                        [values.eventDefinitions.current]: {\n                            ...values.eventDefinitions,\n                            results: values.eventDefinitions.results.map((d) =>\n                                d.id === definition.id ? definition : d\n                            ),\n                        },\n                    }\n                    return cache.apiCache[values.eventDefinitions.current]\n                },\n            },\n        ],\n        eventPropertiesCacheMap: [\n            {} as Record<string, PropertyDefinitionsPaginatedResponse>,\n            {\n                loadPropertiesForEvent: async ({ definition, url }, breakpoint) => {\n                    if (url && url in (cache.apiCache ?? {})) {\n                        return {\n                            ...values.eventPropertiesCacheMap,\n                            [definition.id]: cache.apiCache[url],\n                        }\n                    }\n\n                    if (!url) {\n                        url = api.propertyDefinitions.determineListEndpoint({\n                            event_names: [definition.name],\n                            excluded_properties: PROPERTY_KEYS,\n                            filter_by_event_names: true,\n                            is_feature_flag: false,\n                            limit: PROPERTY_DEFINITIONS_PER_EVENT,\n                        })\n                    }\n                    actions.setEventDefinitionPropertiesLoading(\n                        Array.from([...values.eventDefinitionPropertiesLoading, definition.id])\n                    )\n                    cache.propertiesStartTime = performance.now()\n                    const response = await api.get(url)\n                    breakpoint()\n\n                    // Fetch one event as example and cache\n                    let exampleEventProperties: Record<string, string>\n                    const exampleUrl = api.events.determineListEndpoint({ event: definition.name }, 1)\n                    if (exampleUrl && exampleUrl in (cache.apiCache ?? {})) {\n                        exampleEventProperties = cache.apiCache[exampleUrl]\n                    } else {\n                        exampleEventProperties = (await api.get(exampleUrl))?.results?.[0].properties ?? {}\n                        cache.apiCache = {\n                            ...(cache.apiCache ?? {}),\n                            [exampleUrl]: exampleEventProperties,\n                        }\n                    }\n\n                    const currentUrl = `${normalizePropertyDefinitionEndpointUrl(url)}`\n                    cache.apiCache = {\n                        ...(cache.apiCache ?? {}),\n                        [currentUrl]: {\n                            count: response.count,\n                            previous: normalizePropertyDefinitionEndpointUrl(response.previous),\n                            next: normalizePropertyDefinitionEndpointUrl(response.next),\n                            current: currentUrl,\n                            page:\n                                Math.floor(\n                                    (combineUrl(currentUrl).searchParams.offset ?? 0) / PROPERTY_DEFINITIONS_PER_EVENT\n                                ) + 1,\n                            results: response.results.map((prop: PropertyDefinition) => ({\n                                ...prop,\n                                example: exampleEventProperties?.[prop.name]?.toString(),\n                            })),\n                        },\n                    }\n\n                    actions.setEventDefinitionPropertiesLoading(\n                        values.eventDefinitionPropertiesLoading.filter((loadingId) => loadingId != definition.id)\n                    )\n                    return {\n                        ...values.eventPropertiesCacheMap,\n                        [definition.id]: cache.apiCache[currentUrl],\n                    }\n                },\n                setLocalPropertyDefinition: ({ event, definition }) => {\n                    if (!values.eventPropertiesCacheMap?.[event.id]?.current) {\n                        return values.eventPropertiesCacheMap\n                    }\n                    // Update cache as well\n                    const eventCacheKey = values.eventPropertiesCacheMap[event.id].current as string\n                    cache.apiCache = {\n                        ...(cache.apiCache ?? {}),\n                        [eventCacheKey]: {\n                            ...values.eventPropertiesCacheMap[event.id],\n                            results: values.eventPropertiesCacheMap[event.id].results.map((p) =>\n                                p.id === definition.id ? definition : p\n                            ),\n                        },\n                    }\n\n                    return {\n                        ...values.eventPropertiesCacheMap,\n                        [event.id]: cache.apiCache[eventCacheKey],\n                    }\n                },\n            },\n        ],\n    })),\n    selectors(({ cache }) => ({\n        // Expose for testing\n        apiCache: [() => [], () => cache.apiCache],\n    })),\n    listeners(({ actions, values, cache }) => ({\n        setFilters: async () => {\n            actions.loadEventDefinitions(\n                normalizeEventDefinitionEndpointUrl({\n                    url: values.eventDefinitions.current,\n                    searchParams: { search: values.filters.event, ordering: values.filters.ordering },\n                    full: true,\n                    eventTypeFilter: values.filters.event_type,\n                })\n            )\n        },\n        loadEventDefinitionsSuccess: () => {\n            if (cache.eventsStartTime !== undefined) {\n                eventUsageLogic\n                    .findMounted()\n                    ?.actions.reportDataManagementEventDefinitionsPageLoadSucceeded(\n                        performance.now() - cache.eventsStartTime,\n                        values.eventDefinitions.results.length\n                    )\n                cache.eventsStartTime = undefined\n            }\n        },\n        loadEventDefinitionsFailure: ({ error }) => {\n            if (cache.eventsStartTime !== undefined) {\n                eventUsageLogic\n                    .findMounted()\n                    ?.actions.reportDataManagementEventDefinitionsPageLoadFailed(\n                        performance.now() - cache.eventsStartTime,\n                        error ?? 'There was an unknown error fetching event definitions.'\n                    )\n                cache.eventsStartTime = undefined\n            }\n        },\n        loadPropertiesForEventSuccess: () => {\n            if (cache.propertiesStartTime !== undefined) {\n                eventUsageLogic\n                    .findMounted()\n                    ?.actions.reportDataManagementEventDefinitionsPageNestedPropertiesLoadSucceeded(\n                        performance.now() - cache.propertiesStartTime\n                    )\n                cache.propertiesStartTime = undefined\n            }\n        },\n        loadPropertiesForEventFailure: ({ error }) => {\n            if (cache.propertiesStartTime !== undefined) {\n                eventUsageLogic\n                    .findMounted()\n                    ?.actions.reportDataManagementEventDefinitionsPageNestedPropertiesLoadFailed(\n                        performance.now() - cache.propertiesStartTime,\n                        error ?? 'There was an unknown error fetching nested property definitions.'\n                    )\n                cache.propertiesStartTime = undefined\n            }\n        },\n    })),\n    urlToAction(({ actions, values }) => ({\n        '/data-management/events': (_, searchParams) => {\n            if (!objectsEqual(cleanFilters(values.filters), cleanFilters(router.values.searchParams))) {\n                actions.setFilters(searchParams as Filters)\n            } else if (!values.eventDefinitions.results.length && !values.eventDefinitionsLoading) {\n                actions.loadEventDefinitions()\n            }\n        },\n    })),\n    actionToUrl(({ values }) => ({\n        setFilters: () => {\n            const nextValues = cleanFilters(values.filters)\n            const urlValues = cleanFilters(router.values.searchParams)\n            if (!objectsEqual(nextValues, urlValues)) {\n                return [router.values.location.pathname, nextValues]\n            }\n        },\n    })),\n])\n", "import { LemonInput } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { ReadingHog } from 'lib/components/hedgehogs'\nimport { ProductIntroduction } from 'lib/components/ProductIntroduction/ProductIntroduction'\nimport { Sparkline } from 'lib/components/Sparkline'\nimport { TZLabel } from 'lib/components/TZLabel'\nimport ViewRecordingButton from 'lib/components/ViewRecordingButton'\nimport { LemonTable } from 'lib/lemon-ui/LemonTable'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { urls } from 'scenes/urls'\n\nimport { ProductKey } from '~/types'\n\nimport { IngestionWarning, ingestionWarningsLogic, IngestionWarningSummary } from './ingestionWarningsLogic'\n\nconst WARNING_TYPE_TO_DESCRIPTION = {\n    cannot_merge_already_identified: 'Refused to merge an already identified user',\n    cannot_merge_with_illegal_distinct_id: 'Refused to merge with an illegal distinct id',\n    skipping_event_invalid_uuid: 'Refused to process event with invalid uuid',\n    ignored_invalid_timestamp: 'Ignored an invalid timestamp, event was still ingested',\n    event_timestamp_in_future: 'An event was sent more than 23 hours in the future',\n    ingestion_capacity_overflow: 'Event ingestion has overflowed capacity',\n    message_size_too_large: 'Discarded event exceeding 1MB limit',\n    replay_timestamp_invalid: 'Replay event timestamp is invalid',\n    replay_timestamp_too_far: 'Replay event timestamp was too far in the future',\n    replay_message_too_large: 'Replay data was dropped because it was too large to ingest',\n}\n\nconst WARNING_TYPE_RENDERER = {\n    cannot_merge_already_identified: function Render(warning: IngestionWarning): JSX.Element {\n        const details = warning.details as {\n            sourcePersonDistinctId: string\n            targetPersonDistinctId: string\n            eventUuid: string\n        }\n        return (\n            <>\n                Refused to merge already identified person{' '}\n                <Link to={urls.personByDistinctId(details.sourcePersonDistinctId)}>\n                    {details.sourcePersonDistinctId}\n                </Link>{' '}\n                into{' '}\n                <Link to={urls.personByDistinctId(details.targetPersonDistinctId)}>\n                    {details.targetPersonDistinctId}\n                </Link>{' '}\n                via an $identify or $create_alias call (event uuid: <code>{details.eventUuid}</code>).\n            </>\n        )\n    },\n    cannot_merge_with_illegal_distinct_id: function Render(warning: IngestionWarning): JSX.Element {\n        const details = warning.details as {\n            illegalDistinctId: string\n            otherDistinctId: string\n            eventUuid: string\n        }\n        return (\n            <>\n                Refused to merge an illegal distinct_id{' '}\n                <Link to={urls.personByDistinctId(details.illegalDistinctId)}>{details.illegalDistinctId}</Link> with{' '}\n                <Link to={urls.personByDistinctId(details.otherDistinctId)}>{details.otherDistinctId}</Link> via an\n                $identify or $create_alias call (event uuid: <code>{details.eventUuid}</code>).\n            </>\n        )\n    },\n    skipping_event_invalid_uuid: function Render(warning: IngestionWarning): JSX.Element {\n        const details = warning.details as {\n            eventUuid: string\n        }\n        return (\n            <>\n                Refused to process event with invalid uuid: <code>{details.eventUuid}</code>.\n            </>\n        )\n    },\n    ignored_invalid_timestamp: function Render(warning: IngestionWarning): JSX.Element {\n        const details = warning.details as {\n            eventUuid: string\n            field: string\n            value: string\n            reason: string\n        }\n        return (\n            <>\n                Used server timestamp when ingesting event due to invalid input:\n                <ul>\n                    {details.eventUuid ? <li>Event UUID: {details.eventUuid}</li> : ''}\n                    {details.field ? <li>Invalid field: {details.field}</li> : ''}\n                    {details.value ? <li>Invalid value: {details.value}</li> : ''}\n                    {details.reason ? <li>Error: {details.reason}</li> : ''}\n                </ul>\n            </>\n        )\n    },\n    event_timestamp_in_future: function Render(warning: IngestionWarning): JSX.Element {\n        const details = warning.details as {\n            eventUuid: string\n            timestamp: string\n            sentAt: string\n            offset: string\n            now: string\n            result: string\n        }\n        return (\n            <>\n                The event timestamp computed too far in the future, so the capture time was used instead. Event values:\n                <ul>\n                    <li>Computed timestamp: {details.result}</li>\n                    {details.eventUuid ? <li>Event UUID: {details.eventUuid}</li> : ''}\n                    {details.timestamp ? <li>Client provided timestamp: {details.timestamp}</li> : ''}\n                    {details.sentAt ? <li>Client provided sent_at: {details.sentAt}</li> : ''}\n                    {details.offset ? <li>Client provided time offset: {details.offset}</li> : ''}\n                    <li>PostHog server capture time: {details.now}</li>\n                </ul>\n            </>\n        )\n    },\n    ingestion_capacity_overflow: function Render(warning: IngestionWarning): JSX.Element {\n        const details = warning.details as {\n            overflowDistinctId: string\n        }\n        return (\n            <>\n                Event ingestion has overflowed capacity for distinct_id{' '}\n                <Link to={urls.personByDistinctId(details.overflowDistinctId)}>{details.overflowDistinctId}</Link>.\n                Events will still be processed, but are likely to be delayed longer than usual.\n            </>\n        )\n    },\n    message_size_too_large: function Render(warning: IngestionWarning): JSX.Element {\n        const details = warning.details as {\n            eventUuid: string\n            distinctId: string\n        }\n        return (\n            <>\n                Discarded event for distinct_id{' '}\n                <Link to={urls.personByDistinctId(details.distinctId)}>{details.distinctId}</Link> that exceeded 1MB in\n                size after processing (event uuid: <code>{details.eventUuid}</code>)\n            </>\n        )\n    },\n    replay_timestamp_invalid: function Render(warning: IngestionWarning): JSX.Element {\n        const details: {\n            timestamp: string\n            session_id: string\n        } = {\n            timestamp: warning.details.timestamp,\n            session_id: warning.details.replayRecord.session_id,\n        }\n        return (\n            <>\n                Session replay data dropped due to invalid timestamp:\n                <ul>\n                    <li>invalid timestamp: {details.timestamp}</li>\n                    <li>session_id: {details.session_id}</li>\n                </ul>\n                <div className=\"max-w-30 mt-2\">\n                    <ViewRecordingButton\n                        sessionId={details.session_id}\n                        timestamp={details.timestamp}\n                        type=\"primary\"\n                        size=\"xsmall\"\n                        data-attr=\"skewed-timestamp-view-recording\"\n                    />\n                </div>\n            </>\n        )\n    },\n    replay_timestamp_too_far: function Render(warning: IngestionWarning): JSX.Element {\n        const details: {\n            timestamp: string\n            session_id: string\n            daysFromNow: string\n        } = {\n            timestamp: warning.details.timestamp,\n            session_id: warning.details.replayRecord.session_id,\n            daysFromNow: warning.details.daysFromNow,\n        }\n        return (\n            <>\n                The session replay data timestamp was too different from the capture time, so the data was dropped.\n                Event values:\n                <ul>\n                    <li>invalid timestamp: {details.timestamp}</li>\n                    <li>session_id: {details.session_id}</li>\n                    <li>skew: {details.daysFromNow} days</li>\n                </ul>\n                <div className=\"max-w-30 mt-2\">\n                    <ViewRecordingButton\n                        sessionId={details.session_id}\n                        timestamp={details.timestamp}\n                        type=\"primary\"\n                        size=\"xsmall\"\n                        data-attr=\"skewed-timestamp-view-recording\"\n                    />\n                </div>\n            </>\n        )\n    },\n    replay_message_too_large: function Render(warning: IngestionWarning): JSX.Element {\n        const details: {\n            timestamp: string\n            session_id: string\n        } = {\n            timestamp: warning.details.timestamp,\n            session_id: warning.details.replayRecord.session_id,\n        }\n        return (\n            <>\n                Session replay data dropped due to its size, this can cause playback problems:\n                <ul>\n                    <li>session_id: {details.session_id}</li>\n                </ul>\n                <div className=\"max-w-30 mt-2\">\n                    <ViewRecordingButton\n                        sessionId={details.session_id}\n                        timestamp={details.timestamp}\n                        type=\"primary\"\n                        size=\"xsmall\"\n                        data-attr=\"message-too-large-view-recording\"\n                    />\n                </div>\n            </>\n        )\n    },\n}\n\nexport function IngestionWarningsView(): JSX.Element {\n    const { data, dataLoading, summaryDatasets, dates, searchQuery, showProductIntro } =\n        useValues(ingestionWarningsLogic)\n    const { setSearchQuery } = useActions(ingestionWarningsLogic)\n\n    return (\n        <div data-attr=\"manage-events-table\">\n            <div className=\"flex flex-col space-y-2\">\n                <div>Data ingestion related warnings from past 30 days.</div>\n                <LemonInput\n                    fullWidth\n                    value={searchQuery}\n                    onChange={setSearchQuery}\n                    type=\"search\"\n                    placeholder=\"Try pasting a person or session id or an ingestion warning type\"\n                />\n                <LemonTable\n                    dataSource={data}\n                    loading={dataLoading}\n                    columns={[\n                        {\n                            title: 'Warning',\n                            dataIndex: 'type',\n                            render: function Render(_, summary: IngestionWarningSummary) {\n                                const type = WARNING_TYPE_TO_DESCRIPTION[summary.type] || summary.type\n                                return (\n                                    <>\n                                        {type} (\n                                        <Link\n                                            to={`https://posthog.com/docs/data#${type\n                                                .toLowerCase()\n                                                .replace(',', '')\n                                                .split(' ')\n                                                .join('-')}`}\n                                        >\n                                            docs)\n                                        </Link>\n                                    </>\n                                )\n                            },\n                        },\n                        {\n                            title: 'Graph',\n                            render: function Render(_, summary: IngestionWarningSummary) {\n                                return <Sparkline className=\"h-8\" labels={dates} data={summaryDatasets[summary.type]} />\n                            },\n                        },\n                        {\n                            title: 'Events',\n                            dataIndex: 'count',\n                            align: 'right',\n                            sorter: (a, b) => a.count - b.count,\n                        },\n                        {\n                            title: 'Last Seen',\n                            dataIndex: 'lastSeen',\n                            render: function Render(_, summary: IngestionWarningSummary) {\n                                return <TZLabel time={summary.lastSeen} showSeconds />\n                            },\n                            align: 'right',\n                            sorter: (a, b) => (new Date(a.lastSeen) > new Date(b.lastSeen) ? 1 : -1),\n                        },\n                    ]}\n                    expandable={{\n                        expandedRowRender: RenderNestedWarnings,\n                    }}\n                    defaultSorting={{\n                        columnKey: 'lastSeen',\n                        order: -1,\n                    }}\n                    noSortingCancellation\n                />\n            </div>\n            {showProductIntro && (\n                <ProductIntroduction\n                    productName=\"Ingestion warnings\"\n                    thingName=\"ingestion warning\"\n                    productKey={ProductKey.INGESTION_WARNINGS}\n                    isEmpty={true}\n                    description=\"Nice! You've had no ingestion warnings in the past 30 days. If we detect any issues with your data, we'll show them here.\"\n                    docsURL=\"https://posthog.com/docs/data/data-management#ingestion-warnings\"\n                    customHog={ReadingHog}\n                />\n            )}\n        </div>\n    )\n}\n\nfunction RenderNestedWarnings(warningSummary: IngestionWarningSummary): JSX.Element {\n    return (\n        <LemonTable\n            dataSource={warningSummary.warnings}\n            columns={[\n                {\n                    title: 'Description',\n                    key: 'description',\n                    render: function Render(_, warning: IngestionWarning) {\n                        const renderer = WARNING_TYPE_RENDERER[warning.type]\n                        return renderer ? renderer(warning) : <pre>{JSON.stringify(warning.details, null, 2)}</pre>\n                    },\n                },\n                {\n                    title: 'Time',\n                    dataIndex: 'timestamp',\n                    render: function Render(_, warning: IngestionWarning) {\n                        return <TZLabel time={warning.timestamp} showSeconds />\n                    },\n                    align: 'right',\n                },\n            ]}\n            embedded\n            showHeader={false}\n            pagination={{\n                // In production this list can be huge - we don't want to render all of them at once\n                pageSize: 20,\n            }}\n        />\n    )\n}\n", "import { actions, afterMount, connect, kea, listeners, path, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { dayjs, dayjsUtcToTimezone } from 'lib/dayjs'\nimport { range } from 'lib/utils'\nimport { projectLogic } from 'scenes/projectLogic'\nimport { Scene } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { Breadcrumb } from '~/types'\n\nimport { teamLogic } from '../../teamLogic'\nimport { DataManagementTab } from '../DataManagementScene'\nimport type { ingestionWarningsLogicType } from './ingestionWarningsLogicType'\n\nexport interface IngestionWarningSummary {\n    type: string\n    lastSeen: string\n    count: number\n    warnings: IngestionWarning[]\n    // count and day date pairs\n    sparkline: [number, string][]\n}\n\nexport interface IngestionWarning {\n    type: string\n    timestamp: string\n    details: Record<string, any>\n}\n\nexport const ingestionWarningsLogic = kea<ingestionWarningsLogicType>([\n    path(['scenes', 'data-management', 'ingestion-warnings', 'ingestionWarningsLogic']),\n\n    connect({\n        values: [teamLogic, ['timezone'], projectLogic, ['currentProjectId']],\n    }),\n\n    actions({\n        setSearchQuery: (search: string) => ({ search }),\n    }),\n\n    reducers({\n        searchQuery: [\n            '',\n            {\n                setSearchQuery: (_, { search }) => search,\n            },\n        ],\n    }),\n\n    loaders(({ values }) => ({\n        data: [\n            [] as IngestionWarningSummary[],\n            {\n                loadData: async () => {\n                    const q = values.searchQuery ? `?q=${values.searchQuery}` : ''\n                    const { results } = await api.get(`api/projects/${values.currentProjectId}/ingestion_warnings${q}`)\n                    return results\n                },\n            },\n        ],\n    })),\n\n    selectors({\n        breadcrumbs: [\n            () => [],\n            (): Breadcrumb[] => {\n                return [\n                    {\n                        key: Scene.DataManagement,\n                        name: `Data management`,\n                        path: urls.eventDefinitions(),\n                    },\n                    {\n                        key: DataManagementTab.IngestionWarnings,\n                        name: 'Ingestion warnings',\n                        path: urls.ingestionWarnings(),\n                    },\n                ]\n            },\n        ],\n        dates: [\n            () => [],\n            () => {\n                return range(0, 30)\n                    .map((i) => dayjs().subtract(i, 'days').format('D MMM YYYY'))\n                    .reverse()\n            },\n        ],\n        summaryDatasets: [\n            (s) => [s.data, s.timezone],\n            (data: IngestionWarningSummary[], timezone: string): Record<string, number[]> => {\n                const summaryDatasets: Record<string, number[]> = {}\n                data.forEach((summary) => {\n                    const result = new Array(30).fill(0)\n                    for (const spark of summary.sparkline) {\n                        const date = dayjsUtcToTimezone(spark[1], timezone)\n                        const dayIndex = dayjs().diff(date, 'days')\n                        result[dayIndex] = spark[0]\n                    }\n                    summaryDatasets[summary.type] = result.reverse()\n                })\n                return summaryDatasets\n            },\n        ],\n        showProductIntro: [\n            (s) => [s.data, s.dataLoading, s.searchQuery],\n            (data: IngestionWarningSummary[], dataLoading: boolean, searchQuery) =>\n                data.length === 0 && !dataLoading && !searchQuery.trim().length,\n        ],\n    }),\n\n    listeners(({ actions }) => ({\n        setSearchQuery: async (_, breakpoint) => {\n            await breakpoint(100)\n            actions.loadData()\n        },\n    })),\n\n    afterMount(({ actions }) => {\n        actions.loadData()\n    }),\n])\n", "import './PropertyDefinitionsTable.scss'\n\nimport { LemonInput, LemonSelect, LemonTag, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { ObjectTags } from 'lib/components/ObjectTags/ObjectTags'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { EVENT_PROPERTY_DEFINITIONS_PER_PAGE } from 'lib/constants'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { LemonTable, LemonTableColumn, LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { DefinitionHeader, getPropertyDefinitionIcon } from 'scenes/data-management/events/DefinitionHeader'\nimport { propertyDefinitionsTableLogic } from 'scenes/data-management/properties/propertyDefinitionsTableLogic'\nimport { organizationLogic } from 'scenes/organizationLogic'\nimport { urls } from 'scenes/urls'\n\nimport { PropertyDefinition } from '~/types'\n\nexport function PropertyDefinitionsTable(): JSX.Element {\n    const { propertyDefinitions, propertyDefinitionsLoading, filters, propertyTypeOptions } =\n        useValues(propertyDefinitionsTableLogic)\n    const { loadPropertyDefinitions, setFilters, setPropertyType } = useActions(propertyDefinitionsTableLogic)\n    const { hasTagging } = useValues(organizationLogic)\n\n    const columns: LemonTableColumns<PropertyDefinition> = [\n        {\n            key: 'icon',\n            width: 0,\n            render: function Render(_, definition: PropertyDefinition) {\n                return <span className=\"text-xl text-secondary\">{getPropertyDefinitionIcon(definition)}</span>\n            },\n        },\n        {\n            title: 'Name',\n            key: 'name',\n            render: function Render(_, definition: PropertyDefinition) {\n                return (\n                    <DefinitionHeader\n                        definition={definition}\n                        to={urls.propertyDefinition(definition.id)}\n                        taxonomicGroupType={TaxonomicFilterGroupType.EventProperties}\n                    />\n                )\n            },\n            sorter: (a, b) => a.name.localeCompare(b.name),\n        },\n        {\n            title: 'Type',\n            key: 'type',\n            render: function RenderType(_, definition: PropertyDefinition) {\n                return definition.property_type ? (\n                    <LemonTag type=\"success\" className=\"uppercase\">\n                        {definition.property_type}\n                    </LemonTag>\n                ) : (\n                    <span className=\"text-secondary\">\u2014</span>\n                )\n            },\n        },\n        ...(hasTagging\n            ? [\n                  {\n                      title: 'Tags',\n                      key: 'tags',\n                      render: function Render(_, definition: PropertyDefinition) {\n                          return <ObjectTags tags={definition.tags ?? []} staticOnly />\n                      },\n                  } as LemonTableColumn<PropertyDefinition, keyof PropertyDefinition | undefined>,\n              ]\n            : []),\n    ]\n\n    return (\n        <div data-attr=\"manage-events-table\">\n            <LemonBanner className=\"mb-4\" type=\"info\">\n                Looking for {filters.type === 'person' ? 'person ' : ''}property usage statistics?{' '}\n                <Link\n                    to={urls.insightNewHogQL({\n                        query:\n                            'SELECT arrayJoin(JSONExtractKeys(properties)) AS property_key, count()\\n' +\n                            (filters.type === 'person' ? 'FROM persons\\n' : 'FROM events\\n') +\n                            (filters.type === 'person' ? '' : 'WHERE {filters}\\n') +\n                            'GROUP BY property_key\\n' +\n                            'ORDER BY count() DESC',\n                        filters: { dateRange: { date_from: '-24h' } },\n                    })}\n                >\n                    Query with SQL\n                </Link>\n            </LemonBanner>\n            <div className=\"flex mb-4 gap-2 flex-wrap\">\n                <LemonInput\n                    type=\"search\"\n                    placeholder=\"Search for properties\"\n                    onChange={(e) => setFilters({ property: e || '' })}\n                    value={filters.property}\n                />\n                <LemonSelect\n                    options={propertyTypeOptions}\n                    value={`${filters.type}::${filters.group_type_index ?? ''}`}\n                    onSelect={setPropertyType}\n                />\n            </div>\n            <LemonTable\n                columns={columns}\n                className=\"event-properties-definition-table\"\n                data-attr=\"event-properties-definition-table\"\n                loading={propertyDefinitionsLoading}\n                rowKey=\"id\"\n                pagination={{\n                    controlled: true,\n                    currentPage: propertyDefinitions?.page ?? 1,\n                    entryCount: propertyDefinitions?.count ?? 0,\n                    pageSize: EVENT_PROPERTY_DEFINITIONS_PER_PAGE,\n                    onForward: propertyDefinitions.next\n                        ? () => {\n                              loadPropertyDefinitions(propertyDefinitions.next)\n                          }\n                        : undefined,\n                    onBackward: propertyDefinitions.previous\n                        ? () => {\n                              loadPropertyDefinitions(propertyDefinitions.previous)\n                          }\n                        : undefined,\n                }}\n                dataSource={propertyDefinitions.results}\n                emptyState=\"No property definitions\"\n                nouns={['property', 'properties']}\n            />\n        </div>\n    )\n}\n", "import { actions, connect, kea, key, listeners, path, props, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport { actionToUrl, combineUrl, router, urlToAction } from 'kea-router'\nimport api from 'lib/api'\nimport { EVENT_PROPERTY_DEFINITIONS_PER_PAGE } from 'lib/constants'\nimport { LemonSelectOption } from 'lib/lemon-ui/LemonSelect'\nimport { capitalizeFirstLetter, objectsEqual } from 'lib/utils'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\nimport {\n    normalizePropertyDefinitionEndpointUrl,\n    PropertyDefinitionsPaginatedResponse,\n} from 'scenes/data-management/events/eventDefinitionsTableLogic'\nimport { urls } from 'scenes/urls'\n\nimport { PropertyDefinition } from '~/types'\n\nimport { groupsModel } from '../../../models/groupsModel'\nimport type { propertyDefinitionsTableLogicType } from './propertyDefinitionsTableLogicType'\n\nexport interface Filters {\n    property: string\n    type: string\n    group_type_index: number | null\n}\n\nfunction cleanFilters(filter: Partial<Filters>): Filters {\n    return {\n        property: '',\n        type: 'event',\n        group_type_index: null,\n        ...filter,\n    }\n}\n\nfunction removeDefaults(filter: Filters): Partial<Filters> {\n    return {\n        property: filter.property !== '' ? filter.property : undefined,\n        type: filter.type !== 'event' ? filter.type : undefined,\n        group_type_index: filter.group_type_index !== null ? filter.group_type_index : undefined,\n    }\n}\n\nexport interface PropertyDefinitionsTableLogicProps {\n    key: string\n}\n\nexport const propertyDefinitionsTableLogic = kea<propertyDefinitionsTableLogicType>([\n    path(['scenes', 'data-management', 'properties', 'propertyDefinitionsTableLogic']),\n    props({} as PropertyDefinitionsTableLogicProps),\n    key((props) => props.key || 'scene'),\n    connect({\n        values: [groupsModel, ['groupTypes', 'aggregationLabel']],\n    }),\n    actions({\n        loadPropertyDefinitions: (url: string | null = '') => ({\n            url,\n        }),\n        setFilters: (filters: Partial<Filters>) => ({ filters }),\n        setHoveredDefinition: (definitionKey: string | null) => ({ definitionKey }),\n        setOpenedDefinition: (id: string | null) => ({ id }),\n        setLocalPropertyDefinition: (definition: PropertyDefinition) => ({ definition }),\n        setPropertyType: (propertyType: string) => ({ propertyType }),\n    }),\n    reducers({\n        filters: [\n            {\n                property: '',\n                type: 'event',\n            } as Filters,\n            {\n                setFilters: (state, { filters }) => ({\n                    ...state,\n                    ...filters,\n                }),\n            },\n        ],\n        hoveredDefinition: [\n            null as string | null,\n            {\n                setHoveredDefinition: (_, { definitionKey }) => definitionKey,\n            },\n        ],\n    }),\n    selectors({\n        propertyTypeOptions: [\n            (s) => [s.groupTypes, s.aggregationLabel],\n            (groupTypes, aggregationLabel) => {\n                const groupChoices: Array<LemonSelectOption<string>> = Array.from(groupTypes.values()).map((type) => ({\n                    label: `${capitalizeFirstLetter(aggregationLabel(type.group_type_index).singular)} properties`,\n                    value: `group::${type.group_type_index}`,\n                }))\n                return [\n                    { label: 'Event properties', value: 'event::' } as LemonSelectOption<string>,\n                    { label: 'Person properties', value: 'person::' } as LemonSelectOption<string>,\n                ].concat(groupChoices)\n            },\n        ],\n    }),\n    loaders(({ values, cache }) => ({\n        propertyDefinitions: [\n            {\n                count: 0,\n                next: undefined,\n                current: undefined,\n                previous: undefined,\n                results: [],\n            } as PropertyDefinitionsPaginatedResponse,\n            {\n                loadPropertyDefinitions: async ({ url }, breakpoint) => {\n                    if (url && url in (cache.apiCache ?? {})) {\n                        return cache.apiCache[url]\n                    }\n\n                    if (!url) {\n                        url = api.propertyDefinitions.determineListEndpoint({})\n                    }\n                    cache.propertiesStartTime = performance.now()\n                    await breakpoint(200)\n                    const response = await api.get(url)\n                    breakpoint()\n\n                    const currentUrl = `${normalizePropertyDefinitionEndpointUrl(url)}`\n                    cache.apiCache = {\n                        ...(cache.apiCache ?? {}),\n                        [currentUrl]: {\n                            ...response,\n                            previous: normalizePropertyDefinitionEndpointUrl(response.previous),\n                            next: normalizePropertyDefinitionEndpointUrl(response.next),\n                            current: currentUrl,\n                            page:\n                                Math.floor(\n                                    (combineUrl(url).searchParams.offset ?? 0) / EVENT_PROPERTY_DEFINITIONS_PER_PAGE\n                                ) + 1,\n                        },\n                    }\n                    return cache.apiCache[url]\n                },\n                setLocalPropertyDefinition: ({ definition }) => {\n                    if (!values.propertyDefinitions.current) {\n                        return values.propertyDefinitions\n                    }\n                    // Update cache as well\n                    cache.apiCache = {\n                        ...(cache.apiCache ?? {}),\n                        [values.propertyDefinitions.current]: {\n                            ...values.propertyDefinitions,\n                            results: values.propertyDefinitions.results.map((d) =>\n                                d.id === definition.id ? definition : d\n                            ),\n                        },\n                    }\n                    return cache.apiCache[values.propertyDefinitions.current]\n                },\n            },\n        ],\n    })),\n    listeners(({ actions, values, cache }) => ({\n        setFilters: async (_, breakpoint) => {\n            await breakpoint(500)\n            actions.loadPropertyDefinitions(\n                normalizePropertyDefinitionEndpointUrl(\n                    values.propertyDefinitions.current,\n                    {\n                        offset: 0,\n                        search: values.filters.property,\n                        type: values.filters.type,\n                        group_type_index: values.filters.group_type_index,\n                    },\n                    true\n                )\n            )\n        },\n        loadPropertyDefinitionsSuccess: () => {\n            if (cache.propertiesStartTime !== undefined) {\n                eventUsageLogic\n                    .findMounted()\n                    ?.actions.reportDataManagementEventPropertyDefinitionsPageLoadSucceeded(\n                        performance.now() - cache.propertiesStartTime,\n                        values.propertyDefinitions.results.length\n                    )\n                cache.propertiesStartTime = undefined\n            }\n        },\n        loadPropertyDefinitionsFailure: ({ error }) => {\n            if (cache.propertiesStartTime !== undefined) {\n                eventUsageLogic\n                    .findMounted()\n                    ?.actions.reportDataManagementEventPropertyDefinitionsPageLoadFailed(\n                        performance.now() - cache.propertiesStartTime,\n                        error ?? 'There was an unknown error fetching property definitions.'\n                    )\n                cache.propertiesStartTime = undefined\n            }\n        },\n        setPropertyType: ({ propertyType }) => {\n            const [type, index] = propertyType.split('::')\n            actions.setFilters({\n                type: type,\n                group_type_index: index ? +index : null,\n            })\n        },\n    })),\n    urlToAction(({ actions, values }) => ({\n        [urls.propertyDefinitions()]: (_, searchParams) => {\n            if (values.propertyDefinitionsLoading) {\n                return\n            }\n            if (!objectsEqual(cleanFilters(values.filters), cleanFilters(router.values.searchParams))) {\n                actions.setFilters(searchParams as Filters)\n            } else if (!values.propertyDefinitions.results.length) {\n                actions.loadPropertyDefinitions()\n            }\n        },\n    })),\n    actionToUrl(({ values }) => ({\n        setFilters: () => {\n            const nextValues = cleanFilters(values.filters)\n            const urlValues = cleanFilters(router.values.searchParams)\n            if (!objectsEqual(nextValues, urlValues)) {\n                return [router.values.location.pathname, removeDefaults(nextValues)]\n            }\n        },\n    })),\n])\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "init_dirname", "init_buffer", "init_process", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "Annotations", "currentTeam", "teamLogic", "currentOrganization", "organizationLogic", "annotations", "annotationsLoading", "next", "loadingNext", "timezone", "shouldShowEmptyState", "annotationModalLogic", "loadAnnotationsNext", "openModalToCreateAnnotation", "columns", "_", "annotation", "Link", "urls", "shortTimeZone", "ANNOTATION_DAYJS_FORMAT", "a", "b", "scopeName", "annotationScopeToName", "tooltip", "Tooltip", "LemonTag", "annotationScopeToLevel", "item", "created_by", "creation_type", "ProfilePicture", "createdAtColumn", "LemonButton", "IconPencil", "ProductIntroduction", "MicrophoneHog", "LemonTable", "AnnotationModal", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "createEmptyConfig", "revenueEventsSettingsLogic", "teamLogic", "eventName", "revenueProperty", "values", "state", "item", "_", "team", "s", "revenueTrackingConfig", "config", "savedConfig", "objectsEqual", "actions", "import_jsx_runtime", "ADD_EVENT_BUTTON_ID", "RevenueEventsSettings", "saveDisabledReason", "events", "revenueEventsSettingsLogic", "addEvent", "deleteEvent", "updatePropertyName", "save", "renderPropertyColumn", "_", "item", "TaxonomicPopover", "newPropertyName", "buttonRef", "ProductIntroduction", "LemonTable", "LemonButton", "IconTrash", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_subscriptions", "actionsFuse", "Fuse", "actionsLogic", "actionsModel", "userLogic", "featureFlagLogic", "filterType", "searchTerm", "_", "s", "actions", "user", "data", "result", "item", "urls", "actionsFiltered", "actionsLoading", "import_jsx_runtime", "ActionsTable", "currentTeam", "teamLogic", "actionsLoading", "actionsModel", "loadActions", "pinAction", "unpinAction", "filterType", "searchTerm", "actionsFiltered", "shouldShowEmptyState", "actionsLogic", "setFilterType", "setSearchTerm", "hasAvailableFeature", "userLogic", "updateHasSeenProductIntroFor", "tryInInsightsUrl", "action", "query", "urls", "columns", "a", "b", "pinned", "LemonButton", "IconPinFilled", "IconPin", "_", "index", "LemonTableLink", "step", "url", "stripHTTP", "tags", "ObjectTags", "createdByColumn", "createdAtColumn", "post_to_slack", "IconCheckCircle", "More", "IconPlayCircle", "LemonDivider", "deleteWithUndo", "api_default", "e", "lemonToast", "ProductIntroduction", "NewActionButton", "LemonInput", "LemonSegmentedButton", "LemonTable", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "import_kea_router", "cleanFilters", "filter", "normalizePropertyDefinitionEndpointUrl", "url", "searchParams", "full", "api_default", "normalizeEventDefinitionEndpointUrl", "eventTypeFilter", "params", "eventDefinitionsTableLogic", "key", "props", "definition", "filters", "event", "ids", "cleanFilters", "state", "convertPropertyGroupToProperties", "_", "values", "cache", "actions", "_url", "breakpoint", "response", "EVENT_DEFINITIONS_PER_PAGE", "d", "PROPERTY_KEYS", "PROPERTY_DEFINITIONS_PER_EVENT", "exampleEventProperties", "exampleUrl", "currentUrl", "prop", "loadingId", "eventCacheKey", "p", "eventUsageLogic", "error", "objectsEqual", "nextValues", "urlValues", "import_jsx_runtime", "EventDefinitionProperties", "definition", "loadPropertiesForEvent", "eventDefinitionsTableLogic", "eventPropertiesCacheMap", "eventDefinitionPropertiesLoading", "hasTagging", "organizationLogic", "columns", "_", "_definition", "DefinitionHeader", "urls", "LemonTag", "ObjectTags", "LemonTable", "PROPERTY_DEFINITIONS_PER_EVENT", "import_jsx_runtime", "eventTypeOptions", "EventDefinitionsTable", "eventDefinitions", "eventDefinitionsLoading", "filters", "eventDefinitionsTableLogic", "loadEventDefinitions", "setFilters", "hasTagging", "organizationLogic", "columns", "_", "definition", "getEventDefinitionIcon", "DefinitionHeader", "urls", "TZLabel", "ObjectTags", "More", "LemonButton", "IconPlayCircle", "LemonBanner", "Link", "LemonInput", "v", "LemonSelect", "value", "LemonTable", "EVENT_DEFINITIONS_PER_PAGE", "newSorting", "EventDefinitionProperties", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "ingestionWarningsLogic", "teamLogic", "projectLogic", "search", "_", "values", "q", "results", "api_default", "urls", "range", "i", "dayjs", "s", "data", "timezone", "summaryDatasets", "summary", "result", "spark", "date", "dayjsUtcToTimezone", "dayIndex", "dataLoading", "searchQuery", "actions", "breakpoint", "import_jsx_runtime", "WARNING_TYPE_TO_DESCRIPTION", "WARNING_TYPE_RENDERER", "warning", "details", "Link", "urls", "ViewRecordingButton", "IngestionWarningsView", "data", "dataLoading", "summaryDatasets", "dates", "searchQuery", "showProductIntro", "ingestionWarningsLogic", "setSearchQuery", "LemonInput", "LemonTable", "_", "summary", "type", "Sparkline", "b", "TZLabel", "RenderNestedWarnings", "ProductIntroduction", "ReadingHog", "warningSummary", "renderer", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "import_kea_router", "cleanFilters", "filter", "removeDefaults", "propertyDefinitionsTableLogic", "props", "groupsModel", "url", "filters", "definitionKey", "id", "definition", "propertyType", "state", "_", "s", "groupTypes", "aggregationLabel", "groupChoices", "type", "capitalizeFirstLetter", "values", "cache", "breakpoint", "api_default", "response", "currentUrl", "normalizePropertyDefinitionEndpointUrl", "EVENT_PROPERTY_DEFINITIONS_PER_PAGE", "d", "actions", "eventUsageLogic", "error", "index", "urls", "searchParams", "objectsEqual", "nextValues", "urlValues", "import_jsx_runtime", "PropertyDefinitionsTable", "propertyDefinitions", "propertyDefinitionsLoading", "filters", "propertyTypeOptions", "propertyDefinitionsTableLogic", "loadPropertyDefinitions", "setFilters", "setPropertyType", "hasTagging", "organizationLogic", "columns", "_", "definition", "getPropertyDefinitionIcon", "DefinitionHeader", "urls", "a", "b", "LemonTag", "ObjectTags", "LemonBanner", "Link", "LemonInput", "e", "LemonSelect", "LemonTable", "EVENT_PROPERTY_DEFINITIONS_PER_PAGE", "import_jsx_runtime", "DataManagementTab", "tabs", "urls", "EventDefinitionsTable", "TitleWithIcon", "Tooltip", "IconInfo", "NewActionButton", "ActionsTable", "PropertyDefinitionsTable", "Annotations", "NewAnnotationButton", "ActivityLog", "LemonTag", "RevenueEventsSettings", "FEATURE_FLAGS", "IngestionWarningsView", "dataManagementSceneLogic", "featureFlagLogic", "tab", "_", "s", "capitalizeFirstLetter", "featureFlags", "tabName", "tabUrl", "actions", "values", "key", "DataManagementScene", "enabledTabs", "setTab", "lemonTabs", "PageHeader", "LemonTabs", "t", "scene"]
}
