{
  "version": 3,
  "sources": ["../src/scenes/pipeline/hogfunctions/list/LinkedHogFunctions.tsx", "../src/scenes/pipeline/hogfunctions/list/HogFunctionsList.tsx"],
  "sourcesContent": ["import { LemonButton } from '@posthog/lemon-ui'\nimport { useState } from 'react'\n\nimport { HogFunctionFiltersType, HogFunctionSubTemplateIdType, HogFunctionTypeType } from '~/types'\n\nimport { HogFunctionList } from './HogFunctionsList'\nimport { HogFunctionTemplateList } from './HogFunctionTemplateList'\n\nexport type LinkedHogFunctionsProps = {\n    logicKey?: string\n    type: HogFunctionTypeType\n    filters: HogFunctionFiltersType\n    subTemplateId?: HogFunctionSubTemplateIdType\n    newDisabledReason?: string\n}\n\nexport function LinkedHogFunctions({\n    logicKey,\n    type,\n    filters,\n    subTemplateId,\n    newDisabledReason,\n}: LinkedHogFunctionsProps): JSX.Element | null {\n    const [showNewDestination, setShowNewDestination] = useState(false)\n\n    return showNewDestination ? (\n        <HogFunctionTemplateList\n            defaultFilters={{}}\n            type={type}\n            subTemplateId={subTemplateId}\n            forceFilters={{ filters }}\n            extraControls={\n                <>\n                    <LemonButton type=\"secondary\" size=\"small\" onClick={() => setShowNewDestination(false)}>\n                        Cancel\n                    </LemonButton>\n                </>\n            }\n        />\n    ) : (\n        <HogFunctionList\n            logicKey={logicKey}\n            forceFilters={{ filters }}\n            type={type}\n            extraControls={\n                <>\n                    <LemonButton\n                        type=\"primary\"\n                        size=\"small\"\n                        disabledReason={newDisabledReason}\n                        onClick={() => setShowNewDestination(true)}\n                    >\n                        New notification\n                    </LemonButton>\n                </>\n            }\n        />\n    )\n}\n", "import { LemonCheckbox, LemonInput, LemonTable, LemonTableColumn, LemonTag, Link, Tooltip } from '@posthog/lemon-ui'\nimport { BindLogic, useActions, useValues } from 'kea'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonMenuOverlay } from 'lib/lemon-ui/LemonMenu/LemonMenu'\nimport { updatedAtColumn } from 'lib/lemon-ui/LemonTable/columnUtils'\nimport { LemonTableLink } from 'lib/lemon-ui/LemonTable/LemonTableLink'\nimport { useEffect } from 'react'\nimport { hogFunctionUrl } from 'scenes/pipeline/hogfunctions/urls'\nimport { AppMetricSparkLineV2 } from 'scenes/pipeline/metrics/AppMetricsV2Sparkline'\nimport { urls } from 'scenes/urls'\n\nimport { HogFunctionType, PipelineNodeTab, PipelineStage } from '~/types'\n\nimport { HogFunctionIcon } from '../HogFunctionIcon'\nimport { hogFunctionListLogic, HogFunctionListLogicProps } from './hogFunctionListLogic'\n\nexport function HogFunctionList({\n    extraControls,\n    ...props\n}: HogFunctionListLogicProps & { extraControls?: JSX.Element }): JSX.Element {\n    const { loading, filteredHogFunctions, filters, hogFunctions, canEnableHogFunction } = useValues(\n        hogFunctionListLogic(props)\n    )\n    const { loadHogFunctions, setFilters, resetFilters, toggleEnabled, deleteHogFunction } = useActions(\n        hogFunctionListLogic(props)\n    )\n\n    useEffect(() => loadHogFunctions(), [])\n\n    return (\n        <>\n            <div className=\"flex items-center mb-2 gap-2\">\n                {!props.forceFilters?.search && (\n                    <LemonInput\n                        type=\"search\"\n                        placeholder=\"Search...\"\n                        value={filters.search ?? ''}\n                        onChange={(e) => setFilters({ search: e })}\n                    />\n                )}\n                <div className=\"flex-1\" />\n                {typeof props.forceFilters?.showPaused !== 'boolean' && (\n                    <LemonCheckbox\n                        label=\"Show paused\"\n                        bordered\n                        size=\"small\"\n                        checked={filters.showPaused}\n                        onChange={(e) => setFilters({ showPaused: e ?? undefined })}\n                    />\n                )}\n                {extraControls}\n            </div>\n\n            <BindLogic logic={hogFunctionListLogic} props={props}>\n                <LemonTable\n                    dataSource={filteredHogFunctions}\n                    size=\"small\"\n                    loading={loading}\n                    columns={[\n                        {\n                            title: '',\n                            width: 0,\n                            render: function RenderIcon(_, hogFunction) {\n                                return <HogFunctionIcon src={hogFunction.icon_url} size=\"small\" />\n                            },\n                        },\n                        {\n                            title: 'Name',\n                            sticky: true,\n                            sorter: true,\n                            key: 'name',\n                            dataIndex: 'name',\n                            render: (_, hogFunction) => {\n                                return (\n                                    <LemonTableLink\n                                        to={hogFunctionUrl(hogFunction.type, hogFunction.id, hogFunction.template?.id)}\n                                        title={\n                                            <>\n                                                <Tooltip title=\"Click to update configuration, view metrics, and more\">\n                                                    <span>{hogFunction.name}</span>\n                                                </Tooltip>\n                                            </>\n                                        }\n                                        description={hogFunction.description}\n                                    />\n                                )\n                            },\n                        },\n\n                        {\n                            title: 'Last 7 days',\n                            render: (_, hogFunction) => {\n                                return (\n                                    <Link\n                                        to={urls.pipelineNode(\n                                            // TODO: metrics page for emails\n                                            PipelineStage.Destination,\n                                            `hog-${hogFunction.id}`,\n                                            PipelineNodeTab.Metrics\n                                        )}\n                                    >\n                                        <AppMetricSparkLineV2 id={hogFunction.id} />\n                                    </Link>\n                                )\n                            },\n                        },\n                        updatedAtColumn() as LemonTableColumn<HogFunctionType, any>,\n                        {\n                            title: 'Status',\n                            key: 'enabled',\n                            sorter: (a) => (a.enabled ? 1 : -1),\n                            width: 0,\n                            render: function RenderStatus(_, destination) {\n                                return (\n                                    <>\n                                        {destination.enabled ? (\n                                            <LemonTag type=\"success\" className=\"uppercase\">\n                                                Active\n                                            </LemonTag>\n                                        ) : (\n                                            <LemonTag type=\"default\" className=\"uppercase\">\n                                                Paused\n                                            </LemonTag>\n                                        )}\n                                    </>\n                                )\n                            },\n                        },\n                        {\n                            width: 0,\n                            render: function Render(_, destination) {\n                                return (\n                                    <More\n                                        overlay={\n                                            <LemonMenuOverlay\n                                                items={[\n                                                    {\n                                                        label: destination.enabled ? 'Pause' : 'Unpause',\n                                                        onClick: () => toggleEnabled(destination, !destination.enabled),\n                                                        disabledReason:\n                                                            !canEnableHogFunction(destination) && !destination.enabled\n                                                                ? 'Data pipelines add-on is required for enabling new destinations'\n                                                                : undefined,\n                                                    },\n                                                    {\n                                                        label: 'Delete',\n                                                        status: 'danger' as const, // for typechecker happiness\n                                                        onClick: () => deleteHogFunction(destination),\n                                                    },\n                                                ]}\n                                            />\n                                        }\n                                    />\n                                )\n                            },\n                        },\n                    ]}\n                    emptyState={\n                        hogFunctions.length === 0 && !loading ? (\n                            'No destinations found'\n                        ) : (\n                            <>\n                                No destinations matching filters.{' '}\n                                <Link onClick={() => resetFilters()}>Clear filters</Link>{' '}\n                            </>\n                        )\n                    }\n                />\n            </BindLogic>\n        </>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "HogFunctionList", "extraControls", "props", "loading", "filteredHogFunctions", "filters", "hogFunctions", "canEnableHogFunction", "hogFunctionListLogic", "loadHogFunctions", "setFilters", "resetFilters", "toggleEnabled", "deleteHogFunction", "LemonInput", "e", "LemonCheckbox", "LemonTable", "_", "hogFunction", "HogFunctionIcon", "LemonTableLink", "hogFunctionUrl", "Tooltip", "Link", "urls", "AppMetricSparkLineV2", "updatedAtColumn", "a", "destination", "LemonTag", "More", "LemonMenuOverlay", "import_jsx_runtime", "LinkedHogFunctions", "logicKey", "type", "filters", "subTemplateId", "newDisabledReason", "showNewDestination", "setShowNewDestination", "HogFunctionTemplateList", "LemonButton", "HogFunctionList"]
}
