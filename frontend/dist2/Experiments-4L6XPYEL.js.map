{
  "version": 3,
  "sources": ["../src/scenes/experiments/Experiments.tsx", "../src/scenes/experiments/Holdouts.tsx"],
  "sourcesContent": ["import { LemonDialog, LemonInput, LemonSelect } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { router } from 'kea-router'\nimport { ExperimentsHog } from 'lib/components/hedgehogs'\nimport { MemberSelect } from 'lib/components/MemberSelect'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { ProductIntroduction } from 'lib/components/ProductIntroduction/ProductIntroduction'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { dayjs } from 'lib/dayjs'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonDivider } from 'lib/lemon-ui/LemonDivider'\nimport { LemonTable, LemonTableColumn, LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { atColumn, createdAtColumn, createdByColumn } from 'lib/lemon-ui/LemonTable/columnUtils'\nimport { LemonTableLink } from 'lib/lemon-ui/LemonTable/LemonTableLink'\nimport { LemonTabs } from 'lib/lemon-ui/LemonTabs'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport stringWithWBR from 'lib/utils/stringWithWBR'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { Experiment, ExperimentsTabs, ProductKey, ProgressStatus } from '~/types'\n\nimport { experimentsLogic, getExperimentStatus } from './experimentsLogic'\nimport { StatusTag } from './ExperimentView/components'\nimport { Holdouts } from './Holdouts'\nimport { SharedMetrics } from './SharedMetrics/SharedMetrics'\n\nexport const scene: SceneExport = {\n    component: Experiments,\n    logic: experimentsLogic,\n}\n\nexport function Experiments(): JSX.Element {\n    const { filteredExperiments, experimentsLoading, tab, searchTerm, shouldShowEmptyState, searchStatus, userFilter } =\n        useValues(experimentsLogic)\n    const { setExperimentsTab, deleteExperiment, archiveExperiment, setSearchStatus, setSearchTerm, setUserFilter } =\n        useActions(experimentsLogic)\n\n    const { featureFlags } = useValues(featureFlagLogic)\n\n    const flagResult = featureFlags[FEATURE_FLAGS.EXPERIMENTS_NEW_QUERY_RUNNER_AA_TEST]\n\n    const EXPERIMENTS_PRODUCT_DESCRIPTION =\n        'Experiments help you test changes to your product to see which changes will lead to optimal results. Automatic statistical calculations let you see if the results are valid or if they are likely just a chance occurrence.'\n\n    const getExperimentDuration = (experiment: Experiment): number | undefined => {\n        return experiment.end_date\n            ? dayjs(experiment.end_date).diff(dayjs(experiment.start_date), 'day')\n            : experiment.start_date\n            ? dayjs().diff(dayjs(experiment.start_date), 'day')\n            : undefined\n    }\n\n    const columns: LemonTableColumns<Experiment> = [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            className: 'ph-no-capture',\n            sticky: true,\n            width: '40%',\n            render: function Render(_, experiment: Experiment) {\n                return (\n                    <LemonTableLink\n                        to={experiment.id ? urls.experiment(experiment.id) : undefined}\n                        title={stringWithWBR(experiment.name, 17)}\n                        description={experiment.description}\n                    />\n                )\n            },\n        },\n        createdByColumn<Experiment>() as LemonTableColumn<Experiment, keyof Experiment | undefined>,\n        createdAtColumn<Experiment>() as LemonTableColumn<Experiment, keyof Experiment | undefined>,\n        atColumn('start_date', 'Started') as LemonTableColumn<Experiment, keyof Experiment | undefined>,\n        {\n            title: 'Duration',\n            key: 'duration',\n            render: function Render(_, experiment: Experiment) {\n                const duration = getExperimentDuration(experiment)\n\n                return <div>{duration !== undefined ? `${duration} day${duration !== 1 ? 's' : ''}` : '\u2014'}</div>\n            },\n            sorter: (a, b) => {\n                const durationA = getExperimentDuration(a) ?? -1\n                const durationB = getExperimentDuration(b) ?? -1\n                return durationA > durationB ? 1 : -1\n            },\n            align: 'right',\n        },\n        {\n            title: 'Status',\n            key: 'status',\n            render: function Render(_, experiment: Experiment) {\n                return <StatusTag experiment={experiment} />\n            },\n            align: 'center',\n            sorter: (a, b) => {\n                const statusA = getExperimentStatus(a)\n                const statusB = getExperimentStatus(b)\n\n                const score = {\n                    draft: 1,\n                    running: 2,\n                    complete: 3,\n                }\n                return score[statusA] > score[statusB] ? 1 : -1\n            },\n        },\n        {\n            width: 0,\n            render: function Render(_, experiment: Experiment) {\n                return (\n                    <More\n                        overlay={\n                            <>\n                                <LemonButton to={urls.experiment(`${experiment.id}`)} size=\"small\" fullWidth>\n                                    View\n                                </LemonButton>\n                                {!experiment.archived &&\n                                    experiment?.end_date &&\n                                    dayjs().isSameOrAfter(dayjs(experiment.end_date), 'day') && (\n                                        <LemonButton\n                                            onClick={() => {\n                                                LemonDialog.open({\n                                                    title: 'Archive this experiment?',\n                                                    content: (\n                                                        <div className=\"text-sm text-secondary\">\n                                                            This action will move the experiment to the archived tab. It\n                                                            can be restored at any time.\n                                                        </div>\n                                                    ),\n                                                    primaryButton: {\n                                                        children: 'Archive',\n                                                        type: 'primary',\n                                                        onClick: () => archiveExperiment(experiment.id as number),\n                                                        size: 'small',\n                                                    },\n                                                    secondaryButton: {\n                                                        children: 'Cancel',\n                                                        type: 'tertiary',\n                                                        size: 'small',\n                                                    },\n                                                })\n                                            }}\n                                            data-attr={`experiment-${experiment.id}-dropdown-archive`}\n                                            fullWidth\n                                        >\n                                            Archive experiment\n                                        </LemonButton>\n                                    )}\n                                <LemonDivider />\n                                <LemonButton\n                                    status=\"danger\"\n                                    onClick={() => {\n                                        LemonDialog.open({\n                                            title: 'Delete this experiment?',\n                                            content: (\n                                                <div className=\"text-sm text-secondary\">\n                                                    This action cannot be undone. All experiment data will be\n                                                    permanently removed.\n                                                </div>\n                                            ),\n                                            primaryButton: {\n                                                children: 'Delete',\n                                                type: 'primary',\n                                                onClick: () => deleteExperiment(experiment.id as number),\n                                                size: 'small',\n                                            },\n                                            secondaryButton: {\n                                                children: 'Cancel',\n                                                type: 'tertiary',\n                                                size: 'small',\n                                            },\n                                        })\n                                    }}\n                                    data-attr={`experiment-${experiment.id}-dropdown-remove`}\n                                    fullWidth\n                                >\n                                    Delete experiment\n                                </LemonButton>\n                            </>\n                        }\n                    />\n                )\n            },\n        },\n    ]\n\n    return (\n        <div>\n            <PageHeader\n                buttons={\n                    <LemonButton type=\"primary\" data-attr=\"create-experiment\" to={urls.experiment('new')}>\n                        New experiment\n                    </LemonButton>\n                }\n                caption={\n                    <>\n                        <Link\n                            data-attr=\"experiment-help\"\n                            to=\"https://posthog.com/docs/experiments/installation?utm_medium=in-product&utm_campaign=new-experiment\"\n                            target=\"_blank\"\n                        >\n                            {' '}\n                            Visit the guide\n                        </Link>{' '}\n                        to learn more.\n                    </>\n                }\n                tabbedPage={true}\n            />\n            {/* TODO: Remove this after AA test is over. Just a hidden element. */}\n            <span className=\"hidden\" data-attr=\"aa-test-flag-result\">\n                AA test flag result: {String(flagResult)}\n            </span>\n            <LemonTabs\n                activeKey={tab}\n                onChange={(newKey) => setExperimentsTab(newKey)}\n                tabs={[\n                    { key: ExperimentsTabs.All, label: 'All experiments' },\n                    { key: ExperimentsTabs.Yours, label: 'Your experiments' },\n                    { key: ExperimentsTabs.Archived, label: 'Archived experiments' },\n                    { key: ExperimentsTabs.Holdouts, label: 'Holdout groups' },\n                    { key: ExperimentsTabs.SharedMetrics, label: 'Shared metrics' },\n                ]}\n            />\n\n            {tab === ExperimentsTabs.Holdouts ? (\n                <Holdouts />\n            ) : tab === ExperimentsTabs.SharedMetrics ? (\n                <SharedMetrics />\n            ) : (\n                <>\n                    {tab === ExperimentsTabs.Archived ? (\n                        <ProductIntroduction\n                            productName=\"Experiments\"\n                            productKey={ProductKey.EXPERIMENTS}\n                            thingName=\"archived experiment\"\n                            description={EXPERIMENTS_PRODUCT_DESCRIPTION}\n                            docsURL=\"https://posthog.com/docs/experiments\"\n                            isEmpty={shouldShowEmptyState}\n                        />\n                    ) : (\n                        <ProductIntroduction\n                            productName=\"Experiments\"\n                            productKey={ProductKey.EXPERIMENTS}\n                            thingName=\"experiment\"\n                            description={EXPERIMENTS_PRODUCT_DESCRIPTION}\n                            docsURL=\"https://posthog.com/docs/experiments\"\n                            action={() => router.actions.push(urls.experiment('new'))}\n                            isEmpty={shouldShowEmptyState}\n                            customHog={ExperimentsHog}\n                        />\n                    )}\n                    {!shouldShowEmptyState && (\n                        <>\n                            <div className=\"flex justify-between mb-4 gap-2 flex-wrap\">\n                                <LemonInput\n                                    type=\"search\"\n                                    placeholder=\"Search experiments\"\n                                    onChange={setSearchTerm}\n                                    value={searchTerm}\n                                />\n                                <div className=\"flex items-center gap-2\">\n                                    <span>\n                                        <b>Status</b>\n                                    </span>\n                                    <LemonSelect\n                                        size=\"small\"\n                                        onChange={(status) => {\n                                            if (status) {\n                                                setSearchStatus(status as ProgressStatus | 'all')\n                                            }\n                                        }}\n                                        options={\n                                            [\n                                                { label: 'All', value: 'all' },\n                                                { label: 'Draft', value: ProgressStatus.Draft },\n                                                { label: 'Running', value: ProgressStatus.Running },\n                                                { label: 'Complete', value: ProgressStatus.Complete },\n                                            ] as { label: string; value: string }[]\n                                        }\n                                        value={searchStatus ?? 'all'}\n                                        dropdownMatchSelectWidth={false}\n                                        dropdownMaxContentWidth\n                                    />\n                                    <span className=\"ml-1\">\n                                        <b>Created by</b>\n                                    </span>\n                                    <MemberSelect\n                                        defaultLabel=\"Any user\"\n                                        value={userFilter ?? null}\n                                        onChange={(user) => setUserFilter(user?.uuid ?? null)}\n                                    />\n                                </div>\n                            </div>\n                            <LemonTable\n                                dataSource={filteredExperiments}\n                                columns={columns}\n                                rowKey=\"id\"\n                                loading={experimentsLoading}\n                                defaultSorting={{\n                                    columnKey: 'created_at',\n                                    order: -1,\n                                }}\n                                noSortingCancellation\n                                pagination={{ pageSize: 100 }}\n                                nouns={['experiment', 'experiments']}\n                                data-attr=\"experiment-table\"\n                            />\n                        </>\n                    )}\n                </>\n            )}\n        </div>\n    )\n}\n", "import { IconPencil, IconTrash } from '@posthog/icons'\nimport {\n    LemonBanner,\n    LemonButton,\n    LemonDialog,\n    LemonDivider,\n    LemonInput,\n    LemonLabel,\n    LemonModal,\n    LemonTable,\n    LemonTableColumns,\n} from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { LemonSlider } from 'lib/lemon-ui/LemonSlider'\nimport { useState } from 'react'\n\nimport { Holdout, holdoutsLogic, NEW_HOLDOUT } from './holdoutsLogic'\n\nexport function Holdouts(): JSX.Element {\n    const { holdouts, holdoutsLoading, holdout } = useValues(holdoutsLogic)\n    const { createHoldout, deleteHoldout, setHoldout, updateHoldout } = useActions(holdoutsLogic)\n\n    const [isHoldoutModalOpen, setIsHoldoutModalOpen] = useState(false)\n    const [editingHoldout, setEditingHoldout] = useState<Holdout | null>(null)\n\n    const openEditModal = (holdout: Holdout): void => {\n        setEditingHoldout(holdout)\n        setHoldout(holdout)\n        setIsHoldoutModalOpen(true)\n    }\n\n    const openCreateModal = (): void => {\n        setEditingHoldout(null)\n        setHoldout({ ...NEW_HOLDOUT })\n        setIsHoldoutModalOpen(true)\n    }\n\n    const closeModal = (): void => {\n        setIsHoldoutModalOpen(false)\n        setEditingHoldout(null)\n    }\n\n    const getDisabledReason = (): string | undefined => {\n        if (!holdout.name) {\n            return 'Name is required'\n        }\n        if (holdout.filters?.[0]?.rollout_percentage === undefined) {\n            return 'Rollout percentage is required'\n        }\n    }\n\n    const columns = [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            render: (name: string) => <div className=\"font-semibold\">{name}</div>,\n        },\n        {\n            title: 'Description',\n            dataIndex: 'description',\n            key: 'description',\n        },\n        {\n            title: 'Rollout Percentage',\n            dataIndex: 'filters',\n            key: 'rollout',\n            render: (filters: Holdout['filters']) => {\n                const percentage = filters?.[0]?.rollout_percentage || 0\n                return <div>{percentage} %</div>\n            },\n        },\n        {\n            title: 'Actions',\n            key: 'actions',\n            render: (_: any, record: Holdout) => (\n                <div className=\"flex gap-2\">\n                    <LemonButton\n                        type=\"secondary\"\n                        size=\"xsmall\"\n                        icon={<IconPencil />}\n                        onClick={() => openEditModal(record)}\n                    />\n                    <LemonButton\n                        type=\"secondary\"\n                        icon={<IconTrash />}\n                        size=\"xsmall\"\n                        status=\"danger\"\n                        onClick={() => {\n                            LemonDialog.open({\n                                title: 'Delete this holdout?',\n                                content: (\n                                    <div className=\"text-sm\">\n                                        Are you sure you want to delete the holdout <b>\"{record.name}\"</b>? This action\n                                        cannot be undone.\n                                    </div>\n                                ),\n                                primaryButton: {\n                                    children: 'Delete',\n                                    type: 'primary',\n                                    status: 'danger',\n                                    onClick: () => deleteHoldout(record.id),\n                                    size: 'small',\n                                },\n                                secondaryButton: {\n                                    children: 'Cancel',\n                                    type: 'tertiary',\n                                    size: 'small',\n                                },\n                            })\n                        }}\n                    />\n                </div>\n            ),\n        },\n    ]\n\n    return (\n        <div className=\"space-y-4\">\n            <LemonModal\n                isOpen={isHoldoutModalOpen}\n                onClose={closeModal}\n                title={editingHoldout ? 'Edit holdout' : 'Add holdout'}\n                footer={\n                    <>\n                        <LemonButton onClick={closeModal}>Cancel</LemonButton>\n                        <LemonButton\n                            type=\"primary\"\n                            onClick={() => {\n                                if (editingHoldout) {\n                                    updateHoldout(editingHoldout.id, holdout)\n                                } else {\n                                    createHoldout()\n                                }\n                                closeModal()\n                            }}\n                            disabledReason={getDisabledReason()}\n                        >\n                            {editingHoldout ? 'Update' : 'Save'}\n                        </LemonButton>\n                    </>\n                }\n            >\n                <div className=\"space-y-4\">\n                    <div>\n                        <LemonLabel>Name</LemonLabel>\n                        <LemonInput\n                            value={holdout.name}\n                            onChange={(name) => setHoldout({ name })}\n                            placeholder=\"e.g. 'Frontend holdout group 1'\"\n                        />\n                    </div>\n                    <div>\n                        <LemonLabel>Description</LemonLabel>\n                        <LemonInput\n                            value={holdout.description || ''}\n                            onChange={(description) => setHoldout({ description })}\n                        />\n                    </div>\n                    <div>\n                        <LemonDivider />\n                        <LemonBanner type=\"info\">\n                            <div className=\"space-y-2\">\n                                <div>\n                                    Specify the percentage population that should be included in this holdout group.\n                                    This is stable across experiments.\n                                </div>\n                            </div>\n                        </LemonBanner>\n                        <div className=\"mt-4 flex flex-wrap items-center gap-1\">\n                            Roll out to{' '}\n                            <LemonSlider\n                                value={holdout.filters?.[0]?.rollout_percentage || 100}\n                                onChange={(rollout_percentage) =>\n                                    setHoldout({\n                                        filters: [{ properties: [], rollout_percentage }],\n                                    })\n                                }\n                                min={0}\n                                max={100}\n                                step={1}\n                                className=\"ml-1.5 w-20\"\n                            />\n                            <LemonInput\n                                data-attr=\"rollout-percentage\"\n                                type=\"number\"\n                                className=\"ml-2 mr-1.5 max-w-30\"\n                                value={holdout.filters?.[0]?.rollout_percentage || 100}\n                                onChange={(rollout_percentage) =>\n                                    setHoldout({\n                                        filters: [{ properties: [], rollout_percentage }],\n                                    })\n                                }\n                                min={0}\n                                max={100}\n                                step=\"any\"\n                                suffix={<span>%</span>}\n                            />\n                            of <b>total users.</b>\n                        </div>\n                    </div>\n                </div>\n            </LemonModal>\n\n            <LemonBanner type=\"info\">\n                <div className=\"space-y-2\">\n                    <div>\n                        Holdouts are stable groups of users excluded from experiment variations.They act as a baseline,\n                        helping you see how users behave without any changes applied. This lets you directly compare\n                        their behavior to those exposed to the experiment variations. Once a holdout is configured, you\n                        can apply it to an experiment during creation.\n                    </div>\n                </div>\n            </LemonBanner>\n\n            <LemonTable\n                emptyState={\n                    <div className=\"py-4 text-secondary text-sm text-center\">\n                        You have not created any holdouts yet.\n                    </div>\n                }\n                loading={holdoutsLoading}\n                dataSource={holdouts}\n                columns={columns as LemonTableColumns<Holdout>}\n            />\n            <LemonButton type=\"primary\" onClick={openCreateModal} data-attr=\"add-holdout\">\n                New holdout\n            </LemonButton>\n        </div>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "Holdouts", "holdouts", "holdoutsLoading", "holdout", "holdoutsLogic", "createHoldout", "deleteHoldout", "setHoldout", "updateHoldout", "isHoldoutModalOpen", "setIsHoldoutModalOpen", "editingHoldout", "setEditingHoldout", "openEditModal", "openCreateModal", "NEW_HOLDOUT", "closeModal", "getDisabledReason", "columns", "name", "filters", "percentage", "_", "record", "LemonButton", "IconPencil", "IconTrash", "LemonDialog", "LemonModal", "LemonLabel", "LemonInput", "description", "LemonDivider", "LemonBanner", "LemonSlider", "rollout_percentage", "LemonTable", "import_jsx_runtime", "scene", "Experiments", "experimentsLogic", "filteredExperiments", "experimentsLoading", "tab", "searchTerm", "shouldShowEmptyState", "searchStatus", "userFilter", "setExperimentsTab", "deleteExperiment", "archiveExperiment", "setSearchStatus", "setSearchTerm", "setUserFilter", "featureFlags", "featureFlagLogic", "flagResult", "FEATURE_FLAGS", "EXPERIMENTS_PRODUCT_DESCRIPTION", "getExperimentDuration", "experiment", "dayjs", "columns", "_", "LemonTableLink", "urls", "stringWithWBR", "createdByColumn", "createdAtColumn", "atColumn", "duration", "a", "b", "durationA", "durationB", "StatusTag", "statusA", "getExperimentStatus", "statusB", "score", "More", "LemonButton", "LemonDialog", "LemonDivider", "PageHeader", "Link", "LemonTabs", "newKey", "Holdouts", "SharedMetrics", "ProductIntroduction", "ExperimentsHog", "LemonInput", "LemonSelect", "status", "MemberSelect", "user", "LemonTable"]
}
