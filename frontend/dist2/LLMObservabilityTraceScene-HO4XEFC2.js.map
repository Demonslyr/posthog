{
  "version": 3,
  "sources": ["../../products/llm_observability/frontend/LLMObservabilityTraceScene.tsx", "../../products/llm_observability/frontend/components/FeedbackTag.tsx", "../../products/llm_observability/frontend/components/MetricTag.tsx", "../../products/llm_observability/frontend/ConversationDisplay/ParametersHeader.tsx", "../../products/llm_observability/frontend/llmObservabilityTraceDataLogic.ts", "../../products/llm_observability/frontend/llmObservabilityTraceLogic.ts"],
  "sourcesContent": ["import { IconAIText, IconMessage, IconReceipt } from '@posthog/icons'\nimport { LemonDivider, LemonTable, LemonTag, LemonTagProps, Link, SpinnerOverlay, Tooltip } from '@posthog/lemon-ui'\nimport classNames from 'classnames'\nimport clsx from 'clsx'\nimport { BindLogic, useValues } from 'kea'\nimport { JSONViewer } from 'lib/components/JSONViewer'\nimport { NotFound } from 'lib/components/NotFound'\nimport { IconArrowDown, IconArrowUp } from 'lib/lemon-ui/icons'\nimport { identifierToHuman, isObject, pluralize } from 'lib/utils'\nimport { cn } from 'lib/utils/css-classes'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { InsightEmptyState, InsightErrorState } from 'scenes/insights/EmptyStates'\nimport { PersonDisplay } from 'scenes/persons/PersonDisplay'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { LLMTrace, LLMTraceEvent } from '~/queries/schema/schema-general'\n\nimport { FeedbackTag } from './components/FeedbackTag'\nimport { MetricTag } from './components/MetricTag'\nimport { ConversationMessagesDisplay } from './ConversationDisplay/ConversationMessagesDisplay'\nimport { MetadataHeader } from './ConversationDisplay/MetadataHeader'\nimport { ParametersHeader } from './ConversationDisplay/ParametersHeader'\nimport { LLMInputOutput } from './LLMInputOutput'\nimport { llmObservabilityTraceDataLogic, TraceTreeNode } from './llmObservabilityTraceDataLogic'\nimport { llmObservabilityTraceLogic } from './llmObservabilityTraceLogic'\nimport {\n    formatLLMCost,\n    formatLLMEventTitle,\n    formatLLMLatency,\n    formatLLMUsage,\n    isLLMTraceEvent,\n    removeMilliseconds,\n} from './utils'\n\nexport const scene: SceneExport = {\n    component: LLMObservabilityTraceScene,\n    logic: llmObservabilityTraceLogic,\n}\n\nexport function LLMObservabilityTraceScene(): JSX.Element {\n    const { traceId, query } = useValues(llmObservabilityTraceLogic)\n\n    return (\n        <BindLogic logic={llmObservabilityTraceDataLogic} props={{ traceId, query }}>\n            <TraceSceneWrapper />\n        </BindLogic>\n    )\n}\n\nfunction TraceSceneWrapper(): JSX.Element {\n    const { eventId } = useValues(llmObservabilityTraceLogic)\n    const { tree, trace, event, responseLoading, responseError, feedbackEvents, metricEvents } =\n        useValues(llmObservabilityTraceDataLogic)\n\n    return (\n        <>\n            {responseLoading ? (\n                <SpinnerOverlay />\n            ) : responseError ? (\n                <InsightErrorState />\n            ) : !trace ? (\n                <NotFound object=\"trace\" />\n            ) : (\n                <div className=\"relative space-y-4 flex flex-col md:h-[calc(100vh_-_var(--breadcrumbs-height-full)_-_var(--scene-padding)_-_var(--scene-padding-bottom))] \">\n                    <TraceMetadata\n                        trace={trace}\n                        metricEvents={metricEvents as LLMTraceEvent[]}\n                        feedbackEvents={feedbackEvents as LLMTraceEvent[]}\n                    />\n                    <div className=\"flex flex-1 min-h-0 gap-4 flex-col md:flex-row\">\n                        <TraceSidebar trace={trace} eventId={eventId} tree={tree} />\n                        <EventContent event={event} />\n                    </div>\n                </div>\n            )}\n        </>\n    )\n}\n\nfunction Chip({\n    title,\n    children,\n    icon,\n}: {\n    title: string\n    children: React.ReactNode\n    icon?: JSX.Element\n}): JSX.Element {\n    return (\n        <Tooltip title={title}>\n            <LemonTag size=\"medium\" className=\"bg-surface-primary\" icon={icon}>\n                <span className=\"sr-only\">{title}</span>\n                {children}\n            </LemonTag>\n        </Tooltip>\n    )\n}\n\nfunction UsageChip({ event }: { event: LLMTraceEvent | LLMTrace }): JSX.Element | null {\n    const usage = formatLLMUsage(event)\n    return usage ? (\n        <Chip title=\"Usage\" icon={<IconAIText />}>\n            {usage}\n        </Chip>\n    ) : null\n}\n\nfunction TraceMetadata({\n    trace,\n    metricEvents,\n    feedbackEvents,\n}: {\n    trace: LLMTrace\n    metricEvents: LLMTraceEvent[]\n    feedbackEvents: LLMTraceEvent[]\n}): JSX.Element {\n    return (\n        <header className=\"flex gap-2 flex-wrap\">\n            {'person' in trace && (\n                <Chip title=\"Person\">\n                    <PersonDisplay withIcon=\"sm\" person={trace.person} />\n                </Chip>\n            )}\n            <UsageChip event={trace} />\n            {typeof trace.inputCost === 'number' && (\n                <Chip title=\"Input cost\" icon={<IconArrowUp />}>\n                    {formatLLMCost(trace.inputCost)}\n                </Chip>\n            )}\n            {typeof trace.outputCost === 'number' && (\n                <Chip title=\"Output cost\" icon={<IconArrowDown />}>\n                    {formatLLMCost(trace.outputCost)}\n                </Chip>\n            )}\n            {typeof trace.totalCost === 'number' && (\n                <Chip title=\"Total cost\" icon={<IconReceipt />}>\n                    {formatLLMCost(trace.totalCost)}\n                </Chip>\n            )}\n            {metricEvents.map((metric) => (\n                <MetricTag key={metric.id} properties={metric.properties} />\n            ))}\n            {feedbackEvents.map((feedback) => (\n                <FeedbackTag key={feedback.id} properties={feedback.properties} />\n            ))}\n        </header>\n    )\n}\n\nfunction TraceSidebar({\n    trace,\n    eventId,\n    tree,\n}: {\n    trace: LLMTrace\n    eventId?: string | null\n    tree: TraceTreeNode[]\n}): JSX.Element {\n    const ref = useRef<HTMLDivElement | null>(null)\n\n    useEffect(() => {\n        // On first render, let's focus the selected tree node in the center\n        if (eventId && ref.current) {\n            const selectedNode = ref.current.querySelector(`[aria-current=true]`)\n            if (selectedNode) {\n                selectedNode.scrollIntoView({ block: 'center' })\n            }\n        }\n    }, [eventId])\n\n    return (\n        <aside\n            className=\"border-border max-h-fit bg-surface-primary border rounded overflow-hidden flex flex-col md:w-80\"\n            ref={ref}\n        >\n            <h3 className=\"font-medium text-sm px-2 my-2\">Tree</h3>\n            <LemonDivider className=\"m-0\" />\n            <ul className=\"overflow-y-auto p-1 first:*:mt-0 overflow-x-hidden\">\n                <TreeNode topLevelTrace={trace} item={trace} isSelected={!eventId || eventId === trace.id} />\n                <TreeNodeChildren tree={tree} trace={trace} selectedEventId={eventId} />\n            </ul>\n        </aside>\n    )\n}\n\nfunction NestingGroup({\n    onToggle,\n    isCollapsed,\n    children,\n}: {\n    onToggle?: () => void\n    isCollapsed?: boolean\n    children: React.ReactNode\n}): JSX.Element {\n    return (\n        <li className={clsx('flex items-stretch min-w-0', isCollapsed && 'text-border hover:text-muted')}>\n            <div\n                className={clsx('mb-1 ml-1 cursor-pointer', !isCollapsed && 'text-border hover:text-muted')}\n                onClick={onToggle}\n            >\n                <div\n                    className={clsx(\n                        'w-0 h-full my-0 ml-1 mr-2 border-l border-current',\n                        isCollapsed && 'border-dashed'\n                    )}\n                />\n            </div>\n            <ul className=\"flex-1 min-w-0\">{children}</ul>\n        </li>\n    )\n}\n\nconst TreeNode = React.memo(function TraceNode({\n    topLevelTrace,\n    item,\n    isSelected,\n}: {\n    topLevelTrace: LLMTrace\n    item: LLMTrace | LLMTraceEvent\n    isSelected: boolean\n}): JSX.Element {\n    const totalCost = 'properties' in item ? item.properties.$ai_total_cost_usd : item.totalCost\n    const latency = 'properties' in item ? item.properties.$ai_latency : item.totalLatency\n    const usage = formatLLMUsage(item)\n\n    const children = [\n        isLLMTraceEvent(item) && item.properties.$ai_is_error && (\n            <LemonTag key=\"error-tag\" type=\"danger\">\n                Error\n            </LemonTag>\n        ),\n        latency >= 0.01 && (\n            <LemonTag key=\"latency-tag\" type=\"muted\">\n                {formatLLMLatency(latency)}\n            </LemonTag>\n        ),\n        (usage != null || totalCost != null) && (\n            <span key=\"usage-tag\">\n                {usage}\n                {usage != null && totalCost != null && <span>{' / '}</span>}\n                {totalCost != null && formatLLMCost(totalCost)}\n            </span>\n        ),\n    ]\n    const hasChildren = children.some((child) => !!child)\n\n    return (\n        <li key={item.id} className=\"mt-0.5\" aria-current={isSelected /* aria-current used for auto-focus */}>\n            <Link\n                to={urls.llmObservabilityTrace(topLevelTrace.id, {\n                    event: item.id,\n                    timestamp: removeMilliseconds(topLevelTrace.createdAt),\n                })}\n                className={classNames(\n                    'flex flex-col gap-1 p-1 text-xs rounded min-h-8 justify-center hover:!bg-accent-primary-highlight',\n                    isSelected && '!bg-accent-primary-highlight'\n                )}\n            >\n                <div className=\"flex flex-row items-center gap-1.5\">\n                    <EventTypeTag event={item} size=\"small\" />\n                    <Tooltip title={formatLLMEventTitle(item)}>\n                        <span className=\"flex-1 truncate\">{formatLLMEventTitle(item)}</span>\n                    </Tooltip>\n                </div>\n                {hasChildren && (\n                    <div className=\"flex flex-row flex-wrap text-secondary items-center gap-1.5\">{children}</div>\n                )}\n            </Link>\n        </li>\n    )\n})\n\nfunction TreeNodeChildren({\n    tree,\n    trace,\n    selectedEventId,\n}: {\n    tree: TraceTreeNode[]\n    trace: LLMTrace\n    selectedEventId?: string | null\n}): JSX.Element {\n    const [isCollapsed, setIsCollapsed] = useState(false)\n\n    return (\n        <NestingGroup isCollapsed={isCollapsed} onToggle={() => setIsCollapsed(!isCollapsed)}>\n            {!isCollapsed ? (\n                tree.map(({ event, children }) => (\n                    <React.Fragment key={event.id}>\n                        <TreeNode\n                            topLevelTrace={trace}\n                            item={event}\n                            isSelected={!!selectedEventId && selectedEventId === event.id}\n                        />\n                        {children && (\n                            <TreeNodeChildren tree={children} trace={trace} selectedEventId={selectedEventId} />\n                        )}\n                    </React.Fragment>\n                ))\n            ) : (\n                <div\n                    className=\"text-secondary hover:text-default text-xxs cursor-pointer p-1\"\n                    onClick={() => setIsCollapsed(false)}\n                >\n                    Show {pluralize(tree.length, 'collapsed child', 'collapsed children')}\n                </div>\n            )}\n        </NestingGroup>\n    )\n}\n\nfunction EventContentDisplay({\n    input,\n    output,\n    raisedError,\n}: {\n    input: unknown\n    output: unknown\n    raisedError?: boolean\n}): JSX.Element {\n    if (!input && !output) {\n        // If we have no data here we should not render anything\n        // In future plan to point docs to show how to add custom trace events\n        return <></>\n    }\n    return (\n        <LLMInputOutput\n            inputDisplay={\n                <div className=\"p-2 text-xs border rounded bg-[var(--bg-fill-secondary)]\">\n                    {isObject(input) ? (\n                        <JSONViewer src={input} collapsed={4} />\n                    ) : (\n                        <span className=\"font-mono\">{JSON.stringify(input ?? null)}</span>\n                    )}\n                </div>\n            }\n            outputDisplay={\n                <div\n                    className={cn(\n                        'p-2 text-xs border rounded',\n                        !raisedError ? 'bg-[var(--bg-fill-success-tertiary)]' : 'bg-[var(--bg-fill-error-tertiary)]'\n                    )}\n                >\n                    {isObject(output) ? (\n                        <JSONViewer src={output} collapsed={4} />\n                    ) : (\n                        <span className=\"font-mono\">{JSON.stringify(output ?? null)}</span>\n                    )}\n                </div>\n            }\n        />\n    )\n}\n\nconst EventContent = React.memo(({ event }: { event: LLMTrace | LLMTraceEvent | null }): JSX.Element => {\n    return (\n        <div className=\"flex-1 bg-surface-primary max-h-fit border rounded flex flex-col border-border p-4 overflow-y-auto\">\n            {!event ? (\n                <InsightEmptyState heading=\"Event not found\" detail=\"Check if the event ID is correct.\" />\n            ) : (\n                <>\n                    <header className=\"space-y-2\">\n                        <div className=\"flex-row flex items-center gap-2\">\n                            <EventTypeTag event={event} />\n                            <h3 className=\"text-lg font-semibold p-0 m-0 truncate flex-1\">\n                                {formatLLMEventTitle(event)}\n                            </h3>\n                        </div>\n                        {isLLMTraceEvent(event) ? (\n                            <MetadataHeader\n                                isError={event.properties.$ai_is_error}\n                                inputTokens={event.properties.$ai_input_tokens}\n                                outputTokens={event.properties.$ai_output_tokens}\n                                totalCostUsd={event.properties.$ai_total_cost_usd}\n                                model={event.properties.$ai_model}\n                                latency={event.properties.$ai_latency}\n                            />\n                        ) : (\n                            <MetadataHeader\n                                inputTokens={event.inputTokens}\n                                outputTokens={event.outputTokens}\n                                totalCostUsd={event.totalCost}\n                                latency={event.totalLatency}\n                            />\n                        )}\n                        {isLLMTraceEvent(event) && <ParametersHeader eventProperties={event.properties} />}\n                    </header>\n                    {isLLMTraceEvent(event) ? (\n                        event.event === '$ai_generation' ? (\n                            <ConversationMessagesDisplay\n                                input={event.properties.$ai_input}\n                                output={\n                                    event.properties.$ai_is_error\n                                        ? event.properties.$ai_error\n                                        : event.properties.$ai_output_choices ?? event.properties.$ai_output\n                                }\n                                httpStatus={event.properties.$ai_http_status}\n                                raisedError={event.properties.$ai_is_error}\n                            />\n                        ) : (\n                            <EventContentDisplay\n                                input={event.properties.$ai_input_state}\n                                output={event.properties.$ai_output_state ?? event.properties.$ai_error}\n                                raisedError={event.properties.$ai_is_error}\n                            />\n                        )\n                    ) : (\n                        <>\n                            <TraceMetricsTable />\n                            <EventContentDisplay input={event.inputState} output={event.outputState} />\n                        </>\n                    )}\n                </>\n            )}\n        </div>\n    )\n})\nEventContent.displayName = 'EventContent'\n\nfunction EventTypeTag({ event, size }: { event: LLMTrace | LLMTraceEvent; size?: LemonTagProps['size'] }): JSX.Element {\n    let eventType = 'trace'\n    if (isLLMTraceEvent(event)) {\n        eventType = event.event === '$ai_generation' ? 'generation' : 'span'\n    }\n    return (\n        <LemonTag\n            className=\"uppercase\"\n            type={eventType === 'trace' ? 'completion' : eventType === 'span' ? 'default' : 'success'}\n            size={size}\n        >\n            {eventType}\n        </LemonTag>\n    )\n}\n\nfunction TraceMetricsTable(): JSX.Element | null {\n    const { metricsAndFeedbackEvents } = useValues(llmObservabilityTraceDataLogic)\n\n    if (!metricsAndFeedbackEvents?.length) {\n        return null\n    }\n\n    return (\n        <div className=\"mb-3\">\n            <h4 className=\"flex items-center gap-x-1.5 text-xs font-semibold mb-2\">\n                <IconMessage className=\"text-base\" />\n                Metrics and user feedback\n            </h4>\n            <LemonTable\n                columns={[\n                    {\n                        title: 'Metric',\n                        key: 'metric',\n                        render: (_, { metric }) => <span>{identifierToHuman(metric)}</span>,\n                        width: '40%',\n                    },\n                    {\n                        title: 'Value',\n                        key: 'value',\n                        render: (_, { value }) => <span>{value ?? '\u2013'}</span>,\n                        width: '60%',\n                    },\n                ]}\n                dataSource={metricsAndFeedbackEvents}\n            />\n        </div>\n    )\n}\n", "import { LemonTag } from '@posthog/lemon-ui'\nimport { CopyToClipboardInline } from 'lib/components/CopyToClipboard'\n\ninterface FeedbackTagProps {\n    properties: Record<string, any>\n}\n\nexport function FeedbackTag({ properties }: FeedbackTagProps): JSX.Element {\n    const { $ai_feedback_text: feedbackText } = properties\n    const feedbackPreview = typeof feedbackText === 'string' ? feedbackText.slice(0, 5) : ''\n    const text = feedbackText ? feedbackText : 'No feedback provided'\n\n    return (\n        <LemonTag className=\"bg-surface-primary cursor-default\">\n            <CopyToClipboardInline\n                iconSize=\"xsmall\"\n                description=\"user feedback\"\n                tooltipMessage={text}\n                explicitValue={String(feedbackText)}\n            >\n                {`User feedback${feedbackPreview ? `: ${feedbackPreview}...` : ''}`}\n            </CopyToClipboardInline>\n        </LemonTag>\n    )\n}\n", "import { LemonTag } from '@posthog/lemon-ui'\nimport { CopyToClipboardInline } from 'lib/components/CopyToClipboard'\nimport { identifierToHuman } from 'lib/utils'\n\ninterface MetricTagProps {\n    properties: Record<string, any>\n}\n\nexport function MetricTag({ properties }: MetricTagProps): JSX.Element {\n    const { $ai_metric_name: metricName, $ai_metric_value: metricValue } = properties\n    const strValue = String(metricValue)\n    const isValueLong = strValue.length > 10\n\n    const name = metricName ? identifierToHuman(metricName) : 'Metric'\n    const value = isValueLong ? `${strValue.slice(0, 10)}...` : strValue\n    const title = `${name}: ${value}`\n\n    const description = (\n        <>\n            {metricName && (\n                <span>\n                    Metric: {metricName}\n                    <br />\n                    <br />\n                </span>\n            )}\n            {metricValue}\n            <br />\n            <span>Click to copy the value</span>\n        </>\n    )\n\n    return (\n        <LemonTag className=\"bg-surface-primary cursor-default\">\n            <CopyToClipboardInline\n                iconSize=\"xsmall\"\n                description=\"metric\"\n                explicitValue={strValue}\n                tooltipMessage={isValueLong ? description : 'Click to copy the value'}\n            >\n                {title}\n            </CopyToClipboardInline>\n        </LemonTag>\n    )\n}\n", "import { LemonTag } from '@posthog/lemon-ui'\n\nimport { EventType } from '~/types'\n\nexport function ParametersHeader({ eventProperties }: { eventProperties: EventType['properties'] }): JSX.Element {\n    return (\n        <div className=\"flex flex-row flex-wrap gap-2\">\n            {eventProperties.$ai_model_parameters &&\n                Object.entries(eventProperties.$ai_model_parameters).map(\n                    ([key, value]) =>\n                        value !== null && (\n                            <LemonTag key={key} type=\"muted\">\n                                {key}: {`${value}`}\n                            </LemonTag>\n                        )\n                )}\n        </div>\n    )\n}\n", "import { connect, kea, path, props, selectors } from 'kea'\n\nimport { dataNodeLogic, DataNodeLogicProps } from '~/queries/nodes/DataNode/dataNodeLogic'\nimport { insightVizDataNodeKey } from '~/queries/nodes/InsightViz/InsightViz'\nimport {\n    AnyResponseType,\n    DataTableNode,\n    LLMTrace,\n    LLMTraceEvent,\n    TracesQueryResponse,\n} from '~/queries/schema/schema-general'\nimport { InsightLogicProps } from '~/types'\n\nimport type { llmObservabilityTraceDataLogicType } from './llmObservabilityTraceDataLogicType'\nimport { llmObservabilityTraceLogic } from './llmObservabilityTraceLogic'\n\nexport interface TraceDataLogicProps {\n    traceId: string\n    query: DataTableNode\n    cachedResults?: AnyResponseType | null\n}\n\nfunction getDataNodeLogicProps({ traceId, query, cachedResults }: TraceDataLogicProps): DataNodeLogicProps {\n    const insightProps: InsightLogicProps<DataTableNode> = {\n        dashboardItemId: `new-Trace.${traceId}`,\n        dataNodeCollectionId: traceId,\n    }\n    const vizKey = insightVizDataNodeKey(insightProps)\n    const dataNodeLogicProps: DataNodeLogicProps = {\n        query: query.source,\n        key: vizKey,\n        dataNodeCollectionId: traceId,\n        alwaysRefresh: false,\n        cachedResults: cachedResults || undefined,\n    }\n    return dataNodeLogicProps\n}\n\nconst FEEDBACK_EVENTS = new Set(['$ai_feedback', '$ai_metric'])\n\nexport const llmObservabilityTraceDataLogic = kea<llmObservabilityTraceDataLogicType>([\n    path(['scenes', 'llm-observability', 'llmObservabilityTraceLogic']),\n    props({} as TraceDataLogicProps),\n    connect((props: TraceDataLogicProps) => ({\n        values: [\n            llmObservabilityTraceLogic,\n            ['eventId'],\n            dataNodeLogic(getDataNodeLogicProps(props)),\n            ['response', 'responseLoading', 'responseError'],\n        ],\n    })),\n    selectors({\n        trace: [\n            (s) => [s.response],\n            (response): LLMTrace | undefined => {\n                const traceResponse = response as TracesQueryResponse | null\n                return traceResponse?.results?.[0]\n            },\n        ],\n        showableEvents: [\n            (s) => [s.trace],\n            (trace): LLMTraceEvent[] =>\n                trace ? trace.events.filter((event) => !FEEDBACK_EVENTS.has(event.event)) : [],\n        ],\n        metricEvents: [\n            (s) => [s.trace],\n            (trace): LLMTraceEvent[] | undefined =>\n                trace?.events.filter((event) => event.event === '$ai_metric' && event.properties.$ai_metric_value),\n        ],\n        feedbackEvents: [\n            (s) => [s.trace],\n            (trace): LLMTraceEvent[] | undefined =>\n                trace?.events.filter((event) => event.event === '$ai_feedback' && event.properties.$ai_feedback_text),\n        ],\n        metricsAndFeedbackEvents: [\n            (s) => [s.metricEvents, s.feedbackEvents],\n            (metricEvents, feedbackEvents): { metric: string; value: any }[] =>\n                [...(metricEvents ?? []), ...(feedbackEvents ?? [])].map((event) => ({\n                    metric:\n                        event.event === '$ai_metric' ? event.properties.$ai_metric_name ?? 'Metric' : 'User feedback',\n                    value: event.properties.$ai_metric_value ?? event.properties.$ai_feedback_text,\n                })),\n        ],\n        event: [\n            (s, p) => [p.traceId, s.eventId, s.trace, s.showableEvents],\n            (traceId, eventId, trace, showableEvents): LLMTrace | LLMTraceEvent | null => {\n                if (!eventId || eventId === traceId) {\n                    return trace || null\n                }\n                if (!showableEvents?.length) {\n                    return null\n                }\n                return showableEvents.find((event) => event.id === eventId) || null\n            },\n        ],\n        tree: [\n            (s, p) => [p.traceId, s.trace],\n            (traceId, trace): TraceTreeNode[] => restoreTree(trace?.events || [], traceId),\n        ],\n    }),\n])\n\nexport interface TraceTreeNode {\n    event: LLMTraceEvent\n    children?: TraceTreeNode[]\n}\n\nexport function restoreTree(events: LLMTraceEvent[], traceId: string): TraceTreeNode[] {\n    const childrenMap = new Map<any, any[]>()\n    const idMap = new Map<any, LLMTraceEvent>()\n    const visitedNodes = new Set<any>()\n\n    // Map all events with parents to their parent IDs\n    for (const event of events) {\n        if (FEEDBACK_EVENTS.has(event.event)) {\n            continue\n        }\n\n        const eventId = event.properties.$ai_generation_id ?? event.properties.$ai_span_id ?? event.id\n        idMap.set(eventId, event)\n\n        const parentId = event.properties.$ai_parent_id ?? event.properties.$ai_trace_id\n\n        if (parentId !== undefined && parentId !== null) {\n            const existingEvents = childrenMap.get(parentId)\n            if (existingEvents) {\n                existingEvents.push(eventId)\n            } else {\n                childrenMap.set(parentId, [eventId])\n            }\n        }\n    }\n\n    function traverse(spanId: any): TraceTreeNode | null {\n        if (visitedNodes.has(spanId)) {\n            console.warn('Circular reference detected in trace tree:', spanId)\n            return null\n        }\n\n        const event = idMap.get(spanId)\n        if (!event) {\n            return null\n        }\n\n        visitedNodes.add(spanId)\n        const children = childrenMap.get(spanId)\n        const result = {\n            event,\n            children: children?.map((child) => traverse(child)).filter((node): node is TraceTreeNode => node !== null),\n        }\n        visitedNodes.delete(spanId)\n        return result\n    }\n\n    // Get all direct children of the trace ID\n    const directChildren = childrenMap.get(traceId) || []\n    return directChildren.map((childId) => traverse(childId)).filter((node): node is TraceTreeNode => node !== null)\n}\n", "import { actions, kea, path, reducers, selectors } from 'kea'\nimport { urlToAction } from 'kea-router'\nimport { dayjs } from 'lib/dayjs'\nimport { urls } from 'scenes/urls'\n\nimport { DataNodeLogicProps } from '~/queries/nodes/DataNode/dataNodeLogic'\nimport { insightVizDataNodeKey } from '~/queries/nodes/InsightViz/InsightViz'\nimport { AnyResponseType, DataTableNode, NodeKind, TracesQuery } from '~/queries/schema/schema-general'\nimport { Breadcrumb, InsightLogicProps } from '~/types'\n\nimport type { llmObservabilityTraceLogicType } from './llmObservabilityTraceLogicType'\n\nexport interface LLMObservabilityTraceDataNodeLogicParams {\n    traceId: string\n    query: DataTableNode\n    cachedResults?: AnyResponseType | null\n}\n\nexport function getDataNodeLogicProps({\n    traceId,\n    query,\n    cachedResults,\n}: LLMObservabilityTraceDataNodeLogicParams): DataNodeLogicProps {\n    const insightProps: InsightLogicProps<DataTableNode> = {\n        dashboardItemId: `new-Trace.${traceId}`,\n        dataNodeCollectionId: traceId,\n    }\n    const vizKey = insightVizDataNodeKey(insightProps)\n    const dataNodeLogicProps: DataNodeLogicProps = {\n        query: query.source,\n        key: vizKey,\n        dataNodeCollectionId: traceId,\n        alwaysRefresh: false,\n        cachedResults: cachedResults || undefined,\n    }\n    return dataNodeLogicProps\n}\n\nexport const llmObservabilityTraceLogic = kea<llmObservabilityTraceLogicType>([\n    path(['scenes', 'llm-observability', 'llmObservabilityTraceLogic']),\n\n    actions({\n        setTraceId: (traceId: string) => ({ traceId }),\n        setEventId: (eventId: string | null) => ({ eventId }),\n        setDateFrom: (dateFrom: string) => ({ dateFrom }),\n    }),\n\n    reducers({\n        traceId: ['' as string, { setTraceId: (_, { traceId }) => traceId }],\n        eventId: [null as string | null, { setEventId: (_, { eventId }) => eventId }],\n        dateFrom: [null as string | null, { setDateFrom: (_, { dateFrom }) => dateFrom }],\n    }),\n\n    selectors({\n        query: [\n            (s) => [s.traceId, s.dateFrom],\n            (traceId, dateFrom): DataTableNode => {\n                const tracesQuery: TracesQuery = {\n                    kind: NodeKind.TracesQuery,\n                    traceId,\n                    dateRange: dateFrom\n                        ? // dateFrom is a minimum timestamp of an event for a trace.\n                          {\n                              date_from: dateFrom,\n                              date_to: dayjs(dateFrom).add(10, 'minutes').toISOString(),\n                          }\n                        : // By default will look for traces from the beginning.\n                          {\n                              date_from: dayjs.utc(new Date(2025, 0, 10)).toISOString(),\n                          },\n                }\n\n                return {\n                    kind: NodeKind.DataTableNode,\n                    source: tracesQuery,\n                }\n            },\n        ],\n\n        breadcrumbs: [\n            (s) => [s.traceId],\n            (traceId): Breadcrumb[] => {\n                return [\n                    {\n                        key: 'LLMObservability',\n                        name: 'LLM observability',\n                        path: urls.llmObservabilityDashboard(),\n                    },\n                    {\n                        key: 'LLMObservability',\n                        name: 'Traces',\n                        path: urls.llmObservabilityTraces(),\n                    },\n                    {\n                        key: ['LLMObservability', traceId || ''],\n                        name: traceId,\n                    },\n                ]\n            },\n        ],\n    }),\n\n    urlToAction(({ actions }) => ({\n        [urls.llmObservabilityTrace(':id')]: ({ id }, { event, timestamp }) => {\n            actions.setTraceId(id ?? '')\n            actions.setEventId(event || null)\n            actions.setDateFrom(timestamp || null)\n        },\n    })),\n])\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_classnames", "import_clsx", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "FeedbackTag", "properties", "feedbackText", "feedbackPreview", "LemonTag", "CopyToClipboardInline", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "MetricTag", "properties", "metricName", "metricValue", "strValue", "isValueLong", "name", "identifierToHuman", "value", "title", "LemonTag", "CopyToClipboardInline", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "ParametersHeader", "eventProperties", "key", "value", "LemonTag", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "llmObservabilityTraceLogic", "traceId", "eventId", "dateFrom", "_", "s", "tracesQuery", "dayjs", "urls", "actions", "id", "event", "timestamp", "getDataNodeLogicProps", "traceId", "query", "cachedResults", "insightProps", "vizKey", "insightVizDataNodeKey", "FEEDBACK_EVENTS", "llmObservabilityTraceDataLogic", "props", "llmObservabilityTraceLogic", "dataNodeLogic", "s", "response", "trace", "event", "metricEvents", "feedbackEvents", "p", "eventId", "showableEvents", "restoreTree", "events", "childrenMap", "idMap", "visitedNodes", "parentId", "existingEvents", "traverse", "spanId", "children", "result", "child", "node", "childId", "import_jsx_runtime", "scene", "LLMObservabilityTraceScene", "llmObservabilityTraceLogic", "traceId", "query", "llmObservabilityTraceDataLogic", "TraceSceneWrapper", "eventId", "tree", "trace", "event", "responseLoading", "responseError", "feedbackEvents", "metricEvents", "SpinnerOverlay", "InsightErrorState", "TraceMetadata", "TraceSidebar", "EventContent", "NotFound", "Chip", "title", "children", "icon", "Tooltip", "LemonTag", "UsageChip", "usage", "formatLLMUsage", "IconAIText", "PersonDisplay", "IconArrowUp", "formatLLMCost", "IconArrowDown", "IconReceipt", "metric", "MetricTag", "feedback", "FeedbackTag", "ref", "selectedNode", "LemonDivider", "TreeNode", "TreeNodeChildren", "NestingGroup", "onToggle", "isCollapsed", "clsx", "React", "topLevelTrace", "item", "isSelected", "totalCost", "latency", "isLLMTraceEvent", "formatLLMLatency", "hasChildren", "child", "Link", "urls", "removeMilliseconds", "classNames", "EventTypeTag", "formatLLMEventTitle", "selectedEventId", "setIsCollapsed", "pluralize", "EventContentDisplay", "input", "output", "raisedError", "LLMInputOutput", "isObject", "JSONViewer", "cn", "MetadataHeader", "ParametersHeader", "ConversationMessagesDisplay", "TraceMetricsTable", "InsightEmptyState", "size", "eventType", "metricsAndFeedbackEvents", "IconMessage", "LemonTable", "_", "identifierToHuman", "value"]
}
