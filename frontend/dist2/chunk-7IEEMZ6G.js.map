{
  "version": 3,
  "sources": ["../src/scenes/surveys/SurveySettings.tsx"],
  "sourcesContent": ["import { LemonButton, LemonDivider } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { DeepPartialMap, ValidationErrorType } from 'kea-forms'\nimport { LemonDialog } from 'lib/lemon-ui/LemonDialog'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { useState } from 'react'\nimport { surveysLogic } from 'scenes/surveys/surveysLogic'\nimport { sanitizeSurveyAppearance, validateColor } from 'scenes/surveys/utils'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { SurveyAppearance } from '~/types'\n\nimport { defaultSurveyAppearance, NEW_SURVEY } from './constants'\nimport { SurveyAppearancePreview } from './SurveyAppearancePreview'\nimport { Customization } from './SurveyCustomization'\n\nexport function SurveySettings(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const { globalSurveyAppearanceConfigAvailable } = useValues(surveysLogic)\n    const [validationErrors, setValidationErrors] = useState<DeepPartialMap<\n        SurveyAppearance,\n        ValidationErrorType\n    > | null>(null)\n\n    const [editableSurveyConfig, setEditableSurveyConfig] = useState(\n        currentTeam?.survey_config?.appearance || defaultSurveyAppearance\n    )\n\n    const [templatedSurvey, setTemplatedSurvey] = useState(NEW_SURVEY)\n\n    if (templatedSurvey.appearance === defaultSurveyAppearance) {\n        templatedSurvey.appearance = editableSurveyConfig\n    }\n\n    const updateSurveySettings = (): void => {\n        const sanitizedAppearance = sanitizeSurveyAppearance(editableSurveyConfig)\n        const errors = {\n            backgroundColor: validateColor(sanitizedAppearance?.backgroundColor, 'background color'),\n            borderColor: validateColor(sanitizedAppearance?.borderColor, 'border color'),\n            ratingButtonActiveColor: validateColor(\n                sanitizedAppearance?.ratingButtonActiveColor,\n                'rating button active color'\n            ),\n            ratingButtonColor: validateColor(sanitizedAppearance?.ratingButtonColor, 'rating button color'),\n            submitButtonColor: validateColor(sanitizedAppearance?.submitButtonColor, 'button color'),\n            submitButtonTextColor: validateColor(sanitizedAppearance?.submitButtonTextColor, 'button text color'),\n        }\n\n        // Check if there are any validation errors\n        const hasErrors = Object.values(errors).some((error) => error !== undefined)\n        setValidationErrors(errors)\n\n        if (hasErrors || !sanitizedAppearance) {\n            return\n        }\n\n        // If no errors, proceed with the update\n        updateCurrentTeam({\n            survey_config: {\n                ...currentTeam?.survey_config,\n                appearance: sanitizedAppearance,\n            },\n        })\n    }\n\n    return (\n        <>\n            <div className=\"flex items-center gap-2 mb-2\">\n                <LemonField.Pure className=\"mt-2\" label=\"Appearance\">\n                    <span>These settings apply to new surveys in this organization.</span>\n                </LemonField.Pure>\n\n                <div className=\"flex-1\" />\n                {globalSurveyAppearanceConfigAvailable && (\n                    <LemonButton type=\"primary\" onClick={updateSurveySettings}>\n                        Save settings\n                    </LemonButton>\n                )}\n            </div>\n            <LemonDivider />\n            <div className=\"flex gap-2 mb-2 align-top\">\n                <Customization\n                    appearance={editableSurveyConfig}\n                    hasBranchingLogic={false}\n                    customizeRatingButtons={true}\n                    customizePlaceholderText={true}\n                    onAppearanceChange={(appearance) => {\n                        setEditableSurveyConfig({\n                            ...editableSurveyConfig,\n                            ...appearance,\n                        })\n                        setTemplatedSurvey({\n                            ...templatedSurvey,\n                            ...{ appearance: appearance },\n                        })\n                    }}\n                    validationErrors={validationErrors}\n                />\n                <div className=\"flex-1\" />\n                <div className=\"mt-10 mr-5 survey-view\">\n                    {globalSurveyAppearanceConfigAvailable && (\n                        <SurveyAppearancePreview survey={templatedSurvey} previewPageIndex={0} />\n                    )}\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport function openSurveysSettingsDialog(): void {\n    LemonDialog.open({\n        title: 'Surveys settings',\n        content: <SurveySettings />,\n        width: 600,\n        primaryButton: {\n            children: 'Done',\n        },\n    })\n}\n"],
  "mappings": "oXAAAA,IAAAC,IAAAC,IACA,IAAAC,EAAsC,OAItC,IAAAC,EAAyB,OA8DjB,IAAAC,EAAA,OAnDD,SAASC,GAA8B,CAC1C,GAAM,CAAE,YAAAC,CAAY,KAAI,aAAUC,CAAS,EACrC,CAAE,kBAAAC,CAAkB,KAAI,cAAWD,CAAS,EAC5C,CAAE,sCAAAE,CAAsC,KAAI,aAAUC,CAAY,EAClE,CAACC,EAAkBC,CAAmB,KAAI,YAGtC,IAAI,EAER,CAACC,EAAsBC,CAAuB,KAAI,YACpDR,GAAa,eAAe,YAAcS,CAC9C,EAEM,CAACC,EAAiBC,CAAkB,KAAI,YAASC,CAAU,EAE7DF,EAAgB,aAAeD,IAC/BC,EAAgB,WAAaH,GAGjC,IAAMM,EAAuB,IAAY,CACrC,IAAMC,EAAsBC,EAAyBR,CAAoB,EACnES,EAAS,CACX,gBAAiBC,EAAcH,GAAqB,gBAAiB,kBAAkB,EACvF,YAAaG,EAAcH,GAAqB,YAAa,cAAc,EAC3E,wBAAyBG,EACrBH,GAAqB,wBACrB,4BACJ,EACA,kBAAmBG,EAAcH,GAAqB,kBAAmB,qBAAqB,EAC9F,kBAAmBG,EAAcH,GAAqB,kBAAmB,cAAc,EACvF,sBAAuBG,EAAcH,GAAqB,sBAAuB,mBAAmB,CACxG,EAGMI,EAAY,OAAO,OAAOF,CAAM,EAAE,KAAMG,GAAUA,IAAU,MAAS,EAC3Eb,EAAoBU,CAAM,EAEtB,EAAAE,GAAa,CAACJ,IAKlBZ,EAAkB,CACd,cAAe,CACX,GAAGF,GAAa,cAChB,WAAYc,CAChB,CACJ,CAAC,CACL,EAEA,SACI,oBACI,qBAAC,OAAI,UAAU,+BACX,oBAACM,EAAW,KAAX,CAAgB,UAAU,OAAO,MAAM,aACpC,mBAAC,QAAK,qEAAyD,EACnE,KAEA,OAAC,OAAI,UAAU,SAAS,EACvBjB,MACG,OAACkB,EAAA,CAAY,KAAK,UAAU,QAASR,EAAsB,yBAE3D,GAER,KACA,OAACS,EAAA,EAAa,KACd,QAAC,OAAI,UAAU,4BACX,oBAACC,EAAA,CACG,WAAYhB,EACZ,kBAAmB,GACnB,uBAAwB,GACxB,yBAA0B,GAC1B,mBAAqBiB,GAAe,CAChChB,EAAwB,CACpB,GAAGD,EACH,GAAGiB,CACP,CAAC,EACDb,EAAmB,CACf,GAAGD,EACE,WAAYc,CACrB,CAAC,CACL,EACA,iBAAkBnB,EACtB,KACA,OAAC,OAAI,UAAU,SAAS,KACxB,OAAC,OAAI,UAAU,yBACV,SAAAF,MACG,OAACsB,EAAA,CAAwB,OAAQf,EAAiB,iBAAkB,EAAG,EAE/E,GACJ,GACJ,CAER,CAEO,SAASgB,GAAkC,CAC9CC,EAAY,KAAK,CACb,MAAO,mBACP,WAAS,OAAC5B,EAAA,EAAe,EACzB,MAAO,IACP,cAAe,CACX,SAAU,MACd,CACJ,CAAC,CACL",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "SurveySettings", "currentTeam", "teamLogic", "updateCurrentTeam", "globalSurveyAppearanceConfigAvailable", "surveysLogic", "validationErrors", "setValidationErrors", "editableSurveyConfig", "setEditableSurveyConfig", "defaultSurveyAppearance", "templatedSurvey", "setTemplatedSurvey", "NEW_SURVEY", "updateSurveySettings", "sanitizedAppearance", "sanitizeSurveyAppearance", "errors", "validateColor", "hasErrors", "error", "LemonField", "LemonButton", "LemonDivider", "Customization", "appearance", "SurveyAppearancePreview", "openSurveysSettingsDialog", "LemonDialog"]
}
