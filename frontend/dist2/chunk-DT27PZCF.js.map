{
  "version": 3,
  "sources": ["../src/lib/components/EventSelect/EventSelect.tsx"],
  "sourcesContent": ["import { TaxonomicFilter } from 'lib/components/TaxonomicFilter/TaxonomicFilter'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { LemonSnack } from 'lib/lemon-ui/LemonSnack/LemonSnack'\nimport { Popover } from 'lib/lemon-ui/Popover/Popover'\nimport React, { useState } from 'react'\n\ninterface EventSelectProps {\n    onItemChange?: (values: any[]) => void\n    onChange?: (names: string[]) => void\n    selectedEvents: string[]\n    selectedItems?: any[]\n    addElement: JSX.Element\n    filterGroupTypes?: TaxonomicFilterGroupType[]\n}\n\nexport const EventSelect = ({\n    onItemChange,\n    onChange,\n    selectedEvents,\n    selectedItems,\n    addElement,\n    filterGroupTypes,\n}: EventSelectProps): JSX.Element => {\n    const [open, setOpen] = useState<boolean>(false)\n    const eventSelectFilterGroupTypes = filterGroupTypes || [TaxonomicFilterGroupType.Events]\n\n    const handleChange = (name: string): void => {\n        if (onChange) {\n            onChange(Array.from(new Set(selectedEvents.concat([name]))))\n        }\n    }\n\n    const handleItemChange = (item: any): void => {\n        if (selectedItems && onItemChange) {\n            onItemChange(Array.from(new Set(selectedItems?.concat([item]))))\n        }\n    }\n\n    const handleRemove = (name: string): void => {\n        if (onChange) {\n            onChange(selectedEvents.filter((p) => p !== name))\n        }\n        if (onItemChange && selectedItems) {\n            onItemChange(selectedItems?.filter((p) => p.name !== name))\n        }\n    }\n\n    // Add in the toggle popover logic for the passed in element\n    const addElementWithToggle = React.cloneElement(addElement, { onClick: () => setOpen(!open) })\n\n    return (\n        <div className=\"flex items-center flex-wrap gap-2\">\n            {selectedEvents.map((name) => (\n                <LemonSnack key={name} onClose={() => handleRemove(name)}>\n                    {name}\n                </LemonSnack>\n            ))}\n\n            <Popover\n                visible={open}\n                onClickOutside={() => setOpen(false)}\n                overlay={\n                    <TaxonomicFilter\n                        onChange={(_, value, item) => {\n                            handleItemChange(item)\n                            handleChange(value as string)\n                            setOpen(false)\n                        }}\n                        taxonomicGroupTypes={eventSelectFilterGroupTypes}\n                    />\n                }\n            >\n                {addElementWithToggle}\n            </Popover>\n        </div>\n    )\n}\n"],
  "mappings": "uLAAAA,IAAAC,IAAAC,IAIA,IAAAC,EAAgC,OA+CxBC,EAAA,OApCKC,EAAc,CAAC,CACxB,aAAAC,EACA,SAAAC,EACA,eAAAC,EACA,cAAAC,EACA,WAAAC,EACA,iBAAAC,CACJ,IAAqC,CACjC,GAAM,CAACC,EAAMC,CAAO,KAAI,YAAkB,EAAK,EACzCC,EAA8BH,GAAoB,SAAgC,EAElFI,EAAgBC,GAAuB,CACrCT,GACAA,EAAS,MAAM,KAAK,IAAI,IAAIC,EAAe,OAAO,CAACQ,CAAI,CAAC,CAAC,CAAC,CAAC,CAEnE,EAEMC,EAAoBC,GAAoB,CACtCT,GAAiBH,GACjBA,EAAa,MAAM,KAAK,IAAI,IAAIG,GAAe,OAAO,CAACS,CAAI,CAAC,CAAC,CAAC,CAAC,CAEvE,EAEMC,EAAgBH,GAAuB,CACrCT,GACAA,EAASC,EAAe,OAAQY,GAAMA,IAAMJ,CAAI,CAAC,EAEjDV,GAAgBG,GAChBH,EAAaG,GAAe,OAAQW,GAAMA,EAAE,OAASJ,CAAI,CAAC,CAElE,EAGMK,EAAuB,EAAAC,QAAM,aAAaZ,EAAY,CAAE,QAAS,IAAMG,EAAQ,CAACD,CAAI,CAAE,CAAC,EAE7F,SACI,QAAC,OAAI,UAAU,oCACV,UAAAJ,EAAe,IAAKQ,MACjB,OAACO,EAAA,CAAsB,QAAS,IAAMJ,EAAaH,CAAI,EAClD,SAAAA,GADYA,CAEjB,CACH,KAED,OAACQ,EAAA,CACG,QAASZ,EACT,eAAgB,IAAMC,EAAQ,EAAK,EACnC,WACI,OAACY,EAAA,CACG,SAAU,CAACC,EAAGC,EAAOT,IAAS,CAC1BD,EAAiBC,CAAI,EACrBH,EAAaY,CAAe,EAC5Bd,EAAQ,EAAK,CACjB,EACA,oBAAqBC,EACzB,EAGH,SAAAO,EACL,GACJ,CAER",
  "names": ["init_dirname", "init_buffer", "init_process", "import_react", "import_jsx_runtime", "EventSelect", "onItemChange", "onChange", "selectedEvents", "selectedItems", "addElement", "filterGroupTypes", "open", "setOpen", "eventSelectFilterGroupTypes", "handleChange", "name", "handleItemChange", "item", "handleRemove", "p", "addElementWithToggle", "React", "LemonSnack", "Popover", "TaxonomicFilter", "_", "value"]
}
