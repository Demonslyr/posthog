{
  "version": 3,
  "sources": ["../src/scenes/data-management/definition/DefinitionEdit.tsx", "../src/scenes/data-management/definition/definitionEditLogic.ts"],
  "sourcesContent": ["import { LemonSkeleton, LemonTag } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport { VerifiedDefinitionCheckbox } from 'lib/components/DefinitionPopover/DefinitionPopoverContents'\nimport { NotFound } from 'lib/components/NotFound'\nimport { ObjectTags } from 'lib/components/ObjectTags/ObjectTags'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { LemonSelect } from 'lib/lemon-ui/LemonSelect'\nimport { LemonTextArea } from 'lib/lemon-ui/LemonTextArea/LemonTextArea'\nimport { getFilterLabel, isCoreFilter } from 'lib/taxonomy'\nimport { definitionEditLogic } from 'scenes/data-management/definition/definitionEditLogic'\nimport { definitionLogic, DefinitionLogicProps } from 'scenes/data-management/definition/definitionLogic'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { tagsModel } from '~/models/tagsModel'\n\nexport const scene: SceneExport = {\n    component: DefinitionEdit,\n    logic: definitionLogic,\n    paramsToProps: ({ params: { id } }): DefinitionLogicProps => ({\n        id,\n    }),\n}\n\nexport function DefinitionEdit(props: DefinitionLogicProps = {}): JSX.Element {\n    const logic = definitionEditLogic(props)\n    const { definitionLoading, definitionMissing, hasTaxonomyFeatures, isProperty } = useValues(definitionLogic(props))\n    const { editDefinition } = useValues(logic)\n    const { saveDefinition } = useActions(logic)\n    const { tags, tagsLoading } = useValues(tagsModel)\n\n    const showVerifiedCheckbox =\n        hasTaxonomyFeatures && !isCoreFilter(editDefinition.name) && 'verified' in editDefinition\n\n    if (definitionMissing) {\n        return <NotFound object=\"event\" />\n    }\n    return (\n        <Form logic={definitionEditLogic} props={props} formKey=\"editDefinition\">\n            <PageHeader\n                buttons={\n                    <>\n                        <LemonButton\n                            data-attr=\"cancel-definition\"\n                            type=\"secondary\"\n                            to={\n                                !isProperty\n                                    ? urls.eventDefinition(editDefinition.id)\n                                    : urls.propertyDefinition(editDefinition.id)\n                            }\n                            disabledReason={definitionLoading ? 'Loading...' : undefined}\n                        >\n                            Cancel\n                        </LemonButton>\n                        <LemonButton\n                            data-attr=\"save-definition\"\n                            type=\"primary\"\n                            onClick={() => {\n                                saveDefinition({})\n                            }}\n                            disabledReason={definitionLoading ? 'Loading...' : undefined}\n                        >\n                            Save\n                        </LemonButton>\n                    </>\n                }\n            />\n\n            {definitionLoading ? (\n                <div className=\"space-y-4 mt-4\">\n                    <LemonSkeleton className=\"h-10 w-1/3\" />\n                    <LemonSkeleton className=\"h-6 w-1/2\" />\n                    <LemonSkeleton className=\"h-30 w-1/2\" />\n                </div>\n            ) : (\n                <div className=\"my-4 space-y-4\">\n                    <div>\n                        <h1>Editing \"{getFilterLabel(editDefinition.name, TaxonomicFilterGroupType.Events) || ''}\"</h1>\n                        <div className=\"flex flex-wrap items-center gap-2 text-secondary\">\n                            <div>Raw event name:</div>\n                            <LemonTag className=\"font-mono\">{editDefinition.name}</LemonTag>\n                        </div>\n                    </div>\n                    {hasTaxonomyFeatures && 'tags' in editDefinition && (\n                        <div className=\"ph-ignore-input\">\n                            <LemonField name=\"tags\" label=\"Tags\" data-attr=\"definition-tags\">\n                                {({ value, onChange }) => (\n                                    <ObjectTags\n                                        className=\"definition-tags\"\n                                        saving={definitionLoading || tagsLoading}\n                                        tags={value || []}\n                                        onChange={(tags) => onChange(tags)}\n                                        style={{ marginBottom: 4 }}\n                                        tagsAvailable={tags}\n                                    />\n                                )}\n                            </LemonField>\n                        </div>\n                    )}\n                    {hasTaxonomyFeatures && (\n                        <div className=\"ph-ignore-input\">\n                            <LemonField name=\"description\" label=\"Description\" data-attr=\"definition-description\">\n                                <LemonTextArea value={editDefinition.description} />\n                            </LemonField>\n                        </div>\n                    )}\n                    {showVerifiedCheckbox && (\n                        <div className=\"ph-ignore-input\">\n                            <LemonField name=\"verified\" label=\"Verification\" data-attr=\"definition-verified\">\n                                {({ value, onChange }) => (\n                                    <VerifiedDefinitionCheckbox\n                                        isProperty={isProperty}\n                                        verified={!!value}\n                                        onChange={(nextVerified) => {\n                                            onChange(nextVerified)\n                                        }}\n                                    />\n                                )}\n                            </LemonField>\n                        </div>\n                    )}\n\n                    {isProperty && (\n                        <div className=\"ph-ignore-input\">\n                            <LemonField name=\"property_type\" label=\"Property Type\" data-attr=\"property-type\">\n                                {({ value, onChange }) => (\n                                    <LemonSelect\n                                        onChange={(val) => onChange(val)}\n                                        value={value as 'DateTime' | 'String' | 'Numeric' | 'Boolean'}\n                                        options={[\n                                            { value: 'DateTime', label: 'DateTime' },\n                                            { value: 'String', label: 'String' },\n                                            { value: 'Numeric', label: 'Numeric' },\n                                            { value: 'Boolean', label: 'Boolean' },\n                                        ]}\n                                    />\n                                )}\n                            </LemonField>\n                        </div>\n                    )}\n                </div>\n            )}\n        </Form>\n    )\n}\n", "import { connect, kea, key, path, props } from 'kea'\nimport { forms } from 'kea-forms'\nimport { loaders } from 'kea-loaders'\nimport { beforeUnload, router } from 'kea-router'\nimport { subscriptions } from 'kea-subscriptions'\nimport api from 'lib/api'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast/LemonToast'\nimport { capitalizeFirstLetter } from 'lib/utils'\nimport { definitionLogic, DefinitionLogicProps } from 'scenes/data-management/definition/definitionLogic'\nimport { eventDefinitionsTableLogic } from 'scenes/data-management/events/eventDefinitionsTableLogic'\nimport { propertyDefinitionsTableLogic } from 'scenes/data-management/properties/propertyDefinitionsTableLogic'\nimport { urls } from 'scenes/urls'\n\nimport { updatePropertyDefinitions } from '~/models/propertyDefinitionsModel'\nimport { tagsModel } from '~/models/tagsModel'\nimport { Definition, EventDefinition, PropertyDefinition } from '~/types'\n\nimport type { definitionEditLogicType } from './definitionEditLogicType'\n\nexport const definitionEditLogic = kea<definitionEditLogicType>([\n    path(['scenes', 'data-management', 'definition', 'definitionDetailLogic']),\n    props({} as DefinitionLogicProps),\n    key((props) => props.id || 'new'),\n    connect(({ id }: DefinitionLogicProps) => ({\n        values: [definitionLogic({ id }), ['definition', 'isEvent', 'singular']],\n        actions: [\n            definitionLogic({ id }),\n            ['setDefinition'],\n            propertyDefinitionsTableLogic,\n            ['setLocalPropertyDefinition'],\n            eventDefinitionsTableLogic,\n            ['setLocalEventDefinition'],\n            tagsModel,\n            ['loadTags'],\n        ],\n    })),\n    forms(({ actions }) => ({\n        editDefinition: {\n            defaults: {} as Definition,\n            errors: ({ name }) => ({\n                name: !name ? 'You need to set a name' : null,\n            }),\n            submit: (definition) => {\n                actions.saveDefinition(definition)\n            },\n        },\n    })),\n    loaders(({ values, actions }) => ({\n        editDefinition: [\n            {} as Definition,\n            {\n                saveDefinition: async (_, breakpoint) => {\n                    let definition = { ...values.editDefinition }\n\n                    if (values.isEvent) {\n                        // Event Definition\n                        const _event = definition as EventDefinition\n                        definition = await api.eventDefinitions.update({\n                            eventDefinitionId: _event.id,\n                            eventDefinitionData: {\n                                ..._event,\n                                owner: _event.owner?.id ?? null,\n                                verified: !!_event.verified,\n                            },\n                        })\n                    } else {\n                        // Event Property Definition\n                        const _eventProperty = definition as PropertyDefinition\n                        definition = await api.propertyDefinitions.update({\n                            propertyDefinitionId: _eventProperty.id,\n                            propertyDefinitionData: _eventProperty,\n                        })\n                        updatePropertyDefinitions({\n                            [`event/${definition.name}`]: definition as PropertyDefinition,\n                        })\n                    }\n                    breakpoint()\n\n                    lemonToast.success(`${capitalizeFirstLetter(values.singular)} saved`)\n                    // Update table values\n                    if (values.isEvent) {\n                        actions.setLocalEventDefinition(definition)\n                    } else {\n                        actions.setLocalPropertyDefinition(definition)\n                    }\n                    actions.setDefinition(definition)\n                    actions.loadTags() // reload tags in case new tags are being saved\n\n                    router.actions.push(\n                        values.isEvent ? urls.eventDefinition(definition.id) : urls.propertyDefinition(definition.id)\n                    )\n                    return definition\n                },\n            },\n        ],\n    })),\n\n    subscriptions(({ actions }) => ({\n        definition: (def) => {\n            actions.resetEditDefinition(def)\n        },\n    })),\n\n    beforeUnload(({ values, actions }) => ({\n        enabled: () => values.editDefinitionChanged,\n        message: `Leave?\\nChanges you made will be discarded.`,\n        onConfirm: () => {\n            actions.resetEditDefinition(values.definition)\n        },\n    })),\n])\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_kea_loaders", "import_kea_router", "import_kea_subscriptions", "definitionEditLogic", "props", "id", "definitionLogic", "propertyDefinitionsTableLogic", "eventDefinitionsTableLogic", "tagsModel", "actions", "name", "definition", "values", "_", "breakpoint", "_event", "api_default", "_eventProperty", "updatePropertyDefinitions", "lemonToast", "capitalizeFirstLetter", "urls", "def", "import_jsx_runtime", "scene", "DefinitionEdit", "definitionLogic", "id", "props", "logic", "definitionEditLogic", "definitionLoading", "definitionMissing", "hasTaxonomyFeatures", "isProperty", "editDefinition", "saveDefinition", "tags", "tagsLoading", "tagsModel", "showVerifiedCheckbox", "isCoreFilter", "NotFound", "PageHeader", "LemonButton", "urls", "LemonSkeleton", "getFilterLabel", "LemonTag", "LemonField", "value", "onChange", "ObjectTags", "LemonTextArea", "VerifiedDefinitionCheckbox", "nextVerified", "LemonSelect", "val"]
}
