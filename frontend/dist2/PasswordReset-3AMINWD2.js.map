{
  "version": 3,
  "sources": ["../src/scenes/authentication/PasswordReset.tsx"],
  "sourcesContent": ["/*\nScene to request a password reset email.\n*/\nimport { IconCheckCircle } from '@posthog/icons'\nimport { LemonButton, LemonDivider, LemonInput, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport { router } from 'kea-router'\nimport { BridgePage } from 'lib/components/BridgePage/BridgePage'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { IconErrorOutline } from 'lib/lemon-ui/icons'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { Spinner } from 'lib/lemon-ui/Spinner/Spinner'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\nimport { SceneExport } from 'scenes/sceneTypes'\n\nimport { passwordResetLogic } from './passwordResetLogic'\nimport { SupportModalButton } from './SupportModalButton'\n\nexport const scene: SceneExport = {\n    component: PasswordReset,\n    logic: passwordResetLogic,\n}\n\nexport function PasswordReset(): JSX.Element {\n    const { preflight, preflightLoading } = useValues(preflightLogic)\n    const { requestPasswordResetSucceeded, requestPasswordResetManualErrors } = useValues(passwordResetLogic)\n\n    return (\n        <BridgePage view=\"password-reset\" footer={<SupportModalButton />}>\n            {requestPasswordResetManualErrors?.code === 'throttled' ? (\n                <div className=\"text-center \">\n                    <IconErrorOutline className=\"text-5xl text-danger\" />\n                </div>\n            ) : (\n                requestPasswordResetSucceeded && (\n                    <div className=\"text-center\">\n                        <IconCheckCircle className=\"text-5xl text-success\" />\n                    </div>\n                )\n            )}\n            <h2>Reset password</h2>\n            {preflightLoading ? (\n                <Spinner />\n            ) : !preflight?.email_service_available ? (\n                <EmailUnavailable />\n            ) : requestPasswordResetManualErrors?.code === 'throttled' ? (\n                <ResetThrottled />\n            ) : requestPasswordResetSucceeded ? (\n                <ResetSuccess />\n            ) : (\n                <ResetForm />\n            )}\n        </BridgePage>\n    )\n}\n\nfunction EmailUnavailable(): JSX.Element {\n    return (\n        <div>\n            <div>\n                Self-serve password reset is unavailable. Please <b>contact your instance administrator</b> to reset\n                your password.\n            </div>\n            <LemonDivider className=\"my-6\" />\n            <div className=\"mt-4\">\n                If you're an administrator:\n                <p>\n                    <ul>\n                        <li>\n                            Password reset is unavailable because email service is not configured.{' '}\n                            <Link to=\"https://posthog.com/docs/self-host/configure/email?utm_medium=in-product&utm_campaign=password-reset\">\n                                Read the docs\n                            </Link>{' '}\n                            on how to set this up.\n                        </li>\n                        <li>To reset the password manually, run the following command in your instance.</li>\n                    </ul>\n                </p>\n                <CodeSnippet language={Language.Bash} wrap>\n                    python manage.py changepassword [account email]\n                </CodeSnippet>\n            </div>\n        </div>\n    )\n}\n\nfunction ResetForm(): JSX.Element {\n    const { isRequestPasswordResetSubmitting } = useValues(passwordResetLogic)\n\n    return (\n        <Form logic={passwordResetLogic} formKey=\"requestPasswordReset\" className=\"space-y-4\" enableFormOnSubmit>\n            <div className=\"text-center\">\n                Enter your email address. If an account exists, you\u2019ll receive an email with a password reset link soon.\n            </div>\n            <LemonField name=\"email\" label=\"Email\">\n                <LemonInput\n                    className=\"ph-ignore-input\"\n                    autoFocus\n                    data-attr=\"reset-email\"\n                    placeholder=\"email@yourcompany.com\"\n                    type=\"email\"\n                    disabled={isRequestPasswordResetSubmitting}\n                />\n            </LemonField>\n            <LemonButton\n                fullWidth\n                type=\"primary\"\n                status=\"alt\"\n                center\n                htmlType=\"submit\"\n                data-attr=\"password-reset\"\n                loading={isRequestPasswordResetSubmitting}\n                size=\"large\"\n            >\n                Continue\n            </LemonButton>\n        </Form>\n    )\n}\n\nfunction ResetSuccess(): JSX.Element {\n    const { requestPasswordReset } = useValues(passwordResetLogic)\n    const { push } = useActions(router)\n\n    return (\n        <div className=\"text-center\">\n            Request received successfully! If the email <b>{requestPasswordReset?.email || 'you typed'}</b> exists,\n            you\u2019ll receive an email with a reset link soon.\n            <div className=\"mt-4\">\n                <LemonButton\n                    type=\"primary\"\n                    status=\"alt\"\n                    data-attr=\"back-to-login\"\n                    center\n                    fullWidth\n                    onClick={() => push('/login')}\n                    size=\"large\"\n                >\n                    Back to login\n                </LemonButton>\n            </div>\n        </div>\n    )\n}\n\nfunction ResetThrottled(): JSX.Element {\n    const { requestPasswordReset } = useValues(passwordResetLogic)\n    const { push } = useActions(router)\n\n    return (\n        <div className=\"text-center\">\n            There have been too many reset requests for the email <b>{requestPasswordReset?.email || 'you typed'}</b>.\n            Please try again later or contact support if you think this has been a mistake.\n            <div className=\"mt-4\">\n                <LemonButton\n                    type=\"primary\"\n                    status=\"alt\"\n                    data-attr=\"back-to-login\"\n                    center\n                    fullWidth\n                    onClick={() => push('/login')}\n                    size=\"large\"\n                >\n                    Back to login\n                </LemonButton>\n            </div>\n        </div>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_kea_router", "import_jsx_runtime", "scene", "PasswordReset", "passwordResetLogic", "preflight", "preflightLoading", "preflightLogic", "requestPasswordResetSucceeded", "requestPasswordResetManualErrors", "BridgePage", "SupportModalButton", "IconErrorOutline", "IconCheckCircle", "Spinner", "ResetThrottled", "ResetSuccess", "ResetForm", "EmailUnavailable", "LemonDivider", "Link", "CodeSnippet", "isRequestPasswordResetSubmitting", "LemonField", "LemonInput", "LemonButton", "requestPasswordReset", "push"]
}
