{
  "version": 3,
  "sources": ["../../products/messaging/frontend/Providers.tsx", "../../products/messaging/frontend/providersLogic.ts"],
  "sourcesContent": ["import { useValues } from 'kea'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { HogFunctionConfiguration } from 'scenes/pipeline/hogfunctions/HogFunctionConfiguration'\nimport { HogFunctionTemplateList } from 'scenes/pipeline/hogfunctions/list/HogFunctionTemplateList'\nimport { SceneExport } from 'scenes/sceneTypes'\n\nimport { FunctionsTable } from './FunctionsTable'\nimport { MessagingTabs } from './MessagingTabs'\nimport { providersLogic } from './providersLogic'\n\nexport function Providers(): JSX.Element {\n    const { providerId, templateId } = useValues(providersLogic)\n    return providerId ? (\n        <HogFunctionConfiguration id={providerId} templateId={templateId} />\n    ) : (\n        <>\n            <MessagingTabs key=\"tabs\" />\n            <PageHeader caption=\"Configure e-mail, SMS and other messaging providers here\" />\n            <FunctionsTable type=\"email\" />\n            <div className=\"mt-4\" />\n            <h2>Add Provider</h2>\n            <HogFunctionTemplateList defaultFilters={{}} type=\"email\" />\n            <div className=\"mt-2 text-secondary\">\n                Note: to add a provider that's not in the list, select one that's similar and edit its source to point\n                to the right API URLs\n            </div>\n        </>\n    )\n}\nexport const scene: SceneExport = {\n    component: Providers,\n    logic: providersLogic,\n}\n", "import { actions, kea, path, reducers, selectors } from 'kea'\nimport { urlToAction } from 'kea-router'\nimport { Scene } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { Breadcrumb } from '~/types'\n\nimport type { providersLogicType } from './providersLogicType'\n\nexport const providersLogic = kea<providersLogicType>([\n    path(['products', 'messaging', 'frontend', 'providersLogic']),\n    actions({\n        editProvider: (id: string | null, template: string | null) => ({ id, template }),\n    }),\n    reducers({\n        providerId: [null as string | null, { editProvider: (_, { id }) => id }],\n        templateId: [null as string | null, { editProvider: (_, { template }) => template }],\n    }),\n    selectors({\n        breadcrumbs: [\n            (s) => [s.providerId, s.templateId],\n            (providerId, templateId): Breadcrumb[] => {\n                return [\n                    {\n                        key: Scene.MessagingBroadcasts,\n                        name: 'Messaging',\n                        path: urls.messagingBroadcasts(),\n                    },\n                    {\n                        key: 'providers',\n                        name: 'Providers',\n                        path: urls.messagingProviders(),\n                    },\n                    ...(providerId === 'new' || templateId\n                        ? [\n                              {\n                                  key: 'new-provider',\n                                  name: 'New provider',\n                                  path: urls.messagingProviderNew(),\n                              },\n                          ]\n                        : providerId\n                        ? [\n                              {\n                                  key: 'edit-provider',\n                                  name: 'Edit provider',\n                                  path: urls.messagingProvider(providerId),\n                              },\n                          ]\n                        : []),\n                ]\n            },\n        ],\n    }),\n    urlToAction(({ actions }) => ({\n        '/messaging/providers/new': () => {\n            actions.editProvider('new', null)\n        },\n        '/messaging/providers/new/:template': ({ template }) => {\n            actions.editProvider('new', template ?? null)\n        },\n        '/messaging/providers/:id': ({ id }) => {\n            actions.editProvider(id ?? null, null)\n        },\n        '/messaging/providers': () => {\n            actions.editProvider(null, null)\n        },\n    })),\n])\n"],
  "mappings": "mvDAAAA,IAAAC,IAAAC,IAAA,IAAAC,EAA0B,OCA1BC,IAAAC,IAAAC,IAAA,IAAAC,EAAwD,OACxDC,EAA4B,OAQrB,IAAMC,KAAiB,OAAwB,IAClD,QAAK,CAAC,WAAY,YAAa,WAAY,gBAAgB,CAAC,KAC5D,WAAQ,CACJ,aAAc,CAACC,EAAmBC,KAA6B,CAAE,GAAAD,EAAI,SAAAC,CAAS,EAClF,CAAC,KACD,YAAS,CACL,WAAY,CAAC,KAAuB,CAAE,aAAc,CAACC,EAAG,CAAE,GAAAF,CAAG,IAAMA,CAAG,CAAC,EACvE,WAAY,CAAC,KAAuB,CAAE,aAAc,CAACE,EAAG,CAAE,SAAAD,CAAS,IAAMA,CAAS,CAAC,CACvF,CAAC,KACD,aAAU,CACN,YAAa,CACRE,GAAM,CAACA,EAAE,WAAYA,EAAE,UAAU,EAClC,CAACC,EAAYC,IACF,CACH,CACI,0BACA,KAAM,YACN,KAAMC,EAAK,oBAAoB,CACnC,EACA,CACI,IAAK,YACL,KAAM,YACN,KAAMA,EAAK,mBAAmB,CAClC,EACA,GAAIF,IAAe,OAASC,EACtB,CACI,CACI,IAAK,eACL,KAAM,eACN,KAAMC,EAAK,qBAAqB,CACpC,CACJ,EACAF,EACA,CACI,CACI,IAAK,gBACL,KAAM,gBACN,KAAME,EAAK,kBAAkBF,CAAU,CAC3C,CACJ,EACA,CAAC,CACX,CAER,CACJ,CAAC,KACD,eAAY,CAAC,CAAE,QAAAG,CAAQ,KAAO,CAC1B,2BAA4B,IAAM,CAC9BA,EAAQ,aAAa,MAAO,IAAI,CACpC,EACA,qCAAsC,CAAC,CAAE,SAAAN,CAAS,IAAM,CACpDM,EAAQ,aAAa,MAAON,GAAY,IAAI,CAChD,EACA,2BAA4B,CAAC,CAAE,GAAAD,CAAG,IAAM,CACpCO,EAAQ,aAAaP,GAAM,KAAM,IAAI,CACzC,EACA,uBAAwB,IAAM,CAC1BO,EAAQ,aAAa,KAAM,IAAI,CACnC,CACJ,EAAE,CACN,CAAC,EDvDO,IAAAC,EAAA,OAHD,SAASC,GAAyB,CACrC,GAAM,CAAE,WAAAC,EAAY,WAAAC,CAAW,KAAI,aAAUC,CAAc,EAC3D,OAAOF,KACH,OAACG,EAAA,CAAyB,GAAIH,EAAY,WAAYC,EAAY,KAElE,oBACI,oBAACG,EAAA,GAAkB,MAAO,KAC1B,OAACC,EAAA,CAAW,QAAQ,2DAA2D,KAC/E,OAACC,EAAA,CAAe,KAAK,QAAQ,KAC7B,OAAC,OAAI,UAAU,OAAO,KACtB,OAAC,MAAG,wBAAY,KAChB,OAACC,EAAA,CAAwB,eAAgB,CAAC,EAAG,KAAK,QAAQ,KAC1D,OAAC,OAAI,UAAU,sBAAsB,wIAGrC,GACJ,CAER,CACO,IAAMC,EAAqB,CAC9B,UAAWT,EACX,MAAOG,CACX",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "providersLogic", "id", "template", "_", "s", "providerId", "templateId", "urls", "actions", "import_jsx_runtime", "Providers", "providerId", "templateId", "providersLogic", "HogFunctionConfiguration", "MessagingTabs", "PageHeader", "FunctionsTable", "HogFunctionTemplateList", "scene"]
}
