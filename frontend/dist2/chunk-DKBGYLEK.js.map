{
  "version": 3,
  "sources": ["../src/scenes/settings/organization/Permissions/permissionsLogic.tsx"],
  "sourcesContent": ["import { lemonToast } from '@posthog/lemon-ui'\nimport { actions, afterMount, connect, kea, listeners, path, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\n\nimport { AccessLevel, OrganizationResourcePermissionType, Resource, RoleType } from '~/types'\n\nimport type { permissionsLogicType } from './permissionsLogicType'\nimport { rolesLogic } from './Roles/rolesLogic'\n\nconst ResourceDisplayMapping: Record<Resource, string> = {\n    [Resource.FEATURE_FLAGS]: 'Feature Flags',\n}\n\nexport const ResourcePermissionMapping: Record<AccessLevel, string> = {\n    [AccessLevel.WRITE]: 'View & Edit',\n    [AccessLevel.READ]: 'View Only',\n}\n\nexport interface FormattedResourceLevel {\n    id: string | null\n    resource: Resource\n    name: string\n    access_level: AccessLevel\n}\n\nconst ResourceAccessLevelMapping: Record<Resource, string> = {\n    [Resource.FEATURE_FLAGS]: 'feature_flags_access_level',\n}\n\nexport const permissionsLogic = kea<permissionsLogicType>([\n    path(['scenes', 'organization', 'Settings', 'Permissions', 'permissionsLogic']),\n    connect({\n        values: [rolesLogic, ['roles']],\n        actions: [rolesLogic, ['updateRole']],\n    }),\n    actions({\n        updatePermission: (\n            checked: boolean,\n            role: RoleType,\n            resourceId: OrganizationResourcePermissionType['id'] | null,\n            resourceType: Resource\n        ) => ({ checked, role, resourceId, resourceType }),\n    }),\n    loaders(({ values }) => ({\n        organizationResourcePermissions: [\n            [] as OrganizationResourcePermissionType[],\n            {\n                loadOrganizationResourcePermissions: async () => {\n                    const response = await api.resourcePermissions.list()\n                    return response?.results || []\n                },\n                updateOrganizationResourcePermission: async ({ id, resource, access_level }) => {\n                    if (id) {\n                        const response = await api.resourcePermissions.update(id, { access_level: access_level })\n                        return values.organizationResourcePermissions.map((permission) =>\n                            permission.id == response.id ? response : permission\n                        )\n                    } else {\n                        const response = await api.resourcePermissions.create({\n                            resource: resource,\n                            access_level: access_level,\n                        })\n                        return [...values.organizationResourcePermissions, response]\n                    }\n                },\n            },\n        ],\n    })),\n    listeners(({ actions }) => ({\n        updatePermission: async ({ checked, role, resourceId, resourceType }) => {\n            const accessLevel = checked ? AccessLevel.WRITE : AccessLevel.READ\n            if (role.id) {\n                const updatedRole = await api.roles.update(role.id, {\n                    [ResourceAccessLevelMapping[resourceType]]: accessLevel,\n                })\n                if (updatedRole) {\n                    actions.updateRole(updatedRole)\n                    lemonToast.success(`${role.name} role ${resourceType} edit access updated`)\n                }\n            } else {\n                actions.updateOrganizationResourcePermission({\n                    id: resourceId,\n                    resource: resourceType,\n                    access_level: accessLevel,\n                })\n            }\n            eventUsageLogic.actions.reportResourceAccessLevelUpdated(resourceType, role.name, accessLevel)\n        },\n        updateOrganizationResourcePermissionSuccess: () => {\n            lemonToast.success('Organizational edit access updated')\n        },\n    })),\n    selectors({\n        organizationResourcePermissionsMap: [\n            (s) => [s.organizationResourcePermissions],\n            (organizationResourcePermissions: OrganizationResourcePermissionType[]) => {\n                return organizationResourcePermissions.reduce(\n                    (obj, resourcePermission: OrganizationResourcePermissionType) => ({\n                        ...obj,\n                        [resourcePermission.resource]: resourcePermission,\n                    }),\n                    {}\n                )\n            },\n        ],\n        allPermissions: [\n            (s) => [s.organizationResourcePermissionsMap],\n            (\n                organizationResourcePermissionsMap: Record<Resource, OrganizationResourcePermissionType>\n            ): FormattedResourceLevel[] => {\n                return Object.keys(ResourceDisplayMapping).map(\n                    (key) =>\n                        ({\n                            id: organizationResourcePermissionsMap[key]?.id || null,\n                            resource: key,\n                            name: ResourceDisplayMapping[key],\n                            access_level: organizationResourcePermissionsMap[key]?.access_level || AccessLevel.WRITE,\n                        } as FormattedResourceLevel)\n                )\n            },\n        ],\n        resourceRolesAccess: [\n            (s) => [s.allPermissions, s.roles],\n            (permissions, roles) => {\n                const resources = permissions.map((resource) => ({\n                    [resource.resource]: {\n                        organization_default: resource.access_level,\n                        id: resource.id,\n                    },\n                }))\n                for (const role of roles) {\n                    for (const source of resources) {\n                        const resourceType = Object.keys(source)[0]\n                        source[resourceType][`${role.name}`] = role[ResourceAccessLevelMapping[resourceType]]\n                    }\n                }\n                return resources\n            },\n        ],\n    }),\n    afterMount(({ actions }) => {\n        actions.loadOrganizationResourcePermissions()\n    }),\n])\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "ResourceDisplayMapping", "ResourcePermissionMapping", "ResourceAccessLevelMapping", "permissionsLogic", "rolesLogic", "checked", "role", "resourceId", "resourceType", "values", "api_default", "id", "resource", "access_level", "response", "permission", "actions", "accessLevel", "updatedRole", "lemonToast", "eventUsageLogic", "s", "organizationResourcePermissions", "obj", "resourcePermission", "organizationResourcePermissionsMap", "key", "permissions", "roles", "resources", "source"]
}
