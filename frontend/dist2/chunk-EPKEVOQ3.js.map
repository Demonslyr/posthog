{
  "version": 3,
  "sources": ["../src/scenes/surveys/Survey.tsx", "../src/scenes/surveys/SurveyEdit.tsx", "../src/scenes/surveys/SurveyRepeatSchedule.tsx", "../src/scenes/surveys/SurveyAPIEditor.tsx", "../src/scenes/surveys/SurveyAppearanceUtils.tsx", "../src/scenes/surveys/SurveyEditQuestionRow.tsx", "../src/scenes/surveys/QuestionBranchingInput.tsx", "../src/scenes/surveys/SurveyDragHandle.tsx", "../src/scenes/surveys/SurveyFormAppearance.tsx", "../src/scenes/surveys/SurveyView.tsx", "../src/scenes/surveys/SurveyAnswerFilters.tsx", "../src/scenes/surveys/surveyViewViz.tsx"],
  "sourcesContent": ["import { LemonButton, LemonDivider, LemonTag, Link } from '@posthog/lemon-ui'\nimport { BindLogic, useActions, useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport { router } from 'kea-router'\nimport { FlagSelector } from 'lib/components/FlagSelector'\nimport { NotFound } from 'lib/components/NotFound'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { LemonSkeleton } from 'lib/lemon-ui/LemonSkeleton'\nimport { useEffect } from 'react'\nimport { featureFlagLogic } from 'scenes/feature-flags/featureFlagLogic'\nimport { FeatureFlagReleaseConditions } from 'scenes/feature-flags/FeatureFlagReleaseConditions'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { FeatureFlagFilters, Survey, SurveyMatchType } from '~/types'\n\nimport { NewSurvey, SurveyMatchTypeLabels } from './constants'\nimport SurveyEdit from './SurveyEdit'\nimport { surveyLogic } from './surveyLogic'\nimport { SurveyView } from './SurveyView'\n\nexport const scene: SceneExport = {\n    component: SurveyComponent,\n    logic: surveyLogic,\n    paramsToProps: ({ params: { id } }): (typeof surveyLogic)['props'] => ({\n        id: id,\n    }),\n}\n\nexport function SurveyComponent({ id }: { id?: string } = {}): JSX.Element {\n    const { editingSurvey, setSelectedPageIndex, setPropertyFilters } = useActions(surveyLogic)\n    const { isEditingSurvey, surveyMissing } = useValues(surveyLogic)\n\n    /**\n     * Logic that cleans up surveyLogic state when the component unmounts.\n     * Necessary so if we load another survey, we don't have the old survey's state in the logic for things like editing, filters, preview, etc.\n     */\n    useEffect(() => {\n        return () => {\n            editingSurvey(false)\n            setSelectedPageIndex(0)\n            setPropertyFilters([])\n        }\n    }, [editingSurvey, setSelectedPageIndex, setPropertyFilters])\n\n    if (surveyMissing) {\n        return <NotFound object=\"survey\" />\n    }\n\n    return (\n        <div>\n            {!id ? (\n                <LemonSkeleton />\n            ) : (\n                <BindLogic logic={surveyLogic} props={{ id }}>\n                    {isEditingSurvey ? <SurveyForm id={id} /> : <SurveyView id={id} />}\n                </BindLogic>\n            )}\n        </div>\n    )\n}\n\nexport function SurveyForm({ id }: { id: string }): JSX.Element {\n    const { survey, surveyLoading, targetingFlagFilters } = useValues(surveyLogic)\n    const { loadSurvey, editingSurvey } = useActions(surveyLogic)\n\n    const handleCancelClick = (): void => {\n        editingSurvey(false)\n        if (id === 'new') {\n            router.actions.push(urls.surveys())\n        } else {\n            loadSurvey()\n        }\n    }\n\n    return (\n        <Form id=\"survey\" formKey=\"survey\" logic={surveyLogic} props={{ id }} className=\"space-y-4\" enableFormOnSubmit>\n            <PageHeader\n                buttons={\n                    <div className=\"flex items-center gap-2\">\n                        <LemonButton\n                            data-attr=\"cancel-survey\"\n                            type=\"secondary\"\n                            loading={surveyLoading}\n                            onClick={handleCancelClick}\n                        >\n                            Cancel\n                        </LemonButton>\n                        <LemonButton\n                            type=\"primary\"\n                            data-attr=\"save-survey\"\n                            htmlType=\"submit\"\n                            loading={surveyLoading}\n                            form=\"survey\"\n                        >\n                            {id === 'new' ? 'Save as draft' : 'Save'}\n                        </LemonButton>\n                    </div>\n                }\n            />\n            <LemonDivider />\n            <SurveyEdit />\n            <LemonDivider />\n            <SurveyDisplaySummary id={id} survey={survey} targetingFlagFilters={targetingFlagFilters} />\n            <LemonDivider />\n        </Form>\n    )\n}\n\nexport function SurveyDisplaySummary({\n    id,\n    survey,\n    targetingFlagFilters,\n}: {\n    id: string\n    survey: Survey | NewSurvey\n    targetingFlagFilters?: FeatureFlagFilters\n}): JSX.Element {\n    const hasConditions =\n        survey.conditions?.url || survey.conditions?.selector || survey.conditions?.seenSurveyWaitPeriodInDays\n    const hasFeatureFlags = survey.linked_flag_id || targetingFlagFilters\n\n    return (\n        <div className=\"flex flex-col mt-2 gap-2\">\n            <div className=\"font-semibold\">Display conditions summary</div>\n            <span className=\"text-secondary\">\n                {hasConditions || hasFeatureFlags\n                    ? 'Surveys will be displayed to users that match the following conditions:'\n                    : 'Surveys will be displayed to everyone.'}\n            </span>\n            {survey.conditions?.url && (\n                <div className=\"flex flex-col font-medium gap-1\">\n                    <div className=\"flex-row\">\n                        <span>\n                            URL{' '}\n                            {SurveyMatchTypeLabels[survey.conditions?.urlMatchType || SurveyMatchType.Contains].slice(\n                                2\n                            )}\n                            :\n                        </span>{' '}\n                        <LemonTag>{survey.conditions.url}</LemonTag>\n                    </div>\n                </div>\n            )}\n            {survey.conditions?.deviceTypes && (\n                <div className=\"flex font-medium gap-1 items-center\">\n                    <span>\n                        Device Types{' '}\n                        {SurveyMatchTypeLabels[\n                            survey.conditions?.deviceTypesMatchType || SurveyMatchType.Contains\n                        ].slice(2)}\n                        :\n                    </span>{' '}\n                    {survey.conditions.deviceTypes.map((type) => (\n                        <LemonTag key={type}>{type}</LemonTag>\n                    ))}\n                </div>\n            )}\n            {survey.conditions?.selector && (\n                <div className=\"flex flex-col font-medium gap-1\">\n                    <div className=\"flex-row\">\n                        <span>Selector matches:</span> <LemonTag>{survey.conditions.selector}</LemonTag>\n                    </div>\n                </div>\n            )}\n            {survey.linked_flag_id && (\n                <div className=\"flex flex-row font-medium gap-1\">\n                    <span>Feature flag enabled for:</span>{' '}\n                    {id !== 'new' ? (\n                        survey.linked_flag?.id ? (\n                            <Link to={urls.featureFlag(survey.linked_flag?.id)}>{survey.linked_flag?.key}</Link>\n                        ) : null\n                    ) : (\n                        <FlagSelector value={survey.linked_flag_id} readOnly={true} onChange={() => {}} />\n                    )}\n                </div>\n            )}\n            {survey.conditions?.seenSurveyWaitPeriodInDays && (\n                <div className=\"flex flex-col font-medium gap-1\">\n                    <div className=\"flex-row\">\n                        <span>Wait period after seeing survey:</span>{' '}\n                        <LemonTag>\n                            {survey.conditions.seenSurveyWaitPeriodInDays}{' '}\n                            {survey.conditions.seenSurveyWaitPeriodInDays === 1 ? 'day' : 'days'}\n                        </LemonTag>\n                    </div>\n                </div>\n            )}\n            {targetingFlagFilters && (\n                <div>\n                    <BindLogic logic={featureFlagLogic} props={{ id: survey.targeting_flag?.id || 'new' }}>\n                        <span className=\"font-medium\">User properties:</span>{' '}\n                        <FeatureFlagReleaseConditions readOnly excludeTitle filters={targetingFlagFilters} />\n                    </BindLogic>\n                </div>\n            )}\n        </div>\n    )\n}\n", "import './EditSurvey.scss'\n\nimport { DndContext } from '@dnd-kit/core'\nimport { SortableContext, verticalListSortingStrategy } from '@dnd-kit/sortable'\nimport { IconInfo, IconLock, IconPlus, IconTrash } from '@posthog/icons'\nimport {\n    LemonButton,\n    LemonCalendarSelect,\n    LemonCheckbox,\n    LemonCollapse,\n    LemonDialog,\n    LemonDivider,\n    LemonInput,\n    LemonSelect,\n    LemonTag,\n    LemonTextArea,\n    Link,\n    Popover,\n} from '@posthog/lemon-ui'\nimport { BindLogic, useActions, useValues } from 'kea'\nimport { EventSelect } from 'lib/components/EventSelect/EventSelect'\nimport { FlagSelector } from 'lib/components/FlagSelector'\nimport { PropertyValue } from 'lib/components/PropertyFilters/components/PropertyValue'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { dayjs } from 'lib/dayjs'\nimport { IconCancel } from 'lib/lemon-ui/icons'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { LemonRadio, LemonRadioOption } from 'lib/lemon-ui/LemonRadio'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { featureFlagLogic as enabledFeaturesLogic } from 'lib/logic/featureFlagLogic'\nimport { getPropertyKey } from 'lib/taxonomy'\nimport { formatDate } from 'lib/utils'\nimport { useState } from 'react'\nimport { featureFlagLogic } from 'scenes/feature-flags/featureFlagLogic'\nimport { FeatureFlagReleaseConditions } from 'scenes/feature-flags/FeatureFlagReleaseConditions'\nimport { SurveyRepeatSchedule } from 'scenes/surveys/SurveyRepeatSchedule'\n\nimport {\n    ActionType,\n    LinkSurveyQuestion,\n    PropertyFilterType,\n    PropertyOperator,\n    RatingSurveyQuestion,\n    SurveyMatchType,\n    SurveyQuestion,\n    SurveyQuestionType,\n    SurveySchedule,\n    SurveyType,\n} from '~/types'\n\nimport { defaultSurveyAppearance, defaultSurveyFieldValues, SurveyMatchTypeLabels } from './constants'\nimport { SurveyAPIEditor } from './SurveyAPIEditor'\nimport { SurveyAppearancePreview } from './SurveyAppearancePreview'\nimport { HTMLEditor, PresentationTypeCard } from './SurveyAppearanceUtils'\nimport { Customization, WidgetCustomization } from './SurveyCustomization'\nimport { SurveyEditQuestionGroup, SurveyEditQuestionHeader } from './SurveyEditQuestionRow'\nimport { SurveyFormAppearance } from './SurveyFormAppearance'\nimport { DataCollectionType, SurveyEditSection, surveyLogic } from './surveyLogic'\nimport { surveysLogic } from './surveysLogic'\n\nfunction SurveyCompletionConditions(): JSX.Element {\n    const { featureFlags } = useValues(enabledFeaturesLogic)\n    const { survey, dataCollectionType } = useValues(surveyLogic)\n    const { setSurveyValue, resetSurveyResponseLimits, resetSurveyAdaptiveSampling, setDataCollectionType } =\n        useActions(surveyLogic)\n    const { surveysRecurringScheduleAvailable } = useValues(surveysLogic)\n    const [visible, setVisible] = useState(false)\n\n    const surveyLimitOptions: LemonRadioOption<DataCollectionType>[] = [\n        {\n            value: 'until_stopped',\n            label: 'Keep collecting responses until the survey is stopped',\n            'data-attr': 'survey-collection-until-stopped',\n        },\n        {\n            value: 'until_limit',\n            label: 'Stop displaying the survey after reaching a certain number of completed surveys',\n            'data-attr': 'survey-collection-until-limit',\n        },\n    ]\n\n    const adaptiveLimitFFEnabled = featureFlags[FEATURE_FLAGS.SURVEYS_ADAPTIVE_LIMITS]\n\n    if (adaptiveLimitFFEnabled) {\n        surveyLimitOptions.push({\n            value: 'until_adaptive_limit',\n            label: 'Collect a certain number of surveys per day, week or month',\n            'data-attr': 'survey-collection-until-adaptive-limit',\n            disabledReason: surveysRecurringScheduleAvailable\n                ? undefined\n                : 'Upgrade your plan to use an adaptive limit on survey responses',\n        } as unknown as LemonRadioOption<DataCollectionType>)\n    }\n\n    return (\n        <div className=\"space-y-4\">\n            <div>\n                <h3>How long would you like to collect survey responses? </h3>\n                <LemonField.Pure>\n                    <LemonRadio\n                        value={dataCollectionType}\n                        onChange={(newValue: DataCollectionType) => {\n                            if (newValue === 'until_limit') {\n                                resetSurveyAdaptiveSampling()\n                                setSurveyValue('responses_limit', survey.responses_limit || 100)\n                            } else if (newValue === 'until_adaptive_limit') {\n                                resetSurveyResponseLimits()\n                                setSurveyValue('response_sampling_interval', survey.response_sampling_interval || 1)\n                                setSurveyValue(\n                                    'response_sampling_interval_type',\n                                    survey.response_sampling_interval_type || 'month'\n                                )\n                                setSurveyValue('response_sampling_limit', survey.response_sampling_limit || 100)\n                                setSurveyValue(\n                                    'response_sampling_start_date',\n                                    survey.response_sampling_start_date || dayjs()\n                                )\n                            } else {\n                                resetSurveyResponseLimits()\n                                resetSurveyAdaptiveSampling()\n                            }\n                            setDataCollectionType(newValue)\n                        }}\n                        options={surveyLimitOptions}\n                    />\n                </LemonField.Pure>\n            </div>\n            {dataCollectionType == 'until_adaptive_limit' && (\n                <LemonField.Pure>\n                    <div className=\"flex flex-row gap-2 items-center ml-5\">\n                        Starting on{' '}\n                        <Popover\n                            actionable\n                            overlay={\n                                <LemonCalendarSelect\n                                    value={dayjs(survey.response_sampling_start_date)}\n                                    onChange={(value) => {\n                                        setSurveyValue('response_sampling_start_date', value)\n                                        setVisible(false)\n                                    }}\n                                    showTimeToggle={false}\n                                    onClose={() => setVisible(false)}\n                                />\n                            }\n                            visible={visible}\n                            onClickOutside={() => setVisible(false)}\n                        >\n                            <LemonButton type=\"secondary\" onClick={() => setVisible(!visible)}>\n                                {formatDate(dayjs(survey.response_sampling_start_date || ''))}\n                            </LemonButton>\n                        </Popover>\n                        , capture up to\n                        <LemonInput\n                            type=\"number\"\n                            size=\"small\"\n                            min={1}\n                            onChange={(newValue) => {\n                                setSurveyValue('response_sampling_limit', newValue)\n                            }}\n                            value={survey.response_sampling_limit || 0}\n                        />\n                        responses, every\n                        <LemonInput\n                            type=\"number\"\n                            size=\"small\"\n                            min={1}\n                            onChange={(newValue) => {\n                                setSurveyValue('response_sampling_interval', newValue)\n                            }}\n                            value={survey.response_sampling_interval || 0}\n                        />\n                        <LemonSelect\n                            value={survey.response_sampling_interval_type}\n                            size=\"small\"\n                            onChange={(newValue) => {\n                                setSurveyValue('response_sampling_interval_type', newValue)\n                            }}\n                            options={[\n                                { value: 'day', label: 'Day(s)' },\n                                { value: 'week', label: 'Week(s)' },\n                                { value: 'month', label: 'Month(s)' },\n                            ]}\n                        />\n                        <Tooltip title=\"This is a rough guideline, not an absolute one, so the survey might receive slightly more responses than the limit specifies.\">\n                            <IconInfo />\n                        </Tooltip>\n                    </div>\n                </LemonField.Pure>\n            )}\n            {dataCollectionType == 'until_limit' && (\n                <LemonField name=\"responses_limit\" className=\"ml-5\">\n                    {({ onChange, value }) => {\n                        return (\n                            <div className=\"flex flex-row gap-2 items-center\">\n                                Stop the survey once\n                                <LemonInput\n                                    type=\"number\"\n                                    data-attr=\"survey-responses-limit-input\"\n                                    size=\"small\"\n                                    min={1}\n                                    value={value || NaN}\n                                    onChange={(newValue) => {\n                                        if (newValue && newValue > 0) {\n                                            onChange(newValue)\n                                        } else {\n                                            onChange(null)\n                                        }\n                                    }}\n                                    className=\"w-16\"\n                                />{' '}\n                                responses are received.\n                                <Tooltip title=\"This is a rough guideline, not an absolute one, so the survey might receive slightly more responses than the limit specifies.\">\n                                    <IconInfo />\n                                </Tooltip>\n                            </div>\n                        )\n                    }}\n                </LemonField>\n            )}\n            <SurveyRepeatSchedule />\n        </div>\n    )\n}\n\nexport default function SurveyEdit(): JSX.Element {\n    const {\n        survey,\n        urlMatchTypeValidationError,\n        hasTargetingSet,\n        selectedPageIndex,\n        selectedSection,\n        isEditingSurvey,\n        targetingFlagFilters,\n        hasBranchingLogic,\n        surveyRepeatedActivationAvailable,\n        surveyErrors,\n        deviceTypesMatchTypeValidationError,\n    } = useValues(surveyLogic)\n    const {\n        setSurveyValue,\n        resetTargeting,\n        setSelectedPageIndex,\n        setSelectedSection,\n        setFlagPropertyErrors,\n        deleteBranchingLogic,\n    } = useActions(surveyLogic)\n    const { surveysMultipleQuestionsAvailable, surveysEventsAvailable, surveysActionsAvailable } =\n        useValues(surveysLogic)\n    const { featureFlags } = useValues(enabledFeaturesLogic)\n    const sortedItemIds = survey.questions.map((_, idx) => idx.toString())\n    const { thankYouMessageDescriptionContentType = null } = survey.appearance ?? {}\n\n    function onSortEnd({ oldIndex, newIndex }: { oldIndex: number; newIndex: number }): void {\n        function move(arr: SurveyQuestion[], from: number, to: number): SurveyQuestion[] {\n            const clone = [...arr]\n            // Remove the element from the array\n            const [element] = clone.splice(from, 1)\n            // Insert the element at the new position\n            clone.splice(to, 0, element)\n            return clone.map((child) => ({ ...child }))\n        }\n        setSurveyValue('questions', move(survey.questions, oldIndex, newIndex))\n        setSelectedPageIndex(newIndex)\n    }\n\n    function removeTargetingFlagFilters(): void {\n        setSurveyValue('targeting_flag_filters', null)\n        setSurveyValue('targeting_flag', null)\n        setSurveyValue('remove_targeting_flag', true)\n        setFlagPropertyErrors(null)\n    }\n\n    return (\n        <div className=\"flex flex-row gap-4\">\n            <div className=\"flex flex-col gap-2 flex-1 SurveyForm\">\n                <LemonField name=\"name\" label=\"Name\">\n                    <LemonInput data-attr=\"survey-name\" />\n                </LemonField>\n                <LemonField name=\"description\" label=\"Description (optional)\">\n                    <LemonTextArea data-attr=\"survey-description\" minRows={2} />\n                </LemonField>\n                <LemonCollapse\n                    activeKey={selectedSection || undefined}\n                    onChange={(section) => {\n                        setSelectedSection(section)\n                    }}\n                    className=\"bg-surface-primary\"\n                    panels={[\n                        {\n                            key: SurveyEditSection.Presentation,\n                            header: 'Presentation',\n                            content: (\n                                <LemonField name=\"type\">\n                                    {({ onChange, value }) => {\n                                        return (\n                                            <div className=\"flex gap-4\">\n                                                <PresentationTypeCard\n                                                    active={value === SurveyType.Popover}\n                                                    onClick={() => {\n                                                        onChange(SurveyType.Popover)\n                                                        if (survey.schedule === SurveySchedule.Always) {\n                                                            setSurveyValue('schedule', SurveySchedule.Once)\n                                                        }\n                                                    }}\n                                                    title=\"Popover\"\n                                                    description=\"Automatically appears when PostHog JS is installed\"\n                                                    value={SurveyType.Popover}\n                                                >\n                                                    <div className=\"scale-[0.8] absolute -top-4 -left-4\">\n                                                        <SurveyAppearancePreview survey={survey} previewPageIndex={0} />\n                                                    </div>\n                                                </PresentationTypeCard>\n                                                <PresentationTypeCard\n                                                    active={value === SurveyType.API}\n                                                    onClick={() => {\n                                                        onChange(SurveyType.API)\n                                                        if (survey.schedule === SurveySchedule.Always) {\n                                                            setSurveyValue('schedule', SurveySchedule.Once)\n                                                        }\n                                                    }}\n                                                    title=\"API\"\n                                                    description=\"Use the PostHog API to show/hide your survey programmatically\"\n                                                    value={SurveyType.API}\n                                                >\n                                                    <div className=\"absolute left-4 w-[350px]\">\n                                                        <SurveyAPIEditor survey={survey} />\n                                                    </div>\n                                                </PresentationTypeCard>\n                                                <PresentationTypeCard\n                                                    active={value === SurveyType.Widget}\n                                                    onClick={() => onChange(SurveyType.Widget)}\n                                                    title=\"Feedback button\"\n                                                    description=\"Set up a survey based on your own custom button or our prebuilt feedback tab\"\n                                                    value={SurveyType.Widget}\n                                                >\n                                                    <LemonTag type=\"warning\" className=\"uppercase\">\n                                                        Beta\n                                                    </LemonTag>\n                                                </PresentationTypeCard>\n                                            </div>\n                                        )\n                                    }}\n                                </LemonField>\n                            ),\n                        },\n                        {\n                            key: SurveyEditSection.Steps,\n                            header: 'Steps',\n                            content: (\n                                <>\n                                    <DndContext\n                                        onDragEnd={({ active, over }) => {\n                                            if (over && active.id !== over.id) {\n                                                const finishDrag = (): void =>\n                                                    onSortEnd({\n                                                        oldIndex: sortedItemIds.indexOf(active.id.toString()),\n                                                        newIndex: sortedItemIds.indexOf(over.id.toString()),\n                                                    })\n\n                                                if (hasBranchingLogic) {\n                                                    LemonDialog.open({\n                                                        title: 'Your survey has active branching logic',\n                                                        description: (\n                                                            <p className=\"py-2\">\n                                                                Rearranging questions will remove your branching logic.\n                                                                Are you sure you want to continue?\n                                                            </p>\n                                                        ),\n\n                                                        primaryButton: {\n                                                            children: 'Continue',\n                                                            status: 'danger',\n                                                            onClick: () => {\n                                                                deleteBranchingLogic()\n                                                                finishDrag()\n                                                            },\n                                                        },\n                                                        secondaryButton: {\n                                                            children: 'Cancel',\n                                                        },\n                                                    })\n                                                } else {\n                                                    finishDrag()\n                                                }\n                                            }\n                                        }}\n                                    >\n                                        <SortableContext\n                                            disabled={survey.questions.length <= 1}\n                                            items={sortedItemIds}\n                                            strategy={verticalListSortingStrategy}\n                                        >\n                                            <LemonCollapse\n                                                activeKey={selectedPageIndex === null ? undefined : selectedPageIndex}\n                                                onChange={(index) => {\n                                                    setSelectedPageIndex(index)\n                                                }}\n                                                panels={[\n                                                    ...survey.questions.map(\n                                                        (\n                                                            question:\n                                                                | LinkSurveyQuestion\n                                                                | SurveyQuestion\n                                                                | RatingSurveyQuestion,\n                                                            index: number\n                                                        ) => ({\n                                                            key: index,\n                                                            dataAttr: `survey-question-panel-${index}`,\n                                                            header: (\n                                                                <SurveyEditQuestionHeader\n                                                                    index={index}\n                                                                    survey={survey}\n                                                                    setSelectedPageIndex={setSelectedPageIndex}\n                                                                    setSurveyValue={setSurveyValue}\n                                                                />\n                                                            ),\n                                                            content: (\n                                                                <SurveyEditQuestionGroup\n                                                                    index={index}\n                                                                    key={index}\n                                                                    question={question}\n                                                                />\n                                                            ),\n                                                        })\n                                                    ),\n                                                    ...(survey.appearance?.displayThankYouMessage\n                                                        ? [\n                                                              {\n                                                                  key: survey.questions.length,\n                                                                  header: (\n                                                                      <div className=\"flex flex-row w-full items-center justify-between\">\n                                                                          <b>Confirmation message</b>\n                                                                          <LemonButton\n                                                                              icon={<IconTrash />}\n                                                                              data-attr=\"delete-survey-confirmation\"\n                                                                              onClick={(e) => {\n                                                                                  const deleteConfirmationMessage =\n                                                                                      (): void => {\n                                                                                          e.stopPropagation()\n                                                                                          setSelectedPageIndex(\n                                                                                              survey.questions.length -\n                                                                                                  1\n                                                                                          )\n                                                                                          setSurveyValue('appearance', {\n                                                                                              ...survey.appearance,\n                                                                                              displayThankYouMessage:\n                                                                                                  false,\n                                                                                          })\n                                                                                      }\n\n                                                                                  if (hasBranchingLogic) {\n                                                                                      LemonDialog.open({\n                                                                                          title: 'Your survey has active branching logic',\n                                                                                          description: (\n                                                                                              <p className=\"py-2\">\n                                                                                                  Deleting the\n                                                                                                  confirmation message\n                                                                                                  will remove your\n                                                                                                  branching logic. Are\n                                                                                                  you sure you want to\n                                                                                                  continue?\n                                                                                              </p>\n                                                                                          ),\n                                                                                          primaryButton: {\n                                                                                              children: 'Continue',\n                                                                                              status: 'danger',\n                                                                                              onClick: () => {\n                                                                                                  deleteBranchingLogic()\n                                                                                                  deleteConfirmationMessage()\n                                                                                              },\n                                                                                          },\n                                                                                          secondaryButton: {\n                                                                                              children: 'Cancel',\n                                                                                          },\n                                                                                      })\n                                                                                  } else {\n                                                                                      deleteConfirmationMessage()\n                                                                                  }\n                                                                              }}\n                                                                              tooltipPlacement=\"top-end\"\n                                                                          />\n                                                                      </div>\n                                                                  ),\n                                                                  content: (\n                                                                      <>\n                                                                          <LemonField.Pure label=\"Thank you header\">\n                                                                              <LemonInput\n                                                                                  value={\n                                                                                      survey.appearance\n                                                                                          .thankYouMessageHeader\n                                                                                  }\n                                                                                  onChange={(val) =>\n                                                                                      setSurveyValue('appearance', {\n                                                                                          ...survey.appearance,\n                                                                                          thankYouMessageHeader: val,\n                                                                                      })\n                                                                                  }\n                                                                                  placeholder=\"ex: Thank you for your feedback!\"\n                                                                              />\n                                                                          </LemonField.Pure>\n                                                                          <LemonField.Pure\n                                                                              label=\"Thank you description\"\n                                                                              className=\"mt-3\"\n                                                                          >\n                                                                              <HTMLEditor\n                                                                                  value={\n                                                                                      survey.appearance\n                                                                                          .thankYouMessageDescription\n                                                                                  }\n                                                                                  onChange={(val) =>\n                                                                                      setSurveyValue('appearance', {\n                                                                                          ...survey.appearance,\n                                                                                          thankYouMessageDescription:\n                                                                                              val,\n                                                                                          thankYouMessageDescriptionContentType,\n                                                                                      })\n                                                                                  }\n                                                                                  onTabChange={(key) => {\n                                                                                      const updatedAppearance = {\n                                                                                          ...survey.appearance,\n                                                                                          thankYouMessageDescriptionContentType:\n                                                                                              key === 'html'\n                                                                                                  ? 'html'\n                                                                                                  : 'text',\n                                                                                      }\n                                                                                      setSurveyValue(\n                                                                                          'appearance',\n                                                                                          updatedAppearance\n                                                                                      )\n                                                                                  }}\n                                                                                  activeTab={\n                                                                                      thankYouMessageDescriptionContentType ??\n                                                                                      'text'\n                                                                                  }\n                                                                                  textPlaceholder=\"ex: We really appreciate it.\"\n                                                                              />\n                                                                          </LemonField.Pure>\n                                                                          <LemonField.Pure\n                                                                              className=\"mt-2\"\n                                                                              label=\"Button text\"\n                                                                          >\n                                                                              <LemonInput\n                                                                                  value={\n                                                                                      survey.appearance\n                                                                                          .thankYouMessageCloseButtonText\n                                                                                  }\n                                                                                  onChange={(val) =>\n                                                                                      setSurveyValue('appearance', {\n                                                                                          ...survey.appearance,\n                                                                                          thankYouMessageCloseButtonText:\n                                                                                              val,\n                                                                                      })\n                                                                                  }\n                                                                                  placeholder=\"example: Close\"\n                                                                              />\n                                                                          </LemonField.Pure>\n                                                                          <LemonField.Pure className=\"mt-2\">\n                                                                              <LemonCheckbox\n                                                                                  checked={\n                                                                                      !!survey.appearance.autoDisappear\n                                                                                  }\n                                                                                  label=\"Auto disappear\"\n                                                                                  onChange={(checked) =>\n                                                                                      setSurveyValue('appearance', {\n                                                                                          ...survey.appearance,\n                                                                                          autoDisappear: checked,\n                                                                                      })\n                                                                                  }\n                                                                              />\n                                                                          </LemonField.Pure>\n                                                                      </>\n                                                                  ),\n                                                              },\n                                                          ]\n                                                        : []),\n                                                ]}\n                                            />\n                                        </SortableContext>\n                                    </DndContext>\n                                    <div className=\"flex gap-2\">\n                                        <div className=\"flex items-center gap-2 mt-2\">\n                                            <LemonButton\n                                                data-attr=\"add-question\"\n                                                type=\"secondary\"\n                                                className=\"w-max\"\n                                                icon={<IconPlus />}\n                                                sideIcon={\n                                                    surveysMultipleQuestionsAvailable ? null : (\n                                                        <IconLock className=\"ml-1 text-base text-secondary\" />\n                                                    )\n                                                }\n                                                disabledReason={\n                                                    surveysMultipleQuestionsAvailable\n                                                        ? null\n                                                        : 'Upgrade your plan to get multiple questions'\n                                                }\n                                                onClick={() => {\n                                                    setSurveyValue('questions', [\n                                                        ...survey.questions,\n                                                        { ...defaultSurveyFieldValues.open.questions[0] },\n                                                    ])\n                                                    setSelectedPageIndex(survey.questions.length)\n                                                }}\n                                            >\n                                                Add question\n                                            </LemonButton>\n                                            {!surveysMultipleQuestionsAvailable && (\n                                                <Link to=\"/organization/billing\" target=\"_blank\" targetBlankIcon>\n                                                    Upgrade\n                                                </Link>\n                                            )}\n                                        </div>\n                                        {!survey.appearance?.displayThankYouMessage && (\n                                            <LemonButton\n                                                type=\"secondary\"\n                                                className=\"w-max mt-2\"\n                                                icon={<IconPlus />}\n                                                onClick={() => {\n                                                    setSurveyValue('appearance', {\n                                                        ...survey.appearance,\n                                                        displayThankYouMessage: true,\n                                                    })\n                                                    setSelectedPageIndex(survey.questions.length)\n                                                }}\n                                            >\n                                                Add confirmation message\n                                            </LemonButton>\n                                        )}\n                                    </div>\n                                </>\n                            ),\n                        },\n                        ...(survey.type !== SurveyType.API\n                            ? [\n                                  {\n                                      key: SurveyEditSection.Customization,\n                                      header: 'Customization',\n                                      content: (\n                                          <LemonField name=\"appearance\" label=\"\">\n                                              {({ value, onChange }) => (\n                                                  <>\n                                                      {survey.type === SurveyType.Widget && (\n                                                          <>\n                                                              <div className=\"font-bold\">\n                                                                  Feedback button customization\n                                                              </div>\n                                                              <WidgetCustomization\n                                                                  hasBranchingLogic={hasBranchingLogic}\n                                                                  deleteBranchingLogic={deleteBranchingLogic}\n                                                                  customizeRatingButtons={\n                                                                      survey.questions[0].type ===\n                                                                      SurveyQuestionType.Rating\n                                                                  }\n                                                                  customizePlaceholderText={\n                                                                      survey.questions[0].type ===\n                                                                      SurveyQuestionType.Open\n                                                                  }\n                                                                  appearance={value || defaultSurveyAppearance}\n                                                                  onAppearanceChange={(appearance) => {\n                                                                      onChange(appearance)\n                                                                  }}\n                                                              />\n                                                              <LemonDivider className=\"mt-4\" />\n                                                              <div className=\"font-bold\">Survey customization</div>\n                                                          </>\n                                                      )}\n                                                      <Customization\n                                                          appearance={value || defaultSurveyAppearance}\n                                                          hasBranchingLogic={hasBranchingLogic}\n                                                          deleteBranchingLogic={deleteBranchingLogic}\n                                                          customizeRatingButtons={survey.questions.some(\n                                                              (question) => question.type === SurveyQuestionType.Rating\n                                                          )}\n                                                          customizePlaceholderText={survey.questions.some(\n                                                              (question) => question.type === SurveyQuestionType.Open\n                                                          )}\n                                                          onAppearanceChange={(appearance) => {\n                                                              onChange(appearance)\n                                                          }}\n                                                          isCustomFontsEnabled={\n                                                              !!featureFlags[FEATURE_FLAGS.SURVEYS_CUSTOM_FONTS]\n                                                          }\n                                                          validationErrors={surveyErrors?.appearance}\n                                                      />\n                                                  </>\n                                              )}\n                                          </LemonField>\n                                      ),\n                                  },\n                              ]\n                            : []),\n                        {\n                            key: SurveyEditSection.DisplayConditions,\n                            header: 'Display conditions',\n                            dataAttr: 'survey-display-conditions',\n                            content: (\n                                <LemonField.Pure>\n                                    <LemonSelect\n                                        onChange={(value) => {\n                                            if (value) {\n                                                resetTargeting()\n                                            } else {\n                                                // TRICKY: When attempting to set user match conditions\n                                                // we want a proxy value to be set so that the user\n                                                // can then edit these, or decide to go back to all user targeting\n                                                setSurveyValue('conditions', { url: '' })\n                                            }\n                                        }}\n                                        value={!hasTargetingSet}\n                                        options={[\n                                            { label: 'All users', value: true },\n                                            {\n                                                label: 'Users who match all of the following...',\n                                                value: false,\n                                                'data-attr': 'survey-display-conditions-select-users',\n                                            },\n                                        ]}\n                                        data-attr=\"survey-display-conditions-select\"\n                                    />\n                                    {!hasTargetingSet ? (\n                                        <span className=\"text-secondary\">\n                                            Survey <b>will be released to everyone</b>\n                                        </span>\n                                    ) : (\n                                        <>\n                                            <LemonField\n                                                name=\"linked_flag_id\"\n                                                label=\"Link feature flag (optional)\"\n                                                info={\n                                                    <>\n                                                        Connecting to a feature flag will automatically enable this\n                                                        survey for everyone in the feature flag.\n                                                    </>\n                                                }\n                                            >\n                                                {({ value, onChange }) => (\n                                                    <div\n                                                        className=\"flex\"\n                                                        data-attr=\"survey-display-conditions-linked-flag\"\n                                                    >\n                                                        <FlagSelector value={value} onChange={onChange} />\n                                                        {value && (\n                                                            <LemonButton\n                                                                className=\"ml-2\"\n                                                                icon={<IconCancel />}\n                                                                size=\"small\"\n                                                                onClick={() => onChange(null)}\n                                                                aria-label=\"close\"\n                                                            />\n                                                        )}\n                                                    </div>\n                                                )}\n                                            </LemonField>\n                                            <LemonField name=\"conditions\">\n                                                {({ value, onChange }) => (\n                                                    <>\n                                                        <LemonField.Pure\n                                                            label=\"URL targeting\"\n                                                            error={urlMatchTypeValidationError}\n                                                            info=\"Targeting by regex or exact match requires at least version 1.82 of posthog-js\"\n                                                        >\n                                                            <div className=\"flex flex-row gap-2 items-center\">\n                                                                URL\n                                                                <LemonSelect\n                                                                    value={\n                                                                        value?.urlMatchType || SurveyMatchType.Contains\n                                                                    }\n                                                                    onChange={(matchTypeVal) => {\n                                                                        onChange({\n                                                                            ...value,\n                                                                            urlMatchType: matchTypeVal,\n                                                                        })\n                                                                    }}\n                                                                    data-attr=\"survey-url-matching-type\"\n                                                                    options={Object.keys(SurveyMatchTypeLabels).map(\n                                                                        (key) => ({\n                                                                            label: SurveyMatchTypeLabels[key],\n                                                                            value: key,\n                                                                        })\n                                                                    )}\n                                                                />\n                                                                <LemonInput\n                                                                    value={value?.url}\n                                                                    onChange={(urlVal) =>\n                                                                        onChange({ ...value, url: urlVal })\n                                                                    }\n                                                                    placeholder=\"ex: https://app.posthog.com\"\n                                                                    fullWidth\n                                                                />\n                                                            </div>\n                                                        </LemonField.Pure>\n                                                        <LemonField.Pure\n                                                            label=\"Device Types\"\n                                                            error={deviceTypesMatchTypeValidationError}\n                                                            info={\n                                                                <>\n                                                                    Add the device types to show the survey on. Possible\n                                                                    values: 'Desktop', 'Mobile', 'Tablet'. For the full\n                                                                    list and caveats,{' '}\n                                                                    <Link to=\"https://posthog.com/docs/surveys/creating-surveys#display-conditions\">\n                                                                        check the documentation here\n                                                                    </Link>\n                                                                    . Requires at least version 1.214 of posthog-js\n                                                                </>\n                                                            }\n                                                        >\n                                                            <div className=\"flex flex-row gap-2 items-center\">\n                                                                Device Types\n                                                                <LemonSelect\n                                                                    value={\n                                                                        value?.deviceTypesMatchType ||\n                                                                        SurveyMatchType.Contains\n                                                                    }\n                                                                    onChange={(matchTypeVal) => {\n                                                                        onChange({\n                                                                            ...value,\n                                                                            deviceTypesMatchType: matchTypeVal,\n                                                                        })\n                                                                    }}\n                                                                    data-attr=\"survey-device-types-matching-type\"\n                                                                    options={Object.keys(SurveyMatchTypeLabels).map(\n                                                                        (key) => ({\n                                                                            label: SurveyMatchTypeLabels[key],\n                                                                            value: key,\n                                                                        })\n                                                                    )}\n                                                                />\n                                                                {[\n                                                                    SurveyMatchType.Regex,\n                                                                    SurveyMatchType.NotRegex,\n                                                                ].includes(\n                                                                    value?.deviceTypesMatchType ||\n                                                                        SurveyMatchType.Contains\n                                                                ) ? (\n                                                                    <LemonInput\n                                                                        value={value?.deviceTypes?.join('|')}\n                                                                        onChange={(deviceTypesVal) =>\n                                                                            onChange({\n                                                                                ...value,\n                                                                                deviceTypes: [deviceTypesVal],\n                                                                            })\n                                                                        }\n                                                                        // regex placeholder for device type\n                                                                        className=\"flex-1\"\n                                                                        placeholder=\"ex: Desktop|Mobile\"\n                                                                    />\n                                                                ) : (\n                                                                    <PropertyValue\n                                                                        propertyKey={getPropertyKey(\n                                                                            'Device Type',\n                                                                            TaxonomicFilterGroupType.EventProperties\n                                                                        )}\n                                                                        type={PropertyFilterType.Event}\n                                                                        onSet={(deviceTypes: string | string[]) => {\n                                                                            onChange({\n                                                                                ...value,\n                                                                                deviceTypes: Array.isArray(deviceTypes)\n                                                                                    ? deviceTypes\n                                                                                    : [deviceTypes],\n                                                                            })\n                                                                        }}\n                                                                        operator={PropertyOperator.Exact}\n                                                                        value={value?.deviceTypes}\n                                                                        inputClassName=\"flex-1\"\n                                                                    />\n                                                                )}\n                                                            </div>\n                                                        </LemonField.Pure>\n                                                        <LemonField.Pure label=\"CSS selector matches:\">\n                                                            <LemonInput\n                                                                value={value?.selector}\n                                                                onChange={(selectorVal) =>\n                                                                    onChange({ ...value, selector: selectorVal })\n                                                                }\n                                                                placeholder=\"ex: .className or #id\"\n                                                            />\n                                                        </LemonField.Pure>\n                                                        <LemonField.Pure\n                                                            label=\"Survey wait period\"\n                                                            info=\"Note that this condition will only apply reliably for identified users within a single browser session. Anonymous users or users who switch browsers, use incognito sessions, or log out and log back in may see the survey again. Additionally, responses submitted while a user is anonymous may be associated with their account if they log in during the same session.\"\n                                                        >\n                                                            <div className=\"flex flex-row gap-2 items-center\">\n                                                                <LemonCheckbox\n                                                                    checked={!!value?.seenSurveyWaitPeriodInDays}\n                                                                    onChange={(checked) => {\n                                                                        if (checked) {\n                                                                            onChange({\n                                                                                ...value,\n                                                                                seenSurveyWaitPeriodInDays:\n                                                                                    value?.seenSurveyWaitPeriodInDays ||\n                                                                                    30,\n                                                                            })\n                                                                        } else {\n                                                                            const {\n                                                                                seenSurveyWaitPeriodInDays,\n                                                                                ...rest\n                                                                            } = value || {}\n                                                                            onChange(rest)\n                                                                        }\n                                                                    }}\n                                                                />\n                                                                Don't show to users who saw any survey in the last\n                                                                <LemonInput\n                                                                    type=\"number\"\n                                                                    size=\"xsmall\"\n                                                                    min={0}\n                                                                    value={value?.seenSurveyWaitPeriodInDays || NaN}\n                                                                    onChange={(val) => {\n                                                                        if (val !== undefined && val > 0) {\n                                                                            onChange({\n                                                                                ...value,\n                                                                                seenSurveyWaitPeriodInDays: val,\n                                                                            })\n                                                                        } else {\n                                                                            onChange({\n                                                                                ...value,\n                                                                                seenSurveyWaitPeriodInDays: null,\n                                                                            })\n                                                                        }\n                                                                    }}\n                                                                    className=\"w-12\"\n                                                                />{' '}\n                                                                {value?.seenSurveyWaitPeriodInDays === 1\n                                                                    ? 'day'\n                                                                    : 'days'}\n                                                                .\n                                                            </div>\n                                                        </LemonField.Pure>\n                                                    </>\n                                                )}\n                                            </LemonField>\n                                            <LemonField.Pure label=\"Properties\">\n                                                <BindLogic\n                                                    logic={featureFlagLogic}\n                                                    props={{ id: survey.targeting_flag?.id || 'new' }}\n                                                >\n                                                    {!targetingFlagFilters && (\n                                                        <LemonButton\n                                                            type=\"secondary\"\n                                                            className=\"w-max\"\n                                                            onClick={() => {\n                                                                setSurveyValue('targeting_flag_filters', {\n                                                                    groups: [\n                                                                        {\n                                                                            properties: [],\n                                                                            rollout_percentage: 100,\n                                                                            variant: null,\n                                                                        },\n                                                                    ],\n                                                                    multivariate: null,\n                                                                    payloads: {},\n                                                                })\n                                                                setSurveyValue('remove_targeting_flag', false)\n                                                            }}\n                                                        >\n                                                            Add property targeting\n                                                        </LemonButton>\n                                                    )}\n                                                    {targetingFlagFilters && (\n                                                        <>\n                                                            <div className=\"mt-2\">\n                                                                <FeatureFlagReleaseConditions\n                                                                    id={String(survey.targeting_flag?.id) || 'new'}\n                                                                    excludeTitle={true}\n                                                                    filters={targetingFlagFilters}\n                                                                    onChange={(filters, errors) => {\n                                                                        setFlagPropertyErrors(errors)\n                                                                        setSurveyValue(\n                                                                            'targeting_flag_filters',\n                                                                            filters\n                                                                        )\n                                                                    }}\n                                                                    showTrashIconWithOneCondition\n                                                                    removedLastConditionCallback={\n                                                                        removeTargetingFlagFilters\n                                                                    }\n                                                                />\n                                                            </div>\n                                                            <LemonButton\n                                                                type=\"secondary\"\n                                                                status=\"danger\"\n                                                                className=\"w-max\"\n                                                                onClick={removeTargetingFlagFilters}\n                                                            >\n                                                                Remove all property targeting\n                                                            </LemonButton>\n                                                        </>\n                                                    )}\n                                                </BindLogic>\n                                            </LemonField.Pure>\n                                            {surveysEventsAvailable && (\n                                                <LemonField.Pure\n                                                    label=\"User sends events\"\n                                                    info=\"Note that these events are only observed, and activate this survey, in the current user session.\"\n                                                >\n                                                    <>\n                                                        <EventSelect\n                                                            filterGroupTypes={[TaxonomicFilterGroupType.CustomEvents]}\n                                                            onChange={(includedEvents) => {\n                                                                setSurveyValue('conditions', {\n                                                                    ...survey.conditions,\n                                                                    events: {\n                                                                        values: includedEvents.map((e) => {\n                                                                            return { name: e }\n                                                                        }),\n                                                                    },\n                                                                })\n                                                            }}\n                                                            selectedEvents={\n                                                                survey.conditions?.events?.values?.length !=\n                                                                    undefined &&\n                                                                survey.conditions?.events?.values?.length > 0\n                                                                    ? survey.conditions?.events?.values.map(\n                                                                          (v) => v.name\n                                                                      )\n                                                                    : []\n                                                            }\n                                                            addElement={\n                                                                <LemonButton\n                                                                    size=\"small\"\n                                                                    type=\"secondary\"\n                                                                    icon={<IconPlus />}\n                                                                    sideIcon={null}\n                                                                >\n                                                                    Add event\n                                                                </LemonButton>\n                                                            }\n                                                        />\n                                                        {surveyRepeatedActivationAvailable && (\n                                                            <div className=\"flex flex-row gap-2 items-center\">\n                                                                Survey display frequency\n                                                                <LemonSelect\n                                                                    onChange={(value) => {\n                                                                        setSurveyValue('conditions', {\n                                                                            ...survey.conditions,\n                                                                            events: {\n                                                                                ...survey.conditions?.events,\n                                                                                repeatedActivation: value,\n                                                                            },\n                                                                        })\n                                                                    }}\n                                                                    value={\n                                                                        survey.conditions?.events?.repeatedActivation ||\n                                                                        false\n                                                                    }\n                                                                    options={[\n                                                                        {\n                                                                            label: 'Just once',\n                                                                            value: false,\n                                                                        },\n                                                                        {\n                                                                            label: 'Every time any of the above events are captured',\n                                                                            value: true,\n                                                                        },\n                                                                    ]}\n                                                                />\n                                                            </div>\n                                                        )}\n                                                    </>\n                                                </LemonField.Pure>\n                                            )}\n                                            {featureFlags[FEATURE_FLAGS.SURVEYS_ACTIONS] && surveysActionsAvailable && (\n                                                <LemonField.Pure\n                                                    label=\"User performs actions\"\n                                                    info=\"Note that these actions are only observed, and activate this survey, in the current user session.\"\n                                                >\n                                                    <EventSelect\n                                                        filterGroupTypes={[TaxonomicFilterGroupType.Actions]}\n                                                        onItemChange={(items: ActionType[]) => {\n                                                            setSurveyValue('conditions', {\n                                                                ...survey.conditions,\n                                                                actions: {\n                                                                    values: items.map((e) => {\n                                                                        return { id: e.id, name: e.name }\n                                                                    }),\n                                                                },\n                                                            })\n                                                        }}\n                                                        selectedItems={\n                                                            survey.conditions?.actions?.values &&\n                                                            survey.conditions?.actions?.values.length > 0\n                                                                ? survey.conditions?.actions?.values\n                                                                : []\n                                                        }\n                                                        selectedEvents={\n                                                            survey.conditions?.actions?.values?.map((v) => v.name) ?? []\n                                                        }\n                                                        addElement={\n                                                            <LemonButton\n                                                                size=\"small\"\n                                                                type=\"secondary\"\n                                                                icon={<IconPlus />}\n                                                                sideIcon={null}\n                                                            >\n                                                                Add action\n                                                            </LemonButton>\n                                                        }\n                                                    />\n                                                </LemonField.Pure>\n                                            )}\n                                        </>\n                                    )}\n                                </LemonField.Pure>\n                            ),\n                        },\n                        {\n                            key: SurveyEditSection.CompletionConditions,\n                            header: 'Completion conditions',\n                            content: <SurveyCompletionConditions />,\n                        },\n                    ]}\n                />\n            </div>\n            <LemonDivider vertical />\n            <div className=\"max-w-80 mx-4 flex flex-col items-center h-full w-full sticky top-0 pt-16\">\n                <SurveyFormAppearance\n                    previewPageIndex={selectedPageIndex || 0}\n                    survey={survey}\n                    handleSetSelectedPageIndex={(pageIndex) => setSelectedPageIndex(pageIndex)}\n                    isEditingSurvey={isEditingSurvey}\n                />\n            </div>\n        </div>\n    )\n}\n", "import './EditSurvey.scss'\n\nimport { IconInfo } from '@posthog/icons'\nimport { LemonInput, LemonSnack, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { LemonRadio } from 'lib/lemon-ui/LemonRadio'\n\nimport { SurveySchedule, SurveyType } from '~/types'\n\nimport { SurveyEditSection, surveyLogic } from './surveyLogic'\nimport { surveysLogic } from './surveysLogic'\n\nfunction SurveyIterationOptions(): JSX.Element {\n    const { showSurveyRepeatSchedule, survey } = useValues(surveyLogic)\n    const { setSurveyValue } = useActions(surveyLogic)\n    const { surveysRecurringScheduleAvailable } = useValues(surveysLogic)\n\n    const surveysRecurringScheduleDisabledReason = surveysRecurringScheduleAvailable\n        ? undefined\n        : 'Upgrade your plan to use repeating surveys'\n\n    return (\n        <>\n            <LemonField.Pure\n                info=\"Showing a survey all the time requires at least version 1.220.0 of posthog-js\"\n                label={<h3 className=\"mb-0\">How often should we show this survey?</h3>}\n            >\n                <LemonRadio\n                    value={survey.schedule ?? SurveySchedule.Once}\n                    onChange={(newValue) => {\n                        setSurveyValue('schedule', newValue)\n                        if (newValue === SurveySchedule.Once || newValue === SurveySchedule.Always) {\n                            setSurveyValue('iteration_count', 0)\n                            setSurveyValue('iteration_frequency_days', 0)\n                        } else if (newValue === SurveySchedule.Recurring) {\n                            setSurveyValue('iteration_count', 1)\n                            setSurveyValue('iteration_frequency_days', 90)\n                        }\n                    }}\n                    options={[\n                        {\n                            value: SurveySchedule.Once,\n                            label: 'Once',\n                            'data-attr': 'survey-iteration-frequency-days',\n                        },\n                        {\n                            value: SurveySchedule.Recurring,\n                            label: 'Repeat on a schedule',\n                            'data-attr': 'survey-iteration-frequency-days',\n                            disabledReason: surveysRecurringScheduleDisabledReason,\n                        },\n                        {\n                            value: SurveySchedule.Always,\n                            label: 'All the time',\n                            'data-attr': 'survey-iteration-frequency-days',\n                            disabledReason:\n                                survey.type !== SurveyType.Widget ? 'Only available for widget surveys' : undefined,\n                        },\n                    ]}\n                />\n            </LemonField.Pure>\n            {showSurveyRepeatSchedule && (\n                <div className=\"flex flex-row gap-2 items-center mt-2 ml-5\">\n                    Repeat this survey{' '}\n                    <LemonField name=\"iteration_count\">\n                        {({ onChange, value }) => {\n                            return (\n                                <LemonInput\n                                    type=\"number\"\n                                    data-attr=\"survey-iteration-count\"\n                                    size=\"small\"\n                                    min={1}\n                                    // NB this is enforced in the API too\n                                    max={500}\n                                    value={value || 1}\n                                    onChange={(newValue) => {\n                                        if (newValue && newValue > 0) {\n                                            onChange(newValue)\n                                        } else {\n                                            onChange(null)\n                                        }\n                                    }}\n                                    className=\"w-16\"\n                                />\n                            )\n                        }}\n                    </LemonField>{' '}\n                    times, once every\n                    <LemonField name=\"iteration_frequency_days\">\n                        {({ onChange, value }) => {\n                            return (\n                                <LemonInput\n                                    type=\"number\"\n                                    data-attr=\"survey-iteration-frequency-days\"\n                                    size=\"small\"\n                                    min={1}\n                                    value={value || 90}\n                                    onChange={(newValue) => {\n                                        if (newValue && newValue > 0) {\n                                            onChange(newValue)\n                                        } else {\n                                            onChange(null)\n                                        }\n                                    }}\n                                    className=\"w-16\"\n                                />\n                            )\n                        }}\n                    </LemonField>{' '}\n                    days\n                </div>\n            )}\n        </>\n    )\n}\n\nexport function SurveyRepeatSchedule(): JSX.Element {\n    const { survey } = useValues(surveyLogic)\n    const { setSelectedSection } = useActions(surveyLogic)\n\n    const canSurveyBeRepeated = Boolean(\n        survey.conditions?.events?.repeatedActivation && survey.conditions?.events?.values?.length > 0\n    )\n\n    return (\n        <div className=\"mt-4\">\n            {canSurveyBeRepeated ? (\n                <span className=\"font-medium\">\n                    <h3 className=\"mb-0\">How often should we show this survey?</h3>\n                    <IconInfo className=\"mr-0.5\" /> This survey is displayed whenever the{' '}\n                    <LemonSnack>{survey.conditions?.events?.values.map((v) => v.name).join(', ')}</LemonSnack>{' '}\n                    <span>{survey.conditions?.events?.values.length === 1 ? 'event is' : 'events are'}</span> triggered.\n                    So these settings are not applicable. If you want, remove the event targeting in the{' '}\n                    <Link onClick={() => setSelectedSection(SurveyEditSection.DisplayConditions)}>\n                        display conditions section\n                    </Link>\n                    .\n                </span>\n            ) : (\n                <SurveyIterationOptions />\n            )}\n        </div>\n    )\n}\n", "import { CodeSnippet, Language } from 'lib/components/CodeSnippet'\n\nimport { Survey } from '~/types'\n\nimport { NewSurvey } from './constants'\n\nexport function SurveyAPIEditor({ survey }: { survey: Survey | NewSurvey }): JSX.Element {\n    // Make sure this is synced to SurveyAPISerializer\n    const apiSurvey = {\n        id: survey.id,\n        name: survey.name,\n        description: survey.description,\n        type: 'api',\n        linked_flag_key: survey.linked_flag ? survey.linked_flag.key : null,\n        targeting_flag_key: survey.targeting_flag ? survey.targeting_flag.key : null,\n        questions: survey.questions,\n        conditions: survey.conditions,\n        start_date: survey.start_date,\n        end_date: survey.end_date,\n    }\n\n    return (\n        <CodeSnippet wrap language={Language.JSON}>\n            {JSON.stringify(apiSurvey, null, 2)}\n        </CodeSnippet>\n    )\n}\n", "import { IconLock } from '@posthog/icons'\nimport { LemonBanner, LemonTabs, LemonTextArea } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { useValues } from 'kea'\nimport { PayGateMini } from 'lib/components/PayGateMini/PayGateMini'\nimport { CodeEditor } from 'lib/monaco/CodeEditor'\n\nimport { AvailableFeature, SurveyQuestionDescriptionContentType } from '~/types'\n\nimport { surveysLogic } from './surveysLogic'\n\nexport function PresentationTypeCard({\n    title,\n    description,\n    children,\n    onClick,\n    value,\n    active,\n}: {\n    title: string\n    description?: string\n    children: React.ReactNode\n    onClick: () => void\n    value: any\n    active: boolean\n}): JSX.Element {\n    return (\n        <div\n            className={clsx(\n                'border rounded relative px-4 py-2 overflow-hidden h-[180px] w-[200px]',\n                active ? 'border-accent-primary' : 'border-border'\n            )}\n        >\n            <p className=\"font-semibold m-0\">{title}</p>\n            {description && <p className=\"m-0 text-xs\">{description}</p>}\n            <div className=\"relative mt-2 presentation-preview\">{children}</div>\n            <input\n                onClick={onClick}\n                className=\"opacity-0 absolute inset-0 h-full w-full cursor-pointer\"\n                name=\"type\"\n                value={value}\n                type=\"radio\"\n            />\n        </div>\n    )\n}\n\nexport function HTMLEditor({\n    value,\n    onChange,\n    onTabChange,\n    activeTab,\n    textPlaceholder,\n}: {\n    value?: string\n    onChange: (value: any) => void\n    onTabChange: (key: SurveyQuestionDescriptionContentType) => void\n    activeTab: SurveyQuestionDescriptionContentType\n    textPlaceholder?: string\n}): JSX.Element {\n    const { surveysHTMLAvailable } = useValues(surveysLogic)\n\n    return (\n        <>\n            <LemonTabs\n                activeKey={activeTab}\n                onChange={onTabChange}\n                tabs={[\n                    {\n                        key: 'text',\n                        label: <span className=\"text-sm\">Text</span>,\n                        content: (\n                            <LemonTextArea\n                                minRows={2}\n                                value={value}\n                                onChange={(v) => onChange(v)}\n                                placeholder={textPlaceholder}\n                            />\n                        ),\n                    },\n                    {\n                        key: 'html',\n                        label: (\n                            <div>\n                                <span className=\"text-sm\">HTML</span>\n                                {!surveysHTMLAvailable && <IconLock className=\"ml-2\" />}\n                            </div>\n                        ),\n                        content: (\n                            <div>\n                                {surveysHTMLAvailable ? (\n                                    <CodeEditor\n                                        className=\"border\"\n                                        language=\"html\"\n                                        value={value}\n                                        onChange={(v) => onChange(v ?? '')}\n                                        height={150}\n                                        options={{\n                                            minimap: {\n                                                enabled: false,\n                                            },\n                                            scrollbar: {\n                                                alwaysConsumeMouseWheel: false,\n                                            },\n                                            wordWrap: 'on',\n                                            scrollBeyondLastLine: false,\n                                            automaticLayout: true,\n                                            fixedOverflowWidgets: true,\n                                            lineNumbers: 'off',\n                                            glyphMargin: false,\n                                            folding: false,\n                                        }}\n                                    />\n                                ) : (\n                                    <PayGateMini feature={AvailableFeature.SURVEYS_TEXT_HTML}>\n                                        <CodeEditor\n                                            className=\"border\"\n                                            language=\"html\"\n                                            value={value}\n                                            onChange={(v) => onChange(v ?? '')}\n                                            height={150}\n                                            options={{\n                                                minimap: {\n                                                    enabled: false,\n                                                },\n                                                scrollbar: {\n                                                    alwaysConsumeMouseWheel: false,\n                                                },\n                                                wordWrap: 'on',\n                                                scrollBeyondLastLine: false,\n                                                automaticLayout: true,\n                                                fixedOverflowWidgets: true,\n                                                lineNumbers: 'off',\n                                                glyphMargin: false,\n                                                folding: false,\n                                            }}\n                                        />\n                                    </PayGateMini>\n                                )}\n                            </div>\n                        ),\n                    },\n                ]}\n            />\n            {value && value?.toLowerCase().includes('<script') && (\n                <LemonBanner type=\"warning\">\n                    Scripts won't run in the survey popover and we'll remove these on save. Use the API question mode to\n                    run your own scripts in surveys.\n                </LemonBanner>\n            )}\n        </>\n    )\n}\n", "import './EditSurvey.scss'\n\nimport { useSortable } from '@dnd-kit/sortable'\nimport { CSS } from '@dnd-kit/utilities'\nimport { IconPlusSmall, IconTrash } from '@posthog/icons'\nimport { LemonButton, LemonCheckbox, LemonDialog, LemonInput, LemonSelect } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { Group } from 'kea-forms'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { getSurveyStatus } from 'scenes/surveys/surveysLogic'\n\nimport { ProgressStatus, Survey, SurveyQuestionType, SurveyType } from '~/types'\n\nimport { defaultSurveyFieldValues, NewSurvey, SurveyQuestionLabel } from './constants'\nimport { QuestionBranchingInput } from './QuestionBranchingInput'\nimport { HTMLEditor } from './SurveyAppearanceUtils'\nimport { SurveyDragHandle } from './SurveyDragHandle'\nimport { surveyLogic } from './surveyLogic'\n\ntype SurveyQuestionHeaderProps = {\n    index: number\n    survey: Survey | NewSurvey\n    setSelectedPageIndex: (index: number) => void\n    setSurveyValue: (key: string, value: any) => void\n}\n\nconst MAX_NUMBER_OF_OPTIONS = 15\n\nexport function SurveyEditQuestionHeader({\n    index,\n    survey,\n    setSelectedPageIndex,\n    setSurveyValue,\n}: SurveyQuestionHeaderProps): JSX.Element {\n    const { hasBranchingLogic } = useValues(surveyLogic)\n    const { deleteBranchingLogic } = useActions(surveyLogic)\n    const { setNodeRef, attributes, transform, transition, listeners, isDragging } = useSortable({\n        id: index.toString(),\n    })\n\n    return (\n        <div\n            className=\"flex flex-row w-full items-center justify-between relative\"\n            ref={setNodeRef}\n            {...attributes}\n            // eslint-disable-next-line react/forbid-dom-props\n            style={{\n                zIndex: isDragging ? 1 : undefined,\n                transform: CSS.Translate.toString(transform),\n                transition,\n            }}\n        >\n            <div className=\"flex flex-row gap-2 items-center\">\n                <SurveyDragHandle\n                    listeners={listeners}\n                    isDraftSurvey={getSurveyStatus(survey) === ProgressStatus.Draft}\n                    hasMultipleQuestions={survey.questions.length > 1}\n                />\n\n                <b>\n                    Question {index + 1}. {survey.questions[index].question}\n                </b>\n            </div>\n            {survey.questions.length > 1 && (\n                <LemonButton\n                    icon={<IconTrash />}\n                    data-attr={`delete-survey-question-${index}`}\n                    onClick={(e) => {\n                        const deleteQuestion = (): void => {\n                            e.stopPropagation()\n                            setSelectedPageIndex(index <= 0 ? 0 : index - 1)\n                            setSurveyValue(\n                                'questions',\n                                survey.questions.filter((_, i) => i !== index)\n                            )\n                        }\n\n                        if (hasBranchingLogic) {\n                            LemonDialog.open({\n                                title: 'Your survey has active branching logic',\n                                description: (\n                                    <p className=\"py-2\">\n                                        Deleting the question will remove your branching logic. Are you sure you want to\n                                        continue?\n                                    </p>\n                                ),\n                                primaryButton: {\n                                    children: 'Continue',\n                                    status: 'danger',\n                                    onClick: () => {\n                                        deleteBranchingLogic()\n                                        deleteQuestion()\n                                    },\n                                },\n                                secondaryButton: {\n                                    children: 'Cancel',\n                                },\n                            })\n                        } else {\n                            deleteQuestion()\n                        }\n                    }}\n                    tooltipPlacement=\"top-end\"\n                />\n            )}\n        </div>\n    )\n}\n\nexport function SurveyEditQuestionGroup({ index, question }: { index: number; question: any }): JSX.Element {\n    const { survey, descriptionContentType } = useValues(surveyLogic)\n    const { setDefaultForQuestionType, setSurveyValue, resetBranchingForQuestion } = useActions(surveyLogic)\n\n    const initialDescriptionContentType = descriptionContentType(index) ?? 'text'\n\n    const handleQuestionValueChange = (key: string, val: string): void => {\n        const updatedQuestion = survey.questions.map((question, idx) => {\n            if (index === idx) {\n                return {\n                    ...question,\n                    [key]: val,\n                }\n            }\n            return question\n        })\n        setSurveyValue('questions', updatedQuestion)\n    }\n\n    const handleTabChange = (key: string): void => {\n        handleQuestionValueChange('descriptionContentType', key)\n    }\n\n    return (\n        <Group name={`questions.${index}`} key={index}>\n            <div className=\"flex flex-col gap-2\">\n                <LemonField name=\"type\" label=\"Question type\" className=\"max-w-60\">\n                    <LemonSelect\n                        data-attr={`survey-question-type-${index}`}\n                        onSelect={(newType) => {\n                            const editingQuestion =\n                                defaultSurveyFieldValues[question.type].questions[0].question !== question.question\n                            const editingDescription =\n                                defaultSurveyFieldValues[question.type].questions[0].description !==\n                                question.description\n                            const editingThankYouMessage =\n                                defaultSurveyFieldValues[question.type].appearance.thankYouMessageHeader !==\n                                survey.appearance?.thankYouMessageHeader\n                            setDefaultForQuestionType(\n                                index,\n                                newType,\n                                editingQuestion,\n                                editingDescription,\n                                editingThankYouMessage\n                            )\n                            resetBranchingForQuestion(index)\n                        }}\n                        options={[\n                            {\n                                label: SurveyQuestionLabel[SurveyQuestionType.Open],\n                                value: SurveyQuestionType.Open,\n                                'data-attr': `survey-question-type-${index}-${SurveyQuestionType.Open}`,\n                            },\n                            {\n                                label: 'Link/Notification',\n                                value: SurveyQuestionType.Link,\n                                'data-attr': `survey-question-type-${index}-${SurveyQuestionType.Link}`,\n                            },\n                            {\n                                label: 'Rating',\n                                value: SurveyQuestionType.Rating,\n                                'data-attr': `survey-question-type-${index}-${SurveyQuestionType.Rating}`,\n                            },\n                            ...[\n                                {\n                                    label: 'Single choice select',\n                                    value: SurveyQuestionType.SingleChoice,\n                                    'data-attr': `survey-question-type-${index}-${SurveyQuestionType.SingleChoice}`,\n                                },\n                                {\n                                    label: 'Multiple choice select',\n                                    value: SurveyQuestionType.MultipleChoice,\n                                    'data-attr': `survey-question-type-${index}-${SurveyQuestionType.MultipleChoice}`,\n                                },\n                            ],\n                        ]}\n                    />\n                </LemonField>\n                <LemonField name=\"question\" label=\"Label\">\n                    <LemonInput data-attr={`survey-question-label-${index}`} value={question.question} />\n                </LemonField>\n                <LemonField name=\"description\" label=\"Description (optional)\">\n                    {({ value, onChange }) => (\n                        <HTMLEditor\n                            value={value}\n                            onChange={(val) => {\n                                onChange(val)\n                                handleQuestionValueChange('description', val)\n                            }}\n                            onTabChange={handleTabChange}\n                            activeTab={initialDescriptionContentType}\n                        />\n                    )}\n                </LemonField>\n                {survey.questions.length > 1 && (\n                    <LemonField name=\"optional\" className=\"my-2\">\n                        <LemonCheckbox label=\"Optional\" checked={!!question.optional} />\n                    </LemonField>\n                )}\n                {question.type === SurveyQuestionType.Link && (\n                    <LemonField name=\"link\" label=\"Link\" info=\"Only https:// or mailto: links are supported.\">\n                        <LemonInput value={question.link || ''} placeholder=\"https://posthog.com\" />\n                    </LemonField>\n                )}\n                {question.type === SurveyQuestionType.Rating && (\n                    <div className=\"flex flex-col gap-2\">\n                        <div className=\"flex flex-row gap-4\">\n                            <LemonField name=\"display\" label=\"Display type\" className=\"w-1/2\">\n                                <LemonSelect\n                                    options={[\n                                        { label: 'Number', value: 'number' },\n                                        { label: 'Emoji', value: 'emoji' },\n                                    ]}\n                                    onChange={(val) => {\n                                        const newQuestion = { ...survey.questions[index], display: val, scale: 5 }\n                                        const newQuestions = [...survey.questions]\n                                        newQuestions[index] = newQuestion\n                                        setSurveyValue('questions', newQuestions)\n                                        setSurveyValue(\n                                            'appearance.ratingButtonColor',\n                                            val === 'emoji' ? '#939393' : 'white'\n                                        )\n                                        resetBranchingForQuestion(index)\n                                    }}\n                                />\n                            </LemonField>\n                            <LemonField name=\"scale\" label=\"Scale\" className=\"w-1/2\">\n                                <LemonSelect\n                                    options={[\n                                        ...(question.display === 'emoji' ? [{ label: '1 - 3', value: 3 }] : []),\n                                        {\n                                            label: '1 - 5',\n                                            value: 5,\n                                        },\n                                        ...(question.display === 'number'\n                                            ? [\n                                                  { label: '1 - 7 (7 Point Likert Scale)', value: 7 },\n                                                  { label: '0 - 10 (Net Promoter Score)', value: 10 },\n                                              ]\n                                            : []),\n                                    ]}\n                                    onChange={(val) => {\n                                        const newQuestion = { ...survey.questions[index], scale: val }\n                                        const newQuestions = [...survey.questions]\n                                        newQuestions[index] = newQuestion\n                                        setSurveyValue('questions', newQuestions)\n                                        resetBranchingForQuestion(index)\n                                    }}\n                                />\n                            </LemonField>\n                        </div>\n                        <div className=\"flex flex-row gap-4\">\n                            <LemonField name=\"lowerBoundLabel\" label=\"Lower bound label\" className=\"w-1/2\">\n                                <LemonInput value={question.lowerBoundLabel || ''} />\n                            </LemonField>\n                            <LemonField name=\"upperBoundLabel\" label=\"Upper bound label\" className=\"w-1/2\">\n                                <LemonInput value={question.upperBoundLabel || ''} />\n                            </LemonField>\n                        </div>\n                    </div>\n                )}\n                {(question.type === SurveyQuestionType.SingleChoice ||\n                    question.type === SurveyQuestionType.MultipleChoice) && (\n                    <div className=\"flex flex-col gap-2\">\n                        <LemonField name=\"hasOpenChoice\">\n                            {({ value: hasOpenChoice, onChange: toggleHasOpenChoice }) => (\n                                <LemonField name=\"choices\" label=\"Choices\">\n                                    {({ value, onChange }) => (\n                                        <div className=\"flex flex-col gap-2\">\n                                            {(value || []).map((choice: string, index: number) => {\n                                                const isOpenChoice = hasOpenChoice && index === value?.length - 1\n                                                return (\n                                                    <div className=\"flex flex-row gap-2 relative\" key={index}>\n                                                        <LemonInput\n                                                            value={choice}\n                                                            fullWidth\n                                                            onChange={(val) => {\n                                                                const newChoices = [...value]\n                                                                newChoices[index] = val\n                                                                onChange(newChoices)\n                                                            }}\n                                                        />\n                                                        {isOpenChoice && (\n                                                            <span className=\"question-choice-open-ended-footer\">\n                                                                open-ended\n                                                            </span>\n                                                        )}\n                                                        <LemonButton\n                                                            icon={<IconTrash />}\n                                                            size=\"small\"\n                                                            noPadding\n                                                            onClick={() => {\n                                                                const newChoices = [...value]\n                                                                newChoices.splice(index, 1)\n                                                                onChange(newChoices)\n                                                                if (isOpenChoice) {\n                                                                    toggleHasOpenChoice(false)\n                                                                }\n                                                            }}\n                                                        />\n                                                    </div>\n                                                )\n                                            })}\n                                            <div className=\"w-fit flex flex-row flex-wrap gap-2\">\n                                                {((value || []).length < MAX_NUMBER_OF_OPTIONS ||\n                                                    survey.type != SurveyType.Popover) && (\n                                                    <>\n                                                        <LemonButton\n                                                            icon={<IconPlusSmall />}\n                                                            type=\"secondary\"\n                                                            fullWidth={false}\n                                                            onClick={() => {\n                                                                if (!value) {\n                                                                    onChange([''])\n                                                                } else if (hasOpenChoice) {\n                                                                    const newChoices = value.slice(0, -1)\n                                                                    newChoices.push('')\n                                                                    newChoices.push(value[value.length - 1])\n                                                                    onChange(newChoices)\n                                                                } else {\n                                                                    onChange([...value, ''])\n                                                                }\n                                                            }}\n                                                        >\n                                                            Add choice\n                                                        </LemonButton>\n                                                        {!hasOpenChoice && (\n                                                            <LemonButton\n                                                                icon={<IconPlusSmall />}\n                                                                type=\"secondary\"\n                                                                fullWidth={false}\n                                                                onClick={() => {\n                                                                    if (!value) {\n                                                                        onChange(['Other'])\n                                                                    } else {\n                                                                        onChange([...value, 'Other'])\n                                                                    }\n                                                                    toggleHasOpenChoice(true)\n                                                                }}\n                                                            >\n                                                                Add open-ended choice\n                                                            </LemonButton>\n                                                        )}\n                                                        <LemonField name=\"shuffleOptions\" className=\"mt-2\">\n                                                            {({\n                                                                value: shuffleOptions,\n                                                                onChange: toggleShuffleOptions,\n                                                            }) => (\n                                                                <LemonCheckbox\n                                                                    checked={!!shuffleOptions}\n                                                                    label=\"Shuffle options\"\n                                                                    onChange={(checked) =>\n                                                                        toggleShuffleOptions(checked)\n                                                                    }\n                                                                />\n                                                            )}\n                                                        </LemonField>\n                                                    </>\n                                                )}\n                                            </div>\n                                        </div>\n                                    )}\n                                </LemonField>\n                            )}\n                        </LemonField>\n                    </div>\n                )}\n                <LemonField name=\"buttonText\" label=\"Button text\">\n                    <LemonInput\n                        value={\n                            question.buttonText === undefined\n                                ? survey.appearance?.submitButtonText ?? 'Submit'\n                                : question.buttonText\n                        }\n                    />\n                </LemonField>\n                <QuestionBranchingInput questionIndex={index} question={question} />\n            </div>\n        </Group>\n    )\n}\n", "import './EditSurvey.scss'\n\nimport { LemonDialog, LemonSelect } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { truncate } from 'lib/utils'\n\nimport { MultipleSurveyQuestion, RatingSurveyQuestion, SurveyQuestionBranchingType, SurveyQuestionType } from '~/types'\n\nimport { surveyLogic } from './surveyLogic'\n\nexport function QuestionBranchingInput({\n    questionIndex,\n    question,\n}: {\n    questionIndex: number\n    question: RatingSurveyQuestion | MultipleSurveyQuestion\n}): JSX.Element {\n    const { survey, getBranchingDropdownValue } = useValues(surveyLogic)\n    const { setQuestionBranchingType, setSurveyValue } = useActions(surveyLogic)\n\n    const availableNextQuestions = survey.questions\n        .map((question, questionIndex) => ({\n            ...question,\n            questionIndex,\n        }))\n        .filter((_, idx) => questionIndex !== idx)\n    const branchingDropdownValue = getBranchingDropdownValue(questionIndex, question)\n    const hasResponseBasedBranching =\n        question.type === SurveyQuestionType.Rating || question.type === SurveyQuestionType.SingleChoice\n\n    return (\n        <>\n            <LemonField name=\"branching\" label=\"After this question, go to:\" className=\"max-w-80\">\n                <LemonSelect\n                    className=\"max-w-80 whitespace-nowrap\"\n                    value={branchingDropdownValue}\n                    data-attr={`survey-question-${questionIndex}-branching-select`}\n                    onSelect={(type) => {\n                        const handleSelect = (): void => {\n                            let specificQuestionIndex\n                            if (type.startsWith(SurveyQuestionBranchingType.SpecificQuestion)) {\n                                specificQuestionIndex = parseInt(type.split(':')[1])\n                                type = SurveyQuestionBranchingType.SpecificQuestion\n                            }\n                            setQuestionBranchingType(questionIndex, type, specificQuestionIndex)\n                        }\n\n                        if (survey.appearance && survey.appearance.shuffleQuestions) {\n                            LemonDialog.open({\n                                title: 'Your survey has question shuffling enabled',\n                                description: (\n                                    <p className=\"py-2\">\n                                        Adding branching logic will disable shuffling of questions. Are you sure you\n                                        want to continue?\n                                    </p>\n                                ),\n                                primaryButton: {\n                                    children: 'Continue',\n                                    status: 'danger',\n                                    onClick: () => {\n                                        setSurveyValue('appearance', { ...survey.appearance, shuffleQuestions: false })\n                                        handleSelect()\n                                    },\n                                },\n                                secondaryButton: {\n                                    children: 'Cancel',\n                                },\n                            })\n                        } else {\n                            handleSelect()\n                        }\n                    }}\n                    options={[\n                        ...(questionIndex < survey.questions.length - 1\n                            ? [\n                                  {\n                                      label: 'Next question',\n                                      value: SurveyQuestionBranchingType.NextQuestion,\n                                  },\n                              ]\n                            : []),\n                        {\n                            label: survey.appearance?.displayThankYouMessage ? 'Confirmation message' : 'End',\n                            value: SurveyQuestionBranchingType.End,\n                        },\n                        ...(hasResponseBasedBranching\n                            ? [\n                                  {\n                                      label: 'Specific question based on answer',\n                                      value: SurveyQuestionBranchingType.ResponseBased,\n                                  },\n                              ]\n                            : []),\n                        ...availableNextQuestions.map((question) => ({\n                            label: truncate(`${question.questionIndex + 1}. ${question.question}`, 40),\n                            value: `${SurveyQuestionBranchingType.SpecificQuestion}:${question.questionIndex}`,\n                        })),\n                    ]}\n                />\n            </LemonField>\n            {branchingDropdownValue === SurveyQuestionBranchingType.ResponseBased && (\n                <QuestionResponseBasedBranchingInput question={question} questionIndex={questionIndex} />\n            )}\n        </>\n    )\n}\n\nfunction QuestionResponseBasedBranchingInput({\n    questionIndex,\n    question,\n}: {\n    questionIndex: number\n    question: RatingSurveyQuestion | MultipleSurveyQuestion\n}): JSX.Element {\n    const { survey, getResponseBasedBranchingDropdownValue } = useValues(surveyLogic)\n    const { setResponseBasedBranchingForQuestion } = useActions(surveyLogic)\n\n    const availableNextQuestions = survey.questions\n        .map((question, questionIndex) => ({\n            ...question,\n            questionIndex,\n        }))\n        .filter((_, idx) => questionIndex !== idx)\n\n    let config: { value: string | number; label: string }[] = []\n\n    if (question.type === SurveyQuestionType.Rating && question.scale === 3) {\n        config = [\n            { value: 'negative', label: '1 (Negative)' },\n            { value: 'neutral', label: '2 (Neutral)' },\n            { value: 'positive', label: '3 (Positive)' },\n        ]\n    } else if (question.type === SurveyQuestionType.Rating && question.scale === 5) {\n        config = [\n            { value: 'negative', label: '1 to 2 (Negative)' },\n            { value: 'neutral', label: '3 (Neutral)' },\n            { value: 'positive', label: '4 to 5 (Positive)' },\n        ]\n    } else if (question.type === SurveyQuestionType.Rating && question.scale === 7) {\n        config = [\n            { value: 'negative', label: '1 to 3 (Negative)' },\n            { value: 'neutral', label: '4 (Neutral)' },\n            { value: 'positive', label: '5 to 7 (Positive)' },\n        ]\n    } else if (question.type === SurveyQuestionType.Rating && question.scale === 10) {\n        config = [\n            // NPS categories\n            { value: 'detractors', label: '0 to 6 (Detractors)' },\n            { value: 'passives', label: '7 to 8 (Passives)' },\n            { value: 'promoters', label: '9 to 10 (Promoters)' },\n        ]\n    } else if (question.type === SurveyQuestionType.SingleChoice) {\n        config = question.choices.map((choice, choiceIndex) => ({\n            value: choiceIndex,\n            label: `Option ${choiceIndex + 1} (\"${truncate(choice, 15)}\")`,\n        }))\n    }\n\n    return (\n        <div className=\"mt-2 space-y-2\">\n            {config.map(({ value, label }, i) => (\n                <div key={i} className=\"flex\">\n                    <div className=\"w-2/3 flex items-center\">\n                        <div>\n                            If the answer is<span className=\"font-bold\">&nbsp;{label}</span>, go to:\n                        </div>\n                    </div>\n                    <div className=\"w-1/3 flex justify-end\">\n                        <LemonSelect\n                            className=\"w-full whitespace-nowrap\"\n                            value={getResponseBasedBranchingDropdownValue(questionIndex, question, value)}\n                            data-attr={`survey-question-${questionIndex}-branching-response_based-select-${i}`}\n                            onSelect={(nextStep) => {\n                                let specificQuestionIndex\n                                if (nextStep.startsWith(SurveyQuestionBranchingType.SpecificQuestion)) {\n                                    specificQuestionIndex = parseInt(nextStep.split(':')[1])\n                                    nextStep = SurveyQuestionBranchingType.SpecificQuestion\n                                }\n                                setResponseBasedBranchingForQuestion(\n                                    questionIndex,\n                                    value,\n                                    nextStep,\n                                    specificQuestionIndex\n                                )\n                            }}\n                            options={[\n                                ...(questionIndex < survey.questions.length - 1\n                                    ? [\n                                          {\n                                              label: 'Next question',\n                                              value: SurveyQuestionBranchingType.NextQuestion,\n                                          },\n                                      ]\n                                    : []),\n                                {\n                                    label: 'Confirmation message',\n                                    value: SurveyQuestionBranchingType.End,\n                                },\n                                ...availableNextQuestions.map((question) => ({\n                                    label: truncate(`${question.questionIndex + 1}. ${question.question}`, 28),\n                                    value: `${SurveyQuestionBranchingType.SpecificQuestion}:${question.questionIndex}`,\n                                })),\n                            ]}\n                        />\n                    </div>\n                </div>\n            ))}\n        </div>\n    )\n}\n", "import { DraggableSyntheticListeners } from '@dnd-kit/core'\nimport { SortableDragIcon } from 'lib/lemon-ui/icons'\n\ninterface SurveyDragHandleProps {\n    listeners: DraggableSyntheticListeners | undefined\n    isDraftSurvey: boolean\n    hasMultipleQuestions: boolean\n}\n\nconst DragHandle = ({ listeners }: { listeners: DraggableSyntheticListeners | undefined }): JSX.Element => (\n    <span className=\"SurveyQuestionDragHandle\" {...listeners} data-testid=\"survey-question-drag-handle\">\n        <SortableDragIcon />\n    </span>\n)\n\nexport function SurveyDragHandle({\n    listeners,\n    isDraftSurvey,\n    hasMultipleQuestions,\n}: SurveyDragHandleProps): JSX.Element | null {\n    if (!isDraftSurvey || !hasMultipleQuestions) {\n        return null\n    }\n\n    return <DragHandle listeners={listeners} />\n}\n", "import { LemonSelect } from '@posthog/lemon-ui'\nimport { getNextSurveyStep } from 'posthog-js/dist/surveys-preview'\n\nimport { Survey, SurveyQuestionBranchingType, SurveyType } from '~/types'\n\nimport { NewSurvey } from './constants'\nimport { SurveyAPIEditor } from './SurveyAPIEditor'\nimport { SurveyAppearancePreview } from './SurveyAppearancePreview'\n\ninterface SurveyFormAppearanceProps {\n    previewPageIndex: number\n    survey: NewSurvey | Survey\n    handleSetSelectedPageIndex: (activePreview: number) => void\n    isEditingSurvey?: boolean\n}\n\nexport function SurveyFormAppearance({\n    previewPageIndex,\n    survey,\n    handleSetSelectedPageIndex,\n}: SurveyFormAppearanceProps): JSX.Element {\n    return survey.type !== SurveyType.API ? (\n        <div className=\"survey-view max-w-72\">\n            <SurveyAppearancePreview\n                survey={survey as Survey}\n                previewPageIndex={previewPageIndex}\n                onPreviewSubmit={(response) => {\n                    const nextStep = getNextSurveyStep(survey, previewPageIndex, response)\n                    handleSetSelectedPageIndex(\n                        nextStep === SurveyQuestionBranchingType.End ? survey.questions.length : nextStep\n                    )\n                }}\n            />\n            <LemonSelect\n                onChange={(pageIndex) => handleSetSelectedPageIndex(pageIndex)}\n                className=\"mt-4 whitespace-nowrap\"\n                fullWidth\n                value={previewPageIndex}\n                options={[\n                    ...survey.questions.map((question, index) => ({\n                        label: `${index + 1}. ${question.question ?? ''}`,\n                        value: index,\n                    })),\n                    ...(survey.appearance?.displayThankYouMessage\n                        ? [\n                              {\n                                  label: `${survey.questions.length + 1}. Confirmation message`,\n                                  value: survey.questions.length,\n                              },\n                          ]\n                        : []),\n                ]}\n            />\n        </div>\n    ) : (\n        <div className=\"flex flex-col\">\n            <h4 className=\"text-center\">API survey response</h4>\n            <SurveyAPIEditor survey={survey} />\n        </div>\n    )\n}\n", "import './SurveyView.scss'\n\nimport { IconGraph } from '@posthog/icons'\nimport { LemonButton, LemonDialog, LemonDivider, Link, Spinner } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { ActivityLog } from 'lib/components/ActivityLog/ActivityLog'\nimport { CompareFilter } from 'lib/components/CompareFilter/CompareFilter'\nimport { DateFilter } from 'lib/components/DateFilter/DateFilter'\nimport { EditableField } from 'lib/components/EditableField/EditableField'\nimport { IntervalFilterStandalone } from 'lib/components/IntervalFilter'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { PropertyFilters } from 'lib/components/PropertyFilters/PropertyFilters'\nimport { TZLabel } from 'lib/components/TZLabel'\nimport { dayjs } from 'lib/dayjs'\nimport { useFeatureFlag } from 'lib/hooks/useFeatureFlag'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonSkeleton } from 'lib/lemon-ui/LemonSkeleton'\nimport { LemonTabs } from 'lib/lemon-ui/LemonTabs'\nimport { capitalizeFirstLetter, pluralize } from 'lib/utils'\nimport { useEffect, useState } from 'react'\nimport { LinkedHogFunctions } from 'scenes/pipeline/hogfunctions/list/LinkedHogFunctions'\nimport { SurveyAnswerFilters } from 'scenes/surveys/SurveyAnswerFilters'\nimport { getSurveyResponseKey } from 'scenes/surveys/utils'\n\nimport { Query } from '~/queries/Query/Query'\nimport { NodeKind } from '~/queries/schema/schema-general'\nimport {\n    ActivityScope,\n    PropertyFilterType,\n    PropertyOperator,\n    Survey,\n    SurveyQuestionType,\n    SurveySchedule as SurveyScheduleEnum,\n    SurveyType,\n} from '~/types'\n\nimport { SURVEY_EVENT_NAME, SurveyQuestionLabel } from './constants'\nimport { SurveyDisplaySummary } from './Survey'\nimport { SurveyAPIEditor } from './SurveyAPIEditor'\nimport { SurveyFormAppearance } from './SurveyFormAppearance'\nimport { surveyLogic } from './surveyLogic'\nimport { surveysLogic } from './surveysLogic'\nimport {\n    MultipleChoiceQuestionBarChart,\n    NPSSurveyResultsBarChart,\n    OpenTextViz,\n    RatingQuestionBarChart,\n    SingleChoiceQuestionPieChart,\n    Summary,\n} from './surveyViewViz'\n\nfunction SurveyResultsFilters(): JSX.Element {\n    const { propertyFilters } = useValues(surveyLogic)\n    const { setPropertyFilters } = useActions(surveyLogic)\n\n    return (\n        <div className=\"space-y-2\">\n            <h3 className=\"text-base\">Filter survey results</h3>\n            <SurveyAnswerFilters />\n            <div className=\"w-fit\">\n                <PropertyFilters\n                    propertyFilters={propertyFilters}\n                    onChange={setPropertyFilters}\n                    pageKey=\"survey-results\"\n                    buttonText=\"More filters\"\n                />\n            </div>\n        </div>\n    )\n}\n\nfunction SurveySchedule(): JSX.Element {\n    const { survey } = useValues(surveyLogic)\n    if (survey.schedule === SurveyScheduleEnum.Recurring && survey.iteration_count && survey.iteration_frequency_days) {\n        return (\n            <>\n                <span className=\"card-secondary\">Schedule</span>\n                <span>\n                    Repeats every {survey.iteration_frequency_days}{' '}\n                    {pluralize(survey.iteration_frequency_days, 'day', 'days', false)}, {survey.iteration_count}{' '}\n                    {pluralize(survey.iteration_count, 'time', 'times', false)}\n                </span>\n            </>\n        )\n    }\n\n    if (survey.schedule === SurveyScheduleEnum.Always) {\n        return (\n            <>\n                <span className=\"card-secondary\">Schedule</span>\n                <span>Always</span>\n            </>\n        )\n    }\n\n    // Default case: survey is scheduled to run once\n    return (\n        <>\n            <span className=\"card-secondary\">Schedule</span>\n            <span>Once</span>\n        </>\n    )\n}\nexport function SurveyView({ id }: { id: string }): JSX.Element {\n    const { survey, surveyLoading, selectedPageIndex, targetingFlagFilters } = useValues(surveyLogic)\n    const {\n        editingSurvey,\n        updateSurvey,\n        launchSurvey,\n        stopSurvey,\n        archiveSurvey,\n        resumeSurvey,\n        setSelectedPageIndex,\n        duplicateSurvey,\n    } = useActions(surveyLogic)\n    const { surveyUsesLimit, surveyUsesAdaptiveLimit } = useValues(surveyLogic)\n    const { deleteSurvey } = useActions(surveysLogic)\n\n    const [tabKey, setTabKey] = useState(survey.start_date ? 'results' : 'overview')\n    const showLinkedHogFunctions = useFeatureFlag('HOG_FUNCTIONS_LINKED')\n\n    useEffect(() => {\n        if (survey.start_date) {\n            setTabKey('results')\n        } else {\n            setTabKey('overview')\n        }\n    }, [survey.start_date])\n\n    return (\n        <div>\n            {surveyLoading ? (\n                <LemonSkeleton />\n            ) : (\n                <>\n                    <PageHeader\n                        buttons={\n                            <div className=\"flex items-center gap-2\">\n                                <More\n                                    overlay={\n                                        <>\n                                            <>\n                                                <LemonButton\n                                                    data-attr=\"edit-survey\"\n                                                    fullWidth\n                                                    onClick={() => editingSurvey(true)}\n                                                >\n                                                    Edit\n                                                </LemonButton>\n                                                <LemonButton\n                                                    data-attr=\"duplicate-survey\"\n                                                    fullWidth\n                                                    onClick={duplicateSurvey}\n                                                >\n                                                    Duplicate\n                                                </LemonButton>\n                                                <LemonDivider />\n                                            </>\n                                            {survey.end_date && !survey.archived && (\n                                                <LemonButton\n                                                    data-attr=\"archive-survey\"\n                                                    onClick={() => {\n                                                        LemonDialog.open({\n                                                            title: 'Archive this survey?',\n                                                            content: (\n                                                                <div className=\"text-sm text-secondary\">\n                                                                    This action will remove the survey from your active\n                                                                    surveys list. It can be restored at any time.\n                                                                </div>\n                                                            ),\n                                                            primaryButton: {\n                                                                children: 'Archive',\n                                                                type: 'primary',\n                                                                onClick: () => archiveSurvey(),\n                                                                size: 'small',\n                                                            },\n                                                            secondaryButton: {\n                                                                children: 'Cancel',\n                                                                type: 'tertiary',\n                                                                size: 'small',\n                                                            },\n                                                        })\n                                                    }}\n                                                    fullWidth\n                                                >\n                                                    Archive\n                                                </LemonButton>\n                                            )}\n                                            <LemonButton\n                                                status=\"danger\"\n                                                data-attr=\"delete-survey\"\n                                                fullWidth\n                                                onClick={() => {\n                                                    LemonDialog.open({\n                                                        title: 'Delete this survey?',\n                                                        content: (\n                                                            <div className=\"text-sm text-secondary\">\n                                                                This action cannot be undone. All survey data will be\n                                                                permanently removed.\n                                                            </div>\n                                                        ),\n                                                        primaryButton: {\n                                                            children: 'Delete',\n                                                            type: 'primary',\n                                                            onClick: () => deleteSurvey(id),\n                                                            size: 'small',\n                                                        },\n                                                        secondaryButton: {\n                                                            children: 'Cancel',\n                                                            type: 'tertiary',\n                                                            size: 'small',\n                                                        },\n                                                    })\n                                                }}\n                                            >\n                                                Delete survey\n                                            </LemonButton>\n                                        </>\n                                    }\n                                />\n                                <LemonDivider vertical />\n                                {!survey.start_date ? (\n                                    <LemonButton\n                                        type=\"primary\"\n                                        data-attr=\"launch-survey\"\n                                        onClick={() => {\n                                            LemonDialog.open({\n                                                title: 'Launch this survey?',\n                                                content: (\n                                                    <div className=\"text-sm text-secondary\">\n                                                        The survey will immediately start displaying to users matching\n                                                        the display conditions.\n                                                    </div>\n                                                ),\n                                                primaryButton: {\n                                                    children: 'Launch',\n                                                    type: 'primary',\n                                                    onClick: () => launchSurvey(),\n                                                    size: 'small',\n                                                },\n                                                secondaryButton: {\n                                                    children: 'Cancel',\n                                                    type: 'tertiary',\n                                                    size: 'small',\n                                                },\n                                            })\n                                        }}\n                                    >\n                                        Launch\n                                    </LemonButton>\n                                ) : survey.end_date && !survey.archived ? (\n                                    <LemonButton\n                                        type=\"secondary\"\n                                        onClick={() => {\n                                            LemonDialog.open({\n                                                title: 'Resume this survey?',\n                                                content: (\n                                                    <div className=\"text-sm text-secondary\">\n                                                        Once resumed, the survey will be visible to your users again.\n                                                    </div>\n                                                ),\n                                                primaryButton: {\n                                                    children: 'Resume',\n                                                    type: 'primary',\n                                                    onClick: () => resumeSurvey(),\n                                                    size: 'small',\n                                                },\n                                                secondaryButton: {\n                                                    children: 'Cancel',\n                                                    type: 'tertiary',\n                                                    size: 'small',\n                                                },\n                                            })\n                                        }}\n                                    >\n                                        Resume\n                                    </LemonButton>\n                                ) : (\n                                    !survey.archived && (\n                                        <LemonButton\n                                            data-attr=\"stop-survey\"\n                                            type=\"secondary\"\n                                            status=\"danger\"\n                                            onClick={() => {\n                                                LemonDialog.open({\n                                                    title: 'Stop this survey?',\n                                                    content: (\n                                                        <div className=\"text-sm text-secondary\">\n                                                            The survey will no longer be displayed to users.\n                                                        </div>\n                                                    ),\n                                                    primaryButton: {\n                                                        children: 'Stop',\n                                                        type: 'primary',\n                                                        onClick: () => stopSurvey(),\n                                                        size: 'small',\n                                                    },\n                                                    secondaryButton: {\n                                                        children: 'Cancel',\n                                                        type: 'tertiary',\n                                                        size: 'small',\n                                                    },\n                                                })\n                                            }}\n                                        >\n                                            Stop\n                                        </LemonButton>\n                                    )\n                                )}\n                            </div>\n                        }\n                        caption={\n                            <>\n                                {survey && !!survey.description && (\n                                    <EditableField\n                                        multiline\n                                        name=\"description\"\n                                        markdown\n                                        value={survey.description || ''}\n                                        placeholder=\"Description (optional)\"\n                                        onSave={(value) => updateSurvey({ id: id, description: value })}\n                                        saveOnBlur={true}\n                                        compactButtons\n                                    />\n                                )}\n                            </>\n                        }\n                    />\n                    <LemonTabs\n                        activeKey={tabKey}\n                        onChange={(key) => setTabKey(key)}\n                        tabs={[\n                            survey.start_date\n                                ? {\n                                      content: (\n                                          <div>\n                                              <SurveyResult />\n                                          </div>\n                                      ),\n                                      key: 'results',\n                                      label: 'Results',\n                                  }\n                                : null,\n                            {\n                                content: (\n                                    <div className=\"flex flex-row\">\n                                        <div className=\"flex flex-col w-full\">\n                                            <span className=\"mt-4 card-secondary\">Display mode</span>\n                                            <span>\n                                                {survey.type === SurveyType.API\n                                                    ? survey.type.toUpperCase()\n                                                    : capitalizeFirstLetter(survey.type)}\n                                            </span>\n                                            {survey.questions[0].question && (\n                                                <>\n                                                    <span className=\"mt-4 card-secondary\">Type</span>\n                                                    <span>{SurveyQuestionLabel[survey.questions[0].type]}</span>\n                                                    <span className=\"mt-4 card-secondary\">\n                                                        {pluralize(\n                                                            survey.questions.length,\n                                                            'Question',\n                                                            'Questions',\n                                                            false\n                                                        )}\n                                                    </span>\n                                                    {survey.questions.map((q, idx) => (\n                                                        <li key={idx}>{q.question}</li>\n                                                    ))}\n                                                </>\n                                            )}\n                                            {survey.questions[0].type === SurveyQuestionType.Link && (\n                                                <>\n                                                    <span className=\"mt-4 card-secondary\">Link url</span>\n                                                    <span>{survey.questions[0].link}</span>\n                                                </>\n                                            )}\n                                            <div className=\"flex flex-row gap-8\">\n                                                {survey.start_date && (\n                                                    <div className=\"flex flex-col\">\n                                                        <span className=\"mt-4 card-secondary\">Start date</span>\n                                                        <TZLabel time={survey.start_date} />\n                                                    </div>\n                                                )}\n                                                {survey.end_date && (\n                                                    <div className=\"flex flex-col\">\n                                                        <span className=\"mt-4 card-secondary\">End date</span>\n                                                        <TZLabel time={survey.end_date} />\n                                                    </div>\n                                                )}\n                                            </div>\n                                            <div className=\"flex flex-row gap-8\">\n                                                <div className=\"flex flex-col mt-4\">\n                                                    <SurveySchedule />\n                                                </div>\n                                            </div>\n                                            {surveyUsesLimit && (\n                                                <>\n                                                    <span className=\"mt-4 card-secondary\">Completion conditions</span>\n                                                    <span>\n                                                        The survey will be stopped once <b>{survey.responses_limit}</b>{' '}\n                                                        responses are received.\n                                                    </span>\n                                                </>\n                                            )}\n                                            {surveyUsesAdaptiveLimit && (\n                                                <>\n                                                    <span className=\"mt-4 card-secondary\">Completion conditions</span>\n                                                    <span>\n                                                        Survey response collection is limited to receive{' '}\n                                                        <b>{survey.response_sampling_limit}</b> responses every{' '}\n                                                        {survey.response_sampling_interval}{' '}\n                                                        {survey.response_sampling_interval_type}(s).\n                                                    </span>\n                                                </>\n                                            )}\n                                            <LemonDivider />\n                                            <SurveyDisplaySummary\n                                                id={id}\n                                                survey={survey}\n                                                targetingFlagFilters={targetingFlagFilters}\n                                            />\n                                        </div>\n                                        <div className=\"flex flex-col items-center w-full\">\n                                            {survey.type === SurveyType.API && (\n                                                <div className=\"p-4 border rounded\">\n                                                    <div className=\"flex flex-row items-center w-full gap-1\">\n                                                        Learn how to set up API surveys{' '}\n                                                        <Link\n                                                            data-attr=\"survey-doc-link\"\n                                                            target=\"_blank\"\n                                                            to=\"https://posthog.com/docs/surveys/implementing-custom-surveys\"\n                                                            targetBlankIcon\n                                                        >\n                                                            in the docs\n                                                        </Link>\n                                                    </div>\n                                                </div>\n                                            )}\n                                            {survey.type !== SurveyType.API ? (\n                                                <div className=\"mt-6 max-w-72\">\n                                                    <SurveyFormAppearance\n                                                        previewPageIndex={selectedPageIndex || 0}\n                                                        survey={survey}\n                                                        handleSetSelectedPageIndex={(preview) =>\n                                                            setSelectedPageIndex(preview)\n                                                        }\n                                                    />\n                                                </div>\n                                            ) : (\n                                                <div className=\"mt-2\">\n                                                    <SurveyAPIEditor survey={survey} />\n                                                </div>\n                                            )}\n                                        </div>\n                                    </div>\n                                ),\n                                key: 'overview',\n                                label: 'Overview',\n                            },\n                            showLinkedHogFunctions\n                                ? {\n                                      key: 'notifications',\n                                      label: 'Notifications',\n                                      content: (\n                                          <div>\n                                              <p>Get notified whenever a survey result is submitted</p>\n                                              <LinkedHogFunctions\n                                                  logicKey=\"survey\"\n                                                  type=\"destination\"\n                                                  subTemplateId=\"survey-response\"\n                                                  filters={{\n                                                      events: [\n                                                          {\n                                                              id: 'survey sent',\n                                                              type: 'events',\n                                                              order: 0,\n                                                              properties: [\n                                                                  {\n                                                                      key: '$survey_id',\n                                                                      type: PropertyFilterType.Event,\n                                                                      value: id,\n                                                                      operator: PropertyOperator.Exact,\n                                                                  },\n                                                              ],\n                                                          },\n                                                      ],\n                                                  }}\n                                              />\n                                          </div>\n                                      ),\n                                  }\n                                : null,\n                            {\n                                label: 'History',\n                                key: 'History',\n                                content: <ActivityLog scope={ActivityScope.SURVEY} id={survey.id} />,\n                            },\n                        ]}\n                    />\n                </>\n            )}\n        </div>\n    )\n}\n\nexport function SurveyResult({ disableEventsTable }: { disableEventsTable?: boolean }): JSX.Element {\n    const {\n        survey,\n        dataTableQuery,\n        surveyLoading,\n        surveyUserStats,\n        surveyUserStatsLoading,\n        surveyRatingResults,\n        surveyRatingResultsReady,\n        surveyRecurringNPSResults,\n        surveyRecurringNPSResultsReady,\n        surveySingleChoiceResults,\n        surveySingleChoiceResultsReady,\n        surveyMultipleChoiceResults,\n        surveyMultipleChoiceResultsReady,\n        surveyOpenTextResults,\n        surveyOpenTextResultsReady,\n        surveyNPSScore,\n        surveyAsInsightURL,\n        isAnyResultsLoading,\n    } = useValues(surveyLogic)\n\n    return (\n        <div className=\"space-y-4\">\n            <SurveyResultsFilters />\n            {isAnyResultsLoading && (\n                <div className=\"flex gap-1\">\n                    <span className=\"text-sm text-secondary\">Loading results...</span>\n                    <Spinner />\n                </div>\n            )}\n            <Summary surveyUserStatsLoading={surveyUserStatsLoading} surveyUserStats={surveyUserStats} />\n            {survey.questions.map((question, i) => {\n                if (question.type === SurveyQuestionType.Rating) {\n                    return (\n                        <div key={`survey-q-${i}`} className=\"space-y-2\">\n                            {question.scale === 10 && (\n                                <SurveyNPSResults\n                                    survey={survey as Survey}\n                                    surveyNPSScore={surveyNPSScore}\n                                    questionIndex={i}\n                                />\n                            )}\n\n                            <RatingQuestionBarChart\n                                surveyRatingResults={surveyRatingResults}\n                                surveyRatingResultsReady={surveyRatingResultsReady}\n                                questionIndex={i}\n                            />\n\n                            {survey.iteration_count &&\n                                survey.iteration_count > 0 &&\n                                survey.current_iteration &&\n                                survey.current_iteration > 1 &&\n                                survey.iteration_start_dates &&\n                                survey.iteration_start_dates.length > 0 && (\n                                    <NPSSurveyResultsBarChart\n                                        key={`nps-survey-results-q-${i}`}\n                                        surveyRecurringNPSResults={surveyRecurringNPSResults}\n                                        surveyRecurringNPSResultsReady={surveyRecurringNPSResultsReady}\n                                        iterationStartDates={survey.iteration_start_dates}\n                                        currentIteration={survey.current_iteration}\n                                        questionIndex={i}\n                                    />\n                                )}\n                        </div>\n                    )\n                } else if (question.type === SurveyQuestionType.SingleChoice) {\n                    return (\n                        <SingleChoiceQuestionPieChart\n                            key={`survey-q-${i}`}\n                            surveySingleChoiceResults={surveySingleChoiceResults}\n                            surveySingleChoiceResultsReady={surveySingleChoiceResultsReady}\n                            questionIndex={i}\n                        />\n                    )\n                } else if (question.type === SurveyQuestionType.MultipleChoice) {\n                    return (\n                        <MultipleChoiceQuestionBarChart\n                            key={`survey-q-${i}`}\n                            surveyMultipleChoiceResults={surveyMultipleChoiceResults}\n                            surveyMultipleChoiceResultsReady={surveyMultipleChoiceResultsReady}\n                            questionIndex={i}\n                        />\n                    )\n                } else if (question.type === SurveyQuestionType.Open) {\n                    return (\n                        <OpenTextViz\n                            key={`survey-q-${i}`}\n                            surveyOpenTextResults={surveyOpenTextResults}\n                            surveyOpenTextResultsReady={surveyOpenTextResultsReady}\n                            questionIndex={i}\n                        />\n                    )\n                }\n            })}\n            <div className=\"max-w-40\">\n                <LemonButton\n                    type=\"primary\"\n                    data-attr=\"survey-results-explore\"\n                    icon={<IconGraph />}\n                    to={surveyAsInsightURL}\n                >\n                    Explore results\n                </LemonButton>\n            </div>\n            {!disableEventsTable && (surveyLoading ? <LemonSkeleton /> : <Query query={dataTableQuery} />)}\n        </div>\n    )\n}\n\nfunction SurveyNPSResults({\n    survey,\n    surveyNPSScore,\n    questionIndex,\n}: {\n    survey: Survey\n    surveyNPSScore?: string\n    questionIndex: number\n}): JSX.Element {\n    const { dateRange, interval, compareFilter, defaultInterval } = useValues(surveyLogic)\n    const { setDateRange, setInterval, setCompareFilter } = useActions(surveyLogic)\n\n    return (\n        <div>\n            <div className=\"text-4xl font-bold\">{surveyNPSScore}</div>\n            <div className=\"mb-2 font-semibold text-secondary\">Latest NPS Score</div>\n            <div className=\"space-y-2 bg-surface-primary p-2 rounded\">\n                <div className=\"flex items-center justify-between gap-2\">\n                    <h4 className=\"text-lg font-semibold\">NPS Trend</h4>\n                    <div className=\"flex items-center gap-2\">\n                        <DateFilter\n                            dateFrom={dateRange?.date_from ?? undefined}\n                            dateTo={dateRange?.date_to ?? undefined}\n                            onChange={(fromDate, toDate) =>\n                                setDateRange({\n                                    date_from: fromDate,\n                                    date_to: toDate,\n                                })\n                            }\n                        />\n                        <span>grouped by</span>\n                        <IntervalFilterStandalone\n                            interval={interval ?? defaultInterval}\n                            onIntervalChange={setInterval}\n                            options={[\n                                { value: 'hour', label: 'Hour' },\n                                { value: 'day', label: 'Day' },\n                                { value: 'week', label: 'Week' },\n                                { value: 'month', label: 'Month' },\n                            ]}\n                        />\n                        <CompareFilter\n                            compareFilter={compareFilter}\n                            updateCompareFilter={(compareFilter) => setCompareFilter(compareFilter)}\n                        />\n                    </div>\n                </div>\n                <Query\n                    query={{\n                        kind: NodeKind.InsightVizNode,\n                        source: {\n                            kind: NodeKind.TrendsQuery,\n                            interval: interval ?? defaultInterval,\n                            compareFilter: compareFilter,\n                            dateRange: dateRange ?? {\n                                date_from: dayjs(survey.created_at).format('YYYY-MM-DD'),\n                                date_to: survey.end_date\n                                    ? dayjs(survey.end_date).format('YYYY-MM-DD')\n                                    : dayjs().add(1, 'day').format('YYYY-MM-DD'),\n                            },\n                            series: [\n                                {\n                                    event: SURVEY_EVENT_NAME,\n                                    kind: NodeKind.EventsNode,\n                                    custom_name: 'Promoters',\n                                    properties: [\n                                        {\n                                            type: PropertyFilterType.Event,\n                                            key: getSurveyResponseKey(questionIndex),\n                                            operator: PropertyOperator.Exact,\n                                            value: ['9', '10'],\n                                        },\n                                    ],\n                                },\n                                {\n                                    event: SURVEY_EVENT_NAME,\n                                    kind: NodeKind.EventsNode,\n                                    custom_name: 'Passives',\n                                    properties: [\n                                        {\n                                            type: PropertyFilterType.Event,\n                                            key: getSurveyResponseKey(questionIndex),\n                                            operator: PropertyOperator.Exact,\n                                            value: ['7', '8'],\n                                        },\n                                    ],\n                                },\n                                {\n                                    event: SURVEY_EVENT_NAME,\n                                    kind: NodeKind.EventsNode,\n                                    custom_name: 'Detractors',\n                                    properties: [\n                                        {\n                                            type: PropertyFilterType.Event,\n                                            key: getSurveyResponseKey(questionIndex),\n                                            operator: PropertyOperator.Exact,\n                                            value: ['0', '1', '2', '3', '4', '5', '6'],\n                                        },\n                                    ],\n                                },\n                            ],\n                            properties: [\n                                {\n                                    type: PropertyFilterType.Event,\n                                    key: '$survey_id',\n                                    operator: PropertyOperator.Exact,\n                                    value: survey.id,\n                                },\n                            ],\n                            trendsFilter: {\n                                formula: '(A / (A+B+C) * 100) - (C / (A+B+C) * 100)',\n                                display: 'ActionsBar',\n                            },\n                        },\n                    }}\n                />\n            </div>\n        </div>\n    )\n}\n", "import { LemonSelect, LemonSelectOptions } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { PropertyValue } from 'lib/components/PropertyFilters/components/PropertyValue'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { getPropertyKey } from 'lib/taxonomy'\nimport { allOperatorsMapping } from 'lib/utils'\nimport { SurveyQuestionLabel } from 'scenes/surveys/constants'\nimport { getSurveyResponseKey } from 'scenes/surveys/utils'\n\nimport { EventPropertyFilter, PropertyFilterType, PropertyOperator, Survey, SurveyQuestionType } from '~/types'\n\nimport { surveyLogic } from './surveyLogic'\n\ntype OperatorOption = { label: string; value: PropertyOperator }\n\nconst OPERATOR_OPTIONS: Record<SurveyQuestionType, OperatorOption[]> = {\n    [SurveyQuestionType.Open]: [\n        { label: allOperatorsMapping[PropertyOperator.IContains], value: PropertyOperator.IContains },\n        { label: allOperatorsMapping[PropertyOperator.NotIContains], value: PropertyOperator.NotIContains },\n        { label: allOperatorsMapping[PropertyOperator.Regex], value: PropertyOperator.Regex },\n        { label: allOperatorsMapping[PropertyOperator.NotRegex], value: PropertyOperator.NotRegex },\n        { label: allOperatorsMapping[PropertyOperator.Exact], value: PropertyOperator.Exact },\n    ],\n    [SurveyQuestionType.Rating]: [\n        { label: allOperatorsMapping[PropertyOperator.Exact], value: PropertyOperator.Exact },\n        { label: allOperatorsMapping[PropertyOperator.IsNot], value: PropertyOperator.IsNot },\n        { label: allOperatorsMapping[PropertyOperator.Regex], value: PropertyOperator.Regex },\n        { label: allOperatorsMapping[PropertyOperator.NotRegex], value: PropertyOperator.NotRegex },\n    ],\n    [SurveyQuestionType.SingleChoice]: [\n        { label: allOperatorsMapping[PropertyOperator.IContains], value: PropertyOperator.IContains },\n        { label: allOperatorsMapping[PropertyOperator.NotIContains], value: PropertyOperator.NotIContains },\n        { label: allOperatorsMapping[PropertyOperator.Regex], value: PropertyOperator.Regex },\n        { label: allOperatorsMapping[PropertyOperator.NotRegex], value: PropertyOperator.NotRegex },\n        { label: allOperatorsMapping[PropertyOperator.Exact], value: PropertyOperator.Exact },\n    ],\n    [SurveyQuestionType.MultipleChoice]: [\n        { label: allOperatorsMapping[PropertyOperator.IContains], value: PropertyOperator.IContains },\n        { label: allOperatorsMapping[PropertyOperator.NotIContains], value: PropertyOperator.NotIContains },\n        { label: allOperatorsMapping[PropertyOperator.Regex], value: PropertyOperator.Regex },\n        { label: allOperatorsMapping[PropertyOperator.NotRegex], value: PropertyOperator.NotRegex },\n    ],\n    [SurveyQuestionType.Link]: [],\n}\n\nexport function SurveyAnswerFilters(): JSX.Element {\n    const { survey, answerFilters } = useValues(surveyLogic)\n    const { setAnswerFilters } = useActions(surveyLogic)\n\n    const handleUpdateFilter = (questionIndex: number, field: 'operator' | 'value', value: any): void => {\n        const newFilters = [...answerFilters]\n        const filterIndex = newFilters.findIndex((f) => f.key === getSurveyResponseKey(questionIndex))\n\n        if (filterIndex >= 0) {\n            // Ensure we're working with an EventPropertyFilter\n            const existingFilter = newFilters[filterIndex]\n            newFilters[filterIndex] = {\n                ...existingFilter,\n                [field]: value,\n                type: PropertyFilterType.Event, // Ensure type is always set\n            }\n        } else {\n            // Create new filter if one doesn't exist\n            newFilters.push({\n                key: getSurveyResponseKey(questionIndex),\n                type: PropertyFilterType.Event,\n                operator: PropertyOperator.Exact,\n                [field]: value,\n            })\n        }\n        setAnswerFilters(newFilters)\n    }\n\n    const getFilterForQuestion = (questionIndex: number): EventPropertyFilter | undefined => {\n        const filter = answerFilters.find((f) => f.key === getSurveyResponseKey(questionIndex))\n        return filter\n    }\n\n    return (\n        <>\n            <div className=\"border rounded-t\">\n                <div className=\"grid grid-cols-6 gap-2 px-2 py-2 border-b bg-bg-light\">\n                    <div className=\"col-span-3 font-semibold\">Question</div>\n                    <div className=\"font-semibold\">Filter type</div>\n                    <div className=\"col-span-2 font-semibold\">Value</div>\n                </div>\n                <div>\n                    {(survey as Survey).questions.map((question, index) => {\n                        const currentFilter = getFilterForQuestion(index)\n                        const operators = OPERATOR_OPTIONS[question.type] || []\n\n                        if (operators.length === 0) {\n                            return null // Skip questions that don't support filtering (like Link type)\n                        }\n\n                        return (\n                            <div\n                                key={index}\n                                className=\"grid grid-cols-6 gap-2 px-2 py-2 items-center border-b last:border-b-0 hover:bg-bg-light transition-all\"\n                            >\n                                <div className=\"col-span-3\">\n                                    <span className=\"font-medium\">{question.question}</span>\n                                    <div className=\"text-muted text-xs\">{SurveyQuestionLabel[question.type]}</div>\n                                </div>\n                                <div>\n                                    <LemonSelect\n                                        value={currentFilter?.operator}\n                                        onChange={(val) => handleUpdateFilter(index, 'operator', val)}\n                                        options={operators as LemonSelectOptions<PropertyOperator>}\n                                        className=\"w-full\"\n                                    />\n                                </div>\n                                <div className=\"col-span-2\">\n                                    {currentFilter?.operator &&\n                                        ![PropertyOperator.IsSet, PropertyOperator.IsNotSet].includes(\n                                            currentFilter.operator\n                                        ) && (\n                                            <PropertyValue\n                                                propertyKey={getSurveyResponseKey(index)}\n                                                type={PropertyFilterType.Event}\n                                                operator={currentFilter.operator}\n                                                value={currentFilter.value || []}\n                                                onSet={(value: any) => handleUpdateFilter(index, 'value', value)}\n                                                placeholder={\n                                                    question.type === SurveyQuestionType.Rating\n                                                        ? 'Enter a number'\n                                                        : 'Enter text to match'\n                                                }\n                                                eventNames={['survey sent']}\n                                                additionalPropertiesFilter={[\n                                                    {\n                                                        key: getPropertyKey(\n                                                            '$survey_id',\n                                                            TaxonomicFilterGroupType.Events\n                                                        ),\n                                                        values: survey.id,\n                                                    },\n                                                ]}\n                                            />\n                                        )}\n                                </div>\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        </>\n    )\n}\n", "import {\n    IconInfo,\n    IconSparkles,\n    IconThumbsDown,\n    IconThumbsDownFilled,\n    IconThumbsUp,\n    IconThumbsUpFilled,\n} from '@posthog/icons'\nimport { LemonButton, LemonTable } from '@posthog/lemon-ui'\nimport { BindLogic, useActions, useValues } from 'kea'\nimport { FlaggedFeature } from 'lib/components/FlaggedFeature'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { dayjs } from 'lib/dayjs'\nimport { LemonDivider } from 'lib/lemon-ui/LemonDivider'\nimport { LemonMarkdown } from 'lib/lemon-ui/LemonMarkdown'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { humanFriendlyNumber } from 'lib/utils'\nimport posthog from 'posthog-js'\nimport { useEffect, useState } from 'react'\nimport { insightLogic } from 'scenes/insights/insightLogic'\nimport { LineGraph } from 'scenes/insights/views/LineGraph/LineGraph'\nimport { PieChart } from 'scenes/insights/views/LineGraph/PieChart'\nimport { maxGlobalLogic } from 'scenes/max/maxGlobalLogic'\nimport { PersonDisplay } from 'scenes/persons/PersonDisplay'\nimport { AIConsentPopoverWrapper } from 'scenes/settings/organization/AIConsentPopoverWrapper'\nimport { getSurveyResponseKey } from 'scenes/surveys/utils'\n\nimport { GraphType, InsightLogicProps, SurveyQuestionType } from '~/types'\n\nimport {\n    QuestionResultsReady,\n    surveyLogic,\n    SurveyMultipleChoiceResults,\n    SurveyOpenTextResults,\n    SurveyRatingResults,\n    SurveyRecurringNPSResults,\n    SurveySingleChoiceResults,\n    SurveyUserStats,\n} from './surveyLogic'\n\nconst insightProps: InsightLogicProps = {\n    dashboardItemId: `new-survey`,\n}\n\nconst recurringNPSInsightProps: InsightLogicProps = {\n    dashboardItemId: `new-survey-recurring-nps`,\n}\n\nconst formatCount = (count: number, total: number): string => {\n    if ((count / total) * 100 < 3) {\n        return ''\n    }\n    return `${humanFriendlyNumber(count)}`\n}\n\nexport function UsersCount({ surveyUserStats }: { surveyUserStats: SurveyUserStats }): JSX.Element {\n    const { seen, dismissed, sent } = surveyUserStats\n    const total = seen + dismissed + sent\n    const labelTotal = total === 1 ? 'Unique user shown' : 'Unique users shown'\n    const labelSent = sent === 1 ? 'Response sent' : 'Responses sent'\n\n    return (\n        <div className=\"inline-flex mb-4\">\n            <div>\n                <div className=\"text-4xl font-bold\">{humanFriendlyNumber(total)}</div>\n                <div className=\"font-semibold text-secondary\">{labelTotal}</div>\n            </div>\n            {sent > 0 && (\n                <div className=\"ml-10\">\n                    <div className=\"text-4xl font-bold\">{humanFriendlyNumber(sent)}</div>\n                    <div className=\"font-semibold text-secondary\">{labelSent}</div>\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport function UsersStackedBar({ surveyUserStats }: { surveyUserStats: SurveyUserStats }): JSX.Element {\n    const { seen, dismissed, sent } = surveyUserStats\n\n    const total = seen + dismissed + sent\n    const seenPercentage = (seen / total) * 100\n    const dismissedPercentage = (dismissed / total) * 100\n    const sentPercentage = (sent / total) * 100\n\n    return (\n        <>\n            {total > 0 && (\n                <div>\n                    <div className=\"relative w-full mx-auto h-10 mb-4\">\n                        {[\n                            {\n                                count: seen,\n                                label: 'Unanswered',\n                                classes: `rounded-l ${dismissed === 0 && sent === 0 ? 'rounded-r' : ''}`,\n                                style: { backgroundColor: '#1D4AFF', width: `${seenPercentage}%` },\n                            },\n                            {\n                                count: dismissed,\n                                label: 'Dismissed',\n                                classes: `${seen === 0 ? 'rounded-l' : ''} ${sent === 0 ? 'rounded-r' : ''}`,\n                                style: {\n                                    backgroundColor: '#E3A506',\n                                    width: `${dismissedPercentage}%`,\n                                    left: `${seenPercentage}%`,\n                                },\n                            },\n                            {\n                                count: sent,\n                                label: 'Sent',\n                                classes: `rounded-r ${seen === 0 && dismissed === 0 ? 'rounded-l' : ''}`,\n                                style: {\n                                    backgroundColor: '#529B08',\n                                    width: `${sentPercentage}%`,\n                                    left: `${seenPercentage + dismissedPercentage}%`,\n                                },\n                            },\n                        ].map(({ count, label, classes, style }) => (\n                            <Tooltip\n                                key={`survey-summary-chart-${label}`}\n                                title={`${label} surveys: ${count}`}\n                                delayMs={0}\n                                placement=\"top\"\n                            >\n                                <div\n                                    className={`h-10 text-white text-center absolute cursor-pointer ${classes}`}\n                                    // eslint-disable-next-line react/forbid-dom-props\n                                    style={style}\n                                >\n                                    <span className=\"inline-flex font-semibold max-w-full px-1 truncate leading-10\">\n                                        {formatCount(count, total)}\n                                    </span>\n                                </div>\n                            </Tooltip>\n                        ))}\n                    </div>\n                    <div className=\"w-full flex justify-center\">\n                        <div className=\"flex items-center\">\n                            {[\n                                { count: seen, label: 'Unanswered', style: { backgroundColor: '#1D4AFF' } },\n                                { count: dismissed, label: 'Dismissed', style: { backgroundColor: '#E3A506' } },\n                                { count: sent, label: 'Submitted', style: { backgroundColor: '#529B08' } },\n                            ].map(\n                                ({ count, label, style }) =>\n                                    count > 0 && (\n                                        <div key={`survey-summary-legend-${label}`} className=\"flex items-center mr-6\">\n                                            {/* eslint-disable-next-line react/forbid-dom-props */}\n                                            <div className=\"w-3 h-3 rounded-full mr-2\" style={style} />\n                                            <span className=\"font-semibold text-secondary\">{`${label} (${(\n                                                (count / total) *\n                                                100\n                                            ).toFixed(1)}%)`}</span>\n                                        </div>\n                                    )\n                            )}\n                        </div>\n                    </div>\n                </div>\n            )}\n        </>\n    )\n}\n\nexport function Summary({\n    surveyUserStats,\n    surveyUserStatsLoading,\n}: {\n    surveyUserStats: SurveyUserStats\n    surveyUserStatsLoading: boolean\n}): JSX.Element {\n    return (\n        <div>\n            {surveyUserStatsLoading ? (\n                <LemonTable dataSource={[]} columns={[]} loading={true} />\n            ) : (\n                <>\n                    {!surveyUserStats ? null : (\n                        <>\n                            <UsersCount surveyUserStats={surveyUserStats} />\n                            <UsersStackedBar surveyUserStats={surveyUserStats} />\n                        </>\n                    )}\n                </>\n            )}\n        </div>\n    )\n}\n\nexport function RatingQuestionBarChart({\n    questionIndex,\n    surveyRatingResults,\n    surveyRatingResultsReady,\n}: {\n    questionIndex: number\n    surveyRatingResults: SurveyRatingResults\n    surveyRatingResultsReady: QuestionResultsReady\n    iteration?: number | null | undefined\n}): JSX.Element {\n    const { loadSurveyRatingResults } = useActions(surveyLogic)\n    const { survey } = useValues(surveyLogic)\n    const barColor = '#1d4aff'\n    const question = survey.questions[questionIndex]\n    useEffect(() => {\n        loadSurveyRatingResults({ questionIndex })\n    }, [questionIndex, loadSurveyRatingResults])\n    if (question.type !== SurveyQuestionType.Rating) {\n        throw new Error(`Question type must be ${SurveyQuestionType.Rating}`)\n    }\n\n    return (\n        <div>\n            {!surveyRatingResultsReady[questionIndex] ? (\n                <LemonTable dataSource={[]} columns={[]} loading={true} />\n            ) : !surveyRatingResults[questionIndex]?.total ? (\n                <></>\n            ) : (\n                <div>\n                    <div className=\"font-semibold text-secondary\">{`${\n                        question.scale === 10\n                            ? '0 - 10'\n                            : question.scale === 7\n                            ? '1 - 7'\n                            : question.scale === 5\n                            ? '1 - 5'\n                            : '1 - 3'\n                    } rating`}</div>\n                    <div className=\"text-xl font-bold mb-2\">{question.question}</div>\n                    <div className=\" h-50 border rounded pt-8\">\n                        <div className=\"relative h-full w-full\">\n                            <BindLogic logic={insightLogic} props={insightProps}>\n                                <LineGraph\n                                    inSurveyView={true}\n                                    hideYAxis={true}\n                                    showValuesOnSeries={true}\n                                    labelGroupType={1}\n                                    data-attr=\"survey-rating\"\n                                    type={GraphType.Bar}\n                                    hideAnnotations={true}\n                                    formula=\"-\"\n                                    tooltip={{\n                                        showHeader: false,\n                                        hideColorCol: true,\n                                    }}\n                                    datasets={[\n                                        {\n                                            id: 1,\n                                            label: 'Number of responses',\n                                            barPercentage: 0.8,\n                                            minBarLength: 2,\n                                            data: surveyRatingResults[questionIndex].data,\n                                            backgroundColor: barColor,\n                                            borderColor: barColor,\n                                            hoverBackgroundColor: barColor,\n                                        },\n                                    ]}\n                                    labels={\n                                        question.scale === 10\n                                            ? ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n                                            : question.scale === 7\n                                            ? ['1', '2', '3', '4', '5', '6', '7']\n                                            : question.scale === 5\n                                            ? ['1', '2', '3', '4', '5']\n                                            : ['1', '2', '3']\n                                    }\n                                />\n                            </BindLogic>\n                        </div>\n                    </div>\n                    <div className=\"flex flex-row justify-between mt-1\">\n                        <div className=\"text-secondary pl-10\">{question.lowerBoundLabel}</div>\n                        <div className=\"text-secondary pr-10\">{question.upperBoundLabel}</div>\n                    </div>\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport function NPSSurveyResultsBarChart({\n    questionIndex,\n    surveyRecurringNPSResults,\n    surveyRecurringNPSResultsReady,\n    iterationStartDates,\n    currentIteration,\n}: {\n    questionIndex: number\n    surveyRecurringNPSResults: SurveyRecurringNPSResults\n    surveyRecurringNPSResultsReady: QuestionResultsReady\n    iterationStartDates: string[]\n    currentIteration: number\n}): JSX.Element {\n    const { loadSurveyRecurringNPSResults } = useActions(surveyLogic)\n    const { survey } = useValues(surveyLogic)\n    const barColor = '#1d4aff'\n    const question = survey.questions[questionIndex]\n    if (question.type !== SurveyQuestionType.Rating) {\n        throw new Error(`Question type must be ${SurveyQuestionType.Rating}`)\n    }\n\n    useEffect(() => {\n        loadSurveyRecurringNPSResults({ questionIndex })\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [questionIndex])\n\n    return (\n        <div>\n            {!surveyRecurringNPSResultsReady[questionIndex] ? (\n                <LemonTable dataSource={[]} columns={[]} loading={true} />\n            ) : !surveyRecurringNPSResults[questionIndex]?.total ? (\n                <></>\n            ) : (\n                <div>\n                    <div className=\"font-semibold text-secondary\">{`${\n                        question.scale === 10 ? '0 - 10' : '1 - 5'\n                    } rating`}</div>\n                    <div className=\"text-xl font-bold mb-2\">NPS Scores over time for \"{question.question}\"</div>\n                    <div className=\" h-50 border rounded pt-8\">\n                        <div className=\"relative h-full w-full\">\n                            <BindLogic logic={insightLogic} props={recurringNPSInsightProps}>\n                                <LineGraph\n                                    inSurveyView={true}\n                                    hideYAxis={true}\n                                    showValuesOnSeries={true}\n                                    labelGroupType=\"none\"\n                                    data-attr=\"survey-rating\"\n                                    type={GraphType.Line}\n                                    hideAnnotations={false}\n                                    formula=\"-\"\n                                    tooltip={{\n                                        showHeader: true,\n                                        hideColorCol: true,\n                                    }}\n                                    trendsFilter={{\n                                        showLegend: true,\n                                    }}\n                                    datasets={[\n                                        {\n                                            id: 1,\n                                            label: 'NPS Score',\n                                            barPercentage: 0.8,\n                                            minBarLength: 2,\n                                            data: surveyRecurringNPSResults[questionIndex].data,\n                                            backgroundColor: barColor,\n                                            borderColor: barColor,\n                                            hoverBackgroundColor: barColor,\n                                        },\n                                    ]}\n                                    labels={iterationStartDates\n                                        .slice(0, currentIteration)\n                                        .map((sd) => dayjs(sd).format('YYYY-MM-DD'))}\n                                />\n                            </BindLogic>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport function SingleChoiceQuestionPieChart({\n    questionIndex,\n    surveySingleChoiceResults,\n    surveySingleChoiceResultsReady,\n}: {\n    questionIndex: number\n    surveySingleChoiceResults: SurveySingleChoiceResults\n    surveySingleChoiceResultsReady: QuestionResultsReady\n}): JSX.Element {\n    const { loadSurveySingleChoiceResults } = useActions(surveyLogic)\n    const { survey } = useValues(surveyLogic)\n\n    const question = survey.questions[questionIndex]\n    if (question.type !== SurveyQuestionType.SingleChoice) {\n        throw new Error(`Question type must be ${SurveyQuestionType.SingleChoice}`)\n    }\n\n    // Insights colors\n    // TODO: make available in Tailwind\n    const colors = [\n        '#1D4BFF',\n        '#CD0F74',\n        '#43827E',\n        '#621DA6',\n        '#F04F58',\n        '#539B0A',\n        '#E3A605',\n        '#0476FB',\n        '#36416B',\n        '#41CBC3',\n        '#A46FFF',\n        '#FE729E',\n        '#CE1175',\n        '#B64B01',\n    ]\n\n    useEffect(() => {\n        loadSurveySingleChoiceResults({ questionIndex })\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [questionIndex])\n\n    return (\n        <div>\n            {!surveySingleChoiceResultsReady[questionIndex] ? (\n                <LemonTable dataSource={[]} columns={[]} loading={true} />\n            ) : !surveySingleChoiceResults[questionIndex]?.data.length ? (\n                <></>\n            ) : (\n                <div>\n                    <div className=\"font-semibold text-secondary\">Single choice</div>\n                    <div className=\"text-xl font-bold mb-2\">{question.question}</div>\n                    <div className=\"h-80 overflow-y-auto border rounded pt-4 pb-2 flex\">\n                        <div className=\"relative h-full w-80\">\n                            <BindLogic logic={insightLogic} props={insightProps}>\n                                <PieChart\n                                    labelGroupType={1}\n                                    data-attr=\"survey-rating\"\n                                    type={GraphType.Pie}\n                                    hideAnnotations={true}\n                                    formula=\"-\"\n                                    tooltip={{\n                                        showHeader: false,\n                                        hideColorCol: true,\n                                    }}\n                                    datasets={[\n                                        {\n                                            id: 1,\n                                            data: surveySingleChoiceResults[questionIndex].data,\n                                            labels: surveySingleChoiceResults[questionIndex].labels,\n                                            backgroundColor: surveySingleChoiceResults[questionIndex].labels.map(\n                                                (_: string, i: number) => colors[i % colors.length]\n                                            ),\n                                        },\n                                    ]}\n                                    labels={surveySingleChoiceResults[questionIndex].labels}\n                                />\n                            </BindLogic>\n                        </div>\n                        <div\n                            className={`grid h-full pl-4 ${(() => {\n                                const dataLength = surveySingleChoiceResults[questionIndex].data.length\n                                // We need to return the whole class for Tailwind to see them when scanning code\n                                if (dataLength < 5) {\n                                    return 'py-20'\n                                } else if (dataLength < 7) {\n                                    return 'py-15'\n                                } else if (dataLength < 10) {\n                                    return 'py-10'\n                                }\n                                return 'py-5'\n                            })()} grid-cols-${Math.ceil(surveySingleChoiceResults[questionIndex].data.length / 10)}`}\n                        >\n                            {surveySingleChoiceResults[questionIndex].data.map((count: number, i: number) => {\n                                const { total, labels } = surveySingleChoiceResults[questionIndex]\n                                const percentage = ((count / total) * 100).toFixed(1)\n\n                                return (\n                                    <div\n                                        key={`single-choice-legend-${questionIndex}-${i}`}\n                                        className=\"flex items-center mr-6\"\n                                    >\n                                        <div\n                                            className=\"w-3 h-3 rounded-full mr-2\"\n                                            // eslint-disable-next-line react/forbid-dom-props\n                                            style={{ backgroundColor: colors[i % colors.length] }}\n                                        />\n                                        <span className=\"font-semibold text-secondary max-w-48 truncate\">{`${labels[i]}`}</span>\n                                        <span className=\"font-bold ml-1 truncate\">{` ${percentage}% `}</span>\n                                        <span className=\"font-semibold text-secondary ml-1 truncate\">{`(${count})`}</span>\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport function MultipleChoiceQuestionBarChart({\n    questionIndex,\n    surveyMultipleChoiceResults,\n    surveyMultipleChoiceResultsReady,\n}: {\n    questionIndex: number\n    surveyMultipleChoiceResults: SurveyMultipleChoiceResults\n    surveyMultipleChoiceResultsReady: QuestionResultsReady\n}): JSX.Element {\n    const { loadSurveyMultipleChoiceResults } = useActions(surveyLogic)\n    const { survey } = useValues(surveyLogic)\n    const [chartHeight, setChartHeight] = useState(200)\n    const barColor = '#1d4aff'\n\n    const question = survey.questions[questionIndex]\n    if (question.type !== SurveyQuestionType.MultipleChoice) {\n        throw new Error(`Question type must be ${SurveyQuestionType.MultipleChoice}`)\n    }\n\n    useEffect(() => {\n        loadSurveyMultipleChoiceResults({ questionIndex })\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [questionIndex])\n\n    useEffect(() => {\n        if (surveyMultipleChoiceResults?.[questionIndex]?.data?.length) {\n            setChartHeight(100 + 20 * surveyMultipleChoiceResults[questionIndex].data.length)\n        }\n        // TODO this one maybe should have questionIndex as a dependency\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [surveyMultipleChoiceResults])\n\n    return (\n        <div>\n            {!surveyMultipleChoiceResultsReady[questionIndex] ? (\n                <LemonTable dataSource={[]} columns={[]} loading={true} />\n            ) : !surveyMultipleChoiceResults[questionIndex]?.data.length ? (\n                <></>\n            ) : (\n                <div className=\"mb-8\">\n                    <div className=\"font-semibold text-secondary\">Multiple choice</div>\n                    <div className=\"text-xl font-bold mb-2\">{question.question}</div>\n\n                    <div\n                        className=\"border rounded pt-8 pr-10 overflow-y-scroll\"\n                        // eslint-disable-next-line react/forbid-dom-props\n                        style={{ height: Math.min(chartHeight, 600) }}\n                    >\n                        <BindLogic logic={insightLogic} props={insightProps}>\n                            <LineGraph\n                                inSurveyView={true}\n                                hideYAxis={true}\n                                hideXAxis={true}\n                                showValuesOnSeries={true}\n                                labelGroupType={1}\n                                data-attr=\"survey-multiple-choice\"\n                                type={GraphType.HorizontalBar}\n                                formula=\"-\"\n                                tooltip={{\n                                    showHeader: false,\n                                    hideColorCol: true,\n                                }}\n                                datasets={[\n                                    {\n                                        id: 1,\n                                        label: 'Number of responses',\n                                        barPercentage: 0.9,\n                                        minBarLength: 2,\n                                        data: surveyMultipleChoiceResults[questionIndex].data,\n                                        labels: surveyMultipleChoiceResults[questionIndex].labels,\n                                        breakdownValues: surveyMultipleChoiceResults[questionIndex].labels,\n                                        backgroundColor: barColor,\n                                        borderColor: barColor,\n                                        hoverBackgroundColor: barColor,\n                                    },\n                                ]}\n                                labels={surveyMultipleChoiceResults[questionIndex].labels}\n                            />\n                        </BindLogic>\n                    </div>\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport function OpenTextViz({\n    questionIndex,\n    surveyOpenTextResults,\n    surveyOpenTextResultsReady,\n}: {\n    questionIndex: number\n    surveyOpenTextResults: SurveyOpenTextResults\n    surveyOpenTextResultsReady: QuestionResultsReady\n}): JSX.Element {\n    const { loadSurveyOpenTextResults } = useActions(surveyLogic)\n    const { survey } = useValues(surveyLogic)\n    const surveyResponseKey = getSurveyResponseKey(questionIndex)\n\n    const question = survey.questions[questionIndex]\n    if (question.type !== SurveyQuestionType.Open) {\n        throw new Error(`Question type must be ${SurveyQuestionType.Open}`)\n    }\n\n    useEffect(() => {\n        loadSurveyOpenTextResults({ questionIndex })\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [questionIndex])\n\n    return (\n        <div>\n            {!surveyOpenTextResultsReady[questionIndex] ? (\n                <LemonTable dataSource={[]} columns={[]} loading={true} />\n            ) : !surveyOpenTextResults[questionIndex]?.events.length ? (\n                <></>\n            ) : (\n                <>\n                    <div className=\"flex flex-row justify-between items-center\">\n                        <Tooltip title=\"See all Open Text responses in the Events table at the bottom.\">\n                            <div className=\"inline-flex gap-1\">\n                                <div className=\"font-semibold text-secondary\">Open text</div>\n                                <LemonDivider vertical className=\"my-1 mx-1\" />\n                                <div className=\"font-semibold text-secondary\">random selection</div>\n                                <IconInfo className=\"text-lg text-secondary shrink-0 ml-0.5 mt-0.5\" />\n                            </div>\n                        </Tooltip>\n                        <ResponseSummariesButton questionIndex={questionIndex} />\n                    </div>\n                    <div className=\"text-xl font-bold mb-4\">{question.question}</div>\n                    <ResponseSummariesDisplay />\n                    <div className=\"mt-4 mb-8 masonry-container\">\n                        {surveyOpenTextResults[questionIndex].events.map((event, i) => {\n                            const personProp = {\n                                distinct_id: event.distinct_id,\n                                properties: event.personProperties,\n                            }\n\n                            return (\n                                <div key={`open-text-${questionIndex}-${i}`} className=\"masonry-item border rounded\">\n                                    <div className=\"max-h-80 overflow-y-auto text-center italic font-semibold px-5 py-4\">\n                                        {typeof event.properties[surveyResponseKey] !== 'string'\n                                            ? JSON.stringify(event.properties[surveyResponseKey])\n                                            : event.properties[surveyResponseKey]}\n                                    </div>\n                                    <div className=\"bg-surface-primary items-center px-5 py-4 border-t rounded-b truncate w-full\">\n                                        <PersonDisplay\n                                            person={personProp}\n                                            withIcon={true}\n                                            noEllipsis={false}\n                                            isCentered\n                                        />\n                                    </div>\n                                </div>\n                            )\n                        })}\n                    </div>\n                </>\n            )}\n        </div>\n    )\n}\n\nfunction ResponseSummariesButton({ questionIndex }: { questionIndex: number | undefined }): JSX.Element {\n    const { summarize } = useActions(surveyLogic)\n    const { responseSummary, responseSummaryLoading } = useValues(surveyLogic)\n    const { dataProcessingAccepted, dataProcessingApprovalDisabledReason } = useValues(maxGlobalLogic)\n\n    return (\n        <FlaggedFeature flag={FEATURE_FLAGS.AI_SURVEY_RESPONSE_SUMMARY} match={true}>\n            <AIConsentPopoverWrapper showArrow>\n                <LemonButton\n                    type=\"secondary\"\n                    data-attr=\"summarize-survey\"\n                    onClick={() => summarize({ questionIndex })}\n                    disabledReason={\n                        !dataProcessingAccepted\n                            ? dataProcessingApprovalDisabledReason || 'Data processing not accepted'\n                            : responseSummaryLoading\n                            ? 'Let me think...'\n                            : responseSummary\n                            ? 'Already summarized'\n                            : undefined\n                    }\n                    icon={<IconSparkles />}\n                    loading={responseSummaryLoading}\n                >\n                    {responseSummaryLoading ? 'Let me think...' : 'Summarize responses'}\n                </LemonButton>\n            </AIConsentPopoverWrapper>\n        </FlaggedFeature>\n    )\n}\n\nfunction ResponseSummariesDisplay(): JSX.Element {\n    const { survey, responseSummary } = useValues(surveyLogic)\n\n    return (\n        <FlaggedFeature flag={FEATURE_FLAGS.AI_SURVEY_RESPONSE_SUMMARY} match={true}>\n            {responseSummary ? (\n                <>\n                    <h1>Responses summary</h1>\n                    <LemonMarkdown>{responseSummary.content}</LemonMarkdown>\n                    <LemonDivider dashed={true} />\n                    <ResponseSummaryFeedback surveyId={survey.id} />\n                </>\n            ) : null}\n        </FlaggedFeature>\n    )\n}\n\nfunction ResponseSummaryFeedback({ surveyId }: { surveyId: string }): JSX.Element {\n    const [rating, setRating] = useState<'good' | 'bad' | null>(null)\n\n    function submitRating(newRating: 'good' | 'bad'): void {\n        if (rating) {\n            return // Already rated\n        }\n        setRating(newRating)\n        posthog.capture('ai_survey_summary_rated', {\n            survey_id: surveyId,\n            answer_rating: newRating,\n        })\n    }\n\n    return (\n        <div className=\"flex items-center justify-end\">\n            {rating === null ? <>Summaries are generated by AI. What did you think?</> : null}\n            {rating !== 'bad' && (\n                <LemonButton\n                    icon={rating === 'good' ? <IconThumbsUpFilled /> : <IconThumbsUp />}\n                    type=\"tertiary\"\n                    size=\"small\"\n                    tooltip=\"Good summary\"\n                    onClick={() => submitRating('good')}\n                />\n            )}\n            {rating !== 'good' && (\n                <LemonButton\n                    icon={rating === 'bad' ? <IconThumbsDownFilled /> : <IconThumbsDown />}\n                    type=\"tertiary\"\n                    size=\"small\"\n                    tooltip=\"Bad summary\"\n                    onClick={() => submitRating('bad')}\n                />\n            )}\n        </div>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_kea_router", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "SurveyIterationOptions", "showSurveyRepeatSchedule", "survey", "surveyLogic", "setSurveyValue", "surveysRecurringScheduleAvailable", "surveysLogic", "surveysRecurringScheduleDisabledReason", "LemonField", "LemonRadio", "newValue", "onChange", "value", "LemonInput", "SurveyRepeatSchedule", "setSelectedSection", "canSurveyBeRepeated", "IconInfo", "LemonSnack", "v", "Link", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "SurveyAPIEditor", "survey", "apiSurvey", "CodeSnippet", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_jsx_runtime", "PresentationTypeCard", "title", "description", "children", "onClick", "value", "active", "clsx", "HTMLEditor", "onChange", "onTabChange", "activeTab", "textPlaceholder", "surveysHTMLAvailable", "surveysLogic", "LemonTabs", "LemonTextArea", "v", "IconLock", "CodeEditor", "PayGateMini", "LemonBanner", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "QuestionBranchingInput", "questionIndex", "question", "survey", "getBranchingDropdownValue", "surveyLogic", "setQuestionBranchingType", "setSurveyValue", "availableNextQuestions", "_", "idx", "branchingDropdownValue", "hasResponseBasedBranching", "LemonField", "LemonSelect", "type", "handleSelect", "specificQuestionIndex", "LemonDialog", "truncate", "QuestionResponseBasedBranchingInput", "getResponseBasedBranchingDropdownValue", "setResponseBasedBranchingForQuestion", "config", "choice", "choiceIndex", "value", "label", "i", "nextStep", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "DragHandle", "listeners", "SortableDragIcon", "SurveyDragHandle", "isDraftSurvey", "hasMultipleQuestions", "import_jsx_runtime", "MAX_NUMBER_OF_OPTIONS", "SurveyEditQuestionHeader", "index", "survey", "setSelectedPageIndex", "setSurveyValue", "hasBranchingLogic", "surveyLogic", "deleteBranchingLogic", "setNodeRef", "attributes", "transform", "transition", "listeners", "isDragging", "useSortable", "CSS", "SurveyDragHandle", "getSurveyStatus", "LemonButton", "IconTrash", "e", "deleteQuestion", "_", "i", "LemonDialog", "SurveyEditQuestionGroup", "question", "descriptionContentType", "setDefaultForQuestionType", "resetBranchingForQuestion", "initialDescriptionContentType", "handleQuestionValueChange", "key", "val", "updatedQuestion", "idx", "handleTabChange", "LemonField", "LemonSelect", "newType", "editingQuestion", "defaultSurveyFieldValues", "editingDescription", "editingThankYouMessage", "SurveyQuestionLabel", "LemonInput", "value", "onChange", "HTMLEditor", "LemonCheckbox", "newQuestion", "newQuestions", "hasOpenChoice", "toggleHasOpenChoice", "choice", "isOpenChoice", "newChoices", "IconPlusSmall", "shuffleOptions", "toggleShuffleOptions", "checked", "QuestionBranchingInput", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "SurveyFormAppearance", "previewPageIndex", "survey", "handleSetSelectedPageIndex", "SurveyAppearancePreview", "response", "nextStep", "Me", "LemonSelect", "pageIndex", "question", "index", "SurveyAPIEditor", "import_jsx_runtime", "SurveyCompletionConditions", "featureFlags", "featureFlagLogic", "survey", "dataCollectionType", "surveyLogic", "setSurveyValue", "resetSurveyResponseLimits", "resetSurveyAdaptiveSampling", "setDataCollectionType", "surveysRecurringScheduleAvailable", "surveysLogic", "visible", "setVisible", "surveyLimitOptions", "FEATURE_FLAGS", "LemonField", "LemonRadio", "newValue", "dayjs", "Popover", "LemonCalendarSelect", "value", "LemonButton", "formatDate", "LemonInput", "LemonSelect", "Tooltip", "IconInfo", "onChange", "SurveyRepeatSchedule", "SurveyEdit", "urlMatchTypeValidationError", "hasTargetingSet", "selectedPageIndex", "selectedSection", "isEditingSurvey", "targetingFlagFilters", "hasBranchingLogic", "surveyRepeatedActivationAvailable", "surveyErrors", "deviceTypesMatchTypeValidationError", "resetTargeting", "setSelectedPageIndex", "setSelectedSection", "setFlagPropertyErrors", "deleteBranchingLogic", "surveysMultipleQuestionsAvailable", "surveysEventsAvailable", "surveysActionsAvailable", "sortedItemIds", "_", "idx", "thankYouMessageDescriptionContentType", "onSortEnd", "oldIndex", "newIndex", "move", "arr", "from", "to", "clone", "element", "child", "removeTargetingFlagFilters", "LemonTextArea", "LemonCollapse", "section", "PresentationTypeCard", "SurveyAppearancePreview", "SurveyAPIEditor", "LemonTag", "DndContext", "active", "over", "finishDrag", "LemonDialog", "SortableContext", "verticalListSortingStrategy", "index", "question", "SurveyEditQuestionHeader", "SurveyEditQuestionGroup", "IconTrash", "e", "deleteConfirmationMessage", "val", "HTMLEditor", "key", "updatedAppearance", "LemonCheckbox", "checked", "IconPlus", "IconLock", "defaultSurveyFieldValues", "Link", "WidgetCustomization", "defaultSurveyAppearance", "appearance", "LemonDivider", "Customization", "FlagSelector", "IconCancel", "matchTypeVal", "SurveyMatchTypeLabels", "urlVal", "deviceTypesVal", "PropertyValue", "getPropertyKey", "deviceTypes", "selectorVal", "seenSurveyWaitPeriodInDays", "rest", "FeatureFlagReleaseConditions", "filters", "errors", "EventSelect", "includedEvents", "v", "items", "SurveyFormAppearance", "pageIndex", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "OPERATOR_OPTIONS", "allOperatorsMapping", "SurveyAnswerFilters", "survey", "answerFilters", "surveyLogic", "setAnswerFilters", "handleUpdateFilter", "questionIndex", "field", "value", "newFilters", "filterIndex", "f", "getSurveyResponseKey", "existingFilter", "getFilterForQuestion", "question", "index", "currentFilter", "operators", "SurveyQuestionLabel", "LemonSelect", "val", "PropertyValue", "getPropertyKey", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "insightProps", "recurringNPSInsightProps", "formatCount", "count", "total", "humanFriendlyNumber", "UsersCount", "surveyUserStats", "seen", "dismissed", "sent", "labelTotal", "labelSent", "UsersStackedBar", "seenPercentage", "dismissedPercentage", "sentPercentage", "label", "classes", "style", "Tooltip", "Summary", "surveyUserStatsLoading", "LemonTable", "RatingQuestionBarChart", "questionIndex", "surveyRatingResults", "surveyRatingResultsReady", "loadSurveyRatingResults", "surveyLogic", "survey", "barColor", "question", "insightLogic", "LineGraph", "NPSSurveyResultsBarChart", "surveyRecurringNPSResults", "surveyRecurringNPSResultsReady", "iterationStartDates", "currentIteration", "loadSurveyRecurringNPSResults", "sd", "dayjs", "SingleChoiceQuestionPieChart", "surveySingleChoiceResults", "surveySingleChoiceResultsReady", "loadSurveySingleChoiceResults", "colors", "PieChart", "_", "i", "dataLength", "labels", "percentage", "MultipleChoiceQuestionBarChart", "surveyMultipleChoiceResults", "surveyMultipleChoiceResultsReady", "loadSurveyMultipleChoiceResults", "chartHeight", "setChartHeight", "OpenTextViz", "surveyOpenTextResults", "surveyOpenTextResultsReady", "loadSurveyOpenTextResults", "surveyResponseKey", "getSurveyResponseKey", "LemonDivider", "IconInfo", "ResponseSummariesButton", "ResponseSummariesDisplay", "event", "personProp", "PersonDisplay", "summarize", "responseSummary", "responseSummaryLoading", "dataProcessingAccepted", "dataProcessingApprovalDisabledReason", "maxGlobalLogic", "FlaggedFeature", "FEATURE_FLAGS", "AIConsentPopoverWrapper", "LemonButton", "IconSparkles", "LemonMarkdown", "ResponseSummaryFeedback", "surveyId", "rating", "setRating", "submitRating", "newRating", "Co", "IconThumbsUpFilled", "IconThumbsUp", "IconThumbsDownFilled", "IconThumbsDown", "import_jsx_runtime", "SurveyResultsFilters", "propertyFilters", "surveyLogic", "setPropertyFilters", "SurveyAnswerFilters", "PropertyFilters", "SurveySchedule", "survey", "pluralize", "SurveyView", "id", "surveyLoading", "selectedPageIndex", "targetingFlagFilters", "editingSurvey", "updateSurvey", "launchSurvey", "stopSurvey", "archiveSurvey", "resumeSurvey", "setSelectedPageIndex", "duplicateSurvey", "surveyUsesLimit", "surveyUsesAdaptiveLimit", "deleteSurvey", "surveysLogic", "tabKey", "setTabKey", "showLinkedHogFunctions", "useFeatureFlag", "LemonSkeleton", "PageHeader", "More", "LemonButton", "LemonDivider", "LemonDialog", "EditableField", "value", "LemonTabs", "key", "SurveyResult", "capitalizeFirstLetter", "SurveyQuestionLabel", "q", "idx", "TZLabel", "SurveyDisplaySummary", "Link", "SurveyFormAppearance", "preview", "SurveyAPIEditor", "LinkedHogFunctions", "ActivityLog", "disableEventsTable", "dataTableQuery", "surveyUserStats", "surveyUserStatsLoading", "surveyRatingResults", "surveyRatingResultsReady", "surveyRecurringNPSResults", "surveyRecurringNPSResultsReady", "surveySingleChoiceResults", "surveySingleChoiceResultsReady", "surveyMultipleChoiceResults", "surveyMultipleChoiceResultsReady", "surveyOpenTextResults", "surveyOpenTextResultsReady", "surveyNPSScore", "surveyAsInsightURL", "isAnyResultsLoading", "Spinner", "Summary", "question", "i", "SurveyNPSResults", "RatingQuestionBarChart", "NPSSurveyResultsBarChart", "SingleChoiceQuestionPieChart", "MultipleChoiceQuestionBarChart", "OpenTextViz", "IconGraph", "Query", "questionIndex", "dateRange", "interval", "compareFilter", "defaultInterval", "setDateRange", "setInterval", "setCompareFilter", "DateFilter", "fromDate", "toDate", "IntervalFilterStandalone", "CompareFilter", "dayjs", "SURVEY_EVENT_NAME", "getSurveyResponseKey", "import_jsx_runtime", "scene", "SurveyComponent", "surveyLogic", "id", "editingSurvey", "setSelectedPageIndex", "setPropertyFilters", "isEditingSurvey", "surveyMissing", "NotFound", "SurveyForm", "SurveyView", "LemonSkeleton", "survey", "surveyLoading", "targetingFlagFilters", "loadSurvey", "PageHeader", "LemonButton", "urls", "LemonDivider", "SurveyEdit", "SurveyDisplaySummary", "hasConditions", "hasFeatureFlags", "SurveyMatchTypeLabels", "LemonTag", "type", "Link", "FlagSelector", "featureFlagLogic", "FeatureFlagReleaseConditions"]
}
