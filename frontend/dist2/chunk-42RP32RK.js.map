{
  "version": 3,
  "sources": ["../src/scenes/pipeline/frontendAppsLogic.tsx", "../src/scenes/pipeline/importAppsLogic.tsx", "../src/scenes/pipeline/batch-exports/utils.ts", "../src/scenes/pipeline/pipelineNodeMetricsLogic.tsx"],
  "sourcesContent": ["import { actions, afterMount, connect, kea, path, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { projectLogic } from 'scenes/projectLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { PipelineStage, PluginConfigTypeNew, PluginConfigWithPluginInfoNew, PluginType } from '~/types'\n\nimport type { frontendAppsLogicType } from './frontendAppsLogicType'\nimport { convertToPipelineNode, SiteApp } from './types'\nimport { capturePluginEvent, checkPermissions, loadPluginsFromUrl } from './utils'\n\nexport const frontendAppsLogic = kea<frontendAppsLogicType>([\n    path(['scenes', 'pipeline', 'frontendAppsLogic']),\n    connect({\n        values: [projectLogic, ['currentProjectId'], userLogic, ['user']],\n    }),\n    actions({\n        loadPluginConfigs: true,\n        updatePluginConfig: (pluginConfig: PluginConfigTypeNew) => ({ pluginConfig }),\n    }),\n    loaders(({ values }) => ({\n        plugins: [\n            {} as Record<number, PluginType>,\n            {\n                loadPlugins: async () => {\n                    return loadPluginsFromUrl('api/organizations/@current/pipeline_frontend_apps')\n                },\n            },\n        ],\n        pluginConfigs: [\n            {} as Record<number, PluginConfigTypeNew>,\n            {\n                loadPluginConfigs: async () => {\n                    const res: PluginConfigTypeNew[] = await api.loadPaginatedResults(\n                        `api/projects/${values.currentProjectId}/pipeline_frontend_apps_configs`\n                    )\n\n                    return Object.fromEntries(res.map((pluginConfig) => [pluginConfig.id, pluginConfig]))\n                },\n                toggleEnabled: async ({ id, enabled }) => {\n                    if (!checkPermissions(PipelineStage.SiteApp, enabled)) {\n                        return values.pluginConfigs\n                    }\n                    const { pluginConfigs, plugins } = values\n                    const pluginConfig = pluginConfigs[id]\n                    const plugin = plugins[pluginConfig.plugin]\n                    capturePluginEvent(`plugin ${enabled ? 'enabled' : 'disabled'}`, plugin, pluginConfig)\n                    const response = await api.update(`api/plugin_config/${id}`, {\n                        enabled,\n                    })\n                    return { ...pluginConfigs, [id]: response }\n                },\n                updatePluginConfig: ({ pluginConfig }) => {\n                    return {\n                        ...values.pluginConfigs,\n                        [pluginConfig.id]: pluginConfig,\n                    }\n                },\n            },\n        ],\n    })),\n    selectors({\n        loading: [\n            (s) => [s.pluginsLoading, s.pluginConfigsLoading],\n            (pluginsLoading, pluginConfigsLoading) => pluginsLoading || pluginConfigsLoading,\n        ],\n        frontendApps: [\n            (s) => [s.plugins, s.pluginConfigs],\n            (plugins, pluginConfigs): SiteApp[] => {\n                const rawFrontendApp: PluginConfigWithPluginInfoNew[] = Object.values(\n                    pluginConfigs\n                ).map<PluginConfigWithPluginInfoNew>((pluginConfig) => ({\n                    ...pluginConfig,\n                    plugin_info: plugins[pluginConfig.plugin] || null,\n                }))\n                const convertedFrontendApps = rawFrontendApp.map((t) => convertToPipelineNode(t, PipelineStage.SiteApp))\n                const enabledFirst = convertedFrontendApps.sort((a, b) => Number(b.enabled) - Number(a.enabled))\n                return enabledFirst\n            },\n        ],\n    }),\n    afterMount(({ actions }) => {\n        actions.loadPlugins()\n        actions.loadPluginConfigs()\n    }),\n])\n", "import { actions, afterMount, connect, kea, path, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { projectLogic } from 'scenes/projectLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { PipelineStage, PluginConfigTypeNew, PluginConfigWithPluginInfoNew, PluginType } from '~/types'\n\nimport type { importAppsLogicType } from './importAppsLogicType'\nimport { convertToPipelineNode, ImportApp } from './types'\nimport { capturePluginEvent, checkPermissions, loadPluginsFromUrl } from './utils'\n\nexport const importAppsLogic = kea<importAppsLogicType>([\n    path(['scenes', 'pipeline', 'importAppsLogic']),\n    connect({\n        values: [projectLogic, ['currentProjectId'], userLogic, ['user']],\n    }),\n    actions({\n        loadPluginConfigs: true,\n        updatePluginConfig: (pluginConfig: PluginConfigTypeNew) => ({ pluginConfig }),\n    }),\n    loaders(({ values }) => ({\n        plugins: [\n            {} as Record<number, PluginType>,\n            {\n                loadPlugins: async () => {\n                    return loadPluginsFromUrl('api/organizations/@current/pipeline_import_apps')\n                },\n            },\n        ],\n        pluginConfigs: [\n            {} as Record<number, PluginConfigTypeNew>,\n            {\n                loadPluginConfigs: async () => {\n                    const res: PluginConfigTypeNew[] = await api.loadPaginatedResults(\n                        `api/projects/${values.currentProjectId}/pipeline_import_apps_configs`\n                    )\n\n                    return Object.fromEntries(res.map((pluginConfig) => [pluginConfig.id, pluginConfig]))\n                },\n                toggleEnabled: async ({ id, enabled }) => {\n                    if (!checkPermissions(PipelineStage.ImportApp, enabled)) {\n                        return values.pluginConfigs\n                    }\n                    const { pluginConfigs, plugins } = values\n                    const pluginConfig = pluginConfigs[id]\n                    const plugin = plugins[pluginConfig.plugin]\n                    capturePluginEvent(`plugin ${enabled ? 'enabled' : 'disabled'}`, plugin, pluginConfig)\n                    const response = await api.update(`api/plugin_config/${id}`, {\n                        enabled,\n                    })\n                    return { ...pluginConfigs, [id]: response }\n                },\n                updatePluginConfig: ({ pluginConfig }) => {\n                    return {\n                        ...values.pluginConfigs,\n                        [pluginConfig.id]: pluginConfig,\n                    }\n                },\n            },\n        ],\n    })),\n    selectors({\n        loading: [\n            (s) => [s.pluginsLoading, s.pluginConfigsLoading],\n            (pluginsLoading, pluginConfigsLoading) => pluginsLoading || pluginConfigsLoading,\n        ],\n        importApps: [\n            (s) => [s.plugins, s.pluginConfigs],\n            (plugins, pluginConfigs): ImportApp[] => {\n                const rawImportApp: PluginConfigWithPluginInfoNew[] = Object.values(\n                    pluginConfigs\n                ).map<PluginConfigWithPluginInfoNew>((pluginConfig) => ({\n                    ...pluginConfig,\n                    plugin_info: plugins[pluginConfig.plugin] || null,\n                }))\n                const convertedImportApps = rawImportApp.map((t) => convertToPipelineNode(t, PipelineStage.ImportApp))\n                const enabledFirst = convertedImportApps.sort((a, b) => Number(b.enabled) - Number(a.enabled))\n                return enabledFirst\n            },\n        ],\n        hasEnabledImportApps: [(s) => [s.importApps], (importApps) => importApps.some((app) => app.enabled)],\n    }),\n    afterMount(({ actions }) => {\n        actions.loadPlugins()\n        actions.loadPluginConfigs()\n    }),\n])\n", "import { BatchExportService } from '~/types'\n\nexport const humanizeBatchExportName = (service: BatchExportService['type']): string => {\n    switch (service) {\n        case 'HTTP':\n            return 'PostHog HTTP'\n        default:\n            return service\n    }\n}\n", "import { actions, afterMount, connect, kea, key, listeners, path, props, reducers } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { toParams } from 'lib/utils'\nimport { projectLogic } from 'scenes/projectLogic'\n\nimport type { pipelineNodeMetricsLogicType } from './pipelineNodeMetricsLogicType'\n\nexport interface PipelineNodeMetricsProps {\n    id: number | string // PluginConfig ID or batch export destination ID\n}\nconst DEFAULT_DATE_FROM = '-7d'\n\nexport interface AppMetricsData {\n    dates: Array<string>\n    successes: Array<number>\n    successes_on_retry: Array<number>\n    failures: Array<number>\n    totals: {\n        successes: number\n        successes_on_retry: number\n        failures: number\n    }\n}\nexport interface AppMetricsResponse {\n    metrics: AppMetricsData\n    errors: Array<AppErrorSummary>\n}\nexport interface AppErrorSummary {\n    error_type: string\n    count: number\n    last_seen: string\n}\n\nexport interface AppMetricErrorDetail {\n    timestamp: string\n    error_uuid: string\n    error_type: string\n    error_details: {\n        error: {\n            name: string\n            message?: string\n            stack?: string\n        }\n        event?: any\n        eventCount?: number\n    }\n}\n\nexport const pipelineNodeMetricsLogic = kea<pipelineNodeMetricsLogicType>([\n    props({} as PipelineNodeMetricsProps),\n    key(({ id }: PipelineNodeMetricsProps) => id),\n    path((id) => ['scenes', 'pipeline', 'appMetricsLogic', id]),\n    connect({\n        values: [projectLogic, ['currentProjectId']],\n    }),\n    actions({\n        setDateRange: (from: string | null, to: string | null) => ({ from, to }),\n        openErrorDetailsModal: (errorType: string) => ({\n            errorType,\n        }),\n        closeErrorDetailsModal: true,\n    }),\n    loaders(({ values, props }) => ({\n        appMetricsResponse: [\n            null as AppMetricsResponse | null,\n            {\n                loadMetrics: async () => {\n                    const params = toParams({ date_from: values.dateRange.from, date_to: values.dateRange.to })\n                    return await api.get(`api/projects/${values.currentProjectId}/app_metrics/${props.id}?${params}`)\n                },\n            },\n        ],\n        errorDetails: [\n            [] as Array<AppMetricErrorDetail>,\n            {\n                openErrorDetailsModal: async ({ errorType }) => {\n                    const params = toParams({ error_type: errorType })\n                    const { result } = await api.get(\n                        `api/projects/${values.currentProjectId}/app_metrics/${props.id}/error_details?${params}`\n                    )\n                    return result\n                },\n            },\n        ],\n    })),\n    reducers({\n        dateRange: [\n            { from: DEFAULT_DATE_FROM, to: null } as { from: string; to: string | null },\n            {\n                setDateRange: (_, { from, to }) => ({ from: from ?? DEFAULT_DATE_FROM, to: to }),\n            },\n        ],\n        errorDetailsModalError: [\n            null as string | null,\n            {\n                openErrorDetailsModal: (_, { errorType }) => errorType,\n                closeErrorDetailsModal: () => null,\n            },\n        ],\n    }),\n    listeners(({ actions }) => ({\n        setDateRange: () => {\n            actions.loadMetrics()\n        },\n    })),\n    afterMount(({ actions }) => {\n        actions.loadMetrics()\n    }),\n])\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "frontendAppsLogic", "projectLogic", "userLogic", "pluginConfig", "values", "loadPluginsFromUrl", "res", "api_default", "id", "enabled", "checkPermissions", "pluginConfigs", "plugins", "plugin", "capturePluginEvent", "response", "s", "pluginsLoading", "pluginConfigsLoading", "t", "convertToPipelineNode", "a", "b", "actions", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "importAppsLogic", "projectLogic", "userLogic", "pluginConfig", "values", "loadPluginsFromUrl", "res", "api_default", "id", "enabled", "checkPermissions", "pluginConfigs", "plugins", "plugin", "capturePluginEvent", "response", "s", "pluginsLoading", "pluginConfigsLoading", "t", "convertToPipelineNode", "a", "b", "importApps", "app", "actions", "init_dirname", "init_buffer", "init_process", "humanizeBatchExportName", "service", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "DEFAULT_DATE_FROM", "pipelineNodeMetricsLogic", "id", "projectLogic", "from", "to", "errorType", "values", "props", "params", "toParams", "api_default", "result", "_", "actions"]
}
