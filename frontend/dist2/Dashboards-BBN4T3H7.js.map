{
  "version": 3,
  "sources": ["../src/scenes/dashboard/dashboards/Dashboards.tsx", "../src/scenes/dashboard/dashboards/templates/DashboardTemplatesTable.tsx"],
  "sourcesContent": ["import { useActions, useValues } from 'kea'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonTab, LemonTabs } from 'lib/lemon-ui/LemonTabs'\nimport { dashboardsLogic, DashboardsTab } from 'scenes/dashboard/dashboards/dashboardsLogic'\nimport { DashboardsTableContainer } from 'scenes/dashboard/dashboards/DashboardsTable'\nimport { DashboardTemplatesTable } from 'scenes/dashboard/dashboards/templates/DashboardTemplatesTable'\nimport { DeleteDashboardModal } from 'scenes/dashboard/DeleteDashboardModal'\nimport { DuplicateDashboardModal } from 'scenes/dashboard/DuplicateDashboardModal'\nimport { newDashboardLogic } from 'scenes/dashboard/newDashboardLogic'\nimport { NewDashboardModal } from 'scenes/dashboard/NewDashboardModal'\nimport { SceneExport } from 'scenes/sceneTypes'\n\nimport { dashboardsModel } from '~/models/dashboardsModel'\n\nimport { DashboardTemplateChooser } from '../DashboardTemplateChooser'\n\nexport const scene: SceneExport = {\n    component: Dashboards,\n    logic: dashboardsLogic,\n}\n\nexport function Dashboards(): JSX.Element {\n    const { dashboardsLoading } = useValues(dashboardsModel)\n    const { setCurrentTab } = useActions(dashboardsLogic)\n    const { dashboards, currentTab, isFiltering } = useValues(dashboardsLogic)\n    const { showNewDashboardModal } = useActions(newDashboardLogic)\n\n    const enabledTabs: LemonTab<DashboardsTab>[] = [\n        {\n            key: DashboardsTab.Dashboards,\n            label: 'Dashboards',\n        },\n        {\n            key: DashboardsTab.Templates,\n            label: 'Templates',\n        },\n    ]\n\n    return (\n        <div>\n            <NewDashboardModal />\n            <DuplicateDashboardModal />\n            <DeleteDashboardModal />\n            <PageHeader\n                buttons={\n                    <LemonButton\n                        data-attr=\"new-dashboard\"\n                        onClick={() => {\n                            showNewDashboardModal()\n                        }}\n                        type=\"primary\"\n                    >\n                        New dashboard\n                    </LemonButton>\n                }\n            />\n            <LemonTabs activeKey={currentTab} onChange={(newKey) => setCurrentTab(newKey)} tabs={enabledTabs} />\n            {currentTab === DashboardsTab.Templates ? (\n                <DashboardTemplatesTable />\n            ) : dashboardsLoading || dashboards.length > 0 || isFiltering ? (\n                <DashboardsTableContainer />\n            ) : (\n                <div className=\"mt-4\">\n                    <p>Create your first dashboard:</p>\n                    <DashboardTemplateChooser />\n                </div>\n            )}\n        </div>\n    )\n}\n", "import { LemonButton, LemonDivider } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonDialog } from 'lib/lemon-ui/LemonDialog'\nimport { LemonSnack } from 'lib/lemon-ui/LemonSnack/LemonSnack'\nimport { LemonTable, LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { dashboardTemplatesLogic } from 'scenes/dashboard/dashboards/templates/dashboardTemplatesLogic'\nimport { DashboardTemplateEditor } from 'scenes/dashboard/DashboardTemplateEditor'\nimport { dashboardTemplateEditorLogic } from 'scenes/dashboard/dashboardTemplateEditorLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { DashboardTemplateType } from '~/types'\n\nexport const DashboardTemplatesTable = (): JSX.Element | null => {\n    const { allTemplates, allTemplatesLoading } = useValues(dashboardTemplatesLogic)\n\n    const { openDashboardTemplateEditor, setDashboardTemplateId, deleteDashboardTemplate, updateDashboardTemplate } =\n        useActions(dashboardTemplateEditorLogic)\n\n    const { user } = useValues(userLogic)\n\n    const columns: LemonTableColumns<DashboardTemplateType> = [\n        {\n            title: 'Name',\n            dataIndex: 'template_name',\n            render: (_, { template_name }) => {\n                return <>{template_name}</>\n            },\n        },\n        {\n            title: 'Description',\n            dataIndex: 'dashboard_description',\n            render: (_, { dashboard_description }) => {\n                return <>{dashboard_description}</>\n            },\n        },\n        {\n            title: 'Type',\n            dataIndex: 'team_id',\n            render: (_, { scope }) => {\n                if (scope === 'global') {\n                    return <LemonSnack>Official</LemonSnack>\n                } else {\n                    return <LemonSnack>Team</LemonSnack>\n                }\n            },\n        },\n        {\n            width: 0,\n            render: (_, { id, scope }: DashboardTemplateType) => {\n                if (!user?.is_staff) {\n                    return null\n                }\n                return (\n                    <More\n                        overlay={\n                            <>\n                                <LemonButton\n                                    onClick={() => {\n                                        if (id === undefined) {\n                                            console.error('Dashboard template id not defined')\n                                            return\n                                        }\n                                        setDashboardTemplateId(id)\n                                        openDashboardTemplateEditor()\n                                    }}\n                                    fullWidth\n                                >\n                                    Edit\n                                </LemonButton>\n                                <LemonButton\n                                    onClick={() => {\n                                        if (id === undefined) {\n                                            console.error('Dashboard template id not defined')\n                                            return\n                                        }\n                                        updateDashboardTemplate({\n                                            id,\n                                            dashboardTemplateUpdates: {\n                                                scope: scope === 'global' ? 'team' : 'global',\n                                            },\n                                        })\n                                    }}\n                                    fullWidth\n                                >\n                                    Make visible to {scope === 'global' ? 'this team only' : 'everyone'}\n                                </LemonButton>\n\n                                <LemonDivider />\n                                <LemonButton\n                                    onClick={() => {\n                                        if (id === undefined) {\n                                            console.error('Dashboard template id not defined')\n                                            return\n                                        }\n                                        LemonDialog.open({\n                                            title: 'Delete dashboard template?',\n                                            description: 'This action cannot be undone.',\n                                            primaryButton: {\n                                                status: 'danger',\n                                                children: 'Delete',\n                                                onClick: () => {\n                                                    deleteDashboardTemplate(id)\n                                                },\n                                            },\n                                        })\n                                    }}\n                                    fullWidth\n                                    status=\"danger\"\n                                    disabledReason={\n                                        scope === 'global'\n                                            ? 'Cannot delete global dashboard templates, make them team only first'\n                                            : undefined\n                                    }\n                                >\n                                    Delete dashboard\n                                </LemonButton>\n                            </>\n                        }\n                    />\n                )\n            },\n        },\n    ]\n\n    return (\n        <>\n            <LemonTable\n                data-attr=\"dashboards-template-table\"\n                pagination={{ pageSize: 10 }}\n                dataSource={Object.values(allTemplates)}\n                columns={columns}\n                loading={allTemplatesLoading}\n                defaultSorting={{\n                    columnKey: 'name',\n                    order: 1,\n                }}\n                emptyState={<>There are no dashboard templates.</>}\n                nouns={['template', 'templates']}\n            />\n            <DashboardTemplateEditor />\n        </>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "DashboardTemplatesTable", "allTemplates", "allTemplatesLoading", "dashboardTemplatesLogic", "openDashboardTemplateEditor", "setDashboardTemplateId", "deleteDashboardTemplate", "updateDashboardTemplate", "dashboardTemplateEditorLogic", "user", "userLogic", "columns", "_", "template_name", "dashboard_description", "scope", "LemonSnack", "id", "More", "LemonButton", "LemonDivider", "LemonDialog", "LemonTable", "DashboardTemplateEditor", "import_jsx_runtime", "scene", "Dashboards", "dashboardsLogic", "dashboardsLoading", "dashboardsModel", "setCurrentTab", "dashboards", "currentTab", "isFiltering", "showNewDashboardModal", "newDashboardLogic", "enabledTabs", "NewDashboardModal", "DuplicateDashboardModal", "DeleteDashboardModal", "PageHeader", "LemonButton", "LemonTabs", "newKey", "DashboardTemplatesTable", "DashboardsTableContainer", "DashboardTemplateChooser"]
}
