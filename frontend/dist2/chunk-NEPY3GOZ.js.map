{
  "version": 3,
  "sources": ["../src/lib/components/AuthorizedUrlList/AuthorizedUrlList.tsx"],
  "sourcesContent": ["import { IconCopy, IconPencil, IconPlus, IconTrash } from '@posthog/icons'\nimport clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport { IconOpenInApp, IconRefresh } from 'lib/lemon-ui/icons'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonDialog } from 'lib/lemon-ui/LemonDialog'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { LemonInput } from 'lib/lemon-ui/LemonInput/LemonInput'\nimport { LemonTag } from 'lib/lemon-ui/LemonTag/LemonTag'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { useMemo } from 'react'\n\nimport { ExperimentIdType } from '~/types'\n\nimport { authorizedUrlListLogic, AuthorizedUrlListType, KeyedAppUrl } from './authorizedUrlListLogic'\n\nfunction EmptyState({\n    experimentId,\n    actionId,\n    type,\n}: {\n    type: AuthorizedUrlListType\n    actionId?: number | null\n    experimentId?: ExperimentIdType | null\n}): JSX.Element | null {\n    const logic = authorizedUrlListLogic({ experimentId: experimentId ?? null, actionId: actionId ?? null, type })\n    const { urlsKeyed, searchTerm, suggestionsLoading, isAddUrlFormVisible } = useValues(logic)\n    const { loadSuggestions } = useActions(logic)\n\n    const domainOrUrl = type === AuthorizedUrlListType.RECORDING_DOMAINS ? 'domain' : 'URL'\n\n    // Split suggestions and non-suggestions\n    const [suggestionURLs, authorizedURLs] = urlsKeyed.reduce(\n        ([suggestions, nonSuggestions], url) => {\n            if (url.type === 'suggestion') {\n                suggestions.push(url)\n            } else {\n                nonSuggestions.push(url)\n            }\n            return [suggestions, nonSuggestions]\n        },\n        [[], []] as KeyedAppUrl[][]\n    )\n\n    const children = useMemo(() => {\n        // If there are authorized URLs, never display this empty state\n        if (authorizedURLs.length > 0) {\n            return null\n        }\n\n        // If the add URL form is visible, don't show the empty state either\n        if (isAddUrlFormVisible) {\n            return null\n        }\n\n        // This means no suggested URLs and no search term\n        if (searchTerm.length > 0 && suggestionURLs.length === 0) {\n            return <>There are no authorized {domainOrUrl}s that match your search.</>\n        }\n\n        if (suggestionURLs.length > 0) {\n            return (\n                <p className=\"mb-0\">\n                    There are no authorized {domainOrUrl}s. <br />\n                    We've found some URLs you've used PostHog from in the last 3 days. Consider authorizing them.\n                    <br />\n                    <span>\n                        {type === AuthorizedUrlListType.RECORDING_DOMAINS &&\n                            ' When no domains are specified, recordings will be authorized on all domains.'}\n                    </span>\n                </p>\n            )\n        }\n\n        return (\n            <div className=\"flex flex-row items-center justify-between w-full\">\n                <p>\n                    <span className=\"font-bold\">There are no authorized {domainOrUrl}s.</span>\n                    <br />\n                    Add one to get started. When you send us events we'll suggest the ones that you should authorize.\n                    <br />\n                    <span>\n                        {type === AuthorizedUrlListType.RECORDING_DOMAINS &&\n                            ' When no domains are specified, recordings will be authorized on all domains.'}\n                    </span>\n                </p>\n                <div className=\"flex flex-col items-end gap-2\">\n                    <LemonButton\n                        onClick={loadSuggestions}\n                        disabled={suggestionsLoading}\n                        type=\"secondary\"\n                        icon={<IconRefresh />}\n                        data-attr=\"toolbar-add-url\"\n                    >\n                        {suggestionsLoading ? 'Fetching...' : 'Fetch suggestions'}\n                    </LemonButton>\n                    <span className=\"text-small text-secondary\">Sent an event? Refetch suggestions.</span>\n                </div>\n            </div>\n        )\n    }, [\n        authorizedURLs.length,\n        isAddUrlFormVisible,\n        searchTerm.length,\n        suggestionURLs.length,\n        suggestionsLoading,\n        type,\n        domainOrUrl,\n        loadSuggestions,\n    ])\n\n    return children ? <div className=\"border rounded p-4 text-secondary\">{children}</div> : null\n}\n\nexport interface AuthorizedUrlFormProps {\n    type: AuthorizedUrlListType\n    actionId?: number\n    experimentId?: ExperimentIdType\n    allowWildCards?: boolean\n}\n\nfunction AuthorizedUrlForm({ actionId, experimentId, type, allowWildCards }: AuthorizedUrlFormProps): JSX.Element {\n    const logic = authorizedUrlListLogic({\n        actionId: actionId ?? null,\n        experimentId: experimentId ?? null,\n        type,\n        allowWildCards,\n    })\n    const { isProposedUrlSubmitting } = useValues(logic)\n    const { cancelProposingUrl } = useActions(logic)\n\n    return (\n        <Form\n            logic={authorizedUrlListLogic}\n            props={{ actionId, type, experimentId, allowWildCards }}\n            formKey=\"proposedUrl\"\n            enableFormOnSubmit\n            className=\"w-full space-y-2\"\n        >\n            <LemonField name=\"url\">\n                <LemonInput\n                    autoFocus\n                    placeholder={\n                        allowWildCards\n                            ? 'Enter a URL or wildcard subdomain (e.g. https://*.posthog.com)'\n                            : 'Enter a URL (e.g. https://posthog.com)'\n                    }\n                    data-attr=\"url-input\"\n                />\n            </LemonField>\n            <div className=\"flex justify-end gap-2\">\n                <LemonButton type=\"secondary\" onClick={cancelProposingUrl}>\n                    Cancel\n                </LemonButton>\n                <LemonButton htmlType=\"submit\" type=\"primary\" disabled={isProposedUrlSubmitting} data-attr=\"url-save\">\n                    Save\n                </LemonButton>\n            </div>\n        </Form>\n    )\n}\n\nexport interface AuthorizedUrlListProps {\n    actionId?: number\n    experimentId?: ExperimentIdType\n    query?: string | null\n    type: AuthorizedUrlListType\n    allowWildCards?: boolean\n}\n\nexport function AuthorizedUrlList({\n    actionId,\n    experimentId,\n    query,\n    type,\n    addText = 'Add',\n    allowWildCards,\n}: AuthorizedUrlListProps & { addText?: string }): JSX.Element {\n    const logic = authorizedUrlListLogic({\n        experimentId: experimentId ?? null,\n        actionId: actionId ?? null,\n        type,\n        query,\n        allowWildCards,\n    })\n\n    const {\n        urlsKeyed,\n        searchTerm,\n        launchUrl,\n        editUrlIndex,\n        isAddUrlFormVisible,\n        onlyAllowDomains,\n        manualLaunchParamsLoading,\n    } = useValues(logic)\n    const { addUrl, removeUrl, setSearchTerm, newUrl, setEditUrlIndex, copyLaunchCode } = useActions(logic)\n\n    const noAuthorizedUrls = !urlsKeyed.some((url) => url.type === 'authorized')\n\n    return (\n        <div>\n            <div className=\"flex items-center mb-4 gap-2 justify-between\">\n                <LemonInput\n                    placeholder={`Search for authorized ${onlyAllowDomains ? 'domains' : 'URLs'}`}\n                    onChange={setSearchTerm}\n                    value={searchTerm}\n                    className=\"w-full\"\n                />\n                <LemonButton onClick={newUrl} type=\"secondary\" icon={<IconPlus />} data-attr=\"toolbar-add-url\">\n                    {addText}\n                </LemonButton>\n            </div>\n            <div className=\"space-y-2\">\n                <EmptyState experimentId={experimentId} actionId={actionId} type={type} />\n\n                {isAddUrlFormVisible && (\n                    <div className=\"border rounded p-2 bg-surface-primary\">\n                        <AuthorizedUrlForm\n                            type={type}\n                            actionId={actionId}\n                            experimentId={experimentId}\n                            allowWildCards={allowWildCards}\n                        />\n                    </div>\n                )}\n\n                {urlsKeyed.map((keyedURL, index) => {\n                    const isFirstSuggestion = keyedURL.originalIndex === 0 && keyedURL.type === 'suggestion'\n\n                    return editUrlIndex === index ? (\n                        <div className=\"border rounded p-2 bg-surface-primary\">\n                            <AuthorizedUrlForm\n                                type={type}\n                                actionId={actionId}\n                                experimentId={experimentId}\n                                allowWildCards={allowWildCards}\n                            />\n                        </div>\n                    ) : (\n                        <div\n                            key={index}\n                            className={clsx('border rounded flex items-center p-2 pl-4 bg-surface-primary')}\n                        >\n                            {keyedURL.type === 'suggestion' && (\n                                <Tooltip title={'Seen in ' + keyedURL.count + ' events in the last 3 days'}>\n                                    <LemonTag type=\"highlight\" className=\"mr-4 uppercase cursor-pointer\">\n                                        Suggestion\n                                    </LemonTag>\n                                </Tooltip>\n                            )}\n                            <span title={keyedURL.url} className=\"flex-1 truncate\">\n                                {keyedURL.url}\n                            </span>\n                            <div className=\"Actions flex space-x-2 shrink-0\">\n                                {keyedURL.type === 'suggestion' ? (\n                                    <LemonButton\n                                        onClick={() => addUrl(keyedURL.url)}\n                                        icon={<IconPlus />}\n                                        data-attr=\"toolbar-apply-suggestion\"\n                                        // If there are no authorized urls, highglight the first suggestion\n                                        type={noAuthorizedUrls && isFirstSuggestion ? 'primary' : undefined}\n                                        active={noAuthorizedUrls && isFirstSuggestion}\n                                    >\n                                        Apply suggestion\n                                    </LemonButton>\n                                ) : (\n                                    <>\n                                        <LemonButton\n                                            icon={<IconOpenInApp />}\n                                            to={\n                                                // toolbar urls are sent through the backend to be validated\n                                                // and have toolbar auth information added\n                                                type === AuthorizedUrlListType.TOOLBAR_URLS\n                                                    ? launchUrl(keyedURL.url)\n                                                    : // other urls are simply opened directly\n                                                      `${keyedURL.url}${query ?? ''}`\n                                            }\n                                            targetBlank\n                                            tooltip={\n                                                type === AuthorizedUrlListType.TOOLBAR_URLS\n                                                    ? 'Launch toolbar'\n                                                    : 'Launch url'\n                                            }\n                                            center\n                                            data-attr=\"toolbar-open\"\n                                            type=\"secondary\"\n                                            disabledReason={\n                                                keyedURL.url.includes('*')\n                                                    ? 'Wildcard domains cannot be launched'\n                                                    : undefined\n                                            }\n                                            sideAction={{\n                                                dropdown: {\n                                                    placement: 'bottom-start',\n                                                    overlay: (\n                                                        <div className=\"px-2 py-1\">\n                                                            <h3>If launching the toolbar didn't work, </h3>\n                                                            <p>\n                                                                You can copy the launch code and paste it into the\n                                                                browser console on your site.\n                                                            </p>\n                                                            <p>NB you need to have added posthog to the `window`</p>\n                                                            <LemonButton\n                                                                icon={<IconCopy />}\n                                                                size=\"small\"\n                                                                className=\"float-right\"\n                                                                type=\"primary\"\n                                                                data-attr=\"copy-manual-toolbar-launch-code\"\n                                                                onClick={() => {\n                                                                    copyLaunchCode(keyedURL.url)\n                                                                }}\n                                                                loading={manualLaunchParamsLoading}\n                                                            >\n                                                                Copy launch code\n                                                            </LemonButton>\n                                                        </div>\n                                                    ),\n                                                },\n                                                'data-attr': 'launch-toolbar-sideaction-dropdown',\n                                            }}\n                                        >\n                                            Launch\n                                        </LemonButton>\n\n                                        <LemonButton\n                                            icon={<IconPencil />}\n                                            onClick={() => setEditUrlIndex(keyedURL.originalIndex)}\n                                            tooltip=\"Edit\"\n                                            center\n                                        />\n\n                                        <LemonButton\n                                            icon={<IconTrash />}\n                                            tooltip={`Remove ${onlyAllowDomains ? 'domain' : 'URL'}`}\n                                            center\n                                            onClick={() => {\n                                                LemonDialog.open({\n                                                    title: <>Remove {keyedURL.url} ?</>,\n                                                    description: `Are you sure you want to remove this authorized ${\n                                                        onlyAllowDomains ? 'domain' : 'URL'\n                                                    }?`,\n                                                    primaryButton: {\n                                                        status: 'danger',\n                                                        children: 'Remove',\n                                                        onClick: () => removeUrl(index),\n                                                    },\n                                                    secondaryButton: {\n                                                        children: 'Cancel',\n                                                    },\n                                                })\n                                            }}\n                                        />\n                                    </>\n                                )}\n                            </div>\n                        </div>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_kea_forms", "import_react", "import_jsx_runtime", "EmptyState", "experimentId", "actionId", "type", "logic", "authorizedUrlListLogic", "urlsKeyed", "searchTerm", "suggestionsLoading", "isAddUrlFormVisible", "loadSuggestions", "domainOrUrl", "suggestionURLs", "authorizedURLs", "suggestions", "nonSuggestions", "url", "children", "LemonButton", "IconRefresh", "AuthorizedUrlForm", "allowWildCards", "isProposedUrlSubmitting", "cancelProposingUrl", "LemonField", "LemonInput", "AuthorizedUrlList", "query", "addText", "launchUrl", "editUrlIndex", "onlyAllowDomains", "manualLaunchParamsLoading", "addUrl", "removeUrl", "setSearchTerm", "newUrl", "setEditUrlIndex", "copyLaunchCode", "noAuthorizedUrls", "IconPlus", "keyedURL", "index", "isFirstSuggestion", "clsx", "Tooltip", "LemonTag", "IconOpenInApp", "IconCopy", "IconPencil", "IconTrash", "LemonDialog"]
}
