{
  "version": 3,
  "sources": ["../src/scenes/authentication/InviteSignup.tsx", "../src/scenes/authentication/inviteSignupLogic.ts"],
  "sourcesContent": ["import { LemonButton, LemonDivider, LemonInput } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport { BridgePage } from 'lib/components/BridgePage/BridgePage'\nimport PasswordStrength from 'lib/components/PasswordStrength'\nimport SignupRoleSelect from 'lib/components/SignupRoleSelect'\nimport { SocialLoginButtons, SSOEnforcedLoginButton } from 'lib/components/SocialLoginButton/SocialLoginButton'\nimport { IconChevronLeft, IconChevronRight } from 'lib/lemon-ui/icons'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { ProfilePicture } from 'lib/lemon-ui/ProfilePicture'\nimport { SpinnerOverlay } from 'lib/lemon-ui/Spinner/Spinner'\nimport { useEffect } from 'react'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { PrevalidatedInvite } from '~/types'\n\nimport { ErrorCodes, inviteSignupLogic } from './inviteSignupLogic'\nimport { loginLogic } from './loginLogic'\nimport { SupportModalButton } from './SupportModalButton'\n\nexport const scene: SceneExport = {\n    component: InviteSignup,\n    logic: inviteSignupLogic,\n}\n\nconst UTM_TAGS = 'utm_medium=in-product&utm_campaign=invite-signup'\n\ninterface ErrorMessage {\n    title: string\n    detail: JSX.Element | string\n    actions: JSX.Element\n}\n\nfunction HelperLinks(): JSX.Element {\n    return (\n        <div className=\"font-bold text-center\">\n            <Link to=\"/\">App Home</Link>\n            <span className=\"mx-2\">|</span>\n            <Link to={`https://posthog.com?${UTM_TAGS}&utm_message=invalid-invite`}>PostHog Website</Link>\n        </div>\n    )\n}\n\nfunction BackToPostHog(): JSX.Element {\n    return (\n        <LemonButton type=\"secondary\" icon={<IconChevronLeft />} center fullWidth to={urls.default()}>\n            Go back to PostHog\n        </LemonButton>\n    )\n}\n\nfunction ErrorView(): JSX.Element | null {\n    const { error } = useValues(inviteSignupLogic)\n    const { user } = useValues(userLogic)\n\n    const ErrorMessages: Record<ErrorCodes, ErrorMessage> = {\n        [ErrorCodes.InvalidInvite]: {\n            title: 'Oops! This invite link is invalid or has expired',\n            detail: (\n                <>\n                    {error?.detail} If you believe this is a mistake, please contact whoever created this invite and{' '}\n                    <b>ask them for a new invite</b>.\n                </>\n            ),\n            actions: user ? <BackToPostHog /> : <HelperLinks />,\n        },\n        [ErrorCodes.InvalidRecipient]: {\n            title: \"Oops! This invite link can't be used\",\n            detail: (\n                <>\n                    <div>{error?.detail}</div>\n                    <div className=\"mt-4\">\n                        {user ? (\n                            <span>\n                                You can either log out and create a new account under the new email address or ask the\n                                organization admin to send a{' '}\n                                <b>new invite to the email address on your account, {user?.email}</b>.\n                            </span>\n                        ) : (\n                            <div>\n                                You need to log in with the email address above, or create your own password.\n                                <div className=\"mt-4\">\n                                    <LemonButton\n                                        icon={<IconChevronLeft />}\n                                        to={window.location.pathname}\n                                        disableClientSideRouting\n                                    >\n                                        Try again\n                                    </LemonButton>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </>\n            ),\n            actions: user ? <BackToPostHog /> : <HelperLinks />,\n        },\n        [ErrorCodes.Unknown]: {\n            title: 'Oops! We could not validate this invite link',\n            detail: `${\n                error?.detail || ''\n            } There was an issue with your invite link, please try again in a few seconds. If the problem persists, contact us.`,\n            actions: user ? <BackToPostHog /> : <HelperLinks />,\n        },\n    }\n\n    if (!error) {\n        return null\n    }\n\n    return (\n        <BridgePage view=\"signup-error\" hedgehog message=\"Oops!\" footer={<SupportModalButton />}>\n            <h2>{ErrorMessages[error.code].title}</h2>\n            <div className=\"error-message\">{ErrorMessages[error.code].detail}</div>\n            <LemonDivider dashed className=\"my-4\" />\n            <div>{ErrorMessages[error.code].actions}</div>\n        </BridgePage>\n    )\n}\n\nfunction AuthenticatedAcceptInvite({ invite }: { invite: PrevalidatedInvite }): JSX.Element {\n    const { user } = useValues(userLogic)\n    const { acceptInvite } = useActions(inviteSignupLogic)\n    const { acceptedInviteLoading, acceptedInvite } = useValues(inviteSignupLogic)\n\n    return (\n        <BridgePage\n            view=\"accept-invite\"\n            hedgehog\n            message={user?.first_name ? `Hey ${user?.first_name}!` : 'Hello!'}\n            footer={<SupportModalButton name={user?.first_name} email={user?.email} />}\n        >\n            <div className=\"space-y-2\">\n                <h2>You have been invited to join {invite.organization_name}</h2>\n                <div>\n                    You will accept the invite under your <b>existing PostHog account</b> ({user?.email})\n                </div>\n                {user && (\n                    <div\n                        className=\"border rounded-lg border-dashed flex items-center gap-2 px-2 py-1\"\n                        data-attr=\"top-navigation-whoami\"\n                    >\n                        <ProfilePicture user={user} />\n                        <div className=\"\">\n                            <div className=\"font-bold\">{user.first_name}</div>\n                            <div>{user.organization?.name}</div>\n                        </div>\n                    </div>\n                )}\n                <div>\n                    You can change organizations at any time by clicking on the dropdown at the top right corner of the\n                    navigation bar.\n                </div>\n                <div>\n                    {!acceptedInvite ? (\n                        <>\n                            <LemonButton\n                                type=\"primary\"\n                                center\n                                fullWidth\n                                onClick={() => acceptInvite()}\n                                loading={acceptedInviteLoading}\n                            >\n                                Accept invite\n                            </LemonButton>\n                            <div className=\"mt-2\">\n                                <LemonButton type=\"secondary\" center fullWidth icon={<IconChevronLeft />} to=\"/\">\n                                    Go back to PostHog\n                                </LemonButton>\n                            </div>\n                        </>\n                    ) : (\n                        <LemonButton\n                            type=\"secondary\"\n                            center\n                            fullWidth\n                            sideIcon={<IconChevronRight />}\n                            onClick={() => (window.location.href = '/')}\n                        >\n                            Go to PostHog\n                        </LemonButton>\n                    )}\n                </div>\n            </div>\n        </BridgePage>\n    )\n}\n\nfunction UnauthenticatedAcceptInvite({ invite }: { invite: PrevalidatedInvite }): JSX.Element {\n    const { isSignupSubmitting, validatedPassword } = useValues(inviteSignupLogic)\n    const { preflight } = useValues(preflightLogic)\n\n    const { precheck } = useActions(loginLogic)\n    const { precheckResponse, precheckResponseLoading } = useValues(loginLogic)\n\n    const areExtraFieldsHidden = precheckResponse.sso_enforcement\n\n    useEffect(() => {\n        precheck({ email: invite.target_email })\n    }, [invite.target_email])\n\n    return (\n        <BridgePage\n            view=\"invites-signup\"\n            hedgehog\n            message={\n                <>\n                    Welcome to\n                    <br /> PostHog{preflight?.cloud ? ' Cloud' : ''}!\n                </>\n            }\n            leftContainerContent={\n                <div className=\"mb-8 text-secondary\">\n                    <div className=\"font-semibold flex flex-col gap-2 text-center items-center text-lg\">\n                        <span>You've been invited to join</span>\n                        <span className=\"text-4xl font-bold border-b border-dashed pb-2\">\n                            {invite?.organization_name || 'us'}\n                        </span>\n                        <span>on PostHog</span>\n                    </div>\n                </div>\n            }\n            footer={<SupportModalButton name={invite.first_name} email={invite.target_email} />}\n        >\n            <h2 className=\"text-center\">Create your PostHog account</h2>\n            <Form logic={inviteSignupLogic} formKey=\"signup\" className=\"space-y-4\" enableFormOnSubmit>\n                <LemonField.Pure label=\"Email\">\n                    <LemonInput type=\"email\" disabled value={invite?.target_email} />\n                </LemonField.Pure>\n                {!areExtraFieldsHidden && (\n                    <>\n                        <LemonField\n                            name=\"password\"\n                            label={\n                                <div className=\"flex flex-1 items-center justify-between\">\n                                    <span>Password</span>\n                                    <PasswordStrength validatedPassword={validatedPassword} />\n                                </div>\n                            }\n                        >\n                            <LemonInput\n                                type=\"password\"\n                                className=\"ph-ignore-input\"\n                                data-attr=\"password\"\n                                placeholder=\"\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\"\n                                autoComplete=\"new-password\"\n                                autoFocus={window.screen.width >= 768} // do not autofocus on small-width screens\n                                disabled={isSignupSubmitting}\n                            />\n                        </LemonField>\n\n                        <LemonField\n                            name=\"first_name\"\n                            label=\"First Name\"\n                            help={\n                                invite?.first_name\n                                    ? 'Your name was provided in the invite, feel free to change it.'\n                                    : undefined\n                            }\n                        >\n                            <LemonInput data-attr=\"first_name\" placeholder=\"Jane\" />\n                        </LemonField>\n\n                        <SignupRoleSelect />\n                    </>\n                )}\n\n                {/* Show regular login button if SSO is not enforced */}\n                {!precheckResponse.sso_enforcement && (\n                    <LemonButton\n                        type=\"primary\"\n                        status=\"alt\"\n                        htmlType=\"submit\"\n                        data-attr=\"password-signup\"\n                        fullWidth\n                        center\n                        loading={isSignupSubmitting || precheckResponseLoading}\n                        size=\"large\"\n                    >\n                        Continue\n                    </LemonButton>\n                )}\n\n                {/* Show enforced SSO button if required */}\n                {precheckResponse.sso_enforcement && (\n                    <SSOEnforcedLoginButton\n                        provider={precheckResponse.sso_enforcement}\n                        email={invite?.target_email}\n                        actionText=\"Continue\"\n                        extraQueryParams={invite ? { invite_id: invite.id } : undefined}\n                    />\n                )}\n\n                {/* Show optional SAML SSO button if available */}\n                {precheckResponse.saml_available && !precheckResponse.sso_enforcement && (\n                    <SSOEnforcedLoginButton\n                        provider=\"saml\"\n                        email={invite?.target_email}\n                        actionText=\"Continue\"\n                        extraQueryParams={invite ? { invite_id: invite.id } : undefined}\n                    />\n                )}\n            </Form>\n            <div className=\"mt-4 text-center text-secondary\">\n                Already have an account? <Link to=\"/login\">Log in</Link>\n            </div>\n            <div className=\"mt-4 text-center text-secondary\">\n                By clicking continue you agree to our{' '}\n                <Link to=\"https://posthog.com/terms\" target=\"_blank\">\n                    Terms of Service\n                </Link>{' '}\n                and{' '}\n                <Link to=\"https://posthog.com/privacy\" target=\"_blank\">\n                    Privacy Policy\n                </Link>\n                .\n            </div>\n            {!areExtraFieldsHidden && (\n                <SocialLoginButtons\n                    className=\"mb-4\"\n                    title=\"Or sign in with\"\n                    caption={`Remember to log in with ${invite?.target_email}`}\n                    captionLocation=\"bottom\"\n                    topDivider\n                    extraQueryParams={invite ? { invite_id: invite.id } : undefined}\n                />\n            )}\n        </BridgePage>\n    )\n}\n\nexport function InviteSignup(): JSX.Element {\n    const { invite, inviteLoading } = useValues(inviteSignupLogic)\n    const { user } = useValues(userLogic)\n\n    if (inviteLoading) {\n        return <SpinnerOverlay sceneLevel />\n    }\n\n    return (\n        <div className={clsx('InviteSignup', !!user && 'InviteSignup--authenticated')}>\n            <ErrorView />\n            {invite &&\n                (user ? (\n                    <AuthenticatedAcceptInvite invite={invite} />\n                ) : (\n                    <UnauthenticatedAcceptInvite invite={invite} />\n                ))}\n        </div>\n    )\n}\n", "import { actions, kea, listeners, path, reducers, selectors } from 'kea'\nimport { forms } from 'kea-forms'\nimport { loaders } from 'kea-loaders'\nimport { urlToAction } from 'kea-router'\nimport api from 'lib/api'\nimport { ValidatedPasswordResult, validatePassword } from 'lib/components/PasswordStrength'\n\nimport { PrevalidatedInvite } from '~/types'\n\nimport type { inviteSignupLogicType } from './inviteSignupLogicType'\n\nexport enum ErrorCodes {\n    InvalidInvite = 'invalid_invite',\n    InvalidRecipient = 'invalid_recipient',\n    Unknown = 'unknown',\n}\n\nexport interface ErrorInterface {\n    code: ErrorCodes\n    detail?: string\n}\n\nexport interface AcceptInvitePayloadInterface {\n    first_name?: string\n    password: string\n    role_at_organization?: string\n}\n\nexport const inviteSignupLogic = kea<inviteSignupLogicType>([\n    path(['scenes', 'authentication', 'inviteSignupLogic']),\n    actions({\n        setError: (payload: ErrorInterface) => ({ payload }),\n    }),\n    reducers({\n        error: [\n            null as ErrorInterface | null,\n            {\n                setError: (_, { payload }) => payload,\n            },\n        ],\n    }),\n    loaders(({ actions, values }) => ({\n        invite: [\n            null as PrevalidatedInvite | null,\n            {\n                prevalidateInvite: async (id: string, breakpoint) => {\n                    breakpoint()\n\n                    try {\n                        return await api.get(`api/signup/${id}/`)\n                    } catch (e: any) {\n                        if (e.status === 400) {\n                            if (e.code === 'invalid_recipient') {\n                                actions.setError({ code: ErrorCodes.InvalidRecipient, detail: e.detail })\n                            } else if (e.code === 'account_exists') {\n                                location.href = e.detail\n                            } else {\n                                actions.setError({ code: ErrorCodes.InvalidInvite, detail: e.detail })\n                            }\n                        } else {\n                            actions.setError({ code: ErrorCodes.Unknown })\n                        }\n                        return null\n                    }\n                },\n            },\n        ],\n        acceptedInvite: [\n            null,\n            {\n                acceptInvite: async (payload?: AcceptInvitePayloadInterface, breakpoint?) => {\n                    breakpoint()\n                    if (!values.invite) {\n                        return null\n                    }\n                    return await api.create(`api/signup/${values.invite.id}/`, payload)\n                },\n            },\n        ],\n    })),\n    forms(({ actions, values }) => ({\n        signup: {\n            defaults: { role_at_organization: '' } as AcceptInvitePayloadInterface,\n            errors: ({ password, first_name, role_at_organization }) => ({\n                password: !password\n                    ? 'Please enter your password to continue'\n                    : values.validatedPassword.feedback || undefined,\n                first_name: !first_name ? 'Please enter your name' : undefined,\n                role_at_organization: !role_at_organization ? 'Please select your role to continue' : undefined,\n            }),\n            submit: async (payload, breakpoint) => {\n                breakpoint()\n\n                if (!values.invite) {\n                    return\n                }\n\n                try {\n                    const res = await api.create(`api/signup/${values.invite.id}/`, payload)\n                    location.href = res.redirect_url || '/' // hard refresh because the current_organization changed\n                } catch (e) {\n                    actions.setSignupManualErrors({\n                        generic: {\n                            code: (e as Record<string, any>).code,\n                            detail: (e as Record<string, any>).detail,\n                        },\n                    })\n                    throw e\n                }\n            },\n        },\n    })),\n    selectors({\n        validatedPassword: [\n            (s) => [s.signup],\n            ({ password }): ValidatedPasswordResult => {\n                return validatePassword(password)\n            },\n        ],\n    }),\n    listeners(({ actions }) => ({\n        prevalidateInviteSuccess: ({ invite }) => {\n            if (invite?.first_name) {\n                actions.setSignupValue('first_name', invite.first_name)\n            }\n        },\n    })),\n    urlToAction(({ actions }) => ({\n        '/signup/*': ({ _: id }, { error_code, error_detail }) => {\n            if (error_code) {\n                if ((Object.values(ErrorCodes) as string[]).includes(error_code)) {\n                    actions.setError({ code: error_code as ErrorCodes, detail: error_detail })\n                } else {\n                    actions.setError({ code: ErrorCodes.Unknown, detail: error_detail })\n                }\n            } else if (id) {\n                actions.prevalidateInvite(id)\n            }\n        },\n    })),\n])\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_kea_forms", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_kea_loaders", "import_kea_router", "ErrorCodes", "inviteSignupLogic", "payload", "_", "actions", "values", "id", "breakpoint", "api_default", "e", "password", "first_name", "role_at_organization", "res", "s", "validatePassword", "invite", "error_code", "error_detail", "import_jsx_runtime", "scene", "InviteSignup", "inviteSignupLogic", "UTM_TAGS", "HelperLinks", "Link", "BackToPostHog", "LemonButton", "IconChevronLeft", "urls", "ErrorView", "error", "user", "userLogic", "ErrorMessages", "BridgePage", "SupportModalButton", "LemonDivider", "AuthenticatedAcceptInvite", "invite", "acceptInvite", "acceptedInviteLoading", "acceptedInvite", "ProfilePicture", "IconChevronRight", "UnauthenticatedAcceptInvite", "isSignupSubmitting", "validatedPassword", "preflight", "preflightLogic", "precheck", "loginLogic", "precheckResponse", "precheckResponseLoading", "areExtraFieldsHidden", "LemonField", "LemonInput", "PasswordStrength", "SignupRoleSelect", "SSOEnforcedLoginButton", "SocialLoginButtons", "inviteLoading", "SpinnerOverlay", "clsx"]
}
