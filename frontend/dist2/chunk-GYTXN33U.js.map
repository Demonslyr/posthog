{
  "version": 3,
  "sources": ["../../products/llm_observability/frontend/LLMObservabilityUsers.tsx", "../../products/llm_observability/frontend/llmObservabilityLogic.tsx", "../../products/llm_observability/frontend/urls.ts"],
  "sourcesContent": ["import { useActions, useValues } from 'kea'\nimport { combineUrl } from 'kea-router'\nimport { PersonDisplay } from 'scenes/persons/PersonDisplay'\n\nimport { DataTable } from '~/queries/nodes/DataTable/DataTable'\nimport { isHogQLQuery } from '~/queries/utils'\nimport { PropertyFilterType } from '~/types'\n\nimport { llmObservabilityLogic } from './llmObservabilityLogic'\nimport { urls } from './urls'\n\nconst mapPerson = (person: any): { distinct_id: string; created_at: string; properties: Record<string, any> } => {\n    return {\n        distinct_id: Array.isArray(person) && person.length > 0 ? person[0] : '',\n        created_at: Array.isArray(person) && person.length > 1 ? person[1] : '',\n        properties: Array.isArray(person) && person.length > 2 ? person[2] : {},\n    }\n}\n\nexport function LLMObservabilityUsers(): JSX.Element {\n    const { setDates, setShouldFilterTestAccounts, setPropertyFilters } = useActions(llmObservabilityLogic)\n    const { usersQuery } = useValues(llmObservabilityLogic)\n\n    return (\n        <DataTable\n            query={usersQuery}\n            setQuery={(query) => {\n                if (!isHogQLQuery(query.source)) {\n                    console.warn('LLMObservabilityUsers received a non-events query:', query.source)\n                    return\n                }\n                const { filters = {} } = query.source\n                const { dateRange = {} } = filters\n                setDates(dateRange.date_from || null, dateRange.date_to || null)\n                setShouldFilterTestAccounts(filters.filterTestAccounts || false)\n                setPropertyFilters(filters.properties || [])\n            }}\n            context={{\n                columns: {\n                    user: {\n                        title: 'Person',\n                        render: function RenderPerson(x) {\n                            const person = mapPerson(x.value)\n                            return (\n                                <PersonDisplay\n                                    person={person}\n                                    withIcon\n                                    noPopover\n                                    href={\n                                        combineUrl(urls.llmObservabilityTraces(), {\n                                            filters: [\n                                                {\n                                                    type: PropertyFilterType.HogQL,\n                                                    key: `distinct_id == '${person.distinct_id}'`,\n                                                    value: null,\n                                                },\n                                            ],\n                                        }).url\n                                    }\n                                />\n                            )\n                        },\n                    },\n                    first_seen: {\n                        title: 'First Seen',\n                    },\n                    last_seen: {\n                        title: 'Last Seen',\n                    },\n                    traces: {\n                        title: 'Traces (count)',\n                    },\n                    generations: {\n                        title: 'Generations (count)',\n                    },\n                    total_cost: {\n                        title: 'Total Cost (USD)',\n                        render: function RenderCost({ value }) {\n                            if (!value || !Number(value)) {\n                                return <span>N/A</span>\n                            }\n                            return <span>${Number(value).toFixed(4)}</span>\n                        },\n                    },\n                },\n            }}\n            uniqueKey=\"llm-observability-users\"\n        />\n    )\n}\n", "import { actions, afterMount, connect, kea, path, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport { actionToUrl, router, urlToAction } from 'kea-router'\nimport api from 'lib/api'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { dayjs } from 'lib/dayjs'\nimport { objectsEqual } from 'lib/utils'\nimport { isDefinitionStale } from 'lib/utils/definitions'\nimport { sceneLogic } from 'scenes/sceneLogic'\nimport { urls } from 'scenes/urls'\n\nimport { groupsModel } from '~/models/groupsModel'\nimport { DataTableNode, NodeKind, TrendsQuery } from '~/queries/schema/schema-general'\nimport { isAnyPropertyFilters } from '~/queries/schema-guards'\nimport { QueryContext } from '~/queries/types'\nimport {\n    AnyPropertyFilter,\n    BaseMathType,\n    ChartDisplayType,\n    EventDefinitionType,\n    HogQLMathType,\n    PropertyFilterType,\n    PropertyMathType,\n    PropertyOperator,\n} from '~/types'\n\nimport type { llmObservabilityLogicType } from './llmObservabilityLogicType'\n\nexport const LLM_OBSERVABILITY_DATA_COLLECTION_NODE_ID = 'llm-observability-data'\n\nconst INITIAL_DASHBOARD_DATE_FROM = '-7d' as string | null\nconst INITIAL_EVENTS_DATE_FROM = '-1d' as string | null\nconst INITIAL_DATE_TO = null as string | null\n\nexport interface QueryTile {\n    title: string\n    description?: string\n    query: TrendsQuery\n    context?: QueryContext\n    layout?: {\n        className?: string\n    }\n}\n\nexport const llmObservabilityLogic = kea<llmObservabilityLogicType>([\n    path(['products', 'llm_observability', 'frontend', 'llmObservabilityLogic']),\n\n    connect({ values: [sceneLogic, ['sceneKey'], groupsModel, ['groupsEnabled']] }),\n\n    actions({\n        setDates: (dateFrom: string | null, dateTo: string | null) => ({ dateFrom, dateTo }),\n        setDashboardDateFilter: (dateFrom: string | null, dateTo: string | null) => ({ dateFrom, dateTo }),\n        setShouldFilterTestAccounts: (shouldFilterTestAccounts: boolean) => ({ shouldFilterTestAccounts }),\n        setPropertyFilters: (propertyFilters: AnyPropertyFilter[]) => ({ propertyFilters }),\n        setGenerationsQuery: (query: DataTableNode) => ({ query }),\n    }),\n\n    reducers({\n        dateFilter: [\n            {\n                dateFrom: INITIAL_EVENTS_DATE_FROM,\n                dateTo: INITIAL_DATE_TO,\n            },\n            {\n                setDates: (_, { dateFrom, dateTo }) => ({ dateFrom, dateTo }),\n            },\n        ],\n\n        dashboardDateFilter: [\n            {\n                dateFrom: INITIAL_DASHBOARD_DATE_FROM,\n                dateTo: INITIAL_DATE_TO,\n            },\n            {\n                setDates: (_, { dateFrom, dateTo }) => ({ dateFrom, dateTo }),\n            },\n        ],\n\n        shouldFilterTestAccounts: [\n            false,\n            {\n                setShouldFilterTestAccounts: (_, { shouldFilterTestAccounts }) => shouldFilterTestAccounts,\n            },\n        ],\n\n        propertyFilters: [\n            [] as AnyPropertyFilter[],\n            {\n                setPropertyFilters: (_, { propertyFilters }) => propertyFilters,\n            },\n        ],\n\n        generationsQueryOverride: [\n            null as DataTableNode | null,\n            {\n                setGenerationsQuery: (_, { query }) => query,\n            },\n        ],\n    }),\n\n    loaders({\n        hasSentAiGenerationEvent: {\n            __default: undefined as boolean | undefined,\n            loadAIEventDefinition: async (): Promise<boolean> => {\n                const aiGenerationDefinition = await api.eventDefinitions.list({\n                    event_type: EventDefinitionType.Event,\n                    search: '$ai_generation',\n                })\n\n                // no need to worry about pagination here, event names beginning with $ are reserved, and we're not\n                // going to add enough reserved event names that match this search term to cause problems\n                const definition = aiGenerationDefinition.results.find((r) => r.name === '$ai_generation')\n                if (definition && !isDefinitionStale(definition)) {\n                    return true\n                }\n                return false\n            },\n        },\n    }),\n\n    selectors({\n        activeTab: [\n            (s) => [s.sceneKey],\n            (sceneKey) => {\n                if (sceneKey === 'llmObservabilityGenerations') {\n                    return 'generations'\n                } else if (sceneKey === 'llmObservabilityTraces') {\n                    return 'traces'\n                } else if (sceneKey === 'llmObservabilityUsers') {\n                    return 'users'\n                }\n                return 'dashboard'\n            },\n        ],\n\n        tiles: [\n            (s) => [s.dashboardDateFilter, s.shouldFilterTestAccounts, s.propertyFilters],\n            (dashboardDateFilter, shouldFilterTestAccounts, propertyFilters): QueryTile[] => [\n                {\n                    title: 'Traces',\n                    query: {\n                        kind: NodeKind.TrendsQuery,\n                        series: [\n                            {\n                                event: '$ai_generation',\n                                name: '$ai_generation',\n                                kind: NodeKind.EventsNode,\n                                math: HogQLMathType.HogQL,\n                                math_hogql: 'COUNT(DISTINCT properties.$ai_trace_id)',\n                            },\n                        ],\n                        dateRange: { date_from: dashboardDateFilter.dateFrom, date_to: dashboardDateFilter.dateTo },\n                        properties: propertyFilters,\n                        filterTestAccounts: shouldFilterTestAccounts,\n                    },\n                    context: {\n                        groupTypeLabel: 'traces',\n                        onDataPointClick: (series) => {\n                            if (typeof series.day === 'string') {\n                                // NOTE: This assumes the chart is day-by-day\n                                const dayStart = dayjs(series.day).startOf('day')\n                                router.actions.push(urls.llmObservabilityTraces(), {\n                                    ...router.values.searchParams,\n                                    date_from: dayStart.format('YYYY-MM-DD[T]HH:mm:ss'),\n                                    date_to: dayStart\n                                        .add(1, 'day')\n                                        .subtract(1, 'second')\n                                        .format('YYYY-MM-DD[T]HH:mm:ss'),\n                                })\n                            }\n                        },\n                    },\n                },\n                {\n                    title: 'Generative AI users',\n                    description: 'To count users, set `distinct_id` in LLM tracking.',\n                    query: {\n                        kind: NodeKind.TrendsQuery,\n                        series: [\n                            {\n                                event: '$ai_generation',\n                                name: '$ai_generation',\n                                kind: NodeKind.EventsNode,\n                                math: BaseMathType.UniqueUsers,\n                            },\n                        ],\n                        dateRange: { date_from: dashboardDateFilter.dateFrom, date_to: dashboardDateFilter.dateTo },\n                        properties: propertyFilters.concat({\n                            type: PropertyFilterType.HogQL,\n                            key: 'distinct_id != properties.$ai_trace_id',\n                        }),\n                        filterTestAccounts: shouldFilterTestAccounts,\n                    },\n                },\n                {\n                    title: 'Total cost (USD)',\n                    query: {\n                        kind: NodeKind.TrendsQuery,\n                        series: [\n                            {\n                                event: '$ai_generation',\n                                name: '$ai_generation',\n                                math: PropertyMathType.Sum,\n                                kind: NodeKind.EventsNode,\n                                math_property: '$ai_total_cost_usd',\n                            },\n                        ],\n                        trendsFilter: {\n                            aggregationAxisPrefix: '$',\n                            decimalPlaces: 4,\n                            display: ChartDisplayType.BoldNumber,\n                        },\n                        dateRange: { date_from: dashboardDateFilter.dateFrom, date_to: dashboardDateFilter.dateTo },\n                        properties: propertyFilters,\n                        filterTestAccounts: shouldFilterTestAccounts,\n                    },\n                    context: {\n                        groupTypeLabel: 'traces',\n                        onDataPointClick: () => {\n                            router.actions.push(urls.llmObservabilityTraces(), router.values.searchParams)\n                        },\n                    },\n                },\n                {\n                    title: 'Cost per user (USD)',\n                    description: \"Average cost for each generative AI user active in the data point's period.\",\n                    query: {\n                        kind: NodeKind.TrendsQuery,\n                        series: [\n                            {\n                                event: '$ai_generation',\n                                name: '$ai_generation',\n                                math: PropertyMathType.Sum,\n                                kind: NodeKind.EventsNode,\n                                math_property: '$ai_total_cost_usd',\n                            },\n                            {\n                                event: '$ai_generation',\n                                name: '$ai_generation',\n                                kind: NodeKind.EventsNode,\n                                math: BaseMathType.UniqueUsers,\n                            },\n                        ],\n                        trendsFilter: {\n                            formula: 'A / B',\n                            aggregationAxisPrefix: '$',\n                            decimalPlaces: 2,\n                        },\n                        dateRange: { date_from: dashboardDateFilter.dateFrom, date_to: dashboardDateFilter.dateTo },\n                        properties: propertyFilters.concat({\n                            type: PropertyFilterType.HogQL,\n                            key: 'distinct_id != properties.$ai_trace_id',\n                        }),\n                        filterTestAccounts: shouldFilterTestAccounts,\n                    },\n                },\n                {\n                    title: 'Cost by model (USD)',\n                    query: {\n                        kind: NodeKind.TrendsQuery,\n                        series: [\n                            {\n                                event: '$ai_generation',\n                                name: '$ai_generation',\n                                math: PropertyMathType.Sum,\n                                kind: NodeKind.EventsNode,\n                                math_property: '$ai_total_cost_usd',\n                            },\n                        ],\n                        breakdownFilter: {\n                            breakdown_type: 'event',\n                            breakdown: '$ai_model',\n                        },\n                        trendsFilter: {\n                            aggregationAxisPrefix: '$',\n                            decimalPlaces: 2,\n                            display: ChartDisplayType.ActionsBarValue,\n                            showValuesOnSeries: true,\n                        },\n                        dateRange: { date_from: dashboardDateFilter.dateFrom, date_to: dashboardDateFilter.dateTo },\n                        properties: propertyFilters,\n                        filterTestAccounts: shouldFilterTestAccounts,\n                    },\n                    context: {\n                        groupTypeLabel: 'traces',\n                        onDataPointClick: ({ breakdown }) => {\n                            router.actions.push(urls.llmObservabilityTraces(), {\n                                ...router.values.searchParams,\n                                filters: [\n                                    ...(router.values.searchParams.filters || []),\n                                    {\n                                        type: PropertyFilterType.Event,\n                                        key: '$ai_model',\n                                        operator: PropertyOperator.Exact,\n                                        value: breakdown as string,\n                                    },\n                                ],\n                            })\n                        },\n                    },\n                },\n                {\n                    title: 'Generation calls',\n                    query: {\n                        kind: NodeKind.TrendsQuery,\n                        series: [\n                            {\n                                event: '$ai_generation',\n                                name: '$ai_generation',\n                                kind: NodeKind.EventsNode,\n                            },\n                        ],\n                        dateRange: { date_from: dashboardDateFilter.dateFrom, date_to: dashboardDateFilter.dateTo },\n                        properties: propertyFilters,\n                        filterTestAccounts: shouldFilterTestAccounts,\n                    },\n                    context: {\n                        groupTypeLabel: 'generations',\n                        onDataPointClick: (series) => {\n                            if (typeof series.day === 'string') {\n                                const dayStart = dayjs(series.day).startOf('day')\n                                router.actions.push(urls.llmObservabilityGenerations(), {\n                                    ...router.values.searchParams,\n                                    date_from: dayStart.format('YYYY-MM-DD[T]HH:mm:ss'),\n                                    date_to: dayStart\n                                        .add(1, 'day')\n                                        .subtract(1, 'second')\n                                        .format('YYYY-MM-DD[T]HH:mm:ss'),\n                                })\n                            }\n                        },\n                    },\n                },\n                {\n                    title: 'Generation latency by model (median)',\n                    query: {\n                        kind: NodeKind.TrendsQuery,\n                        series: [\n                            {\n                                event: '$ai_generation',\n                                name: '$ai_generation',\n                                math: PropertyMathType.Median,\n                                kind: NodeKind.EventsNode,\n                                math_property: '$ai_latency',\n                            },\n                        ],\n                        breakdownFilter: {\n                            breakdown: '$ai_model',\n                        },\n                        trendsFilter: {\n                            aggregationAxisPostfix: ' s',\n                            decimalPlaces: 2,\n                        },\n                        dateRange: { date_from: dashboardDateFilter.dateFrom, date_to: dashboardDateFilter.dateTo },\n                        properties: propertyFilters,\n                        filterTestAccounts: shouldFilterTestAccounts,\n                    },\n                    context: {\n                        groupTypeLabel: 'generations',\n                        onDataPointClick: (series) => {\n                            if (typeof series.day === 'string') {\n                                const dayStart = dayjs(series.day).startOf('day')\n                                router.actions.push(urls.llmObservabilityGenerations(), {\n                                    ...router.values.searchParams,\n                                    date_from: dayStart.format('YYYY-MM-DD[T]HH:mm:ss'),\n                                    date_to: dayStart\n                                        .add(1, 'day')\n                                        .subtract(1, 'second')\n                                        .format('YYYY-MM-DD[T]HH:mm:ss'),\n                                    filters: [\n                                        ...(router.values.searchParams.filters || []),\n                                        {\n                                            type: PropertyFilterType.Event,\n                                            key: '$ai_model',\n                                            operator: PropertyOperator.Exact,\n                                            value: series.breakdown as string,\n                                        },\n                                    ] as AnyPropertyFilter[],\n                                })\n                            }\n                        },\n                    },\n                },\n                {\n                    title: 'Generations by HTTP status',\n                    query: {\n                        kind: NodeKind.TrendsQuery,\n                        series: [\n                            {\n                                event: '$ai_generation',\n                                name: '$ai_generation',\n                                kind: NodeKind.EventsNode,\n                            },\n                        ],\n                        breakdownFilter: {\n                            breakdown: '$ai_http_status',\n                        },\n                        trendsFilter: {\n                            display: ChartDisplayType.ActionsBarValue,\n                        },\n                        dateRange: { date_from: dashboardDateFilter.dateFrom, date_to: dashboardDateFilter.dateTo },\n                        properties: propertyFilters,\n                        filterTestAccounts: shouldFilterTestAccounts,\n                    },\n                    context: {\n                        groupTypeLabel: 'generations',\n                        onDataPointClick: (series) => {\n                            router.actions.push(urls.llmObservabilityGenerations(), {\n                                ...router.values.searchParams,\n                                filters: [\n                                    ...(router.values.searchParams.filters || []),\n                                    {\n                                        type: PropertyFilterType.Event,\n                                        key: '$ai_http_status',\n                                        operator: PropertyOperator.Exact,\n                                        value: series.breakdown as string,\n                                    },\n                                ] as AnyPropertyFilter[],\n                            })\n                        },\n                    },\n                },\n            ],\n        ],\n\n        tracesQuery: [\n            (s) => [\n                s.dateFilter,\n                s.shouldFilterTestAccounts,\n                s.propertyFilters,\n                groupsModel.selectors.groupsTaxonomicTypes,\n            ],\n            (dateFilter, shouldFilterTestAccounts, propertyFilters, groupsTaxonomicTypes): DataTableNode => ({\n                kind: NodeKind.DataTableNode,\n                source: {\n                    kind: NodeKind.TracesQuery,\n                    dateRange: {\n                        date_from: dateFilter.dateFrom || undefined,\n                        date_to: dateFilter.dateTo || undefined,\n                    },\n                    filterTestAccounts: shouldFilterTestAccounts ?? false,\n                    properties: propertyFilters,\n                },\n                columns: ['id', 'person', 'totalLatency', 'usage', 'totalCost', 'timestamp'],\n                showDateRange: true,\n                showReload: true,\n                showSearch: true,\n                showTestAccountFilters: true,\n                showExport: true,\n                showOpenEditorButton: false,\n                showPropertyFilter: [\n                    TaxonomicFilterGroupType.EventProperties,\n                    TaxonomicFilterGroupType.PersonProperties,\n                    ...groupsTaxonomicTypes,\n                    TaxonomicFilterGroupType.Cohorts,\n                    TaxonomicFilterGroupType.HogQLExpression,\n                ],\n            }),\n        ],\n        generationsQuery: [\n            (s) => [s.generationsQueryOverride, s.defaultGenerationsQuery],\n            (override, defQuery) => override || defQuery,\n        ],\n        defaultGenerationsQuery: [\n            (s) => [\n                s.dateFilter,\n                s.shouldFilterTestAccounts,\n                s.propertyFilters,\n                groupsModel.selectors.groupsTaxonomicTypes,\n            ],\n            (dateFilter, shouldFilterTestAccounts, propertyFilters, groupsTaxonomicTypes): DataTableNode => ({\n                kind: NodeKind.DataTableNode,\n                source: {\n                    kind: NodeKind.EventsQuery,\n                    select: [\n                        '*',\n                        'uuid',\n                        'properties.$ai_trace_id',\n                        'person',\n                        \"f'{properties.$ai_model}' -- Model\",\n                        \"f'{round(toFloat(properties.$ai_latency), 2)} s' -- Latency\",\n                        \"f'{properties.$ai_input_tokens} \u2192 {properties.$ai_output_tokens} (\u2211 {toInt(properties.$ai_input_tokens) + toInt(properties.$ai_output_tokens)})' -- Token usage\",\n                        \"f'${round(toFloat(properties.$ai_total_cost_usd), 6)}' -- Total cost\",\n                        'timestamp',\n                    ],\n                    orderBy: ['timestamp DESC'],\n                    after: dateFilter.dateFrom || undefined,\n                    before: dateFilter.dateTo || undefined,\n                    filterTestAccounts: shouldFilterTestAccounts,\n                    event: '$ai_generation',\n                    properties: propertyFilters,\n                },\n                showDateRange: true,\n                showReload: true,\n                showSearch: true,\n                showTestAccountFilters: true,\n                showColumnConfigurator: true,\n                showPropertyFilter: [\n                    TaxonomicFilterGroupType.EventProperties,\n                    TaxonomicFilterGroupType.PersonProperties,\n                    ...groupsTaxonomicTypes,\n                    TaxonomicFilterGroupType.Cohorts,\n                    TaxonomicFilterGroupType.HogQLExpression,\n                ],\n                showExport: true,\n                showActions: false,\n            }),\n        ],\n        usersQuery: [\n            (s) => [\n                s.dateFilter,\n                s.shouldFilterTestAccounts,\n                s.propertyFilters,\n                groupsModel.selectors.groupsTaxonomicTypes,\n            ],\n            (dateFilter, shouldFilterTestAccounts, propertyFilters, groupsTaxonomicTypes): DataTableNode => ({\n                kind: NodeKind.DataTableNode,\n                source: {\n                    kind: NodeKind.HogQLQuery,\n                    query: `\n                SELECT\n                    argMax(user_tuple, timestamp) as user,\n                    countDistinctIf(ai_trace_id, notEmpty(ai_trace_id)) as traces,\n                    count() as generations,\n                    round(sum(toFloat(ai_total_cost_usd)), 4) as total_cost,\n                    min(timestamp) as first_seen,\n                    max(timestamp) as last_seen\n                FROM (\n                    SELECT \n                        distinct_id,\n                        timestamp,\n                        JSONExtractRaw(properties, '$ai_trace_id') as ai_trace_id,\n                        JSONExtractRaw(properties, '$ai_total_cost_usd') as ai_total_cost_usd,\n                        tuple(\n                            distinct_id,\n                            person.created_at,\n                            person.properties\n                        ) as user_tuple\n                    FROM events\n                    WHERE event = '$ai_generation' AND {filters}\n                )\n                GROUP BY distinct_id\n                ORDER BY total_cost DESC\n                LIMIT 50\n                    `,\n                    filters: {\n                        dateRange: {\n                            date_from: dateFilter.dateFrom || null,\n                            date_to: dateFilter.dateTo || null,\n                        },\n                        filterTestAccounts: shouldFilterTestAccounts,\n                        properties: propertyFilters,\n                    },\n                },\n                columns: ['user', 'traces', 'generations', 'total_cost', 'first_seen', 'last_seen'],\n                showDateRange: true,\n                showReload: true,\n                showSearch: true,\n                showPropertyFilter: [\n                    TaxonomicFilterGroupType.EventProperties,\n                    TaxonomicFilterGroupType.PersonProperties,\n                    ...groupsTaxonomicTypes,\n                    TaxonomicFilterGroupType.Cohorts,\n                    TaxonomicFilterGroupType.HogQLExpression,\n                ],\n                showTestAccountFilters: true,\n                showExport: true,\n                showColumnConfigurator: true,\n            }),\n        ],\n    }),\n\n    urlToAction(({ actions, values }) => {\n        function applySearchParams({ filters, date_from, date_to, filter_test_accounts }: Record<string, any>): void {\n            // Reusing logic and naming from webAnalyticsLogic\n            const parsedFilters = isAnyPropertyFilters(filters) ? filters : []\n            if (!objectsEqual(parsedFilters, values.propertyFilters)) {\n                actions.setPropertyFilters(parsedFilters)\n            }\n            if (\n                (date_from || INITIAL_EVENTS_DATE_FROM) !== values.dateFilter.dateFrom ||\n                (date_to || INITIAL_DATE_TO) !== values.dateFilter.dateTo\n            ) {\n                actions.setDates(date_from || INITIAL_EVENTS_DATE_FROM, date_to || INITIAL_DATE_TO)\n            }\n            const filterTestAccountsValue = [true, 'true', 1, '1'].includes(filter_test_accounts)\n            if (filterTestAccountsValue !== values.shouldFilterTestAccounts) {\n                actions.setShouldFilterTestAccounts(filterTestAccountsValue)\n            }\n        }\n\n        return {\n            [urls.llmObservabilityDashboard()]: (_, searchParams) => applySearchParams(searchParams),\n            [urls.llmObservabilityGenerations()]: (_, searchParams) => applySearchParams(searchParams),\n            [urls.llmObservabilityTraces()]: (_, searchParams) => applySearchParams(searchParams),\n            [urls.llmObservabilityUsers()]: (_, searchParams) => applySearchParams(searchParams),\n        }\n    }),\n\n    actionToUrl(() => ({\n        setPropertyFilters: ({ propertyFilters }) => [\n            router.values.location.pathname,\n            {\n                ...router.values.searchParams,\n                filters: propertyFilters.length > 0 ? propertyFilters : undefined,\n            },\n        ],\n        setDates: ({ dateFrom, dateTo }) => [\n            router.values.location.pathname,\n            {\n                ...router.values.searchParams,\n                date_from: dateFrom === INITIAL_EVENTS_DATE_FROM ? undefined : dateFrom || undefined,\n                date_to: dateTo || undefined,\n            },\n        ],\n        setShouldFilterTestAccounts: ({ shouldFilterTestAccounts }) => [\n            router.values.location.pathname,\n            {\n                ...router.values.searchParams,\n                filter_test_accounts: shouldFilterTestAccounts ? 'true' : undefined,\n            },\n        ],\n    })),\n\n    afterMount(({ actions }) => {\n        actions.loadAIEventDefinition()\n    }),\n])\n", "export const urls = {\n    llmObservabilityDashboard: (): string => '/llm-observability',\n    llmObservabilityGenerations: (): string => '/llm-observability/generations',\n    llmObservabilityTraces: (): string => '/llm-observability/traces',\n    llmObservabilityTrace: (\n        id: string,\n        params?: {\n            event?: string\n            timestamp: string\n        }\n    ): string => {\n        const queryParams = new URLSearchParams(params)\n        const stringifiedParams = queryParams.toString()\n        return `/llm-observability/traces/${id}${stringifiedParams ? `?${stringifiedParams}` : ''}`\n    },\n    llmObservabilityUsers: (): string => '/llm-observability/users',\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "import_kea_router", "LLM_OBSERVABILITY_DATA_COLLECTION_NODE_ID", "INITIAL_DASHBOARD_DATE_FROM", "INITIAL_EVENTS_DATE_FROM", "INITIAL_DATE_TO", "llmObservabilityLogic", "sceneLogic", "groupsModel", "dateFrom", "dateTo", "shouldFilterTestAccounts", "propertyFilters", "query", "_", "definition", "api_default", "r", "isDefinitionStale", "s", "sceneKey", "dashboardDateFilter", "series", "dayStart", "dayjs", "urls", "breakdown", "dateFilter", "groupsTaxonomicTypes", "override", "defQuery", "actions", "values", "applySearchParams", "filters", "date_from", "date_to", "filter_test_accounts", "parsedFilters", "isAnyPropertyFilters", "objectsEqual", "filterTestAccountsValue", "searchParams", "init_dirname", "init_buffer", "init_process", "urls", "id", "params", "stringifiedParams", "import_jsx_runtime", "mapPerson", "person", "LLMObservabilityUsers", "setDates", "setShouldFilterTestAccounts", "setPropertyFilters", "llmObservabilityLogic", "usersQuery", "DataTable", "query", "isHogQLQuery", "filters", "dateRange", "x", "PersonDisplay", "urls", "value"]
}
