{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/lodash.debounce@4.0.8/node_modules/lodash.debounce/index.js", "../src/scenes/settings/Settings.tsx", "../src/scenes/settings/settingsLogic.ts", "../src/scenes/settings/SettingsMap.tsx", "../src/scenes/error-tracking/configuration/alerting/ErrorTrackingAlerting.tsx", "../src/scenes/error-tracking/configuration/symbol-sets/ErrorTrackingSymbolSets.tsx", "../src/scenes/error-tracking/configuration/symbol-sets/errorTrackingSymbolSetLogic.tsx", "../src/scenes/error-tracking/configuration/symbol-sets/SymbolSetUploadModal.tsx", "../src/scenes/settings/environment/BounceRateDuration.tsx", "../src/scenes/settings/environment/BounceRatePageViewMode.tsx", "../src/scenes/settings/environment/CookielessServerHashMode.tsx", "../src/scenes/settings/environment/CustomChannelTypes.tsx", "../src/lib/components/VerticalNestedDND/VerticalNestedDND.tsx", "../src/scenes/settings/environment/DeadClicksAutocaptureSettings.tsx", "../src/scenes/settings/environment/MaxMemorySettings.tsx", "../src/scenes/settings/environment/PersonsJoinMode.tsx", "../src/scenes/settings/environment/PersonsOnEvents.tsx", "../src/scenes/settings/environment/ReplayTriggers.tsx", "../src/scenes/settings/environment/replayTriggersLogic.ts", "../src/scenes/settings/environment/SessionRecordingSettings.tsx", "../src/lib/components/InternalSurvey/InternalMultipleChoiceSurvey.tsx", "../src/lib/components/InternalSurvey/internalMultipleChoiceSurveyLogic.ts", "../src/scenes/settings/environment/SessionsTableVersion.tsx", "../src/scenes/settings/environment/AutocaptureSettings.tsx", "../src/scenes/settings/environment/CorrelationConfig.tsx", "../src/scenes/settings/environment/DataAttributes.tsx", "../src/scenes/settings/environment/DataColorThemes.tsx", "../src/scenes/settings/environment/DataColorThemeModal.tsx", "../src/scenes/settings/environment/dataColorThemeModalLogic.ts", "../src/scenes/settings/environment/dataColorThemesLogic.ts", "../src/scenes/settings/environment/FeatureFlagSettings.tsx", "../src/scenes/feature-flags/FeatureFlagSettings.tsx", "../src/scenes/settings/environment/GroupAnalyticsConfig.tsx", "../src/scenes/settings/environment/groupAnalyticsConfigLogic.ts", "../src/scenes/settings/environment/HeatmapsSettings.tsx", "../src/scenes/settings/environment/HumanFriendlyComparisonPeriodsSetting.tsx", "../src/scenes/settings/environment/IPAllowListInfo.tsx", "../src/scenes/settings/environment/IPCapture.tsx", "../src/scenes/settings/environment/ManagedReverseProxy.tsx", "../src/scenes/settings/environment/OtherIntegrations.tsx", "../src/scenes/settings/environment/PathCleaningFiltersConfig.tsx", "../src/scenes/settings/environment/PersonDisplayNameProperties.tsx", "../src/scenes/settings/environment/SessionRecordingIngestionSettings.tsx", "../src/scenes/settings/environment/sessionReplayIngestionControlLogic.ts", "../src/scenes/settings/environment/SlackIntegration.tsx", "../src/scenes/settings/environment/SurveySettings.tsx", "../src/scenes/settings/environment/TeamAccessControl.tsx", "../src/layout/navigation-3000/sidepanel/panels/access_control/AccessControlObject.tsx", "../src/layout/navigation-3000/sidepanel/panels/access_control/accessControlLogic.ts", "../src/layout/navigation-3000/sidepanel/panels/access_control/roleBasedAccessControlLogic.ts", "../src/scenes/settings/environment/AddMembersModal.tsx", "../src/scenes/settings/environment/TeamDangerZone.tsx", "../src/scenes/settings/project/ProjectDangerZone.tsx", "../src/scenes/settings/environment/TeamSettings.tsx", "../src/lib/components/JSBookmarklet.tsx", "../src/scenes/settings/environment/TimezoneConfig.tsx", "../src/scenes/settings/environment/WeekStartConfig.tsx", "../src/scenes/settings/environment/TestAccountFiltersConfig.tsx", "../src/scenes/settings/environment/UserGroups.tsx", "../src/scenes/settings/environment/WebhookIntegration.tsx", "../src/scenes/settings/environment/webhookIntegrationLogic.ts", "../src/scenes/settings/organization/Invites.tsx", "../src/scenes/settings/organization/Members.tsx", "../src/scenes/settings/organization/OrgAI.tsx", "../src/scenes/settings/organization/OrganizationDangerZone.tsx", "../src/scenes/settings/organization/OrgDisplayName.tsx", "../src/scenes/settings/organization/OrgEmailPreferences.tsx", "../src/scenes/settings/organization/OrgLogo.tsx", "../src/scenes/settings/organization/Permissions/RoleBasedAccess.tsx", "../src/layout/navigation-3000/sidepanel/panels/access_control/RolesAndResourceAccessControls.tsx", "../src/scenes/settings/organization/Permissions/PermissionsGrid.tsx", "../src/scenes/settings/organization/Permissions/Roles/CreateRoleModal.tsx", "../src/scenes/settings/organization/Permissions/utils.ts", "../src/scenes/settings/organization/VerifiedDomains/VerifiedDomains.tsx", "../src/scenes/settings/organization/VerifiedDomains/AddDomainModal.tsx", "../src/scenes/settings/organization/VerifiedDomains/verifiedDomainsLogic.ts", "../src/scenes/settings/organization/VerifiedDomains/ConfigureSAMLModal.tsx", "../src/scenes/settings/organization/VerifiedDomains/SSOSelect.tsx", "../src/scenes/settings/organization/VerifiedDomains/VerifyDomainModal.tsx", "../src/scenes/settings/project/ProjectMove.tsx", "../src/scenes/settings/project/ProjectSettings.tsx", "../src/scenes/settings/user/ChangePassword.tsx", "../src/scenes/settings/user/changePasswordLogic.ts", "../src/scenes/settings/user/HedgehogModeSettings.tsx", "../src/scenes/settings/user/OptOutCapture.tsx", "../src/scenes/settings/user/PersonalAPIKeys.tsx", "../src/scenes/settings/user/personalAPIKeysLogic.tsx", "../src/scenes/settings/user/TwoFactorSettings.tsx", "../src/scenes/settings/user/UpdateEmailPreferences.tsx", "../src/scenes/settings/user/UserDetails.tsx"],
  "sourcesContent": ["/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n", "import './Settings.scss'\n\nimport { IconExternal } from '@posthog/icons'\nimport { LemonBanner, LemonButton, LemonButtonProps, LemonDivider } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { router } from 'kea-router'\nimport { NotFound } from 'lib/components/NotFound'\nimport { TimeSensitiveAuthenticationArea } from 'lib/components/TimeSensitiveAuthentication/TimeSensitiveAuthentication'\nimport { useResizeBreakpoints } from 'lib/hooks/useResizeObserver'\nimport { IconChevronRight, IconLink } from 'lib/lemon-ui/icons'\nimport { capitalizeFirstLetter, inStorybookTestRunner } from 'lib/utils'\nimport React from 'react'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { urls } from 'scenes/urls'\n\nimport { settingsLogic } from './settingsLogic'\nimport { SettingsLogicProps } from './types'\n\nexport interface SettingOption {\n    key: string\n    content: JSX.Element\n    items?: SettingOption[]\n}\n\nexport function Settings({\n    hideSections = false,\n    handleLocally = false,\n    ...props\n}: SettingsLogicProps & { hideSections?: boolean; handleLocally?: boolean }): JSX.Element {\n    const {\n        selectedSectionId,\n        selectedSection,\n        selectedLevel,\n        selectedSettingId,\n        selectedSetting,\n        sections,\n        settings,\n        isCompactNavigationOpen,\n        levels,\n    } = useValues(settingsLogic(props))\n    const { selectSection, selectLevel, selectSetting, openCompactNavigation } = useActions(settingsLogic(props))\n    const { currentTeam } = useValues(teamLogic)\n\n    const { ref, size } = useResizeBreakpoints(\n        {\n            0: 'small',\n            700: 'medium',\n        },\n        {\n            initialSize: 'medium',\n        }\n    )\n\n    const isCompact = !inStorybookTestRunner() && size === 'small'\n\n    const showOptions = isCompact ? isCompactNavigationOpen : true\n    const settingsInSidebar = props.sectionId && !!selectedSetting\n\n    // Currently environment and project settings do not require periodic re-authentication,\n    // though this is likely to change (see https://github.com/posthog/posthog/pull/22421).\n    // In the meantime, we don't want a needless re-authentication modal:\n    const AuthenticationAreaComponent =\n        selectedLevel !== 'environment' && selectedLevel !== 'project'\n            ? TimeSensitiveAuthenticationArea\n            : React.Fragment\n\n    const options: SettingOption[] = settingsInSidebar\n        ? settings.map((s) => ({\n              key: s.id,\n              content: (\n                  <OptionButton\n                      active={selectedSettingId === s.id}\n                      handleLocally={handleLocally}\n                      onClick={() => selectSetting(s.id)}\n                  >\n                      {s.title}\n                  </OptionButton>\n              ),\n          }))\n        : levels.map((level) => ({\n              key: level,\n              content: (\n                  <OptionButton\n                      to={urls.settings(level)}\n                      handleLocally={handleLocally}\n                      active={selectedLevel === level && !selectedSectionId}\n                      onClick={() => selectLevel(level)}\n                  >\n                      <span className=\"text-secondary\">{capitalizeFirstLetter(level)}</span>\n                  </OptionButton>\n              ),\n              items: sections\n                  .filter((x) => x.level === level)\n                  .map((section) => ({\n                      key: section.id,\n                      content: (\n                          <OptionButton\n                              to={section.to ?? urls.settings(section.id)}\n                              handleLocally={handleLocally}\n                              active={selectedSectionId === section.id}\n                              isLink={!!section.to}\n                              onClick={() => {\n                                  if (section.to) {\n                                      router.actions.push(section.to)\n                                  } else {\n                                      selectSection(section.id, level)\n                                  }\n                              }}\n                          >\n                              {section.title}\n                          </OptionButton>\n                      ),\n                  })),\n          }))\n\n    const compactNavigationContent: JSX.Element = settingsInSidebar ? (\n        <>{selectedSetting.title}</>\n    ) : (\n        <>\n            {capitalizeFirstLetter(selectedLevel)}\n            {selectedSection ? <>` / `{selectedSection.title}</> : null}\n        </>\n    )\n\n    return (\n        <div className={clsx('Settings flex', isCompact && 'Settings--compact')} ref={ref}>\n            {hideSections ? null : (\n                <>\n                    {showOptions ? (\n                        <div className=\"Settings__sections\">\n                            <OptionGroup options={options} />\n                        </div>\n                    ) : (\n                        <LemonButton fullWidth sideIcon={<IconChevronRight />} onClick={() => openCompactNavigation()}>\n                            {compactNavigationContent}\n                        </LemonButton>\n                    )}\n                    {isCompact ? <LemonDivider /> : null}\n                </>\n            )}\n\n            <AuthenticationAreaComponent>\n                <div className=\"flex-1 w-full space-y-2 min-w-0\">\n                    {!hideSections && selectedLevel === 'project' && (\n                        <LemonBanner type=\"info\">\n                            These settings only apply to the current project{' '}\n                            {currentTeam?.name ? (\n                                <>\n                                    (<b>{currentTeam.name}</b>)\n                                </>\n                            ) : null}\n                            .\n                        </LemonBanner>\n                    )}\n\n                    <SettingsRenderer {...props} handleLocally={handleLocally} />\n                </div>\n            </AuthenticationAreaComponent>\n        </div>\n    )\n}\n\nfunction SettingsRenderer(props: SettingsLogicProps & { handleLocally: boolean }): JSX.Element {\n    const { settings: allSettings, selectedLevel, selectedSectionId, selectedSetting } = useValues(settingsLogic(props))\n    const { selectSetting } = useActions(settingsLogic(props))\n\n    const settingsInSidebar = !!selectedSetting && !!props.sectionId\n\n    const settings = settingsInSidebar ? [selectedSetting] : allSettings\n\n    return (\n        <div className=\"space-y-8\">\n            {settings.length ? (\n                settings.map((x) => (\n                    <div key={x.id} className=\"relative\">\n                        {!settingsInSidebar && (\n                            <h2 id={x.id} className=\"flex gap-2 items-center\">\n                                {x.title}\n                                {props.logicKey === 'settingsScene' && (\n                                    <LemonButton\n                                        icon={<IconLink />}\n                                        size=\"small\"\n                                        to={urls.settings(selectedSectionId ?? selectedLevel, x.id)}\n                                        onClick={(e) => {\n                                            selectSetting(x.id)\n                                            e.preventDefault()\n                                        }}\n                                    />\n                                )}\n                            </h2>\n                        )}\n                        {x.description && <p className=\"max-w-160\">{x.description}</p>}\n\n                        {x.component}\n                    </div>\n                ))\n            ) : (\n                <NotFound object=\"setting\" />\n            )}\n        </div>\n    )\n}\n\nconst depthMap: Record<number, string> = {\n    1: 'pl-4',\n}\n\nconst OptionGroup = ({ options, depth = 0 }: { options: SettingOption[]; depth?: number }): JSX.Element => {\n    return (\n        <ul className=\"space-y-px\">\n            {options.map((option) => (\n                <>\n                    <li key={option.key} className={depthMap[depth]}>\n                        {option.content}\n                    </li>\n                    {option.items ? <OptionGroup options={option.items} depth={depth + 1} /> : null}\n                </>\n            ))}\n        </ul>\n    )\n}\n\nconst OptionButton = ({\n    to,\n    active,\n    onClick,\n    children,\n    handleLocally,\n    isLink = false,\n}: Pick<LemonButtonProps, 'to' | 'children' | 'active'> & {\n    handleLocally: boolean\n    onClick: () => void\n    isLink?: boolean\n}): JSX.Element => {\n    return (\n        <LemonButton\n            to={to}\n            onClick={\n                handleLocally\n                    ? (e) => {\n                          onClick()\n                          e.preventDefault()\n                      }\n                    : undefined\n            }\n            size=\"small\"\n            sideIcon={isLink ? <IconExternal /> : undefined}\n            fullWidth\n            active={active}\n        >\n            {children}\n        </LemonButton>\n    )\n}\n", "import { actions, connect, kea, key, path, props, reducers, selectors } from 'kea'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { Realm } from '~/types'\n\nimport type { settingsLogicType } from './settingsLogicType'\nimport { SETTINGS_MAP } from './SettingsMap'\nimport { Setting, SettingId, SettingLevelId, SettingSection, SettingSectionId, SettingsLogicProps } from './types'\n\nexport const settingsLogic = kea<settingsLogicType>([\n    props({} as SettingsLogicProps),\n    key((props) => props.logicKey ?? 'global'),\n    path((key) => ['scenes', 'settings', 'settingsLogic', key]),\n    connect({\n        values: [\n            featureFlagLogic,\n            ['featureFlags'],\n            userLogic,\n            ['hasAvailableFeature'],\n            preflightLogic,\n            ['preflight', 'isCloudOrDev'],\n            teamLogic,\n            ['currentTeam'],\n        ],\n    }),\n\n    actions({\n        selectLevel: (level: SettingLevelId) => ({ level }),\n        selectSection: (section: SettingSectionId, level: SettingLevelId) => ({ section, level }),\n        selectSetting: (setting: SettingId) => ({ setting }),\n        openCompactNavigation: true,\n        closeCompactNavigation: true,\n    }),\n\n    reducers(({ props }) => ({\n        selectedLevelRaw: [\n            props.settingLevelId ?? 'project',\n            {\n                selectLevel: (_, { level }) => level,\n                selectSection: (_, { level }) => level,\n            },\n        ],\n        selectedSectionIdRaw: [\n            props.sectionId ?? null,\n            {\n                selectLevel: () => null,\n                selectSection: (_, { section }) => section,\n            },\n        ],\n        selectedSettingId: [\n            props.settingId ?? null,\n            {\n                selectLevel: () => null,\n                selectSection: () => null,\n                selectSetting: (_, { setting }) => setting,\n            },\n        ],\n\n        isCompactNavigationOpen: [\n            false,\n            {\n                openCompactNavigation: () => true,\n                closeCompactNavigation: () => false,\n                selectLevel: () => false,\n                selectSection: () => false,\n                selectSetting: () => false,\n            },\n        ],\n    })),\n\n    selectors({\n        levels: [\n            (s) => [s.sections],\n            (sections): SettingLevelId[] => {\n                return sections.reduce<SettingLevelId[]>((acc, section) => {\n                    if (!acc.includes(section.level)) {\n                        acc.push(section.level)\n                    }\n                    return acc\n                }, [])\n            },\n        ],\n        sections: [\n            (s) => [s.doesMatchFlags, s.featureFlags, s.isCloudOrDev],\n            (doesMatchFlags, featureFlags, isCloudOrDev): SettingSection[] => {\n                const sections = SETTINGS_MAP.filter(doesMatchFlags).filter((section) => {\n                    if (section.hideSelfHost && !isCloudOrDev) {\n                        return false\n                    }\n\n                    return true\n                })\n                if (!featureFlags[FEATURE_FLAGS.ENVIRONMENTS]) {\n                    return sections\n                        .filter((section) => section.level !== 'project')\n                        .map((section) => ({\n                            ...section,\n                            id: section.id.replace('environment-', 'project-') as SettingSectionId,\n                            level: section.level === 'environment' ? 'project' : section.level,\n                            settings: section.settings.map((setting) => ({\n                                ...setting,\n                                title:\n                                    typeof setting.title === 'string'\n                                        ? setting.title.replace('environment', 'project')\n                                        : setting.title,\n                                id: setting.id.replace('environment-', 'project-') as SettingId,\n                            })),\n                        }))\n                }\n                return sections\n            },\n        ],\n        selectedLevel: [\n            (s) => [s.selectedLevelRaw, s.selectedSectionIdRaw, s.featureFlags],\n            (selectedLevelRaw, selectedSectionIdRaw, featureFlags): SettingLevelId => {\n                // As of middle of September 2024, `details` and `danger-zone` are the only sections present\n                // at both Environment and Project levels. Others we want to redirect based on the feature flag.\n                if (\n                    !selectedSectionIdRaw ||\n                    (!selectedSectionIdRaw.endsWith('-details') && !selectedSectionIdRaw.endsWith('-danger-zone'))\n                ) {\n                    if (featureFlags[FEATURE_FLAGS.ENVIRONMENTS]) {\n                        return selectedLevelRaw === 'project' ? 'environment' : selectedLevelRaw\n                    }\n                    return selectedLevelRaw === 'environment' ? 'project' : selectedLevelRaw\n                }\n                return selectedLevelRaw\n            },\n        ],\n        selectedSectionId: [\n            (s) => [s.selectedSectionIdRaw, s.featureFlags],\n            (selectedSectionIdRaw, featureFlags): SettingSectionId | null => {\n                if (!selectedSectionIdRaw) {\n                    return null\n                }\n                // As of middle of September 2024, `details` and `danger-zone` are the only sections present\n                // at both Environment and Project levels. Others we want to redirect based on the feature flag.\n                if (!selectedSectionIdRaw.endsWith('-details') && !selectedSectionIdRaw.endsWith('-danger-zone')) {\n                    if (featureFlags[FEATURE_FLAGS.ENVIRONMENTS]) {\n                        return selectedSectionIdRaw.replace(/^project/, 'environment') as SettingSectionId\n                    }\n                    return selectedSectionIdRaw.replace(/^environment/, 'project') as SettingSectionId\n                }\n                return selectedSectionIdRaw\n            },\n        ],\n        selectedSection: [\n            (s) => [s.sections, s.selectedSectionId],\n            (sections, selectedSectionId): SettingSection | null => {\n                return sections.find((x) => x.id === selectedSectionId) ?? null\n            },\n        ],\n        settings: [\n            (s) => [s.selectedLevel, s.selectedSectionId, s.sections, s.doesMatchFlags, s.preflight, s.currentTeam],\n            (selectedLevel, selectedSectionId, sections, doesMatchFlags, preflight, currentTeam): Setting[] => {\n                let settings: Setting[] = []\n\n                if (selectedSectionId) {\n                    settings = sections.find((x) => x.id === selectedSectionId)?.settings || []\n                } else {\n                    settings = sections\n                        .filter((section) => section.level === selectedLevel)\n                        .reduce((acc, section) => [...acc, ...section.settings], [] as Setting[])\n                }\n\n                return settings.filter((x) => {\n                    if (!doesMatchFlags(x)) {\n                        return false\n                    }\n                    if (x.hideOn?.includes(Realm.Cloud) && preflight?.cloud) {\n                        return false\n                    }\n                    if (x.allowForTeam) {\n                        return x.allowForTeam(currentTeam)\n                    }\n                    return true\n                })\n            },\n        ],\n        selectedSetting: [\n            (s) => [s.settings, s.selectedSettingId],\n            (settings, selectedSettingId): Setting | null => {\n                return settings.find((s) => s.id === selectedSettingId) ?? null\n            },\n        ],\n        doesMatchFlags: [\n            (s) => [s.featureFlags],\n            (featureFlags) => {\n                return (x: Pick<Setting, 'flag'>) => {\n                    if (!x.flag) {\n                        // No flag condition\n                        return true\n                    }\n                    const flagsArray = Array.isArray(x.flag) ? x.flag : [x.flag]\n                    for (const flagCondition of flagsArray) {\n                        const flag = (\n                            flagCondition.startsWith('!') ? flagCondition.slice(1) : flagCondition\n                        ) as keyof typeof FEATURE_FLAGS\n                        let isConditionMet = featureFlags[FEATURE_FLAGS[flag]]\n                        if (flagCondition.startsWith('!')) {\n                            isConditionMet = !isConditionMet // Negated flag condition (!-prefixed)\n                        }\n                        if (!isConditionMet) {\n                            return false\n                        }\n                    }\n                    return true\n                }\n            },\n        ],\n    }),\n])\n", "import { LemonTag, Tooltip } from '@posthog/lemon-ui'\nimport { dayjs } from 'lib/dayjs'\nimport { ErrorTrackingAlerting } from 'scenes/error-tracking/configuration/alerting/ErrorTrackingAlerting'\nimport { ErrorTrackingSymbolSets } from 'scenes/error-tracking/configuration/symbol-sets/ErrorTrackingSymbolSets'\nimport { organizationLogic } from 'scenes/organizationLogic'\nimport { BounceRateDurationSetting } from 'scenes/settings/environment/BounceRateDuration'\nimport { BounceRatePageViewModeSetting } from 'scenes/settings/environment/BounceRatePageViewMode'\nimport { CookielessServerHashModeSetting } from 'scenes/settings/environment/CookielessServerHashMode'\nimport { CustomChannelTypes } from 'scenes/settings/environment/CustomChannelTypes'\nimport { DeadClicksAutocaptureSettings } from 'scenes/settings/environment/DeadClicksAutocaptureSettings'\nimport { MaxMemorySettings } from 'scenes/settings/environment/MaxMemorySettings'\nimport { PersonsJoinMode } from 'scenes/settings/environment/PersonsJoinMode'\nimport { PersonsOnEvents } from 'scenes/settings/environment/PersonsOnEvents'\nimport { ReplayTriggers } from 'scenes/settings/environment/ReplayTriggers'\nimport { SessionsTableVersion } from 'scenes/settings/environment/SessionsTableVersion'\nimport { urls } from 'scenes/urls'\n\nimport { Realm } from '~/types'\n\nimport {\n    AutocaptureSettings,\n    ExceptionAutocaptureSettings,\n    WebVitalsAutocaptureSettings,\n} from './environment/AutocaptureSettings'\nimport { CorrelationConfig } from './environment/CorrelationConfig'\nimport { DataAttributes } from './environment/DataAttributes'\nimport { DataColorThemes } from './environment/DataColorThemes'\nimport { FeatureFlagSettings } from './environment/FeatureFlagSettings'\nimport { GroupAnalyticsConfig } from './environment/GroupAnalyticsConfig'\nimport { HeatmapsSettings } from './environment/HeatmapsSettings'\nimport { HumanFriendlyComparisonPeriodsSetting } from './environment/HumanFriendlyComparisonPeriodsSetting'\nimport { IPAllowListInfo } from './environment/IPAllowListInfo'\nimport { IPCapture } from './environment/IPCapture'\nimport { ManagedReverseProxy } from './environment/ManagedReverseProxy'\nimport { OtherIntegrations } from './environment/OtherIntegrations'\nimport { PathCleaningFiltersConfig } from './environment/PathCleaningFiltersConfig'\nimport { PersonDisplayNameProperties } from './environment/PersonDisplayNameProperties'\nimport { SessionRecordingIngestionSettings } from './environment/SessionRecordingIngestionSettings'\nimport {\n    NetworkCaptureSettings,\n    ReplayAISettings,\n    ReplayAuthorizedDomains,\n    ReplayGeneral,\n} from './environment/SessionRecordingSettings'\nimport { SlackIntegration } from './environment/SlackIntegration'\nimport { SurveySettings } from './environment/SurveySettings'\nimport { TeamAccessControl } from './environment/TeamAccessControl'\nimport { TeamDangerZone } from './environment/TeamDangerZone'\nimport {\n    Bookmarklet,\n    TeamDisplayName,\n    TeamTimezone,\n    TeamToolbarURLs,\n    TeamVariables,\n    WebSnippet,\n} from './environment/TeamSettings'\nimport { ProjectAccountFiltersSetting } from './environment/TestAccountFiltersConfig'\nimport { UserGroups } from './environment/UserGroups'\nimport { WebhookIntegration } from './environment/WebhookIntegration'\nimport { Invites } from './organization/Invites'\nimport { Members } from './organization/Members'\nimport { OrganizationAI } from './organization/OrgAI'\nimport { OrganizationDangerZone } from './organization/OrganizationDangerZone'\nimport { OrganizationDisplayName } from './organization/OrgDisplayName'\nimport { OrganizationEmailPreferences } from './organization/OrgEmailPreferences'\nimport { OrganizationLogo } from './organization/OrgLogo'\nimport { RoleBasedAccess } from './organization/Permissions/RoleBasedAccess'\nimport { VerifiedDomains } from './organization/VerifiedDomains/VerifiedDomains'\nimport { ProjectDangerZone } from './project/ProjectDangerZone'\nimport { ProjectMove } from './project/ProjectMove'\nimport { ProjectDisplayName } from './project/ProjectSettings'\nimport { SettingSection } from './types'\nimport { ChangePassword } from './user/ChangePassword'\nimport { HedgehogModeSettings } from './user/HedgehogModeSettings'\nimport { OptOutCapture } from './user/OptOutCapture'\nimport { PersonalAPIKeys } from './user/PersonalAPIKeys'\nimport { ThemeSwitcher } from './user/ThemeSwitcher'\nimport { TwoFactorSettings } from './user/TwoFactorSettings'\nimport { UpdateEmailPreferences } from './user/UpdateEmailPreferences'\nimport { UserDetails } from './user/UserDetails'\n\nexport const SETTINGS_MAP: SettingSection[] = [\n    // ENVIRONMENT\n    {\n        level: 'environment',\n        id: 'environment-details',\n        title: 'General',\n        settings: [\n            {\n                id: 'display-name',\n                title: 'Display name',\n                component: <TeamDisplayName />,\n            },\n            {\n                id: 'snippet',\n                title: 'Web snippet',\n                component: <WebSnippet />,\n            },\n            {\n                id: 'bookmarklet',\n                title: 'Bookmarklet',\n                component: <Bookmarklet />,\n            },\n            {\n                id: 'variables',\n                title: 'Project ID',\n                component: <TeamVariables />,\n            },\n        ],\n    },\n    {\n        level: 'environment',\n        id: 'environment-autocapture',\n        title: 'Autocapture & heatmaps',\n\n        settings: [\n            {\n                id: 'autocapture',\n                title: 'Autocapture',\n                component: <AutocaptureSettings />,\n            },\n            {\n                id: 'autocapture-data-attributes',\n                title: 'Data attributes',\n                component: <DataAttributes />,\n            },\n            {\n                id: 'heatmaps',\n                title: 'Heatmaps',\n                component: <HeatmapsSettings />,\n            },\n            {\n                id: 'exception-autocapture',\n                title: 'Exception autocapture',\n                component: <ExceptionAutocaptureSettings />,\n                flag: 'ERROR_TRACKING',\n            },\n            {\n                id: 'web-vitals-autocapture',\n                title: 'Web vitals autocapture',\n                component: <WebVitalsAutocaptureSettings />,\n            },\n            {\n                id: 'dead-clicks-autocapture',\n                title: 'Dead clicks autocapture',\n                component: <DeadClicksAutocaptureSettings />,\n            },\n        ],\n    },\n\n    {\n        level: 'environment',\n        id: 'environment-product-analytics',\n        title: 'Product analytics',\n        settings: [\n            {\n                id: 'date-and-time',\n                title: 'Date & time',\n                component: <TeamTimezone />,\n            },\n            {\n                id: 'internal-user-filtering',\n                title: 'Filter out internal and test users',\n                component: <ProjectAccountFiltersSetting />,\n            },\n            {\n                id: 'data-theme',\n                title: (\n                    <>\n                        Chart color themes\n                        <LemonTag type=\"warning\" className=\"ml-1 uppercase\">\n                            Beta\n                        </LemonTag>\n                    </>\n                ),\n                component: <DataColorThemes />,\n                flag: 'INSIGHT_COLORS',\n            },\n            {\n                id: 'persons-on-events',\n                title: 'Person properties mode',\n                component: <PersonsOnEvents />,\n                flag: '!SETTINGS_PERSONS_ON_EVENTS_HIDDEN', // Setting hidden for Cloud orgs created since June 2024\n            },\n            {\n                id: 'correlation-analysis',\n                title: 'Correlation analysis exclusions',\n                component: <CorrelationConfig />,\n            },\n            {\n                id: 'person-display-name',\n                title: 'Person display name',\n                component: <PersonDisplayNameProperties />,\n            },\n            {\n                id: 'path-cleaning',\n                title: 'Path cleaning rules',\n                component: <PathCleaningFiltersConfig />,\n            },\n            {\n                id: 'datacapture',\n                title: 'IP data capture configuration',\n                component: <IPCapture />,\n            },\n            {\n                id: 'human-friendly-comparison-periods',\n                title: 'Human friendly comparison periods',\n                component: <HumanFriendlyComparisonPeriodsSetting />,\n            },\n            {\n                id: 'group-analytics',\n                title: 'Group analytics',\n                component: <GroupAnalyticsConfig />,\n            },\n            {\n                id: 'persons-join-mode',\n                title: 'Persons join mode',\n                component: <PersonsJoinMode />,\n                flag: 'SETTINGS_PERSONS_JOIN_MODE',\n            },\n            {\n                id: 'session-table-version',\n                title: 'Sessions Table Version',\n                component: <SessionsTableVersion />,\n                flag: 'SETTINGS_SESSION_TABLE_VERSION',\n            },\n        ],\n    },\n\n    {\n        level: 'environment',\n        id: 'environment-web-analytics',\n        title: 'Web analytics',\n        settings: [\n            {\n                id: 'channel-type',\n                title: 'Custom channel type',\n                component: <CustomChannelTypes />,\n            },\n            {\n                id: 'cookieless-server-hash-mode',\n                title: 'Cookieless server hash mode',\n                component: <CookielessServerHashModeSetting />,\n                flag: 'COOKIELESS_SERVER_HASH_MODE_SETTING',\n            },\n            {\n                id: 'bounce-rate-duration',\n                title: 'Bounce rate duration',\n                component: <BounceRateDurationSetting />,\n            },\n            {\n                id: 'bounce-rate-page-view-mode',\n                title: 'Bounce rate page view mode',\n                component: <BounceRatePageViewModeSetting />,\n                flag: 'SETTINGS_BOUNCE_RATE_PAGE_VIEW_MODE',\n            },\n        ],\n    },\n\n    {\n        level: 'environment',\n        id: 'environment-replay',\n        title: 'Session replay',\n        settings: [\n            {\n                id: 'replay',\n                title: 'Session replay',\n                component: <ReplayGeneral />,\n            },\n            {\n                id: 'replay-network',\n                title: 'Network capture',\n                component: <NetworkCaptureSettings />,\n            },\n            {\n                id: 'replay-authorized-domains',\n                title: 'Authorized domains for replay',\n                component: <ReplayAuthorizedDomains />,\n                allowForTeam: (t) => !!t?.recording_domains?.length,\n            },\n            {\n                id: 'replay-triggers',\n                title: 'Replay triggers',\n                component: <ReplayTriggers />,\n            },\n            {\n                id: 'replay-ingestion',\n                title: 'Ingestion controls',\n                component: <SessionRecordingIngestionSettings />,\n            },\n            {\n                id: 'replay-ai-config',\n                title: 'AI recording summary',\n                component: <ReplayAISettings />,\n                flag: 'AI_SESSION_PERMISSIONS',\n            },\n        ],\n    },\n    {\n        level: 'environment',\n        id: 'environment-surveys',\n        title: 'Surveys',\n        settings: [\n            {\n                id: 'surveys-interface',\n                title: 'Surveys web interface',\n                component: <SurveySettings />,\n            },\n        ],\n    },\n    {\n        level: 'environment',\n        id: 'environment-feature-flags',\n        title: 'Feature flags',\n        settings: [\n            {\n                id: 'feature-flags-interface',\n                title: 'Feature flags',\n                component: <FeatureFlagSettings />,\n            },\n        ],\n    },\n    {\n        level: 'environment',\n        id: 'environment-error-tracking',\n        title: 'Error tracking',\n        flag: 'ERROR_TRACKING',\n        settings: [\n            {\n                id: 'exception-autocapture',\n                title: 'Exception autocapture',\n                component: <ExceptionAutocaptureSettings />,\n            },\n            {\n                id: 'error-tracking-user-groups',\n                title: 'User groups',\n                description: 'Allow collections of users to be assigned to issues',\n                component: <UserGroups />,\n            },\n            {\n                id: 'error-tracking-symbol-sets',\n                title: 'Symbol sets',\n                component: <ErrorTrackingSymbolSets />,\n            },\n            {\n                id: 'error-tracking-alerting',\n                title: 'Alerting',\n                flag: 'ERROR_TRACKING_ALERTING',\n                component: <ErrorTrackingAlerting />,\n            },\n        ],\n    },\n    {\n        level: 'environment',\n        id: 'environment-max',\n        title: 'Max AI',\n        flag: 'ARTIFICIAL_HOG',\n        settings: [\n            {\n                id: 'core-memory',\n                title: 'Memory',\n                description:\n                    'Max automatically remembers details about your company and product. This context helps our AI assistant provide relevant answers and suggestions. If there are any details you don\u2019t want Max to remember, you can edit or remove them below.',\n                component: <MaxMemorySettings />,\n                hideOn: [Realm.SelfHostedClickHouse, Realm.SelfHostedPostgres],\n            },\n        ],\n    },\n    {\n        level: 'environment',\n        id: 'environment-toolbar',\n        title: 'Toolbar',\n        settings: [\n            {\n                id: 'authorized-toolbar-urls',\n                title: 'Authorized toolbar URLs',\n                component: <TeamToolbarURLs />,\n            },\n        ],\n    },\n    {\n        level: 'environment',\n        id: 'environment-integrations',\n        title: 'Integrations',\n        settings: [\n            {\n                id: 'integration-webhooks',\n                title: 'Webhook integration',\n                component: <WebhookIntegration />,\n            },\n            {\n                id: 'integration-slack',\n                title: 'Slack integration',\n                component: <SlackIntegration />,\n            },\n            {\n                id: 'integration-other',\n                title: 'Other integrations',\n                component: <OtherIntegrations />,\n            },\n            {\n                id: 'integration-ip-allowlist',\n                title: 'Static IP addresses',\n                component: <IPAllowListInfo />,\n            },\n        ],\n    },\n    {\n        level: 'environment',\n        id: 'environment-access-control',\n        title: 'Access control',\n        settings: [\n            {\n                id: 'environment-access-control',\n                title: 'Access control',\n                component: <TeamAccessControl />,\n            },\n        ],\n    },\n    {\n        level: 'environment',\n        id: 'environment-danger-zone',\n        title: 'Danger zone',\n        settings: [\n            {\n                id: 'project-move',\n                title: 'Move project',\n                flag: '!ENVIRONMENTS',\n                component: <ProjectMove />, // There isn't EnvironmentMove yet\n                allowForTeam: () =>\n                    (organizationLogic.findMounted()?.values.currentOrganization?.teams.length ?? 0) > 1,\n            },\n            {\n                id: 'environment-delete',\n                title: 'Delete environment',\n                component: <TeamDangerZone />,\n            },\n        ],\n    },\n\n    // PROJECT - just project-details and project-danger-zone\n    {\n        level: 'project',\n        id: 'project-details',\n        title: 'General',\n        settings: [\n            {\n                id: 'display-name',\n                title: 'Display name',\n                component: <ProjectDisplayName />,\n            },\n        ],\n    },\n    {\n        level: 'project',\n        id: 'project-danger-zone',\n        title: 'Danger zone',\n        settings: [\n            {\n                id: 'project-move',\n                title: 'Move project',\n                component: <ProjectMove />,\n                allowForTeam: () =>\n                    (organizationLogic.findMounted()?.values.currentOrganization?.teams.length ?? 0) > 1,\n            },\n            {\n                id: 'project-delete',\n                title: 'Delete project',\n                component: <ProjectDangerZone />,\n            },\n        ],\n    },\n\n    // ORGANIZATION\n    {\n        level: 'organization',\n        id: 'organization-details',\n        title: 'General',\n        settings: [\n            {\n                id: 'organization-display-name',\n                title: 'Display name',\n                component: <OrganizationDisplayName />,\n            },\n            {\n                id: 'organization-logo',\n                title: 'Logo',\n                component: <OrganizationLogo />,\n            },\n            {\n                id: 'organization-ai-consent',\n                title: 'PostHog AI data analysis',\n                description: (\n                    // Note: Sync the copy below with AIConsentPopoverWrapper.tsx\n                    <>\n                        PostHog AI features, such as our assistant Max, use{' '}\n                        <Tooltip\n                            title={`As of ${dayjs().format(\n                                'MMMM YYYY'\n                            )}: OpenAI for core analysis, Perplexity for fetching product information`}\n                        >\n                            <dfn>external AI services</dfn>\n                        </Tooltip>{' '}\n                        for data analysis.\n                        <br />\n                        This <i>can</i> involve transfer of identifying user data, so we ask for your org-wide consent\n                        below.\n                        <br />\n                        <strong>Your data will not be used for training models.</strong>\n                    </>\n                ),\n                component: <OrganizationAI />,\n            },\n        ],\n    },\n    {\n        level: 'organization',\n        id: 'organization-members',\n        title: 'Members',\n        settings: [\n            {\n                id: 'invites',\n                title: 'Pending invites',\n                component: <Invites />,\n            },\n            {\n                id: 'members',\n                title: 'Organization members',\n                component: <Members />,\n            },\n            {\n                id: 'email-members',\n                title: 'Notification preferences',\n                component: <OrganizationEmailPreferences />,\n            },\n        ],\n    },\n    {\n        level: 'organization',\n        id: 'organization-roles',\n        title: 'Roles',\n        settings: [\n            {\n                id: 'organization-roles',\n                title: 'Roles',\n                component: <RoleBasedAccess />,\n            },\n        ],\n    },\n    {\n        level: 'organization',\n        id: 'organization-authentication',\n        title: 'Authentication domains & SSO',\n        settings: [\n            {\n                id: 'authentication-domains',\n                title: 'Authentication Domains',\n                component: <VerifiedDomains />,\n            },\n        ],\n    },\n    {\n        level: 'organization',\n        id: 'organization-proxy',\n        title: 'Managed reverse proxy',\n        settings: [\n            {\n                id: 'organization-proxy',\n                title: 'Managed reverse proxies',\n                component: <ManagedReverseProxy />,\n            },\n        ],\n    },\n    {\n        level: 'organization',\n        id: 'organization-danger-zone',\n        title: 'Danger zone',\n        settings: [\n            {\n                id: 'organization-delete',\n                title: 'Delete organization',\n                component: <OrganizationDangerZone />,\n            },\n        ],\n    },\n    {\n        level: 'organization',\n        id: 'organization-billing',\n        hideSelfHost: true,\n        title: 'Billing',\n        to: urls.organizationBilling(),\n        settings: [],\n    },\n\n    // USER\n    {\n        level: 'user',\n        id: 'user-profile',\n        title: 'Profile',\n        settings: [\n            {\n                id: 'details',\n                title: 'Details',\n                component: <UserDetails />,\n            },\n            {\n                id: 'change-password',\n                title: 'Change password',\n                component: <ChangePassword />,\n            },\n            {\n                id: '2fa',\n                title: 'Two-factor authentication',\n                component: <TwoFactorSettings />,\n            },\n        ],\n    },\n    {\n        level: 'user',\n        id: 'user-api-keys',\n        title: 'Personal API keys',\n        settings: [\n            {\n                id: 'personal-api-keys',\n                title: 'Personal API keys',\n                component: <PersonalAPIKeys />,\n            },\n        ],\n    },\n    {\n        level: 'user',\n        id: 'user-customization',\n        title: 'Customization',\n        settings: [\n            {\n                id: 'theme',\n                title: 'Theme',\n                component: <ThemeSwitcher onlyLabel />,\n            },\n            {\n                id: 'notifications',\n                title: 'Notifications',\n                component: <UpdateEmailPreferences />,\n            },\n            {\n                id: 'optout',\n                title: 'Anonymize data collection',\n                component: <OptOutCapture />,\n                hideOn: [Realm.Cloud],\n            },\n            {\n                id: 'hedgehog-mode',\n                title: 'Hedgehog mode',\n                component: <HedgehogModeSettings />,\n            },\n        ],\n    },\n]\n", "import { LinkedHogFunctions } from 'scenes/pipeline/hogfunctions/list/LinkedHogFunctions'\n\nexport function ErrorTrackingAlerting(): JSX.Element {\n    return (\n        <LinkedHogFunctions\n            logicKey=\"error-tracking\"\n            type=\"internal_destination\"\n            subTemplateId=\"error-tracking\"\n            filters={{\n                events: [\n                    {\n                        id: `$error_tracking_issue_created`,\n                        type: 'events',\n                    },\n                ],\n            }}\n        />\n    )\n}\n", "import { IconRevert, IconTrash, IconUpload } from '@posthog/icons'\nimport { LemonButton, LemonCollapse, LemonDialog, LemonTable, LemonTableColumns, LemonTabs } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { stackFrameLogic } from 'lib/components/Errors/stackFrameLogic'\nimport { ErrorTrackingSymbolSet } from 'lib/components/Errors/types'\nimport { JSONViewer } from 'lib/components/JSONViewer'\nimport { humanFriendlyDetailedTime } from 'lib/utils'\nimport { useEffect, useState } from 'react'\n\nimport { errorTrackingSymbolSetLogic } from './errorTrackingSymbolSetLogic'\nimport { SymbolSetUploadModal } from './SymbolSetUploadModal'\n\nexport function ErrorTrackingSymbolSets(): JSX.Element {\n    const logic = errorTrackingSymbolSetLogic()\n    const { missingSymbolSets, validSymbolSets } = useValues(logic)\n    const { loadSymbolSets } = useActions(logic)\n\n    useEffect(() => {\n        loadSymbolSets()\n    }, [loadSymbolSets])\n\n    return (\n        <div className=\"space-y-4\">\n            <p>\n                Source maps are required to demangle any minified code in your exception stack traces. PostHog\n                automatically retrieves source maps where possible.\n            </p>\n            <p>\n                Cases where it was not possible are listed below. Source maps can be uploaded retroactively but changes\n                will only apply to all future exceptions ingested.\n            </p>\n            {missingSymbolSets.length > 0 && (\n                <SymbolSetTable id=\"missing\" dataSource={missingSymbolSets} pageSize={5} missing />\n            )}\n            {(validSymbolSets.length > 0 || missingSymbolSets.length === 0) && (\n                <SymbolSetTable id=\"valid\" dataSource={validSymbolSets} pageSize={10} />\n            )}\n            <SymbolSetUploadModal />\n        </div>\n    )\n}\n\nconst SymbolSetTable = ({\n    id,\n    dataSource,\n    pageSize,\n    missing,\n}: {\n    id: string\n    dataSource: ErrorTrackingSymbolSet[]\n    pageSize: number\n    missing?: boolean\n}): JSX.Element => {\n    const { symbolSetsLoading } = useValues(errorTrackingSymbolSetLogic)\n    const { deleteSymbolSet, setUploadSymbolSetId } = useActions(errorTrackingSymbolSetLogic)\n\n    const columns: LemonTableColumns<ErrorTrackingSymbolSet> = [\n        { title: missing && 'Missing symbol sets', dataIndex: 'ref' },\n        { title: 'Created At', dataIndex: 'created_at', render: (data) => humanFriendlyDetailedTime(data as string) },\n        {\n            dataIndex: 'id',\n            render: (_, { id }) => {\n                return (\n                    <div className=\"flex justify-end space-x-1\">\n                        <LemonButton\n                            type={missing ? 'primary' : 'secondary'}\n                            size=\"xsmall\"\n                            tooltip={missing ? 'Upload symbol set' : 'Replace symbol set'}\n                            icon={missing ? <IconUpload /> : <IconRevert />}\n                            onClick={() => setUploadSymbolSetId(id)}\n                            className=\"py-1\"\n                        >\n                            {missing && 'Upload'}\n                        </LemonButton>\n                        <LemonButton\n                            type=\"secondary\"\n                            size=\"xsmall\"\n                            tooltip=\"Delete symbol set\"\n                            icon={<IconTrash />}\n                            onClick={() =>\n                                LemonDialog.open({\n                                    title: 'Delete symbol set',\n                                    description: 'Are you sure you want to delete this symbol set?',\n                                    secondaryButton: {\n                                        type: 'secondary',\n                                        children: 'Cancel',\n                                    },\n                                    primaryButton: {\n                                        type: 'primary',\n                                        onClick: () => deleteSymbolSet(id),\n                                        children: 'Delete',\n                                    },\n                                })\n                            }\n                            className=\"py-1\"\n                        />\n                    </div>\n                )\n            },\n        },\n    ]\n\n    if (missing) {\n        columns.splice(1, 0, { title: 'Failure reason', dataIndex: 'failure_reason' })\n    }\n\n    return (\n        <LemonTable\n            id={id}\n            showHeader={missing}\n            pagination={{ pageSize }}\n            columns={columns}\n            loading={symbolSetsLoading}\n            dataSource={dataSource}\n            expandable={{\n                noIndent: true,\n                expandedRowRender: function RenderPropertiesTable(symbolSet) {\n                    return <SymbolSetStackFrames symbolSet={symbolSet} />\n                },\n            }}\n        />\n    )\n}\n\nconst SymbolSetStackFrames = ({ symbolSet }: { symbolSet: ErrorTrackingSymbolSet }): JSX.Element => {\n    const { stackFrameRecords } = useValues(stackFrameLogic)\n    const { loadForSymbolSet } = useActions(stackFrameLogic)\n    const [activeTab, setActiveTab] = useState<'contents' | 'context'>('contents')\n\n    useEffect(() => {\n        loadForSymbolSet(symbolSet.id)\n    }, [loadForSymbolSet, symbolSet])\n\n    const frames = Object.values(stackFrameRecords).filter((r) => r.symbol_set_ref == symbolSet.ref)\n\n    return (\n        <LemonCollapse\n            size=\"small\"\n            panels={frames.map(({ id, raw_id, contents, context }) => ({\n                key: id,\n                header: raw_id,\n                className: 'py-0',\n                content: (\n                    <LemonTabs\n                        activeKey={activeTab}\n                        onChange={setActiveTab}\n                        tabs={[\n                            { key: 'contents', label: 'Contents', content: <JSONViewer src={contents} name={null} /> },\n                            context && {\n                                key: 'context',\n                                label: 'Context',\n                                content: <JSONViewer src={context} name={null} />,\n                            },\n                        ]}\n                    />\n                ),\n            }))}\n            embedded\n        />\n    )\n}\n", "import { lemonToast } from '@posthog/lemon-ui'\nimport { actions, kea, path, reducers, selectors } from 'kea'\nimport { forms } from 'kea-forms'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { ErrorTrackingSymbolSet } from 'lib/components/Errors/types'\nimport { Scene } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { Breadcrumb } from '~/types'\n\nimport type { errorTrackingSymbolSetLogicType } from './errorTrackingSymbolSetLogicType'\n\nexport enum ErrorGroupTab {\n    Overview = 'overview',\n    Breakdowns = 'breakdowns',\n}\n\nexport type SymbolSetUpload = SourceMapUpload\n\nexport interface SourceMapUpload {\n    minified: File\n    sourcemap: File\n}\n\nexport const errorTrackingSymbolSetLogic = kea<errorTrackingSymbolSetLogicType>([\n    path(['scenes', 'error-tracking', 'errorTrackingSymbolSetLogic']),\n\n    actions({\n        setUploadSymbolSetId: (id: ErrorTrackingSymbolSet['id'] | null) => ({ id }),\n    }),\n\n    reducers({\n        uploadSymbolSetId: [\n            null as string | null,\n            {\n                setUploadSymbolSetId: (_, { id }) => id,\n            },\n        ],\n    }),\n\n    loaders(({ values }) => ({\n        symbolSets: [\n            [] as ErrorTrackingSymbolSet[],\n            {\n                loadSymbolSets: async () => {\n                    const response = await api.errorTracking.symbolSets()\n                    return response.results\n                },\n                deleteSymbolSet: async (id) => {\n                    await api.errorTracking.deleteSymbolSet(id)\n                    const newValues = [...values.symbolSets]\n                    return newValues.filter((v) => v.id !== id)\n                },\n            },\n        ],\n    })),\n\n    selectors({\n        breadcrumbs: [\n            () => [],\n            (): Breadcrumb[] => [\n                {\n                    key: Scene.ErrorTracking,\n                    name: 'Error tracking',\n                    path: urls.errorTracking(),\n                },\n                {\n                    key: Scene.ErrorTrackingConfiguration,\n                    name: 'Configuration',\n                },\n            ],\n        ],\n        validSymbolSets: [(s) => [s.symbolSets], (symbolSets) => symbolSets.filter((s) => !!s.storage_ptr)],\n        missingSymbolSets: [(s) => [s.symbolSets], (symbolSets) => symbolSets.filter((s) => !s.storage_ptr)],\n    }),\n\n    forms(({ values, actions }) => ({\n        uploadSymbolSet: {\n            defaults: { minified: [], sourceMap: [] } as { minified: File[]; sourceMap: File[] },\n            submit: async ({ minified, sourceMap }) => {\n                if (minified.length < 1 || sourceMap.length < 1) {\n                    lemonToast.error('Please select both a minified file and a source map file')\n                    return\n                }\n\n                const minifiedSrc = minified[0]\n                const sourceMapSrc = sourceMap[0]\n                const id = values.uploadSymbolSetId\n\n                if (id == null) {\n                    return\n                }\n\n                const formData = new FormData()\n                formData.append('minified', minifiedSrc)\n                formData.append('source_map', sourceMapSrc)\n                await api.errorTracking.updateSymbolSet(id, formData)\n                actions.setUploadSymbolSetId(null)\n                actions.loadSymbolSets()\n                actions.resetUploadSymbolSet()\n                lemonToast.success('Source map uploaded')\n            },\n        },\n    })),\n])\n", "import { LemonButton, LemonFileInput, LemonModal } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport { IconUploadFile } from 'lib/lemon-ui/icons'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\n\nimport { errorTrackingSymbolSetLogic } from './errorTrackingSymbolSetLogic'\n\nexport const SymbolSetUploadModal = (): JSX.Element => {\n    const { setUploadSymbolSetId } = useActions(errorTrackingSymbolSetLogic)\n    const { uploadSymbolSetId, isUploadSymbolSetSubmitting, uploadSymbolSet } = useValues(errorTrackingSymbolSetLogic)\n\n    const onClose = (): void => setUploadSymbolSetId(null)\n\n    return (\n        <LemonModal title=\"\" onClose={onClose} isOpen={!!uploadSymbolSetId} simple>\n            <Form logic={errorTrackingSymbolSetLogic} formKey=\"uploadSymbolSet\" className=\"gap-1\" enableFormOnSubmit>\n                <LemonModal.Header>\n                    <h3>Upload javscript symbol set</h3>\n                </LemonModal.Header>\n                <LemonModal.Content className=\"space-y-2\">\n                    <LemonField name=\"minified\">\n                        <LemonFileInput\n                            accept=\"text/javascript\"\n                            multiple={false}\n                            callToAction={\n                                <div className=\"flex flex-col items-center justify-center space-y-2 border border-dashed rounded p-4 w-full\">\n                                    <span className=\"flex items-center gap-2 font-semibold\">\n                                        <IconUploadFile className=\"text-2xl\" /> Add minified source\n                                    </span>\n                                    <div>\n                                        Drag and drop your minified source file here or click to open the file browser.\n                                    </div>\n                                </div>\n                            }\n                        />\n                    </LemonField>\n                    <LemonField name=\"sourcemap\">\n                        <LemonFileInput\n                            accept=\"*\"\n                            multiple={false}\n                            callToAction={\n                                <div className=\"flex flex-col items-center justify-center space-y-2 border border-dashed rounded p-4 w-full\">\n                                    <span className=\"flex items-center gap-2 font-semibold\">\n                                        <IconUploadFile className=\"text-2xl\" /> Add source map\n                                    </span>\n                                    <div>Drag and drop your source map here or click to open the file browser.</div>\n                                </div>\n                            }\n                        />\n                    </LemonField>\n                </LemonModal.Content>\n                <LemonModal.Footer>\n                    <LemonButton type=\"secondary\" onClick={onClose}>\n                        Cancel\n                    </LemonButton>\n                    <LemonButton\n                        disabledReason={\n                            uploadSymbolSet.minified.length < 1\n                                ? 'Upload a minified source'\n                                : uploadSymbolSet.sourceMap.length < 1\n                                ? 'Upload a source map'\n                                : undefined\n                        }\n                        type=\"primary\"\n                        status=\"alt\"\n                        htmlType=\"submit\"\n                        loading={isUploadSymbolSetSubmitting}\n                    >\n                        Upload\n                    </LemonButton>\n                </LemonModal.Footer>\n            </Form>\n        </LemonModal>\n    )\n}\n", "import { IconX } from '@posthog/icons'\nimport { useActions, useValues } from 'kea'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonInput } from 'lib/lemon-ui/LemonInput'\nimport React, { useState } from 'react'\nimport { teamLogic } from 'scenes/teamLogic'\n\nconst MIN_BOUNCE_RATE_DURATION = 1\nconst MAX_BOUNCE_RATE_DURATION = 120\nconst DEFAULT_BOUNCE_RATE_DURATION = 10\n\nexport function BounceRateDurationSetting(): JSX.Element {\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const { currentTeam } = useValues(teamLogic)\n\n    const savedDuration =\n        currentTeam?.modifiers?.bounceRateDurationSeconds ?? currentTeam?.default_modifiers?.bounceRateDurationSeconds\n    const [bounceRateDuration, setBounceRateDuration] = useState<number>(savedDuration ?? DEFAULT_BOUNCE_RATE_DURATION)\n\n    const handleChange = (duration: number | undefined): void => {\n        if (Number.isNaN(duration)) {\n            duration = undefined\n        }\n        updateCurrentTeam({\n            modifiers: { ...currentTeam?.modifiers, bounceRateDurationSeconds: duration },\n        })\n    }\n\n    const inputRef = React.useRef<HTMLInputElement>(null)\n\n    return (\n        <>\n            <p>\n                Choose how long a user can stay on a page, in seconds, before the session is not a bounce. Leave blank\n                to use the default of {DEFAULT_BOUNCE_RATE_DURATION} seconds, or set a custom value between{' '}\n                {MIN_BOUNCE_RATE_DURATION} second and {MAX_BOUNCE_RATE_DURATION} seconds inclusive.\n            </p>\n            <LemonInput\n                type=\"number\"\n                min={MIN_BOUNCE_RATE_DURATION}\n                max={MAX_BOUNCE_RATE_DURATION}\n                value={bounceRateDuration ?? null}\n                onChange={(x) => {\n                    if (x == null || Number.isNaN(x)) {\n                        setBounceRateDuration(DEFAULT_BOUNCE_RATE_DURATION)\n                    } else {\n                        setBounceRateDuration(x)\n                    }\n                }}\n                inputRef={inputRef}\n                suffix={\n                    <LemonButton\n                        size=\"small\"\n                        noPadding\n                        icon={<IconX />}\n                        tooltip=\"Clear input\"\n                        onClick={(e) => {\n                            e.stopPropagation()\n                            setBounceRateDuration(DEFAULT_BOUNCE_RATE_DURATION)\n                            inputRef.current?.focus()\n                        }}\n                    />\n                }\n            />\n            <div className=\"mt-4\">\n                <LemonButton\n                    type=\"primary\"\n                    onClick={() => handleChange(bounceRateDuration)}\n                    disabledReason={\n                        bounceRateDuration === savedDuration\n                            ? 'No changes to save'\n                            : bounceRateDuration == undefined\n                            ? undefined\n                            : isNaN(bounceRateDuration)\n                            ? 'Invalid number'\n                            : bounceRateDuration < MIN_BOUNCE_RATE_DURATION\n                            ? `Duration must be at least ${MIN_BOUNCE_RATE_DURATION} second`\n                            : bounceRateDuration > MAX_BOUNCE_RATE_DURATION\n                            ? `Duration must be less than ${MAX_BOUNCE_RATE_DURATION} seconds`\n                            : undefined\n                    }\n                >\n                    Save\n                </LemonButton>\n            </div>\n        </>\n    )\n}\n", "import { useActions, useValues } from 'kea'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonRadio, LemonRadioOption } from 'lib/lemon-ui/LemonRadio'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\nimport { useState } from 'react'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { HogQLQueryModifiers } from '~/queries/schema/schema-general'\n\ntype BounceRatePageViewMode = NonNullable<HogQLQueryModifiers['bounceRatePageViewMode']>\n\nconst bounceRatePageViewModeOptions: LemonRadioOption<BounceRatePageViewMode>[] = [\n    {\n        value: 'count_pageviews',\n        label: (\n            <>\n                <div>Counts pageviews</div>\n                <div className=\"text-secondary\">\n                    This is the default. Counts <code>$pageview</code> events in a session as part of the bounce rate\n                    calculation.\n                </div>\n            </>\n        ),\n    },\n    {\n        value: 'uniq_urls',\n        label: (\n            <>\n                <div>Counts unique urls visited</div>\n                <div className=\"text-secondary\">\n                    Counts the number of unique url visited as part of the bounce rate calculation\n                </div>\n            </>\n        ),\n    },\n    {\n        value: 'uniq_page_screen_autocaptures',\n        label: (\n            <>\n                <div>Use uniqUpTo</div>\n                <div className=\"text-secondary\">\n                    Uses the <code>uniqUpTo</code> function to count if the total unique pageviews + screen events +\n                    autocaptures is &gte; 2\n                </div>\n            </>\n        ),\n    },\n]\n\nexport function BounceRatePageViewModeSetting(): JSX.Element {\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const { currentTeam } = useValues(teamLogic)\n    const { reportBounceRatePageViewModeUpdated } = useActions(eventUsageLogic)\n\n    const savedBounceRatePageViewMode =\n        currentTeam?.modifiers?.bounceRatePageViewMode ??\n        currentTeam?.default_modifiers?.bounceRatePageViewMode ??\n        'count_pageviews'\n    const [bounceRatePageViewMode, setBounceRatePageViewMode] =\n        useState<BounceRatePageViewMode>(savedBounceRatePageViewMode)\n\n    const handleChange = (mode: BounceRatePageViewMode): void => {\n        updateCurrentTeam({ modifiers: { ...currentTeam?.modifiers, bounceRatePageViewMode: mode } })\n        reportBounceRatePageViewModeUpdated(mode)\n    }\n\n    return (\n        <>\n            <p>\n                Choose how pageviews are counted, as part of the bounce rate calculation. Note that other factors are\n                taken into account, e.g. the number of autocaptures, and the session duration.\n            </p>\n            <LemonRadio\n                value={bounceRatePageViewMode}\n                onChange={setBounceRatePageViewMode}\n                options={bounceRatePageViewModeOptions}\n            />\n            <div className=\"mt-4\">\n                <LemonButton\n                    type=\"primary\"\n                    onClick={() => handleChange(bounceRatePageViewMode)}\n                    disabledReason={\n                        bounceRatePageViewMode === savedBounceRatePageViewMode ? 'No changes to save' : undefined\n                    }\n                >\n                    Save\n                </LemonButton>\n            </div>\n        </>\n    )\n}\n", "import { useActions, useValues } from 'kea'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonRadio, LemonRadioOption } from 'lib/lemon-ui/LemonRadio'\nimport { useState } from 'react'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { CookielessServerHashMode } from '~/types'\n\nconst options: LemonRadioOption<CookielessServerHashMode>[] = [\n    {\n        value: CookielessServerHashMode.Stateful,\n        label: (\n            <>\n                <div>Stateful</div>\n            </>\n        ),\n    },\n    {\n        value: CookielessServerHashMode.Stateless,\n        label: (\n            <>\n                <div>Stateless</div>\n            </>\n        ),\n    },\n    {\n        value: CookielessServerHashMode.Disabled,\n        label: (\n            <>\n                <div>Disabled</div>\n            </>\n        ),\n    },\n]\n\nexport function CookielessServerHashModeSetting(): JSX.Element {\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const { currentTeam } = useValues(teamLogic)\n\n    const savedSetting = currentTeam?.cookieless_server_hash_mode ?? CookielessServerHashMode.Disabled\n    const [setting, setSetting] = useState<CookielessServerHashMode>(savedSetting)\n\n    const handleChange = (newSetting: CookielessServerHashMode): void => {\n        updateCurrentTeam({ cookieless_server_hash_mode: newSetting })\n    }\n\n    return (\n        <>\n            <p>\n                Use a cookieless server-side hash mode to hash user data. This is an experimental feature preview and\n                may result in dropped events.\n            </p>\n            <LemonRadio value={setting} onChange={setSetting} options={options} />\n            <div className=\"mt-4\">\n                <LemonButton\n                    type=\"primary\"\n                    onClick={() => handleChange(setting)}\n                    disabledReason={setting === savedSetting ? 'No changes to save' : undefined}\n                >\n                    Save\n                </LemonButton>\n            </div>\n        </>\n    )\n}\n", "import { IconPlus } from '@posthog/icons'\nimport { useActions, useValues } from 'kea'\nimport { PropertyValue } from 'lib/components/PropertyFilters/components/PropertyValue'\nimport { VerticalNestedDND } from 'lib/components/VerticalNestedDND/VerticalNestedDND'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonInputSelect, LemonInputSelectOption } from 'lib/lemon-ui/LemonInputSelect'\nimport { LemonSelect } from 'lib/lemon-ui/LemonSelect'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { genericOperatorMap, UnexpectedNeverError, uuid } from 'lib/utils'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\nimport isEqual from 'lodash.isequal'\nimport { useMemo, useState } from 'react'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { urls } from 'scenes/urls'\n\nimport {\n    CustomChannelCondition,\n    CustomChannelField,\n    CustomChannelOperator,\n    CustomChannelRule,\n    DefaultChannelTypes,\n} from '~/queries/schema/schema-general'\nimport { FilterLogicalOperator, PropertyFilterType, PropertyOperator } from '~/types'\n\nconst combinerOptions = [\n    { label: 'All', value: FilterLogicalOperator.And },\n    { label: 'Any', value: FilterLogicalOperator.Or },\n]\n\nconst keyOptions = [\n    {\n        label: 'Referring domain',\n        value: CustomChannelField.ReferringDomain,\n    },\n    {\n        label: 'UTM Source',\n        value: CustomChannelField.UTMSource,\n    },\n    {\n        label: 'UTM Medium',\n        value: CustomChannelField.UTMMedium,\n    },\n    {\n        label: 'UTM Campaign',\n        value: CustomChannelField.UTMCampaign,\n    },\n    {\n        label: 'URL',\n        value: CustomChannelField.URL,\n    },\n    {\n        label: 'Hostname',\n        value: CustomChannelField.Hostname,\n    },\n    {\n        label: 'Pathname',\n        value: CustomChannelField.Pathname,\n    },\n]\n\nconst opOptions = Object.values(CustomChannelOperator).map((op) => {\n    return {\n        label: genericOperatorMap[op],\n        value: op,\n    }\n})\n\nconst isNullary = (operator: CustomChannelOperator): boolean => {\n    return [CustomChannelOperator.IsSet, CustomChannelOperator.IsNotSet].includes(operator)\n}\n\nconst opToPropertyOperator: Record<CustomChannelOperator, PropertyOperator> = {\n    [CustomChannelOperator.Exact]: PropertyOperator.Exact,\n    [CustomChannelOperator.IsNot]: PropertyOperator.IsNot,\n    [CustomChannelOperator.IsSet]: PropertyOperator.IsSet,\n    [CustomChannelOperator.IsNotSet]: PropertyOperator.IsNotSet,\n    [CustomChannelOperator.IContains]: PropertyOperator.IContains,\n    [CustomChannelOperator.NotIContains]: PropertyOperator.NotIContains,\n    [CustomChannelOperator.Regex]: PropertyOperator.Regex,\n    [CustomChannelOperator.NotRegex]: PropertyOperator.NotRegex,\n}\n\nfunction keyToSessionProperty(key: CustomChannelField): string {\n    switch (key) {\n        case CustomChannelField.ReferringDomain:\n            return '$entry_referring_domain'\n        case CustomChannelField.UTMSource:\n            return '$entry_utm_source'\n        case CustomChannelField.UTMMedium:\n            return '$entry_utm_medium'\n        case CustomChannelField.UTMCampaign:\n            return '$entry_utm_campaign'\n        case CustomChannelField.URL:\n            return '$entry_url'\n        case CustomChannelField.Hostname:\n            return '$entry_hostname'\n        case CustomChannelField.Pathname:\n            return '$entry_pathname'\n        default:\n            throw new UnexpectedNeverError(key)\n    }\n}\n\nconst sanitizeCustomChannelTypeRules = (rules?: CustomChannelRule[]): CustomChannelRule[] => {\n    return (rules ?? [])\n        .map((rule) => {\n            return {\n                id: rule.id || uuid(),\n                channel_type: rule.channel_type,\n                combiner: rule.combiner,\n                items: (rule.items || [])\n                    .map((condition) => ({\n                        id: condition.id || uuid(),\n                        key: condition.key,\n                        op: condition.op,\n                        value: condition.value,\n                    }))\n                    .filter((item) => item.key && item.op && item.value),\n            }\n        })\n        .filter((rule) => rule.channel_type && rule.items.length > 0)\n}\n\nexport function CustomChannelTypes(): JSX.Element {\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const { currentTeam } = useValues(teamLogic)\n    const { reportCustomChannelTypeRulesUpdated } = useActions(eventUsageLogic)\n\n    const [savedCustomChannelTypeRules, setSavedCustomChannelTypeRules] = useState(() =>\n        sanitizeCustomChannelTypeRules(\n            currentTeam?.modifiers?.customChannelTypeRules ?? currentTeam?.default_modifiers?.customChannelTypeRules\n        )\n    )\n\n    const [customChannelTypeRules, setCustomChannelTypeRules] = useState(savedCustomChannelTypeRules)\n\n    const channelTypeOptions = useMemo((): LemonInputSelectOption[] => {\n        const optionsSet = new Set<string>([\n            ...customChannelTypeRules.map((rule) => rule.channel_type),\n            ...Object.values(DefaultChannelTypes),\n        ])\n        return Array.from(optionsSet)\n            .filter(Boolean)\n            .map((channelType) => ({ label: channelType, key: channelType }))\n    }, [customChannelTypeRules])\n\n    return (\n        <div>\n            <p>\n                You can create custom channel types by defining rules that match incoming events. The first matching\n                rule is used, and if no rule matches (or if none are defined) then the{' '}\n                <Link to=\"https://posthog.com/docs/data/channel-type#channel-type-calculation\">\n                    default channel type\n                </Link>{' '}\n                is used.\n            </p>\n            <p>\n                To debug, try the{' '}\n                <Link to={urls.sessionAttributionExplorer()} target=\"_blank\">\n                    session attribution explorer tool\n                </Link>\n            </p>\n            <ChannelTypeEditor\n                handleChange={setCustomChannelTypeRules}\n                initialCustomChannelTypeRules={customChannelTypeRules}\n                channelTypeOptions={channelTypeOptions}\n                onSave={() => {\n                    updateCurrentTeam({\n                        modifiers: { customChannelTypeRules: sanitizeCustomChannelTypeRules(customChannelTypeRules) },\n                    })\n                    reportCustomChannelTypeRulesUpdated(customChannelTypeRules.length)\n                    setSavedCustomChannelTypeRules(customChannelTypeRules)\n                }}\n                isSaveDisabled={isEqual(customChannelTypeRules, savedCustomChannelTypeRules)}\n            />\n        </div>\n    )\n}\n\nexport interface ChannelTypeEditorProps {\n    handleChange: (rules: CustomChannelRule[]) => void\n    initialCustomChannelTypeRules: CustomChannelRule[]\n    channelTypeOptions: LemonInputSelectOption[]\n    isSaveDisabled: boolean\n    onSave: () => void\n}\n\nexport function ChannelTypeEditor({\n    handleChange,\n    initialCustomChannelTypeRules,\n    channelTypeOptions,\n    isSaveDisabled,\n    onSave,\n}: ChannelTypeEditorProps): JSX.Element {\n    return (\n        <VerticalNestedDND<CustomChannelCondition, CustomChannelRule>\n            initialItems={initialCustomChannelTypeRules}\n            renderContainerItem={(rule, { updateContainerItem }) => {\n                return (\n                    <div className=\"flex flex-col space-y-2\">\n                        <div className=\"flex flex-row items-center space-x-2\">\n                            <span>Set Channel type to</span>\n                            <LemonInputSelect\n                                className=\"flex-1\"\n                                mode=\"single\"\n                                allowCustomValues={true}\n                                value={[rule.channel_type]}\n                                onChange={(channelType) =>\n                                    updateContainerItem({\n                                        ...rule,\n                                        channel_type: channelType[0],\n                                    })\n                                }\n                                options={channelTypeOptions}\n                                placeholder=\"Enter a channel type name\"\n                            />\n                        </div>\n                        {rule.items.length > 0 ? (\n                            <div>\n                                {rule.items.length == 1 ? (\n                                    'when this condition is met'\n                                ) : (\n                                    <div className=\"flex flex-row items-center space-x-2\">\n                                        <span>When</span>\n                                        <LemonSelect\n                                            value={rule.combiner}\n                                            options={combinerOptions}\n                                            onChange={(combiner) => updateContainerItem({ ...rule, combiner })}\n                                        />\n                                        <span>conditions are met</span>\n                                    </div>\n                                )}\n                            </div>\n                        ) : null}\n                    </div>\n                )\n            }}\n            renderChildItem={(rule, { updateChildItem }) => {\n                return (\n                    <div className=\"w-full space-y-2\">\n                        <div className=\"flex flex-row space-x-2\">\n                            <LemonSelect<CustomChannelField>\n                                value={rule.key}\n                                options={keyOptions}\n                                onChange={(key) => updateChildItem({ ...rule, key })}\n                            />\n                            <LemonSelect<CustomChannelOperator>\n                                value={rule.op}\n                                options={opOptions}\n                                onChange={(op) => updateChildItem({ ...rule, op })}\n                            />\n                        </div>\n                        {isNullary(rule.op) ? null : (\n                            <PropertyValue\n                                key={rule.key}\n                                propertyKey={keyToSessionProperty(rule.key)}\n                                type={PropertyFilterType.Session}\n                                onSet={(propertyValue: any) => {\n                                    updateChildItem({ ...rule, value: propertyValue })\n                                }}\n                                operator={opToPropertyOperator[rule.op]}\n                                value={rule.value}\n                                placeholder=\"Enter a value\"\n                            />\n                        )}\n                    </div>\n                )\n            }}\n            renderAddChildItem={(rule, { onAddChild }) => {\n                return (\n                    <LemonButton type=\"primary\" onClick={() => onAddChild(rule.id)} icon={<IconPlus />}>\n                        Add condition\n                    </LemonButton>\n                )\n            }}\n            renderAddContainerItem={({ onAddContainer }) => {\n                return (\n                    <LemonButton type=\"primary\" onClick={onAddContainer} icon={<IconPlus />}>\n                        Add rule\n                    </LemonButton>\n                )\n            }}\n            renderAdditionalControls={() => {\n                return (\n                    <LemonButton\n                        onClick={onSave}\n                        disabledReason={isSaveDisabled ? 'No changes to save' : undefined}\n                        type=\"primary\"\n                    >\n                        Save custom channel type rules\n                    </LemonButton>\n                )\n            }}\n            createNewContainerItem={() => {\n                return {\n                    id: uuid(),\n                    items: [\n                        {\n                            id: uuid(),\n                            key: CustomChannelField.ReferringDomain,\n                            op: CustomChannelOperator.Exact,\n                            value: [],\n                        },\n                    ],\n                    channel_type: '',\n                    combiner: FilterLogicalOperator.And,\n                }\n            }}\n            createNewChildItem={() => {\n                return {\n                    id: uuid(),\n                    key: CustomChannelField.ReferringDomain,\n                    op: CustomChannelOperator.Exact,\n                    value: [],\n                }\n            }}\n            onChange={handleChange}\n        />\n    )\n}\n", "import {\n    closestCenter,\n    CollisionDetection,\n    defaultDropAnimationSideEffects,\n    DndContext,\n    DraggableSyntheticListeners,\n    DragOverlay,\n    DropAnimation,\n    getFirstCollision,\n    MeasuringStrategy,\n    MouseSensor,\n    pointerWithin,\n    rectIntersection,\n    TouchSensor,\n    useSensor,\n    useSensors,\n} from '@dnd-kit/core'\nimport type { UniqueIdentifier } from '@dnd-kit/core/dist/types'\nimport {\n    AnimateLayoutChanges,\n    arrayMove,\n    defaultAnimateLayoutChanges,\n    SortableContext,\n    useSortable,\n    verticalListSortingStrategy,\n} from '@dnd-kit/sortable'\nimport type { Transform } from '@dnd-kit/utilities'\nimport { CSS } from '@dnd-kit/utilities'\nimport { IconTrash } from '@posthog/icons'\nimport { IconDragHandle } from 'lib/lemon-ui/icons'\nimport { LemonButton, LemonButtonProps } from 'lib/lemon-ui/LemonButton'\nimport debounce from 'lodash.debounce'\nimport isEqual from 'lodash.isequal'\nimport React, { forwardRef, useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { createPortal, unstable_batchedUpdates } from 'react-dom'\n\nconst NOOP = (): void => {}\nexport interface VDNDChildItem {\n    id: UniqueIdentifier\n}\n\nexport interface VNDNDContainerItem<T extends VDNDChildItem> {\n    items?: T[]\n    id: UniqueIdentifier\n}\n\nexport interface VerticalNestedDNDProps<ChildItem extends VDNDChildItem, Item extends VNDNDContainerItem<ChildItem>> {\n    initialItems: Item[]\n    renderContainerItem: (item: Item, callbacks: { updateContainerItem: (item: Item) => void }) => JSX.Element | null\n    renderChildItem: (item: ChildItem, callbacks: { updateChildItem: (item: ChildItem) => void }) => JSX.Element | null\n    renderAddChildItem?: (item: Item, callbacks: { onAddChild: (id: UniqueIdentifier) => void }) => JSX.Element | null\n    renderAddContainerItem?: (callbacks: { onAddContainer: () => void }) => JSX.Element | null\n    renderAdditionalControls?: () => JSX.Element | null\n    createNewContainerItem(): Item\n    createNewChildItem(): ChildItem\n    onChange?(items: Item[]): void\n}\n\nexport function VerticalNestedDND<ChildItem extends VDNDChildItem, Item extends VNDNDContainerItem<ChildItem>>({\n    initialItems,\n    renderContainerItem,\n    renderChildItem,\n    createNewChildItem,\n    createNewContainerItem,\n    renderAddChildItem,\n    renderAddContainerItem,\n    renderAdditionalControls,\n    onChange,\n}: VerticalNestedDNDProps<ChildItem, Item>): JSX.Element {\n    const [items, setItems] = useState(() => {\n        const items: Record<UniqueIdentifier, Item> = {}\n        initialItems.forEach((item) => {\n            items[item.id] = item\n        })\n        return items\n    })\n    const [clonedItems, setClonedItems] = useState<Record<UniqueIdentifier, Item> | null>(null)\n\n    const handle = true\n\n    const [containers, setContainers] = useState(Object.keys(items) as UniqueIdentifier[])\n    const [activeId, setActiveId] = useState<UniqueIdentifier | null>(null)\n    const lastOverId = useRef<UniqueIdentifier | null>(null)\n    const recentlyMovedToNewContainer = useRef(false)\n    const sensors = useSensors(useSensor(MouseSensor), useSensor(TouchSensor))\n    const isSortingContainer = activeId ? containers.includes(activeId) : false\n\n    const debouncedOnChanged = useMemo(\n        () => (onChange ? debounce(onChange, 200, { trailing: true }) : undefined),\n        [onChange]\n    )\n    const savedChanges = useRef<Item[]>(initialItems)\n    useEffect(() => {\n        const newItemsArray = containers.map((containerId) => items[containerId])\n        if (!isEqual(newItemsArray, savedChanges.current)) {\n            savedChanges.current = newItemsArray\n            debouncedOnChanged?.(newItemsArray)\n        }\n    }, [containers, items, debouncedOnChanged])\n\n    const collisionDetectionStrategy: CollisionDetection = useCallback(\n        // this is mostly copied from the DND kit docs\n        (args) => {\n            if (activeId && activeId in items) {\n                return closestCenter({\n                    ...args,\n                    droppableContainers: args.droppableContainers.filter((container) => container.id in items),\n                })\n            }\n            const pointerIntersections = pointerWithin(args)\n            const intersections =\n                pointerIntersections.length > 0\n                    ? // If there are droppables intersecting with the pointer, return those\n                      pointerIntersections\n                    : rectIntersection(args)\n            let overId = getFirstCollision(intersections, 'id')\n\n            if (overId != null) {\n                if (overId in items) {\n                    const containerItems = items[overId].items\n\n                    if (containerItems && containerItems.length > 0) {\n                        overId = closestCenter({\n                            ...args,\n                            droppableContainers: args.droppableContainers.filter(\n                                (container) =>\n                                    container.id !== overId &&\n                                    containerItems.some((ChildItem) => ChildItem.id === container.id)\n                            ),\n                        })[0]?.id\n                    }\n                }\n\n                lastOverId.current = overId\n\n                return [{ id: overId }]\n            }\n\n            if (recentlyMovedToNewContainer.current) {\n                lastOverId.current = activeId\n            }\n\n            return lastOverId.current ? [{ id: lastOverId.current }] : []\n        },\n        [activeId, items]\n    )\n    const findContainer = (id: UniqueIdentifier): UniqueIdentifier | undefined => {\n        if (id in items) {\n            return id\n        }\n\n        return Object.keys(items).find((key) => items[key].items?.some((item) => item.id === id))\n    }\n\n    const findChildItem = (id: UniqueIdentifier): ChildItem | undefined => {\n        for (const containerId in items) {\n            const item = items[containerId].items?.find((item) => item.id === id)\n            if (item) {\n                return item\n            }\n        }\n    }\n\n    const getIndex = (id: UniqueIdentifier): number => {\n        const container = findContainer(id)\n\n        if (!container) {\n            return -1\n        }\n        const childItems = items[container].items\n        if (!childItems) {\n            return -1\n        }\n\n        return childItems.findIndex((ChildItem) => ChildItem.id === id)\n    }\n\n    const onDragCancel = (): void => {\n        if (clonedItems) {\n            // Reset items to their original state in case items have been\n            // Dragged across containers\n            setItems(clonedItems)\n        }\n\n        setActiveId(null)\n        setClonedItems(null)\n    }\n\n    useEffect(() => {\n        requestAnimationFrame(() => {\n            recentlyMovedToNewContainer.current = false\n        })\n    }, [items])\n\n    return (\n        <DndContext\n            sensors={sensors}\n            collisionDetection={collisionDetectionStrategy}\n            measuring={{\n                droppable: {\n                    strategy: MeasuringStrategy.Always,\n                },\n            }}\n            onDragStart={({ active }) => {\n                setActiveId(active.id)\n                setClonedItems(items)\n            }}\n            onDragOver={({ active, over }) => {\n                const overId = over?.id\n                const activeIsContainer = active.id in items\n\n                if (overId == null) {\n                    return\n                }\n\n                if (activeIsContainer) {\n                    const overContainerId = findContainer(overId)\n                    if (!overContainerId) {\n                        return\n                    }\n                    if (activeId !== overContainerId) {\n                        setContainers((containers) => {\n                            const activeIndex = containers.indexOf(active.id)\n                            const overIndex = containers.indexOf(overContainerId)\n\n                            return arrayMove(containers, activeIndex, overIndex)\n                        })\n                    }\n                } else {\n                    const overContainerId = findContainer(overId)\n                    const activeContainerId = findContainer(active.id)\n\n                    if (!overContainerId || !activeContainerId) {\n                        return\n                    }\n                    const activeContainer = items[activeContainerId]\n                    const overContainer = items[overContainerId]\n\n                    if (activeContainerId !== overContainerId) {\n                        setItems((items) => {\n                            const activeItems = items[activeContainerId].items || []\n                            const overItems = items[overContainerId].items || []\n                            const overIndex = overItems.findIndex((ChildItem) => ChildItem.id === overId)\n                            const activeIndex = activeItems.findIndex((ChildItem) => ChildItem.id === active.id)\n\n                            let newIndex: number\n                            if (overId in items) {\n                                newIndex = overItems.length + 1\n                            } else {\n                                const isBelowOverItem =\n                                    over &&\n                                    active.rect.current.translated &&\n                                    active.rect.current.translated.top > over.rect.top + over.rect.height\n\n                                const modifier = isBelowOverItem ? 1 : 0\n\n                                newIndex = overIndex >= 0 ? overIndex + modifier : overItems.length + 1\n                            }\n\n                            recentlyMovedToNewContainer.current = true\n\n                            const newActiveContainer = {\n                                ...activeContainer,\n                                items: activeItems.filter((item) => item.id !== active.id),\n                            }\n                            const newOverContainer = {\n                                ...overContainer,\n                                items: [\n                                    ...overItems.slice(0, newIndex),\n                                    activeItems[activeIndex],\n                                    ...overItems.slice(newIndex, overItems.length),\n                                ],\n                            }\n\n                            return {\n                                ...items,\n                                [activeContainerId]: newActiveContainer,\n                                [overContainerId]: newOverContainer,\n                            }\n                        })\n                    } else if (overId !== active.id) {\n                        setItems((items) => {\n                            const overItems = items[overContainerId].items || []\n                            const overIndex = overItems.findIndex((ChildItem) => ChildItem.id === overId)\n                            const activeIndex = overItems.findIndex((ChildItem) => ChildItem.id === active.id)\n\n                            const isBelowOverItem =\n                                over &&\n                                active.rect.current.translated &&\n                                active.rect.current.translated.top > over.rect.top + over.rect.height\n\n                            const modifier = isBelowOverItem ? 1 : 0\n\n                            const newItems = arrayMove(overItems, activeIndex, overIndex + modifier)\n                            const newOverContainer = {\n                                ...overContainer,\n                                items: newItems,\n                            }\n                            return {\n                                ...items,\n                                [overContainerId]: newOverContainer,\n                            }\n                        })\n                    }\n                }\n            }}\n            onDragEnd={({ active, over }) => {\n                if (active.id in items && over?.id) {\n                    setContainers((containers) => {\n                        const activeIndex = containers.indexOf(active.id)\n                        const overIndex = containers.indexOf(over.id)\n\n                        return arrayMove(containers, activeIndex, overIndex)\n                    })\n                }\n\n                const activeContainerId = findContainer(active.id)\n\n                if (!activeContainerId) {\n                    setActiveId(null)\n                    return\n                }\n\n                const overId = over?.id\n\n                if (overId == null) {\n                    setActiveId(null)\n                    return\n                }\n\n                const overContainerId = findContainer(overId)\n\n                if (overContainerId) {\n                    const overItems = items[overContainerId].items || []\n                    const activeItems = items[activeContainerId].items || []\n                    const activeIndex = activeItems.findIndex((ChildItem) => ChildItem.id === active.id)\n                    const overIndex = overItems.findIndex((ChildItem) => ChildItem.id === overId)\n\n                    if (activeIndex !== overIndex) {\n                        setItems((items) => {\n                            const overItems = items[overContainerId].items || []\n                            const newOverContainer = {\n                                ...items[overContainerId],\n                                items: arrayMove(overItems, activeIndex, overIndex),\n                            }\n                            return {\n                                ...items,\n                                [overContainerId]: newOverContainer,\n                            }\n                        })\n                    }\n                }\n\n                setActiveId(null)\n            }}\n            onDragCancel={onDragCancel}\n        >\n            <div className=\"space-y-2\">\n                <SortableContext items={containers} strategy={verticalListSortingStrategy}>\n                    {containers.map((containerId) => (\n                        <DroppableContainer\n                            key={containerId}\n                            items={items[containerId].items || []}\n                            onRemove={() => handleRemoveContainer(containerId)}\n                            renderContainerItem={renderContainerItem}\n                            containerItemId={containerId}\n                            item={items[containerId]}\n                            onAddChild={handleAddChildItem}\n                            updateContainerItem={updateContainerItem}\n                            renderAddChildItem={renderAddChildItem}\n                        >\n                            <SortableContext\n                                items={items[containerId].items || []}\n                                strategy={verticalListSortingStrategy}\n                            >\n                                {(items[containerId].items || []).map((value, index) => {\n                                    return (\n                                        <SortableItem\n                                            disabled={isSortingContainer}\n                                            key={value.id}\n                                            id={value.id}\n                                            index={index}\n                                            handle={handle}\n                                            containerId={containerId}\n                                            getIndex={getIndex}\n                                            renderChildItem={renderChildItem}\n                                            updateChildItem={updateChildItem}\n                                            onRemove={handleRemoveChild}\n                                            item={value}\n                                        />\n                                    )\n                                })}\n                            </SortableContext>\n                        </DroppableContainer>\n                    ))}\n                </SortableContext>\n                <div className=\"px-[calc(1.5rem+1px)] flex flex-row justify-end space-x-2\">\n                    {renderAddContainerItem ? (\n                        renderAddContainerItem({ onAddContainer: handleAddContainerItem })\n                    ) : (\n                        <LemonButton onClick={handleAddContainerItem} fullWidth={false} type=\"primary\">\n                            Add container\n                        </LemonButton>\n                    )}\n                    {renderAdditionalControls ? renderAdditionalControls() : null}\n                </div>\n            </div>\n            {createPortal(\n                <DragOverlay dropAnimation={dropAnimation}>\n                    {activeId\n                        ? containers.includes(activeId)\n                            ? renderContainerDragOverlay(activeId)\n                            : renderSortableItemDragOverlay(activeId)\n                        : null}\n                </DragOverlay>,\n                document.body\n            )}\n        </DndContext>\n    )\n\n    function renderSortableItemDragOverlay(id: UniqueIdentifier): JSX.Element | null {\n        const item = findChildItem(id)\n        if (!item) {\n            return null\n        }\n        return (\n            <ChildItem\n                childItemId={id}\n                dragOverlay\n                renderChildItem={renderChildItem}\n                item={item}\n                updateChildItem={NOOP}\n                onRemove={NOOP}\n            />\n        )\n    }\n\n    function renderContainerDragOverlay(containerId: UniqueIdentifier): JSX.Element | null {\n        const item = items[containerId]\n        if (!item) {\n            return null\n        }\n        return (\n            <Container\n                containerItemId={containerId}\n                renderContainerItem={renderContainerItem}\n                item={item}\n                onAddChild={NOOP}\n                updateContainerItem={NOOP}\n            >\n                {(items[containerId].items || []).map((item) => (\n                    <ChildItem\n                        key={item.id}\n                        childItemId={item.id}\n                        renderChildItem={renderChildItem}\n                        item={item}\n                        updateChildItem={NOOP}\n                        onRemove={NOOP}\n                    />\n                ))}\n            </Container>\n        )\n    }\n\n    function handleRemoveContainer(containerID: UniqueIdentifier): void {\n        setContainers((containers) => containers.filter((id) => id !== containerID))\n    }\n\n    function handleRemoveChild(childId: UniqueIdentifier): void {\n        setItems((items) => {\n            const containerId = findContainer(childId)\n            if (!containerId) {\n                return items\n            }\n            const container = items[containerId]\n            return {\n                ...items,\n                [containerId]: {\n                    ...container,\n                    items: container.items?.filter((item) => item.id !== childId),\n                },\n            }\n        })\n    }\n\n    function handleAddContainerItem(): void {\n        const newItem: Item = createNewContainerItem()\n\n        unstable_batchedUpdates(() => {\n            setContainers((containers) => [...containers, newItem.id])\n            setItems((items) => ({\n                ...items,\n                [newItem.id]: newItem,\n            }))\n        })\n    }\n\n    function handleAddChildItem(containerId: UniqueIdentifier): void {\n        const newChild = createNewChildItem()\n\n        setItems((items) => {\n            const container = items[containerId]\n            return {\n                ...items,\n                [containerId]: {\n                    ...container,\n                    items: [...(container.items || []), newChild],\n                },\n            }\n        })\n    }\n\n    function updateContainerItem(item: Item): void {\n        setItems((items) => ({\n            ...items,\n            [item.id]: item,\n        }))\n    }\n\n    function updateChildItem(item: ChildItem): void {\n        const containerId = findContainer(item.id)\n\n        if (!containerId) {\n            return\n        }\n        setItems((items) => {\n            const container = items[containerId]\n            return {\n                ...items,\n                [containerId]: {\n                    ...container,\n                    items: (container.items || []).map((childItem) => {\n                        if (childItem.id === item.id) {\n                            return item\n                        }\n                        return childItem\n                    }),\n                },\n            }\n        })\n    }\n}\n\nconst dropAnimation: DropAnimation = {\n    sideEffects: defaultDropAnimationSideEffects({\n        styles: {\n            active: {\n                opacity: '0.4',\n            },\n        },\n    }),\n}\nconst animateLayoutChanges: AnimateLayoutChanges = (args) => defaultAnimateLayoutChanges({ ...args, wasDragging: true })\n\ninterface SortableItemProps<Item extends VDNDChildItem> {\n    containerId: UniqueIdentifier\n    id: UniqueIdentifier\n    index: number\n    handle: boolean\n    disabled?: boolean\n    getIndex(id: UniqueIdentifier): number\n    renderChildItem(item: Item, callbacks: { updateChildItem: (item: Item) => void }): JSX.Element | null\n    updateChildItem(item: Item): void\n    onRemove(id: UniqueIdentifier): void\n    item: Item\n}\n\nfunction SortableItem<Item extends VDNDChildItem>({\n    disabled,\n    id,\n    index,\n    handle,\n    renderChildItem,\n    updateChildItem,\n    onRemove,\n    item,\n}: SortableItemProps<Item>): JSX.Element {\n    const { setNodeRef, setActivatorNodeRef, listeners, isDragging, isSorting, transform, transition } = useSortable({\n        id,\n    })\n    const mounted = useMountStatus()\n    const mountedWhileDragging = isDragging && !mounted\n\n    return (\n        <ChildItem\n            ref={disabled ? undefined : setNodeRef}\n            childItemId={id}\n            isDragging={isDragging}\n            sorting={isSorting}\n            handleProps={handle ? { ref: setActivatorNodeRef } : undefined}\n            index={index}\n            transition={transition}\n            transform={transform}\n            fadeIn={mountedWhileDragging}\n            listeners={listeners}\n            renderChildItem={renderChildItem}\n            updateChildItem={updateChildItem}\n            onRemove={onRemove}\n            item={item}\n        />\n    )\n}\n\nfunction useMountStatus(): boolean {\n    const [isMounted, setIsMounted] = useState(false)\n\n    useEffect(() => {\n        const timeout = setTimeout(() => setIsMounted(true), 500)\n\n        return () => clearTimeout(timeout)\n    }, [])\n\n    return isMounted\n}\n\nfunction DroppableContainer<ChildItem extends VDNDChildItem, ContainerItem extends VNDNDContainerItem<ChildItem>>({\n    children,\n    disabled,\n    items,\n    style,\n    containerItemId,\n    ...props\n}: ContainerProps<ContainerItem> & {\n    disabled?: boolean\n    items: ChildItem[]\n    style?: React.CSSProperties\n}): JSX.Element {\n    const { attributes, isDragging, listeners, setNodeRef, transition, transform } = useSortable({\n        id: containerItemId,\n        data: {\n            type: 'container',\n            children: items,\n        },\n        animateLayoutChanges,\n    })\n\n    return (\n        <Container\n            ref={disabled ? undefined : setNodeRef}\n            isDragging={isDragging}\n            transform={CSS.Translate.toString(transform)}\n            transition={transition}\n            handleProps={{\n                ...attributes,\n                ...listeners,\n            }}\n            containerItemId={containerItemId}\n            {...props}\n        >\n            {children}\n        </Container>\n    )\n}\n\nexport interface ContainerProps<Item extends VNDNDContainerItem<any>> {\n    children: React.ReactNode\n    containerItemId: UniqueIdentifier\n    style?: React.CSSProperties\n    handleProps?: React.HTMLAttributes<any>\n    placeholder?: boolean\n    onClick?(): void\n    onRemove?(): void\n    onAddChild(containerId: UniqueIdentifier): void\n    isDragging?: boolean\n    transition?: string\n    transform?: string\n    renderContainerItem(item: Item, callbacks: { updateContainerItem: (item: Item) => void }): JSX.Element | null\n    updateContainerItem(item: Item): void\n    renderAddChildItem?(\n        item: Item,\n        callbacks: { onAddChild: (containerId: UniqueIdentifier) => void }\n    ): JSX.Element | null\n    item: Item\n}\n\nexport const Container = forwardRef(function Container_<Item extends VNDNDContainerItem<any>>(\n    {\n        children,\n        handleProps,\n        onClick,\n        onRemove,\n        onAddChild,\n        containerItemId,\n        placeholder,\n        style,\n        isDragging,\n        transform,\n        transition,\n        renderContainerItem,\n        updateContainerItem,\n        item,\n        renderAddChildItem,\n        ...props\n    }: ContainerProps<Item>,\n    ref: React.ForwardedRef<HTMLDivElement>\n) {\n    const Component = onClick ? 'button' : 'div'\n\n    return (\n        <Component\n            {...props}\n            className={`flex flex-col p-4 bg-surface-primary border rounded overflow-hidden space-y-2 ${\n                isDragging ? 'opacity-40' : ''\n            }`}\n            style={{\n                transform,\n                transition,\n            }}\n            // @ts-expect-error\n            ref={ref}\n            onClick={onClick}\n            tabIndex={onClick ? 0 : undefined}\n        >\n            <div className=\"flex flex-row justify-between px-2 space-x-2 items-start\">\n                <Handle {...handleProps} />\n                <div className=\"flex-1 self-stretch\">\n                    {renderContainerItem ? (\n                        renderContainerItem(item, { updateContainerItem })\n                    ) : (\n                        <div className=\"h-full flex flex-row items-center\">\n                            <span>Container {containerItemId}</span>\n                        </div>\n                    )}\n                </div>\n                <Remove onClick={onRemove} />\n            </div>\n            {placeholder ? children : <ul className=\"space-y-2\">{children}</ul>}\n            <div className=\"flex flex-row justify-end px-2 mb-2 space-x-2\">\n                {renderAddChildItem ? (\n                    renderAddChildItem(item, { onAddChild })\n                ) : (\n                    <LemonButton\n                        onClick={onRemove ? () => onAddChild(item.id) : undefined}\n                        fullWidth={false}\n                        type=\"secondary\"\n                    >\n                        Add child\n                    </LemonButton>\n                )}\n            </div>\n        </Component>\n    )\n})\n\nexport interface ChildItemProps<Item extends VDNDChildItem> {\n    dragOverlay?: boolean\n    color?: string\n    disabled?: boolean\n    isDragging?: boolean\n    handleProps?: any\n    height?: number\n    index?: number\n    fadeIn?: boolean\n    transform?: Transform | null\n    listeners?: DraggableSyntheticListeners\n    sorting?: boolean\n    style?: React.CSSProperties\n    transition?: string | null\n    wrapperStyle?: React.CSSProperties\n    childItemId: UniqueIdentifier\n    item: Item\n    onRemove(id: UniqueIdentifier): void\n    renderChildItem(item: Item, callbacks: { updateChildItem: (item: Item) => void }): JSX.Element | null\n    updateChildItem(item: Item): void\n}\n\nexport const ChildItem = React.memo(\n    React.forwardRef<HTMLLIElement, ChildItemProps<any>>(function ChildItem_(\n        {\n            color,\n            dragOverlay,\n            isDragging,\n            disabled,\n            fadeIn,\n            handleProps,\n            height,\n            index,\n            listeners,\n            onRemove,\n            sorting,\n            style,\n            transition,\n            transform,\n            childItemId,\n            wrapperStyle,\n            renderChildItem,\n            updateChildItem,\n            item,\n            ...props\n        },\n        ref\n    ) {\n        const handle = true\n        useEffect(() => {\n            if (!dragOverlay) {\n                return\n            }\n\n            document.body.style.cursor = 'grabbing'\n\n            return () => {\n                document.body.style.cursor = ''\n            }\n        }, [dragOverlay])\n\n        return (\n            <li\n                ref={ref}\n                className={`flex p-[calc(0.5rem-1px)] bg-surface-primary border rounded overflow-hidden ${\n                    isDragging ? 'opacity-40' : ''\n                }`}\n            >\n                <div\n                    data-cypress=\"draggable-item\"\n                    {...(!handle ? listeners : undefined)}\n                    {...props}\n                    tabIndex={!handle ? 0 : undefined}\n                    className=\"flex flex-row justify-between w-full space-x-2 items-start\"\n                >\n                    <Handle {...handleProps} {...listeners} />\n                    <div className=\"flex-1 self-stretch\">\n                        {renderChildItem ? (\n                            renderChildItem(item, { updateChildItem })\n                        ) : (\n                            <div className=\"h-full flex flex-row items-center\">\n                                <span>Item {childItemId}</span>\n                            </div>\n                        )}\n                    </div>\n                    <Remove onClick={() => onRemove(item.id)} />\n                </div>\n            </li>\n        )\n    })\n)\n\nexport function Remove(props: LemonButtonProps): JSX.Element {\n    return (\n        <LemonButton type=\"secondary\" fullWidth={false} status=\"danger\" size=\"small\" {...props}>\n            <IconTrash />\n        </LemonButton>\n    )\n}\n\nexport const Handle = forwardRef<HTMLButtonElement, LemonButtonProps>(function Handle_(props, ref) {\n    return (\n        <LemonButton type=\"tertiary\" fullWidth={false} ref={ref} size=\"small\" {...props} className=\"self-start\">\n            <div>\n                <IconDragHandle />\n            </div>\n        </LemonButton>\n    )\n})\n", "import { LemonSwitch } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport posthog from 'posthog-js'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nexport function DeadClicksAutocaptureSettings(): JSX.Element {\n    const { userLoading } = useValues(userLogic)\n    const { currentTeam } = useValues(teamLogic)\n    const { updateCurrentTeam } = useActions(teamLogic)\n\n    return (\n        <>\n            <p>\n                A dead click is a click that doesn't result in any action. E.g. an image that looks like a button. Your\n                user clicks it, nothing happens, they get frustrated and close the tab, and you missed a sale.\n            </p>\n            <p>\n                We track clicks that aren't followed by a scroll, text selection change, or DOM mutation and report them\n                so you can see where your users are getting stuck.\n            </p>\n            <div className=\"space-y-2\">\n                <LemonSwitch\n                    id=\"posthog-deadclicks-switch\"\n                    onChange={(checked) => {\n                        updateCurrentTeam({\n                            capture_dead_clicks: checked,\n                        })\n                        posthog.capture('dead_clicks_autocapture_toggled', { isEnabled: checked })\n                    }}\n                    checked={!!currentTeam?.capture_dead_clicks}\n                    disabled={userLoading}\n                    label=\"Enable dead clicks autocapture\"\n                    bordered\n                />\n            </div>\n        </>\n    )\n}\n", "import { LemonButton, LemonSkeleton, LemonTextArea } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { projectLogic } from 'scenes/projectLogic'\n\nimport { maxSettingsLogic } from './maxSettingsLogic'\n\nexport function MaxMemorySettings(): JSX.Element {\n    const { currentProject, currentProjectLoading } = useValues(projectLogic)\n    const { isLoading, isUpdating } = useValues(maxSettingsLogic)\n\n    return (\n        <Form logic={maxSettingsLogic} formKey=\"coreMemoryForm\" enableFormOnSubmit className=\"w-full space-y-4\">\n            {currentProjectLoading || isLoading ? (\n                <div className=\"gap-2 flex flex-col\">\n                    <LemonSkeleton className=\"h-6 w-32\" />\n                    <LemonSkeleton className=\"h-16\" />\n                </div>\n            ) : (\n                <LemonField name=\"text\" label=\"Max\u2019s memory\">\n                    <LemonTextArea\n                        id=\"product-description-textarea\" // Slightly dirty ID for .focus() elsewhere\n                        placeholder={`What's should Max know about ${\n                            currentProject ? currentProject.name : 'your company or this product'\n                        }?`}\n                        maxLength={10000}\n                        maxRows={5}\n                    />\n                </LemonField>\n            )}\n            <LemonButton\n                type=\"primary\"\n                htmlType=\"submit\"\n                disabledReason={!currentProject || isLoading ? 'Loading project and memory...' : undefined}\n                loading={isUpdating}\n            >\n                Save memory\n            </LemonButton>\n        </Form>\n    )\n}\n", "import { useActions, useValues } from 'kea'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonRadio, LemonRadioOption } from 'lib/lemon-ui/LemonRadio'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\nimport { useState } from 'react'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { HogQLQueryModifiers } from '~/queries/schema/schema-general'\n\ntype PersonsJoinMode = NonNullable<HogQLQueryModifiers['personsJoinMode']>\n\nconst personsJoinOptions: LemonRadioOption<PersonsJoinMode>[] = [\n    {\n        value: 'inner',\n        label: (\n            <>\n                <div>Does an inner join</div>\n                <div className=\"text-secondary\">\n                    This is the default. You want this one unless you know what you are doing.\n                </div>\n            </>\n        ),\n    },\n    {\n        value: 'left',\n        label: (\n            <>\n                <div>Does a left join.</div>\n                <div className=\"text-secondary\">Experimental mode for personless events </div>\n            </>\n        ),\n    },\n]\n\nexport function PersonsJoinMode(): JSX.Element {\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const { currentTeam } = useValues(teamLogic)\n    const { reportPersonsJoinModeUpdated } = useActions(eventUsageLogic)\n\n    const savedPersonsJoinMode =\n        currentTeam?.modifiers?.personsJoinMode ?? currentTeam?.default_modifiers?.personsJoinMode ?? 'inner'\n    const [personsJoinMode, setPersonsJoinMode] = useState<PersonsJoinMode>(savedPersonsJoinMode)\n\n    const handleChange = (mode: PersonsJoinMode): void => {\n        updateCurrentTeam({ modifiers: { ...currentTeam?.modifiers, personsJoinMode: mode } })\n        reportPersonsJoinModeUpdated(mode)\n    }\n\n    return (\n        <>\n            <p>\n                Choose how persons are joined to events. Do not change this setting unless you know what you are doing.\n            </p>\n            <LemonRadio value={personsJoinMode} onChange={setPersonsJoinMode} options={personsJoinOptions} />\n            <div className=\"mt-4\">\n                <LemonButton\n                    type=\"primary\"\n                    onClick={() => handleChange(personsJoinMode)}\n                    disabledReason={personsJoinMode === savedPersonsJoinMode ? 'No changes to save' : undefined}\n                >\n                    Save\n                </LemonButton>\n            </div>\n        </>\n    )\n}\n", "import { LemonTag, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonRadio, LemonRadioOption } from 'lib/lemon-ui/LemonRadio'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\nimport posthog from 'posthog-js'\nimport { useState } from 'react'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { HogQLQueryModifiers } from '~/queries/schema/schema-general'\n\ntype PoEMode = NonNullable<HogQLQueryModifiers['personsOnEventsMode']>\n\nconst POE_OPTIONS: LemonRadioOption<PoEMode>[] = [\n    {\n        value: 'person_id_override_properties_on_events',\n        label: (\n            <span className=\"inline-flex items-center gap-1.5\">\n                Use person properties from the time of the event<LemonTag>RECOMMENDED</LemonTag>\n            </span>\n        ),\n        description: (\n            <>\n                Fast queries. If the person property is updated, query results on past data <em>won't</em> change.\n            </>\n        ),\n    },\n    {\n        value: 'person_id_override_properties_joined',\n        label: 'Use person properties as of running the query',\n        description: (\n            <>\n                Slower queries. If the person property is updated, query results on past data <em>will</em> change\n                accordingly.\n            </>\n        ),\n    },\n    {\n        value: 'person_id_no_override_properties_on_events',\n        label: 'Use person IDs and person properties from the time of the event',\n        description: (\n            <>\n                Fastest queries,{' '}\n                <span className=\"underline\">but funnels and unique user counts will be inaccurate</span>. If the person\n                property is updated, query results on past data <em>won't</em> change.\n            </>\n        ),\n    },\n]\n\nexport function PersonsOnEvents(): JSX.Element {\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const { reportPoEModeUpdated } = useActions(eventUsageLogic)\n    const { currentTeam } = useValues(teamLogic)\n    const savedPoEMode: PoEMode =\n        currentTeam?.modifiers?.personsOnEventsMode ?? currentTeam?.default_modifiers?.personsOnEventsMode ?? 'disabled'\n    const [poeMode, setPoeMode] = useState<PoEMode>(savedPoEMode)\n\n    const handleChange = (mode: PoEMode): void => {\n        updateCurrentTeam({ modifiers: { ...currentTeam?.modifiers, personsOnEventsMode: mode } })\n        posthog.capture('user changed personsOnEventsMode setting', { personsOnEventsMode: mode })\n        reportPoEModeUpdated(mode)\n    }\n\n    return (\n        <>\n            <p>\n                Choose the behavior of person property filters. For the best performance,{' '}\n                <strong>we strongly recommend the first option.</strong>{' '}\n                <Link\n                    to=\"https://posthog.com/docs/how-posthog-works/queries#filtering-on-person-properties\"\n                    target=\"blank\"\n                >\n                    Learn about the details in our docs.\n                </Link>\n            </p>\n            <LemonRadio value={poeMode} onChange={setPoeMode} options={POE_OPTIONS} />\n            <div className=\"mt-4\">\n                <LemonButton\n                    type=\"primary\"\n                    onClick={() => handleChange(poeMode)}\n                    disabledReason={poeMode === savedPoEMode ? 'No changes to save' : undefined}\n                >\n                    Save\n                </LemonButton>\n            </div>\n        </>\n    )\n}\n", "import { IconPencil, IconPlus, IconTrash } from '@posthog/icons'\nimport clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport { EventSelect } from 'lib/components/EventSelect/EventSelect'\nimport { FlaggedFeature } from 'lib/components/FlaggedFeature'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonDialog } from 'lib/lemon-ui/LemonDialog'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { LemonInput } from 'lib/lemon-ui/LemonInput'\nimport { LemonLabel } from 'lib/lemon-ui/LemonLabel'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast'\nimport { AiRegexHelper, AiRegexHelperButton } from 'scenes/session-recordings/components/AiRegexHelper/AiRegexHelper'\nimport { replayTriggersLogic } from 'scenes/settings/environment/replayTriggersLogic'\nimport { SupportedPlatforms } from 'scenes/settings/environment/SessionRecordingSettings'\n\nimport { SessionReplayUrlTriggerConfig } from '~/types'\n\nfunction UrlConfigForm({\n    type,\n    onCancel,\n    isSubmitting,\n}: {\n    type: 'trigger' | 'blocklist'\n    onCancel: () => void\n    isSubmitting: boolean\n}): JSX.Element {\n    const { addUrlTrigger, addUrlBlocklist } = useActions(replayTriggersLogic)\n\n    return (\n        <Form\n            logic={replayTriggersLogic}\n            formKey={type === 'trigger' ? 'proposedUrlTrigger' : 'proposedUrlBlocklist'}\n            enableFormOnSubmit\n            className=\"w-full flex flex-col border rounded items-center p-2 pl-4 bg-surface-primary gap-2\"\n        >\n            <div className=\"flex flex-col gap-2 w-full\">\n                <LemonBanner type=\"info\" className=\"text-sm\">\n                    We always wrap the URL regex with anchors to avoid unexpected behavior (if you do not). This is\n                    because <pre className=\"inline\">https://example.com/</pre> does not only match the homepage. You'd\n                    need <pre className=\"inline\">^https://example.com/$</pre>\n                </LemonBanner>\n                <LemonLabel className=\"w-full\">\n                    Matching regex:\n                    <LemonField name=\"url\" className=\"flex-1\">\n                        <LemonInput autoFocus placeholder=\"Enter URL regex.\" data-attr=\"url-input\" />\n                    </LemonField>\n                </LemonLabel>\n            </div>\n            <div className=\"flex justify-between gap-2 w-full\">\n                <div>\n                    <FlaggedFeature flag={FEATURE_FLAGS.RECORDINGS_AI_REGEX}>\n                        <AiRegexHelper\n                            onApply={(regex) => {\n                                try {\n                                    const payload: SessionReplayUrlTriggerConfig = {\n                                        url: regex,\n                                        matching: 'regex',\n                                    }\n                                    if (type === 'trigger') {\n                                        addUrlTrigger(payload)\n                                    } else {\n                                        addUrlBlocklist(payload)\n                                    }\n                                } catch (error) {\n                                    lemonToast.error('Failed to apply regex')\n                                }\n                            }}\n                        />\n                        <AiRegexHelperButton />\n                    </FlaggedFeature>\n                </div>\n\n                <div className=\"flex gap-2\">\n                    <LemonButton type=\"secondary\" onClick={onCancel}>\n                        Cancel\n                    </LemonButton>\n                    <LemonButton\n                        htmlType=\"submit\"\n                        type=\"primary\"\n                        disabledReason={isSubmitting ? `Saving url in progress` : undefined}\n                        data-attr=\"url-save\"\n                    >\n                        Save\n                    </LemonButton>\n                </div>\n            </div>\n        </Form>\n    )\n}\n\nfunction UrlConfigRow({\n    trigger,\n    index,\n    type,\n    editIndex,\n    onEdit,\n    onRemove,\n}: {\n    trigger: SessionReplayUrlTriggerConfig\n    index: number\n    type: 'trigger' | 'blocklist'\n    editIndex: number | null\n    onEdit: (index: number) => void\n    onRemove: (index: number) => void\n}): JSX.Element {\n    if (editIndex === index) {\n        return (\n            <div className=\"border rounded p-2 bg-surface-primary\">\n                <UrlConfigForm type={type} onCancel={() => onEdit(-1)} isSubmitting={false} />\n            </div>\n        )\n    }\n\n    return (\n        <div className={clsx('border rounded flex items-center p-2 pl-4 bg-surface-primary')}>\n            <span title={trigger.url} className=\"flex-1 truncate\">\n                <span>{trigger.matching === 'regex' ? 'Matches regex: ' : ''}</span>\n                <span>{trigger.url}</span>\n            </span>\n            <div className=\"Actions flex space-x-1 shrink-0\">\n                <LemonButton icon={<IconPencil />} onClick={() => onEdit(index)} tooltip=\"Edit\" center />\n                <LemonButton\n                    icon={<IconTrash />}\n                    tooltip={`Remove URL ${type}`}\n                    center\n                    onClick={() => {\n                        LemonDialog.open({\n                            title: <>Remove URL {type}</>,\n                            description: `Are you sure you want to remove this URL ${type}?`,\n                            primaryButton: {\n                                status: 'danger',\n                                children: 'Remove',\n                                onClick: () => onRemove(index),\n                            },\n                            secondaryButton: {\n                                children: 'Cancel',\n                            },\n                        })\n                    }}\n                />\n            </div>\n        </div>\n    )\n}\n\nfunction UrlConfigSection({\n    type,\n    title,\n    description,\n    ...props\n}: {\n    type: 'trigger' | 'blocklist'\n    title: string\n    description: string\n    isAddFormVisible: boolean\n    config: SessionReplayUrlTriggerConfig[] | null\n    editIndex: number | null\n    isSubmitting: boolean\n    onAdd: () => void\n    onCancel: () => void\n    onEdit: (index: number) => void\n    onRemove: (index: number) => void\n}): JSX.Element {\n    return (\n        <div className=\"flex flex-col space-y-2 mt-4\">\n            <div className=\"flex items-center gap-2 justify-between\">\n                <LemonLabel className=\"text-base\">{title}</LemonLabel>\n                <LemonButton\n                    onClick={props.onAdd}\n                    type=\"secondary\"\n                    icon={<IconPlus />}\n                    data-attr={`session-replay-add-url-${type}`}\n                >\n                    Add\n                </LemonButton>\n            </div>\n            <p>{description}</p>\n\n            {props.isAddFormVisible && (\n                <UrlConfigForm type={type} onCancel={props.onCancel} isSubmitting={props.isSubmitting} />\n            )}\n            {props.config?.map((trigger, index) => (\n                <UrlConfigRow\n                    key={`${trigger.url}-${trigger.matching}`}\n                    trigger={trigger}\n                    index={index}\n                    type={type}\n                    editIndex={props.editIndex}\n                    onEdit={props.onEdit}\n                    onRemove={props.onRemove}\n                />\n            ))}\n        </div>\n    )\n}\n\nfunction UrlTriggerOptions(): JSX.Element | null {\n    const { isAddUrlTriggerConfigFormVisible, urlTriggerConfig, editUrlTriggerIndex, isProposedUrlTriggerSubmitting } =\n        useValues(replayTriggersLogic)\n    const { newUrlTrigger, removeUrlTrigger, setEditUrlTriggerIndex, cancelProposingUrlTrigger } =\n        useActions(replayTriggersLogic)\n\n    return (\n        <UrlConfigSection\n            type=\"trigger\"\n            title=\"Enable recordings when URL matches\"\n            description=\"Adding a URL trigger means recording will only be started when the user visits a page that matches the URL.\"\n            isAddFormVisible={isAddUrlTriggerConfigFormVisible}\n            config={urlTriggerConfig}\n            editIndex={editUrlTriggerIndex}\n            isSubmitting={isProposedUrlTriggerSubmitting}\n            onAdd={newUrlTrigger}\n            onCancel={cancelProposingUrlTrigger}\n            onEdit={setEditUrlTriggerIndex}\n            onRemove={removeUrlTrigger}\n        />\n    )\n}\n\nfunction UrlBlocklistOptions(): JSX.Element | null {\n    const {\n        isAddUrlBlocklistConfigFormVisible,\n        urlBlocklistConfig,\n        editUrlBlocklistIndex,\n        isProposedUrlBlocklistSubmitting,\n    } = useValues(replayTriggersLogic)\n    const { newUrlBlocklist, removeUrlBlocklist, setEditUrlBlocklistIndex, cancelProposingUrlBlocklist } =\n        useActions(replayTriggersLogic)\n\n    return (\n        <UrlConfigSection\n            type=\"blocklist\"\n            title=\"Pause recordings when URL matches\"\n            description=\"Recording will be paused when the user visits a page that matches the URL.\"\n            isAddFormVisible={isAddUrlBlocklistConfigFormVisible}\n            config={urlBlocklistConfig}\n            editIndex={editUrlBlocklistIndex}\n            isSubmitting={isProposedUrlBlocklistSubmitting}\n            onAdd={newUrlBlocklist}\n            onCancel={cancelProposingUrlBlocklist}\n            onEdit={setEditUrlBlocklistIndex}\n            onRemove={removeUrlBlocklist}\n        />\n    )\n}\n\nfunction EventTriggerOptions(): JSX.Element | null {\n    const { eventTriggerConfig } = useValues(replayTriggersLogic)\n    const { updateEventTriggerConfig } = useActions(replayTriggersLogic)\n\n    return (\n        <div className=\"flex flex-col space-y-2 mt-4\">\n            <div className=\"flex items-center gap-2 justify-between\">\n                <LemonLabel className=\"text-base\">Event emitted</LemonLabel>\n            </div>\n            <p>\n                Session recording will be started immediately before PostHog queues any of these events to be sent to\n                the backend.\n            </p>\n\n            <EventSelect\n                filterGroupTypes={[TaxonomicFilterGroupType.Events]}\n                onChange={(includedEvents) => {\n                    updateEventTriggerConfig(includedEvents)\n                }}\n                selectedEvents={eventTriggerConfig ?? []}\n                addElement={\n                    <LemonButton size=\"small\" type=\"secondary\" icon={<IconPlus />} sideIcon={null}>\n                        Add event\n                    </LemonButton>\n                }\n            />\n        </div>\n    )\n}\n\nexport function ReplayTriggers(): JSX.Element {\n    return (\n        <div className=\"space-y-2\">\n            <SupportedPlatforms android={false} ios={false} flutter={false} web={true} reactNative={false} />\n            <p>\n                Use the settings below to control when recordings are started or paused. If no triggers are selected,\n                then recordings will always start if enabled.\n            </p>\n            <UrlTriggerOptions />\n            <UrlBlocklistOptions />\n            <EventTriggerOptions />\n        </div>\n    )\n}\n", "import { actions, connect, kea, listeners, path, reducers, selectors, sharedListeners } from 'kea'\nimport { forms } from 'kea-forms'\nimport { subscriptions } from 'kea-subscriptions'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { SessionReplayUrlTriggerConfig, TeamPublicType, TeamType } from '~/types'\n\nimport type { replayTriggersLogicType } from './replayTriggersLogicType'\n\nconst NEW_URL_TRIGGER = { url: '', matching: 'regex' }\n\nfunction ensureAnchored(url: string): string {\n    url = url.startsWith('^') ? url.substring(1) : url\n    url = url.endsWith('$') ? url.substring(0, url.length - 1) : url\n    return `^${url}$`\n}\n\nexport const replayTriggersLogic = kea<replayTriggersLogicType>([\n    path(['scenes', 'settings', 'project', 'replayTriggersLogic']),\n    actions({\n        setUrlTriggerConfig: (urlTriggerConfig: SessionReplayUrlTriggerConfig[]) => ({ urlTriggerConfig }),\n        addUrlTrigger: (urlTriggerConfig: SessionReplayUrlTriggerConfig) => ({ urlTriggerConfig }),\n        removeUrlTrigger: (index: number) => ({ index }),\n        updateUrlTrigger: (index: number, urlTriggerConfig: SessionReplayUrlTriggerConfig) => ({\n            index,\n            urlTriggerConfig,\n        }),\n        setEditUrlTriggerIndex: (originalIndex: number | null) => ({ originalIndex }),\n        newUrlTrigger: true,\n        cancelProposingUrlTrigger: true,\n\n        setUrlBlocklistConfig: (urlBlocklistConfig: SessionReplayUrlTriggerConfig[]) => ({ urlBlocklistConfig }),\n        addUrlBlocklist: (urlBlocklistConfig: SessionReplayUrlTriggerConfig) => ({ urlBlocklistConfig }),\n        removeUrlBlocklist: (index: number) => ({ index }),\n        updateUrlBlocklist: (index: number, urlBlocklistConfig: SessionReplayUrlTriggerConfig) => ({\n            index,\n            urlBlocklistConfig,\n        }),\n        setEditUrlBlocklistIndex: (originalIndex: number | null) => ({ originalIndex }),\n        newUrlBlocklist: true,\n        cancelProposingUrlBlocklist: true,\n        setEventTriggerConfig: (eventTriggerConfig: string[]) => ({ eventTriggerConfig }),\n        updateEventTriggerConfig: (eventTriggerConfig: string[]) => ({ eventTriggerConfig }),\n    }),\n    connect({ values: [teamLogic, ['currentTeam']], actions: [teamLogic, ['updateCurrentTeam']] }),\n    reducers({\n        urlTriggerConfig: [\n            null as SessionReplayUrlTriggerConfig[] | null,\n            {\n                setUrlTriggerConfig: (_, { urlTriggerConfig }) => urlTriggerConfig,\n                addUrlTrigger: (state, { urlTriggerConfig }) => [...(state ?? []), urlTriggerConfig],\n                updateUrlTrigger: (state, { index, urlTriggerConfig: newUrlTriggerConfig }) =>\n                    (state ?? []).map((triggerConfig, i) => (i === index ? newUrlTriggerConfig : triggerConfig)),\n                removeUrlTrigger: (state, { index }) => {\n                    return (state ?? []).filter((_, i) => i !== index)\n                },\n            },\n        ],\n        editUrlTriggerIndex: [\n            null as number | null,\n            {\n                setEditUrlTriggerIndex: (_, { originalIndex }) => originalIndex,\n                removeUrlTrigger: (editUrlTriggerIndex, { index }) =>\n                    editUrlTriggerIndex && index < editUrlTriggerIndex\n                        ? editUrlTriggerIndex - 1\n                        : index === editUrlTriggerIndex\n                        ? null\n                        : editUrlTriggerIndex,\n                newUrlTrigger: () => -1,\n                updateUrlTrigger: () => null,\n                addUrlTrigger: () => null,\n                cancelProposingUrlTrigger: () => null,\n            },\n        ],\n        urlBlocklistConfig: [\n            null as SessionReplayUrlTriggerConfig[] | null,\n            {\n                setUrlBlocklistConfig: (_, { urlBlocklistConfig }) => urlBlocklistConfig,\n                addUrlBlocklist: (state, { urlBlocklistConfig }) => [...(state ?? []), urlBlocklistConfig],\n                updateUrlBlocklist: (state, { index, urlBlocklistConfig: newUrlBlocklistConfig }) =>\n                    (state ?? []).map((blocklistConfig, i) => (i === index ? newUrlBlocklistConfig : blocklistConfig)),\n                removeUrlBlocklist: (state, { index }) => {\n                    return (state ?? []).filter((_, i) => i !== index)\n                },\n            },\n        ],\n        editUrlBlocklistIndex: [\n            null as number | null,\n            {\n                setEditUrlBlocklistIndex: (_, { originalIndex }) => originalIndex,\n                removeUrlBlocklist: (editUrlBlocklistIndex, { index }) =>\n                    editUrlBlocklistIndex && index < editUrlBlocklistIndex\n                        ? editUrlBlocklistIndex - 1\n                        : index === editUrlBlocklistIndex\n                        ? null\n                        : editUrlBlocklistIndex,\n                newUrlBlocklist: () => -1,\n                updateUrlBlocklist: () => null,\n                addUrlBlocklist: () => null,\n            },\n        ],\n        eventTriggerConfig: [\n            null as string[] | null,\n            {\n                setEventTriggerConfig: (_, { eventTriggerConfig }) => eventTriggerConfig,\n                updateEventTriggerConfig: (_, { eventTriggerConfig }) => eventTriggerConfig,\n            },\n        ],\n    }),\n    selectors({\n        remoteUrlTriggerConfig: [\n            (s) => [s.currentTeam],\n            (currentTeam) => currentTeam?.session_recording_url_trigger_config,\n        ],\n        isAddUrlTriggerConfigFormVisible: [\n            (s) => [s.editUrlTriggerIndex],\n            (editUrlTriggerIndex) => editUrlTriggerIndex === -1,\n        ],\n        urlTriggerToEdit: [\n            (s) => [s.urlTriggerConfig, s.editUrlTriggerIndex],\n            (urlTriggerConfig, editUrlTriggerIndex) => {\n                if (\n                    editUrlTriggerIndex === null ||\n                    editUrlTriggerIndex === -1 ||\n                    !urlTriggerConfig?.[editUrlTriggerIndex]\n                ) {\n                    return NEW_URL_TRIGGER\n                }\n                return urlTriggerConfig[editUrlTriggerIndex]\n            },\n        ],\n\n        remoteUrlBlocklistConfig: [\n            (s) => [s.currentTeam],\n            (currentTeam) => currentTeam?.session_recording_url_blocklist_config,\n        ],\n        isAddUrlBlocklistConfigFormVisible: [\n            (s) => [s.editUrlBlocklistIndex],\n            (editUrlBlocklistIndex) => editUrlBlocklistIndex === -1,\n        ],\n        urlBlocklistToEdit: [\n            (s) => [s.urlBlocklistConfig, s.editUrlBlocklistIndex],\n            (urlBlocklistConfig, editUrlBlocklistIndex) => {\n                if (\n                    editUrlBlocklistIndex === null ||\n                    editUrlBlocklistIndex === -1 ||\n                    !urlBlocklistConfig?.[editUrlBlocklistIndex]\n                ) {\n                    return NEW_URL_TRIGGER\n                }\n                return urlBlocklistConfig[editUrlBlocklistIndex]\n            },\n        ],\n    }),\n    subscriptions(({ actions }) => ({\n        currentTeam: (currentTeam: TeamPublicType | TeamType | null) => {\n            actions.setUrlTriggerConfig(currentTeam?.session_recording_url_trigger_config ?? [])\n            actions.setUrlBlocklistConfig(currentTeam?.session_recording_url_blocklist_config ?? [])\n            actions.setEventTriggerConfig(currentTeam?.session_recording_event_trigger_config ?? [])\n        },\n    })),\n    forms(({ values, actions }) => ({\n        proposedUrlTrigger: {\n            defaults: { url: '', matching: 'regex' } as SessionReplayUrlTriggerConfig,\n            errors: ({ url }) => ({\n                url: !url ? 'Must have a URL' : undefined,\n            }),\n            submit: async ({ url, matching }) => {\n                if (values.editUrlTriggerIndex !== null && values.editUrlTriggerIndex >= 0) {\n                    actions.updateUrlTrigger(values.editUrlTriggerIndex, { url: ensureAnchored(url), matching })\n                } else {\n                    actions.addUrlTrigger({ url: ensureAnchored(url), matching })\n                }\n            },\n        },\n        proposedUrlBlocklist: {\n            defaults: { url: '', matching: 'regex' } as SessionReplayUrlTriggerConfig,\n            errors: ({ url }) => ({\n                url: !url ? 'Must have a URL' : undefined,\n            }),\n            submit: async ({ url, matching }) => {\n                if (values.editUrlBlocklistIndex !== null && values.editUrlBlocklistIndex >= 0) {\n                    actions.updateUrlBlocklist(values.editUrlBlocklistIndex, { url: ensureAnchored(url), matching })\n                } else {\n                    actions.addUrlBlocklist({ url: ensureAnchored(url), matching })\n                }\n            },\n        },\n    })),\n    sharedListeners(({ values }) => ({\n        saveUrlTriggers: async () => {\n            await teamLogic.asyncActions.updateCurrentTeam({\n                session_recording_url_trigger_config: values.urlTriggerConfig ?? [],\n            })\n        },\n        saveUrlBlocklists: async () => {\n            await teamLogic.asyncActions.updateCurrentTeam({\n                session_recording_url_blocklist_config: values.urlBlocklistConfig ?? [],\n            })\n        },\n    })),\n    listeners(({ sharedListeners, actions, values }) => ({\n        setEditUrlTriggerIndex: () => {\n            actions.setProposedUrlTriggerValue('url', values.urlTriggerToEdit.url)\n            actions.setProposedUrlTriggerValue('matching', values.urlTriggerToEdit.matching)\n        },\n        addUrlTrigger: sharedListeners.saveUrlTriggers,\n        removeUrlTrigger: sharedListeners.saveUrlTriggers,\n        updateUrlTrigger: sharedListeners.saveUrlTriggers,\n        submitProposedUrlTriggerSuccess: () => {\n            actions.setEditUrlTriggerIndex(null)\n            actions.resetProposedUrlTrigger()\n        },\n\n        setEditUrlBlocklistIndex: () => {\n            actions.setProposedUrlBlocklistValue('url', values.urlBlocklistToEdit.url)\n            actions.setProposedUrlBlocklistValue('matching', values.urlBlocklistToEdit.matching)\n        },\n        addUrlBlocklist: sharedListeners.saveUrlBlocklists,\n        removeUrlBlocklist: sharedListeners.saveUrlBlocklists,\n        updateUrlBlocklist: sharedListeners.saveUrlBlocklists,\n        submitProposedUrlBlocklistSuccess: () => {\n            actions.setEditUrlBlocklistIndex(null)\n            actions.resetProposedUrlBlocklist()\n        },\n        updateEventTriggerConfig: async ({ eventTriggerConfig }) => {\n            actions.setEventTriggerConfig(eventTriggerConfig)\n            await teamLogic.asyncActions.updateCurrentTeam({\n                session_recording_event_trigger_config: eventTriggerConfig,\n            })\n        },\n    })),\n])\n", "import { IconCheck, IconInfo, IconPlus, IconX } from '@posthog/icons'\nimport {\n    LemonBanner,\n    LemonButton,\n    LemonDialog,\n    LemonDivider,\n    LemonSwitch,\n    LemonTag,\n    Link,\n    Tooltip,\n} from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { AuthorizedUrlList } from 'lib/components/AuthorizedUrlList/AuthorizedUrlList'\nimport { AuthorizedUrlListType } from 'lib/components/AuthorizedUrlList/authorizedUrlListLogic'\nimport { EventSelect } from 'lib/components/EventSelect/EventSelect'\nimport { InternalMultipleChoiceSurvey } from 'lib/components/InternalSurvey/InternalMultipleChoiceSurvey'\nimport { PropertySelect } from 'lib/components/PropertySelect/PropertySelect'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { SESSION_RECORDING_OPT_OUT_SURVEY_ID } from 'lib/constants'\nimport { IconSelectEvents } from 'lib/lemon-ui/icons'\nimport { LemonLabel } from 'lib/lemon-ui/LemonLabel/LemonLabel'\nimport { isObject, objectsEqual } from 'lib/utils'\nimport { ReactNode, useState } from 'react'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { SessionRecordingAIConfig } from '~/types'\n\ninterface SupportedPlatformProps {\n    note?: ReactNode\n    label: string\n    supported: boolean\n}\n\nfunction SupportedPlatform(props: SupportedPlatformProps): JSX.Element {\n    const node = (\n        <div\n            className={clsx(\n                props.supported ? 'bg-fill-success-highlight' : 'bg-fill-error-highlight',\n                'px-1 py-0.5',\n                props.note && 'cursor-pointer'\n            )}\n        >\n            {props.note ? <IconInfo /> : props.supported ? <IconCheck /> : <IconX />} {props.label}\n        </div>\n    )\n    if (props.note) {\n        return <Tooltip title={props.note}>{node}</Tooltip>\n    }\n    return node\n}\n\nexport function SupportedPlatforms(props: {\n    web?: boolean | { note?: ReactNode }\n    android?: boolean | { note?: ReactNode }\n    ios?: boolean | { note?: ReactNode }\n    reactNative?: boolean | { note?: ReactNode }\n    flutter?: boolean | { note?: ReactNode }\n}): JSX.Element {\n    return (\n        <div className=\"text-xs inline-flex flex-row bg-primary rounded items-center border overflow-hidden mb-2 w-fit\">\n            <span className=\"px-1 py-0.5 font-semibold\">Supported platforms:</span>\n            <LemonDivider vertical className=\"h-full\" />\n            <SupportedPlatform\n                note={isObject(props.web) ? props.web.note : undefined}\n                label=\"Web\"\n                supported={!!props.web}\n            />\n\n            <LemonDivider vertical className=\"h-full\" />\n            <SupportedPlatform\n                note={isObject(props.android) ? props.android.note : undefined}\n                label=\"Android\"\n                supported={!!props.android}\n            />\n\n            <LemonDivider vertical className=\"h-full\" />\n            <SupportedPlatform\n                note={isObject(props.ios) ? props.ios.note : undefined}\n                label=\"iOS\"\n                supported={!!props.ios}\n            />\n\n            <LemonDivider vertical className=\"h-full\" />\n            <SupportedPlatform\n                note={isObject(props.reactNative) ? props.reactNative.note : undefined}\n                label=\"React Native\"\n                supported={!!props.reactNative}\n            />\n\n            <LemonDivider vertical className=\"h-full\" />\n            <SupportedPlatform\n                note={isObject(props.flutter) ? props.flutter.note : undefined}\n                label=\"Flutter\"\n                supported={!!props.flutter}\n            />\n        </div>\n    )\n}\n\nfunction LogCaptureSettings(): JSX.Element {\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <div>\n            <h3>Log capture</h3>\n            <SupportedPlatforms android={true} ios={false} flutter={false} web={true} reactNative={true} />\n            <p>\n                This setting controls if browser console logs will be captured as a part of recordings. The console logs\n                will be shown in the recording player to help you debug any issues.\n            </p>\n            <p>\n                Log capture is also available for{' '}\n                <Link to=\"https://posthog.com/docs/session-replay/console-log-recording\" target=\"_blank\">\n                    Mobile session replay\n                </Link>{' '}\n                , where they can be configured directly in code.\n            </p>\n            <LemonSwitch\n                data-attr=\"opt-in-capture-console-log-switch\"\n                onChange={(checked) => {\n                    updateCurrentTeam({ capture_console_log_opt_in: checked })\n                }}\n                label=\"Capture console logs\"\n                bordered\n                checked={!!currentTeam?.capture_console_log_opt_in}\n                disabledReason={!currentTeam?.session_recording_opt_in ? 'Session replay must be enabled' : undefined}\n            />\n        </div>\n    )\n}\n\nfunction CanvasCaptureSettings(): JSX.Element | null {\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <div>\n            <h3>Canvas capture</h3>\n            <SupportedPlatforms\n                android={false}\n                ios={false}\n                flutter={{\n                    note: (\n                        <>\n                            If you're using the `canvaskit` renderer on Flutter Web, you must also enable canvas capture\n                        </>\n                    ),\n                }}\n                web={true}\n                reactNative={false}\n            />\n            <p>\n                This setting controls if browser canvas elements will be captured as part of recordings.{' '}\n                <b>\n                    <i>There is no way to mask canvas elements right now so please make sure they are free of PII.</i>\n                </b>\n            </p>\n            <p>Canvas capture is only available for JavaScript Web.</p>\n            <LemonSwitch\n                data-attr=\"opt-in-capture-canvas-switch\"\n                onChange={(checked) => {\n                    updateCurrentTeam({\n                        session_replay_config: {\n                            ...currentTeam?.session_replay_config,\n                            record_canvas: checked,\n                        },\n                    })\n                }}\n                label={\n                    <div className=\"space-x-1\">\n                        <LemonTag type=\"success\">New</LemonTag>\n                        <LemonLabel>Capture canvas elements</LemonLabel>\n                    </div>\n                }\n                bordered\n                checked={\n                    currentTeam?.session_replay_config ? !!currentTeam?.session_replay_config?.record_canvas : false\n                }\n                disabledReason={!currentTeam?.session_recording_opt_in ? 'Session replay must be enabled' : undefined}\n            />\n        </div>\n    )\n}\n\nfunction PayloadWarning(): JSX.Element {\n    return (\n        <>\n            <p>\n                We automatically scrub some sensitive information from network headers and request and response bodies.\n            </p>{' '}\n            <p>\n                If they could contain sensitive data, you should provide a function to mask the data when you initialise\n                PostHog.{' '}\n                <Link\n                    to=\"https://posthog.com/docs/session-replay/network-recording#sensitive-information\"\n                    target=\"blank\"\n                >\n                    Learn how to mask header and body values in our docs\n                </Link>\n            </p>\n        </>\n    )\n}\n\nexport function NetworkCaptureSettings(): JSX.Element {\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <>\n            <SupportedPlatforms\n                android={true}\n                ios={true}\n                flutter={false}\n                web={true}\n                reactNative={{ note: <>RN network capture is only supported on iOS</> }}\n            />\n            <p>\n                This setting controls if performance and network information will be captured alongside recordings. The\n                network requests and timings will be shown in the recording player to help you debug any issues.\n            </p>\n            <p>\n                Network capture is also available for{' '}\n                <Link to=\"https://posthog.com/docs/session-replay/network-recording\" target=\"_blank\">\n                    Mobile session replay\n                </Link>{' '}\n                , where they can be configured directly in code.\n            </p>\n            <LemonSwitch\n                data-attr=\"opt-in-capture-performance-switch\"\n                onChange={(checked) => {\n                    updateCurrentTeam({ capture_performance_opt_in: checked })\n                }}\n                label=\"Capture network performance\"\n                bordered\n                checked={!!currentTeam?.capture_performance_opt_in}\n                disabledReason={!currentTeam?.session_recording_opt_in ? 'Session replay must be enabled' : undefined}\n            />\n            <div className=\"mt-4\">\n                <p>\n                    When network capture is enabled, we always capture network timings. Use these switches to choose\n                    whether to also capture headers and payloads of requests.{' '}\n                    <Link to=\"https://posthog.com/docs/session-replay/network-recording\" target=\"blank\">\n                        Learn how to mask header and payload values in our docs\n                    </Link>\n                </p>\n                <LemonBanner type=\"info\" className=\"mb-4\">\n                    <PayloadWarning />\n                </LemonBanner>\n                <SupportedPlatforms android={false} ios={false} flutter={false} web={true} reactNative={false} />\n                <div className=\"flex flex-row space-x-2\">\n                    <LemonSwitch\n                        data-attr=\"opt-in-capture-network-headers-switch\"\n                        onChange={(checked) => {\n                            updateCurrentTeam({\n                                session_recording_network_payload_capture_config: {\n                                    ...currentTeam?.session_recording_network_payload_capture_config,\n                                    recordHeaders: checked,\n                                },\n                            })\n                        }}\n                        label=\"Capture headers\"\n                        bordered\n                        checked={\n                            currentTeam?.session_recording_opt_in\n                                ? !!currentTeam?.session_recording_network_payload_capture_config?.recordHeaders\n                                : false\n                        }\n                        disabledReason={\n                            !currentTeam?.session_recording_opt_in || !currentTeam?.capture_performance_opt_in\n                                ? 'session and network performance capture must be enabled'\n                                : undefined\n                        }\n                    />\n                    <LemonSwitch\n                        data-attr=\"opt-in-capture-network-body-switch\"\n                        onChange={(checked) => {\n                            if (checked) {\n                                LemonDialog.open({\n                                    maxWidth: '650px',\n                                    title: 'Network body capture',\n                                    description: <PayloadWarning />,\n                                    primaryButton: {\n                                        'data-attr': 'network-payload-capture-accept-warning-and-enable',\n                                        children: 'Enable body capture',\n                                        onClick: () => {\n                                            updateCurrentTeam({\n                                                session_recording_network_payload_capture_config: {\n                                                    ...currentTeam?.session_recording_network_payload_capture_config,\n                                                    recordBody: true,\n                                                },\n                                            })\n                                        },\n                                    },\n                                })\n                            } else {\n                                updateCurrentTeam({\n                                    session_recording_network_payload_capture_config: {\n                                        ...currentTeam?.session_recording_network_payload_capture_config,\n                                        recordBody: false,\n                                    },\n                                })\n                            }\n                        }}\n                        label=\"Capture body\"\n                        bordered\n                        checked={\n                            currentTeam?.session_recording_opt_in\n                                ? !!currentTeam?.session_recording_network_payload_capture_config?.recordBody\n                                : false\n                        }\n                        disabledReason={\n                            !currentTeam?.session_recording_opt_in || !currentTeam?.capture_performance_opt_in\n                                ? 'session and network performance capture must be enabled'\n                                : undefined\n                        }\n                    />\n                </div>\n            </div>\n        </>\n    )\n}\n\n/**\n * @deprecated use ReplayTriggers instead, this is only presented to teams that have these settings set\n * @constructor\n */\nexport function ReplayAuthorizedDomains(): JSX.Element {\n    return (\n        <div className=\"space-y-2\">\n            <SupportedPlatforms android={false} ios={false} flutter={false} web={true} reactNative={false} />\n            <p>\n                Use the settings below to restrict the domains where recordings will be captured. If no domains are\n                selected, then there will be no domain restriction.\n            </p>\n            <p>Authorized domains is only available for JavaScript Web.</p>\n            <p>\n                Domains and wildcard subdomains are allowed (e.g. <code>https://*.example.com</code>). However,\n                wildcarded top-level domains cannot be used (for security reasons).\n            </p>\n            <AuthorizedUrlList type={AuthorizedUrlListType.RECORDING_DOMAINS} />\n        </div>\n    )\n}\n\nexport function ReplayAISettings(): JSX.Element | null {\n    const { updateCurrentTeam } = useActions(teamLogic)\n\n    const { currentTeam } = useValues(teamLogic)\n\n    if (!currentTeam) {\n        return null\n    }\n\n    const defaultConfig = {\n        opt_in: false,\n        preferred_events: [],\n        excluded_events: ['$feature_flag_called'],\n        included_event_properties: ['elements_chain', '$window_id', '$current_url', '$event_type'],\n        important_user_properties: [],\n    }\n    const sessionReplayConfig = currentTeam.session_replay_config || {}\n    const currentConfig: SessionRecordingAIConfig = sessionReplayConfig.ai_config || defaultConfig\n\n    const updateSummaryConfig = (summaryConfig: SessionRecordingAIConfig): void => {\n        updateCurrentTeam({\n            session_replay_config: { ai_config: summaryConfig },\n        })\n    }\n\n    const { opt_in: _discardCurrentOptIn, ...currentComparable } = currentConfig\n    const { opt_in: _discardDefaultOptIn, ...defaultComparable } = defaultConfig\n\n    return (\n        <div className=\"flex flex-col gap-2\">\n            <div>\n                <p>\n                    We use several machine learning technologies to process sessions. Some of those are powered by{' '}\n                    <Link to=\"https://openai.com/\" target=\"_blank\">\n                        OpenAI\n                    </Link>\n                    . No data is sent to OpenAI without an explicit instruction to do so. If we do send data we only\n                    send the data selected below. <strong>Data submitted is not used to train OpenAI's models</strong>\n                </p>\n                <LemonSwitch\n                    checked={currentConfig.opt_in}\n                    onChange={(checked) => {\n                        updateSummaryConfig({\n                            ...currentConfig,\n                            opt_in: checked,\n                        })\n                    }}\n                    bordered\n                    label=\"Opt in to enable AI processing\"\n                />\n            </div>\n            {currentConfig.opt_in && (\n                <>\n                    {!objectsEqual(currentComparable, defaultComparable) && (\n                        <div>\n                            <LemonButton\n                                type=\"secondary\"\n                                onClick={() => updateSummaryConfig({ ...defaultConfig, opt_in: true })}\n                            >\n                                Reset config to default\n                            </LemonButton>\n                        </div>\n                    )}\n                    <div>\n                        <h3 className=\"flex items-center gap-2\">\n                            <IconSelectEvents className=\"text-lg\" />\n                            Preferred events\n                        </h3>\n                        <p>\n                            These events are treated as more interesting when generating a summary. We recommend you\n                            include events that represent value for your user\n                        </p>\n                        <EventSelect\n                            onChange={(includedEvents) => {\n                                updateSummaryConfig({\n                                    ...currentConfig,\n                                    preferred_events: includedEvents,\n                                })\n                            }}\n                            selectedEvents={currentConfig.preferred_events || []}\n                            addElement={\n                                <LemonButton size=\"small\" type=\"secondary\" icon={<IconPlus />} sideIcon={null}>\n                                    Add event\n                                </LemonButton>\n                            }\n                        />\n                    </div>\n                    <div>\n                        <h3 className=\"flex items-center gap-2\">\n                            <IconSelectEvents className=\"text-lg\" />\n                            Excluded events\n                        </h3>\n                        <p>These events are never submitted even when they are present in the session.</p>\n                        <EventSelect\n                            onChange={(excludedEvents) => {\n                                updateSummaryConfig({\n                                    ...currentConfig,\n                                    excluded_events: excludedEvents,\n                                })\n                            }}\n                            selectedEvents={currentConfig.excluded_events || []}\n                            addElement={\n                                <LemonButton size=\"small\" type=\"secondary\" icon={<IconPlus />} sideIcon={null}>\n                                    Exclude event\n                                </LemonButton>\n                            }\n                        />\n                    </div>\n                    <div>\n                        <h3 className=\"flex items-center gap-2\">\n                            <IconSelectEvents className=\"text-lg\" />\n                            Included event properties\n                        </h3>\n                        <p>\n                            We always send the event name and timestamp. The only event data sent are values of the\n                            properties selected here.\n                        </p>\n                        <PropertySelect\n                            taxonomicFilterGroup={TaxonomicFilterGroupType.EventProperties}\n                            sortable={false}\n                            onChange={(properties: string[]) => {\n                                updateSummaryConfig({\n                                    ...currentConfig,\n                                    included_event_properties: properties,\n                                })\n                            }}\n                            selectedProperties={currentConfig.included_event_properties || []}\n                            addText=\"Add property\"\n                        />\n                    </div>\n                    <div>\n                        <h3 className=\"flex items-center gap-2\">\n                            <IconSelectEvents className=\"text-lg\" />\n                            Important user properties\n                        </h3>\n                        <p>\n                            We always send the first and last seen dates. The only user data sent are values of the\n                            properties selected here.\n                        </p>\n                        <PropertySelect\n                            taxonomicFilterGroup={TaxonomicFilterGroupType.PersonProperties}\n                            sortable={false}\n                            onChange={(properties) => {\n                                updateSummaryConfig({\n                                    ...currentConfig,\n                                    important_user_properties: properties,\n                                })\n                            }}\n                            selectedProperties={currentConfig.important_user_properties || []}\n                            addText=\"Add property\"\n                        />\n                    </div>\n                </>\n            )}\n        </div>\n    )\n}\n\nexport function ReplayGeneral(): JSX.Element {\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const { currentTeam } = useValues(teamLogic)\n    const [showSurvey, setShowSurvey] = useState<boolean>(false)\n\n    /**\n     * Handle the opt in change\n     * @param checked\n     */\n    const handleOptInChange = (checked: boolean): void => {\n        updateCurrentTeam({\n            session_recording_opt_in: checked,\n        })\n\n        //If the user opts out, we show the survey\n        setShowSurvey(!checked)\n    }\n\n    return (\n        <div className=\"flex flex-col gap-4\">\n            <div>\n                <SupportedPlatforms android={true} ios={true} flutter={true} web={true} reactNative={true} />\n                <p>\n                    Watch recordings of how users interact with your web app to see what can be improved.{' '}\n                    <Link\n                        to=\"https://posthog.com/docs/user-guides/recordings?utm_campaign=session-recording&utm_medium=in-product\"\n                        target=\"_blank\"\n                    >\n                        Check out our docs\n                    </Link>\n                </p>\n                <LemonSwitch\n                    data-attr=\"opt-in-session-recording-switch\"\n                    onChange={(checked) => {\n                        handleOptInChange(checked)\n                    }}\n                    label=\"Record user sessions\"\n                    bordered\n                    checked={!!currentTeam?.session_recording_opt_in}\n                />\n                {showSurvey && <InternalMultipleChoiceSurvey surveyId={SESSION_RECORDING_OPT_OUT_SURVEY_ID} />}\n            </div>\n            <LogCaptureSettings />\n            <CanvasCaptureSettings />\n        </div>\n    )\n}\n", "/**\n * @fileoverview A component that displays an interactive survey within a session recording. It handles survey display, user responses, and submission\n */\nimport { LemonButton, LemonCheckbox, LemonTextArea } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\n\nimport { SurveyQuestion, SurveyQuestionType } from '~/types'\n\nimport { internalMultipleChoiceSurveyLogic } from './internalMultipleChoiceSurveyLogic'\n\ninterface InternalSurveyProps {\n    surveyId: string\n}\n\nexport function InternalMultipleChoiceSurvey({ surveyId }: InternalSurveyProps): JSX.Element {\n    const logic = internalMultipleChoiceSurveyLogic({ surveyId })\n    const { survey, surveyResponse, showThankYouMessage, thankYouMessage, openChoice } = useValues(logic)\n    const { handleChoiceChange, handleSurveyResponse, setOpenChoice } = useActions(logic)\n\n    if (!survey) {\n        return <></>\n    }\n\n    return (\n        <div className=\"Popover Popover--padded Popover--appear-done Popover--enter-done my-4\">\n            <div className=\"Popover__box p-4\">\n                {survey.questions.map((question: SurveyQuestion) => (\n                    <div key={question.question} className=\"text-sm\">\n                        {showThankYouMessage && thankYouMessage}\n                        {!showThankYouMessage && (\n                            <>\n                                <strong>{question.question}</strong>\n                                {question.type === SurveyQuestionType.MultipleChoice && (\n                                    <ul className=\"list-inside list-none mt-2\">\n                                        {question.choices.map((choice, index) => {\n                                            // Add an open choice text area if the last choice is an open choice\n                                            if (index === question.choices.length - 1 && question.hasOpenChoice) {\n                                                return (\n                                                    <div className=\"mt-2\" key={choice}>\n                                                        {choice}\n                                                        <LemonTextArea\n                                                            placeholder=\"Please share any additional comments or feedback\"\n                                                            onChange={setOpenChoice}\n                                                            value={openChoice ?? ''}\n                                                            className=\"my-2\"\n                                                        />\n                                                    </div>\n                                                )\n                                            }\n                                            return (\n                                                <li key={choice}>\n                                                    <LemonCheckbox\n                                                        onChange={(checked) => handleChoiceChange(choice, checked)}\n                                                        label={choice}\n                                                        className=\"font-normal\"\n                                                    />\n                                                </li>\n                                            )\n                                        })}\n                                    </ul>\n                                )}\n                                <LemonButton\n                                    type=\"primary\"\n                                    disabledReason={\n                                        surveyResponse.length === 0 && openChoice === null\n                                            ? 'Please select at least one option'\n                                            : false\n                                    }\n                                    onClick={handleSurveyResponse}\n                                >\n                                    {question.buttonText ?? 'Submit'}\n                                </LemonButton>\n                            </>\n                        )}\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n", "import { actions, afterMount, kea, key, listeners, path, props, reducers } from 'kea'\nimport posthog from 'posthog-js'\n\nimport { Survey } from '~/types'\n\nimport type { internalMultipleChoiceSurveyLogicType } from './internalMultipleChoiceSurveyLogicType'\n\nexport interface InternalSurveyLogicProps {\n    surveyId: string\n}\n\nexport const internalMultipleChoiceSurveyLogic = kea<internalMultipleChoiceSurveyLogicType>([\n    path(['lib', 'components', 'InternalSurvey', 'internalMultipleChoiceSurveyLogicType']),\n    props({} as InternalSurveyLogicProps),\n    key((props) => props.surveyId),\n    actions({\n        getSurveys: () => ({}),\n        setSurvey: (survey: Survey) => ({ survey }),\n        handleSurveys: (surveys: Survey[]) => ({ surveys }),\n        handleSurveyResponse: () => ({}),\n        handleChoiceChange: (choice: string, isAdded: boolean) => ({ choice, isAdded }),\n        setShowThankYouMessage: (showThankYouMessage: boolean) => ({ showThankYouMessage }),\n        setThankYouMessage: (thankYouMessage: string) => ({ thankYouMessage }),\n        setOpenChoice: (openChoice: string) => ({ openChoice }),\n    }),\n    reducers({\n        survey: [\n            null as Survey | null,\n            {\n                setSurvey: (_, { survey }) => survey,\n            },\n        ],\n        thankYouMessage: [\n            'Thank you for your feedback!',\n            {\n                setThankYouMessage: (_, { thankYouMessage }) => thankYouMessage,\n            },\n        ],\n        showThankYouMessage: [\n            false as boolean,\n            {\n                setShowThankYouMessage: (_, { showThankYouMessage }) => showThankYouMessage,\n            },\n        ],\n        openChoice: [\n            null as string | null,\n            {\n                setOpenChoice: (_, { openChoice }) => openChoice,\n            },\n        ],\n        surveyResponse: [\n            [] as string[],\n            {\n                handleChoiceChange: (state, { choice, isAdded }) =>\n                    isAdded ? [...state, choice] : state.filter((c: string) => c !== choice),\n            },\n        ],\n    }),\n    listeners(({ actions, values, props }) => ({\n        /** When surveyId is set, get the list of surveys for the user */\n        setSurveyId: () => {},\n        /** Callback for the surveys response. Filter it to the surveyId and set the survey */\n        handleSurveys: ({ surveys }) => {\n            const survey = surveys.find((s: Survey) => s.id === props.surveyId)\n            if (survey) {\n                posthog.capture('survey shown', {\n                    $survey_id: props.surveyId,\n                })\n                actions.setSurvey(survey)\n\n                if (survey.appearance?.thankYouMessageHeader) {\n                    actions.setThankYouMessage(survey.appearance?.thankYouMessageHeader)\n                }\n            }\n        },\n        /** When the survey response is sent, capture the response and show the thank you message */\n        handleSurveyResponse: () => {\n            const payload = {\n                $survey_id: props.surveyId,\n                $survey_response: values.surveyResponse,\n            }\n            if (values.openChoice) {\n                payload.$survey_response.push(values.openChoice)\n            }\n            posthog.capture('survey sent', payload)\n\n            actions.setShowThankYouMessage(true)\n            setTimeout(() => actions.setSurvey(null as unknown as Survey), 5000)\n        },\n    })),\n    afterMount(({ actions }) => {\n        /** When the logic is mounted, set the surveyId from the props */\n        posthog.getSurveys((surveys) => actions.handleSurveys(surveys as unknown as Survey[]))\n    }),\n])\n", "import { useActions, useValues } from 'kea'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonRadio, LemonRadioOption } from 'lib/lemon-ui/LemonRadio'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\nimport { useState } from 'react'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { HogQLQueryModifiers } from '~/queries/schema/schema-general'\n\ntype SessionTableVersion = NonNullable<HogQLQueryModifiers['sessionTableVersion']>\n\nconst bounceRatePageViewModeOptions: LemonRadioOption<SessionTableVersion>[] = [\n    {\n        value: 'auto',\n        label: (\n            <>\n                <div>Auto</div>\n            </>\n        ),\n    },\n    {\n        value: 'v1',\n        label: (\n            <>\n                <div>Version 1</div>\n            </>\n        ),\n    },\n    {\n        value: 'v2',\n        label: (\n            <>\n                <div>Version 2</div>\n            </>\n        ),\n    },\n]\n\nexport function SessionsTableVersion(): JSX.Element {\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const { currentTeam } = useValues(teamLogic)\n    const { reportSessionTableVersionUpdated } = useActions(eventUsageLogic)\n\n    const savedSessionTableVersion =\n        currentTeam?.modifiers?.sessionTableVersion ?? currentTeam?.default_modifiers?.sessionTableVersion ?? 'auto'\n    const [sessionTableVersion, setSessionTableVersion] = useState<SessionTableVersion>(savedSessionTableVersion)\n\n    const handleChange = (version: SessionTableVersion): void => {\n        updateCurrentTeam({ modifiers: { ...currentTeam?.modifiers, sessionTableVersion: version } })\n        reportSessionTableVersionUpdated(version)\n    }\n\n    return (\n        <>\n            <p>\n                Choose which version of the session table to use. V2 is faster, but requires uuidv7 session ids. Use\n                auto unless you know what you're doing.\n            </p>\n            <LemonRadio\n                value={sessionTableVersion}\n                onChange={setSessionTableVersion}\n                options={bounceRatePageViewModeOptions}\n            />\n            <div className=\"mt-4\">\n                <LemonButton\n                    type=\"primary\"\n                    onClick={() => handleChange(sessionTableVersion)}\n                    disabledReason={sessionTableVersion === savedSessionTableVersion ? 'No changes to save' : undefined}\n                >\n                    Save\n                </LemonButton>\n            </div>\n        </>\n    )\n}\n", "import { LemonDivider, LemonSwitch, LemonTag, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\nimport { SupportedWebVitalsMetrics } from 'posthog-js'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nfunction WebVitalsAllowedMetricSwitch({ metric }: { metric: SupportedWebVitalsMetrics }): JSX.Element {\n    const { userLoading } = useValues(userLogic)\n    const { currentTeam } = useValues(teamLogic)\n    const { updateCurrentTeam } = useActions(teamLogic)\n\n    return (\n        <LemonSwitch\n            label={`Capture ${metric}`}\n            bordered\n            checked={\n                currentTeam?.autocapture_web_vitals_allowed_metrics\n                    ? currentTeam?.autocapture_web_vitals_allowed_metrics?.includes(metric)\n                    : true\n            }\n            disabledReason={\n                userLoading\n                    ? 'Loading user'\n                    : currentTeam?.autocapture_web_vitals_opt_in\n                    ? null\n                    : 'Enable web vitals autocapture to set allowed metrics'\n            }\n            onChange={(checked) => {\n                if (!currentTeam) {\n                    // shouldn't ever get here without a team, but we certainly can't edit it if it's not there\n                    return\n                }\n\n                const without = (\n                    currentTeam?.autocapture_web_vitals_allowed_metrics || ['FCP', 'CLS', 'INP', 'LCP']\n                )?.filter((allowedMetric) => allowedMetric !== metric)\n                if (checked) {\n                    updateCurrentTeam({\n                        autocapture_web_vitals_allowed_metrics: [...without, metric],\n                    })\n                } else {\n                    updateCurrentTeam({\n                        autocapture_web_vitals_allowed_metrics: [...without],\n                    })\n                }\n            }}\n        />\n    )\n}\n\nexport function AutocaptureSettings(): JSX.Element {\n    const { userLoading } = useValues(userLogic)\n    const { currentTeam } = useValues(teamLogic)\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const { reportAutocaptureToggled } = useActions(eventUsageLogic)\n\n    return (\n        <>\n            <p>\n                Automagically capture frontend events, such as any <code>click</code>, <code>change of input</code>, or\n                submission associated with a <code>button</code>, <code>form</code>, <code>input</code>,{' '}\n                <code>select</code>, or <code>textarea</code>, when using our web JavaScript SDK.\n            </p>\n\n            <p>\n                Autocapture is also available for{' '}\n                <Link to=\"https://posthog.com/docs/libraries/react-native#autocapture\" target=\"_blank\">\n                    React Native\n                </Link>{' '}\n                and{' '}\n                <Link to=\"https://posthog.com/docs/libraries/ios#autocapture\" target=\"_blank\">\n                    iOS\n                </Link>\n                , where they can be configured directly in code.\n            </p>\n\n            <div className=\"space-y-2\">\n                <LemonSwitch\n                    id=\"posthog-autocapture-switch\"\n                    onChange={(checked) => {\n                        updateCurrentTeam({\n                            autocapture_opt_out: !checked,\n                        })\n                        reportAutocaptureToggled(!checked)\n                    }}\n                    checked={!currentTeam?.autocapture_opt_out}\n                    disabled={userLoading}\n                    label=\"Enable autocapture for web\"\n                    bordered\n                />\n            </div>\n        </>\n    )\n}\n\nexport function ExceptionAutocaptureSettings(): JSX.Element {\n    const { userLoading } = useValues(userLogic)\n    const { currentTeam } = useValues(teamLogic)\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const { reportAutocaptureExceptionsToggled } = useActions(eventUsageLogic)\n\n    return (\n        <>\n            <p>\n                Captures frontend exceptions thrown on a customers using `onError` and `onUnhandledRejection` listeners\n                in our web JavaScript SDK.\n            </p>\n            <p>\n                Autocapture is also available for our{' '}\n                <Link to=\"https://posthog.com/docs/libraries/react-native#autocapture\" target=\"_blank\">\n                    Python SDK\n                </Link>\n                , where it can be configured directly in code.\n            </p>\n            <LemonSwitch\n                id=\"posthog-autocapture-exceptions-switch\"\n                onChange={(checked) => {\n                    updateCurrentTeam({\n                        autocapture_exceptions_opt_in: checked,\n                    })\n                    reportAutocaptureExceptionsToggled(checked)\n                }}\n                checked={!!currentTeam?.autocapture_exceptions_opt_in}\n                disabled={userLoading}\n                label={\n                    <>\n                        Enable exception autocapture <LemonTag>ALPHA</LemonTag>\n                    </>\n                }\n                bordered\n            />\n        </>\n    )\n}\n\nexport function WebVitalsAutocaptureSettings(): JSX.Element {\n    const { userLoading } = useValues(userLogic)\n    const { currentTeam } = useValues(teamLogic)\n    const { updateCurrentTeam } = useActions(teamLogic)\n\n    return (\n        <>\n            <p>\n                Since posthog-js version 1.141.2 you can enable{' '}\n                <Link to=\"https://github.com/GoogleChrome/web-vitals\" target=\"_blank\">\n                    Google Chrome's web vitals\n                </Link>{' '}\n                collection. Web vitals events can be used in insights, and when web vitals capture is enabled it is used\n                to enhance other parts of PostHog like web analytics and session replay.\n            </p>\n            <LemonSwitch\n                id=\"posthog-autocapture-web-vitals-switch\"\n                onChange={(checked) => {\n                    updateCurrentTeam({\n                        autocapture_web_vitals_opt_in: checked,\n                    })\n                }}\n                checked={!!currentTeam?.autocapture_web_vitals_opt_in}\n                disabled={userLoading}\n                label={\n                    <>\n                        Enable web vitals autocapture <LemonTag>NEW</LemonTag>\n                    </>\n                }\n                bordered\n            />\n            <LemonDivider />\n            <p>You can choose which metrics to capture. By default, we capture all metrics.</p>\n            <div className=\"inline-grid grid-cols-2 gap-2 xs:grid xs:w-full\">\n                <WebVitalsAllowedMetricSwitch metric=\"CLS\" />\n                <WebVitalsAllowedMetricSwitch metric=\"FCP\" />\n                <WebVitalsAllowedMetricSwitch metric=\"LCP\" />\n                <WebVitalsAllowedMetricSwitch metric=\"INP\" />\n            </div>\n        </>\n    )\n}\n", "import { IconPlus } from '@posthog/icons'\nimport { LemonButton } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { EventSelect } from 'lib/components/EventSelect/EventSelect'\nimport { PropertySelect } from 'lib/components/PropertySelect/PropertySelect'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { IconSelectEvents, IconSelectProperties } from 'lib/lemon-ui/icons'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { LemonInputSelect } from 'lib/lemon-ui/LemonInputSelect/LemonInputSelect'\nimport { teamLogic } from 'scenes/teamLogic'\n\nexport function CorrelationConfig(): JSX.Element {\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const { currentTeam, funnelCorrelationConfig } = useValues(teamLogic)\n\n    const handleChange = (\n        excludedProperties?: string[],\n        excludedEvents?: string[],\n        excludedEventProperties?: string[]\n    ): void => {\n        if (currentTeam) {\n            const updatedConfig = { ...funnelCorrelationConfig }\n            if (excludedProperties !== undefined) {\n                updatedConfig.excluded_person_property_names = excludedProperties\n            }\n            if (excludedEventProperties !== undefined) {\n                updatedConfig.excluded_event_property_names = excludedEventProperties\n            }\n            if (excludedEvents !== undefined) {\n                updatedConfig.excluded_event_names = excludedEvents\n            }\n            if (updatedConfig && JSON.stringify(updatedConfig) !== JSON.stringify(funnelCorrelationConfig)) {\n                updateCurrentTeam({ correlation_config: updatedConfig })\n            }\n        }\n    }\n\n    return (\n        <>\n            <p>Globally exclude events or properties that do not provide relevant signals for your conversions.</p>\n\n            <LemonBanner type=\"info\">\n                Correlation analysis can automatically surface relevant signals for conversion, and help you understand\n                why your users dropped off and what makes them convert.\n            </LemonBanner>\n            {currentTeam && (\n                <div className=\"mt-4 space-y-2\">\n                    <div>\n                        <h3 className=\"flex items-center gap-2\">\n                            <IconSelectProperties className=\"text-lg\" />\n                            Excluded person properties\n                        </h3>\n                        <PropertySelect\n                            taxonomicFilterGroup={TaxonomicFilterGroupType.PersonProperties}\n                            onChange={(properties) => handleChange(properties)}\n                            selectedProperties={funnelCorrelationConfig.excluded_person_property_names || []}\n                            addText=\"Add exclusion\"\n                        />\n                    </div>\n                    <div>\n                        <h3 className=\"flex items-center gap-2\">\n                            <IconSelectEvents className=\"text-lg\" />\n                            Excluded events\n                        </h3>\n                        <EventSelect\n                            onChange={(excludedEvents) => handleChange(undefined, excludedEvents)}\n                            selectedEvents={funnelCorrelationConfig.excluded_event_names || []}\n                            addElement={\n                                <LemonButton size=\"small\" type=\"secondary\" icon={<IconPlus />} sideIcon={null}>\n                                    Add exclusion\n                                </LemonButton>\n                            }\n                        />\n                    </div>\n                    <div>\n                        <h3 className=\"flex items-center gap-2\">\n                            <IconSelectEvents className=\"text-lg\" />\n                            Excluded event properties\n                        </h3>\n                        <div className=\"max-w-160\">\n                            <LemonInputSelect\n                                mode=\"multiple\"\n                                allowCustomValues\n                                onChange={(properties: string[]) => handleChange(undefined, undefined, properties)}\n                                value={funnelCorrelationConfig.excluded_event_property_names || []}\n                            />\n                        </div>\n                    </div>\n                </div>\n            )}\n        </>\n    )\n}\n", "import { LemonButton, LemonSkeleton, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { LemonInputSelect } from 'lib/lemon-ui/LemonInputSelect/LemonInputSelect'\nimport { useEffect, useState } from 'react'\nimport { teamLogic } from 'scenes/teamLogic'\n\nexport function DataAttributes(): JSX.Element {\n    const { currentTeam, currentTeamLoading } = useValues(teamLogic)\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const [value, setValue] = useState([] as string[])\n\n    useEffect(() => setValue(currentTeam?.data_attributes || []), [currentTeam])\n\n    if (!currentTeam) {\n        return <LemonSkeleton />\n    }\n\n    return (\n        <>\n            <p>\n                Specify a list of{' '}\n                <Link to=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes\">\n                    data attributes\n                </Link>{' '}\n                used in your app. For example: <code>data-attr, data-custom-id, data-myref-*</code>. These attributes\n                will be used when using the toolbar and defining actions to match unique elements on your pages. You can\n                use <code>*</code> as a wildcard.\n            </p>\n            <p>\n                For example, when creating an action on your CTA button, the best selector could be something like:{' '}\n                <code>div &gt; form &gt; button:nth-child(2)</code>. However all buttons in your app have a{' '}\n                <code>data-custom-id</code> attribute. If you allow it here, the selector for your button will instead\n                be <code>button[data-custom-id='cta-button']</code>.\n            </p>\n            <div className=\"space-y-4 max-w-160\">\n                <LemonInputSelect\n                    mode=\"multiple\"\n                    allowCustomValues\n                    onChange={(values: string[]) => setValue(values || [])}\n                    value={value}\n                    data-attr=\"data-attribute-select\"\n                    placeholder=\"data-attr, ...\"\n                    loading={currentTeamLoading}\n                    disabled={currentTeamLoading}\n                />\n                <LemonButton\n                    type=\"primary\"\n                    onClick={() =>\n                        updateCurrentTeam({ data_attributes: value.map((s) => s.trim()).filter((a) => a) || [] })\n                    }\n                >\n                    Save\n                </LemonButton>\n            </div>\n        </>\n    )\n}\n", "import { IconBadge } from '@posthog/icons'\nimport { LemonButton, LemonDialog, LemonLabel, LemonSelect, LemonTable, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { PayGateMini } from 'lib/components/PayGateMini/PayGateMini'\nimport { LemonTableLink } from 'lib/lemon-ui/LemonTable/LemonTableLink'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { AvailableFeature } from '~/types'\n\nimport { DataColorThemeModal } from './DataColorThemeModal'\nimport { dataColorThemesLogic } from './dataColorThemesLogic'\n\nexport function DataColorThemes(): JSX.Element {\n    const { themes: _themes, themesLoading, defaultTheme } = useValues(dataColorThemesLogic)\n    const { selectTheme } = useActions(dataColorThemesLogic)\n\n    const { currentTeamLoading } = useValues(teamLogic)\n    const { updateCurrentTeam } = useActions(teamLogic)\n\n    const themes = _themes || []\n\n    return (\n        <PayGateMini feature={AvailableFeature.DATA_COLOR_THEMES}>\n            <div className=\"space-y-4\">\n                <p>\n                    These themes can be used in insights. You can also set a default theme for all insights below. For\n                    more details, check out our{' '}\n                    <Link\n                        to=\"https://posthog.com/docs/product-analytics/color-themes?utm_campaign=settings&utm_medium=in-product\"\n                        target=\"_blank\"\n                    >\n                        docs\n                    </Link>\n                    .\n                </p>\n                <LemonTable\n                    loading={themesLoading}\n                    dataSource={themes}\n                    columns={[\n                        {\n                            title: 'Name',\n                            dataIndex: 'name',\n                            key: 'name',\n                            render: (name, theme) => (\n                                <LemonTableLink onClick={() => selectTheme(theme.id)} title={name as string} />\n                            ),\n                        },\n                        {\n                            title: 'Official',\n                            dataIndex: 'is_global',\n                            key: 'is_global',\n                            render: (is_global) => (is_global ? <IconBadge className=\"text-success text-xl\" /> : null),\n                        },\n                    ]}\n                />\n                <LemonButton type=\"secondary\" onClick={() => selectTheme('new')}>\n                    Add theme\n                </LemonButton>\n\n                <LemonLabel id=\"default_theme\">Default theme</LemonLabel>\n                <LemonSelect\n                    value={defaultTheme?.id || null}\n                    onChange={(value) => {\n                        const theme = themes.find((theme) => theme.id === value)\n                        LemonDialog.open({\n                            title: `Change the default data theme to \"${theme!.name}\"?`,\n                            description: 'This changes the default colors used when visualizing data in insights.',\n                            primaryButton: {\n                                children: 'Change default theme',\n                                onClick: () => updateCurrentTeam({ default_data_theme: value! }),\n                            },\n                            secondaryButton: {\n                                children: 'Cancel',\n                            },\n                        })\n                    }}\n                    loading={themesLoading || currentTeamLoading}\n                    options={themes.map((theme) => ({ value: theme.id, label: theme.name }))}\n                />\n\n                <DataColorThemeModal />\n            </div>\n        </PayGateMini>\n    )\n}\n", "import { IconCopy, IconPlus, IconTrash } from '@posthog/icons'\nimport { LemonButton, LemonInput, LemonLabel, LemonModal, LemonTable } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport { ColorGlyph } from 'lib/components/SeriesGlyph'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\n\nimport { dataColorThemesModalLogic } from './dataColorThemeModalLogic'\n\nexport function DataColorThemeModal(): JSX.Element {\n    const { theme, themeChanged, isOpen } = useValues(dataColorThemesModalLogic)\n    const { submitTheme, closeModal, addColor, duplicateColor, removeColor } = useActions(dataColorThemesModalLogic)\n\n    const isNew = theme?.id == null\n    const isOfficial = theme?.is_global\n    const title = isOfficial ? 'Official theme' : isNew ? 'Add theme' : 'Edit theme'\n\n    return (\n        <LemonModal\n            title={title}\n            onClose={closeModal}\n            isOpen={isOpen}\n            width={768}\n            footer={\n                isOfficial ? (\n                    <div className=\"flex justify-between items-center w-full\">\n                        <span className=\"italic text-secondary\">Official themes can't be edited.</span>\n                        <LemonButton type=\"secondary\" onClick={closeModal}>\n                            Close\n                        </LemonButton>\n                    </div>\n                ) : (\n                    <LemonButton type=\"primary\" onClick={submitTheme}>\n                        Save\n                    </LemonButton>\n                )\n            }\n            hasUnsavedInput={themeChanged}\n        >\n            <Form logic={dataColorThemesModalLogic} formKey=\"theme\" className=\"flex flex-col gap-2\">\n                <LemonField name=\"name\" label=\"Name\">\n                    <LemonInput placeholder=\"My custom theme\" autoFocus={isNew} disabled={isOfficial} />\n                </LemonField>\n                <LemonLabel>Colors</LemonLabel>\n                <LemonTable\n                    dataSource={theme?.colors?.map((color, index) => ({\n                        name: `preset-${index + 1}`,\n                        color,\n                        index,\n                    }))}\n                    columns={[\n                        {\n                            title: '',\n                            dataIndex: 'color',\n                            key: 'glyph',\n                            render: (_, { color }) => <ColorGlyph color={color} />,\n                            width: 24,\n                        },\n                        {\n                            title: 'Name',\n                            dataIndex: 'name',\n                            key: 'name',\n                        },\n                        {\n                            title: 'Color',\n                            dataIndex: 'color',\n                            render: (_, { index }) => (\n                                <LemonField key={index} name={['colors', index]}>\n                                    <LemonInput className=\"max-w-20 font-mono\" disabled={isOfficial} />\n                                </LemonField>\n                            ),\n                        },\n                        {\n                            title: '',\n                            key: 'actions',\n                            width: 24,\n                            render: (_, { index }) =>\n                                isOfficial ? null : (\n                                    <div className=\"flex\">\n                                        <LemonButton onClick={() => duplicateColor(index)}>\n                                            <IconCopy className=\"text-lg\" />\n                                        </LemonButton>\n                                        <LemonButton onClick={() => removeColor(index)}>\n                                            <IconTrash className=\"text-danger text-lg\" />\n                                        </LemonButton>\n                                    </div>\n                                ),\n                        },\n                    ]}\n                />\n                {!isOfficial && (\n                    <LemonButton\n                        type=\"secondary\"\n                        className=\"self-start\"\n                        onClick={addColor}\n                        icon={<IconPlus className=\"text-lg\" />}\n                    >\n                        Add color\n                    </LemonButton>\n                )}\n            </Form>\n        </LemonModal>\n    )\n}\n", "import { lemonToast } from '@posthog/lemon-ui'\nimport { actions, kea, listeners, path, reducers } from 'kea'\nimport { forms } from 'kea-forms'\nimport api from 'lib/api'\n\nimport { DataColorThemeModelPayload } from '~/types'\n\nimport type { dataColorThemesModalLogicType } from './dataColorThemeModalLogicType'\n\nconst PAYLOAD_DEFAULT: DataColorThemeModelPayload = { name: '', colors: [] }\n\nexport const dataColorThemesModalLogic = kea<dataColorThemesModalLogicType>([\n    path(['scenes', 'settings', 'environment', 'dataColorThemesModalLogic']),\n    actions({\n        openModal: (theme) => ({ theme }),\n        closeModal: true,\n        addColor: true,\n        duplicateColor: (index: number) => ({ index }),\n        removeColor: (index: number) => ({ index }),\n    }),\n    reducers({\n        isOpen: [\n            false,\n            {\n                openModal: () => true,\n                closeModal: () => false,\n            },\n        ],\n        theme: [\n            { name: '', colors: [] } as DataColorThemeModelPayload,\n            {\n                addColor: (theme) => ({\n                    ...theme,\n                    colors: [...(theme.colors || []), theme.colors[theme.colors.length - 1] || '#1d4aff'],\n                }),\n                duplicateColor: (theme, { index }) => ({\n                    ...theme,\n                    colors: theme.colors.flatMap((color, idx) => (idx === index ? [color, color] : [color])),\n                }),\n                removeColor: (theme, { index }) => ({\n                    ...theme,\n                    colors: theme.colors.filter((_, idx) => idx !== index),\n                }),\n            },\n        ],\n    }),\n    forms(({ actions }) => ({\n        theme: {\n            defaults: PAYLOAD_DEFAULT,\n            submit: async ({ id, name, colors }, breakpoint): Promise<DataColorThemeModelPayload> => {\n                const payload: DataColorThemeModelPayload = {\n                    name: name || '',\n                    colors: colors || [],\n                }\n\n                breakpoint()\n\n                try {\n                    const updatedTheme = id\n                        ? await api.dataColorThemes.update(id, payload)\n                        : await api.dataColorThemes.create(payload)\n\n                    lemonToast.success(updatedTheme ? 'Theme saved.' : 'Theme created.')\n                    actions.closeModal()\n\n                    return updatedTheme\n                } catch (error: any) {\n                    if (error.data?.attr && error.data?.detail) {\n                        const field = error.data?.attr?.replace(/_/g, ' ')\n                        lemonToast.error(`Error saving data color theme: ${field}: ${error.data.detail}`)\n                    } else {\n                        lemonToast.error(`Error saving data color theme`)\n                    }\n                }\n\n                return payload\n            },\n            errors: (theme) => ({\n                name: !theme?.name ? 'This field is required' : undefined,\n            }),\n        },\n    })),\n    listeners(({ actions }) => ({\n        openModal: ({ theme }) => {\n            actions.resetTheme(theme)\n        },\n    })),\n])\n", "import { actions, connect, kea, listeners, path } from 'kea'\nimport { dataThemeLogic } from 'scenes/dataThemeLogic'\n\nimport { dataColorThemesModalLogic } from './dataColorThemeModalLogic'\nimport type { dataColorThemesLogicType } from './dataColorThemesLogicType'\n\nexport const dataColorThemesLogic = kea<dataColorThemesLogicType>([\n    path(['scenes', 'settings', 'environment', 'dataColorThemesLogic']),\n    connect({\n        values: [dataThemeLogic, ['themes', 'themesLoading', 'defaultTheme', 'posthogTheme']],\n        actions: [dataColorThemesModalLogic, ['openModal', 'submitThemeSuccess'], dataThemeLogic, ['setThemes']],\n    }),\n    actions({\n        selectTheme: (id: 'new' | number | null) => ({ id }),\n    }),\n    listeners(({ values, actions }) => ({\n        selectTheme: ({ id }) => {\n            // we're not yet initialized\n            if (values.themes == null || values.posthogTheme == null || id == null) {\n                return\n            }\n\n            if (id === 'new') {\n                const { id, name, is_global, ...newTheme } = values.posthogTheme\n                actions.openModal(newTheme)\n            } else {\n                const existingTheme = values.themes.find((theme) => theme.id === id)\n                actions.openModal(existingTheme)\n            }\n        },\n        submitThemeSuccess: ({ theme }) => {\n            const existingTheme = values.themes!.find((t) => t.id === theme.id)\n            if (existingTheme != null) {\n                const updatedThemes = values.themes!.map((t) => (t.id === theme.id ? theme : t))\n                actions.setThemes(updatedThemes)\n            } else {\n                actions.setThemes([...values.themes!, theme])\n            }\n        },\n    })),\n])\n", "import { Link } from '@posthog/lemon-ui'\nimport { FeatureFlagSettings as BasicFeatureFlagSettings } from 'scenes/feature-flags/FeatureFlagSettings'\nimport { urls } from 'scenes/urls'\n\nexport function FeatureFlagSettings(): JSX.Element {\n    return (\n        <>\n            <p>\n                Configure default behavior for feature flags. Flags can be managed on the{' '}\n                <Link to={urls.featureFlags()}>feature flags page</Link>.\n            </p>\n\n            <BasicFeatureFlagSettings />\n        </>\n    )\n}\n", "import { LemonDialog, LemonSwitch, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { teamLogic } from 'scenes/teamLogic'\n\nexport type FeatureFlagSettingsProps = {\n    inModal?: boolean\n}\n\nexport function FeatureFlagSettings({ inModal = false }: FeatureFlagSettingsProps): JSX.Element {\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const { currentTeam } = useValues(teamLogic)\n\n    return (\n        <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n                <LemonSwitch\n                    data-attr=\"default-flag-persistence-switch\"\n                    onChange={(checked) => {\n                        updateCurrentTeam({\n                            flags_persistence_default: checked,\n                        })\n                    }}\n                    label=\"Enable flag persistence by default\"\n                    bordered={!inModal}\n                    fullWidth={inModal}\n                    labelClassName={inModal ? 'text-base font-semibold' : ''}\n                    checked={!!currentTeam?.flags_persistence_default}\n                />\n\n                <p>\n                    When enabled, all new feature flags will have persistence enabled by default. This ensures\n                    consistent user experiences across authentication steps. Learn more in our{' '}\n                    <Link\n                        to=\"https://posthog.com/docs/feature-flags/creating-feature-flags#persisting-feature-flags-across-authentication-steps\"\n                        target=\"_blank\"\n                    >\n                        documentation\n                    </Link>\n                    .\n                </p>\n            </div>\n        </div>\n    )\n}\n\nexport function openFeatureFlagSettingsDialog(): void {\n    LemonDialog.open({\n        title: 'Feature flag settings',\n        content: <FeatureFlagSettings inModal />,\n        width: 600,\n        primaryButton: {\n            children: 'Done',\n        },\n    })\n}\n", "import { LemonButton, LemonInput, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { groupsAccessLogic, GroupsAccessStatus } from 'lib/introductions/groupsAccessLogic'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { LemonTable, LemonTableColumns } from 'lib/lemon-ui/LemonTable'\n\nimport { GroupType } from '~/types'\n\nimport { groupAnalyticsConfigLogic } from './groupAnalyticsConfigLogic'\n\nexport function GroupAnalyticsConfig(): JSX.Element | null {\n    const { groupTypes, groupTypesLoading, singularChanges, pluralChanges, hasChanges } =\n        useValues(groupAnalyticsConfigLogic)\n    const { setSingular, setPlural, reset, save } = useActions(groupAnalyticsConfigLogic)\n\n    const { groupsAccessStatus } = useValues(groupsAccessLogic)\n\n    if (groupsAccessStatus === GroupsAccessStatus.NoAccess) {\n        // Hide settings if the user doesn't have access\n        return null\n    }\n\n    const columns: LemonTableColumns<GroupType> = [\n        {\n            title: 'Group type',\n            tooltip: 'As used in code',\n            dataIndex: 'group_type',\n            key: 'name',\n            render: function RenderName(name) {\n                return name\n            },\n        },\n        {\n            title: 'Singular name',\n            key: 'singular',\n            render: function Render(_, groupType) {\n                return (\n                    <LemonInput\n                        value={\n                            singularChanges[groupType.group_type_index] ||\n                            groupType.name_singular ||\n                            groupType.group_type\n                        }\n                        onChange={(e) => setSingular(groupType.group_type_index, e)}\n                    />\n                )\n            },\n        },\n        {\n            title: 'Plural name',\n            key: 'plural',\n            render: function Render(_, groupType) {\n                return (\n                    <LemonInput\n                        value={\n                            pluralChanges[groupType.group_type_index] ||\n                            groupType.name_plural ||\n                            `${groupType.group_type}(s)`\n                        }\n                        onChange={(e) => setPlural(groupType.group_type_index, e)}\n                    />\n                )\n            },\n        },\n    ]\n\n    return (\n        <>\n            <p>\n                This project has access to group analytics. Below you can configure how various group types are\n                displayed throughout the app.\n            </p>\n\n            {groupsAccessStatus !== GroupsAccessStatus.HasGroupTypes && (\n                <LemonBanner type=\"info\" className=\"mb-4\">\n                    Group types will show up here after you send your first event associated with a group. Take a look\n                    at{' '}\n                    <Link to=\"https://posthog.com/docs/product-analytics/group-analytics\" target=\"_blank\">\n                        this guide\n                    </Link>\n                    for more information on getting started.\n                </LemonBanner>\n            )}\n\n            <LemonTable columns={columns} dataSource={Array.from(groupTypes.values())} loading={groupTypesLoading} />\n\n            <div className=\"flex gap-2 mt-4\">\n                <LemonButton\n                    type=\"primary\"\n                    disabledReason={!hasChanges && 'Make some changes before saving'}\n                    onClick={save}\n                >\n                    Save\n                </LemonButton>\n                <LemonButton disabledReason={!hasChanges && 'Revert any changes made'} onClick={reset}>\n                    Cancel\n                </LemonButton>\n            </div>\n        </>\n    )\n}\n", "import { actions, connect, kea, listeners, path, reducers, selectors } from 'kea'\n\nimport { groupsModel } from '~/models/groupsModel'\n\nimport type { groupAnalyticsConfigLogicType } from './groupAnalyticsConfigLogicType'\n\nexport const groupAnalyticsConfigLogic = kea<groupAnalyticsConfigLogicType>([\n    path(['scenes', 'project', 'Settings', 'groupAnalyticsConfigLogic']),\n    connect({\n        values: [groupsModel, ['groupTypes', 'groupTypesLoading']],\n        actions: [groupsModel, ['updateGroupTypesMetadata']],\n    }),\n    actions({\n        setSingular: (groupTypeIndex: number, value: string) => ({ groupTypeIndex, value }),\n        setPlural: (groupTypeIndex: number, value: string) => ({ groupTypeIndex, value }),\n        reset: true,\n        save: true,\n    }),\n    reducers({\n        singularChanges: [\n            {} as Record<number, string | undefined>,\n            {\n                setSingular: (state, { groupTypeIndex, value }) => ({ ...state, [groupTypeIndex]: value }),\n                reset: () => ({}),\n                updateGroupTypesMetadataSuccess: () => ({}),\n            },\n        ],\n        pluralChanges: [\n            {} as Record<number, string | undefined>,\n            {\n                setPlural: (state, { groupTypeIndex, value }) => ({ ...state, [groupTypeIndex]: value }),\n                reset: () => ({}),\n                updateGroupTypesMetadataSuccess: () => ({}),\n            },\n        ],\n    }),\n    selectors({\n        hasChanges: [\n            (s) => [s.singularChanges, s.pluralChanges],\n            (singularChanges, pluralChanges) =>\n                Object.keys(singularChanges).length > 0 || Object.keys(pluralChanges).length > 0,\n        ],\n    }),\n    listeners(({ values, actions }) => ({\n        save: () => {\n            const { groupTypes, singularChanges, pluralChanges } = values\n            const payload = Array.from(groupTypes.values()).map((groupType) => {\n                const result = { ...groupType }\n                if (singularChanges[groupType.group_type_index]) {\n                    result.name_singular = singularChanges[groupType.group_type_index]\n                }\n                if (pluralChanges[groupType.group_type_index]) {\n                    result.name_plural = pluralChanges[groupType.group_type_index]\n                }\n                return result\n            })\n\n            actions.updateGroupTypesMetadata(payload)\n        },\n    })),\n])\n", "import { LemonSwitch } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nexport function HeatmapsSettings(): JSX.Element {\n    const { userLoading } = useValues(userLogic)\n    const { currentTeam } = useValues(teamLogic)\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const { reportHeatmapsToggled } = useActions(eventUsageLogic)\n\n    return (\n        <>\n            <p>\n                If you use our JavaScript libraries, we can capture general clicks, mouse movements, and scrolling to\n                create heatmaps. No additional events are created, and you can disable this at any time.\n                <br />\n                Whereas Autocapture creates events whenever it can uniquely identify an interacted element, heatmaps are\n                generated based on overall mouse or touch positions and are useful for understanding more general user\n                behavior across your site.\n            </p>\n            <div className=\"space-y-2\">\n                <LemonSwitch\n                    id=\"posthog-heatmaps-switch\"\n                    onChange={(checked) => {\n                        updateCurrentTeam({\n                            heatmaps_opt_in: checked,\n                        })\n                        reportHeatmapsToggled(checked)\n                    }}\n                    checked={!!currentTeam?.heatmaps_opt_in}\n                    disabled={userLoading}\n                    label=\"Enable heatmaps for web\"\n                    bordered\n                />\n            </div>\n        </>\n    )\n}\n", "import { LemonSwitch } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { teamLogic } from 'scenes/teamLogic'\n\nexport function HumanFriendlyComparisonPeriodsSetting(): JSX.Element {\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const { currentTeam, currentTeamLoading } = useValues(teamLogic)\n\n    return (\n        <>\n            <p>\n                When comparing against a previous month or year, PostHog will use the same start and end dates as the\n                current period by default. It might be desirable, however, to compare against the same day of the week\n                instead of the same day to account for weekend seasonality. If that's the case for your analysis, you\n                can enable this setting.\n            </p>\n            <p>\n                In practice, this means that an year comparison becomes a 52 week comparison, and a month comparison\n                becomes a 4 week comparison.\n            </p>\n            <LemonSwitch\n                onChange={(checked) => {\n                    updateCurrentTeam({ human_friendly_comparison_periods: checked })\n                }}\n                checked={!!currentTeam?.human_friendly_comparison_periods}\n                disabled={currentTeamLoading}\n                label=\"Use human friendly comparison periods\"\n                bordered\n            />\n        </>\n    )\n}\n", "import { useValues } from 'kea'\nimport { CodeSnippet } from 'lib/components/CodeSnippet'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\n\nexport function IPAllowListInfo(): JSX.Element {\n    const { preflight } = useValues(preflightLogic)\n\n    if (!preflight?.public_egress_ip_addresses?.length) {\n        return <div>Not supported</div>\n    }\n    return (\n        <>\n            <p>\n                Whenever PostHog makes a call to an external service it will come from one of our static IP addresses.\n                If you need to explicitly allowlist these IPs, you can do so by adding them to your firewall rules. This\n                applies to all integrations such as webhooks, apps or batch exports.\n            </p>\n\n            <CodeSnippet thing=\"IP addresses allowlisting\">\n                {preflight.public_egress_ip_addresses.join(' \\n')}\n            </CodeSnippet>\n        </>\n    )\n}\n", "import { LemonSwitch } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { teamLogic } from 'scenes/teamLogic'\n\nexport function IPCapture(): JSX.Element {\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const { currentTeam, currentTeamLoading } = useValues(teamLogic)\n\n    return (\n        <LemonSwitch\n            onChange={(checked) => {\n                updateCurrentTeam({ anonymize_ips: checked })\n            }}\n            checked={!!currentTeam?.anonymize_ips}\n            disabled={currentTeamLoading}\n            label=\"Discard client IP data\"\n            bordered\n        />\n    )\n}\n", "import { IconEllipsis, IconInfo } from '@posthog/icons'\nimport {\n    LemonBanner,\n    LemonButton,\n    LemonDialog,\n    LemonInput,\n    LemonMenu,\n    LemonTable,\n    LemonTableColumns,\n    LemonTabs,\n    Spinner,\n    Tooltip,\n} from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { PayGateMini } from 'lib/components/PayGateMini/PayGateMini'\nimport { RestrictionScope, useRestrictedArea } from 'lib/components/RestrictedArea'\nimport { OrganizationMembershipLevel } from 'lib/constants'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { LemonMarkdown } from 'lib/lemon-ui/LemonMarkdown'\n\nimport { AvailableFeature } from '~/types'\n\nimport { proxyLogic, ProxyRecord } from './proxyLogic'\n\nconst MAX_PROXY_RECORDS = 3\n\nconst statusText = {\n    valid: 'live',\n    timed_out: 'timed out',\n}\n\nexport function ManagedReverseProxy(): JSX.Element {\n    const { formState, proxyRecords, proxyRecordsLoading } = useValues(proxyLogic)\n    const { showForm, deleteRecord } = useActions(proxyLogic)\n\n    const restrictionReason = useRestrictedArea({\n        minimumAccessLevel: OrganizationMembershipLevel.Admin,\n        scope: RestrictionScope.Organization,\n    })\n\n    const maxRecordsReached = proxyRecords.length >= MAX_PROXY_RECORDS\n\n    const recordsWithMessages = proxyRecords.filter((record) => !!record.message)\n\n    const columns: LemonTableColumns<ProxyRecord> = [\n        {\n            title: 'Domain',\n            dataIndex: 'domain',\n        },\n        {\n            title: 'Status',\n            dataIndex: 'status',\n            render: function RenderStatus(status) {\n                if (!status) {\n                    return <span>Unknown</span>\n                }\n\n                return (\n                    <div\n                        className={clsx(\n                            'space-x-1',\n                            status === 'valid'\n                                ? 'text-success'\n                                : status == 'erroring'\n                                ? 'text-danger'\n                                : 'text-warning-dark'\n                        )}\n                    >\n                        {status === 'issuing' && <Spinner />}\n                        <span className=\"capitalize\">{statusText[status] || status}</span>\n                        {status === 'waiting' && (\n                            <Tooltip title=\"Waiting for DNS records to be created\">\n                                <IconInfo className=\"cursor-pointer\" />\n                            </Tooltip>\n                        )}\n                        {status === 'timed_out' && (\n                            <Tooltip title=\"Timed out waiting for DNS records to be created. Please delete the record and try again\">\n                                <IconInfo className=\"cursor-pointer\" />\n                            </Tooltip>\n                        )}\n                    </div>\n                )\n            },\n        },\n        {\n            title: <span className=\"h-5\" />,\n            width: 20,\n            className: 'flex justify-center',\n            render: function Render(_, { id, status }) {\n                return (\n                    status != 'deleting' &&\n                    !restrictionReason && (\n                        <LemonMenu\n                            items={[\n                                {\n                                    label: 'Delete',\n                                    status: 'danger',\n                                    onClick: () => {\n                                        LemonDialog.open({\n                                            title: 'Delete managed proxy',\n                                            width: '20rem',\n                                            content:\n                                                'Are you sure you want to delete this managed proxy? This cannot be undone and if it is in use then events sent to the domain will not be processed.',\n                                            primaryButton: {\n                                                status: 'danger',\n                                                onClick: () => deleteRecord(id),\n                                                children: 'Delete',\n                                            },\n                                            secondaryButton: {\n                                                children: 'Cancel',\n                                            },\n                                        })\n                                    },\n                                },\n                            ]}\n                        >\n                            <LemonButton size=\"small\" icon={<IconEllipsis className=\"text-secondary\" />} />\n                        </LemonMenu>\n                    )\n                )\n            },\n        },\n    ]\n\n    return (\n        <PayGateMini feature={AvailableFeature.MANAGED_REVERSE_PROXY}>\n            <div className=\"space-y-2\">\n                {recordsWithMessages.map((r) => (\n                    <LemonBanner type=\"warning\" key={r.id}>\n                        <LemonMarkdown>{`**${r.domain}**\\n ${r.message}`}</LemonMarkdown>\n                    </LemonBanner>\n                ))}\n                <LemonTable\n                    loading={proxyRecords.length === 0 && proxyRecordsLoading}\n                    columns={columns}\n                    dataSource={proxyRecords}\n                    expandable={{\n                        expandedRowRender: (record) => <ExpandedRow record={record} />,\n                    }}\n                />\n                {formState === 'collapsed' ? (\n                    maxRecordsReached ? (\n                        <LemonBanner type=\"info\">\n                            There is a maximum of {MAX_PROXY_RECORDS} records allowed per organization\n                        </LemonBanner>\n                    ) : (\n                        <div className=\"flex\">\n                            <LemonButton onClick={showForm} type=\"primary\" disabledReason={restrictionReason}>\n                                Add managed proxy\n                            </LemonButton>\n                        </div>\n                    )\n                ) : (\n                    <CreateRecordForm />\n                )}\n            </div>\n        </PayGateMini>\n    )\n}\n\nconst ExpandedRow = ({ record }: { record: ProxyRecord }): JSX.Element => {\n    return (\n        <div className=\"pb-4 pr-4\">\n            <LemonTabs\n                size=\"small\"\n                activeKey=\"cname\"\n                tabs={[\n                    {\n                        label: 'CNAME',\n                        key: 'cname',\n                        content: (\n                            <CodeSnippet key={record.id} language={Language.HTTP}>\n                                {record.target_cname}\n                            </CodeSnippet>\n                        ),\n                    },\n                ]}\n            />\n        </div>\n    )\n}\n\nfunction CreateRecordForm(): JSX.Element {\n    const { formState, proxyRecordsLoading, proxyRecords } = useValues(proxyLogic)\n    const { collapseForm } = useActions(proxyLogic)\n\n    const waitingRecords = proxyRecords.filter((r) => r.status === 'waiting')\n\n    return (\n        <div className=\"bg-surface-primary rounded border px-5 py-4 space-y-2\">\n            {formState == 'active' ? (\n                <Form logic={proxyLogic} formKey=\"createRecord\" enableFormOnSubmit className=\"w-full space-y-2\">\n                    <LemonField name=\"domain\">\n                        <LemonInput\n                            autoFocus\n                            placeholder=\"Enter a domain (e.g. ph.mydomain.com)\"\n                            data-attr=\"domain-input\"\n                        />\n                    </LemonField>\n                    <div className=\"flex justify-end gap-2\">\n                        <LemonButton\n                            type=\"secondary\"\n                            onClick={collapseForm}\n                            disabledReason={proxyRecordsLoading ? 'Saving' : undefined}\n                        >\n                            Cancel\n                        </LemonButton>\n                        <LemonButton\n                            htmlType=\"submit\"\n                            type=\"primary\"\n                            data-attr=\"domain-save\"\n                            loading={proxyRecordsLoading}\n                        >\n                            Add\n                        </LemonButton>\n                    </div>\n                </Form>\n            ) : (\n                <>\n                    <div className=\"text-xl font-semibold leading-tight\">Almost there</div>\n                    <div>\n                        You need to set the following <b>CNAME</b> records in your DNS provider:\n                    </div>\n                    {waitingRecords.map((r) => (\n                        <div key={r.id} className=\"space-y-1\">\n                            <span className=\"font-semibold\">{r.domain}</span>\n                            <CodeSnippet key={r.id} language={Language.HTTP}>\n                                {r.target_cname}\n                            </CodeSnippet>\n                        </div>\n                    ))}\n                    <div className=\"flex justify-end\">\n                        <LemonButton onClick={collapseForm} type=\"primary\">\n                            Done\n                        </LemonButton>\n                    </div>\n                </>\n            )}\n        </div>\n    )\n}\n", "import { IconTrash } from '@posthog/icons'\nimport { LemonButton, LemonSkeleton } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { integrationsLogic } from 'lib/integrations/integrationsLogic'\nimport { IntegrationView } from 'lib/integrations/IntegrationView'\nimport { LemonDialog } from 'lib/lemon-ui/LemonDialog'\n\nimport { IntegrationType } from '~/types'\n\nexport function OtherIntegrations(): JSX.Element {\n    const { integrations, integrationsLoading } = useValues(integrationsLogic)\n    const { deleteIntegration } = useActions(integrationsLogic)\n\n    const otherIntegrations = integrations?.filter((integration) => integration.kind !== 'slack')\n\n    const onDeleteClick = (integration: IntegrationType): void => {\n        LemonDialog.open({\n            title: `Do you want to disconnect from this ${integration.kind} integration?`,\n            description:\n                'This cannot be undone. PostHog resources configured to use this integration will remain but will stop working.',\n            primaryButton: {\n                children: 'Yes, disconnect',\n                status: 'danger',\n                onClick: () => deleteIntegration(integration.id),\n            },\n            secondaryButton: {\n                children: 'No thanks',\n            },\n        })\n    }\n\n    return (\n        <div>\n            <p>\n                All connected integrations are listed here. These integrations may be used for various purposes, such as\n                data warehouse or pipeline destinations. To connect a new integration, visit the relevant product area.\n            </p>\n\n            <div className=\"space-y-2\">\n                {otherIntegrations?.length ? (\n                    otherIntegrations.map((integration) => (\n                        <IntegrationView\n                            key={integration.id}\n                            integration={integration}\n                            suffix={\n                                <LemonButton\n                                    type=\"secondary\"\n                                    status=\"danger\"\n                                    onClick={() => onDeleteClick(integration)}\n                                    icon={<IconTrash />}\n                                >\n                                    Disconnect\n                                </LemonButton>\n                            }\n                        />\n                    ))\n                ) : integrationsLoading ? (\n                    <LemonSkeleton className=\"h-10\" />\n                ) : (\n                    <p>No integrations</p>\n                )}\n            </div>\n        </div>\n    )\n}\n", "import { LemonInput, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { parseAliasToReadable } from 'lib/components/PathCleanFilters/PathCleanFilterItem'\nimport { PathCleanFilters } from 'lib/components/PathCleanFilters/PathCleanFilters'\nimport { isValidRegexp } from 'lib/utils/regexp'\nimport { useState } from 'react'\nimport { INSIGHT_TYPE_URLS } from 'scenes/insights/utils'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { AvailableFeature, InsightType, PathCleaningFilter } from '~/types'\n\nconst cleanPathWithRegexes = (path: string, filters: PathCleaningFilter[]): string => {\n    return filters.reduce((text, filter) => {\n        // If for some reason we don't have a valid RegExp, don't attempt to clean the path\n        if (!isValidRegexp(filter.regex ?? '')) {\n            return text\n        }\n\n        return text.replace(new RegExp(filter.regex ?? '', 'gi'), filter.alias ?? '')\n    }, path)\n}\n\nexport function PathCleaningFiltersConfig(): JSX.Element | null {\n    const [testValue, setTestValue] = useState('')\n\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const { currentTeam } = useValues(teamLogic)\n    const { hasAvailableFeature } = useValues(userLogic)\n    const hasAdvancedPaths = hasAvailableFeature(AvailableFeature.PATHS_ADVANCED)\n\n    if (!currentTeam) {\n        return null\n    }\n\n    if (!hasAdvancedPaths) {\n        return (\n            <p>\n                Advanced path cleaning is a premium feature. Check{' '}\n                <Link to=\"https://posthog.com/docs/product-analytics/paths#path-cleaning-rules\">\n                    our path cleaning rules documentation\n                </Link>{' '}\n                to learn more about it.\n            </p>\n        )\n    }\n\n    const cleanedTestPath = cleanPathWithRegexes(testValue, currentTeam.path_cleaning_filters ?? [])\n    const readableTestPath = parseAliasToReadable(cleanedTestPath)\n\n    return (\n        <>\n            <p>\n                Make your <Link to={INSIGHT_TYPE_URLS[InsightType.PATHS]}>Paths</Link> clearer by aliasing one or\n                multiple URLs.{' '}\n                <i>\n                    Example: <code>http://tenant-one.mydomain.com/accounts</code> and{' '}\n                    <code>http://tenant-two.mydomain.com/accounts</code> can become a single <code>/accounts</code>{' '}\n                    path.\n                </i>\n            </p>\n            <p>\n                You can check{' '}\n                <Link to=\"https://posthog.com/docs/product-analytics/paths#path-cleaning-rules\">\n                    our path cleaning rules documentation\n                </Link>{' '}\n                to learn more about it.\n            </p>\n            <p>\n                Each rule is composed of an alias and a regex pattern. Any pattern in a URL or event name that matches\n                the regex will be replaced with the alias. Rules are applied in the order that they're listed.\n            </p>\n            <p>These will be applied in order. You can reorder them by dragging and dropping.</p>\n            <p>\n                <b>\n                    Rules that you set here will be applied before wildcarding and other regex replacement if path\n                    cleaning is switched on in Product and Web Analytics.\n                </b>\n            </p>\n            <PathCleanFilters\n                filters={currentTeam.path_cleaning_filters}\n                setFilters={(filters) => updateCurrentTeam({ path_cleaning_filters: filters })}\n            />\n\n            <p className=\"mt-4\">Wanna test what your cleaned path will look like? Try them out here.</p>\n            <div className=\"flex flex-col sm:flex-row gap-2 items-center justify-center\">\n                <LemonInput\n                    value={testValue}\n                    onChange={setTestValue}\n                    placeholder=\"Enter a path to test\"\n                    size=\"medium\"\n                    className=\"flex-1\"\n                />\n                --&gt;\n                <span className=\"inline-flex items-center justify-start p-2 font-mono text-xs flex-1 border rounded min-h-10\">\n                    {readableTestPath}\n                </span>\n            </div>\n        </>\n    )\n}\n", "import { LemonButton } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { PropertySelect } from 'lib/components/PropertySelect/PropertySelect'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { PERSON_DEFAULT_DISPLAY_NAME_PROPERTIES } from 'lib/constants'\nimport { LemonSkeleton } from 'lib/lemon-ui/LemonSkeleton'\nimport { useEffect, useState } from 'react'\nimport { teamLogic } from 'scenes/teamLogic'\n\nexport function PersonDisplayNameProperties(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const [value, setValue] = useState([] as string[])\n\n    useEffect(\n        () => setValue(currentTeam?.person_display_name_properties || PERSON_DEFAULT_DISPLAY_NAME_PROPERTIES),\n        [currentTeam]\n    )\n\n    if (!currentTeam) {\n        return <LemonSkeleton className=\"w-1/2 h-4\" />\n    }\n\n    return (\n        <>\n            <p>\n                Choose which properties of an identified Person will be used for their <b>Display Name</b>. The first\n                property to be found on the Person will be used. Drag the items to re-order the priority.\n            </p>\n            <div className=\"space-y-4\">\n                <PropertySelect\n                    taxonomicFilterGroup={TaxonomicFilterGroupType.PersonProperties}\n                    onChange={(properties) => setValue(properties)}\n                    selectedProperties={value || []}\n                    addText=\"Add\"\n                    sortable\n                />\n                <LemonButton\n                    type=\"primary\"\n                    onClick={() =>\n                        updateCurrentTeam({\n                            person_display_name_properties: value.map((s) => s.trim()).filter((a) => a) || [],\n                        })\n                    }\n                >\n                    Save\n                </LemonButton>\n            </div>\n        </>\n    )\n}\n", "import {\n    LemonButton,\n    LemonSegmentedButton,\n    LemonSegmentedButtonOption,\n    LemonSelect,\n    Link,\n    Spinner,\n} from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { FlagSelector } from 'lib/components/FlagSelector'\nimport { PayGateMini } from 'lib/components/PayGateMini/PayGateMini'\nimport { SESSION_REPLAY_MINIMUM_DURATION_OPTIONS } from 'lib/constants'\nimport { IconCancel } from 'lib/lemon-ui/icons'\nimport { LemonLabel } from 'lib/lemon-ui/LemonLabel/LemonLabel'\nimport { SupportedPlatforms } from 'scenes/settings/environment/SessionRecordingSettings'\nimport { sessionReplayIngestionControlLogic } from 'scenes/settings/environment/sessionReplayIngestionControlLogic'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { AvailableFeature, MultivariateFlagOptions } from '~/types'\n\nfunction variantOptions(multivariate: MultivariateFlagOptions | undefined): LemonSegmentedButtonOption<string>[] {\n    if (!multivariate) {\n        return []\n    }\n    return [\n        {\n            label: 'any',\n            value: 'any',\n        },\n        ...multivariate.variants.map((variant) => {\n            return {\n                label: variant.key,\n                value: variant.key,\n            }\n        }),\n    ]\n}\n\nfunction LinkedFlagSelector(): JSX.Element | null {\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const { currentTeam } = useValues(teamLogic)\n\n    const { hasAvailableFeature } = useValues(userLogic)\n\n    const featureFlagRecordingFeatureEnabled = hasAvailableFeature(AvailableFeature.REPLAY_FEATURE_FLAG_BASED_RECORDING)\n\n    const { linkedFlag, featureFlagLoading, flagHasVariants } = useValues(sessionReplayIngestionControlLogic)\n    const { selectFeatureFlag } = useActions(sessionReplayIngestionControlLogic)\n\n    if (!featureFlagRecordingFeatureEnabled) {\n        return null\n    }\n\n    return (\n        <>\n            <div className=\"flex flex-col space-y-2\">\n                <LemonLabel className=\"text-base\">\n                    Enable recordings using feature flag {featureFlagLoading && <Spinner />}\n                </LemonLabel>\n                <SupportedPlatforms web={true} ios={true} android={true} reactNative={true} flutter={true} />\n                <p>Linking a flag means that recordings will only be collected for users who have the flag enabled.</p>\n                <div className=\"flex flex-row justify-start\">\n                    <FlagSelector\n                        value={currentTeam?.session_recording_linked_flag?.id ?? undefined}\n                        onChange={(id, key, flag) => {\n                            selectFeatureFlag(flag)\n                            updateCurrentTeam({ session_recording_linked_flag: { id, key, variant: null } })\n                        }}\n                    />\n                    {currentTeam?.session_recording_linked_flag && (\n                        <LemonButton\n                            className=\"ml-2\"\n                            icon={<IconCancel />}\n                            size=\"small\"\n                            type=\"secondary\"\n                            onClick={() => updateCurrentTeam({ session_recording_linked_flag: null })}\n                            title=\"Clear selected flag\"\n                        />\n                    )}\n                </div>\n                {flagHasVariants && (\n                    <>\n                        <LemonLabel className=\"text-base\">Link to a specific flag variant</LemonLabel>\n                        <LemonSegmentedButton\n                            className=\"min-w-1/3\"\n                            value={currentTeam?.session_recording_linked_flag?.variant ?? 'any'}\n                            options={variantOptions(linkedFlag?.filters.multivariate)}\n                            onChange={(variant) => {\n                                if (!linkedFlag) {\n                                    return\n                                }\n\n                                updateCurrentTeam({\n                                    session_recording_linked_flag: {\n                                        id: linkedFlag?.id,\n                                        key: linkedFlag?.key,\n                                        variant: variant === 'any' ? null : variant,\n                                    },\n                                })\n                            }}\n                        />\n                        <p>\n                            This is a multi-variant flag. You can link to \"any\" variant of the flag, and recordings will\n                            start whenever the flag is enabled for a user.\n                        </p>\n                        <p>\n                            Alternatively, you can link to a specific variant of the flag, and recordings will only\n                            start when the user has that specific variant enabled. Variant targeting support requires\n                            posthog-js v1.110.0 or greater\n                        </p>\n                    </>\n                )}\n            </div>\n        </>\n    )\n}\n\nexport function SessionRecordingIngestionSettings(): JSX.Element | null {\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const { currentTeam } = useValues(teamLogic)\n    const { hasAvailableFeature } = useValues(userLogic)\n\n    const samplingControlFeatureEnabled = hasAvailableFeature(AvailableFeature.SESSION_REPLAY_SAMPLING)\n    const recordingDurationMinimumFeatureEnabled = hasAvailableFeature(\n        AvailableFeature.REPLAY_RECORDING_DURATION_MINIMUM\n    )\n\n    return (\n        <PayGateMini feature={AvailableFeature.SESSION_REPLAY_SAMPLING}>\n            <>\n                <p>\n                    PostHog offers several tools to let you control the number of recordings you collect and which users\n                    you collect recordings for.{' '}\n                    <Link\n                        to=\"https://posthog.com/docs/session-replay/how-to-control-which-sessions-you-record\"\n                        target=\"blank\"\n                    >\n                        Learn more in our docs.\n                    </Link>\n                </p>\n\n                {samplingControlFeatureEnabled && (\n                    <>\n                        <div className=\"flex flex-row justify-between\">\n                            <LemonLabel className=\"text-base\">Sampling</LemonLabel>\n                            <LemonSelect\n                                onChange={(v) => {\n                                    updateCurrentTeam({ session_recording_sample_rate: v })\n                                }}\n                                dropdownMatchSelectWidth={false}\n                                options={[\n                                    {\n                                        label: '100% (no sampling)',\n                                        value: '1.00',\n                                    },\n                                    {\n                                        label: '95%',\n                                        value: '0.95',\n                                    },\n                                    {\n                                        label: '90%',\n                                        value: '0.90',\n                                    },\n                                    {\n                                        label: '85%',\n                                        value: '0.85',\n                                    },\n                                    {\n                                        label: '80%',\n                                        value: '0.80',\n                                    },\n                                    {\n                                        label: '75%',\n                                        value: '0.75',\n                                    },\n                                    {\n                                        label: '70%',\n                                        value: '0.70',\n                                    },\n                                    {\n                                        label: '65%',\n                                        value: '0.65',\n                                    },\n                                    {\n                                        label: '60%',\n                                        value: '0.60',\n                                    },\n                                    {\n                                        label: '55%',\n                                        value: '0.55',\n                                    },\n                                    {\n                                        label: '50%',\n                                        value: '0.50',\n                                    },\n                                    {\n                                        label: '45%',\n                                        value: '0.45',\n                                    },\n                                    {\n                                        label: '40%',\n                                        value: '0.40',\n                                    },\n                                    {\n                                        label: '35%',\n                                        value: '0.35',\n                                    },\n                                    {\n                                        label: '30%',\n                                        value: '0.30',\n                                    },\n                                    {\n                                        label: '25%',\n                                        value: '0.25',\n                                    },\n                                    {\n                                        label: '20%',\n                                        value: '0.20',\n                                    },\n                                    {\n                                        label: '15%',\n                                        value: '0.15',\n                                    },\n                                    {\n                                        label: '10%',\n                                        value: '0.10',\n                                    },\n                                    {\n                                        label: '5%',\n                                        value: '0.05',\n                                    },\n                                    {\n                                        label: '0% (replay disabled)',\n                                        value: '0.00',\n                                    },\n                                ]}\n                                value={\n                                    typeof currentTeam?.session_recording_sample_rate === 'string'\n                                        ? currentTeam?.session_recording_sample_rate\n                                        : '1.00'\n                                }\n                            />\n                        </div>\n                        <SupportedPlatforms web={true} />\n                        <p>\n                            Use this setting to restrict the percentage of sessions that will be recorded. This is\n                            useful if you want to reduce the amount of data you collect. 100% means all sessions will be\n                            collected. 50% means roughly half of sessions will be collected.\n                        </p>\n                        <p>Sampling is only available for JavaScript Web.</p>\n                    </>\n                )}\n                {recordingDurationMinimumFeatureEnabled && (\n                    <>\n                        <div className=\"flex flex-row justify-between\">\n                            <LemonLabel className=\"text-base\">Minimum session duration (seconds)</LemonLabel>\n                            <LemonSelect\n                                dropdownMatchSelectWidth={false}\n                                onChange={(v) => {\n                                    updateCurrentTeam({ session_recording_minimum_duration_milliseconds: v })\n                                }}\n                                options={SESSION_REPLAY_MINIMUM_DURATION_OPTIONS}\n                                value={currentTeam?.session_recording_minimum_duration_milliseconds}\n                            />\n                        </div>\n                        <SupportedPlatforms web={true} />\n                        <p>\n                            Setting a minimum session duration will ensure that only sessions that last longer than that\n                            value are collected. This helps you avoid collecting sessions that are too short to be\n                            useful.\n                        </p>\n                        <p>Minimum session duration is only available for JavaScript Web.</p>\n                    </>\n                )}\n                <LinkedFlagSelector />\n            </>\n        </PayGateMini>\n    )\n}\n", "import { actions, afterMount, connect, kea, path, reducers, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { isObject } from 'lib/utils'\nimport { variantKeyToIndexFeatureFlagPayloads } from 'scenes/feature-flags/featureFlagLogic'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { FeatureFlagBasicType } from '~/types'\n\nimport type { sessionReplayIngestionControlLogicType } from './sessionReplayIngestionControlLogicType'\n\nexport const sessionReplayIngestionControlLogic = kea<sessionReplayIngestionControlLogicType>([\n    path(['scenes', 'settings', 'project', 'sessionReplayIngestionControlLogic']),\n    actions({\n        selectFeatureFlag: (flag: FeatureFlagBasicType) => ({ flag }),\n    }),\n    connect({ values: [teamLogic, ['currentTeam']], actions: [teamLogic, ['updateCurrentTeam']] }),\n    reducers({\n        selectedFlag: [\n            null as FeatureFlagBasicType | null,\n            {\n                selectFeatureFlag: (_, { flag }) => flag,\n            },\n        ],\n    }),\n    loaders(({ values }) => ({\n        featureFlag: {\n            loadFeatureFlag: async () => {\n                if (values.linkedFeatureFlagId) {\n                    const retrievedFlag = await api.featureFlags.get(values.linkedFeatureFlagId)\n                    return variantKeyToIndexFeatureFlagPayloads(retrievedFlag)\n                }\n                return null\n            },\n        },\n    })),\n    selectors({\n        linkedFeatureFlagId: [\n            (s) => [s.currentTeam],\n            (currentTeam) => currentTeam?.session_recording_linked_flag?.id || null,\n        ],\n        linkedFlag: [\n            (s) => [s.featureFlag, s.selectedFlag, s.currentTeam],\n            // an existing linked flag is loaded from the API,\n            // a newly chosen flag is selected can be passed in\n            // the current team is used to ensure that we don't show stale values\n            // as people change the selection\n            (featureFlag, selectedFlag, currentTeam) =>\n                currentTeam?.session_recording_linked_flag?.id ? selectedFlag || featureFlag : null,\n        ],\n        flagHasVariants: [(s) => [s.linkedFlag], (linkedFlag) => isObject(linkedFlag?.filters.multivariate)],\n    }),\n    afterMount(({ actions }) => {\n        actions.loadFeatureFlag()\n    }),\n])\n", "import { IconTrash } from '@posthog/icons'\nimport { LemonButton, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport api from 'lib/api'\nimport { CodeSnippet, Language } from 'lib/components/CodeSnippet'\nimport { integrationsLogic } from 'lib/integrations/integrationsLogic'\nimport { IntegrationView } from 'lib/integrations/IntegrationView'\nimport { LemonDialog } from 'lib/lemon-ui/LemonDialog'\nimport { useState } from 'react'\nimport { urls } from 'scenes/urls'\nimport { userLogic } from 'scenes/userLogic'\n\n// Modified version of https://app.slack.com/app-settings/TSS5W8YQZ/A03KWE2FJJ2/app-manifest to match current instance\nconst getSlackAppManifest = (): any => ({\n    display_information: {\n        name: 'PostHog',\n        description: 'Product Insights right where you need them',\n        background_color: '#f54e00',\n    },\n    features: {\n        app_home: {\n            home_tab_enabled: false,\n            messages_tab_enabled: false,\n            messages_tab_read_only_enabled: true,\n        },\n        bot_user: {\n            display_name: 'PostHog',\n            always_online: false,\n        },\n        unfurl_domains: [window.location.hostname],\n    },\n    oauth_config: {\n        redirect_urls: [`${window.location.origin.replace('http://', 'https://')}/integrations/slack/callback`],\n        scopes: {\n            bot: ['channels:read', 'chat:write', 'groups:read', 'links:read', 'links:write'],\n        },\n    },\n    settings: {\n        event_subscriptions: {\n            request_url: `${window.location.origin.replace('http://', 'https://')}/api/integrations/slack/events`,\n            bot_events: ['link_shared'],\n        },\n        org_deploy_enabled: false,\n        socket_mode_enabled: false,\n        token_rotation_enabled: false,\n    },\n})\n\nexport function SlackIntegration(): JSX.Element {\n    const { slackIntegrations, slackAvailable } = useValues(integrationsLogic)\n    const { deleteIntegration } = useActions(integrationsLogic)\n    const [showSlackInstructions, setShowSlackInstructions] = useState(false)\n    const { user } = useValues(userLogic)\n\n    const onDeleteClick = (id: number): void => {\n        LemonDialog.open({\n            title: `Do you want to disconnect from Slack?`,\n            description:\n                'This cannot be undone. PostHog resources configured to use this Slack workspace will remain but will stop working.',\n            primaryButton: {\n                children: 'Yes, disconnect',\n                status: 'danger',\n                onClick: () => {\n                    if (id) {\n                        deleteIntegration(id)\n                    }\n                },\n            },\n            secondaryButton: {\n                children: 'No thanks',\n            },\n        })\n    }\n\n    return (\n        <div>\n            <p>\n                Integrate with Slack directly to get more advanced options such as{' '}\n                <b>subscribing to an Insight or Dashboard</b> for regular reports to Slack channels of your choice.\n                Guidance on integrating with Slack available{' '}\n                <Link to=\"https://posthog.com/docs/product-analytics/subscriptions#slack-subscriptions\">\n                    in our docs\n                </Link>\n                .\n            </p>\n\n            <div className=\"space-y-2\">\n                {slackIntegrations?.map((integration) => (\n                    <IntegrationView\n                        key={integration.id}\n                        integration={integration}\n                        suffix={\n                            <LemonButton\n                                type=\"secondary\"\n                                status=\"danger\"\n                                onClick={() => onDeleteClick(integration.id)}\n                                icon={<IconTrash />}\n                            >\n                                Disconnect\n                            </LemonButton>\n                        }\n                    />\n                ))}\n\n                <div>\n                    {slackAvailable ? (\n                        <Link to={api.integrations.authorizeUrl({ kind: 'slack' })} disableClientSideRouting>\n                            <img\n                                alt=\"Connect to Slack workspace\"\n                                height=\"40\"\n                                width=\"139\"\n                                src=\"https://platform.slack-edge.com/img/add_to_slack.png\"\n                                srcSet=\"https://platform.slack-edge.com/img/add_to_slack.png 1x, https://platform.slack-edge.com/img/add_to_slack@2x.png 2x\"\n                            />\n                        </Link>\n                    ) : user?.is_staff ? (\n                        !showSlackInstructions ? (\n                            <>\n                                <LemonButton type=\"secondary\" onClick={() => setShowSlackInstructions(true)}>\n                                    Show Instructions\n                                </LemonButton>\n                            </>\n                        ) : (\n                            <>\n                                <h5>To get started</h5>\n                                <p>\n                                    <ol>\n                                        <li>Copy the below Slack App Template</li>\n                                        <li>\n                                            Go to{' '}\n                                            <Link to=\"https://api.slack.com/apps\" target=\"_blank\">\n                                                Slack Apps\n                                            </Link>\n                                        </li>\n                                        <li>Create an App using the provided template</li>\n                                        <li>\n                                            <Link to={urls.instanceSettings()}>Go to Instance Settings</Link> and update\n                                            the <code>\"SLACK_\"</code> properties using the values from the{' '}\n                                            <b>App Credentials</b> section of your Slack Apps\n                                        </li>\n                                    </ol>\n\n                                    <CodeSnippet language={Language.JSON}>\n                                        {JSON.stringify(getSlackAppManifest(), null, 2)}\n                                    </CodeSnippet>\n                                </p>\n                            </>\n                        )\n                    ) : (\n                        <p className=\"text-secondary\">\n                            This PostHog instance is not configured for Slack. Please contact the instance owner to\n                            configure it.\n                        </p>\n                    )}\n                </div>\n            </div>\n        </div>\n    )\n}\n", "import { Link } from '@posthog/lemon-ui'\nimport { SurveySettings as BasicSurveySettings } from 'scenes/surveys/SurveySettings'\nimport { urls } from 'scenes/urls'\n\nexport function SurveySettings(): JSX.Element {\n    return (\n        <>\n            <p>\n                Get qualitative and quantitative data on how your users are doing. Surveys are found in the{' '}\n                <Link to={urls.surveys()}>surveys page</Link>.\n            </p>\n\n            <BasicSurveySettings />\n        </>\n    )\n}\n", "import { IconCrown, IconLeave, IconLock, IconUnlock } from '@posthog/icons'\nimport {\n    LemonBanner,\n    LemonButton,\n    LemonSelect,\n    LemonSelectOption,\n    LemonSnack,\n    LemonSwitch,\n    LemonTable,\n} from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { RestrictionScope, useRestrictedArea } from 'lib/components/RestrictedArea'\nimport { upgradeModalLogic } from 'lib/components/UpgradeModal/upgradeModalLogic'\nimport { OrganizationMembershipLevel, TeamMembershipLevel } from 'lib/constants'\nimport { useFeatureFlag } from 'lib/hooks/useFeatureFlag'\nimport { IconCancel } from 'lib/lemon-ui/icons'\nimport { LemonDialog } from 'lib/lemon-ui/LemonDialog'\nimport { LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { ProfilePicture } from 'lib/lemon-ui/ProfilePicture'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { humanFriendlyDetailedTime } from 'lib/utils'\nimport {\n    getReasonForAccessLevelChangeProhibition,\n    membershipLevelToName,\n    teamMembershipLevelIntegers,\n} from 'lib/utils/permissioning'\nimport { organizationLogic } from 'scenes/organizationLogic'\nimport { isAuthenticatedTeam, teamLogic } from 'scenes/teamLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { AccessControlObject } from '~/layout/navigation-3000/sidepanel/panels/access_control/AccessControlObject'\nimport { AvailableFeature, FusedTeamMemberType } from '~/types'\n\nimport { AddMembersModalWithButton } from './AddMembersModal'\nimport { MINIMUM_IMPLICIT_ACCESS_LEVEL, teamMembersLogic } from './teamMembersLogic'\n\nfunction LevelComponent(member: FusedTeamMemberType): JSX.Element | null {\n    const { user } = useValues(userLogic)\n    const { currentTeam } = useValues(teamLogic)\n    const { changeUserAccessLevel } = useActions(teamMembersLogic)\n\n    const myMembershipLevel = isAuthenticatedTeam(currentTeam) ? currentTeam.effective_membership_level : null\n\n    if (!user) {\n        return null\n    }\n\n    const isImplicit = member.organization_level >= OrganizationMembershipLevel.Admin\n    const levelName = membershipLevelToName.get(member.level) ?? `unknown (${member.level})`\n\n    const allowedLevels = teamMembershipLevelIntegers.filter(\n        (listLevel) => !getReasonForAccessLevelChangeProhibition(myMembershipLevel, user, member, listLevel)\n    )\n\n    const possibleOptions = member.explicit_team_level\n        ? allowedLevels.concat([member.explicit_team_level])\n        : allowedLevels\n\n    const disallowedReason = isImplicit\n        ? `This user is a member of the project implicitly due to being an organization ${levelName}.`\n        : getReasonForAccessLevelChangeProhibition(myMembershipLevel, user, member, allowedLevels)\n\n    return disallowedReason ? (\n        <Tooltip title={disallowedReason}>\n            <LemonSnack className=\"capitalize\">\n                {member.level === OrganizationMembershipLevel.Owner && <IconCrown className=\"mr-2\" />}\n                {levelName}\n            </LemonSnack>\n        </Tooltip>\n    ) : (\n        <LemonSelect\n            dropdownMatchSelectWidth={false}\n            onChange={(listLevel) => {\n                if (listLevel !== null) {\n                    changeUserAccessLevel(member.user, listLevel)\n                }\n            }}\n            options={possibleOptions.map(\n                (listLevel) =>\n                    ({\n                        value: listLevel,\n                        disabled: listLevel === member.explicit_team_level,\n                        label:\n                            listLevel > member.level\n                                ? membershipLevelToName.get(listLevel)\n                                : membershipLevelToName.get(listLevel),\n                    } as LemonSelectOption<TeamMembershipLevel>)\n            )}\n            value={member.explicit_team_level}\n        />\n    )\n}\n\nfunction ActionsComponent(member: FusedTeamMemberType): JSX.Element | null {\n    const { user } = useValues(userLogic)\n    const { currentTeam } = useValues(teamLogic)\n    const { removeMember } = useActions(teamMembersLogic)\n\n    if (!user) {\n        return null\n    }\n\n    function handleClick(): void {\n        LemonDialog.open({\n            title: `${\n                member.user.uuid == user?.uuid\n                    ? 'Leave'\n                    : `Remove ${member.user.first_name} (${member.user.email}) from`\n            } project ${currentTeam?.name}?`,\n            secondaryButton: {\n                children: 'Cancel',\n            },\n            primaryButton: {\n                status: 'danger',\n                children: member.user.uuid == user?.uuid ? 'Leave' : 'Remove',\n                onClick: () => removeMember({ member }),\n            },\n        })\n    }\n\n    const allowDeletion =\n        // You can leave, but only project admins can remove others\n        ((currentTeam?.effective_membership_level &&\n            currentTeam.effective_membership_level >= OrganizationMembershipLevel.Admin) ||\n            member.user.uuid === user.uuid) &&\n        // Only members without implicit access can leave or be removed\n        member.organization_level < MINIMUM_IMPLICIT_ACCESS_LEVEL\n\n    const isSelf = member.user.uuid === user.uuid\n\n    return allowDeletion ? (\n        <LemonButton\n            status=\"danger\"\n            onClick={handleClick}\n            data-attr=\"delete-team-membership\"\n            tooltip={isSelf ? 'Leave project' : 'Remove from project'}\n        >\n            {isSelf ? <IconLeave /> : <IconCancel />}\n        </LemonButton>\n    ) : null\n}\n\nexport function TeamMembers(): JSX.Element | null {\n    const { user } = useValues(userLogic)\n    const { allMembers, allMembersLoading } = useValues(teamMembersLogic)\n    const restrictionReason = useRestrictedArea({\n        minimumAccessLevel: OrganizationMembershipLevel.Admin,\n        scope: RestrictionScope.Project,\n    })\n\n    if (!user) {\n        return null\n    }\n\n    const columns: LemonTableColumns<FusedTeamMemberType> = [\n        {\n            key: 'user_profile_picture',\n            render: function ProfilePictureRender(_, member) {\n                return <ProfilePicture user={member.user} />\n            },\n            width: 32,\n        },\n        {\n            title: 'Name',\n            key: 'user_first_name',\n            render: (_, member) =>\n                member.user.uuid == user.uuid ? `${member.user.first_name} (you)` : member.user.first_name,\n            sorter: (a, b) => a.user.first_name.localeCompare(b.user.first_name),\n        },\n        {\n            title: 'Email',\n            key: 'user_email',\n            render: (_, member) => member.user.email,\n            sorter: (a, b) => a.user.email.localeCompare(b.user.email),\n        },\n        {\n            title: 'Level',\n            key: 'level',\n            render: function LevelRender(_, member) {\n                return LevelComponent(member)\n            },\n            sorter: (a, b) => a.level - b.level,\n        },\n        {\n            title: 'Joined\u00A0At',\n            dataIndex: 'joined_at',\n            key: 'joined_at',\n            render: (_, member) => humanFriendlyDetailedTime(member.joined_at),\n            sorter: (a, b) => a.joined_at.localeCompare(b.joined_at),\n        },\n        {\n            key: 'actions',\n            align: 'center',\n            render: function ActionsRender(_, member) {\n                return ActionsComponent(member)\n            },\n        },\n    ]\n\n    return (\n        <>\n            <h3 className=\"flex justify-between items-center mt-4\">\n                Members with Project Access\n                <AddMembersModalWithButton disabledReason={restrictionReason} />\n            </h3>\n\n            <LemonTable\n                columns={columns}\n                dataSource={allMembers}\n                loading={allMembersLoading}\n                data-attr=\"team-members-table\"\n            />\n        </>\n    )\n}\n\nexport function TeamAccessControl(): JSX.Element {\n    const { currentOrganization, currentOrganizationLoading } = useValues(organizationLogic)\n    const { currentTeam, currentTeamLoading } = useValues(teamLogic)\n    const { migrateAccessControlVersion } = useActions(organizationLogic)\n    const { migrateAccessControlVersionLoading } = useValues(organizationLogic)\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const { guardAvailableFeature } = useValues(upgradeModalLogic)\n\n    const restrictionReason = useRestrictedArea({\n        minimumAccessLevel: OrganizationMembershipLevel.Admin,\n    })\n\n    const newAccessControl = useFeatureFlag('ROLE_BASED_ACCESS_CONTROL')\n\n    // Only render the new access control if they have been migrated and have the feature flag enabled\n    if (newAccessControl && currentTeam?.access_control_version === 'v2') {\n        return <AccessControlObject resource=\"project\" resource_id={`${currentTeam?.id}`} />\n    }\n\n    return (\n        <>\n            <p>\n                {newAccessControl && (\n                    <LemonBanner\n                        className=\"mb-4\"\n                        type=\"warning\"\n                        action={{\n                            children: 'Upgrade now',\n                            onClick: () => migrateAccessControlVersion(),\n                            loading: migrateAccessControlVersionLoading,\n                        }}\n                    >\n                        You're eligible to upgrade to our new access control system. This will allow you to better\n                        manage access to your project and resources.\n                    </LemonBanner>\n                )}\n                {currentTeam?.access_control ? (\n                    <>\n                        This project is{' '}\n                        <b>\n                            <IconLock style={{ color: 'var(--warning)', marginRight: 5 }} />\n                            private\n                        </b>\n                        . Only members listed below are allowed to access it.\n                    </>\n                ) : (\n                    <>\n                        This project is{' '}\n                        <b>\n                            <IconUnlock style={{ marginRight: 5 }} />\n                            open\n                        </b>\n                        . Any member of the organization can access it. To enable granular access control, make it\n                        private.\n                    </>\n                )}\n            </p>\n            <LemonSwitch\n                onChange={(checked) => {\n                    // Let them uncheck it if it's already checked, but don't let them check it if they don't have the feature\n                    checked\n                        ? guardAvailableFeature(AvailableFeature.ADVANCED_PERMISSIONS, () =>\n                              updateCurrentTeam({ access_control: checked })\n                          )\n                        : updateCurrentTeam({ access_control: checked })\n                }}\n                checked={!!currentTeam?.access_control}\n                disabledReason={\n                    !currentOrganization\n                        ? 'Organization not loaded'\n                        : !currentTeam\n                        ? 'Project not loaded'\n                        : currentOrganizationLoading\n                        ? 'Loading organization\u2026'\n                        : currentTeamLoading\n                        ? 'Loading project\u2026'\n                        : restrictionReason\n                }\n                bordered\n                label=\"Make project private\"\n            />\n\n            {currentTeam?.access_control && <TeamMembers />}\n        </>\n    )\n}\n", "import { IconTrash } from '@posthog/icons'\nimport {\n    LemonBanner,\n    LemonButton,\n    LemonDialog,\n    LemonInputSelect,\n    LemonModal,\n    LemonSelect,\n    LemonSelectProps,\n    LemonTable,\n    LemonTag,\n    Tooltip,\n} from '@posthog/lemon-ui'\nimport { BindLogic, useActions, useAsyncActions, useValues } from 'kea'\nimport { PayGateMini } from 'lib/components/PayGateMini/PayGateMini'\nimport { upgradeModalLogic } from 'lib/components/UpgradeModal/upgradeModalLogic'\nimport { UserSelectItem } from 'lib/components/UserSelectItem'\nimport { LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { LemonTableLink } from 'lib/lemon-ui/LemonTable/LemonTableLink'\nimport { ProfileBubbles, ProfilePicture } from 'lib/lemon-ui/ProfilePicture'\nimport { capitalizeFirstLetter } from 'lib/utils'\nimport { useEffect, useState } from 'react'\nimport { urls } from 'scenes/urls'\nimport { userLogic } from 'scenes/userLogic'\n\nimport {\n    AccessControlType,\n    AccessControlTypeMember,\n    AccessControlTypeRole,\n    AvailableFeature,\n    OrganizationMemberType,\n} from '~/types'\n\nimport { accessControlLogic, AccessControlLogicProps } from './accessControlLogic'\n\nexport function AccessControlObject(props: AccessControlLogicProps): JSX.Element | null {\n    const { canEditAccessControls, humanReadableResource } = useValues(accessControlLogic(props))\n\n    const suffix = `this ${humanReadableResource}`\n\n    return (\n        <BindLogic logic={accessControlLogic} props={props}>\n            <div className=\"space-y-6\">\n                {canEditAccessControls === false ? (\n                    <LemonBanner type=\"warning\">\n                        <b>Permission required</b>\n                        <br />\n                        You don't have permission to edit access controls for {suffix}. You must be the{' '}\n                        <i>creator of it</i>, a <i>Project admin</i>, or an <i>Organization admin</i>.\n                    </LemonBanner>\n                ) : null}\n\n                <div className=\"space-y-2\">\n                    <h3>Default access to {suffix}</h3>\n                    <AccessControlObjectDefaults />\n                </div>\n\n                <PayGateMini feature={AvailableFeature.ADVANCED_PERMISSIONS} className=\"space-y-6\">\n                    <AccessControlObjectUsers />\n\n                    {/* Put this inside of Advanced Permissions so two aren't shown at once */}\n                    <PayGateMini feature={AvailableFeature.ROLE_BASED_ACCESS}>\n                        <AccessControlObjectRoles />\n                    </PayGateMini>\n                </PayGateMini>\n            </div>\n        </BindLogic>\n    )\n}\n\nfunction AccessControlObjectDefaults(): JSX.Element | null {\n    const { accessControlDefault, accessControlDefaultOptions, accessControlsLoading, canEditAccessControls } =\n        useValues(accessControlLogic)\n    const { updateAccessControlDefault } = useActions(accessControlLogic)\n    const { guardAvailableFeature } = useValues(upgradeModalLogic)\n\n    return (\n        <LemonSelect\n            placeholder=\"Loading...\"\n            value={accessControlDefault?.access_level ?? undefined}\n            onChange={(newValue) => {\n                guardAvailableFeature(AvailableFeature.ADVANCED_PERMISSIONS, () => {\n                    updateAccessControlDefault(newValue)\n                })\n            }}\n            disabledReason={\n                accessControlsLoading ? 'Loading\u2026' : !canEditAccessControls ? 'You cannot edit this' : undefined\n            }\n            dropdownMatchSelectWidth={false}\n            options={accessControlDefaultOptions}\n        />\n    )\n}\n\nfunction AccessControlObjectUsers(): JSX.Element | null {\n    const { user } = useValues(userLogic)\n    const {\n        membersById,\n        addableMembers,\n        accessControlMembers,\n        accessControlsLoading,\n        availableLevels,\n        canEditAccessControls,\n    } = useValues(accessControlLogic)\n    const { updateAccessControlMembers } = useAsyncActions(accessControlLogic)\n    const { guardAvailableFeature } = useValues(upgradeModalLogic)\n\n    const [modelOpen, setModelOpen] = useState(false)\n\n    if (!user) {\n        return null\n    }\n\n    const member = (ac: AccessControlTypeMember): OrganizationMemberType => {\n        return membersById[ac.organization_member]\n    }\n\n    // TODO: WHAT A MESS - Fix this to do the index mapping beforehand...\n    const columns: LemonTableColumns<AccessControlTypeMember> = [\n        {\n            key: 'user',\n            title: 'User',\n            render: (_, ac) => (\n                <div className=\"flex items-center gap-2\">\n                    <ProfilePicture user={member(ac)?.user} />\n                    <div>\n                        <p className=\"font-medium mb-0\">\n                            {member(ac)?.user.uuid == user.uuid\n                                ? `${member(ac)?.user.first_name} (you)`\n                                : member(ac)?.user.first_name}\n                        </p>\n                        <p className=\"text-secondary mb-0\">{member(ac)?.user.email}</p>\n                    </div>\n                </div>\n            ),\n            sorter: (a, b) => member(a)?.user.first_name.localeCompare(member(b)?.user.first_name),\n        },\n        {\n            key: 'level',\n            title: 'Level',\n            width: 0,\n            render: function LevelRender(_, { access_level, organization_member, resource }) {\n                return resource === 'organization' ? (\n                    <Tooltip title=\"Organization owners and admins have access to all resources in the organization\">\n                        <LemonTag type=\"muted\">Organization admin</LemonTag>\n                    </Tooltip>\n                ) : (\n                    <div className=\"my-1\">\n                        <SimplLevelComponent\n                            size=\"small\"\n                            level={access_level}\n                            levels={availableLevels}\n                            onChange={(level) =>\n                                void updateAccessControlMembers([{ member: organization_member, level }])\n                            }\n                        />\n                    </div>\n                )\n            },\n        },\n        {\n            key: 'remove',\n            width: 0,\n            render: (_, { organization_member, resource }) => {\n                return resource === 'organization' ? null : (\n                    <RemoveAccessButton\n                        subject=\"member\"\n                        onConfirm={() =>\n                            void updateAccessControlMembers([{ member: organization_member, level: null }])\n                        }\n                    />\n                )\n            },\n        },\n    ]\n\n    return (\n        <>\n            <div className=\"space-y-2\">\n                <div className=\"flex gap-2 items-center justify-between\">\n                    <h3 className=\"mb-0\">Members</h3>\n                    <LemonButton\n                        type=\"primary\"\n                        onClick={() => setModelOpen(true)}\n                        disabledReason={!canEditAccessControls ? 'You cannot edit this' : undefined}\n                    >\n                        Add\n                    </LemonButton>\n                </div>\n\n                <LemonTable columns={columns} dataSource={accessControlMembers} loading={accessControlsLoading} />\n            </div>\n\n            <AddItemsControlsModal\n                modelOpen={modelOpen}\n                setModelOpen={setModelOpen}\n                placeholder=\"Search for team members to add\u2026\"\n                onAdd={async (newValues, level) => {\n                    if (guardAvailableFeature(AvailableFeature.ADVANCED_PERMISSIONS)) {\n                        await updateAccessControlMembers(newValues.map((member) => ({ member, level })))\n                        setModelOpen(false)\n                    }\n                }}\n                options={addableMembers.map((member) => ({\n                    key: member.id,\n                    label: `${member.user.first_name} ${member.user.email}`,\n                    labelComponent: <UserSelectItem user={member.user} />,\n                }))}\n            />\n        </>\n    )\n}\n\nfunction AccessControlObjectRoles(): JSX.Element | null {\n    const {\n        accessControlRoles,\n        accessControlsLoading,\n        addableRoles,\n        rolesById,\n        availableLevels,\n        canEditAccessControls,\n    } = useValues(accessControlLogic)\n    const { updateAccessControlRoles } = useAsyncActions(accessControlLogic)\n    const { guardAvailableFeature } = useValues(upgradeModalLogic)\n\n    const [modelOpen, setModelOpen] = useState(false)\n\n    const columns: LemonTableColumns<AccessControlTypeRole> = [\n        {\n            title: 'Role',\n            key: 'role',\n            width: 0,\n            render: (_, { role }) => (\n                <span className=\"whitespace-nowrap\">\n                    <LemonTableLink\n                        to={urls.settings('organization-roles') + `#role=${role}`}\n                        title={rolesById[role]?.name}\n                    />\n                </span>\n            ),\n        },\n        {\n            title: 'Members',\n            key: 'members',\n            render: (_, { role }) => {\n                return (\n                    <ProfileBubbles\n                        people={\n                            rolesById[role]?.members?.map((member) => ({\n                                email: member.user.email,\n                                name: member.user.first_name,\n                                title: `${member.user.first_name} <${member.user.email}>`,\n                            })) ?? []\n                        }\n                    />\n                )\n            },\n        },\n        {\n            title: 'Level',\n            key: 'level',\n            width: 0,\n            render: (_, { access_level, role }) => {\n                return (\n                    <div className=\"my-1\">\n                        <SimplLevelComponent\n                            size=\"small\"\n                            level={access_level}\n                            levels={availableLevels}\n                            onChange={(level) => void updateAccessControlRoles([{ role, level }])}\n                        />\n                    </div>\n                )\n            },\n        },\n        {\n            key: 'remove',\n            width: 0,\n            render: (_, { role }) => {\n                return (\n                    <RemoveAccessButton\n                        subject=\"role\"\n                        onConfirm={() => void updateAccessControlRoles([{ role, level: null }])}\n                    />\n                )\n            },\n        },\n    ]\n\n    return (\n        <>\n            <div className=\"space-y-2\">\n                <div className=\"flex gap-2 items-center justify-between\">\n                    <h3 className=\"mb-0\">Roles</h3>\n                    <LemonButton\n                        type=\"primary\"\n                        onClick={() => setModelOpen(true)}\n                        disabledReason={!canEditAccessControls ? 'You cannot edit this' : undefined}\n                    >\n                        Add\n                    </LemonButton>\n                </div>\n\n                <LemonTable columns={columns} dataSource={accessControlRoles} loading={accessControlsLoading} />\n            </div>\n\n            <AddItemsControlsModal\n                modelOpen={modelOpen}\n                setModelOpen={setModelOpen}\n                placeholder=\"Search for roles to add\u2026\"\n                onAdd={async (newValues, level) => {\n                    if (guardAvailableFeature(AvailableFeature.ADVANCED_PERMISSIONS)) {\n                        await updateAccessControlRoles(newValues.map((role) => ({ role, level })))\n                        setModelOpen(false)\n                    }\n                }}\n                options={addableRoles.map((role) => ({\n                    key: role.id,\n                    label: role.name,\n                }))}\n            />\n        </>\n    )\n}\n\nfunction SimplLevelComponent(props: {\n    size?: LemonSelectProps<any>['size']\n    level: AccessControlType['access_level'] | null\n    levels: AccessControlType['access_level'][]\n    onChange: (newValue: AccessControlType['access_level']) => void\n}): JSX.Element | null {\n    const { canEditAccessControls } = useValues(accessControlLogic)\n\n    return (\n        <LemonSelect\n            size={props.size}\n            placeholder=\"Select level...\"\n            value={props.level}\n            onChange={(newValue) => props.onChange(newValue)}\n            disabledReason={!canEditAccessControls ? 'You cannot edit this' : undefined}\n            options={props.levels.map((level) => ({\n                value: level,\n                label: capitalizeFirstLetter(level ?? ''),\n            }))}\n        />\n    )\n}\n\nfunction RemoveAccessButton({\n    onConfirm,\n    subject,\n}: {\n    onConfirm: () => void\n    subject: 'member' | 'role'\n}): JSX.Element {\n    const { canEditAccessControls } = useValues(accessControlLogic)\n\n    return (\n        <LemonButton\n            icon={<IconTrash />}\n            size=\"small\"\n            disabledReason={!canEditAccessControls ? 'You cannot edit this' : undefined}\n            onClick={() =>\n                LemonDialog.open({\n                    title: 'Remove access',\n                    content: `Are you sure you want to remove this ${subject}'s explicit access?`,\n                    primaryButton: {\n                        children: 'Remove',\n                        status: 'danger',\n                        onClick: () => onConfirm(),\n                    },\n                })\n            }\n        />\n    )\n}\n\nfunction AddItemsControlsModal(props: {\n    modelOpen: boolean\n    setModelOpen: (open: boolean) => void\n    placeholder: string\n    onAdd: (newValues: string[], level: AccessControlType['access_level']) => Promise<void>\n    options: {\n        key: string\n        label: string\n    }[]\n}): JSX.Element | null {\n    const { availableLevels, canEditAccessControls } = useValues(accessControlLogic)\n    // TODO: Move this into a form logic\n    const [items, setItems] = useState<string[]>([])\n    const [level, setLevel] = useState<AccessControlType['access_level']>(availableLevels[0] ?? null)\n\n    useEffect(() => {\n        setLevel(availableLevels[0] ?? null)\n    }, [availableLevels])\n\n    const onSubmit =\n        items.length && level\n            ? (): void =>\n                  void props.onAdd(items, level).then(() => {\n                      setItems([])\n                      setLevel(availableLevels[0] ?? null)\n                  })\n            : undefined\n\n    return (\n        <LemonModal\n            isOpen={props.modelOpen || false}\n            onClose={() => props.setModelOpen(false)}\n            title=\"Add access\"\n            maxWidth=\"30rem\"\n            description=\"Allow other users or roles to access this resource\"\n            footer={\n                <div className=\"flex items-center justify-end gap-2\">\n                    <LemonButton type=\"secondary\" onClick={() => props.setModelOpen(false)}>\n                        Cancel\n                    </LemonButton>\n                    <LemonButton\n                        type=\"primary\"\n                        onClick={onSubmit}\n                        disabledReason={\n                            !canEditAccessControls\n                                ? 'You cannot edit this'\n                                : !onSubmit\n                                ? 'Please choose what you want to add and at what level'\n                                : undefined\n                        }\n                    >\n                        Add\n                    </LemonButton>\n                </div>\n            }\n        >\n            <div className=\"flex gap-2 items-center w-full\">\n                <div className=\"min-w-[16rem] w-full\">\n                    <LemonInputSelect\n                        placeholder={props.placeholder}\n                        value={items}\n                        onChange={(newValues: string[]) => setItems(newValues)}\n                        mode=\"multiple\"\n                        options={props.options}\n                        disabled={!canEditAccessControls}\n                    />\n                </div>\n                <SimplLevelComponent levels={availableLevels} level={level} onChange={setLevel} />\n            </div>\n        </LemonModal>\n    )\n}\n", "import { LemonSelectOption } from '@posthog/lemon-ui'\nimport { actions, afterMount, connect, kea, key, listeners, path, props, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { upgradeModalLogic } from 'lib/components/UpgradeModal/upgradeModalLogic'\nimport { OrganizationMembershipLevel } from 'lib/constants'\nimport { toSentenceCase } from 'lib/utils'\nimport posthog from 'posthog-js'\nimport { membersLogic } from 'scenes/organization/membersLogic'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport {\n    AccessControlResourceType,\n    AccessControlResponseType,\n    AccessControlType,\n    AccessControlTypeMember,\n    AccessControlTypeProject,\n    AccessControlTypeRole,\n    AccessControlUpdateType,\n    APIScopeObject,\n    OrganizationMemberType,\n    RoleType,\n} from '~/types'\n\nimport type { accessControlLogicType } from './accessControlLogicType'\nimport { roleBasedAccessControlLogic } from './roleBasedAccessControlLogic'\n\nexport type AccessControlLogicProps = {\n    resource: APIScopeObject\n    resource_id: string\n}\n\nexport const accessControlLogic = kea<accessControlLogicType>([\n    props({} as AccessControlLogicProps),\n    key((props) => `${props.resource}-${props.resource_id}`),\n    path((key) => ['scenes', 'accessControl', 'accessControlLogic', key]),\n    connect({\n        values: [\n            membersLogic,\n            ['sortedMembers'],\n            teamLogic,\n            ['currentTeam'],\n            roleBasedAccessControlLogic,\n            ['roles'],\n            upgradeModalLogic,\n            ['guardAvailableFeature'],\n        ],\n        actions: [membersLogic, ['ensureAllMembersLoaded']],\n    }),\n    actions({\n        updateAccessControl: (\n            accessControl: Pick<AccessControlType, 'access_level' | 'organization_member' | 'role'>\n        ) => ({ accessControl }),\n        updateAccessControlDefault: (level: AccessControlType['access_level']) => ({\n            level,\n        }),\n        updateAccessControlRoles: (\n            accessControls: {\n                role: RoleType['id']\n                level: AccessControlType['access_level']\n            }[]\n        ) => ({ accessControls }),\n        updateAccessControlMembers: (\n            accessControls: {\n                member: OrganizationMemberType['id']\n                level: AccessControlType['access_level']\n            }[]\n        ) => ({ accessControls }),\n    }),\n    loaders(({ values }) => ({\n        accessControls: [\n            null as AccessControlResponseType | null,\n            {\n                loadAccessControls: async () => {\n                    try {\n                        const response = await api.get<AccessControlResponseType>(values.endpoint)\n                        return response\n                    } catch (error) {\n                        // Return empty access controls\n                        return {\n                            access_controls: [],\n                            available_access_levels: ['none', 'viewer', 'editor'],\n                            user_access_level: 'none',\n                            default_access_level: 'none',\n                            user_can_edit_access_levels: false,\n                        }\n                    }\n                },\n\n                updateAccessControlDefault: async ({ level }) => {\n                    await api.put<AccessControlType, AccessControlUpdateType>(values.endpoint, {\n                        access_level: level,\n                    })\n\n                    posthog.capture('access control default access level changed', {\n                        resource: values.resource,\n                        access_level: level,\n                        old_access_level: values.accessControlDefault?.access_level,\n                    })\n\n                    return values.accessControls\n                },\n\n                updateAccessControlRoles: async ({ accessControls }) => {\n                    for (const { role, level } of accessControls) {\n                        await api.put<AccessControlType, AccessControlUpdateType>(values.endpoint, {\n                            role: role,\n                            access_level: level,\n                        })\n\n                        const oldAccessControl = values.accessControlRoles.find((ac) => ac.role === role)\n                        posthog.capture('access control role access level changed', {\n                            resource: values.resource,\n                            action: oldAccessControl ? (level === null ? 'removed' : 'changed') : 'added',\n                            role: role,\n                            access_level: level,\n                            old_access_level: oldAccessControl?.access_level,\n                        })\n                    }\n\n                    return values.accessControls\n                },\n\n                updateAccessControlMembers: async ({ accessControls }) => {\n                    for (const { member, level } of accessControls) {\n                        await api.put<AccessControlType, AccessControlUpdateType>(values.endpoint, {\n                            organization_member: member,\n                            access_level: level,\n                        })\n\n                        const oldAccessControl = values.accessControlMembers.find(\n                            (ac) => ac.organization_member === member\n                        )\n                        posthog.capture('access control member access level changed', {\n                            resource: values.resource,\n                            action: oldAccessControl ? (level === null ? 'removed' : 'changed') : 'added',\n                            member: member,\n                            access_level: level,\n                            old_access_level: oldAccessControl?.access_level,\n                        })\n                    }\n\n                    return values.accessControls\n                },\n            },\n        ],\n    })),\n    listeners(({ actions }) => ({\n        updateAccessControlDefaultSuccess: () => actions.loadAccessControls(),\n        updateAccessControlRolesSuccess: () => actions.loadAccessControls(),\n        updateAccessControlMembersSuccess: () => actions.loadAccessControls(),\n    })),\n    selectors({\n        resource: [\n            () => [(_, props) => props],\n            (props): AccessControlResourceType => {\n                return props.resource as AccessControlResourceType\n            },\n        ],\n\n        endpoint: [\n            () => [(_, props) => props],\n            (props): string => {\n                // TODO: This is far from perfect... but it's a start\n                if (props.resource === 'project') {\n                    return `api/projects/@current/access_controls`\n                }\n                return `api/projects/@current/${props.resource}s/${props.resource_id}/access_controls`\n            },\n        ],\n\n        humanReadableResource: [\n            () => [(_, props) => props],\n            (props): string => {\n                return props.resource.replace(/_/g, ' ')\n            },\n        ],\n\n        availableLevelsWithNone: [\n            (s) => [s.accessControls],\n            (accessControls): string[] => {\n                return accessControls?.available_access_levels ?? []\n            },\n        ],\n\n        availableLevels: [\n            (s) => [s.availableLevelsWithNone],\n            (availableLevelsWithNone): string[] => {\n                return availableLevelsWithNone.filter((level) => level !== 'none')\n            },\n        ],\n\n        canEditAccessControls: [\n            (s) => [s.accessControls],\n            (accessControls): boolean | null => {\n                return accessControls?.user_can_edit_access_levels ?? null\n            },\n        ],\n\n        accessControlDefaultLevel: [\n            (s) => [s.accessControls],\n            (accessControls): string | null => {\n                return accessControls?.default_access_level ?? null\n            },\n        ],\n\n        accessControlDefaultOptions: [\n            (s) => [s.availableLevelsWithNone, (_, props) => props.resource],\n            (availableLevelsWithNone): LemonSelectOption<string>[] => {\n                const options = availableLevelsWithNone.map((level) => ({\n                    value: level,\n                    // TODO: Correct \"a\" and \"an\"\n                    label: level === 'none' ? 'No access' : toSentenceCase(level),\n                }))\n\n                return options\n            },\n        ],\n\n        accessControlDefault: [\n            (s) => [s.accessControls, s.accessControlDefaultLevel],\n            (accessControls, accessControlDefaultLevel): AccessControlTypeProject => {\n                const found = accessControls?.access_controls?.find(\n                    (accessControl) => !accessControl.organization_member && !accessControl.role\n                ) as AccessControlTypeProject\n                return (\n                    found ?? {\n                        access_level: accessControlDefaultLevel,\n                    }\n                )\n            },\n        ],\n\n        organizationAdmins: [\n            (s) => [s.sortedMembers],\n            (members): OrganizationMemberType[] => {\n                return members?.filter((member) => member.level >= OrganizationMembershipLevel.Admin) ?? []\n            },\n        ],\n\n        organizationAdminsAsAccessControlMembers: [\n            (s) => [s.organizationAdmins],\n            (organizationAdmins): AccessControlTypeMember[] => {\n                return organizationAdmins.map((admin) => ({\n                    organization_member: admin.id,\n                    access_level: 'admin',\n                    created_by: null,\n                    created_at: new Date().toISOString(),\n                    updated_at: new Date().toISOString(),\n                    resource: 'organization',\n                }))\n            },\n        ],\n\n        accessControlMembers: [\n            (s) => [s.accessControls, s.organizationAdminsAsAccessControlMembers],\n            (accessControls, organizationAdminsAsAccessControlMembers): AccessControlTypeMember[] => {\n                const members = (accessControls?.access_controls || [])\n                    .filter((accessControl) => !!accessControl.organization_member)\n                    .filter(\n                        (accessControl) =>\n                            !organizationAdminsAsAccessControlMembers.some(\n                                (admin) => admin.organization_member === accessControl.organization_member\n                            )\n                    ) as AccessControlTypeMember[]\n                return organizationAdminsAsAccessControlMembers.concat(members)\n            },\n        ],\n\n        accessControlRoles: [\n            (s) => [s.accessControls],\n            (accessControls): AccessControlTypeRole[] => {\n                return (accessControls?.access_controls || []).filter(\n                    (accessControl) => !!accessControl.role\n                ) as AccessControlTypeRole[]\n            },\n        ],\n\n        rolesById: [\n            (s) => [s.roles],\n            (roles): Record<string, RoleType> => {\n                return Object.fromEntries((roles || []).map((role) => [role.id, role]))\n            },\n        ],\n\n        addableRoles: [\n            (s) => [s.roles, s.accessControlRoles],\n            (roles, accessControlRoles): RoleType[] => {\n                return roles ? roles.filter((role) => !accessControlRoles.find((ac) => ac.role === role.id)) : []\n            },\n        ],\n\n        membersById: [\n            (s) => [s.sortedMembers],\n            (members): Record<string, OrganizationMemberType> => {\n                return Object.fromEntries((members || []).map((member) => [member.id, member]))\n            },\n        ],\n\n        addableMembers: [\n            (s) => [s.sortedMembers, s.accessControlMembers, s.organizationAdmins],\n            (members, accessControlMembers, organizationAdmins): any[] => {\n                return members\n                    ? members.filter(\n                          (member) =>\n                              !accessControlMembers.find((ac) => ac.organization_member === member.id) &&\n                              !organizationAdmins.find((admin) => admin.id === member.id)\n                      )\n                    : []\n            },\n        ],\n    }),\n    afterMount(({ actions }) => {\n        actions.loadAccessControls()\n        actions.ensureAllMembersLoaded()\n    }),\n])\n", "import { lemonToast } from '@posthog/lemon-ui'\nimport { actions, afterMount, connect, kea, listeners, path, reducers, selectors } from 'kea'\nimport { forms } from 'kea-forms'\nimport { loaders } from 'kea-loaders'\nimport { actionToUrl, router } from 'kea-router'\nimport api from 'lib/api'\nimport { membersLogic } from 'scenes/organization/membersLogic'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nimport {\n    AccessControlResponseType,\n    AccessControlType,\n    AccessControlTypeRole,\n    AccessControlUpdateType,\n    APIScopeObject,\n    AvailableFeature,\n    RoleType,\n} from '~/types'\n\nimport type { roleBasedAccessControlLogicType } from './roleBasedAccessControlLogicType'\n\nexport type RoleWithResourceAccessControls = {\n    role?: RoleType\n    accessControlByResource: Record<APIScopeObject, AccessControlTypeRole>\n}\n\nexport const roleBasedAccessControlLogic = kea<roleBasedAccessControlLogicType>([\n    path(['scenes', 'accessControl', 'roleBasedAccessControlLogic']),\n    connect({\n        values: [membersLogic, ['sortedMembers'], teamLogic, ['currentTeam'], userLogic, ['hasAvailableFeature']],\n        actions: [membersLogic, ['ensureAllMembersLoaded']],\n    }),\n    actions({\n        updateRoleBasedAccessControls: (\n            accessControls: Pick<AccessControlUpdateType, 'resource' | 'access_level' | 'role'>[]\n        ) => ({ accessControls }),\n        selectRoleId: (roleId: RoleType['id'] | null) => ({ roleId }),\n        deleteRole: (roleId: RoleType['id']) => ({ roleId }),\n        removeMemberFromRole: (role: RoleType, roleMemberId: string) => ({ role, roleMemberId }),\n        addMembersToRole: (role: RoleType, members: string[]) => ({ role, members }),\n        setEditingRoleId: (roleId: string | null) => ({ roleId }),\n    }),\n    reducers({\n        selectedRoleId: [\n            null as string | null,\n            {\n                selectRoleId: (_, { roleId }) => roleId,\n            },\n        ],\n        editingRoleId: [\n            null as string | null,\n            {\n                setEditingRoleId: (_, { roleId }) => roleId,\n            },\n        ],\n    }),\n    loaders(({ values }) => ({\n        roleBasedAccessControls: [\n            null as AccessControlResponseType | null,\n            {\n                loadRoleBasedAccessControls: async () => {\n                    const response = await api.get<AccessControlResponseType>(\n                        'api/projects/@current/global_access_controls'\n                    )\n                    return response\n                },\n\n                updateRoleBasedAccessControls: async ({ accessControls }) => {\n                    for (const control of accessControls) {\n                        await api.put<AccessControlTypeRole>('api/projects/@current/global_access_controls', {\n                            ...control,\n                        })\n                    }\n\n                    return values.roleBasedAccessControls\n                },\n            },\n        ],\n\n        roles: [\n            null as RoleType[] | null,\n            {\n                loadRoles: async () => {\n                    const response = await api.roles.list()\n                    return response?.results || []\n                },\n                addMembersToRole: async ({ role, members }) => {\n                    if (!values.roles) {\n                        return null\n                    }\n                    const newMembers = await Promise.all(\n                        members.map(async (userUuid: string) => await api.roles.members.create(role.id, userUuid))\n                    )\n\n                    role.members = [...role.members, ...newMembers]\n\n                    return [...values.roles]\n                },\n                removeMemberFromRole: async ({ role, roleMemberId }) => {\n                    if (!values.roles) {\n                        return null\n                    }\n                    await api.roles.members.delete(role.id, roleMemberId)\n                    role.members = role.members.filter((roleMember) => roleMember.id !== roleMemberId)\n                    return [...values.roles]\n                },\n                deleteRole: async ({ roleId }) => {\n                    const role = values.roles?.find((r) => r.id === roleId)\n                    if (!role) {\n                        return values.roles\n                    }\n                    await api.roles.delete(role.id)\n                    lemonToast.success(`Role \"${role.name}\" deleted`)\n                    return values.roles?.filter((r) => r.id !== role.id) || []\n                },\n            },\n        ],\n    })),\n\n    forms(({ values, actions }) => ({\n        editingRole: {\n            defaults: {\n                name: '',\n            },\n            errors: ({ name }) => {\n                return {\n                    name: !name ? 'Please choose a name for the role' : null,\n                }\n            },\n            submit: async ({ name }) => {\n                if (!values.editingRoleId) {\n                    return\n                }\n                let role: RoleType | null = null\n                if (values.editingRoleId === 'new') {\n                    role = await api.roles.create(name)\n                } else {\n                    role = await api.roles.update(values.editingRoleId, { name })\n                }\n\n                actions.loadRoles()\n                actions.setEditingRoleId(null)\n                actions.selectRoleId(role.id)\n            },\n        },\n    })),\n\n    listeners(({ actions, values }) => ({\n        updateRoleBasedAccessControlsSuccess: () => actions.loadRoleBasedAccessControls(),\n        loadRolesSuccess: () => {\n            if (router.values.hashParams.role) {\n                actions.selectRoleId(router.values.hashParams.role)\n            }\n        },\n        deleteRoleSuccess: () => {\n            actions.loadRoles()\n            actions.setEditingRoleId(null)\n            actions.selectRoleId(null)\n        },\n\n        setEditingRoleId: () => {\n            const existingRole = values.roles?.find((role) => role.id === values.editingRoleId)\n            actions.resetEditingRole({\n                name: existingRole?.name || '',\n            })\n        },\n    })),\n\n    selectors({\n        availableLevels: [\n            (s) => [s.roleBasedAccessControls],\n            (roleBasedAccessControls): string[] => {\n                return roleBasedAccessControls?.available_access_levels ?? []\n            },\n        ],\n\n        defaultAccessLevel: [\n            (s) => [s.roleBasedAccessControls],\n            (roleBasedAccessControls): string | null => {\n                return roleBasedAccessControls?.default_access_level ?? null\n            },\n        ],\n\n        defaultResourceAccessControls: [\n            (s) => [s.roleBasedAccessControls],\n            (roleBasedAccessControls): RoleWithResourceAccessControls => {\n                const accessControls = roleBasedAccessControls?.access_controls ?? []\n\n                // Find all acs without a roles (they are the default ones)\n                const accessControlByResource = accessControls\n                    .filter((control) => !control.role)\n                    .reduce(\n                        (acc, control) => ({\n                            ...acc,\n                            [control.resource]: control,\n                        }),\n                        {} as Record<APIScopeObject, AccessControlTypeRole>\n                    )\n\n                return { accessControlByResource }\n            },\n        ],\n\n        rolesWithResourceAccessControls: [\n            (s) => [s.roles, s.roleBasedAccessControls, s.defaultResourceAccessControls],\n            (roles, roleBasedAccessControls, defaultResourceAccessControls): RoleWithResourceAccessControls[] => {\n                if (!roles) {\n                    return []\n                }\n\n                const accessControls = roleBasedAccessControls?.access_controls ?? []\n\n                return [\n                    defaultResourceAccessControls,\n                    ...roles.map((role) => {\n                        const accessControlByResource = accessControls\n                            .filter((control) => control.role === role.id)\n                            .reduce(\n                                (acc, control) => ({\n                                    ...acc,\n                                    [control.resource]: control,\n                                }),\n                                {} as Record<APIScopeObject, AccessControlTypeRole>\n                            )\n\n                        return { role, accessControlByResource }\n                    }),\n                ]\n            },\n        ],\n\n        resources: [\n            () => [],\n            (): AccessControlType['resource'][] => {\n                // TODO: Sync this as an enum\n                return ['feature_flag', 'dashboard', 'insight', 'notebook']\n            },\n        ],\n\n        canEditRoleBasedAccessControls: [\n            (s) => [s.roleBasedAccessControls],\n            (roleBasedAccessControls): boolean | null => {\n                return roleBasedAccessControls?.user_can_edit_access_levels ?? null\n            },\n        ],\n    }),\n    afterMount(({ actions, values }) => {\n        if (values.hasAvailableFeature(AvailableFeature.ROLE_BASED_ACCESS)) {\n            actions.loadRoles()\n            actions.loadRoleBasedAccessControls()\n            actions.ensureAllMembersLoaded()\n        }\n    }),\n\n    actionToUrl(({ values }) => ({\n        selectRoleId: () => {\n            const { currentLocation } = router.values\n            return [\n                currentLocation.pathname,\n                currentLocation.searchParams,\n                {\n                    ...currentLocation.hashParams,\n                    role: values.selectedRoleId ?? undefined,\n                },\n            ]\n        },\n    })),\n])\n", "import { IconPlus } from '@posthog/icons'\nimport { LemonButton, LemonModal, LemonSelect, LemonSelectOption } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport { upgradeModalLogic } from 'lib/components/UpgradeModal/upgradeModalLogic'\nimport { usersLemonSelectOptions } from 'lib/components/UserSelectItem'\nimport { TeamMembershipLevel } from 'lib/constants'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { LemonInputSelect } from 'lib/lemon-ui/LemonInputSelect/LemonInputSelect'\nimport { membershipLevelToName, teamMembershipLevelIntegers } from 'lib/utils/permissioning'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { AvailableFeature } from '~/types'\n\nimport { teamMembersLogic } from './teamMembersLogic'\n\nexport function AddMembersModalWithButton({ disabledReason }: { disabledReason: string | null }): JSX.Element {\n    const { addableMembers, allMembersLoading, isAddMembersModalOpen } = useValues(teamMembersLogic)\n    const { openAddMembersModal, closeAddMembersModal } = useActions(teamMembersLogic)\n    const { currentTeam } = useValues(teamLogic)\n    const { guardAvailableFeature } = useValues(upgradeModalLogic)\n    const { hasAvailableFeature } = useValues(userLogic)\n\n    return (\n        <>\n            <LemonButton\n                type=\"primary\"\n                data-attr=\"add-project-members-button\"\n                onClick={() =>\n                    guardAvailableFeature(AvailableFeature.ADVANCED_PERMISSIONS, () => openAddMembersModal(), {\n                        isGrandfathered:\n                            !hasAvailableFeature(AvailableFeature.ADVANCED_PERMISSIONS) && currentTeam?.access_control,\n                    })\n                }\n                icon={<IconPlus />}\n                disabledReason={disabledReason}\n            >\n                Add members to project\n            </LemonButton>\n            <LemonModal title=\"\" onClose={closeAddMembersModal} isOpen={isAddMembersModalOpen} simple>\n                <Form logic={teamMembersLogic} formKey=\"addMembers\" enableFormOnSubmit>\n                    <LemonModal.Header>\n                        <h3>{`Adding members${currentTeam?.name ? ` to project ${currentTeam.name}` : ''}`}</h3>\n                    </LemonModal.Header>\n                    <LemonModal.Content className=\"space-y-2\">\n                        <LemonField name=\"userUuids\">\n                            <LemonInputSelect\n                                mode=\"multiple\"\n                                placeholder=\"Organization members\"\n                                loading={allMembersLoading}\n                                options={usersLemonSelectOptions(\n                                    addableMembers.map((x) => x.user),\n                                    'uuid'\n                                )}\n                            />\n                        </LemonField>\n                        <LemonField name=\"level\" label=\"With project-specific access level\">\n                            <LemonSelect\n                                fullWidth\n                                options={teamMembershipLevelIntegers.map(\n                                    (teamMembershipLevel) =>\n                                        ({\n                                            value: teamMembershipLevel,\n                                            label: membershipLevelToName.get(teamMembershipLevel),\n                                        } as LemonSelectOption<TeamMembershipLevel>)\n                                )}\n                            />\n                        </LemonField>\n                    </LemonModal.Content>\n                    <LemonModal.Footer>\n                        <LemonButton type=\"secondary\" onClick={closeAddMembersModal}>\n                            Cancel\n                        </LemonButton>\n                        <LemonButton type=\"primary\" data-attr=\"add-project-members-submit\" htmlType=\"submit\">\n                            Add members to project\n                        </LemonButton>\n                    </LemonModal.Footer>\n                </Form>\n            </LemonModal>\n        </>\n    )\n}\n", "import { IconTrash } from '@posthog/icons'\nimport { LemonButton, LemonInput, LemonModal } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { RestrictionScope, useRestrictedArea } from 'lib/components/RestrictedArea'\nimport { FEATURE_FLAGS, OrganizationMembershipLevel } from 'lib/constants'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { Dispatch, SetStateAction, useState } from 'react'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { TeamType } from '~/types'\n\nimport { ProjectDangerZone } from '../project/ProjectDangerZone'\n\nexport function DeleteTeamModal({\n    isOpen,\n    setIsOpen,\n}: {\n    isOpen: boolean\n    setIsOpen: Dispatch<SetStateAction<boolean>>\n}): JSX.Element {\n    const { currentTeam, teamBeingDeleted } = useValues(teamLogic)\n    const { deleteTeam } = useActions(teamLogic)\n    const [isDeletionConfirmed, setIsDeletionConfirmed] = useState(false)\n\n    const isDeletionInProgress = !!currentTeam && teamBeingDeleted?.id === currentTeam.id\n\n    return (\n        <LemonModal\n            title=\"Delete the environment and its data?\"\n            onClose={!isDeletionInProgress ? () => setIsOpen(false) : undefined}\n            footer={\n                <>\n                    <LemonButton\n                        disabledReason={isDeletionInProgress && 'Deleting...'}\n                        type=\"secondary\"\n                        onClick={() => setIsOpen(false)}\n                    >\n                        Cancel\n                    </LemonButton>\n                    <LemonButton\n                        type=\"secondary\"\n                        disabled={!isDeletionConfirmed}\n                        loading={isDeletionInProgress}\n                        data-attr=\"delete-environment-ok\"\n                        status=\"danger\"\n                        onClick={currentTeam ? () => deleteTeam(currentTeam as TeamType) : undefined}\n                    >{`Delete ${currentTeam ? currentTeam.name : 'the current environment'}`}</LemonButton>\n                </>\n            }\n            isOpen={isOpen}\n        >\n            <p>\n                Environment deletion <b>cannot be undone</b>. You will lose all data, <b>including events</b>.\n            </p>\n            <p>\n                Please type <strong>{currentTeam ? currentTeam.name : \"this environment's name\"}</strong> to confirm.\n            </p>\n            <LemonInput\n                type=\"text\"\n                onChange={(value) => {\n                    if (currentTeam) {\n                        setIsDeletionConfirmed(value.toLowerCase() === currentTeam.name.toLowerCase())\n                    }\n                }}\n            />\n        </LemonModal>\n    )\n}\n\nexport function TeamDangerZone(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n    const { featureFlags } = useValues(featureFlagLogic)\n\n    const [isModalVisible, setIsModalVisible] = useState(false)\n\n    const restrictedReason = useRestrictedArea({\n        minimumAccessLevel: OrganizationMembershipLevel.Admin,\n        scope: RestrictionScope.Project,\n    })\n\n    if (!featureFlags[FEATURE_FLAGS.ENVIRONMENTS]) {\n        return <ProjectDangerZone />\n    }\n\n    // We don't yet allow deleting individual environments, as we still use `team` fields with `on_delete=CASCADE`\n    // on many models that conceptually are project-level (such as insights or feature flags). That `on_delete=CASCADE`\n    // means currently deleting an environment would also delete resources a user wouldn't expect to disappear.\n    // TODO: Remove once point 15 (\"Denormalize models\") of https://github.com/PostHog/posthog/issues/13418#issuecomment-2180883524 is resolved\n    return <i>Deletion of individual environments is coming soon.</i>\n\n    return (\n        <>\n            <div className=\"text-danger\">\n                <div className=\"mt-4\">\n                    {!restrictedReason && (\n                        <p className=\"text-danger\">\n                            This is <b>irreversible</b>. Please be certain.\n                        </p>\n                    )}\n                    <LemonButton\n                        status=\"danger\"\n                        type=\"secondary\"\n                        onClick={() => setIsModalVisible(true)}\n                        data-attr=\"delete-environment-button\"\n                        icon={<IconTrash />}\n                        disabledReason={restrictedReason}\n                    >\n                        Delete {currentTeam?.name || 'the current environment'}\n                    </LemonButton>\n                </div>\n            </div>\n            <DeleteTeamModal isOpen={isModalVisible} setIsOpen={setIsModalVisible} />\n        </>\n    )\n}\n", "import { IconTrash } from '@posthog/icons'\nimport { LemonButton, LemonInput, LemonModal } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { RestrictionScope, useRestrictedArea } from 'lib/components/RestrictedArea'\nimport { OrganizationMembershipLevel } from 'lib/constants'\nimport { Dispatch, SetStateAction, useState } from 'react'\nimport { projectLogic } from 'scenes/projectLogic'\n\nexport function DeleteProjectModal({\n    isOpen,\n    setIsOpen,\n}: {\n    isOpen: boolean\n    setIsOpen: Dispatch<SetStateAction<boolean>>\n}): JSX.Element {\n    const { currentProject, projectBeingDeleted } = useValues(projectLogic)\n    const { deleteProject } = useActions(projectLogic)\n\n    const [isDeletionConfirmed, setIsDeletionConfirmed] = useState(false)\n    const isDeletionInProgress = !!currentProject && projectBeingDeleted?.id === currentProject.id\n\n    return (\n        <LemonModal\n            title=\"Delete the project and its data?\"\n            onClose={!isDeletionInProgress ? () => setIsOpen(false) : undefined}\n            footer={\n                <>\n                    <LemonButton\n                        disabledReason={isDeletionInProgress && 'Deleting...'}\n                        type=\"secondary\"\n                        onClick={() => setIsOpen(false)}\n                    >\n                        Cancel\n                    </LemonButton>\n                    <LemonButton\n                        type=\"secondary\"\n                        disabled={!isDeletionConfirmed}\n                        loading={isDeletionInProgress}\n                        data-attr=\"delete-project-ok\"\n                        status=\"danger\"\n                        onClick={currentProject ? () => deleteProject(currentProject) : undefined}\n                    >{`Delete ${currentProject ? currentProject.name : 'the current project'}`}</LemonButton>\n                </>\n            }\n            isOpen={isOpen}\n        >\n            <p>\n                Project deletion <b>cannot be undone</b>. You will lose all environments and their data,{' '}\n                <b>including events</b>.\n            </p>\n            <p>\n                Please type <strong>{currentProject ? currentProject.name : \"this project's name\"}</strong> to confirm.\n            </p>\n            <LemonInput\n                type=\"text\"\n                onChange={(value) => {\n                    if (currentProject) {\n                        setIsDeletionConfirmed(value.toLowerCase() === currentProject.name.toLowerCase())\n                    }\n                }}\n            />\n        </LemonModal>\n    )\n}\n\nexport function ProjectDangerZone(): JSX.Element {\n    const { currentProject } = useValues(projectLogic)\n    const [isModalVisible, setIsModalVisible] = useState(false)\n\n    const restrictedReason = useRestrictedArea({\n        minimumAccessLevel: OrganizationMembershipLevel.Admin,\n        scope: RestrictionScope.Project,\n    })\n\n    return (\n        <>\n            <div className=\"text-danger\">\n                <div className=\"mt-4\">\n                    {!restrictedReason && (\n                        <p className=\"text-danger\">\n                            This is <b>irreversible</b>. Please be certain.\n                        </p>\n                    )}\n                    <LemonButton\n                        status=\"danger\"\n                        type=\"secondary\"\n                        onClick={() => setIsModalVisible(true)}\n                        data-attr=\"delete-project-button\"\n                        icon={<IconTrash />}\n                        disabledReason={restrictedReason}\n                    >\n                        Delete {currentProject?.name || 'the current project'}\n                    </LemonButton>\n                </div>\n            </div>\n            <DeleteProjectModal isOpen={isModalVisible} setIsOpen={setIsModalVisible} />\n        </>\n    )\n}\n", "import { LemonButton, LemonDialog, LemonInput, LemonLabel, LemonSkeleton, LemonTag } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { AuthorizedUrlList } from 'lib/components/AuthorizedUrlList/AuthorizedUrlList'\nimport { AuthorizedUrlListType } from 'lib/components/AuthorizedUrlList/authorizedUrlListLogic'\nimport { CodeSnippet } from 'lib/components/CodeSnippet'\nimport { FlaggedFeature } from 'lib/components/FlaggedFeature'\nimport { JSBookmarklet } from 'lib/components/JSBookmarklet'\nimport { JSSnippet, JSSnippetV2 } from 'lib/components/JSSnippet'\nimport { getPublicSupportSnippet } from 'lib/components/Support/supportLogic'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { IconRefresh } from 'lib/lemon-ui/icons'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { capitalizeFirstLetter } from 'lib/utils'\nimport { useState } from 'react'\nimport { organizationLogic } from 'scenes/organizationLogic'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\nimport { isAuthenticatedTeam, teamLogic } from 'scenes/teamLogic'\nimport { urls } from 'scenes/urls'\n\nimport { TimezoneConfig } from './TimezoneConfig'\nimport { WeekStartConfig } from './WeekStartConfig'\n\nexport function TeamDisplayName(): JSX.Element {\n    const { currentTeam, currentTeamLoading } = useValues(teamLogic)\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const { featureFlags } = useValues(featureFlagLogic)\n\n    const [name, setName] = useState(currentTeam?.name || '')\n\n    const displayNoun = featureFlags[FEATURE_FLAGS.ENVIRONMENTS] ? 'environment' : 'project'\n\n    return (\n        <div className=\"space-y-4 max-w-160\">\n            <LemonInput value={name} onChange={setName} disabled={currentTeamLoading} />\n            <LemonButton\n                type=\"primary\"\n                onClick={() => updateCurrentTeam({ name })}\n                disabled={!name || !currentTeam || name === currentTeam.name}\n                loading={currentTeamLoading}\n            >\n                Rename {displayNoun}\n            </LemonButton>\n        </div>\n    )\n}\n\nexport function WebSnippet(): JSX.Element {\n    const { currentTeam, currentTeamLoading } = useValues(teamLogic)\n\n    return (\n        <>\n            <p>\n                PostHog's configurable web snippet allows you to (optionally) autocapture events, record user sessions,\n                and more with no extra work. Place the following snippet in your website's HTML, ideally just above the{' '}\n                <code>{'</head>'}</code> tag.\n            </p>\n            <p>\n                For more guidance, including on identifying users,{' '}\n                <Link to=\"https://posthog.com/docs/libraries/js\">see PostHog Docs</Link>.\n            </p>\n            {currentTeamLoading && !currentTeam ? (\n                <div className=\"space-y-4\">\n                    <LemonSkeleton className=\"w-1/2 h-4\" />\n                    <LemonSkeleton repeat={3} />\n                </div>\n            ) : (\n                <JSSnippet />\n            )}\n\n            <FlaggedFeature flag=\"remote-config\">\n                <h3 className=\"mt-4 flex items-center gap-2\">\n                    Web Snippet V2 <LemonTag type=\"warning\">Experimental</LemonTag>\n                </h3>\n                <p>\n                    The V2 version of the snippet is more advanced and includes your project config automatically along\n                    with the PostHog JS code. This generally leads to faster load times and fewer calls needed before\n                    the SDK is fully functional.\n                </p>\n                {currentTeamLoading && !currentTeam ? (\n                    <div className=\"space-y-4\">\n                        <LemonSkeleton className=\"w-1/2 h-4\" />\n                        <LemonSkeleton repeat={3} />\n                    </div>\n                ) : (\n                    <JSSnippetV2 />\n                )}\n            </FlaggedFeature>\n        </>\n    )\n}\n\nexport function Bookmarklet(): JSX.Element {\n    const { currentTeam } = useValues(teamLogic)\n    const { featureFlags } = useValues(featureFlagLogic)\n\n    const displayNoun = featureFlags[FEATURE_FLAGS.ENVIRONMENTS] ? 'environment' : 'project'\n\n    return (\n        <>\n            <p>Need to test PostHog on a live site without changing any code?</p>\n            <p>\n                Just drag the bookmarklet below to your bookmarks bar, open the website you want to test PostHog on and\n                click it. This will enable our tracking, on the currently loaded page only. The data will show up in\n                this {displayNoun}.\n            </p>\n            <div>{isAuthenticatedTeam(currentTeam) && <JSBookmarklet team={currentTeam} />}</div>\n        </>\n    )\n}\n\nexport function TeamVariables(): JSX.Element {\n    const { currentTeam, isTeamTokenResetAvailable } = useValues(teamLogic)\n    const { resetToken } = useActions(teamLogic)\n    const { currentOrganization } = useValues(organizationLogic)\n    const { preflight } = useValues(preflightLogic)\n    const { featureFlags } = useValues(featureFlagLogic)\n\n    const region = preflight?.region\n\n    const openDialog = (): void => {\n        LemonDialog.open({\n            title: `Reset ${displayNoun} API key?`,\n            description: 'This will invalidate the current API key and cannot be undone.',\n            primaryButton: {\n                children: 'Reset',\n                type: 'primary',\n                onClick: resetToken,\n            },\n            secondaryButton: {\n                children: 'Cancel',\n                type: 'secondary',\n            },\n        })\n    }\n\n    const displayNoun = featureFlags[FEATURE_FLAGS.ENVIRONMENTS] ? 'environment' : 'project'\n\n    return (\n        <div className=\"flex items-start gap-4 flex-wrap\">\n            <div className=\"flex-1\">\n                <h3 id=\"project-api-key\" className=\"min-w-[25rem]\">\n                    {capitalizeFirstLetter(displayNoun)} API key\n                </h3>\n                <p>\n                    You can use this write-only key in any one of{' '}\n                    <Link to=\"https://posthog.com/docs/libraries\">our libraries</Link>.\n                </p>\n                <CodeSnippet\n                    actions={\n                        isTeamTokenResetAvailable ? (\n                            <LemonButton icon={<IconRefresh />} noPadding onClick={openDialog} />\n                        ) : undefined\n                    }\n                    thing={`${displayNoun} API key`}\n                >\n                    {currentTeam?.api_token || ''}\n                </CodeSnippet>\n                <p>\n                    Write-only means it can only create new events. It can't read events or any of your other data\n                    stored with PostHog, so it's safe to use in public apps.\n                </p>\n            </div>\n            <div className=\"flex-1\">\n                <h3 id=\"project-id\" className=\"min-w-[25rem]\">\n                    {capitalizeFirstLetter(displayNoun)} ID\n                </h3>\n                <p>\n                    You can use this ID to reference your {displayNoun} in our{' '}\n                    <Link to=\"https://posthog.com/docs/api\">API</Link>.\n                </p>\n                <CodeSnippet thing={`${displayNoun} ID`}>{String(currentTeam?.id || '')}</CodeSnippet>\n            </div>\n            {region ? (\n                <div className=\"flex-1\">\n                    <h3 id=\"project-region\" className=\"min-w-[25rem]\">\n                        {capitalizeFirstLetter(displayNoun)} region\n                    </h3>\n                    <p>This is the region where your PostHog data is hosted.</p>\n                    <CodeSnippet thing={`${displayNoun} region`}>{`${region} Cloud`}</CodeSnippet>\n                </div>\n            ) : null}\n            {region && currentOrganization && currentTeam ? (\n                <div className=\"flex-1 max-w-full\">\n                    <h3 id=\"debug-info\" className=\"min-w-[25rem]\">\n                        Debug information\n                    </h3>\n                    <p>Include this snippet when creating an issue (feature request or bug report) on GitHub.</p>\n                    <CodeSnippet compact thing=\"debug info\">\n                        {getPublicSupportSnippet(region, currentOrganization, currentTeam, false)}\n                    </CodeSnippet>\n                </div>\n            ) : null}\n        </div>\n    )\n}\n\nexport function TeamTimezone(): JSX.Element {\n    return (\n        <>\n            <p>\n                These settings affect how PostHog displays, buckets, and filters time-series data. You may need to\n                refresh insights for new settings to apply.\n            </p>\n            <div className=\"space-y-2\">\n                <LemonLabel id=\"timezone\">Time zone</LemonLabel>\n                <TimezoneConfig />\n                <LemonLabel id=\"timezone\">Week starts on</LemonLabel>\n                <WeekStartConfig />\n            </div>\n        </>\n    )\n}\n\nexport function TeamToolbarURLs(): JSX.Element {\n    return (\n        <>\n            <p>\n                These are the URLs where you can launch the{' '}\n                <b>\n                    <Link to={urls.toolbarLaunch()}>Toolbar</Link>\n                </b>\n            </p>\n            <p>\n                <b>Wildcards are not allowed</b> (example: <code>https://*.example.com</code>). The URL needs to be\n                something concrete that can be launched.\n            </p>\n            <AuthorizedUrlList type={AuthorizedUrlListType.TOOLBAR_URLS} allowWildCards={false} />\n        </>\n    )\n}\n", "import { useActions } from 'kea'\nimport { IconBookmarkBorder } from 'lib/lemon-ui/icons'\nimport { apiHostOrigin } from 'lib/utils/apiHost'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\nimport { useEffect, useRef } from 'react'\n\nimport { TeamBasicType } from '~/types'\n\nexport function JSBookmarklet({ team }: { team: TeamBasicType }): JSX.Element {\n    const initCall = `posthog.init('${\n        team?.api_token\n    }',{api_host:'${apiHostOrigin()}', loaded: () => alert('PostHog is now tracking events!')})`\n    const href = `javascript:(function()%7Bif%20(window.posthog)%20%7Balert(%22Error%3A%20PostHog%20already%20is%20installed%20on%20this%20site%22)%7D%20else%20%7B!function(t%2Ce)%7Bvar%20o%2Cn%2Cp%2Cr%3Be.__SV%7C%7C(window.posthog%3De%2Ce._i%3D%5B%5D%2Ce.init%3Dfunction(i%2Cs%2Ca)%7Bfunction%20g(t%2Ce)%7Bvar%20o%3De.split(%22.%22)%3B2%3D%3Do.length%26%26(t%3Dt%5Bo%5B0%5D%5D%2Ce%3Do%5B1%5D)%2Ct%5Be%5D%3Dfunction()%7Bt.push(%5Be%5D.concat(Array.prototype.slice.call(arguments%2C0)))%7D%7D(p%3Dt.createElement(%22script%22)).type%3D%22text%2Fjavascript%22%2Cp.async%3D!0%2Cp.src%3Ds.api_host%2B%22%2Fstatic%2Farray.js%22%2C(r%3Dt.getElementsByTagName(%22script%22)%5B0%5D).parentNode.insertBefore(p%2Cr)%3Bvar%20u%3De%3Bfor(void%200!%3D%3Da%3Fu%3De%5Ba%5D%3D%5B%5D%3Aa%3D%22posthog%22%2Cu.people%3Du.people%7C%7C%5B%5D%2Cu.toString%3Dfunction(t)%7Bvar%20e%3D%22posthog%22%3Breturn%22posthog%22!%3D%3Da%26%26(e%2B%3D%22.%22%2Ba)%2Ct%7C%7C(e%2B%3D%22%20(stub)%22)%2Ce%7D%2Cu.people.toString%3Dfunction()%7Breturn%20u.toString(1)%2B%22.people%20(stub)%22%7D%2Co%3D%22capture%20identify%20alias%20people.set%20people.set_once%20set_config%20register%20register_once%20unregister%20opt_out_capturing%20has_opted_out_capturing%20opt_in_capturing%20reset%20isFeatureEnabled%20onFeatureFlags%22.split(%22%20%22)%2Cn%3D0%3Bn%3Co.length%3Bn%2B%2B)g(u%2Co%5Bn%5D)%3Be._i.push(%5Bi%2Cs%2Ca%5D)%7D%2Ce.__SV%3D1)%7D(document%2Cwindow.posthog%7C%7C%5B%5D)%3B${encodeURIComponent(\n        initCall\n    )}%7D%7D)()`\n\n    const { reportBookmarkletDragged } = useActions(eventUsageLogic)\n    const ref = useRef<HTMLAnchorElement>(null)\n\n    useEffect(() => {\n        // React cleverly stops js links from working, so we need to set the href manually\n        ref.current?.setAttribute('href', href)\n    }, [ref.current, href])\n\n    return (\n        <>\n            {/* eslint-disable-next-line react/forbid-elements */}\n            <a\n                ref={ref}\n                className=\"w-full bg-primary-alt-highlight rounded-lg justify-center p-4 flex font-bold gap-2 items-center\"\n                onDragStart={reportBookmarkletDragged}\n            >\n                <IconBookmarkBorder fontSize=\"1.5rem\" />\n                <span className=\"text-base\">PostHog Bookmarklet</span>\n            </a>\n            <p className=\"text-center text-secondary font-medium mt-2\">\n                Drag to your bookmarks. Do not click on this link. The bookmarklet only works for the current browser\n                session.\n            </p>\n        </>\n    )\n}\n", "import { useActions, useValues } from 'kea'\nimport { LemonDialog } from 'lib/lemon-ui/LemonDialog'\nimport { LemonInputSelect } from 'lib/lemon-ui/LemonInputSelect/LemonInputSelect'\nimport { LemonSkeleton } from 'lib/lemon-ui/LemonSkeleton'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\nimport { teamLogic } from 'scenes/teamLogic'\n\nconst tzLabel = (tz: string, offset: number): string =>\n    `${tz.replace(/\\//g, ' / ').replace(/_/g, ' ')} (UTC${offset === 0 ? '\u00B1' : offset > 0 ? '+' : '-'}${Math.abs(\n        Math.floor(offset)\n    )}:${(Math.abs(offset % 1) * 60).toString().padStart(2, '0')})`\n\nexport function TimezoneConfig(): JSX.Element {\n    const { preflight } = useValues(preflightLogic)\n    const { currentTeam, timezone: currentTimezone, currentTeamLoading } = useValues(teamLogic)\n    const { updateCurrentTeam } = useActions(teamLogic)\n\n    if (!preflight?.available_timezones || !currentTeam) {\n        return <LemonSkeleton className=\"w-1/2 h-4\" />\n    }\n    const options = Object.entries(preflight.available_timezones).map(([tz, offset]) => ({\n        key: tz,\n        label: tzLabel(tz, offset),\n    }))\n\n    return (\n        <div className=\"max-w-160\">\n            <LemonInputSelect\n                mode=\"single\"\n                placeholder=\"Select a time zone\"\n                loading={currentTeamLoading}\n                disabled={currentTeamLoading}\n                value={[currentTeam.timezone]}\n                popoverClassName=\"z-[1000]\"\n                onChange={([newTimezone]): void => {\n                    // This is a string for a single-mode select, but typing is poor\n                    if (!preflight?.available_timezones) {\n                        throw new Error('No timezones are available')\n                    }\n                    const currentOffset = preflight.available_timezones[currentTimezone]\n                    const newOffset = preflight.available_timezones[newTimezone]\n                    if (currentOffset === newOffset) {\n                        updateCurrentTeam({ timezone: newTimezone })\n                    } else {\n                        LemonDialog.open({\n                            title: `Change time zone to ${tzLabel(newTimezone, newOffset)}?`,\n                            description: (\n                                <p className=\"max-w-120\">\n                                    This time zone has an offset different from the current{' '}\n                                    <strong>{tzLabel(currentTimezone, currentOffset)}</strong>, so queries will need to\n                                    be recalculated. There will be a difference in date-based time ranges, and in\n                                    day/week/month buckets.\n                                </p>\n                            ),\n                            primaryButton: {\n                                children: 'Change time zone',\n                                onClick: () => updateCurrentTeam({ timezone: newTimezone }),\n                            },\n                            secondaryButton: {\n                                children: 'Cancel',\n                            },\n                        })\n                    }\n                }}\n                options={options}\n                data-attr=\"timezone-select\"\n            />\n        </div>\n    )\n}\n", "import { LemonSelect } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { LemonDialog } from 'lib/lemon-ui/LemonDialog'\nimport { teamLogic } from 'scenes/teamLogic'\n\nexport function WeekStartConfig(): JSX.Element {\n    const { currentTeam, currentTeamLoading } = useValues(teamLogic)\n    const { updateCurrentTeam } = useActions(teamLogic)\n\n    return (\n        <LemonSelect\n            value={currentTeam?.week_start_day || 0}\n            onChange={(value) => {\n                LemonDialog.open({\n                    title: `Change the first day of the week to ${value === 0 ? 'Sunday' : 'Monday'}?`,\n                    description: 'Queries grouped by week will need to be recalculated.',\n                    primaryButton: {\n                        children: 'Change week definition',\n                        onClick: () => updateCurrentTeam({ week_start_day: value }),\n                    },\n                    secondaryButton: {\n                        children: 'Cancel',\n                    },\n                })\n            }}\n            loading={currentTeamLoading}\n            options={[\n                { value: 0, label: 'Sunday' },\n                { value: 1, label: 'Monday' },\n            ]}\n        />\n    )\n}\n", "import { LemonSwitch, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { PropertyFilters } from 'lib/components/PropertyFilters/PropertyFilters'\nimport { PROPERTY_FILTER_TYPE_TO_TAXONOMIC_FILTER_GROUP_TYPE } from 'lib/components/PropertyFilters/utils'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { getFilterLabel } from 'lib/taxonomy'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport { cohortsModel } from '~/models/cohortsModel'\nimport { groupsModel } from '~/models/groupsModel'\nimport { AnyPropertyFilter, type CohortType, PropertyOperator, type TeamPublicType, type TeamType } from '~/types'\n\nimport { filterTestAccountsDefaultsLogic } from './filterTestAccountDefaultsLogic'\n\nfunction createTestAccountFilterWarningLabels(\n    currentTeam: TeamPublicType | TeamType | null,\n    cohortsById: Partial<Record<number | string, CohortType>>\n): string[] | null {\n    if (!currentTeam) {\n        return null\n    }\n    const positiveFilterOperators = [\n        PropertyOperator.Exact,\n        PropertyOperator.IContains,\n        PropertyOperator.Regex,\n        PropertyOperator.IsSet,\n        PropertyOperator.In,\n    ]\n    const positiveFilters = []\n    for (const filter of currentTeam.test_account_filters || []) {\n        if ('operator' in filter && !!filter.operator && positiveFilterOperators.includes(filter.operator)) {\n            positiveFilters.push(filter)\n        }\n    }\n\n    return positiveFilters.map((filter) => {\n        if (!!filter.type && !!filter.key) {\n            // person properties can be checked for a label as if they were event properties\n            // so, we can check each acceptable type and see if it returns a value\n            if (filter.type === 'cohort') {\n                return `Cohort ${cohortsById[filter.value]?.name || filter.value}`\n            }\n            return (\n                getFilterLabel(filter.key, PROPERTY_FILTER_TYPE_TO_TAXONOMIC_FILTER_GROUP_TYPE[filter.type]) ||\n                filter.key\n            )\n        }\n        return filter.key\n    })\n}\n\nfunction TestAccountFiltersConfig(): JSX.Element {\n    const { updateCurrentTeam } = useActions(teamLogic)\n    const { setTeamDefault } = useActions(filterTestAccountsDefaultsLogic)\n    const { reportTestAccountFiltersUpdated } = useActions(eventUsageLogic)\n    const { currentTeam, currentTeamLoading, testAccountFilterFrequentMistakes } = useValues(teamLogic)\n    const { cohortsById } = useValues(cohortsModel)\n\n    const testAccountFilterWarningLabels = createTestAccountFilterWarningLabels(currentTeam, cohortsById)\n\n    const { groupsTaxonomicTypes } = useValues(groupsModel)\n\n    const handleChange = (filters: AnyPropertyFilter[]): void => {\n        updateCurrentTeam({ test_account_filters: filters })\n        reportTestAccountFiltersUpdated(filters)\n    }\n\n    return (\n        <div className=\"mb-4 flex flex-col gap-2\">\n            <div className=\"mb-4 flex flex-col gap-2\">\n                <LemonBanner type=\"info\">\n                    When filtering out internal users by person properties, like email, we recommend creating a Cohort\n                    with those properties, and then adding that cohort with a \"not in\" operator in your \u2018Filter out\n                    internal and test users\u2019 settings.\n                </LemonBanner>\n                {!!testAccountFilterWarningLabels && testAccountFilterWarningLabels.length > 0 && (\n                    <LemonBanner type=\"warning\" className=\"m-2\">\n                        <p>\n                            You've added an <strong>inclusive</strong> filter, which means only matching events will be\n                            included. Filters are normally <strong>exclusive</strong>, such as <i>does not contain</i>,\n                            to filter out unwanted results.\n                        </p>\n                        <p>Inclusive filters are currently set for the following properties: </p>\n                        <ul className=\"list-disc\">\n                            {testAccountFilterWarningLabels.map((l, i) => (\n                                <li key={i} className=\"ml-4\">\n                                    {l}\n                                </li>\n                            ))}\n                        </ul>\n                    </LemonBanner>\n                )}\n                {!!testAccountFilterFrequentMistakes && testAccountFilterFrequentMistakes.length > 0 && (\n                    <LemonBanner type=\"warning\" className=\"m-2\">\n                        <p>Your filter contains a setting that is likely to exclude or include unexpected users.</p>\n                        <ul className=\"list-disc\">\n                            {testAccountFilterFrequentMistakes.map(({ key, type, fix }, i) => (\n                                <li key={i} className=\"ml-4\">\n                                    {key} is a {type} property, but {fix}.\n                                </li>\n                            ))}\n                        </ul>\n                    </LemonBanner>\n                )}\n                {currentTeam && (\n                    <PropertyFilters\n                        pageKey=\"testaccountfilters\"\n                        propertyFilters={currentTeam?.test_account_filters}\n                        onChange={handleChange}\n                        taxonomicGroupTypes={[\n                            TaxonomicFilterGroupType.EventProperties,\n                            TaxonomicFilterGroupType.PersonProperties,\n                            TaxonomicFilterGroupType.EventFeatureFlags,\n                            ...groupsTaxonomicTypes,\n                            TaxonomicFilterGroupType.Cohorts,\n                            TaxonomicFilterGroupType.Elements,\n                        ]}\n                    />\n                )}\n            </div>\n            <LemonSwitch\n                onChange={(checked) => {\n                    updateCurrentTeam({ test_account_filters_default_checked: checked })\n                    setTeamDefault(checked)\n                }}\n                checked={!!currentTeam?.test_account_filters_default_checked}\n                disabled={currentTeamLoading}\n                label=\"Enable this filter on all new insights\"\n                bordered\n            />\n        </div>\n    )\n}\n\nexport function ProjectAccountFiltersSetting(): JSX.Element {\n    return (\n        <>\n            <p>\n                These filters apply only to queries when the toggle is enabled. Adding filters here does not prevent\n                events or recordings being ingested.{' '}\n                <Link to=\"https://posthog.com/tutorials/filter-internal-users\">Learn more in our docs</Link>.\n            </p>\n            <div className=\"mt-4\">\n                <strong>Example filters</strong>\n                <ul className=\"list-disc pl-4 mb-2\">\n                    <li>\n                        Add a cohort where \"<strong>Email</strong> does not contain <strong>yourcompany.com</strong>\" to\n                        exclude your team.\n                    </li>\n                    <li>\n                        Add \"<strong>Host</strong> does not contain <strong>localhost</strong>\" to exclude local\n                        environments.\n                    </li>\n                </ul>\n            </div>\n            <TestAccountFiltersConfig />\n        </>\n    )\n}\n", "import { IconEllipsis, IconMinus } from '@posthog/icons'\nimport { LemonButton, LemonMenu, LemonTable, LemonTableColumns, ProfilePicture } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { MemberSelect } from 'lib/components/MemberSelect'\nimport { useEffect } from 'react'\n\nimport { UserBasicType, UserGroup } from '~/types'\n\nimport { userGroupsLogic } from './userGroupsLogic'\n\nexport const UserGroups = (): JSX.Element => {\n    const { userGroups, userGroupsLoading } = useValues(userGroupsLogic)\n    const { ensureAllGroupsLoaded, openGroupCreationForm } = useActions(userGroupsLogic)\n\n    useEffect(() => {\n        ensureAllGroupsLoaded()\n    }, [ensureAllGroupsLoaded])\n\n    const columns: LemonTableColumns<UserGroup> = [\n        {\n            title: 'Team',\n            dataIndex: 'name',\n            key: 'name',\n        },\n        {\n            key: 'actions',\n            render: (_, item: UserGroup) => <Actions group={item} />,\n        },\n    ]\n\n    return (\n        <div className=\"space-y-2\">\n            <LemonTable\n                size=\"small\"\n                dataSource={userGroups}\n                loading={userGroupsLoading}\n                columns={columns}\n                expandable={{\n                    noIndent: true,\n                    rowExpandable: (record) => record.members.length > 0,\n                    expandedRowRender: (record) => <MembersTable groupId={record.id} members={record.members} />,\n                }}\n            />\n            <LemonButton onClick={openGroupCreationForm} size=\"small\" type=\"primary\">\n                Create group\n            </LemonButton>\n        </div>\n    )\n}\n\nconst Actions = ({ group }: { group: UserGroup }): JSX.Element => {\n    const { addMember, deleteUserGroup } = useActions(userGroupsLogic)\n\n    return (\n        <div className=\"flex flex-row justify-end space-x-2\">\n            <LemonMenu\n                items={[\n                    {\n                        label: 'Delete',\n                        status: 'danger',\n                        onClick: () => deleteUserGroup(group.id),\n                    },\n                ]}\n            >\n                <LemonButton icon={<IconEllipsis />} size=\"xsmall\" />\n            </LemonMenu>\n            <MemberSelect\n                excludedMembers={group.members.map((m) => m.id)}\n                onChange={(user) => {\n                    if (user) {\n                        addMember({ id: group.id, user: user })\n                    }\n                }}\n                value={null}\n                allowNone={false}\n                defaultLabel=\"Add member\"\n                type=\"primary\"\n                size=\"xsmall\"\n            />\n        </div>\n    )\n}\n\nconst MembersTable = ({ groupId, members }: { groupId: UserGroup['id']; members: UserBasicType[] }): JSX.Element => {\n    const { removeMember } = useActions(userGroupsLogic)\n\n    const columns: LemonTableColumns<UserBasicType> = [\n        {\n            title: 'Members',\n            key: 'name',\n            render: function ProfilePictureRender(_, member) {\n                return <ProfilePicture user={member} showName />\n            },\n        },\n        {\n            key: 'actions',\n            render: (_, item: UserBasicType) => {\n                return (\n                    <div className=\"flex flex-row justify-end\">\n                        <LemonButton\n                            onClick={() => removeMember({ id: groupId, user: item })}\n                            icon={<IconMinus />}\n                            type=\"secondary\"\n                            status=\"danger\"\n                            size=\"xsmall\"\n                        >\n                            Remove\n                        </LemonButton>\n                    </div>\n                )\n            },\n        },\n    ]\n\n    return <LemonTable size=\"small\" showHeader={false} dataSource={members} columns={columns} embedded />\n}\n", "import { LemonButton, LemonInput, Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { supportLogic } from 'lib/components/Support/supportLogic'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { useEffect, useState } from 'react'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { urls } from 'scenes/urls'\n\nimport { PipelineTab } from '~/types'\n\nimport { webhookIntegrationLogic } from './webhookIntegrationLogic'\n\nexport function WebhookIntegration(): JSX.Element {\n    const [webhook, setWebhook] = useState('')\n    const { testWebhook, removeWebhook } = useActions(webhookIntegrationLogic)\n    const { loading } = useValues(webhookIntegrationLogic)\n    const { currentTeam } = useValues(teamLogic)\n    const { featureFlags } = useValues(featureFlagLogic)\n    const { openSupportForm } = useActions(supportLogic)\n\n    useEffect(() => {\n        if (currentTeam?.slack_incoming_webhook) {\n            setWebhook(currentTeam?.slack_incoming_webhook)\n        }\n    }, [currentTeam])\n\n    const webhooks_disallowed = featureFlags[FEATURE_FLAGS.WEBHOOKS_DENYLIST]\n    if (webhooks_disallowed) {\n        return (\n            <div>\n                <p>\n                    Webhooks are currently not available for your organization.{' '}\n                    <Link onClick={() => openSupportForm({ kind: 'support', target_area: 'apps' })}>\n                        Contact support\n                    </Link>\n                </p>\n            </div>\n        )\n    }\n\n    if (!currentTeam?.slack_incoming_webhook) {\n        return (\n            <>\n                <p>\n                    The Webhook integration has been replaced with our new{' '}\n                    <Link to={urls.pipeline(PipelineTab.Destinations)}>Pipeline Destinations</Link> allowing you to\n                    create multiple, highly customizable webhook triggers based off of Actions or Events.\n                </p>\n            </>\n        )\n    }\n\n    return (\n        <div>\n            <p>\n                Send notifications when selected actions are performed by users.\n                <br />\n                Guidance on integrating with webhooks available in our docs,{' '}\n                <Link to=\"https://posthog.com/docs/webhooks/slack\">for Slack</Link> and{' '}\n                <Link to=\"https://posthog.com/docs/webhooks/microsoft-teams\">for Microsoft Teams</Link>. Discord is also\n                supported.\n            </p>\n\n            <div className=\"space-y-4 max-w-160\">\n                <LemonInput\n                    value={webhook}\n                    onChange={setWebhook}\n                    type=\"url\"\n                    placeholder={\n                        currentTeam?.slack_incoming_webhook ? '' : 'integration disabled - enter URL, then Test & Save'\n                    }\n                    disabled={loading}\n                    onPressEnter={() => testWebhook(webhook)}\n                />\n                <div className=\"flex items-center gap-2\">\n                    <LemonButton\n                        type=\"primary\"\n                        disabled={!webhook}\n                        onClick={(e) => {\n                            e.preventDefault()\n                            testWebhook(webhook)\n                        }}\n                        loading={loading}\n                    >\n                        Test & Save\n                    </LemonButton>\n                    <LemonButton\n                        status=\"danger\"\n                        type=\"secondary\"\n                        onClick={(e) => {\n                            e.preventDefault()\n                            removeWebhook()\n                            setWebhook('')\n                        }}\n                        disabled={!currentTeam?.slack_incoming_webhook}\n                    >\n                        Clear & Disable\n                    </LemonButton>\n                </div>\n            </div>\n        </div>\n    )\n}\n", "import { kea, listeners, path, selectors } from 'kea'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast/LemonToast'\nimport { capitalizeFirstLetter } from 'lib/utils'\nimport { teamLogic } from 'scenes/teamLogic'\n\nimport type { webhookIntegrationLogicType } from './webhookIntegrationLogicType'\n\nfunction adjustDiscordWebhook(webhookUrl: string): string {\n    // We need Discord webhook URLs to end with /slack for proper handling, this ensures that\n    return webhookUrl.replace(/\\/*(?:posthog|slack)?\\/?$/, '/slack')\n}\n\nexport const webhookIntegrationLogic = kea<webhookIntegrationLogicType>([\n    path(['scenes', 'project', 'Settings', 'webhookIntegrationLogic']),\n    loaders(({ actions }) => ({\n        testedWebhook: [\n            null as string | null,\n            {\n                testWebhook: async (webhook: string) => {\n                    if (webhook?.includes('discord.com/')) {\n                        webhook = adjustDiscordWebhook(webhook)\n                    }\n\n                    if (webhook) {\n                        try {\n                            const response = await api.create('api/user/test_slack_webhook', { webhook })\n                            if (response.success) {\n                                return webhook\n                            }\n                            actions.testWebhookFailure(response.error)\n                        } catch (error: any) {\n                            actions.testWebhookFailure(error.message)\n                        }\n                    }\n                    return null\n                },\n            },\n        ],\n        removedWebhook: [\n            null,\n            {\n                removeWebhook: () => {\n                    teamLogic.actions.updateCurrentTeam({ slack_incoming_webhook: '' })\n                    return null\n                },\n            },\n        ],\n    })),\n    selectors({\n        loading: [\n            (s) => [s.testedWebhookLoading, teamLogic.selectors.currentTeamLoading],\n            (testedWebhookLoading: boolean, currentTeamLoading: boolean) => testedWebhookLoading || currentTeamLoading,\n        ],\n    }),\n    listeners(() => ({\n        testWebhookSuccess: ({ testedWebhook }) => {\n            if (testedWebhook) {\n                teamLogic.actions.updateCurrentTeam({ slack_incoming_webhook: testedWebhook })\n            }\n        },\n        testWebhookFailure: ({ error }) => {\n            lemonToast.error(capitalizeFirstLetter(error))\n        },\n    })),\n])\n", "import { IconX } from '@posthog/icons'\nimport { LemonTag } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { CopyToClipboardInline } from 'lib/components/CopyToClipboard'\nimport { useRestrictedArea } from 'lib/components/RestrictedArea'\nimport { RestrictionScope } from 'lib/components/RestrictedArea'\nimport { OrganizationMembershipLevel } from 'lib/constants'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonDialog } from 'lib/lemon-ui/LemonDialog'\nimport { LemonTable, LemonTableColumn, LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { createdAtColumn, createdByColumn } from 'lib/lemon-ui/LemonTable/columnUtils'\nimport { ProfilePicture } from 'lib/lemon-ui/ProfilePicture'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\n\nimport { OrganizationInviteType } from '~/types'\n\nimport { inviteLogic } from './inviteLogic'\nimport { EmailUnavailableMessage } from './InviteModal'\n\nfunction InviteLinkComponent(id: string, invite: OrganizationInviteType): JSX.Element {\n    const url = new URL(`/signup/${id}`, document.baseURI).href\n    return invite.is_expired ? (\n        <b>Expired \u2013 please recreate</b>\n    ) : (\n        <CopyToClipboardInline data-attr=\"invite-link\" description=\"invite link\">\n            {url}\n        </CopyToClipboardInline>\n    )\n}\n\nfunction makeActionsComponent(\n    deleteInvite: (invite: OrganizationInviteType) => void\n): (_: any, invite: any) => JSX.Element {\n    return function ActionsComponent(_, invite: OrganizationInviteType): JSX.Element {\n        return (\n            <LemonButton\n                title=\"Cancel the invite\"\n                data-attr=\"invite-delete\"\n                icon={<IconX />}\n                status=\"danger\"\n                onClick={() => {\n                    invite.is_expired\n                        ? deleteInvite(invite)\n                        : LemonDialog.open({\n                              title: 'Cancel invite',\n                              description: `Do you want to cancel the invite for ${invite.target_email}?`,\n                              primaryButton: {\n                                  children: 'Yes, cancel invite',\n                                  status: 'danger',\n                                  onClick: () => deleteInvite(invite),\n                              },\n                              secondaryButton: {\n                                  children: 'No, keep invite',\n                              },\n                          })\n                }}\n            />\n        )\n    }\n}\nexport function Invites(): JSX.Element {\n    const { invites, invitesLoading } = useValues(inviteLogic)\n    const { deleteInvite, showInviteModal } = useActions(inviteLogic)\n    const { preflight } = useValues(preflightLogic)\n\n    const restrictionReason = useRestrictedArea({\n        minimumAccessLevel: OrganizationMembershipLevel.Admin,\n        scope: RestrictionScope.Organization,\n    })\n\n    const columns: LemonTableColumns<OrganizationInviteType> = [\n        {\n            key: 'user_profile_picture',\n            render: function ProfilePictureRender(_, invite) {\n                return <ProfilePicture user={{ first_name: invite.first_name, email: invite.target_email }} />\n            },\n            width: 32,\n        },\n        {\n            title: 'Invitee',\n            dataIndex: 'target_email',\n            key: 'target_email',\n            render: function TargetEmail(_, invite): JSX.Element | string {\n                return invite.target_email ? (\n                    <div className=\"flex items-center\">\n                        {invite.target_email}\n                        {invite.first_name ? ` (${invite.first_name})` : ''}\n                    </div>\n                ) : (\n                    <i>no one</i>\n                )\n            },\n            width: '20%',\n        },\n        {\n            title: 'Level',\n            dataIndex: 'level',\n            render: function LevelRender(_, invite) {\n                return (\n                    <LemonTag data-attr=\"invite-membership-level\">{OrganizationMembershipLevel[invite.level]}</LemonTag>\n                )\n            },\n        },\n        createdByColumn() as LemonTableColumn<OrganizationInviteType, keyof OrganizationInviteType | undefined>,\n        createdAtColumn() as LemonTableColumn<OrganizationInviteType, keyof OrganizationInviteType | undefined>,\n        {\n            title: 'Invite Link',\n            dataIndex: 'id',\n            key: 'link',\n            render: (_, invite) => InviteLinkComponent(invite.id, invite),\n        },\n        {\n            title: '',\n            key: 'actions',\n            width: 24,\n            render: !restrictionReason ? makeActionsComponent(deleteInvite) : undefined,\n        },\n    ]\n\n    return (\n        <div className=\"space-y-4\">\n            {!preflight?.email_service_available && <EmailUnavailableMessage />}\n            <LemonTable\n                dataSource={invites}\n                columns={columns}\n                rowKey=\"id\"\n                loading={invitesLoading}\n                data-attr=\"invites-table\"\n                emptyState=\"There are no outstanding invitations. You can invite another team member above.\"\n            />\n            <LemonButton type=\"primary\" onClick={showInviteModal} data-attr=\"invite-teammate-button\">\n                Invite team member\n            </LemonButton>\n        </div>\n    )\n}\n", "import { LemonInput, LemonSwitch } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { PayGateMini } from 'lib/components/PayGateMini/PayGateMini'\nimport { useRestrictedArea } from 'lib/components/RestrictedArea'\nimport { TZLabel } from 'lib/components/TZLabel'\nimport { OrganizationMembershipLevel } from 'lib/constants'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonDialog } from 'lib/lemon-ui/LemonDialog'\nimport { LemonDivider } from 'lib/lemon-ui/LemonDivider'\nimport { LemonTable, LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { LemonTag } from 'lib/lemon-ui/LemonTag/LemonTag'\nimport { ProfilePicture } from 'lib/lemon-ui/ProfilePicture'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { capitalizeFirstLetter, fullName } from 'lib/utils'\nimport {\n    getReasonForAccessLevelChangeProhibition,\n    membershipLevelToName,\n    organizationMembershipLevelIntegers,\n} from 'lib/utils/permissioning'\nimport { useEffect } from 'react'\nimport { twoFactorLogic } from 'scenes/authentication/twoFactorLogic'\nimport { membersLogic } from 'scenes/organization/membersLogic'\nimport { organizationLogic } from 'scenes/organizationLogic'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { AvailableFeature, OrganizationMemberType } from '~/types'\n\nfunction ActionsComponent(_: any, member: OrganizationMemberType): JSX.Element | null {\n    const { user } = useValues(userLogic)\n    const { currentOrganization } = useValues(organizationLogic)\n    const { removeMember, changeMemberAccessLevel } = useActions(membersLogic)\n\n    if (!user) {\n        return null\n    }\n\n    const currentMembershipLevel = currentOrganization?.membership_level ?? -1\n\n    const allowDeletion =\n        // higher-ranked users cannot be removed, at the same time the currently logged-in user can leave any time\n        ((currentMembershipLevel >= OrganizationMembershipLevel.Admin && member.level <= currentMembershipLevel) ||\n            member.user.uuid === user.uuid) &&\n        // unless that user is the organization's owner, in which case they can't leave\n        member.level !== OrganizationMembershipLevel.Owner\n\n    const myMembershipLevel = currentOrganization ? currentOrganization.membership_level : null\n\n    const allowedLevels = organizationMembershipLevelIntegers.filter(\n        (listLevel) => !getReasonForAccessLevelChangeProhibition(myMembershipLevel, user, member, listLevel)\n    )\n    const disallowedReason = getReasonForAccessLevelChangeProhibition(myMembershipLevel, user, member, allowedLevels)\n\n    return (\n        <More\n            overlay={\n                <>\n                    {disallowedReason ? (\n                        <div>{disallowedReason}</div>\n                    ) : (\n                        allowedLevels.map((listLevel) => (\n                            <LemonButton\n                                fullWidth\n                                key={`${member.user.uuid}-level-${listLevel}`}\n                                onClick={(event) => {\n                                    event.preventDefault()\n                                    if (!user) {\n                                        throw Error\n                                    }\n                                    if (listLevel === OrganizationMembershipLevel.Owner) {\n                                        LemonDialog.open({\n                                            title: `Add additional owner to ${user.organization?.name}?`,\n                                            description: `Please confirm that you would like to make ${fullName(\n                                                member.user\n                                            )} an owner of ${user.organization?.name}.`,\n                                            primaryButton: {\n                                                status: 'danger',\n                                                children: `Make ${fullName(member.user)} an owner`,\n                                                onClick: () => changeMemberAccessLevel(member, listLevel),\n                                            },\n                                            secondaryButton: {\n                                                children: 'Cancel',\n                                            },\n                                        })\n                                    } else {\n                                        changeMemberAccessLevel(member, listLevel)\n                                    }\n                                }}\n                                data-test-level={listLevel}\n                            >\n                                {listLevel === OrganizationMembershipLevel.Owner ? (\n                                    <>Make owner</>\n                                ) : listLevel > member.level ? (\n                                    <>Upgrade to {membershipLevelToName.get(listLevel)}</>\n                                ) : (\n                                    <>Downgrade to {membershipLevelToName.get(listLevel)}</>\n                                )}\n                            </LemonButton>\n                        ))\n                    )}\n                    {allowDeletion ? (\n                        <>\n                            <LemonDivider />\n                            <LemonButton\n                                status=\"danger\"\n                                data-attr=\"delete-org-membership\"\n                                onClick={() => {\n                                    if (!user) {\n                                        throw Error\n                                    }\n                                    LemonDialog.open({\n                                        title: `${\n                                            member.user.uuid == user.uuid\n                                                ? 'Leave'\n                                                : `Remove ${fullName(member.user)} from`\n                                        } organization ${user.organization?.name}?`,\n                                        primaryButton: {\n                                            children: member.user.uuid == user.uuid ? 'Leave' : 'Remove',\n                                            status: 'danger',\n                                            onClick: () => removeMember(member),\n                                        },\n                                        secondaryButton: {\n                                            children: 'Cancel',\n                                        },\n                                    })\n                                }}\n                                fullWidth\n                            >\n                                {member.user.uuid !== user.uuid ? 'Remove from organization' : 'Leave organization'}\n                            </LemonButton>\n                        </>\n                    ) : null}\n                </>\n            }\n        />\n    )\n}\n\nexport function Members(): JSX.Element | null {\n    const { filteredMembers, membersLoading, search } = useValues(membersLogic)\n    const { currentOrganization } = useValues(organizationLogic)\n    const { preflight } = useValues(preflightLogic)\n    const { user } = useValues(userLogic)\n    const { setSearch, ensureAllMembersLoaded } = useActions(membersLogic)\n    const { updateOrganization } = useActions(organizationLogic)\n    const { openTwoFactorSetupModal } = useActions(twoFactorLogic)\n\n    const twoFactorRestrictionReason = useRestrictedArea({ minimumAccessLevel: OrganizationMembershipLevel.Admin })\n\n    useEffect(() => {\n        ensureAllMembersLoaded()\n    }, [])\n\n    if (!user) {\n        return null\n    }\n\n    const columns: LemonTableColumns<OrganizationMemberType> = [\n        {\n            key: 'user_profile_picture',\n            render: function ProfilePictureRender(_, member) {\n                return <ProfilePicture user={member.user} />\n            },\n            width: 32,\n        },\n        {\n            title: 'Name',\n            key: 'user_name',\n            render: (_, member) =>\n                member.user.uuid == user.uuid ? `${fullName(member.user)} (you)` : fullName(member.user),\n            sorter: (a, b) => fullName(a.user).localeCompare(fullName(b.user)),\n        },\n        {\n            title: 'Email',\n            key: 'user_email',\n            render: (_, member) => {\n                return (\n                    <>\n                        {member.user.email}\n                        {!member.user.is_email_verified &&\n                            !member.has_social_auth &&\n                            preflight?.email_service_available && (\n                                <>\n                                    {' '}\n                                    <LemonTag type=\"highlight\" data-attr=\"pending-email-verification\">\n                                        pending email verification\n                                    </LemonTag>\n                                </>\n                            )}\n                    </>\n                )\n            },\n            sorter: (a, b) => a.user.email.localeCompare(b.user.email),\n        },\n        {\n            title: 'Level',\n            dataIndex: 'level',\n            key: 'level',\n            render: function LevelRender(_, member) {\n                return (\n                    <LemonTag data-attr=\"membership-level\">\n                        {capitalizeFirstLetter(membershipLevelToName.get(member.level) ?? `unknown (${member.level})`)}\n                    </LemonTag>\n                )\n            },\n            sorter: (a, b) => a.level - b.level,\n        },\n        {\n            title: '2FA',\n            dataIndex: 'is_2fa_enabled',\n            key: 'is_2fa_enabled',\n            render: function LevelRender(_, member) {\n                return (\n                    <>\n                        <Tooltip\n                            title={\n                                member.user.uuid == user.uuid && !member.is_2fa_enabled\n                                    ? 'Click to setup 2FA for your account'\n                                    : ''\n                            }\n                        >\n                            <LemonTag\n                                onClick={\n                                    member.user.uuid == user.uuid && !member.is_2fa_enabled\n                                        ? () => openTwoFactorSetupModal()\n                                        : undefined\n                                }\n                                data-attr=\"2fa-enabled\"\n                                type={member.is_2fa_enabled ? 'success' : 'warning'}\n                            >\n                                {member.is_2fa_enabled ? '2FA enabled' : '2FA not enabled'}\n                            </LemonTag>\n                        </Tooltip>\n                    </>\n                )\n            },\n            sorter: (a, b) => (a.is_2fa_enabled != b.is_2fa_enabled ? 1 : 0),\n        },\n        {\n            title: 'Joined',\n            dataIndex: 'joined_at',\n            key: 'joined_at',\n            render: function RenderJoinedAt(joinedAt) {\n                return (\n                    <div className=\"whitespace-nowrap\">\n                        <TZLabel time={joinedAt as string} />\n                    </div>\n                )\n            },\n            sorter: (a, b) => a.joined_at.localeCompare(b.joined_at),\n        },\n        {\n            title: 'Last Logged In',\n            dataIndex: 'last_login',\n            key: 'last_login',\n            render: function RenderLastLogin(lastLogin) {\n                return (\n                    <div className=\"whitespace-nowrap\">\n                        {lastLogin ? <TZLabel time={lastLogin as string} /> : 'Never'}\n                    </div>\n                )\n            },\n            sorter: (a, b) => new Date(a.last_login ?? 0).getTime() - new Date(b.last_login ?? 0).getTime(),\n        },\n        {\n            key: 'actions',\n            width: 0,\n            render: ActionsComponent,\n        },\n    ]\n\n    return (\n        <>\n            <LemonInput type=\"search\" placeholder=\"Search for members\" value={search} onChange={setSearch} />\n\n            <LemonTable\n                dataSource={filteredMembers ?? []}\n                columns={columns}\n                rowKey=\"id\"\n                style={{ marginTop: '1rem' }}\n                loading={membersLoading}\n                data-attr=\"org-members-table\"\n                defaultSorting={{ columnKey: 'level', order: -1 }}\n                pagination={{ pageSize: 50 }}\n            />\n            <h3 className=\"mt-4\">Two-factor authentication</h3>\n            <PayGateMini feature={AvailableFeature.TWOFA_ENFORCEMENT}>\n                <p>Require all organization members to use two-factor authentication.</p>\n                <LemonSwitch\n                    label=\"Enforce 2FA\"\n                    bordered\n                    checked={!!currentOrganization?.enforce_2fa}\n                    onChange={(enforce_2fa) => updateOrganization({ enforce_2fa })}\n                    disabledReason={twoFactorRestrictionReason}\n                />\n            </PayGateMini>\n        </>\n    )\n}\n", "import { LemonSwitch } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { useRestrictedArea } from 'lib/components/RestrictedArea'\nimport { OrganizationMembershipLevel } from 'lib/constants'\nimport { organizationLogic } from 'scenes/organizationLogic'\n\nexport function OrganizationAI(): JSX.Element {\n    const { currentOrganization, currentOrganizationLoading } = useValues(organizationLogic)\n    const { updateOrganization } = useActions(organizationLogic)\n\n    const restrictionReason = useRestrictedArea({ minimumAccessLevel: OrganizationMembershipLevel.Admin })\n\n    return (\n        <div className=\"max-w-160\">\n            <LemonSwitch\n                label=\"Enable PostHog AI data analysis features\"\n                data-attr=\"organization-ai-enabled\"\n                onChange={(checked) => {\n                    updateOrganization({ is_ai_data_processing_approved: checked })\n                }}\n                checked={!!currentOrganization?.is_ai_data_processing_approved}\n                disabled={!!restrictionReason || currentOrganizationLoading}\n                bordered\n            />\n        </div>\n    )\n}\n", "import { IconTrash } from '@posthog/icons'\nimport { LemonButton, LemonInput, LemonModal } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { RestrictionScope, useRestrictedArea } from 'lib/components/RestrictedArea'\nimport { OrganizationMembershipLevel } from 'lib/constants'\nimport { Dispatch, SetStateAction, useState } from 'react'\nimport { organizationLogic } from 'scenes/organizationLogic'\n\nexport function DeleteOrganizationModal({\n    isOpen,\n    setIsOpen,\n}: {\n    isOpen: boolean\n    setIsOpen: Dispatch<SetStateAction<boolean>>\n}): JSX.Element {\n    const { currentOrganization, organizationBeingDeleted } = useValues(organizationLogic)\n    const { deleteOrganization } = useActions(organizationLogic)\n\n    const [isDeletionConfirmed, setIsDeletionConfirmed] = useState(false)\n    const isDeletionInProgress = !!currentOrganization && organizationBeingDeleted?.id === currentOrganization.id\n\n    return (\n        <LemonModal\n            title=\"Delete the entire organization?\"\n            onClose={!isDeletionInProgress ? () => setIsOpen(false) : undefined}\n            footer={\n                <>\n                    <LemonButton disabled={isDeletionInProgress} type=\"secondary\" onClick={() => setIsOpen(false)}>\n                        Cancel\n                    </LemonButton>\n                    <LemonButton\n                        type=\"secondary\"\n                        status=\"danger\"\n                        disabled={!isDeletionConfirmed}\n                        loading={isDeletionInProgress}\n                        data-attr=\"delete-organization-ok\"\n                        onClick={currentOrganization ? () => deleteOrganization(currentOrganization) : undefined}\n                    >{`Delete ${\n                        currentOrganization ? currentOrganization.name : 'the current organization'\n                    }`}</LemonButton>\n                </>\n            }\n            isOpen={isOpen}\n        >\n            <p>\n                Organization deletion <b>cannot be undone</b>. You will lose all data, <b>including all events</b>,\n                related to all projects within this organization.\n            </p>\n            <p>\n                Please type{' '}\n                <strong>{currentOrganization ? currentOrganization.name : \"this organization's name\"}</strong> to\n                confirm.\n            </p>\n            <LemonInput\n                type=\"text\"\n                onChange={(value) => {\n                    if (currentOrganization) {\n                        setIsDeletionConfirmed(value.toLowerCase() === currentOrganization.name.toLowerCase())\n                    }\n                }}\n                data-attr=\"delete-organization-confirmation-input\"\n            />\n        </LemonModal>\n    )\n}\n\nexport function OrganizationDangerZone(): JSX.Element {\n    const { currentOrganization } = useValues(organizationLogic)\n    const [isModalVisible, setIsModalVisible] = useState(false)\n\n    const restrictionReason = useRestrictedArea({\n        minimumAccessLevel: OrganizationMembershipLevel.Owner,\n        scope: RestrictionScope.Organization,\n    })\n\n    return (\n        <>\n            <div className=\"text-danger\">\n                {!restrictionReason && (\n                    <p className=\"text-danger\">\n                        This is <b>irreversible</b>. Please be certain.\n                    </p>\n                )}\n                <LemonButton\n                    status=\"danger\"\n                    type=\"secondary\"\n                    onClick={() => setIsModalVisible(true)}\n                    data-attr=\"delete-organization-button\"\n                    icon={<IconTrash />}\n                    disabledReason={restrictionReason}\n                >\n                    Delete {currentOrganization?.name || 'the current organization'}\n                </LemonButton>\n            </div>\n            <DeleteOrganizationModal isOpen={isModalVisible} setIsOpen={setIsModalVisible} />\n        </>\n    )\n}\n", "import { LemonButton, LemonInput } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { useRestrictedArea } from 'lib/components/RestrictedArea'\nimport { OrganizationMembershipLevel } from 'lib/constants'\nimport { useState } from 'react'\nimport { organizationLogic } from 'scenes/organizationLogic'\n\nexport function OrganizationDisplayName(): JSX.Element {\n    const { currentOrganization, currentOrganizationLoading } = useValues(organizationLogic)\n    const { updateOrganization } = useActions(organizationLogic)\n\n    const [name, setName] = useState(currentOrganization?.name || '')\n\n    const restrictionReason = useRestrictedArea({ minimumAccessLevel: OrganizationMembershipLevel.Admin })\n\n    return (\n        <div className=\"max-w-160\">\n            <LemonInput\n                className=\"mb-4\"\n                value={name}\n                onChange={setName}\n                disabled={!!restrictionReason}\n                data-attr=\"organization-name-input-settings\"\n            />\n            <LemonButton\n                type=\"primary\"\n                onClick={(e) => {\n                    e.preventDefault()\n                    updateOrganization({ name })\n                }}\n                disabledReason={\n                    restrictionReason\n                        ? restrictionReason\n                        : !name\n                        ? 'You must provide a name'\n                        : !currentOrganization\n                        ? 'Organization not loaded'\n                        : currentOrganization.name === name\n                        ? 'Name unchanged'\n                        : undefined\n                }\n                loading={currentOrganizationLoading}\n            >\n                Rename organization\n            </LemonButton>\n        </div>\n    )\n}\n", "import { LemonSwitch } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { useRestrictedArea } from 'lib/components/RestrictedArea'\nimport { OrganizationMembershipLevel } from 'lib/constants'\nimport { organizationLogic } from 'scenes/organizationLogic'\n\nexport function OrganizationEmailPreferences(): JSX.Element {\n    const { currentOrganization } = useValues(organizationLogic)\n    const { updateOrganization } = useActions(organizationLogic)\n\n    const restrictionReason = useRestrictedArea({ minimumAccessLevel: OrganizationMembershipLevel.Admin })\n\n    return (\n        <LemonSwitch\n            data-attr=\"is-member-join-email-enabled-switch\"\n            onChange={(checked) => {\n                updateOrganization({ is_member_join_email_enabled: checked })\n            }}\n            checked={!!currentOrganization?.is_member_join_email_enabled}\n            label=\"Email all current members when a new member joins\"\n            disabledReason={!currentOrganization ? 'Organization not loaded' : restrictionReason}\n            bordered\n        />\n    )\n}\n", "import { IconX } from '@posthog/icons'\nimport { LemonButton, LemonFileInput, lemonToast } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { useRestrictedArea } from 'lib/components/RestrictedArea'\nimport { OrganizationMembershipLevel } from 'lib/constants'\nimport { useUploadFiles } from 'lib/hooks/useUploadFiles'\nimport { IconUploadFile } from 'lib/lemon-ui/icons'\nimport { UploadedLogo } from 'lib/lemon-ui/UploadedLogo/UploadedLogo'\nimport { useState } from 'react'\nimport { organizationLogic } from 'scenes/organizationLogic'\n\nexport function OrganizationLogo(): JSX.Element {\n    const { currentOrganization, currentOrganizationLoading } = useValues(organizationLogic)\n    const { updateOrganization } = useActions(organizationLogic)\n\n    const [logoMediaId, setLogoMediaId] = useState(currentOrganization?.logo_media_id || null)\n\n    const { setFilesToUpload, filesToUpload, uploading } = useUploadFiles({\n        onUpload: (_, __, id) => {\n            setLogoMediaId(id)\n        },\n        onError: (detail) => {\n            lemonToast.error(`Error uploading image: ${detail}`)\n        },\n    })\n\n    const restrictionReason = useRestrictedArea({ minimumAccessLevel: OrganizationMembershipLevel.Admin })\n\n    return (\n        <div className=\"space-y-4\">\n            <LemonFileInput\n                accept=\"image/*\"\n                multiple={false}\n                onChange={setFilesToUpload}\n                loading={uploading}\n                value={filesToUpload}\n                disabled={!!restrictionReason}\n                callToAction={\n                    <>\n                        <div className=\"relative\">\n                            <UploadedLogo\n                                name={currentOrganization?.name || '?'}\n                                entityId={currentOrganization?.id || 1}\n                                mediaId={logoMediaId}\n                                size=\"xlarge\"\n                            />\n                            {logoMediaId && (\n                                <div className=\"absolute -inset-2 group\">\n                                    <LemonButton\n                                        icon={<IconX />}\n                                        onClick={(e) => {\n                                            setLogoMediaId(null)\n                                            e.preventDefault() // Don't fire LemonFileInput's handler\n                                        }}\n                                        size=\"small\"\n                                        tooltip=\"Reset back to lettermark\"\n                                        tooltipPlacement=\"right\"\n                                        noPadding\n                                        className=\"group-hover:flex hidden absolute right-0 top-0\"\n                                    />\n                                </div>\n                            )}\n                        </div>\n                        <IconUploadFile className=\"text-2xl ml-1\" />\n                        <div>\n                            Click or drag and drop to upload logo image\n                            <br />\n                            (192x192 px or larger)\n                        </div>\n                    </>\n                }\n            />\n            <LemonButton\n                type=\"primary\"\n                onClick={(e) => {\n                    e.preventDefault()\n                    updateOrganization({ logo_media_id: logoMediaId })\n                }}\n                disabledReason={\n                    restrictionReason\n                        ? restrictionReason\n                        : !currentOrganization\n                        ? 'Organization not loaded'\n                        : logoMediaId === currentOrganization.logo_media_id\n                        ? 'Logo unchanged'\n                        : undefined\n                }\n                loading={currentOrganizationLoading || uploading}\n            >\n                Save logo\n            </LemonButton>\n        </div>\n    )\n}\n", "// NOTE: This is only to allow testing the new RBAC system\n\nimport { useFeatureFlag } from 'lib/hooks/useFeatureFlag'\n\nimport { RolesAndResourceAccessControls } from '~/layout/navigation-3000/sidepanel/panels/access_control/RolesAndResourceAccessControls'\n\nimport { PermissionsGrid } from './PermissionsGrid'\n\nexport function RoleBasedAccess(): JSX.Element {\n    const newAccessControl = useFeatureFlag('ROLE_BASED_ACCESS_CONTROL')\n    return newAccessControl ? <RolesAndResourceAccessControls noAccessControls /> : <PermissionsGrid />\n}\n", "import { IconPlus } from '@posthog/icons'\nimport {\n    LemonButton,\n    LemonDialog,\n    LemonInput,\n    LemonInputSelect,\n    LemonModal,\n    LemonSelect,\n    LemonTable,\n    LemonTableColumns,\n    ProfileBubbles,\n    ProfilePicture,\n} from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { capitalizeFirstLetter, Form } from 'kea-forms'\nimport { PayGateMini } from 'lib/components/PayGateMini/PayGateMini'\nimport { usersLemonSelectOptions } from 'lib/components/UserSelectItem'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { LemonTableLink } from 'lib/lemon-ui/LemonTable/LemonTableLink'\nimport { fullName } from 'lib/utils'\nimport { useMemo, useState } from 'react'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { AvailableFeature } from '~/types'\n\nimport { roleBasedAccessControlLogic, RoleWithResourceAccessControls } from './roleBasedAccessControlLogic'\n\nexport type RolesAndResourceAccessControlsProps = {\n    noAccessControls?: boolean\n}\n\nexport function RolesAndResourceAccessControls({ noAccessControls }: RolesAndResourceAccessControlsProps): JSX.Element {\n    const {\n        rolesWithResourceAccessControls,\n        rolesLoading,\n        roleBasedAccessControlsLoading,\n        resources,\n        availableLevels,\n        selectedRoleId,\n        defaultAccessLevel,\n    } = useValues(roleBasedAccessControlLogic)\n\n    const { updateRoleBasedAccessControls, selectRoleId, setEditingRoleId } = useActions(roleBasedAccessControlLogic)\n\n    const roleColumns = noAccessControls\n        ? []\n        : resources.map((resource) => ({\n              title: resource.replace(/_/g, ' ') + 's',\n              key: resource,\n              width: 0,\n              render: (_: any, { accessControlByResource, role }: RoleWithResourceAccessControls) => {\n                  const ac = accessControlByResource[resource]\n\n                  return (\n                      <LemonSelect\n                          size=\"small\"\n                          placeholder=\"No override\"\n                          className=\"my-1 whitespace-nowrap\"\n                          value={role ? ac?.access_level : ac?.access_level ?? defaultAccessLevel}\n                          onChange={(newValue) =>\n                              updateRoleBasedAccessControls([\n                                  {\n                                      resource,\n                                      role: role?.id ?? null,\n                                      access_level: newValue,\n                                  },\n                              ])\n                          }\n                          options={availableLevels.map((level) => ({\n                              value: level,\n                              label: capitalizeFirstLetter(level ?? ''),\n                          }))}\n                      />\n                  )\n              },\n          }))\n\n    const columns: LemonTableColumns<RoleWithResourceAccessControls> = [\n        {\n            title: 'Role',\n            key: 'role',\n            width: 0,\n            render: (_, { role }) => (\n                <span className=\"whitespace-nowrap\">\n                    <LemonTableLink\n                        onClick={\n                            role\n                                ? () => (role.id === selectedRoleId ? selectRoleId(null) : selectRoleId(role.id))\n                                : undefined\n                        }\n                        title={role?.name ?? 'Default'}\n                    />\n                </span>\n            ),\n        },\n        {\n            title: 'Members',\n            key: 'members',\n            render: (_, { role }) => {\n                return role ? (\n                    role.members.length ? (\n                        <ProfileBubbles\n                            people={role.members.map((member) => ({\n                                email: member.user.email,\n                                name: member.user.first_name,\n                                title: `${member.user.first_name} <${member.user.email}>`,\n                            }))}\n                            onClick={() => (role.id === selectedRoleId ? selectRoleId(null) : selectRoleId(role.id))}\n                        />\n                    ) : (\n                        'No members'\n                    )\n                ) : (\n                    'All members'\n                )\n            },\n        },\n\n        ...roleColumns,\n    ]\n\n    return (\n        <div className=\"space-y-2\">\n            <p>Use roles to group your organization members and assign them permissions.</p>\n\n            <PayGateMini feature={AvailableFeature.ROLE_BASED_ACCESS}>\n                <div className=\"space-y-2\">\n                    <LemonTable\n                        columns={columns}\n                        dataSource={rolesWithResourceAccessControls}\n                        loading={rolesLoading || roleBasedAccessControlsLoading}\n                        expandable={{\n                            isRowExpanded: ({ role }) => !!selectedRoleId && role?.id === selectedRoleId,\n                            onRowExpand: ({ role }) => (role ? selectRoleId(role.id) : undefined),\n                            onRowCollapse: () => selectRoleId(null),\n                            expandedRowRender: ({ role }) => (role ? <RoleDetails roleId={role?.id} /> : null),\n                            rowExpandable: ({ role }) => !!role,\n                        }}\n                    />\n\n                    <LemonButton type=\"primary\" onClick={() => setEditingRoleId('new')} icon={<IconPlus />}>\n                        Add a role\n                    </LemonButton>\n                    <RoleModal />\n                </div>\n            </PayGateMini>\n        </div>\n    )\n}\n\nfunction RoleDetails({ roleId }: { roleId: string }): JSX.Element | null {\n    const { user } = useValues(userLogic)\n    const { sortedMembers, roles, canEditRoleBasedAccessControls } = useValues(roleBasedAccessControlLogic)\n    const { addMembersToRole, removeMemberFromRole, setEditingRoleId } = useActions(roleBasedAccessControlLogic)\n    const [membersToAdd, setMembersToAdd] = useState<string[]>([])\n\n    const role = roles?.find((role) => role.id === roleId)\n\n    const onSubmit = membersToAdd.length\n        ? () => {\n              role && addMembersToRole(role, membersToAdd)\n              setMembersToAdd([])\n          }\n        : undefined\n\n    const membersNotInRole = useMemo(() => {\n        const membersInRole = new Set(role?.members.map((member) => member.user.uuid))\n        return sortedMembers?.filter((member) => !membersInRole.has(member.user.uuid)) ?? []\n    }, [role?.members, sortedMembers])\n\n    if (!role) {\n        // This is mostly for typing\n        return null\n    }\n\n    return (\n        <div className=\"my-2 pr-2 space-y-2\">\n            <div className=\"flex items-center gap-2 justify-between min-h-10\">\n                <div className=\"flex items-center gap-2\">\n                    <div className=\"min-w-[16rem]\">\n                        <LemonInputSelect\n                            placeholder=\"Search for members to add...\"\n                            value={membersToAdd}\n                            onChange={(newValues: string[]) => setMembersToAdd(newValues)}\n                            mode=\"multiple\"\n                            disabled={!canEditRoleBasedAccessControls}\n                            options={usersLemonSelectOptions(\n                                membersNotInRole.map((member) => member.user),\n                                'uuid'\n                            )}\n                        />\n                    </div>\n\n                    <LemonButton\n                        type=\"primary\"\n                        onClick={onSubmit}\n                        disabledReason={\n                            !canEditRoleBasedAccessControls\n                                ? 'You cannot edit this'\n                                : !onSubmit\n                                ? 'Please select members to add'\n                                : undefined\n                        }\n                    >\n                        Add members\n                    </LemonButton>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                    <LemonButton\n                        type=\"secondary\"\n                        onClick={() => setEditingRoleId(role.id)}\n                        disabledReason={!canEditRoleBasedAccessControls ? 'You cannot edit this' : undefined}\n                    >\n                        Edit\n                    </LemonButton>\n                </div>\n            </div>\n\n            <LemonTable\n                columns={[\n                    {\n                        key: 'user_profile_picture',\n                        render: function ProfilePictureRender(_, member) {\n                            return <ProfilePicture user={member.user} />\n                        },\n                        width: 32,\n                    },\n                    {\n                        title: 'Name',\n                        key: 'user_name',\n                        render: (_, member) =>\n                            member.user.uuid == user?.uuid ? `${fullName(member.user)} (you)` : fullName(member.user),\n                        sorter: (a, b) => fullName(a.user).localeCompare(fullName(b.user)),\n                    },\n                    {\n                        title: 'Email',\n                        key: 'user_email',\n                        render: (_, member) => {\n                            return <>{member.user.email}</>\n                        },\n                        sorter: (a, b) => a.user.email.localeCompare(b.user.email),\n                    },\n                    {\n                        key: 'actions',\n                        width: 0,\n                        render: (_, member) => {\n                            return (\n                                <div className=\"flex items-center gap-2\">\n                                    <LemonButton\n                                        status=\"danger\"\n                                        size=\"small\"\n                                        type=\"tertiary\"\n                                        disabledReason={\n                                            !canEditRoleBasedAccessControls ? 'You cannot edit this' : undefined\n                                        }\n                                        onClick={() => removeMemberFromRole(role, member.id)}\n                                    >\n                                        Remove\n                                    </LemonButton>\n                                </div>\n                            )\n                        },\n                    },\n                ]}\n                dataSource={role.members}\n            />\n        </div>\n    )\n}\n\nfunction RoleModal(): JSX.Element {\n    const { editingRoleId } = useValues(roleBasedAccessControlLogic)\n    const { setEditingRoleId, submitEditingRole, deleteRole } = useActions(roleBasedAccessControlLogic)\n    const isEditing = editingRoleId !== 'new'\n\n    const onDelete = (): void => {\n        LemonDialog.open({\n            title: 'Delete role',\n            content: 'Are you sure you want to delete this role? This action cannot be undone.',\n            primaryButton: {\n                children: 'Delete permanently',\n                onClick: () => deleteRole(editingRoleId as string),\n                status: 'danger',\n            },\n            secondaryButton: {\n                children: 'Cancel',\n            },\n        })\n    }\n\n    return (\n        <Form logic={roleBasedAccessControlLogic} formKey=\"editingRole\" enableFormOnSubmit>\n            <LemonModal\n                isOpen={!!editingRoleId}\n                onClose={() => setEditingRoleId(null)}\n                title={!isEditing ? 'Create' : `Edit`}\n                footer={\n                    <>\n                        <div className=\"flex-1\">\n                            {isEditing ? (\n                                <LemonButton type=\"secondary\" status=\"danger\" onClick={() => onDelete()}>\n                                    Delete\n                                </LemonButton>\n                            ) : null}\n                        </div>\n\n                        <LemonButton type=\"secondary\" onClick={() => setEditingRoleId(null)}>\n                            Cancel\n                        </LemonButton>\n\n                        <LemonButton type=\"primary\" htmlType=\"submit\" onClick={submitEditingRole}>\n                            {!isEditing ? 'Create' : 'Save'}\n                        </LemonButton>\n                    </>\n                }\n            >\n                <LemonField label=\"Role name\" name=\"name\">\n                    <LemonInput placeholder=\"Please enter a name...\" autoFocus />\n                </LemonField>\n            </LemonModal>\n        </Form>\n    )\n}\n", "import { IconInfo } from '@posthog/icons'\nimport { LemonButton, LemonCheckbox, LemonTable } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { PayGateMini } from 'lib/components/PayGateMini/PayGateMini'\nimport { RestrictionScope, useRestrictedArea } from 'lib/components/RestrictedArea'\nimport { TitleWithIcon } from 'lib/components/TitleWithIcon'\nimport { OrganizationMembershipLevel } from 'lib/constants'\nimport { LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { organizationLogic } from 'scenes/organizationLogic'\n\nimport { AccessLevel, AvailableFeature, Resource, RoleType } from '~/types'\n\nimport { permissionsLogic } from './permissionsLogic'\nimport { CreateRoleModal } from './Roles/CreateRoleModal'\nimport { rolesLogic } from './Roles/rolesLogic'\nimport { getSingularType } from './utils'\n\nexport function PermissionsGrid(): JSX.Element {\n    const { resourceRolesAccess, organizationResourcePermissionsLoading } = useValues(permissionsLogic)\n    const { updatePermission } = useActions(permissionsLogic)\n    const { roles, rolesLoading } = useValues(rolesLogic)\n    const { setRoleInFocus, openCreateRoleModal } = useActions(rolesLogic)\n    const { isAdminOrOwner } = useValues(organizationLogic)\n\n    const restrictionReason = useRestrictedArea({\n        minimumAccessLevel: OrganizationMembershipLevel.Admin,\n        scope: RestrictionScope.Organization,\n    })\n\n    const columns: LemonTableColumns<RoleType> = [\n        {\n            key: 'role',\n            title: '',\n            width: 150,\n            render: function RenderRole(_, role) {\n                return (\n                    <>\n                        {role.name == 'organization_default' ? (\n                            <b>All users by default</b>\n                        ) : (\n                            <LemonButton noPadding onClick={() => setRoleInFocus(role)}>\n                                {role.name}\n                            </LemonButton>\n                        )}\n                    </>\n                )\n            },\n        },\n        ...(resourceRolesAccess.flatMap((resource) => {\n            const name = Object.keys(resource)[0] as Resource\n            return [\n                {\n                    key: 'view',\n                    title: (\n                        <Tooltip title=\"View defaults cannot be changed\">\n                            <div className=\"text-center\">\n                                {name} <br /> View\n                            </div>\n                        </Tooltip>\n                    ),\n                    align: 'center',\n                    render: function RenderView() {\n                        return (\n                            <div className=\"flex justify-center\">\n                                <LemonCheckbox defaultChecked disabled color=\"gray\" />\n                            </div>\n                        )\n                    },\n                },\n                {\n                    key: 'edit',\n                    title: (\n                        <TitleWithIcon\n                            icon={\n                                <Tooltip title={`You can extend permissions on a per ${getSingularType(name)} basis.`}>\n                                    <IconInfo />\n                                </Tooltip>\n                            }\n                        >\n                            <>\n                                {name} <br /> Edit\n                            </>\n                        </TitleWithIcon>\n                    ),\n                    align: 'center',\n                    render: function RenderEdit(_, role) {\n                        return (\n                            <div className=\"flex justify-center\">\n                                <LemonCheckbox\n                                    onChange={(v) => {\n                                        updatePermission(v, role, resource[name].id, name)\n                                    }}\n                                    checked={resource[`${name}`][role.name] >= AccessLevel.WRITE}\n                                    disabled={!isAdminOrOwner}\n                                    color={isAdminOrOwner ? '' : 'gray'}\n                                />\n                            </div>\n                        )\n                    },\n                },\n            ]\n        }) as LemonTableColumns<RoleType>),\n    ]\n\n    return (\n        <PayGateMini feature={AvailableFeature.ROLE_BASED_ACCESS}>\n            <>\n                <div className=\"flex flex-row justify-between items-center mb-4\">\n                    <div className=\"text-secondary\">\n                        Edit organizational default permission levels for PostHog resources. Use roles to apply\n                        permissions to specific sets of users.\n                    </div>\n                </div>\n\n                <LemonTable\n                    columns={columns}\n                    loading={rolesLoading || organizationResourcePermissionsLoading}\n                    dataSource={[{ name: 'organization_default' } as RoleType, ...roles]}\n                />\n\n                <LemonButton\n                    type=\"primary\"\n                    onClick={openCreateRoleModal}\n                    className=\"mt-4\"\n                    data-attr=\"create-role-button\"\n                    disabledReason={restrictionReason}\n                >\n                    Create role\n                </LemonButton>\n\n                <CreateRoleModal />\n            </>\n        </PayGateMini>\n    )\n}\n", "import { IconTrash } from '@posthog/icons'\nimport { LemonInput } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { usersLemonSelectOptions } from 'lib/components/UserSelectItem'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonInputSelect } from 'lib/lemon-ui/LemonInputSelect/LemonInputSelect'\nimport { LemonModal } from 'lib/lemon-ui/LemonModal'\nimport { ProfilePicture } from 'lib/lemon-ui/ProfilePicture'\nimport { Spinner } from 'lib/lemon-ui/Spinner/Spinner'\nimport { useState } from 'react'\nimport { organizationLogic } from 'scenes/organizationLogic'\n\nimport { RoleMemberType, UserType } from '~/types'\n\nimport { rolesLogic } from './rolesLogic'\n\nexport function CreateRoleModal(): JSX.Element {\n    const {\n        roleInFocus,\n        createRoleModalShown,\n        roleMembersToAdd,\n        roleMembersInFocusLoading,\n        addableMembers,\n        rolesLoading,\n        roleMembersInFocus,\n    } = useValues(rolesLogic)\n    const { setCreateRoleModalShown, setRoleMembersToAdd, createRole, deleteRoleMember, addRoleMembers, deleteRole } =\n        useActions(rolesLogic)\n\n    const { isAdminOrOwner } = useValues(organizationLogic)\n\n    const [roleName, setRoleName] = useState('')\n\n    const isNewRole = !roleInFocus\n\n    const handleClose = (): void => {\n        setCreateRoleModalShown(false)\n        setRoleMembersToAdd([])\n    }\n\n    const handleSubmit = (): void => {\n        createRole(roleName)\n        setRoleName('')\n    }\n\n    return (\n        <LemonModal\n            onClose={handleClose}\n            isOpen={createRoleModalShown}\n            title={\n                isNewRole\n                    ? 'Create role'\n                    : isAdminOrOwner\n                    ? `Edit ${roleInFocus.name} role`\n                    : `${roleInFocus.name} role`\n            }\n            footer={\n                rolesLoading ? (\n                    <Spinner textColored />\n                ) : isAdminOrOwner ? (\n                    <div className=\"flex flex-row justify-between w-full\">\n                        <div>\n                            {!isNewRole && (\n                                <LemonButton\n                                    htmlType=\"submit\"\n                                    type=\"secondary\"\n                                    status=\"danger\"\n                                    onClick={() => deleteRole(roleInFocus)}\n                                    data-attr=\"role-delete-submit\"\n                                >\n                                    Delete role\n                                </LemonButton>\n                            )}\n                        </div>\n                        {isNewRole && (\n                            <LemonButton type=\"primary\" onClick={handleSubmit}>\n                                Save\n                            </LemonButton>\n                        )}\n                    </div>\n                ) : undefined\n            }\n        >\n            {isNewRole && (\n                <div className=\"mb-5\">\n                    <h5>Role Name</h5>\n                    <LemonInput placeholder=\"Product\" autoFocus value={roleName} onChange={setRoleName} />\n                </div>\n            )}\n            {isAdminOrOwner && (\n                <div className=\"mb-5\">\n                    <h5>Members</h5>\n                    <div className=\"flex gap-2\">\n                        <div className=\"flex-1\">\n                            <LemonInputSelect\n                                placeholder=\"Search for team members to add\u2026\"\n                                value={roleMembersToAdd}\n                                loading={roleMembersInFocusLoading}\n                                onChange={(newValues: string[]) => setRoleMembersToAdd(newValues)}\n                                mode=\"multiple\"\n                                data-attr=\"subscribed-emails\"\n                                options={usersLemonSelectOptions(addableMembers, 'uuid')}\n                            />\n                        </div>\n                        {!isNewRole && (\n                            <LemonButton\n                                type=\"primary\"\n                                loading={roleMembersInFocusLoading}\n                                disabled={roleMembersToAdd.length === 0}\n                                onClick={() => addRoleMembers({ role: roleInFocus, membersToAdd: roleMembersToAdd })}\n                            >\n                                Add\n                            </LemonButton>\n                        )}\n                    </div>\n                </div>\n            )}\n            {!isNewRole && (\n                <>\n                    <h5>Role Members</h5>\n                    {roleMembersInFocus.length > 0 ? (\n                        <div className=\"mt-2 pb-2 rounded overflow-y-auto max-h-80\">\n                            {roleMembersInFocus.map((member) => {\n                                return (\n                                    <MemberRow\n                                        key={member.id}\n                                        member={member}\n                                        deleteMember={(roleMemberUuid) => deleteRoleMember({ roleMemberUuid })}\n                                        isAdminOrOwner={!!isAdminOrOwner}\n                                    />\n                                )\n                            })}\n                        </div>\n                    ) : (\n                        <div className=\"text-secondary mb-2\">No members added yet</div>\n                    )}\n                </>\n            )}\n        </LemonModal>\n    )\n}\n\nfunction MemberRow({\n    member,\n    deleteMember,\n    isAdminOrOwner,\n}: {\n    member: RoleMemberType\n    deleteMember?: (roleMemberUuid: UserType['uuid']) => void\n    isAdminOrOwner: boolean\n}): JSX.Element {\n    const { user } = member\n\n    return (\n        <div className=\"flex items-center justify-between mt-2 h-8\">\n            <ProfilePicture user={user} size=\"md\" showName />\n            {isAdminOrOwner && deleteMember && (\n                <LemonButton\n                    icon={<IconTrash />}\n                    onClick={() => deleteMember(member.id)}\n                    tooltip=\"Remove user from role\"\n                    type=\"tertiary\"\n                    size=\"small\"\n                />\n            )}\n        </div>\n    )\n}\n", "import { Resource } from '~/types'\n\nexport function getSingularType(type: Resource): string {\n    switch (type) {\n        case Resource.FEATURE_FLAGS:\n            return 'flag'\n        default:\n            return 'resource'\n    }\n}\n", "import { IconCheckCircle, IconInfo, IconLock, IconTrash, IconWarning } from '@posthog/icons'\nimport { useActions, useValues } from 'kea'\nimport { PayGateMini } from 'lib/components/PayGateMini/PayGateMini'\nimport { RestrictionScope } from 'lib/components/RestrictedArea'\nimport { useRestrictedArea } from 'lib/components/RestrictedArea'\nimport { OrganizationMembershipLevel } from 'lib/constants'\nimport { IconExclamation, IconOffline } from 'lib/lemon-ui/icons'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonDialog } from 'lib/lemon-ui/LemonDialog'\nimport { LemonSwitch } from 'lib/lemon-ui/LemonSwitch/LemonSwitch'\nimport { LemonTable, LemonTableColumns } from 'lib/lemon-ui/LemonTable'\nimport { LemonTag } from 'lib/lemon-ui/LemonTag/LemonTag'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\nimport { urls } from 'scenes/urls'\n\nimport { AvailableFeature, OrganizationDomainType } from '~/types'\n\nimport { AddDomainModal } from './AddDomainModal'\nimport { ConfigureSAMLModal } from './ConfigureSAMLModal'\nimport { SSOSelect } from './SSOSelect'\nimport { verifiedDomainsLogic } from './verifiedDomainsLogic'\nimport { VerifyDomainModal } from './VerifyDomainModal'\n\nconst iconStyle = { marginRight: 4, fontSize: '1.15em', paddingTop: 2 }\n\nexport function VerifiedDomains(): JSX.Element {\n    const { verifiedDomainsLoading, updatingDomainLoading } = useValues(verifiedDomainsLogic)\n    const { setAddModalShown } = useActions(verifiedDomainsLogic)\n\n    const restrictionReason = useRestrictedArea({\n        minimumAccessLevel: OrganizationMembershipLevel.Admin,\n        scope: RestrictionScope.Organization,\n    })\n\n    return (\n        <PayGateMini feature={AvailableFeature.AUTOMATIC_PROVISIONING}>\n            <p>\n                Enable users to sign up automatically with an email address on verified domains and enforce SSO for\n                accounts under your domains.\n            </p>\n\n            <VerifiedDomainsTable />\n            <LemonButton\n                type=\"primary\"\n                onClick={() => setAddModalShown(true)}\n                className=\"mt-4\"\n                disabledReason={verifiedDomainsLoading || updatingDomainLoading ? 'loading...' : restrictionReason}\n            >\n                Add domain\n            </LemonButton>\n        </PayGateMini>\n    )\n}\n\nfunction VerifiedDomainsTable(): JSX.Element {\n    const {\n        verifiedDomains,\n        verifiedDomainsLoading,\n        currentOrganization,\n        updatingDomainLoading,\n        isSSOEnforcementAvailable,\n        isSAMLAvailable,\n    } = useValues(verifiedDomainsLogic)\n    const { updateDomain, deleteVerifiedDomain, setVerifyModal, setConfigureSAMLModalId } =\n        useActions(verifiedDomainsLogic)\n    const { preflight } = useValues(preflightLogic)\n\n    const restrictionReason = useRestrictedArea({\n        minimumAccessLevel: OrganizationMembershipLevel.Admin,\n        scope: RestrictionScope.Organization,\n    })\n\n    const columns: LemonTableColumns<OrganizationDomainType> = [\n        {\n            key: 'domain',\n            title: 'Domain name',\n            dataIndex: 'domain',\n            render: function RenderDomainName(_, { domain }) {\n                return <LemonTag>{domain}</LemonTag>\n            },\n        },\n        ...(preflight?.cloud\n            ? ([\n                  {\n                      key: 'is_verified',\n                      title: (\n                          <div className=\"flex items-center space-x-1\">\n                              <span>Verification</span>\n                              <Tooltip title=\"Verification (through DNS) is required to use domains for authentication (e.g. SAML or enforce SSO).\">\n                                  <IconInfo />\n                              </Tooltip>\n                          </div>\n                      ),\n                      render: function Verified(_, { is_verified, verified_at }) {\n                          return is_verified ? (\n                              <div className=\"flex items-center text-success\">\n                                  <IconCheckCircle style={iconStyle} /> Verified\n                              </div>\n                          ) : verified_at ? (\n                              <div className=\"flex items-center text-danger\">\n                                  <IconExclamation style={iconStyle} /> Verification expired\n                              </div>\n                          ) : (\n                              <div className=\"flex items-center text-warning\">\n                                  <IconWarning style={iconStyle} /> Pending verification\n                              </div>\n                          )\n                      },\n                  },\n              ] as LemonTableColumns<OrganizationDomainType>)\n            : []),\n        {\n            key: 'jit_provisioning_enabled',\n            title: (\n                <div className=\"flex items-center space-x-1\">\n                    <span>Automatic provisioning</span>\n                    <Tooltip\n                        title={`Enables just-in-time provisioning. If a user logs in with SSO with an email address on this domain an account will be created in ${\n                            currentOrganization?.name || 'this organization'\n                        } if it does not exist.`}\n                    >\n                        <IconInfo />\n                    </Tooltip>\n                </div>\n            ),\n            render: function AutomaticProvisioning(_, { jit_provisioning_enabled, id, is_verified }) {\n                return is_verified ? (\n                    <div className=\"flex items-center\">\n                        <LemonSwitch\n                            checked={jit_provisioning_enabled}\n                            disabled={updatingDomainLoading || !is_verified}\n                            disabledReason={restrictionReason}\n                            onChange={(checked) => updateDomain({ id, jit_provisioning_enabled: checked })}\n                            label={\n                                <span className=\"font-normal\">{jit_provisioning_enabled ? 'Enabled' : 'Disabled'}</span>\n                            }\n                        />\n                    </div>\n                ) : (\n                    <i className=\"text-secondary\">Verify domain to enable automatic provisioning</i>\n                )\n            },\n        },\n        {\n            key: 'sso_enforcement',\n            title: (\n                <div className=\"flex items-center space-x-1\">\n                    <span>Enforce SSO</span>\n                    <Tooltip title=\"Require users with email addresses on this domain to always log in using a specific SSO provider.\">\n                        <IconInfo />\n                    </Tooltip>\n                </div>\n            ),\n            render: function SSOEnforcement(_, { sso_enforcement, is_verified, id, has_saml }, index) {\n                if (!isSSOEnforcementAvailable) {\n                    return index === 0 ? (\n                        <Link to={urls.organizationBilling()} className=\"flex items-center\">\n                            <IconLock style={{ color: 'var(--warning)', marginLeft: 4 }} /> Upgrade to enable SSO\n                            enforcement\n                        </Link>\n                    ) : (\n                        <></>\n                    )\n                }\n                return is_verified ? (\n                    <SSOSelect\n                        value={sso_enforcement}\n                        loading={updatingDomainLoading}\n                        onChange={(val) => updateDomain({ id, sso_enforcement: val })}\n                        samlAvailable={has_saml}\n                        disabledReason={restrictionReason}\n                    />\n                ) : (\n                    <i className=\"text-secondary\">Verify domain to enable</i>\n                )\n            },\n        },\n        {\n            key: 'saml',\n            title: 'SAML',\n            render: function SAML(_, { is_verified, saml_acs_url, saml_entity_id, saml_x509_cert, has_saml }, index) {\n                if (!isSAMLAvailable) {\n                    return index === 0 ? (\n                        <Link to={urls.organizationBilling()} className=\"flex items-center\">\n                            <IconLock style={{ color: 'var(--warning)', marginLeft: 4 }} /> Upgrade to enable SAML\n                        </Link>\n                    ) : (\n                        <></>\n                    )\n                }\n                return is_verified ? (\n                    <>\n                        {has_saml ? (\n                            <div className=\"flex items-center text-success\">\n                                <IconCheckCircle style={iconStyle} /> SAML enabled\n                            </div>\n                        ) : saml_acs_url || saml_entity_id || saml_x509_cert ? (\n                            <div className=\"flex items-center text-warning\">\n                                <IconWarning style={iconStyle} /> SAML partially configured\n                            </div>\n                        ) : (\n                            <div className=\"flex items-center\">\n                                <IconOffline style={iconStyle} /> SAML not set up\n                            </div>\n                        )}\n                    </>\n                ) : (\n                    <i className=\"text-secondary\">Verify domain to enable</i>\n                )\n            },\n        },\n        {\n            key: 'verify',\n            width: 32,\n            align: 'center',\n            render: function RenderActions(_, { is_verified, id }) {\n                return is_verified ? (\n                    <></>\n                ) : (\n                    <LemonButton type=\"primary\" onClick={() => setVerifyModal(id)} disabledReason={restrictionReason}>\n                        Verify\n                    </LemonButton>\n                )\n            },\n        },\n        {\n            key: 'actions',\n            width: 32,\n            align: 'center',\n            render: function RenderActions(_, { is_verified, id, domain }) {\n                return (\n                    <More\n                        overlay={\n                            <>\n                                {is_verified && (\n                                    <LemonButton\n                                        onClick={() => setConfigureSAMLModalId(id)}\n                                        fullWidth\n                                        disabledReason={\n                                            restrictionReason ||\n                                            (!isSAMLAvailable ? 'Upgrade to enable SAML' : undefined)\n                                        }\n                                    >\n                                        Configure SAML\n                                    </LemonButton>\n                                )}\n                                <LemonButton\n                                    status=\"danger\"\n                                    onClick={() =>\n                                        LemonDialog.open({\n                                            title: `Remove ${domain}?`,\n                                            description:\n                                                'This cannot be undone. If you have SAML configured or SSO enforced,it will be immediately disabled.',\n                                            primaryButton: {\n                                                status: 'danger',\n                                                children: 'Remove domain',\n                                                onClick: () => deleteVerifiedDomain(id),\n                                            },\n                                            secondaryButton: {\n                                                children: 'Cancel',\n                                            },\n                                        })\n                                    }\n                                    fullWidth\n                                    icon={<IconTrash />}\n                                    disabledReason={restrictionReason}\n                                >\n                                    Remove domain\n                                </LemonButton>\n                            </>\n                        }\n                    />\n                )\n            },\n        },\n    ]\n    return (\n        <div>\n            <LemonTable\n                dataSource={verifiedDomains}\n                columns={columns}\n                loading={verifiedDomainsLoading}\n                rowKey=\"id\"\n                emptyState=\"You haven't registered any authentication domains yet.\"\n            />\n            <AddDomainModal />\n            <ConfigureSAMLModal />\n            <VerifyDomainModal />\n        </div>\n    )\n}\n", "import { LemonInput } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { DOMAIN_REGEX } from 'lib/constants'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonModal } from 'lib/lemon-ui/LemonModal'\nimport { useState } from 'react'\n\nimport { verifiedDomainsLogic } from './verifiedDomainsLogic'\n\nexport function AddDomainModal(): JSX.Element {\n    const { addModalShown, verifiedDomainsLoading } = useValues(verifiedDomainsLogic)\n    const { setAddModalShown, addVerifiedDomain } = useActions(verifiedDomainsLogic)\n    const [newDomain, setNewDomain] = useState('')\n    const [submitted, setSubmitted] = useState(false)\n\n    const errored = !newDomain || !newDomain.match(DOMAIN_REGEX)\n\n    const clean = (): void => {\n        setNewDomain('')\n        setSubmitted(false)\n    }\n\n    const handleClose = (): void => {\n        setAddModalShown(false)\n        clean()\n    }\n\n    const handleSubmit = (): void => {\n        setSubmitted(true)\n        if (!errored) {\n            addVerifiedDomain(newDomain)\n            clean()\n        }\n    }\n\n    return (\n        <LemonModal\n            onClose={handleClose}\n            isOpen={addModalShown}\n            title=\"Add authentication domain\"\n            footer={\n                <LemonButton\n                    type=\"primary\"\n                    disabled={newDomain === '' || (submitted && errored) || verifiedDomainsLoading}\n                    onClick={handleSubmit}\n                >\n                    Add domain\n                </LemonButton>\n            }\n        >\n            <LemonInput\n                placeholder=\"posthog.com\"\n                autoFocus\n                value={newDomain}\n                onChange={setNewDomain}\n                onPressEnter={handleSubmit}\n            />\n            {submitted && errored && (\n                <span className=\"text-danger text-xs\">\n                    Please enter a valid domain or subdomain name (e.g. my.posthog.com)\n                </span>\n            )}\n        </LemonModal>\n    )\n}\n", "import { actions, afterMount, connect, kea, listeners, path, reducers, selectors } from 'kea'\nimport { forms } from 'kea-forms'\nimport { loaders } from 'kea-loaders'\nimport api from 'lib/api'\nimport { SECURE_URL_REGEX } from 'lib/constants'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast/LemonToast'\nimport { organizationLogic } from 'scenes/organizationLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { AvailableFeature, OrganizationDomainType } from '~/types'\n\nimport type { verifiedDomainsLogicType } from './verifiedDomainsLogicType'\n\nexport type OrganizationDomainUpdatePayload = Partial<\n    Pick<OrganizationDomainType, 'jit_provisioning_enabled' | 'sso_enforcement'>\n> &\n    Pick<OrganizationDomainType, 'id'>\n\nexport type SAMLConfigType = Partial<\n    Pick<OrganizationDomainType, 'saml_acs_url' | 'saml_entity_id' | 'saml_x509_cert'> &\n        Pick<OrganizationDomainType, 'id'>\n>\n\nexport const isSecureURL = (url: string): boolean => {\n    try {\n        const parsed = new URL(url)\n        return parsed.protocol === 'https:'\n    } catch (_) {\n        return false\n    }\n}\n\nexport const verifiedDomainsLogic = kea<verifiedDomainsLogicType>([\n    path(['scenes', 'organization', 'verifiedDomainsLogic']),\n    connect({ values: [organizationLogic, ['currentOrganization']], logic: [userLogic] }),\n    actions({\n        replaceDomain: (domain: OrganizationDomainType) => ({ domain }),\n        setAddModalShown: (shown: boolean) => ({ shown }),\n        setConfigureSAMLModalId: (id: string | null) => ({ id }),\n        setVerifyModal: (id: string | null) => ({ id }),\n    }),\n    reducers({\n        verifiedDomains: [\n            [] as OrganizationDomainType[],\n            {\n                replaceDomain: (state, { domain }) => {\n                    const domains: OrganizationDomainType[] = [...state.filter(({ id }) => id !== domain.id), domain]\n                    domains.sort((a, b) => a.domain.localeCompare(b.domain))\n                    return domains\n                },\n            },\n        ],\n        addModalShown: [\n            false,\n            {\n                setAddModalShown: (_, { shown }) => shown,\n                addVerifiedDomainSuccess: () => false,\n            },\n        ],\n        configureSAMLModalId: [\n            null as null | string,\n            {\n                setConfigureSAMLModalId: (_, { id }) => id,\n            },\n        ],\n        verifyModal: [\n            null as string | null,\n            {\n                setVerifyModal: (_, { id }) => id,\n            },\n        ],\n    }),\n    loaders(({ values, actions }) => ({\n        verifiedDomains: [\n            [] as OrganizationDomainType[],\n            {\n                loadVerifiedDomains: async () =>\n                    (await api.get(`api/organizations/${values.currentOrganization?.id}/domains`))\n                        .results as OrganizationDomainType[],\n                addVerifiedDomain: async (domain: string) => {\n                    const response = await api.create<OrganizationDomainType>(\n                        `api/organizations/${values.currentOrganization?.id}/domains`,\n                        {\n                            domain,\n                        }\n                    )\n                    return [response, ...values.verifiedDomains]\n                },\n                deleteVerifiedDomain: async (id: string) => {\n                    await api.delete(`api/organizations/${values.currentOrganization?.id}/domains/${id}`)\n                    return [...values.verifiedDomains.filter((domain) => domain.id !== id)]\n                },\n            },\n        ],\n        updatingDomain: [\n            false,\n            {\n                updateDomain: async (payload: OrganizationDomainUpdatePayload) => {\n                    const response = await api.update<OrganizationDomainType>(\n                        `api/organizations/${values.currentOrganization?.id}/domains/${payload.id}`,\n                        { ...payload, id: undefined }\n                    )\n                    lemonToast.success('Domain updated successfully! Changes will take immediately.')\n                    actions.replaceDomain(response)\n                    return false\n                },\n                verifyDomain: async () => {\n                    const response = await api.create<OrganizationDomainType>(\n                        `api/organizations/${values.currentOrganization?.id}/domains/${values.verifyModal}/verify`\n                    )\n                    if (response.is_verified) {\n                        lemonToast.success('Domain verified successfully.')\n                    } else {\n                        lemonToast.warning(\n                            'We could not verify your domain yet. DNS propagation may take up to 72 hours. Please try again later.'\n                        )\n                    }\n                    actions.replaceDomain(response)\n                    actions.setVerifyModal(null)\n                    return false\n                },\n            },\n        ],\n    })),\n    listeners(({ actions, values }) => ({\n        setConfigureSAMLModalId: ({ id }) => {\n            const domain = values.verifiedDomains.find(({ id: _idToFind }) => _idToFind === id)\n            if (id && domain) {\n                const { saml_acs_url, saml_entity_id, saml_x509_cert } = domain\n                actions.setSamlConfigValues({ saml_acs_url, saml_entity_id, saml_x509_cert, id })\n            }\n        },\n    })),\n    selectors({\n        domainBeingVerified: [\n            (s) => [s.verifiedDomains, s.verifyModal],\n            (verifiedDomains, verifyingId): OrganizationDomainType | null =>\n                (verifyingId && verifiedDomains.find(({ id }) => id === verifyingId)) || null,\n        ],\n        isSSOEnforcementAvailable: [\n            () => [userLogic.selectors.hasAvailableFeature],\n            (hasAvailableFeature): boolean => hasAvailableFeature(AvailableFeature.SSO_ENFORCEMENT),\n        ],\n        isSAMLAvailable: [\n            () => [userLogic.selectors.hasAvailableFeature],\n            (hasAvailableFeature): boolean => hasAvailableFeature(AvailableFeature.SAML),\n        ],\n    }),\n    afterMount(({ actions }) => actions.loadVerifiedDomains()),\n    forms(({ actions, values }) => ({\n        samlConfig: {\n            defaults: {} as SAMLConfigType,\n            errors: (payload) => ({\n                saml_acs_url:\n                    payload.saml_acs_url && !payload.saml_acs_url.match(SECURE_URL_REGEX)\n                        ? 'Please enter a valid URL, including https://'\n                        : undefined,\n            }),\n            submit: async (payload, breakpoint) => {\n                const { id, ...updateParams } = payload\n                if (!id) {\n                    return\n                }\n                const response = await api.update<OrganizationDomainType>(\n                    `api/organizations/${values.currentOrganization?.id}/domains/${payload.id}`,\n                    {\n                        ...updateParams,\n                    }\n                )\n                breakpoint()\n                actions.replaceDomain(response)\n                actions.setConfigureSAMLModalId(null)\n                actions.setSamlConfigValues({})\n                lemonToast.success(`SAML configuration for ${response.domain} updated successfully.`)\n            },\n        },\n    })),\n])\n", "import { Link } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport { CopyToClipboardInline } from 'lib/components/CopyToClipboard'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { LemonInput } from 'lib/lemon-ui/LemonInput/LemonInput'\nimport { LemonModal } from 'lib/lemon-ui/LemonModal'\nimport { LemonTextArea } from 'lib/lemon-ui/LemonTextArea/LemonTextArea'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\n\nimport { verifiedDomainsLogic } from './verifiedDomainsLogic'\n\nexport function ConfigureSAMLModal(): JSX.Element {\n    const { configureSAMLModalId, isSamlConfigSubmitting, samlConfig } = useValues(verifiedDomainsLogic)\n    const { setConfigureSAMLModalId } = useActions(verifiedDomainsLogic)\n    const { preflight } = useValues(preflightLogic)\n    const siteUrl = preflight?.site_url ?? window.location.origin\n\n    const samlReady = samlConfig.saml_acs_url && samlConfig.saml_entity_id && samlConfig.saml_x509_cert\n\n    const handleClose = (): void => {\n        setConfigureSAMLModalId(null)\n        // clean()\n    }\n\n    return (\n        <LemonModal onClose={handleClose} isOpen={!!configureSAMLModalId} title=\"\" simple>\n            <Form logic={verifiedDomainsLogic} formKey=\"samlConfig\" enableFormOnSubmit className=\"LemonModal__layout \">\n                <LemonModal.Header>\n                    <h3>Configure SAML authentication and provisioning</h3>\n                </LemonModal.Header>\n                <LemonModal.Content className=\"space-y-2\">\n                    <p>\n                        <Link to=\"https://posthog.com/docs/data/sso#setting-up-saml\" target=\"_blank\" targetBlankIcon>\n                            Read the docs\n                        </Link>\n                    </p>\n                    <LemonField label=\"ACS Consumer URL\" name=\"_ACSConsumerUrl\">\n                        <CopyToClipboardInline>{`${siteUrl}/complete/saml/`}</CopyToClipboardInline>\n                    </LemonField>\n                    <LemonField label=\"RelayState\" name=\"_RelayState\">\n                        <CopyToClipboardInline>{configureSAMLModalId || 'unknown'}</CopyToClipboardInline>\n                    </LemonField>\n                    <LemonField label=\"Audience / Entity ID\" name=\"_Audience\">\n                        <CopyToClipboardInline>{siteUrl}</CopyToClipboardInline>\n                    </LemonField>\n                    <LemonField name=\"saml_acs_url\" label=\"SAML ACS URL\">\n                        <LemonInput className=\"ph-ignore-input\" placeholder=\"Your IdP's ACS or single sign-on URL.\" />\n                    </LemonField>\n                    <LemonField name=\"saml_entity_id\" label=\"SAML Entity ID\">\n                        <LemonInput className=\"ph-ignore-input\" placeholder=\"Entity ID provided by your IdP.\" />\n                    </LemonField>\n                    <LemonField name=\"saml_x509_cert\" label=\"SAML X.509 Certificate\">\n                        <LemonTextArea\n                            className=\"ph-ignore-input\"\n                            minRows={10}\n                            placeholder={`Enter the public certificate of your IdP. Keep all line breaks.\\n-----BEGIN CERTIFICATE-----\\nMIICVjCCAb+gAwIBAgIBADANBgkqhkiG9w0BAQ0FADBIMQswCQYDVQQGEwJ1czEL\\n-----END CERTIFICATE-----`}\n                        />\n                    </LemonField>\n                    {!samlReady && (\n                        <LemonBanner type=\"info\">\n                            SAML will not be enabled unless you enter all attributes above. However you can still\n                            settings as draft.\n                        </LemonBanner>\n                    )}\n                </LemonModal.Content>\n                <LemonModal.Footer>\n                    <LemonButton loading={isSamlConfigSubmitting} type=\"primary\" htmlType=\"submit\">\n                        Save settings\n                    </LemonButton>\n                </LemonModal.Footer>\n            </Form>\n        </LemonModal>\n    )\n}\n", "import { LemonSelect, LemonSelectOptions } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { SocialLoginIcon } from 'lib/components/SocialLoginButton/SocialLoginIcon'\nimport { SSO_PROVIDER_NAMES } from 'lib/constants'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\n\nimport { SSOProvider } from '~/types'\n\nexport interface SSOSelectInterface {\n    value: SSOProvider | ''\n    loading: boolean\n    onChange: (value: SSOProvider | '') => void\n    samlAvailable: boolean\n    disabledReason?: string | null\n}\n\nexport function SSOSelect({\n    value,\n    loading,\n    onChange,\n    samlAvailable,\n    disabledReason,\n}: SSOSelectInterface): JSX.Element | null {\n    const { preflight } = useValues(preflightLogic)\n\n    if (!preflight) {\n        return null\n    }\n\n    const authProviders = Object.keys(preflight.available_social_auth_providers) as SSOProvider[]\n    const options: LemonSelectOptions<SSOProvider | ''> = [{ value: '', label: \"Don't enforce\" }]\n\n    authProviders.forEach((key) => {\n        options.push({\n            value: key,\n            label: SSO_PROVIDER_NAMES[key],\n            disabledReason: preflight.available_social_auth_providers[key]\n                ? undefined\n                : 'This provider is not configured.',\n            icon: <SocialLoginIcon provider={key} className=\"w-4 h-4\" />,\n        })\n    })\n\n    options.push({\n        value: 'saml',\n        label: SSO_PROVIDER_NAMES['saml'],\n        disabledReason: !samlAvailable ? 'This provider is not configured.' : undefined,\n        icon: <SocialLoginIcon provider=\"saml\" className=\"w-4 h-4\" />,\n    })\n\n    return (\n        <LemonSelect\n            value={value}\n            options={options}\n            loading={loading}\n            disabledReason={loading ? 'Cannot change while loading' : disabledReason}\n            fullWidth\n            onChange={onChange}\n        />\n    )\n}\n", "import { useActions, useValues } from 'kea'\nimport { CopyToClipboardInline } from 'lib/components/CopyToClipboard'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { LemonModal } from 'lib/lemon-ui/LemonModal'\nimport { LemonTag } from 'lib/lemon-ui/LemonTag/LemonTag'\n\nimport { verifiedDomainsLogic } from './verifiedDomainsLogic'\n\nexport function VerifyDomainModal(): JSX.Element {\n    const { domainBeingVerified, updatingDomainLoading } = useValues(verifiedDomainsLogic)\n    const { setVerifyModal, verifyDomain } = useActions(verifiedDomainsLogic)\n    const challengeName = `_posthog-challenge.${domainBeingVerified?.domain}.`\n\n    return (\n        <LemonModal\n            isOpen={!!domainBeingVerified}\n            onClose={() => setVerifyModal(null)}\n            title=\"Verify your domain\"\n            description={\n                <>\n                    <LemonTag className=\"uppercase\">{domainBeingVerified?.domain || ''}</LemonTag>\n                    <p>To verify your domain, you need to add a record to your DNS zone.</p>\n                </>\n            }\n            footer={\n                <>\n                    <LemonButton type=\"secondary\" onClick={() => setVerifyModal(null)}>\n                        Verify later\n                    </LemonButton>\n                    <LemonButton type=\"primary\" disabled={updatingDomainLoading} onClick={verifyDomain}>\n                        Verify\n                    </LemonButton>\n                </>\n            }\n        >\n            <div>\n                <ol>\n                    <li>Sign in to your DNS provider.</li>\n                    <li>\n                        Add the following <b>TXT</b> record.\n                        <div className=\"my-4 space-y-2\">\n                            <LemonField.Pure label=\"Name\">\n                                <div className=\"flex items-center gap-2\">\n                                    <div className=\"border rounded p-2 h-10 flex-1\">{challengeName}</div>\n                                    <CopyToClipboardInline explicitValue={challengeName} selectable={true} />\n                                </div>\n                            </LemonField.Pure>\n\n                            <LemonField.Pure label=\"Value or content\">\n                                <div className=\"flex items-center gap-2\">\n                                    <div className=\"border rounded p-2 h-10 flex-1\">\n                                        {domainBeingVerified?.verification_challenge}\n                                    </div>\n                                    {domainBeingVerified && (\n                                        <CopyToClipboardInline\n                                            explicitValue={domainBeingVerified.verification_challenge}\n                                            selectable={true}\n                                        />\n                                    )}\n                                </div>\n                            </LemonField.Pure>\n                            <LemonField.Pure label=\"TTL\">\n                                <div className=\"flex items-center gap-2\">\n                                    <div className=\"border rounded p-2 h-10 flex-1\">Default or 3600</div>\n                                    <CopyToClipboardInline explicitValue=\"3600\" selectable={true} />\n                                </div>\n                            </LemonField.Pure>\n                        </div>\n                    </li>\n                    <li>Press verify below.</li>\n                </ol>\n            </div>\n        </LemonModal>\n    )\n}\n", "import { IconArrowRight } from '@posthog/icons'\nimport { LemonButton, LemonInput, LemonModal, LemonSelect } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { RestrictionScope, useRestrictedArea } from 'lib/components/RestrictedArea'\nimport { OrganizationMembershipLevel } from 'lib/constants'\nimport { Dispatch, SetStateAction, useState } from 'react'\nimport { projectLogic } from 'scenes/projectLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { OrganizationBasicType } from '~/types'\n\nexport function MoveProjectModal({\n    isOpen,\n    setIsOpen,\n    organization,\n}: {\n    isOpen: boolean\n    setIsOpen: Dispatch<SetStateAction<boolean>>\n    organization: OrganizationBasicType\n}): JSX.Element {\n    const { currentProject, projectBeingMovedLoading } = useValues(projectLogic)\n    const { moveProject } = useActions(projectLogic)\n\n    const [isConfirmed, setConfirmed] = useState(false)\n\n    return (\n        <LemonModal\n            title=\"Move the project to another organization?\"\n            onClose={!projectBeingMovedLoading ? () => setIsOpen(false) : undefined}\n            closable={!projectBeingMovedLoading}\n            maxWidth=\"30rem\"\n            footer={\n                <>\n                    <LemonButton\n                        disabledReason={projectBeingMovedLoading && 'Moving...'}\n                        type=\"secondary\"\n                        onClick={() => setIsOpen(false)}\n                    >\n                        Cancel\n                    </LemonButton>\n                    <LemonButton\n                        type=\"secondary\"\n                        disabled={!isConfirmed}\n                        loading={projectBeingMovedLoading}\n                        data-attr=\"move-project-ok\"\n                        status=\"danger\"\n                        onClick={currentProject ? () => moveProject(currentProject, organization.id) : undefined}\n                    >{`Move ${currentProject ? currentProject.name : 'the current project'}`}</LemonButton>\n                </>\n            }\n            isOpen={isOpen}\n        >\n            <p>\n                Moving a project will mean all original organization members will lose access including via things like\n                API keys unless they also are part of the new organization.\n            </p>\n            <p>\n                Please type <strong>{currentProject ? currentProject.name : \"this project's name\"}</strong> to confirm.\n            </p>\n            <LemonInput\n                type=\"text\"\n                onChange={(value) => {\n                    if (currentProject) {\n                        setConfirmed(value.toLowerCase() === currentProject.name.toLowerCase())\n                    }\n                }}\n            />\n        </LemonModal>\n    )\n}\n\nexport function ProjectMove(): JSX.Element {\n    const { currentProject } = useValues(projectLogic)\n    const { otherOrganizations } = useValues(userLogic)\n    const [isModalVisible, setIsModalVisible] = useState(false)\n\n    const restrictedReason = useRestrictedArea({\n        minimumAccessLevel: OrganizationMembershipLevel.Admin,\n        scope: RestrictionScope.Project,\n    })\n\n    const [targetOrganization, setTargetOrganization] = useState<OrganizationBasicType | null>(null)\n\n    return (\n        <>\n            <p>\n                Move <b>{currentProject?.name}</b> to another organization?\n            </p>\n\n            <div className=\"flex items-center gap-2\">\n                <LemonSelect\n                    options={otherOrganizations.map((o) => ({\n                        label: o.name,\n                        value: o.id,\n                    }))}\n                    placeholder=\"Select target organization\"\n                    onChange={(value) => {\n                        const organization = otherOrganizations.find((o) => o.id === value)\n                        setTargetOrganization(organization || null)\n                    }}\n                    value={targetOrganization?.id}\n                />\n\n                <LemonButton\n                    status=\"danger\"\n                    type=\"secondary\"\n                    onClick={() => setIsModalVisible(true)}\n                    data-attr=\"move-project-button\"\n                    icon={<IconArrowRight />}\n                    disabledReason={\n                        restrictedReason ?? (targetOrganization === null && 'Please select the target organization')\n                    }\n                >\n                    Move {currentProject?.name || 'the current project'}\n                </LemonButton>\n            </div>\n            {targetOrganization && (\n                <MoveProjectModal\n                    isOpen={isModalVisible}\n                    setIsOpen={setIsModalVisible}\n                    organization={targetOrganization}\n                />\n            )}\n        </>\n    )\n}\n", "import { LemonButton, LemonInput } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { useState } from 'react'\nimport { projectLogic } from 'scenes/projectLogic'\n\nexport function ProjectDisplayName(): JSX.Element {\n    const { currentProject, currentProjectLoading } = useValues(projectLogic)\n    const { updateCurrentProject } = useActions(projectLogic)\n\n    const [name, setName] = useState(currentProject?.name || '')\n\n    return (\n        <div className=\"space-y-4 max-w-160\">\n            <LemonInput value={name} onChange={setName} disabled={currentProjectLoading} />\n            <LemonButton\n                type=\"primary\"\n                onClick={() => updateCurrentProject({ name })}\n                disabled={!name || !currentProject || name === currentProject.name}\n                loading={currentProjectLoading}\n            >\n                Rename project\n            </LemonButton>\n        </div>\n    )\n}\n", "import { LemonButton, LemonInput } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport PasswordStrength from 'lib/components/PasswordStrength'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\n\nimport { changePasswordLogic } from './changePasswordLogic'\n\nexport function ChangePassword(): JSX.Element {\n    const { validatedPassword, isChangePasswordSubmitting } = useValues(changePasswordLogic)\n\n    return (\n        <Form logic={changePasswordLogic} formKey=\"changePassword\" enableFormOnSubmit className=\"space-y-4 max-w-160\">\n            <LemonField name=\"current_password\" label=\"Current Password\">\n                <LemonInput\n                    autoComplete=\"current-password\"\n                    type=\"password\"\n                    className=\"ph-ignore-input\"\n                    placeholder=\"\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\"\n                />\n            </LemonField>\n\n            <LemonField\n                name=\"password\"\n                label={\n                    <div className=\"flex flex-1 items-center justify-between\">\n                        <span>Password</span>\n                        <PasswordStrength validatedPassword={validatedPassword} />\n                    </div>\n                }\n            >\n                <LemonInput\n                    autoComplete=\"current-password\"\n                    type=\"password\"\n                    className=\"ph-ignore-input\"\n                    placeholder=\"\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\"\n                />\n            </LemonField>\n\n            <LemonButton type=\"primary\" htmlType=\"submit\" loading={isChangePasswordSubmitting}>\n                Change password\n            </LemonButton>\n        </Form>\n    )\n}\n", "import { lemonToast } from '@posthog/lemon-ui'\nimport { connect, kea, path, selectors } from 'kea'\nimport { forms } from 'kea-forms'\nimport api from 'lib/api'\nimport { ValidatedPasswordResult, validatePassword } from 'lib/components/PasswordStrength'\nimport { userLogic } from 'scenes/userLogic'\n\nimport type { changePasswordLogicType } from './changePasswordLogicType'\n\nexport interface ChangePasswordForm {\n    current_password: string\n    password: string\n}\n\nexport const changePasswordLogic = kea<changePasswordLogicType>([\n    path(['scenes', 'me', 'settings', 'changePasswordLogic']),\n    connect({\n        values: [userLogic, ['user']],\n    }),\n    forms(({ values, actions }) => ({\n        changePassword: {\n            defaults: {} as unknown as ChangePasswordForm,\n            errors: ({ current_password, password }) => ({\n                current_password:\n                    (!values.user || values.user.has_password) && !current_password\n                        ? 'Please enter your current password'\n                        : undefined,\n                password: !password ? 'Please enter your password to continue' : values.validatedPassword.feedback,\n            }),\n            submit: async ({ password, current_password }, breakpoint) => {\n                await breakpoint(150)\n\n                try {\n                    await api.update('api/users/@me/', {\n                        current_password,\n                        password,\n                    })\n                    actions.resetChangePassword({ password: '', current_password: '' })\n                    lemonToast.success('Password changed')\n                } catch (e: any) {\n                    actions.setChangePasswordManualErrors({ [e.attr]: e.detail })\n                }\n            },\n        },\n    })),\n    selectors({\n        validatedPassword: [\n            (s) => [s.changePassword],\n            ({ password }): ValidatedPasswordResult => {\n                return validatePassword(password)\n            },\n        ],\n    }),\n])\n", "import { LemonSwitch } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { hedgehogBuddyLogic } from 'lib/components/HedgehogBuddy/hedgehogBuddyLogic'\nimport { HedgehogOptions } from 'lib/components/HedgehogBuddy/HedgehogOptions'\n\nexport function HedgehogModeSettings(): JSX.Element {\n    const { hedgehogConfig } = useValues(hedgehogBuddyLogic)\n    const { patchHedgehogConfig } = useActions(hedgehogBuddyLogic)\n    return (\n        <>\n            <div className=\"flex gap-2\">\n                <LemonSwitch\n                    label=\"Enabled hedgehog mode\"\n                    data-attr=\"hedgehog-mode-switch\"\n                    onChange={(checked) => patchHedgehogConfig({ enabled: checked })}\n                    checked={hedgehogConfig.enabled}\n                    bordered\n                />\n                <LemonSwitch\n                    label=\"Use as profile picture\"\n                    data-attr=\"hedgehog-profile-picture\"\n                    onChange={(checked) => patchHedgehogConfig({ use_as_profile: checked })}\n                    checked={hedgehogConfig.use_as_profile}\n                    bordered\n                />\n            </div>\n\n            <div className=\"mt-4 p-2 border rounded bg-surface-primary\">\n                <HedgehogOptions />\n            </div>\n        </>\n    )\n}\n", "import { LemonSwitch } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { userLogic } from 'scenes/userLogic'\n\nexport function OptOutCapture(): JSX.Element {\n    const { user, userLoading } = useValues(userLogic)\n    const { updateUser } = useActions(userLogic)\n\n    return (\n        <div>\n            <p>\n                PostHog uses PostHog (unsurprisingly!) to capture information about how people are using the product. We\n                believe that product analytics is crucial to making PostHog the most useful it can be, for everyone.\n            </p>\n            <p>\n                We also understand there are many reasons why people don't want to or aren't allowed to send this usage\n                data. If you would like to anonymize your personal usage data, just tick the box below.\n            </p>\n            <LemonSwitch\n                label=\"Anonymize my data\"\n                data-attr=\"anonymize-data-collection\"\n                onChange={(checked) => updateUser({ anonymize_data: checked })}\n                checked={user?.anonymize_data ?? false}\n                disabled={userLoading}\n                bordered\n            />\n        </div>\n    )\n}\n", "import { IconWarning } from '@posthog/icons'\nimport { IconEllipsis, IconInfo, IconPlus } from '@posthog/icons'\nimport {\n    LemonBanner,\n    LemonDialog,\n    LemonInput,\n    LemonInputSelect,\n    LemonLabel,\n    LemonMenu,\n    LemonModal,\n    LemonSegmentedButton,\n    LemonSelect,\n    LemonTable,\n    LemonTag,\n    Link,\n    Tooltip,\n} from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport { IconErrorOutline } from 'lib/lemon-ui/icons'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { capitalizeFirstLetter, humanFriendlyDetailedTime } from 'lib/utils'\nimport { Fragment, useEffect } from 'react'\n\nimport { API_KEY_SCOPE_PRESETS, APIScopes, MAX_API_KEYS_PER_USER, personalAPIKeysLogic } from './personalAPIKeysLogic'\n\nfunction EditKeyModal(): JSX.Element {\n    const {\n        editingKeyId,\n        isEditingKeySubmitting,\n        editingKeyChanged,\n        formScopeRadioValues,\n        allAccessSelected,\n        editingKey,\n        allTeams,\n        allTeamsLoading,\n        allOrganizations,\n    } = useValues(personalAPIKeysLogic)\n    const { setEditingKeyId, setScopeRadioValue, submitEditingKey, resetScopes } = useActions(personalAPIKeysLogic)\n\n    const isNew = editingKeyId === 'new'\n\n    return (\n        <Form logic={personalAPIKeysLogic} formKey=\"editingKey\">\n            <LemonModal\n                title={`${isNew ? 'Create' : 'Edit'} personal API key`}\n                onClose={() => setEditingKeyId(null)}\n                isOpen={!!editingKeyId}\n                width=\"40rem\"\n                hasUnsavedInput={editingKeyChanged}\n                footer={\n                    <>\n                        <LemonButton type=\"secondary\" onClick={() => setEditingKeyId(null)}>\n                            Cancel\n                        </LemonButton>\n\n                        <LemonButton\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                            loading={isEditingKeySubmitting}\n                            disabled={!editingKeyChanged}\n                            onClick={() => submitEditingKey()}\n                        >\n                            {isNew ? 'Create key' : 'Save key'}\n                        </LemonButton>\n                    </>\n                }\n            >\n                <>\n                    <LemonField name=\"label\" label=\"Label\">\n                        <LemonInput placeholder='For example \"Reports bot\" or \"Zapier\"' maxLength={40} />\n                    </LemonField>\n\n                    <LemonField name=\"access_type\" className=\"mt-4 mb-2\">\n                        {({ value, onChange }) => (\n                            <div className=\"flex items-center justify-between gap-2\">\n                                <LemonLabel>Organization & project access</LemonLabel>\n                                <LemonSegmentedButton\n                                    onChange={onChange}\n                                    value={value}\n                                    options={[\n                                        { label: 'All access', value: 'all' },\n                                        {\n                                            label: 'Organizations',\n                                            value: 'organizations',\n                                        },\n                                        {\n                                            label: 'Projects',\n                                            value: 'teams',\n                                        },\n                                    ]}\n                                    size=\"small\"\n                                />\n                            </div>\n                        )}\n                    </LemonField>\n\n                    {editingKey.access_type === 'all' ? (\n                        <p className=\"mb-0\">\n                            This API key will allow access to all organizations and projects you're in.\n                        </p>\n                    ) : editingKey.access_type === 'organizations' ? (\n                        <>\n                            <p className=\"mb-2\">\n                                This API key will only allow access to selected organizations and all project within\n                                them.\n                            </p>\n\n                            <LemonField name=\"scoped_organizations\">\n                                <LemonInputSelect\n                                    mode=\"multiple\"\n                                    data-attr=\"organizations\"\n                                    options={\n                                        allOrganizations.map((org) => ({\n                                            key: `${org.id}`,\n                                            label: org.name,\n                                            labelComponent: (\n                                                <Tooltip\n                                                    title={\n                                                        <div>\n                                                            <div className=\"font-semibold\">{org.name}</div>\n                                                            <div className=\"text-xs whitespace-nowrap\">\n                                                                ID: {org.id}\n                                                            </div>\n                                                        </div>\n                                                    }\n                                                >\n                                                    <span className=\"flex-1 font-semibold\">{org.name}</span>\n                                                </Tooltip>\n                                            ),\n                                        })) ?? []\n                                    }\n                                    placeholder=\"Select organizations...\"\n                                />\n                            </LemonField>\n                        </>\n                    ) : editingKey.access_type === 'teams' ? (\n                        <>\n                            <p className=\"mb-2\">This API key will only allow access to selected projects.</p>\n                            <LemonField name=\"scoped_teams\">\n                                {({ value, onChange }) => (\n                                    <LemonInputSelect\n                                        mode=\"multiple\"\n                                        data-attr=\"teams\"\n                                        value={value.map((x: number) => String(x))}\n                                        onChange={(val: string[]) => onChange(val.map((x) => parseInt(x)))}\n                                        options={\n                                            allTeams?.map((team) => ({\n                                                key: `${team.id}`,\n                                                label: team.name,\n                                                labelComponent: (\n                                                    <Tooltip\n                                                        title={\n                                                            <div>\n                                                                <div className=\"font-semibold\">{team.name}</div>\n                                                                <div className=\"text-xs whitespace-nowrap\">\n                                                                    Token: {team.api_token}\n                                                                </div>\n                                                                <div className=\"text-xs whitespace-nowrap\">\n                                                                    Organization ID: {team.organization}\n                                                                </div>\n                                                            </div>\n                                                        }\n                                                    >\n                                                        {allOrganizations.length > 1 ? (\n                                                            <span>\n                                                                <span>\n                                                                    {\n                                                                        allOrganizations.find(\n                                                                            (org) => org.id === team.organization\n                                                                        )?.name\n                                                                    }\n                                                                </span>\n                                                                <span className=\"text-secondary mx-1\">/</span>\n                                                                <span className=\"flex-1 font-semibold\">\n                                                                    {team.name}\n                                                                </span>\n                                                            </span>\n                                                        ) : (\n                                                            <span>{team.name}</span>\n                                                        )}\n                                                    </Tooltip>\n                                                ),\n                                            })) ?? []\n                                        }\n                                        loading={allTeamsLoading}\n                                        placeholder=\"Select projects...\"\n                                    />\n                                )}\n                            </LemonField>\n                        </>\n                    ) : null}\n\n                    <div className=\"flex items-center justify-between mt-4 mb-2\">\n                        <LemonLabel>Scopes</LemonLabel>\n                        <LemonField name=\"preset\">\n                            <LemonSelect\n                                size=\"small\"\n                                placeholder=\"Select preset\"\n                                options={API_KEY_SCOPE_PRESETS}\n                                dropdownMatchSelectWidth={false}\n                                dropdownPlacement=\"bottom-end\"\n                            />\n                        </LemonField>\n                    </div>\n\n                    <LemonField name=\"scopes\">\n                        {({ error }) => (\n                            <>\n                                <p className=\"mb-0\">\n                                    API keys are scoped to limit what actions they are able to do. We highly recommend\n                                    you only give the key the permissions it needs to do its job. You can add or revoke\n                                    scopes later.\n                                </p>\n                                <p className=\"m-0\">\n                                    Your API key can never take actions for which your account is missing permissions.\n                                </p>\n\n                                {error && (\n                                    <div className=\"text-danger flex items-center gap-1 text-sm\">\n                                        <IconErrorOutline className=\"text-xl\" /> {error}\n                                    </div>\n                                )}\n\n                                {allAccessSelected ? (\n                                    <LemonBanner\n                                        type=\"warning\"\n                                        action={{\n                                            children: 'Reset',\n                                            onClick: () => resetScopes(),\n                                        }}\n                                    >\n                                        <b>This API key has full access to all supported endpoints!</b> We highly\n                                        recommend scoping this to only what it needs.\n                                    </LemonBanner>\n                                ) : (\n                                    <div>\n                                        {APIScopes.map(\n                                            ({ key, disabledActions, warnings, disabledWhenProjectScoped, info }) => {\n                                                const disabledDueToProjectScope =\n                                                    disabledWhenProjectScoped && editingKey.access_type === 'teams'\n                                                return (\n                                                    <Fragment key={key}>\n                                                        <div className=\"flex items-center justify-between gap-2 min-h-8\">\n                                                            <div\n                                                                className={clsx(\n                                                                    'flex items-center gap-1',\n                                                                    disabledDueToProjectScope && 'text-muted'\n                                                                )}\n                                                            >\n                                                                <b>{capitalizeFirstLetter(key.replace(/_/g, ' '))}</b>\n\n                                                                {info ? (\n                                                                    <Tooltip title={info}>\n                                                                        <IconInfo className=\"text-secondary text-base\" />\n                                                                    </Tooltip>\n                                                                ) : null}\n                                                            </div>\n                                                            <LemonSegmentedButton\n                                                                onChange={(value) => setScopeRadioValue(key, value)}\n                                                                value={formScopeRadioValues[key] ?? 'none'}\n                                                                options={[\n                                                                    { label: 'No access', value: 'none' },\n                                                                    {\n                                                                        label: 'Read',\n                                                                        value: 'read',\n                                                                        disabledReason: disabledActions?.includes(\n                                                                            'read'\n                                                                        )\n                                                                            ? 'Does not apply to this resource'\n                                                                            : disabledDueToProjectScope\n                                                                            ? 'Not available for project scoped keys'\n                                                                            : undefined,\n                                                                    },\n                                                                    {\n                                                                        label: 'Write',\n                                                                        value: 'write',\n                                                                        disabledReason: disabledActions?.includes(\n                                                                            'write'\n                                                                        )\n                                                                            ? 'Does not apply to this resource'\n                                                                            : disabledDueToProjectScope\n                                                                            ? 'Not available for project scoped keys'\n                                                                            : undefined,\n                                                                    },\n                                                                ]}\n                                                                size=\"xsmall\"\n                                                            />\n                                                        </div>\n                                                        {warnings?.[formScopeRadioValues[key]] && (\n                                                            <div className=\"flex items-start gap-2 text-xs italic pb-2\">\n                                                                <IconWarning className=\"text-base text-secondary mt-0.5\" />\n                                                                <span>{warnings[formScopeRadioValues[key]]}</span>\n                                                            </div>\n                                                        )}\n                                                    </Fragment>\n                                                )\n                                            }\n                                        )}\n                                    </div>\n                                )}\n                            </>\n                        )}\n                    </LemonField>\n                </>\n            </LemonModal>\n        </Form>\n    )\n}\n\ntype TagListProps = { onMoreClick: () => void; tags: string[] }\n\nfunction TagList({ tags, onMoreClick }: TagListProps): JSX.Element {\n    return (\n        <span className=\"flex flex-wrap gap-1\">\n            {tags.slice(0, 4).map((x) => (\n                <>\n                    <LemonTag key={x}>{x}</LemonTag>\n                </>\n            ))}\n            {tags.length > 4 && (\n                <Tooltip title={tags.slice(4).join(', ')}>\n                    <LemonTag onClick={onMoreClick}>+{tags.length - 4} more</LemonTag>\n                </Tooltip>\n            )}\n        </span>\n    )\n}\n\nfunction PersonalAPIKeysTable(): JSX.Element {\n    const { keys, keysLoading, allOrganizations, allTeams } = useValues(personalAPIKeysLogic)\n    const { deleteKey, loadKeys, setEditingKeyId } = useActions(personalAPIKeysLogic)\n\n    useEffect(() => loadKeys(), [])\n\n    return (\n        <LemonTable\n            dataSource={keys}\n            loading={keysLoading}\n            loadingSkeletonRows={3}\n            className=\"mt-4\"\n            nouns={['personal API key', 'personal API keys']}\n            columns={[\n                {\n                    title: 'Label',\n                    dataIndex: 'label',\n                    key: 'label',\n                    render: function RenderLabel(label, key) {\n                        return (\n                            <Link\n                                subtle\n                                className=\"text-left font-semibold truncate\"\n                                onClick={() => setEditingKeyId(key.id)}\n                            >\n                                {String(label)}\n                            </Link>\n                        )\n                    },\n                },\n                {\n                    title: 'Secret key',\n                    dataIndex: 'mask_value',\n                    key: 'mask_value',\n                    render: (_, key) =>\n                        key.mask_value ? (\n                            <span className=\"font-mono\">{key.mask_value}</span>\n                        ) : (\n                            <Tooltip title=\"This key was created before the introduction of previews\" placement=\"right\">\n                                <span className=\"inline-flex items-center gap-1 cursor-default\">\n                                    <span>No preview</span>\n                                    <IconInfo className=\"text-base\" />\n                                </span>\n                            </Tooltip>\n                        ),\n                },\n                {\n                    title: 'Scopes',\n                    key: 'scopes',\n                    dataIndex: 'scopes',\n                    render: function RenderValue(_, key) {\n                        return key.scopes[0] === '*' ? (\n                            <LemonTag type=\"warning\">All access</LemonTag>\n                        ) : (\n                            <TagList tags={key.scopes} onMoreClick={() => setEditingKeyId(key.id)} />\n                        )\n                    },\n                },\n                {\n                    title: 'Organization & project access',\n                    key: 'access',\n                    dataIndex: 'id',\n                    render: function RenderValue(_, key) {\n                        if (key?.scoped_organizations?.length) {\n                            return (\n                                <TagList\n                                    tags={key.scoped_organizations?.map(\n                                        (id) => allOrganizations.find((org) => org.id === id)?.name || ''\n                                    )}\n                                    onMoreClick={() => setEditingKeyId(key.id)}\n                                />\n                            )\n                        } else if (key?.scoped_teams?.length) {\n                            return (\n                                <TagList\n                                    tags={key.scoped_teams?.map(\n                                        (id) => allTeams?.find((org) => org.id === id)?.name || ''\n                                    )}\n                                    onMoreClick={() => setEditingKeyId(key.id)}\n                                />\n                            )\n                        }\n                        return <LemonTag type=\"warning\">All access</LemonTag>\n                    },\n                },\n                {\n                    title: 'Last Used',\n                    dataIndex: 'last_used_at',\n                    key: 'lastUsedAt',\n                    render: (_, key) => humanFriendlyDetailedTime(key.last_used_at, 'MMMM DD, YYYY', 'h A'),\n                },\n                {\n                    title: 'Created',\n                    dataIndex: 'created_at',\n                    key: 'createdAt',\n                    render: (_, key) => humanFriendlyDetailedTime(key.created_at),\n                },\n                {\n                    title: '',\n                    key: 'actions',\n                    align: 'right',\n                    width: 0,\n                    render: (_, key) => {\n                        return (\n                            <LemonMenu\n                                items={[\n                                    {\n                                        label: 'Edit',\n                                        onClick: () => setEditingKeyId(key.id),\n                                    },\n                                    {\n                                        label: 'Delete',\n                                        status: 'danger',\n                                        onClick: () => {\n                                            LemonDialog.open({\n                                                title: `Permanently delete key \"${key.label}\"?`,\n                                                description:\n                                                    'This action cannot be undone. Make sure to have removed the key from any live integrations first.',\n                                                primaryButton: {\n                                                    status: 'danger',\n                                                    children: 'Permanently delete',\n                                                    onClick: () => deleteKey(key.id),\n                                                },\n                                            })\n                                        },\n                                    },\n                                ]}\n                            >\n                                <LemonButton size=\"small\" icon={<IconEllipsis />} />\n                            </LemonMenu>\n                        )\n                    },\n                },\n            ]}\n        />\n    )\n}\n\nexport function PersonalAPIKeys(): JSX.Element {\n    const { keys } = useValues(personalAPIKeysLogic)\n    const { setEditingKeyId } = useActions(personalAPIKeysLogic)\n\n    return (\n        <>\n            <p>\n                These keys allow full access to your personal account through the API, as if you were logged in. You can\n                also use them in integrations, such as{' '}\n                <Link to=\"https://zapier.com/apps/posthog/\">our premium Zapier one</Link>.\n                <br />\n                Try not to keep disused keys around. If you have any suspicion that one of these may be compromised,\n                delete it and use a new one.\n                <br />\n                <Link to=\"https://posthog.com/docs/api/overview#authentication\">\n                    More about API authentication in PostHog Docs.\n                </Link>\n            </p>\n            <LemonButton\n                type=\"primary\"\n                icon={<IconPlus />}\n                onClick={() => setEditingKeyId('new')}\n                disabledReason={\n                    keys.length >= MAX_API_KEYS_PER_USER\n                        ? `You can only have ${MAX_API_KEYS_PER_USER} personal API keys. Remove an existing key before creating a new one.`\n                        : false\n                }\n            >\n                Create personal API key\n            </LemonButton>\n\n            <PersonalAPIKeysTable />\n\n            <EditKeyModal />\n        </>\n    )\n}\n", "import { LemonBanner, LemonDialog } from '@posthog/lemon-ui'\nimport { actions, afterMount, connect, kea, listeners, path, reducers, selectors } from 'kea'\nimport { forms } from 'kea-forms'\nimport { loaders } from 'kea-loaders'\nimport { actionToUrl, router, urlToAction } from 'kea-router'\nimport api from 'lib/api'\nimport { CodeSnippet } from 'lib/components/CodeSnippet'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast/LemonToast'\nimport { urls } from 'scenes/urls'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { APIScopeObject, OrganizationBasicType, PersonalAPIKeyType, TeamBasicType } from '~/types'\n\nimport type { personalAPIKeysLogicType } from './personalAPIKeysLogicType'\n\nexport const MAX_API_KEYS_PER_USER = 10 // Same as in posthog/api/personal_api_key.py\n\nexport const API_KEY_SCOPE_PRESETS = [\n    { value: 'local_evaluation', label: 'Local feature flag evaluation', scopes: ['feature_flag:read'] },\n    {\n        value: 'zapier',\n        label: 'Zapier integration',\n        scopes: ['action:read', 'query:read', 'project:read', 'organization:read', 'user:read', 'webhook:write'],\n    },\n    { value: 'analytics', label: 'Performing analytics queries', scopes: ['query:read'] },\n    {\n        value: 'project_management',\n        label: 'Project & user management',\n        scopes: ['project:write', 'organization:read', 'organization_member:write'],\n    },\n    { value: 'all_access', label: 'All access', scopes: ['*'] },\n]\n\nexport type APIScope = {\n    key: APIScopeObject\n    info?: string | JSX.Element\n    disabledActions?: ('read' | 'write')[]\n    disabledWhenProjectScoped?: boolean\n    description?: string\n    warnings?: Partial<Record<'read' | 'write', string | JSX.Element>>\n}\n\nexport const APIScopes: APIScope[] = [\n    { key: 'action' },\n    { key: 'activity_log' },\n    { key: 'annotation' },\n    { key: 'batch_export' },\n    { key: 'cohort' },\n    { key: 'dashboard' },\n    { key: 'dashboard_template' },\n    { key: 'early_access_feature' },\n    { key: 'event_definition' },\n    { key: 'experiment' },\n    { key: 'export' },\n    { key: 'feature_flag' },\n    { key: 'group' },\n    { key: 'insight' },\n    { key: 'query', disabledActions: ['write'] },\n    { key: 'notebook' },\n    { key: 'organization', disabledWhenProjectScoped: true },\n    {\n        key: 'organization_member',\n        disabledWhenProjectScoped: true,\n        warnings: {\n            write: (\n                <>\n                    This scope can be used to invite users to your organization,\n                    <br />\n                    effectively <strong>allowing access to other scopes via the added user</strong>.\n                </>\n            ),\n        },\n    },\n    { key: 'person' },\n    { key: 'plugin' },\n    {\n        key: 'project',\n        warnings: {\n            write: 'This scope can be used to create or modify projects, including settings about how data is ingested.',\n        },\n    },\n    { key: 'property_definition' },\n    { key: 'session_recording' },\n    { key: 'session_recording_playlist' },\n    { key: 'sharing_configuration' },\n    { key: 'subscription' },\n    { key: 'survey' },\n    {\n        key: 'user',\n        disabledActions: ['write'],\n        warnings: {\n            read: (\n                <>\n                    This scope allows you to retrieve your own user object.\n                    <br />\n                    Note that the user object <strong>lists all organizations and projects you're in</strong>.\n                </>\n            ),\n        },\n    },\n    { key: 'webhook', info: 'Webhook configuration is currently only enabled for the Zapier integration.' },\n]\n\nexport type EditingKeyFormValues = Pick<\n    PersonalAPIKeyType,\n    'label' | 'scopes' | 'scoped_organizations' | 'scoped_teams'\n> & {\n    preset?: string\n    access_type?: 'all' | 'organizations' | 'teams'\n}\n\nexport const personalAPIKeysLogic = kea<personalAPIKeysLogicType>([\n    path(['lib', 'components', 'PersonalAPIKeys', 'personalAPIKeysLogic']),\n    connect({\n        values: [userLogic, ['user']],\n    }),\n    actions({\n        setEditingKeyId: (id: PersonalAPIKeyType['id'] | null) => ({ id }),\n        loadKeys: true,\n        createKeySuccess: (key: PersonalAPIKeyType) => ({ key }),\n        updateKey: (data: Partial<Pick<PersonalAPIKeyType, 'label' | 'scopes'>>) => data,\n        deleteKey: (id: PersonalAPIKeyType['id']) => ({ id }),\n        setScopeRadioValue: (key: string, action: string) => ({ key, action }),\n        resetScopes: true,\n        loadAllTeams: true,\n    }),\n\n    reducers({\n        editingKeyId: [\n            null as PersonalAPIKeyType['id'] | null,\n            {\n                setEditingKeyId: (_, { id }) => id,\n            },\n        ],\n    }),\n    loaders(({ values }) => ({\n        keys: [\n            [] as PersonalAPIKeyType[],\n            {\n                loadKeys: async () => {\n                    return await api.personalApiKeys.list()\n                },\n                deleteKey: async ({ id }) => {\n                    await api.personalApiKeys.delete(id)\n                    return values.keys.filter((filteredKey) => filteredKey.id != id)\n                },\n            },\n        ],\n\n        allTeams: [\n            null as TeamBasicType[] | null,\n            {\n                loadAllTeams: async () => {\n                    return await api.loadPaginatedResults('api/projects')\n                },\n            },\n        ],\n    })),\n    forms(({ values, actions }) => ({\n        editingKey: {\n            defaults: {\n                label: '',\n                scopes: [],\n                scoped_organizations: [],\n                scoped_teams: [],\n                access_type: undefined,\n            } as EditingKeyFormValues,\n            errors: ({ label, access_type, scopes, scoped_organizations, scoped_teams }) => ({\n                label: !label ? 'Your API key needs a label' : undefined,\n                scopes: !scopes?.length ? ('Your API key needs at least one scope' as any) : undefined,\n                access_type: !access_type ? ('Select access mode' as any) : undefined,\n                scoped_organizations:\n                    access_type === 'organizations' && !scoped_organizations?.length\n                        ? ('Select at least one organization' as any)\n                        : undefined,\n                scoped_teams:\n                    access_type === 'teams' && !scoped_teams?.length\n                        ? ('Select at least one project' as any)\n                        : undefined,\n            }),\n            submit: async (payload, breakpoint) => {\n                if (!values.editingKeyId) {\n                    return\n                }\n\n                const key =\n                    values.editingKeyId === 'new'\n                        ? await api.personalApiKeys.create(payload)\n                        : await api.personalApiKeys.update(values.editingKeyId, payload)\n\n                breakpoint()\n\n                if (values.editingKeyId === 'new') {\n                    actions.createKeySuccess(key)\n                }\n\n                actions.loadKeysSuccess([key].concat(values.keys.filter((k) => k.id !== values.editingKeyId)))\n                actions.setEditingKeyId(null)\n            },\n        },\n    })),\n    selectors(() => ({\n        formScopeRadioValues: [\n            (s) => [s.editingKey],\n            (editingKey): Record<string, string> => {\n                const result: Record<string, string> = {}\n\n                editingKey.scopes.forEach((scope) => {\n                    const [key, action] = scope.split(':')\n                    result[key] = action\n                })\n\n                return result\n            },\n        ],\n        allAccessSelected: [\n            (s) => [s.editingKey],\n            (editingKey): boolean => {\n                return editingKey.scopes.includes('*')\n            },\n        ],\n\n        allOrganizations: [\n            (s) => [s.user],\n            (user): OrganizationBasicType[] => {\n                return user?.organizations ?? []\n            },\n        ],\n    })),\n    listeners(({ actions, values }) => ({\n        touchEditingKeyField: ({ key }) => {\n            if (key === 'label') {\n                if (values.editingKey.label.toLowerCase().includes('zapier') && !values.editingKey.preset) {\n                    actions.setEditingKeyValue('preset', 'zapier')\n                    actions.setEditingKeyValue('access_type', 'all')\n                }\n            }\n        },\n        setEditingKeyValue: async ({ name, value }) => {\n            const key = Array.isArray(name) ? name[0] : name\n            // When we select a preset, update the scopes\n            if (key === 'preset' && value) {\n                const preset = API_KEY_SCOPE_PRESETS.find((preset) => preset.value === value)\n                if (preset) {\n                    actions.setEditingKeyValue('scopes', preset.scopes)\n                }\n            }\n\n            // When the user deviates from the preset, clear it\n            if (key === 'scopes' && values.editingKey.preset) {\n                const preset = API_KEY_SCOPE_PRESETS.find((preset) => preset.value === values.editingKey.preset)\n                if (preset?.scopes.join(',') !== value.join(',')) {\n                    actions.setEditingKeyValue('preset', undefined)\n                }\n            }\n\n            // When the user changes the list of valid orgs, clear the teams\n            if (key === 'access_type') {\n                actions.setEditingKeyValue('scoped_teams', [])\n                actions.setEditingKeyValue('scoped_organizations', [])\n            }\n        },\n\n        setEditingKeyId: async ({ id }) => {\n            if (id) {\n                const key = values.keys.find((key) => key.id === id)\n                const formValues: EditingKeyFormValues = {\n                    label: key?.label ?? '',\n                    scopes: key?.scopes ?? [],\n                    preset: key?.scopes.includes('*') ? 'all_access' : undefined,\n                    scoped_organizations: key?.scoped_organizations ?? [],\n                    scoped_teams: key?.scoped_teams ?? [],\n                    access_type: key?.scoped_organizations?.length\n                        ? 'organizations'\n                        : key?.scoped_teams?.length\n                        ? 'teams'\n                        : id !== 'new'\n                        ? 'all'\n                        : undefined,\n                }\n\n                actions.resetEditingKey(formValues)\n            }\n        },\n\n        resetScopes: () => {\n            actions.setEditingKeyValue('scopes', [])\n        },\n\n        setScopeRadioValue: ({ key, action }) => {\n            const newScopes = values.editingKey.scopes.filter((scope) => !scope.startsWith(key))\n            if (action !== 'none') {\n                newScopes.push(`${key}:${action}`)\n            }\n\n            actions.setEditingKeyValue('scopes', newScopes)\n        },\n\n        createKeySuccess: async ({ key }) => {\n            const value = key.value\n\n            if (!value) {\n                return\n            }\n\n            LemonDialog.open({\n                title: 'Personal API key ready',\n                width: 536,\n                content: (\n                    <>\n                        <p className=\"mb-4\">You can now use key \"{key.label}\" for authentication:</p>\n\n                        <CodeSnippet className=\"ph-no-capture\" thing=\"personal API key\">\n                            {value}\n                        </CodeSnippet>\n\n                        <LemonBanner type=\"warning\" className=\"mt-4\">\n                            For security reasons the value above <em>will never be shown again</em>.\n                            <br />\n                            Copy it to your destination right away.\n                        </LemonBanner>\n                    </>\n                ),\n            })\n        },\n        deleteKeySuccess: () => {\n            lemonToast.success(`Personal API key deleted`)\n        },\n    })),\n    urlToAction(({ actions }) => ({\n        [urls.settings('user-api-keys')]: (_, searchParams) => {\n            const presetKey = searchParams.preset\n            if (presetKey) {\n                const preset = API_KEY_SCOPE_PRESETS.find((preset) => preset.value === presetKey)\n                if (preset) {\n                    actions.setEditingKeyId('new')\n                    actions.setEditingKeyValues({\n                        preset: preset.value,\n                        label: preset.label,\n                        scopes: preset.scopes,\n                    })\n                }\n            }\n        },\n    })),\n    actionToUrl(() => ({\n        setEditingKeyId: ({ id }) => {\n            if (!id) {\n                // When the modal is closed, remove the preset from the URL\n                return [router.values.location.pathname, {}, router.values.location.hash]\n            }\n        },\n    })),\n    afterMount(({ actions }) => {\n        actions.loadAllTeams()\n    }),\n])\n", "import { IconCheckCircle, IconCopy, IconWarning } from '@posthog/icons'\nimport { LemonButton, LemonModal } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { copyToClipboard } from 'lib/utils/copyToClipboard'\nimport { twoFactorLogic } from 'scenes/authentication/twoFactorLogic'\nimport { membersLogic } from 'scenes/organization/membersLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nexport function TwoFactorSettings(): JSX.Element {\n    const { user } = useValues(userLogic)\n    const { status, isDisable2FAModalOpen, isBackupCodesModalOpen } = useValues(twoFactorLogic)\n\n    const { updateUser } = useActions(userLogic)\n    const { loadMemberUpdates } = useActions(membersLogic)\n    const { generateBackupCodes, disable2FA, openTwoFactorSetupModal, toggleDisable2FAModal, toggleBackupCodesModal } =\n        useActions(twoFactorLogic)\n\n    const handleSuccess = (): void => {\n        updateUser({})\n        loadMemberUpdates()\n    }\n\n    return (\n        <div className=\"flex flex-col items-start\">\n            {isDisable2FAModalOpen && (\n                <LemonModal\n                    title=\"Disable 2FA\"\n                    onClose={() => toggleDisable2FAModal(false)}\n                    footer={\n                        <>\n                            <LemonButton onClick={() => toggleDisable2FAModal(false)}>Cancel</LemonButton>\n                            <LemonButton\n                                type=\"primary\"\n                                status=\"danger\"\n                                onClick={() => {\n                                    disable2FA()\n                                    toggleDisable2FAModal(false)\n                                    handleSuccess()\n                                }}\n                            >\n                                Disable 2FA\n                            </LemonButton>\n                        </>\n                    }\n                >\n                    <p>Are you sure you want to disable 2FA authentication? This will make your account less secure.</p>\n                </LemonModal>\n            )}\n\n            {isBackupCodesModalOpen && (\n                <LemonModal title=\"Backup Codes\" onClose={() => toggleBackupCodesModal(false)}>\n                    <div className=\"space-y-4 max-w-md\">\n                        {status?.backup_codes?.length ? (\n                            <>\n                                <p>\n                                    Save these backup codes in a secure location. Each code can only be used once to\n                                    sign in if you lose access to your authentication device.\n                                </p>\n                                <div className=\"bg-primary p-4 rounded font-mono space-y-1 relative\">\n                                    <LemonButton\n                                        icon={<IconCopy />}\n                                        size=\"small\"\n                                        className=\"absolute top-4 right-4\"\n                                        onClick={() => {\n                                            void copyToClipboard(status.backup_codes.join('\\n') || '', 'backup codes')\n                                        }}\n                                    >\n                                        Copy\n                                    </LemonButton>\n                                    {status.backup_codes.map((code) => (\n                                        <div key={code}>{code}</div>\n                                    ))}\n                                </div>\n                            </>\n                        ) : (\n                            <div className=\"bg-primary p-4 rounded font-mono space-y-1 relative\">\n                                <p className=\"text-secondary mb-0\">No backup codes generated</p>\n                            </div>\n                        )}\n                        <LemonButton\n                            type=\"primary\"\n                            onClick={() => {\n                                generateBackupCodes()\n                            }}\n                        >\n                            {status?.backup_codes?.length ? 'Generate new codes' : 'Generate backup codes'}\n                        </LemonButton>\n                    </div>\n                </LemonModal>\n            )}\n\n            {user?.is_2fa_enabled ? (\n                <>\n                    <div className=\"mb-4 flex items-center space-x-2\">\n                        <IconCheckCircle color=\"green\" className=\"text-xl\" />\n                        <span className=\"font-medium\">2FA enabled</span>\n                    </div>\n                    <div className=\"space-x-2 flex items-center\">\n                        <LemonButton type=\"secondary\" onClick={() => toggleBackupCodesModal(true)}>\n                            View backup codes\n                        </LemonButton>\n                        <LemonButton type=\"secondary\" status=\"danger\" onClick={() => toggleDisable2FAModal(true)}>\n                            Disable 2FA\n                        </LemonButton>\n                    </div>\n                </>\n            ) : (\n                <div>\n                    <div className=\"mb-4 flex items-center space-x-2\">\n                        <IconWarning color=\"orange\" className=\"text-xl\" />\n                        <span className=\"font-medium\">2FA is not enabled</span>\n                    </div>\n                    <LemonButton type=\"primary\" onClick={() => openTwoFactorSetupModal()}>\n                        Set up 2FA\n                    </LemonButton>\n                </div>\n            )}\n        </div>\n    )\n}\n", "import { LemonSwitch, LemonTag } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { organizationLogic } from 'scenes/organizationLogic'\nimport { userLogic } from 'scenes/userLogic'\n\nexport function UpdateEmailPreferences(): JSX.Element {\n    const { user, userLoading } = useValues(userLogic)\n    const { updateUser } = useActions(userLogic)\n    const { currentOrganization } = useValues(organizationLogic)\n\n    return (\n        <div className=\"space-y-4\">\n            <LemonSwitch\n                id=\"plugin-disabled\"\n                data-attr=\"plugin_disabled\"\n                onChange={() => {\n                    user?.notification_settings &&\n                        updateUser({\n                            notification_settings: {\n                                ...user?.notification_settings,\n                                plugin_disabled: !user?.notification_settings.plugin_disabled,\n                            },\n                        })\n                }}\n                checked={user?.notification_settings.plugin_disabled || false}\n                disabled={userLoading}\n                bordered\n                label=\"Get notified of data pipeline errors.\"\n            />\n\n            <h3>Weekly digest</h3>\n            <p>\n                The weekly digest keeps you up to date with everything that's happening in your PostHog organizations.\n            </p>\n            <div className=\"space-y-2\">\n                <LemonSwitch\n                    id=\"all-digests-disabled\"\n                    data-attr=\"all_digests_disabled\"\n                    onChange={() => {\n                        user?.notification_settings &&\n                            updateUser({\n                                notification_settings: {\n                                    ...user?.notification_settings,\n                                    all_weekly_digest_disabled: !user?.notification_settings.all_weekly_digest_disabled,\n                                },\n                            })\n                    }}\n                    checked={!user?.notification_settings.all_weekly_digest_disabled}\n                    disabled={userLoading}\n                    bordered\n                    label=\"Receive the weekly digests\"\n                    tooltip=\"This option applies to all organizations you belong to. If you want to opt out of digests for a specific organization, disable all the individual project settings below.\"\n                />\n                {!user?.notification_settings.all_weekly_digest_disabled ? (\n                    <>\n                        <h4 className=\"ml-12\">Individual project settings:</h4>\n                        <ul className=\"flex flex-col gap-2 w-fit\">\n                            {currentOrganization?.teams?.map((team) => (\n                                <li key={team.id} className=\"ml-16 grow list-disc\">\n                                    <div className=\"flex items-center grow\">\n                                        <LemonSwitch\n                                            id={`project-digest-${team.id}`}\n                                            data-attr={`project_digest_${team.id}`}\n                                            onChange={() => {\n                                                user?.notification_settings &&\n                                                    updateUser({\n                                                        notification_settings: {\n                                                            ...user?.notification_settings,\n                                                            project_weekly_digest_disabled: {\n                                                                ...user.notification_settings\n                                                                    .project_weekly_digest_disabled,\n                                                                [team.id]:\n                                                                    !user.notification_settings\n                                                                        .project_weekly_digest_disabled?.[team.id],\n                                                            },\n                                                        },\n                                                    })\n                                            }}\n                                            checked={\n                                                !user?.notification_settings.project_weekly_digest_disabled?.[team.id]\n                                            }\n                                            disabled={\n                                                userLoading || user?.notification_settings.all_weekly_digest_disabled\n                                            }\n                                            bordered\n                                            label={\n                                                <>\n                                                    {team.name}\n                                                    <LemonTag type=\"muted\" className=\"ml-2\">\n                                                        id: {team.id.toString()}\n                                                    </LemonTag>\n                                                </>\n                                            }\n                                            fullWidth\n                                        />\n                                    </div>\n                                </li>\n                            ))}\n                        </ul>\n                    </>\n                ) : null}\n            </div>\n        </div>\n    )\n}\n", "import { LemonTag } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { Form } from 'kea-forms'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { LemonInput } from 'lib/lemon-ui/LemonInput/LemonInput'\nimport { userLogic } from 'scenes/userLogic'\n\nexport function UserDetails(): JSX.Element {\n    const { userLoading, isUserDetailsSubmitting, userDetailsChanged, user } = useValues(userLogic)\n\n    return (\n        <Form\n            logic={userLogic}\n            formKey=\"userDetails\"\n            enableFormOnSubmit\n            className=\"space-y-4\"\n            style={{\n                maxWidth: '28rem',\n            }}\n        >\n            <LemonField name=\"first_name\" label=\"First name\">\n                <LemonInput\n                    className=\"ph-ignore-input\"\n                    data-attr=\"settings-update-first-name\"\n                    placeholder=\"Jane\"\n                    disabled={userLoading}\n                />\n            </LemonField>\n\n            <LemonField name=\"last_name\" label=\"Last name\">\n                <LemonInput\n                    className=\"ph-ignore-input\"\n                    data-attr=\"settings-update-last-name\"\n                    placeholder=\"Doe\"\n                    disabled={userLoading}\n                />\n            </LemonField>\n\n            <LemonField name=\"email\" label=\"Email\">\n                <LemonInput\n                    className=\"ph-ignore-input\"\n                    data-attr=\"settings-update-email\"\n                    placeholder=\"email@yourcompany.com\"\n                    disabled={userLoading}\n                />\n            </LemonField>\n            {user?.pending_email && <LemonTag type=\"highlight\">Pending verification for {user.pending_email}</LemonTag>}\n\n            <LemonButton\n                type=\"primary\"\n                htmlType=\"submit\"\n                loading={isUserDetailsSubmitting}\n                disabled={!userDetailsChanged}\n                data-attr=\"user-details-submit-bottom\"\n            >\n                Save name and email\n            </LemonButton>\n        </Form>\n    )\n}\n"],
  "mappings": "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",
  "names": ["require_lodash", "__commonJSMin", "exports", "module", "init_dirname", "init_buffer", "init_process", "FUNC_ERROR_TEXT", "NAN", "symbolTag", "reTrim", "reIsBadHex", "reIsBinary", "reIsOctal", "freeParseInt", "freeGlobal", "freeSelf", "root", "objectProto", "objectToString", "nativeMax", "nativeMin", "now", "debounce", "func", "wait", "options", "lastArgs", "lastThis", "maxWait", "result", "timerId", "lastCallTime", "lastInvokeTime", "leading", "maxing", "trailing", "toNumber", "isObject", "invokeFunc", "time", "args", "thisArg", "leadingEdge", "timerExpired", "remainingWait", "timeSinceLastCall", "timeSinceLastInvoke", "shouldInvoke", "trailingEdge", "cancel", "flush", "debounced", "isInvoking", "value", "type", "isObjectLike", "isSymbol", "other", "isBinary", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_kea_router", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "ErrorTrackingAlerting", "LinkedHogFunctions", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_kea_loaders", "errorTrackingSymbolSetLogic", "id", "_", "values", "api_default", "v", "urls", "s", "symbolSets", "actions", "minified", "sourceMap", "lemonToast", "minifiedSrc", "sourceMapSrc", "formData", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_jsx_runtime", "SymbolSetUploadModal", "setUploadSymbolSetId", "errorTrackingSymbolSetLogic", "uploadSymbolSetId", "isUploadSymbolSetSubmitting", "uploadSymbolSet", "onClose", "LemonModal", "LemonField", "LemonFileInput", "IconUploadFile", "LemonButton", "import_jsx_runtime", "ErrorTrackingSymbolSets", "logic", "errorTrackingSymbolSetLogic", "missingSymbolSets", "validSymbolSets", "loadSymbolSets", "SymbolSetTable", "SymbolSetUploadModal", "id", "dataSource", "pageSize", "missing", "symbolSetsLoading", "deleteSymbolSet", "setUploadSymbolSetId", "columns", "data", "humanFriendlyDetailedTime", "_", "LemonButton", "IconUpload", "IconRevert", "IconTrash", "LemonDialog", "LemonTable", "symbolSet", "SymbolSetStackFrames", "stackFrameRecords", "stackFrameLogic", "loadForSymbolSet", "activeTab", "setActiveTab", "frames", "r", "LemonCollapse", "raw_id", "contents", "context", "LemonTabs", "JSONViewer", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "MIN_BOUNCE_RATE_DURATION", "MAX_BOUNCE_RATE_DURATION", "DEFAULT_BOUNCE_RATE_DURATION", "BounceRateDurationSetting", "updateCurrentTeam", "teamLogic", "currentTeam", "savedDuration", "bounceRateDuration", "setBounceRateDuration", "handleChange", "duration", "inputRef", "React", "LemonInput", "x", "LemonButton", "IconX", "e", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "bounceRatePageViewModeOptions", "BounceRatePageViewModeSetting", "updateCurrentTeam", "teamLogic", "currentTeam", "reportBounceRatePageViewModeUpdated", "eventUsageLogic", "savedBounceRatePageViewMode", "bounceRatePageViewMode", "setBounceRatePageViewMode", "handleChange", "mode", "LemonRadio", "LemonButton", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "options", "CookielessServerHashModeSetting", "updateCurrentTeam", "teamLogic", "currentTeam", "savedSetting", "setting", "setSetting", "handleChange", "newSetting", "LemonRadio", "LemonButton", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_lodash", "import_react", "import_react_dom", "import_jsx_runtime", "NOOP", "VerticalNestedDND", "initialItems", "renderContainerItem", "renderChildItem", "createNewChildItem", "createNewContainerItem", "renderAddChildItem", "renderAddContainerItem", "renderAdditionalControls", "onChange", "items", "setItems", "item", "clonedItems", "setClonedItems", "handle", "containers", "setContainers", "activeId", "setActiveId", "lastOverId", "recentlyMovedToNewContainer", "sensors", "useSensors", "useSensor", "MouseSensor", "TouchSensor", "isSortingContainer", "debouncedOnChanged", "debounce", "savedChanges", "newItemsArray", "containerId", "isEqual", "collisionDetectionStrategy", "args", "closestCenter", "container", "pointerIntersections", "pointerWithin", "intersections", "rectIntersection", "overId", "getFirstCollision", "containerItems", "ChildItem", "findContainer", "id", "key", "findChildItem", "getIndex", "childItems", "onDragCancel", "DndContext", "MeasuringStrategy", "active", "over", "activeIsContainer", "overContainerId", "activeIndex", "overIndex", "arrayMove", "activeContainerId", "activeContainer", "overContainer", "activeItems", "overItems", "newIndex", "modifier", "newActiveContainer", "newOverContainer", "newItems", "SortableContext", "verticalListSortingStrategy", "DroppableContainer", "handleRemoveContainer", "handleAddChildItem", "updateContainerItem", "value", "index", "SortableItem", "updateChildItem", "handleRemoveChild", "handleAddContainerItem", "LemonButton", "DragOverlay", "dropAnimation", "renderContainerDragOverlay", "renderSortableItemDragOverlay", "Container", "containerID", "childId", "newItem", "newChild", "childItem", "defaultDropAnimationSideEffects", "animateLayoutChanges", "defaultAnimateLayoutChanges", "disabled", "onRemove", "setNodeRef", "setActivatorNodeRef", "listeners", "isDragging", "isSorting", "transform", "transition", "useSortable", "mounted", "useMountStatus", "isMounted", "setIsMounted", "timeout", "children", "style", "containerItemId", "props", "attributes", "CSS", "handleProps", "onClick", "onAddChild", "placeholder", "ref", "Handle", "Remove", "React", "color", "dragOverlay", "fadeIn", "height", "sorting", "childItemId", "wrapperStyle", "IconTrash", "IconDragHandle", "import_lodash", "import_react", "import_jsx_runtime", "combinerOptions", "keyOptions", "opOptions", "CustomChannelOperator", "op", "genericOperatorMap", "isNullary", "operator", "opToPropertyOperator", "keyToSessionProperty", "key", "UnexpectedNeverError", "sanitizeCustomChannelTypeRules", "rules", "rule", "uuid", "condition", "item", "CustomChannelTypes", "updateCurrentTeam", "teamLogic", "currentTeam", "reportCustomChannelTypeRulesUpdated", "eventUsageLogic", "savedCustomChannelTypeRules", "setSavedCustomChannelTypeRules", "customChannelTypeRules", "setCustomChannelTypeRules", "channelTypeOptions", "optionsSet", "DefaultChannelTypes", "channelType", "Link", "urls", "ChannelTypeEditor", "isEqual", "handleChange", "initialCustomChannelTypeRules", "isSaveDisabled", "onSave", "VerticalNestedDND", "updateContainerItem", "LemonInputSelect", "LemonSelect", "combiner", "updateChildItem", "PropertyValue", "propertyValue", "onAddChild", "LemonButton", "IconPlus", "onAddContainer", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "DeadClicksAutocaptureSettings", "userLoading", "userLogic", "currentTeam", "teamLogic", "updateCurrentTeam", "LemonSwitch", "checked", "Co", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_jsx_runtime", "MaxMemorySettings", "currentProject", "currentProjectLoading", "projectLogic", "isLoading", "isUpdating", "maxSettingsLogic", "LemonSkeleton", "LemonField", "LemonTextArea", "LemonButton", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "personsJoinOptions", "PersonsJoinMode", "updateCurrentTeam", "teamLogic", "currentTeam", "reportPersonsJoinModeUpdated", "eventUsageLogic", "savedPersonsJoinMode", "personsJoinMode", "setPersonsJoinMode", "handleChange", "mode", "LemonRadio", "LemonButton", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "POE_OPTIONS", "LemonTag", "PersonsOnEvents", "updateCurrentTeam", "teamLogic", "reportPoEModeUpdated", "eventUsageLogic", "currentTeam", "savedPoEMode", "poeMode", "setPoeMode", "handleChange", "mode", "Co", "Link", "LemonRadio", "LemonButton", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_kea_forms", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_kea_subscriptions", "NEW_URL_TRIGGER", "ensureAnchored", "url", "replayTriggersLogic", "urlTriggerConfig", "index", "originalIndex", "urlBlocklistConfig", "eventTriggerConfig", "teamLogic", "_", "state", "newUrlTriggerConfig", "triggerConfig", "i", "editUrlTriggerIndex", "newUrlBlocklistConfig", "blocklistConfig", "editUrlBlocklistIndex", "s", "currentTeam", "actions", "values", "matching", "sharedListeners", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "internalMultipleChoiceSurveyLogic", "props", "survey", "surveys", "choice", "isAdded", "showThankYouMessage", "thankYouMessage", "openChoice", "_", "state", "c", "actions", "values", "s", "Co", "payload", "import_jsx_runtime", "InternalMultipleChoiceSurvey", "surveyId", "logic", "internalMultipleChoiceSurveyLogic", "survey", "surveyResponse", "showThankYouMessage", "thankYouMessage", "openChoice", "handleChoiceChange", "handleSurveyResponse", "setOpenChoice", "question", "choice", "index", "LemonTextArea", "LemonCheckbox", "checked", "LemonButton", "import_react", "import_jsx_runtime", "SupportedPlatform", "props", "node", "clsx", "IconInfo", "IconCheck", "IconX", "Tooltip", "SupportedPlatforms", "LemonDivider", "isObject", "LogCaptureSettings", "updateCurrentTeam", "teamLogic", "currentTeam", "Link", "LemonSwitch", "checked", "CanvasCaptureSettings", "LemonTag", "LemonLabel", "PayloadWarning", "NetworkCaptureSettings", "LemonBanner", "LemonDialog", "ReplayAuthorizedDomains", "AuthorizedUrlList", "ReplayAISettings", "defaultConfig", "currentConfig", "updateSummaryConfig", "summaryConfig", "_discardCurrentOptIn", "currentComparable", "_discardDefaultOptIn", "defaultComparable", "objectsEqual", "LemonButton", "IconSelectEvents", "EventSelect", "includedEvents", "IconPlus", "excludedEvents", "PropertySelect", "properties", "ReplayGeneral", "showSurvey", "setShowSurvey", "handleOptInChange", "InternalMultipleChoiceSurvey", "SESSION_RECORDING_OPT_OUT_SURVEY_ID", "import_jsx_runtime", "UrlConfigForm", "type", "onCancel", "isSubmitting", "addUrlTrigger", "addUrlBlocklist", "replayTriggersLogic", "LemonBanner", "LemonLabel", "LemonField", "LemonInput", "FlaggedFeature", "FEATURE_FLAGS", "AiRegexHelper", "regex", "payload", "lemonToast", "AiRegexHelperButton", "LemonButton", "UrlConfigRow", "trigger", "index", "editIndex", "onEdit", "onRemove", "clsx", "IconPencil", "IconTrash", "LemonDialog", "UrlConfigSection", "title", "description", "props", "IconPlus", "UrlTriggerOptions", "isAddUrlTriggerConfigFormVisible", "urlTriggerConfig", "editUrlTriggerIndex", "isProposedUrlTriggerSubmitting", "newUrlTrigger", "removeUrlTrigger", "setEditUrlTriggerIndex", "cancelProposingUrlTrigger", "UrlBlocklistOptions", "isAddUrlBlocklistConfigFormVisible", "urlBlocklistConfig", "editUrlBlocklistIndex", "isProposedUrlBlocklistSubmitting", "newUrlBlocklist", "removeUrlBlocklist", "setEditUrlBlocklistIndex", "cancelProposingUrlBlocklist", "EventTriggerOptions", "eventTriggerConfig", "updateEventTriggerConfig", "EventSelect", "includedEvents", "ReplayTriggers", "SupportedPlatforms", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "bounceRatePageViewModeOptions", "SessionsTableVersion", "updateCurrentTeam", "teamLogic", "currentTeam", "reportSessionTableVersionUpdated", "eventUsageLogic", "savedSessionTableVersion", "sessionTableVersion", "setSessionTableVersion", "handleChange", "version", "LemonRadio", "LemonButton", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "WebVitalsAllowedMetricSwitch", "metric", "userLoading", "userLogic", "currentTeam", "teamLogic", "updateCurrentTeam", "LemonSwitch", "checked", "without", "allowedMetric", "AutocaptureSettings", "reportAutocaptureToggled", "eventUsageLogic", "Link", "ExceptionAutocaptureSettings", "reportAutocaptureExceptionsToggled", "LemonTag", "WebVitalsAutocaptureSettings", "LemonDivider", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "CorrelationConfig", "updateCurrentTeam", "teamLogic", "currentTeam", "funnelCorrelationConfig", "handleChange", "excludedProperties", "excludedEvents", "excludedEventProperties", "updatedConfig", "LemonBanner", "IconSelectProperties", "PropertySelect", "properties", "IconSelectEvents", "EventSelect", "LemonButton", "IconPlus", "LemonInputSelect", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "DataAttributes", "currentTeam", "currentTeamLoading", "teamLogic", "updateCurrentTeam", "value", "setValue", "Link", "LemonInputSelect", "values", "LemonButton", "s", "a", "LemonSkeleton", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "PAYLOAD_DEFAULT", "dataColorThemesModalLogic", "theme", "index", "color", "idx", "_", "actions", "id", "name", "colors", "breakpoint", "payload", "updatedTheme", "api_default", "lemonToast", "error", "field", "import_jsx_runtime", "DataColorThemeModal", "theme", "themeChanged", "isOpen", "dataColorThemesModalLogic", "submitTheme", "closeModal", "addColor", "duplicateColor", "removeColor", "isNew", "isOfficial", "LemonModal", "LemonButton", "LemonField", "LemonInput", "LemonLabel", "LemonTable", "color", "index", "_", "ColorGlyph", "IconCopy", "IconTrash", "IconPlus", "init_dirname", "init_buffer", "init_process", "import_kea", "dataColorThemesLogic", "dataThemeLogic", "dataColorThemesModalLogic", "id", "values", "actions", "name", "is_global", "newTheme", "existingTheme", "theme", "t", "updatedThemes", "import_jsx_runtime", "DataColorThemes", "_themes", "themesLoading", "defaultTheme", "dataColorThemesLogic", "selectTheme", "currentTeamLoading", "teamLogic", "updateCurrentTeam", "themes", "PayGateMini", "Link", "LemonTable", "name", "theme", "LemonTableLink", "is_global", "IconBadge", "LemonButton", "LemonLabel", "LemonSelect", "value", "LemonDialog", "DataColorThemeModal", "init_dirname", "init_buffer", "init_process", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "FeatureFlagSettings", "inModal", "updateCurrentTeam", "teamLogic", "currentTeam", "LemonSwitch", "checked", "Link", "import_jsx_runtime", "FeatureFlagSettings", "Link", "urls", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "groupAnalyticsConfigLogic", "groupsModel", "groupTypeIndex", "value", "state", "s", "singularChanges", "pluralChanges", "values", "actions", "groupTypes", "payload", "groupType", "result", "import_jsx_runtime", "GroupAnalyticsConfig", "groupTypes", "groupTypesLoading", "singularChanges", "pluralChanges", "hasChanges", "groupAnalyticsConfigLogic", "setSingular", "setPlural", "reset", "save", "groupsAccessStatus", "groupsAccessLogic", "columns", "name", "groupType", "LemonInput", "e", "LemonBanner", "Link", "LemonTable", "LemonButton", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "HeatmapsSettings", "userLoading", "userLogic", "currentTeam", "teamLogic", "updateCurrentTeam", "reportHeatmapsToggled", "eventUsageLogic", "LemonSwitch", "checked", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "HumanFriendlyComparisonPeriodsSetting", "updateCurrentTeam", "teamLogic", "currentTeam", "currentTeamLoading", "LemonSwitch", "checked", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "IPAllowListInfo", "preflight", "preflightLogic", "CodeSnippet", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "IPCapture", "updateCurrentTeam", "teamLogic", "currentTeam", "currentTeamLoading", "LemonSwitch", "checked", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_kea_forms", "import_jsx_runtime", "MAX_PROXY_RECORDS", "statusText", "ManagedReverseProxy", "formState", "proxyRecords", "proxyRecordsLoading", "proxyLogic", "showForm", "deleteRecord", "restrictionReason", "useRestrictedArea", "maxRecordsReached", "recordsWithMessages", "record", "columns", "status", "clsx", "Spinner", "Tooltip", "IconInfo", "_", "id", "LemonMenu", "LemonDialog", "LemonButton", "IconEllipsis", "PayGateMini", "r", "LemonBanner", "LemonMarkdown", "LemonTable", "ExpandedRow", "CreateRecordForm", "LemonTabs", "CodeSnippet", "collapseForm", "waitingRecords", "LemonField", "LemonInput", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "OtherIntegrations", "integrations", "integrationsLoading", "integrationsLogic", "deleteIntegration", "otherIntegrations", "integration", "onDeleteClick", "LemonDialog", "IntegrationView", "LemonButton", "IconTrash", "LemonSkeleton", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "cleanPathWithRegexes", "path", "filters", "text", "filter", "isValidRegexp", "PathCleaningFiltersConfig", "testValue", "setTestValue", "updateCurrentTeam", "teamLogic", "currentTeam", "hasAvailableFeature", "userLogic", "hasAdvancedPaths", "Link", "cleanedTestPath", "readableTestPath", "parseAliasToReadable", "INSIGHT_TYPE_URLS", "PathCleanFilters", "LemonInput", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "PersonDisplayNameProperties", "currentTeam", "teamLogic", "updateCurrentTeam", "value", "setValue", "PERSON_DEFAULT_DISPLAY_NAME_PROPERTIES", "PropertySelect", "properties", "LemonButton", "s", "a", "LemonSkeleton", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "sessionReplayIngestionControlLogic", "flag", "teamLogic", "_", "values", "retrievedFlag", "api_default", "variantKeyToIndexFeatureFlagPayloads", "s", "currentTeam", "featureFlag", "selectedFlag", "linkedFlag", "isObject", "actions", "import_jsx_runtime", "variantOptions", "multivariate", "variant", "LinkedFlagSelector", "updateCurrentTeam", "teamLogic", "currentTeam", "hasAvailableFeature", "userLogic", "featureFlagRecordingFeatureEnabled", "linkedFlag", "featureFlagLoading", "flagHasVariants", "sessionReplayIngestionControlLogic", "selectFeatureFlag", "LemonLabel", "Spinner", "SupportedPlatforms", "FlagSelector", "id", "key", "flag", "LemonButton", "IconCancel", "LemonSegmentedButton", "SessionRecordingIngestionSettings", "samplingControlFeatureEnabled", "recordingDurationMinimumFeatureEnabled", "PayGateMini", "Link", "LemonSelect", "v", "SESSION_REPLAY_MINIMUM_DURATION_OPTIONS", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "getSlackAppManifest", "SlackIntegration", "slackIntegrations", "slackAvailable", "integrationsLogic", "deleteIntegration", "showSlackInstructions", "setShowSlackInstructions", "user", "userLogic", "onDeleteClick", "id", "LemonDialog", "Link", "integration", "IntegrationView", "LemonButton", "IconTrash", "api_default", "urls", "CodeSnippet", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "SurveySettings", "Link", "urls", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_kea_loaders", "import_kea_router", "roleBasedAccessControlLogic", "membersLogic", "teamLogic", "userLogic", "accessControls", "roleId", "role", "roleMemberId", "members", "_", "values", "api_default", "control", "newMembers", "userUuid", "roleMember", "r", "lemonToast", "actions", "name", "existingRole", "s", "roleBasedAccessControls", "acc", "roles", "defaultResourceAccessControls", "accessControlByResource", "currentLocation", "accessControlLogic", "props", "key", "membersLogic", "teamLogic", "roleBasedAccessControlLogic", "upgradeModalLogic", "accessControl", "level", "accessControls", "values", "api_default", "Co", "role", "oldAccessControl", "ac", "member", "actions", "_", "s", "availableLevelsWithNone", "toSentenceCase", "accessControlDefaultLevel", "members", "organizationAdmins", "admin", "organizationAdminsAsAccessControlMembers", "roles", "accessControlRoles", "accessControlMembers", "import_jsx_runtime", "AccessControlObject", "props", "canEditAccessControls", "humanReadableResource", "accessControlLogic", "suffix", "LemonBanner", "AccessControlObjectDefaults", "PayGateMini", "AccessControlObjectUsers", "AccessControlObjectRoles", "accessControlDefault", "accessControlDefaultOptions", "accessControlsLoading", "updateAccessControlDefault", "guardAvailableFeature", "upgradeModalLogic", "LemonSelect", "newValue", "user", "userLogic", "membersById", "addableMembers", "accessControlMembers", "availableLevels", "updateAccessControlMembers", "modelOpen", "setModelOpen", "member", "ac", "LemonButton", "LemonTable", "_", "ProfilePicture", "a", "b", "access_level", "organization_member", "resource", "Tooltip", "LemonTag", "SimplLevelComponent", "level", "RemoveAccessButton", "AddItemsControlsModal", "newValues", "UserSelectItem", "accessControlRoles", "addableRoles", "rolesById", "updateAccessControlRoles", "role", "LemonTableLink", "urls", "ProfileBubbles", "capitalizeFirstLetter", "onConfirm", "subject", "IconTrash", "LemonDialog", "items", "setItems", "setLevel", "onSubmit", "LemonModal", "LemonInputSelect", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_jsx_runtime", "AddMembersModalWithButton", "disabledReason", "addableMembers", "allMembersLoading", "isAddMembersModalOpen", "teamMembersLogic", "openAddMembersModal", "closeAddMembersModal", "currentTeam", "teamLogic", "guardAvailableFeature", "upgradeModalLogic", "hasAvailableFeature", "userLogic", "LemonButton", "IconPlus", "LemonModal", "LemonField", "LemonInputSelect", "usersLemonSelectOptions", "x", "LemonSelect", "teamMembershipLevelIntegers", "teamMembershipLevel", "membershipLevelToName", "import_jsx_runtime", "LevelComponent", "member", "user", "userLogic", "currentTeam", "teamLogic", "changeUserAccessLevel", "teamMembersLogic", "myMembershipLevel", "isAuthenticatedTeam", "isImplicit", "levelName", "membershipLevelToName", "allowedLevels", "teamMembershipLevelIntegers", "listLevel", "getReasonForAccessLevelChangeProhibition", "possibleOptions", "disallowedReason", "Tooltip", "LemonSnack", "IconCrown", "LemonSelect", "ActionsComponent", "removeMember", "handleClick", "LemonDialog", "allowDeletion", "MINIMUM_IMPLICIT_ACCESS_LEVEL", "isSelf", "LemonButton", "IconLeave", "IconCancel", "TeamMembers", "allMembers", "allMembersLoading", "restrictionReason", "useRestrictedArea", "AddMembersModalWithButton", "LemonTable", "_", "ProfilePicture", "a", "b", "humanFriendlyDetailedTime", "TeamAccessControl", "currentOrganization", "currentOrganizationLoading", "organizationLogic", "currentTeamLoading", "migrateAccessControlVersion", "migrateAccessControlVersionLoading", "updateCurrentTeam", "guardAvailableFeature", "upgradeModalLogic", "newAccessControl", "useFeatureFlag", "AccessControlObject", "LemonBanner", "IconLock", "IconUnlock", "LemonSwitch", "checked", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "DeleteProjectModal", "isOpen", "setIsOpen", "currentProject", "projectBeingDeleted", "projectLogic", "deleteProject", "isDeletionConfirmed", "setIsDeletionConfirmed", "isDeletionInProgress", "LemonModal", "LemonButton", "LemonInput", "value", "ProjectDangerZone", "isModalVisible", "setIsModalVisible", "restrictedReason", "useRestrictedArea", "IconTrash", "import_jsx_runtime", "DeleteTeamModal", "isOpen", "setIsOpen", "currentTeam", "teamBeingDeleted", "teamLogic", "deleteTeam", "isDeletionConfirmed", "setIsDeletionConfirmed", "isDeletionInProgress", "LemonModal", "LemonButton", "LemonInput", "value", "TeamDangerZone", "featureFlags", "featureFlagLogic", "isModalVisible", "setIsModalVisible", "restrictedReason", "useRestrictedArea", "FEATURE_FLAGS", "ProjectDangerZone", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "JSBookmarklet", "team", "initCall", "apiHostOrigin", "href", "reportBookmarkletDragged", "eventUsageLogic", "ref", "IconBookmarkBorder", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "tzLabel", "tz", "offset", "TimezoneConfig", "preflight", "preflightLogic", "currentTeam", "currentTimezone", "currentTeamLoading", "teamLogic", "updateCurrentTeam", "LemonSkeleton", "options", "LemonInputSelect", "newTimezone", "currentOffset", "newOffset", "LemonDialog", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "WeekStartConfig", "currentTeam", "currentTeamLoading", "teamLogic", "updateCurrentTeam", "LemonSelect", "value", "LemonDialog", "import_jsx_runtime", "TeamDisplayName", "currentTeam", "currentTeamLoading", "teamLogic", "updateCurrentTeam", "featureFlags", "featureFlagLogic", "name", "setName", "displayNoun", "FEATURE_FLAGS", "LemonInput", "LemonButton", "WebSnippet", "Link", "LemonSkeleton", "JSSnippet", "FlaggedFeature", "LemonTag", "JSSnippetV2", "Bookmarklet", "isAuthenticatedTeam", "JSBookmarklet", "TeamVariables", "isTeamTokenResetAvailable", "resetToken", "currentOrganization", "organizationLogic", "preflight", "preflightLogic", "region", "openDialog", "LemonDialog", "capitalizeFirstLetter", "CodeSnippet", "IconRefresh", "getPublicSupportSnippet", "TeamTimezone", "LemonLabel", "TimezoneConfig", "WeekStartConfig", "TeamToolbarURLs", "urls", "AuthorizedUrlList", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "createTestAccountFilterWarningLabels", "currentTeam", "cohortsById", "positiveFilterOperators", "positiveFilters", "filter", "getFilterLabel", "PROPERTY_FILTER_TYPE_TO_TAXONOMIC_FILTER_GROUP_TYPE", "TestAccountFiltersConfig", "updateCurrentTeam", "teamLogic", "setTeamDefault", "filterTestAccountsDefaultsLogic", "reportTestAccountFiltersUpdated", "eventUsageLogic", "currentTeamLoading", "testAccountFilterFrequentMistakes", "cohortsModel", "testAccountFilterWarningLabels", "groupsTaxonomicTypes", "groupsModel", "handleChange", "filters", "LemonBanner", "l", "i", "key", "type", "fix", "PropertyFilters", "LemonSwitch", "checked", "ProjectAccountFiltersSetting", "Link", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "UserGroups", "userGroups", "userGroupsLoading", "userGroupsLogic", "ensureAllGroupsLoaded", "openGroupCreationForm", "LemonTable", "_", "item", "Actions", "record", "MembersTable", "LemonButton", "group", "addMember", "deleteUserGroup", "LemonMenu", "IconEllipsis", "MemberSelect", "m", "user", "groupId", "members", "removeMember", "member", "ProfilePicture", "IconMinus", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_loaders", "adjustDiscordWebhook", "webhookUrl", "webhookIntegrationLogic", "actions", "webhook", "response", "api_default", "error", "teamLogic", "s", "testedWebhookLoading", "currentTeamLoading", "testedWebhook", "lemonToast", "capitalizeFirstLetter", "import_jsx_runtime", "WebhookIntegration", "webhook", "setWebhook", "testWebhook", "removeWebhook", "webhookIntegrationLogic", "loading", "currentTeam", "teamLogic", "featureFlags", "featureFlagLogic", "openSupportForm", "supportLogic", "FEATURE_FLAGS", "Link", "LemonInput", "LemonButton", "e", "urls", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "InviteLinkComponent", "id", "invite", "url", "CopyToClipboardInline", "makeActionsComponent", "deleteInvite", "_", "LemonButton", "IconX", "LemonDialog", "Invites", "invites", "invitesLoading", "inviteLogic", "showInviteModal", "preflight", "preflightLogic", "restrictionReason", "useRestrictedArea", "columns", "ProfilePicture", "LemonTag", "OrganizationMembershipLevel", "createdByColumn", "createdAtColumn", "EmailUnavailableMessage", "LemonTable", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "ActionsComponent", "_", "member", "user", "userLogic", "currentOrganization", "organizationLogic", "removeMember", "changeMemberAccessLevel", "membersLogic", "currentMembershipLevel", "allowDeletion", "myMembershipLevel", "allowedLevels", "organizationMembershipLevelIntegers", "listLevel", "getReasonForAccessLevelChangeProhibition", "disallowedReason", "More", "LemonButton", "event", "LemonDialog", "fullName", "membershipLevelToName", "LemonDivider", "Members", "filteredMembers", "membersLoading", "search", "preflight", "preflightLogic", "setSearch", "ensureAllMembersLoaded", "updateOrganization", "openTwoFactorSetupModal", "twoFactorLogic", "twoFactorRestrictionReason", "useRestrictedArea", "LemonInput", "LemonTable", "ProfilePicture", "a", "b", "LemonTag", "capitalizeFirstLetter", "Tooltip", "joinedAt", "TZLabel", "lastLogin", "PayGateMini", "LemonSwitch", "enforce_2fa", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "OrganizationAI", "currentOrganization", "currentOrganizationLoading", "organizationLogic", "updateOrganization", "restrictionReason", "useRestrictedArea", "LemonSwitch", "checked", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "DeleteOrganizationModal", "isOpen", "setIsOpen", "currentOrganization", "organizationBeingDeleted", "organizationLogic", "deleteOrganization", "isDeletionConfirmed", "setIsDeletionConfirmed", "isDeletionInProgress", "LemonModal", "LemonButton", "LemonInput", "value", "OrganizationDangerZone", "isModalVisible", "setIsModalVisible", "restrictionReason", "useRestrictedArea", "IconTrash", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "OrganizationDisplayName", "currentOrganization", "currentOrganizationLoading", "organizationLogic", "updateOrganization", "name", "setName", "restrictionReason", "useRestrictedArea", "LemonInput", "LemonButton", "e", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "OrganizationEmailPreferences", "currentOrganization", "organizationLogic", "updateOrganization", "restrictionReason", "useRestrictedArea", "LemonSwitch", "checked", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "OrganizationLogo", "currentOrganization", "currentOrganizationLoading", "organizationLogic", "updateOrganization", "logoMediaId", "setLogoMediaId", "setFilesToUpload", "filesToUpload", "uploading", "useUploadFiles", "_", "__", "id", "detail", "lemonToast", "restrictionReason", "useRestrictedArea", "LemonFileInput", "UploadedLogo", "LemonButton", "IconX", "e", "IconUploadFile", "init_dirname", "init_buffer", "init_process", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_react", "import_jsx_runtime", "RolesAndResourceAccessControls", "noAccessControls", "rolesWithResourceAccessControls", "rolesLoading", "roleBasedAccessControlsLoading", "resources", "availableLevels", "selectedRoleId", "defaultAccessLevel", "roleBasedAccessControlLogic", "updateRoleBasedAccessControls", "selectRoleId", "setEditingRoleId", "roleColumns", "resource", "_", "accessControlByResource", "role", "ac", "LemonSelect", "newValue", "level", "columns", "LemonTableLink", "ProfileBubbles", "member", "PayGateMini", "LemonTable", "RoleDetails", "LemonButton", "IconPlus", "RoleModal", "roleId", "user", "userLogic", "sortedMembers", "roles", "canEditRoleBasedAccessControls", "addMembersToRole", "removeMemberFromRole", "membersToAdd", "setMembersToAdd", "onSubmit", "membersNotInRole", "membersInRole", "LemonInputSelect", "newValues", "usersLemonSelectOptions", "ProfilePicture", "fullName", "a", "b", "editingRoleId", "submitEditingRole", "deleteRole", "isEditing", "onDelete", "LemonDialog", "LemonModal", "LemonField", "LemonInput", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "CreateRoleModal", "roleInFocus", "createRoleModalShown", "roleMembersToAdd", "roleMembersInFocusLoading", "addableMembers", "rolesLoading", "roleMembersInFocus", "rolesLogic", "setCreateRoleModalShown", "setRoleMembersToAdd", "createRole", "deleteRoleMember", "addRoleMembers", "deleteRole", "isAdminOrOwner", "organizationLogic", "roleName", "setRoleName", "isNewRole", "handleClose", "handleSubmit", "LemonModal", "Spinner", "LemonButton", "LemonInput", "LemonInputSelect", "newValues", "usersLemonSelectOptions", "member", "MemberRow", "roleMemberUuid", "deleteMember", "user", "ProfilePicture", "IconTrash", "init_dirname", "init_buffer", "init_process", "getSingularType", "type", "import_jsx_runtime", "PermissionsGrid", "resourceRolesAccess", "organizationResourcePermissionsLoading", "permissionsLogic", "updatePermission", "roles", "rolesLoading", "rolesLogic", "setRoleInFocus", "openCreateRoleModal", "isAdminOrOwner", "organizationLogic", "restrictionReason", "useRestrictedArea", "columns", "_", "role", "LemonButton", "resource", "name", "Tooltip", "LemonCheckbox", "TitleWithIcon", "getSingularType", "IconInfo", "v", "PayGateMini", "LemonTable", "CreateRoleModal", "import_jsx_runtime", "RoleBasedAccess", "useFeatureFlag", "RolesAndResourceAccessControls", "PermissionsGrid", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_kea_loaders", "verifiedDomainsLogic", "organizationLogic", "userLogic", "domain", "shown", "id", "state", "domains", "a", "b", "_", "values", "actions", "api_default", "payload", "response", "lemonToast", "_idToFind", "saml_acs_url", "saml_entity_id", "saml_x509_cert", "s", "verifiedDomains", "verifyingId", "hasAvailableFeature", "SECURE_URL_REGEX", "breakpoint", "updateParams", "import_jsx_runtime", "AddDomainModal", "addModalShown", "verifiedDomainsLoading", "verifiedDomainsLogic", "setAddModalShown", "addVerifiedDomain", "newDomain", "setNewDomain", "submitted", "setSubmitted", "errored", "DOMAIN_REGEX", "clean", "handleClose", "handleSubmit", "LemonModal", "LemonButton", "LemonInput", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_jsx_runtime", "ConfigureSAMLModal", "configureSAMLModalId", "isSamlConfigSubmitting", "samlConfig", "verifiedDomainsLogic", "setConfigureSAMLModalId", "preflight", "preflightLogic", "siteUrl", "samlReady", "LemonModal", "Link", "LemonField", "CopyToClipboardInline", "LemonInput", "LemonTextArea", "LemonBanner", "LemonButton", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "SSOSelect", "value", "loading", "onChange", "samlAvailable", "disabledReason", "preflight", "preflightLogic", "authProviders", "options", "key", "SSO_PROVIDER_NAMES", "SocialLoginIcon", "LemonSelect", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "VerifyDomainModal", "domainBeingVerified", "updatingDomainLoading", "verifiedDomainsLogic", "setVerifyModal", "verifyDomain", "challengeName", "LemonModal", "LemonTag", "LemonButton", "LemonField", "CopyToClipboardInline", "import_jsx_runtime", "iconStyle", "VerifiedDomains", "verifiedDomainsLoading", "updatingDomainLoading", "verifiedDomainsLogic", "setAddModalShown", "restrictionReason", "useRestrictedArea", "PayGateMini", "VerifiedDomainsTable", "LemonButton", "verifiedDomains", "currentOrganization", "isSSOEnforcementAvailable", "isSAMLAvailable", "updateDomain", "deleteVerifiedDomain", "setVerifyModal", "setConfigureSAMLModalId", "preflight", "preflightLogic", "columns", "_", "domain", "LemonTag", "Tooltip", "IconInfo", "is_verified", "verified_at", "IconCheckCircle", "IconExclamation", "IconWarning", "jit_provisioning_enabled", "id", "LemonSwitch", "checked", "sso_enforcement", "has_saml", "index", "SSOSelect", "val", "Link", "urls", "IconLock", "saml_acs_url", "saml_entity_id", "saml_x509_cert", "IconOffline", "More", "LemonDialog", "IconTrash", "LemonTable", "AddDomainModal", "ConfigureSAMLModal", "VerifyDomainModal", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "MoveProjectModal", "isOpen", "setIsOpen", "organization", "currentProject", "projectBeingMovedLoading", "projectLogic", "moveProject", "isConfirmed", "setConfirmed", "LemonModal", "LemonButton", "LemonInput", "value", "ProjectMove", "otherOrganizations", "userLogic", "isModalVisible", "setIsModalVisible", "restrictedReason", "useRestrictedArea", "targetOrganization", "setTargetOrganization", "LemonSelect", "o", "IconArrowRight", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "ProjectDisplayName", "currentProject", "currentProjectLoading", "projectLogic", "updateCurrentProject", "name", "setName", "LemonInput", "LemonButton", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "changePasswordLogic", "userLogic", "values", "actions", "current_password", "password", "breakpoint", "api_default", "lemonToast", "e", "s", "validatePassword", "import_jsx_runtime", "ChangePassword", "validatedPassword", "isChangePasswordSubmitting", "changePasswordLogic", "LemonField", "LemonInput", "PasswordStrength", "LemonButton", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "HedgehogModeSettings", "hedgehogConfig", "hedgehogBuddyLogic", "patchHedgehogConfig", "LemonSwitch", "checked", "HedgehogOptions", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "OptOutCapture", "user", "userLoading", "userLogic", "updateUser", "LemonSwitch", "checked", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_kea_forms", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_kea_loaders", "import_kea_router", "import_jsx_runtime", "MAX_API_KEYS_PER_USER", "API_KEY_SCOPE_PRESETS", "APIScopes", "personalAPIKeysLogic", "userLogic", "id", "key", "data", "action", "_", "values", "api_default", "filteredKey", "actions", "label", "access_type", "scopes", "scoped_organizations", "scoped_teams", "payload", "breakpoint", "k", "s", "editingKey", "result", "scope", "user", "name", "value", "preset", "formValues", "newScopes", "LemonDialog", "CodeSnippet", "LemonBanner", "lemonToast", "urls", "searchParams", "presetKey", "import_jsx_runtime", "EditKeyModal", "editingKeyId", "isEditingKeySubmitting", "editingKeyChanged", "formScopeRadioValues", "allAccessSelected", "editingKey", "allTeams", "allTeamsLoading", "allOrganizations", "personalAPIKeysLogic", "setEditingKeyId", "setScopeRadioValue", "submitEditingKey", "resetScopes", "isNew", "LemonModal", "LemonButton", "LemonField", "LemonInput", "value", "onChange", "LemonLabel", "LemonSegmentedButton", "LemonInputSelect", "org", "Tooltip", "x", "val", "team", "LemonSelect", "API_KEY_SCOPE_PRESETS", "error", "IconErrorOutline", "LemonBanner", "APIScopes", "key", "disabledActions", "warnings", "disabledWhenProjectScoped", "info", "disabledDueToProjectScope", "clsx", "capitalizeFirstLetter", "IconInfo", "IconWarning", "TagList", "tags", "onMoreClick", "LemonTag", "PersonalAPIKeysTable", "keys", "keysLoading", "deleteKey", "loadKeys", "LemonTable", "label", "Link", "_", "id", "humanFriendlyDetailedTime", "LemonMenu", "LemonDialog", "IconEllipsis", "PersonalAPIKeys", "IconPlus", "MAX_API_KEYS_PER_USER", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "TwoFactorSettings", "user", "userLogic", "status", "isDisable2FAModalOpen", "isBackupCodesModalOpen", "twoFactorLogic", "updateUser", "loadMemberUpdates", "membersLogic", "generateBackupCodes", "disable2FA", "openTwoFactorSetupModal", "toggleDisable2FAModal", "toggleBackupCodesModal", "handleSuccess", "LemonModal", "LemonButton", "IconCopy", "copyToClipboard", "code", "IconCheckCircle", "IconWarning", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "UpdateEmailPreferences", "user", "userLoading", "userLogic", "updateUser", "currentOrganization", "organizationLogic", "LemonSwitch", "team", "LemonTag", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_forms", "import_jsx_runtime", "UserDetails", "userLoading", "isUserDetailsSubmitting", "userDetailsChanged", "user", "userLogic", "LemonField", "LemonInput", "LemonTag", "LemonButton", "import_jsx_runtime", "SETTINGS_MAP", "TeamDisplayName", "WebSnippet", "Bookmarklet", "TeamVariables", "AutocaptureSettings", "DataAttributes", "HeatmapsSettings", "ExceptionAutocaptureSettings", "WebVitalsAutocaptureSettings", "DeadClicksAutocaptureSettings", "TeamTimezone", "ProjectAccountFiltersSetting", "LemonTag", "DataColorThemes", "PersonsOnEvents", "CorrelationConfig", "PersonDisplayNameProperties", "PathCleaningFiltersConfig", "IPCapture", "HumanFriendlyComparisonPeriodsSetting", "GroupAnalyticsConfig", "PersonsJoinMode", "SessionsTableVersion", "CustomChannelTypes", "CookielessServerHashModeSetting", "BounceRateDurationSetting", "BounceRatePageViewModeSetting", "ReplayGeneral", "NetworkCaptureSettings", "ReplayAuthorizedDomains", "t", "ReplayTriggers", "SessionRecordingIngestionSettings", "ReplayAISettings", "SurveySettings", "FeatureFlagSettings", "UserGroups", "ErrorTrackingSymbolSets", "ErrorTrackingAlerting", "MaxMemorySettings", "TeamToolbarURLs", "WebhookIntegration", "SlackIntegration", "OtherIntegrations", "IPAllowListInfo", "TeamAccessControl", "ProjectMove", "organizationLogic", "TeamDangerZone", "ProjectDisplayName", "ProjectDangerZone", "OrganizationDisplayName", "OrganizationLogo", "Tooltip", "dayjs", "OrganizationAI", "Invites", "Members", "OrganizationEmailPreferences", "RoleBasedAccess", "VerifiedDomains", "ManagedReverseProxy", "OrganizationDangerZone", "urls", "UserDetails", "ChangePassword", "TwoFactorSettings", "PersonalAPIKeys", "ThemeSwitcher", "UpdateEmailPreferences", "OptOutCapture", "HedgehogModeSettings", "settingsLogic", "props", "key", "featureFlagLogic", "userLogic", "preflightLogic", "teamLogic", "level", "section", "setting", "_", "s", "sections", "acc", "doesMatchFlags", "featureFlags", "isCloudOrDev", "SETTINGS_MAP", "FEATURE_FLAGS", "selectedLevelRaw", "selectedSectionIdRaw", "selectedSectionId", "x", "selectedLevel", "preflight", "currentTeam", "settings", "selectedSettingId", "flagsArray", "flagCondition", "flag", "isConditionMet", "import_jsx_runtime", "Settings", "hideSections", "handleLocally", "props", "selectedSectionId", "selectedSection", "selectedLevel", "selectedSettingId", "selectedSetting", "sections", "settings", "isCompactNavigationOpen", "levels", "settingsLogic", "selectSection", "selectLevel", "selectSetting", "openCompactNavigation", "currentTeam", "teamLogic", "ref", "size", "useResizeBreakpoints", "isCompact", "inStorybookTestRunner", "showOptions", "settingsInSidebar", "AuthenticationAreaComponent", "TimeSensitiveAuthenticationArea", "React", "options", "s", "OptionButton", "level", "urls", "capitalizeFirstLetter", "x", "section", "compactNavigationContent", "clsx", "OptionGroup", "LemonButton", "IconChevronRight", "LemonDivider", "LemonBanner", "SettingsRenderer", "allSettings", "IconLink", "e", "NotFound", "depthMap", "depth", "option", "to", "active", "onClick", "children", "isLink", "IconExternal"]
}
