{
  "version": 3,
  "sources": ["../src/scenes/error-tracking/ErrorTrackingIssueScene.tsx", "../src/lib/components/PanelLayout/PanelLayout.tsx", "../src/scenes/error-tracking/issue/Events.tsx", "../src/scenes/error-tracking/issue/Overview.tsx", "../src/scenes/error-tracking/issue/panels/RecordingPanel.tsx", "../src/scenes/error-tracking/issue/panels/StacktracePanel.tsx", "../src/scenes/error-tracking/issue/tabs/EventsTab.tsx", "../src/scenes/error-tracking/issue/Metadata.tsx", "../src/lib/lemon-ui/ClampedText/index.ts", "../src/lib/lemon-ui/ClampedText/ClampedText.tsx", "../src/scenes/error-tracking/issue/Sparkline.tsx"],
  "sourcesContent": ["import './ErrorTracking.scss'\n\nimport { LemonButton, LemonDivider, Spinner } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport PanelLayout from 'lib/components/PanelLayout/PanelLayout'\nimport { useEffect } from 'react'\nimport { SceneExport } from 'scenes/sceneTypes'\n\nimport { ErrorTrackingIssue } from '~/queries/schema/schema-general'\n\nimport { AssigneeSelect } from './AssigneeSelect'\nimport { ErrorTrackingFilters } from './ErrorTrackingFilters'\nimport { errorTrackingIssueSceneLogic } from './errorTrackingIssueSceneLogic'\nimport { ErrorTrackingSetupPrompt } from './ErrorTrackingSetupPrompt'\nimport { Events } from './issue/Events'\nimport { Metadata } from './issue/Metadata'\nimport { SparklinePanel } from './issue/Sparkline'\n\nexport const scene: SceneExport = {\n    component: ErrorTrackingIssueScene,\n    logic: errorTrackingIssueSceneLogic,\n    paramsToProps: ({\n        params: { id },\n        searchParams: { fingerprint },\n    }): (typeof errorTrackingIssueSceneLogic)['props'] => ({ id, fingerprint }),\n}\n\nconst STATUS_LABEL: Record<ErrorTrackingIssue['status'], string> = {\n    active: 'Active',\n    archived: 'Archived',\n    resolved: 'Resolved',\n    pending_release: 'Pending release',\n}\n\nexport function ErrorTrackingIssueScene(): JSX.Element {\n    const { issue } = useValues(errorTrackingIssueSceneLogic)\n    const { updateIssue, initIssue, assignIssue } = useActions(errorTrackingIssueSceneLogic)\n\n    useEffect(() => {\n        initIssue()\n    }, [])\n\n    return (\n        <ErrorTrackingSetupPrompt>\n            <>\n                <PageHeader\n                    buttons={\n                        issue ? (\n                            issue.status === 'active' ? (\n                                <div className=\"flex divide-x gap-x-2\">\n                                    <AssigneeSelect\n                                        assignee={issue.assignee}\n                                        onChange={assignIssue}\n                                        type=\"secondary\"\n                                        showName\n                                    />\n                                    <div className=\"flex pl-2 gap-x-2\">\n                                        <LemonButton\n                                            type=\"secondary\"\n                                            onClick={() => updateIssue({ status: 'archived' })}\n                                        >\n                                            Archive\n                                        </LemonButton>\n                                        <LemonButton type=\"primary\" onClick={() => updateIssue({ status: 'resolved' })}>\n                                            Resolve\n                                        </LemonButton>\n                                    </div>\n                                </div>\n                            ) : (\n                                <LemonButton\n                                    type=\"secondary\"\n                                    className=\"upcasefirst-letter:uppercase\"\n                                    onClick={() => updateIssue({ status: 'active' })}\n                                    tooltip=\"Mark as active\"\n                                >\n                                    {STATUS_LABEL[issue.status]}\n                                </LemonButton>\n                            )\n                        ) : (\n                            false\n                        )\n                    }\n                />\n                {issue ? (\n                    <div className=\"ErrorTrackingIssue\">\n                        <Metadata />\n                        <LemonDivider className=\"my-4\" />\n                        <PanelLayout>\n                            <PanelLayout.Container column primary>\n                                <ErrorTrackingFilters />\n                                <SparklinePanel />\n                                <PanelLayout.Panel primary>\n                                    <Events />\n                                </PanelLayout.Panel>\n                            </PanelLayout.Container>\n                        </PanelLayout>\n                    </div>\n                ) : (\n                    <Spinner />\n                )}\n            </>\n        </ErrorTrackingSetupPrompt>\n    )\n}\n", "import { LemonButton, LemonButtonProps, Tooltip } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { LemonMenu, LemonMenuItem, LemonMenuProps } from 'lib/lemon-ui/LemonMenu/LemonMenu'\nimport { PropsWithChildren } from 'react'\n\ntype PanelContainerProps = PropsWithChildren<{\n    primary: boolean\n    className?: string\n    column?: boolean\n}>\n\ninterface SettingsMenuProps extends Omit<LemonMenuProps, 'items' | 'children'> {\n    label?: string\n    items: LemonMenuItem[]\n    icon?: JSX.Element\n    isAvailable?: boolean\n    whenUnavailable?: LemonMenuItem\n    highlightWhenActive?: boolean\n    closeOnClickInside?: boolean\n}\n\ntype SettingsButtonProps = Omit<LemonButtonProps, 'status' | 'sideAction' | 'className'> & {\n    tooltip?: string\n    icon?: JSX.Element | null\n    label?: JSX.Element | string\n}\n\ntype SettingsToggleProps = SettingsButtonProps & {\n    active: boolean\n}\n\nfunction PanelLayout({ className, ...props }: Omit<PanelContainerProps, 'primary'>): JSX.Element {\n    return <Container className={clsx(className, 'PanelLayout')} {...props} primary={false} />\n}\n\nfunction Container({ children, primary, className, column }: PanelContainerProps): JSX.Element {\n    return (\n        <div\n            className={clsx(\n                'flex',\n                primary && 'flex-1',\n                column ? 'flex-col gap-y-4' : 'gap-x-2',\n                primary ? 'PanelLayout__container--primary' : 'PanelLayout__container--secondary',\n                className\n            )}\n        >\n            {children}\n        </div>\n    )\n}\n\nfunction Panel({ children, primary, className }: Omit<PanelContainerProps, 'column'>): JSX.Element {\n    return (\n        <div className={clsx(primary && 'flex-1', 'border bg-surface-primary rounded-sm', className)}>{children}</div>\n    )\n}\n\nexport function PanelSettings({\n    children,\n    title,\n    border,\n}: PropsWithChildren<{\n    title?: string\n    border: 'bottom' | 'top'\n}>): JSX.Element {\n    return (\n        <div\n            className={clsx(\n                'flex flex-row w-full overflow-hidden bg-surface-primary items-center justify-between',\n                border === 'bottom' && 'border-b',\n                border === 'top' && 'border-t'\n            )}\n        >\n            {title && <span className=\"pl-1 font-medium\">{title}</span>}\n            <div className=\"flex font-light text-xs\">{children}</div>\n        </div>\n    )\n}\n\nexport function SettingsMenu({\n    label,\n    items,\n    icon,\n    isAvailable = true,\n    closeOnClickInside = true,\n    highlightWhenActive = true,\n    whenUnavailable,\n    ...props\n}: SettingsMenuProps): JSX.Element {\n    const active = items.some((cf) => !!cf.active)\n    return (\n        <LemonMenu\n            buttonSize=\"xsmall\"\n            closeOnClickInside={closeOnClickInside}\n            items={isAvailable ? items : whenUnavailable ? [whenUnavailable] : []}\n            {...props}\n        >\n            <LemonButton\n                className=\"rounded-[0px]\"\n                status={highlightWhenActive && active ? 'danger' : 'default'}\n                size=\"xsmall\"\n                icon={icon}\n            >\n                {label}\n            </LemonButton>\n        </LemonMenu>\n    )\n}\n\nexport function SettingsToggle({ tooltip, icon, label, active, ...props }: SettingsToggleProps): JSX.Element {\n    const button = (\n        <LemonButton\n            className=\"rounded-[0px]\"\n            icon={icon}\n            size=\"xsmall\"\n            status={active ? 'danger' : 'default'}\n            {...props}\n        >\n            {label}\n        </LemonButton>\n    )\n\n    // otherwise the tooltip shows instead of the disabled reason\n    return props.disabledReason ? button : <Tooltip title={tooltip}>{button}</Tooltip>\n}\n\nexport function SettingsButton(props: SettingsButtonProps): JSX.Element {\n    return <SettingsToggle active={false} {...props} />\n}\n\nPanelLayout.Panel = Panel\nPanelLayout.PanelSettings = PanelSettings\nPanelLayout.Container = Container\nPanelLayout.SettingsMenu = SettingsMenu\nPanelLayout.SettingsToggle = SettingsToggle\nPanelLayout.SettingsButton = SettingsButton\n\nexport default PanelLayout\n", "import { LemonCollapse, LemonDivider } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport PanelLayout, { SettingsButton } from 'lib/components/PanelLayout/PanelLayout'\nimport { useState } from 'react'\n\nimport { errorTrackingIssueSceneLogic, EventsMode } from '../errorTrackingIssueSceneLogic'\nimport { getExceptionAttributes, hasStacktrace } from '../utils'\nimport { Overview } from './Overview'\nimport RecordingPanel from './panels/RecordingPanel'\nimport StackTracePanel from './panels/StacktracePanel'\nimport { EventsTab } from './tabs/EventsTab'\n\nexport type ErrorTrackingIssueEventsPanel = {\n    key: 'stacktrace' | 'recording'\n    Content: () => JSX.Element\n    Header: string | (({ active }: { active: boolean }) => JSX.Element)\n    hasContent: ({ hasStack, hasRecording }: { hasStack: boolean; hasRecording: boolean }) => boolean\n    className?: string\n}\n\nconst PANELS = [StackTracePanel, RecordingPanel] as ErrorTrackingIssueEventsPanel[]\n\nexport const Events = (): JSX.Element => {\n    const { issueProperties, eventsMode } = useValues(errorTrackingIssueSceneLogic)\n    const { setEventsMode } = useActions(errorTrackingIssueSceneLogic)\n    const [activeKeys, setActiveKeys] = useState<ErrorTrackingIssueEventsPanel['key'][]>(['stacktrace'])\n\n    const { exceptionList } = getExceptionAttributes(issueProperties)\n\n    const hasStack = hasStacktrace(exceptionList)\n    const hasRecording = issueProperties['$session_id'] && issueProperties['$recording_status'] === 'active'\n\n    const panels = PANELS.filter(({ hasContent }) => hasContent({ hasStack, hasRecording })).map(\n        ({ key, Header, Content, className }) => ({\n            key,\n            content: <Content />,\n            header: typeof Header === 'string' ? Header : <Header active={activeKeys.includes(key)} />,\n            className,\n        })\n    )\n\n    return (\n        <>\n            <PanelLayout.PanelSettings title=\"Events\" border=\"bottom\">\n                {/* TODO: follow up PR when we support this in the events query */}\n                {/* {eventsMode != EventsMode.All && (\n                    <SettingsMenu\n                        highlightWhenActive={false}\n                        items={[\n                            {\n                                label: 'Earliest',\n                                onClick: () => setEventsMode(EventsMode.Earliest),\n                                active: eventsMode === EventsMode.Earliest,\n                            },\n                            {\n                                label: 'Latest',\n                                onClick: () => setEventsMode(EventsMode.Latest),\n                                active: eventsMode === EventsMode.Latest,\n                            },\n                            {\n                                label: 'Recommended',\n                                onClick: () => setEventsMode(EventsMode.Recommended),\n                                active: eventsMode === EventsMode.Recommended,\n                            },\n                        ]}\n                        label={capitalizeFirstLetter(eventsMode)}\n                    />\n                )} */}\n                <SettingsButton\n                    label={eventsMode === EventsMode.All ? 'Close' : 'View all events'}\n                    active\n                    onClick={() => setEventsMode(eventsMode === EventsMode.All ? EventsMode.Latest : EventsMode.All)}\n                />\n            </PanelLayout.PanelSettings>\n            {eventsMode === EventsMode.All ? (\n                <EventsTab />\n            ) : (\n                <>\n                    <Overview />\n                    <LemonDivider className=\"mt-2 mb-0\" />\n                    {panels.length > 0 && (\n                        <LemonCollapse\n                            embedded\n                            multiple\n                            activeKeys={activeKeys}\n                            onChange={setActiveKeys}\n                            panels={panels}\n                        />\n                    )}\n                </>\n            )}\n        </>\n    )\n}\n", "import { LemonSkeleton } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { errorTrackingIssueSceneLogic } from 'scenes/error-tracking/errorTrackingIssueSceneLogic'\nimport { getExceptionAttributes } from 'scenes/error-tracking/utils'\n\nexport const Overview = (): JSX.Element => {\n    const { issueProperties, issueLoading } = useValues(errorTrackingIssueSceneLogic)\n\n    const { synthetic, level, browser, os, library, unhandled } = getExceptionAttributes(issueProperties)\n\n    const TableRow = ({ label, value }: { label: string; value: string | undefined }): JSX.Element => (\n        <tr>\n            <td className=\"text-secondary\">{label}</td>\n            <td>{value ?? <div className=\"italic\">unknown</div>}</td>\n        </tr>\n    )\n\n    if (issueLoading) {\n        return (\n            <div className=\"space-y-2\">\n                <LemonSkeleton />\n                <LemonSkeleton.Row repeat={2} />\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"px-1\">\n            <div className=\"grid grid-cols-2 gap-2\">\n                <table>\n                    {[\n                        { label: 'Level', value: level },\n                        { label: 'Synthetic', value: synthetic },\n                        { label: 'Library', value: library },\n                        { label: 'Unhandled', value: unhandled },\n                    ].map((row, index) => (\n                        <TableRow key={index} {...row} />\n                    ))}\n                </table>\n                <table>\n                    {[\n                        { label: 'Browser', value: browser },\n                        { label: 'OS', value: os },\n                        { label: 'URL', value: issueProperties['$current_url'] },\n                    ].map((row, index) => (\n                        <TableRow key={index} {...row} />\n                    ))}\n                </table>\n            </div>\n        </div>\n    )\n}\n", "import { useValues } from 'kea'\nimport { errorTrackingIssueSceneLogic } from 'scenes/error-tracking/errorTrackingIssueSceneLogic'\nimport { SessionRecordingPlayer } from 'scenes/session-recordings/player/SessionRecordingPlayer'\n\nimport { ErrorTrackingIssueEventsPanel } from '../Events'\n\nconst Content = (): JSX.Element => {\n    const { issueProperties } = useValues(errorTrackingIssueSceneLogic)\n\n    return (\n        <SessionRecordingPlayer\n            playerKey=\"issue\"\n            sessionRecordingId={issueProperties['$session_id']}\n            noMeta\n            noBorder\n            autoPlay\n            noInspector\n            matchingEventsMatchType={{\n                matchType: 'name',\n                eventNames: ['$exception'],\n            }}\n        />\n    )\n}\n\nexport default {\n    key: 'recording',\n    Content,\n    Header: 'Recording',\n    hasContent: ({ hasRecording }) => hasRecording,\n    className: 'p-0',\n} as ErrorTrackingIssueEventsPanel\n", "import { LemonSegmentedButton } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { stackFrameLogic } from 'lib/components/Errors/stackFrameLogic'\nimport { ChainedStackTraces } from 'lib/components/Errors/StackTraces'\nimport { errorTrackingIssueSceneLogic } from 'scenes/error-tracking/errorTrackingIssueSceneLogic'\nimport { getExceptionAttributes, hasAnyInAppFrames } from 'scenes/error-tracking/utils'\n\nimport { ErrorTrackingIssueEventsPanel } from '../Events'\n\nconst Content = (): JSX.Element => {\n    const { issueProperties } = useValues(errorTrackingIssueSceneLogic)\n    const { showAllFrames } = useValues(stackFrameLogic)\n\n    const { exceptionList } = getExceptionAttributes(issueProperties)\n    const hasAnyInApp = hasAnyInAppFrames(exceptionList)\n\n    return <ChainedStackTraces showAllFrames={hasAnyInApp ? showAllFrames : true} exceptionList={exceptionList} />\n}\n\nconst Header = ({ active }: { active: boolean }): JSX.Element => {\n    const { issueProperties } = useValues(errorTrackingIssueSceneLogic)\n    const { showAllFrames } = useValues(stackFrameLogic)\n    const { setShowAllFrames } = useActions(stackFrameLogic)\n\n    const { exceptionList } = getExceptionAttributes(issueProperties)\n    const hasAnyInApp = hasAnyInAppFrames(exceptionList)\n\n    return (\n        <div className=\"flex justify-between items-center w-full\">\n            <span>Stack trace</span>\n            {active && hasAnyInApp ? (\n                <LemonSegmentedButton\n                    onChange={(value, e) => {\n                        setShowAllFrames(value === 'full')\n                        e.stopPropagation()\n                    }}\n                    value={showAllFrames ? 'full' : 'in-app'}\n                    options={[\n                        {\n                            value: 'in-app',\n                            label: 'In app only',\n                        },\n                        {\n                            value: 'full',\n                            label: 'Show full stack',\n                        },\n                    ]}\n                    size=\"xsmall\"\n                />\n            ) : null}\n        </div>\n    )\n}\n\nexport default {\n    key: 'stacktrace',\n    Content,\n    Header,\n    hasContent: ({ hasStack }) => hasStack,\n} as ErrorTrackingIssueEventsPanel\n", "import { useValues } from 'kea'\nimport { errorTrackingIssueSceneLogic } from 'scenes/error-tracking/errorTrackingIssueSceneLogic'\n\nimport { Query } from '~/queries/Query/Query'\nimport { QueryContext } from '~/queries/types'\nimport { InsightLogicProps } from '~/types'\n\nexport const EventsTab = (): JSX.Element => {\n    const { eventsQuery } = useValues(errorTrackingIssueSceneLogic)\n\n    const insightProps: InsightLogicProps = {\n        dashboardItemId: 'new-ErrorTrackingEventsQuery',\n    }\n\n    const context: QueryContext = {\n        columns: {\n            'recording_button(properties.$session_id)': {\n                title: 'Recording',\n                width: '134px',\n            },\n        },\n        showOpenEditorButton: false,\n        insightProps: insightProps,\n    }\n\n    return <Query query={eventsQuery} context={context} />\n}\n", "import { IconInfo } from '@posthog/icons'\nimport { LemonSkeleton, Tooltip } from '@posthog/lemon-ui'\nimport { useValues } from 'kea'\nimport { TZLabel } from 'lib/components/TZLabel'\nimport { ClampedText } from 'lib/lemon-ui/ClampedText'\nimport { humanFriendlyLargeNumber } from 'lib/utils'\nimport { errorTrackingIssueSceneLogic } from 'scenes/error-tracking/errorTrackingIssueSceneLogic'\n\nexport const Metadata = (): JSX.Element => {\n    const { issue } = useValues(errorTrackingIssueSceneLogic)\n\n    const hasSessionCount = issue && issue.aggregations && issue.aggregations.sessions !== 0\n\n    const Count = ({ value }: { value: number | undefined }): JSX.Element => {\n        return issue && issue.aggregations ? (\n            <div className=\"text-2xl font-semibold\">{value ? humanFriendlyLargeNumber(value) : '-'}</div>\n        ) : (\n            <div className=\"flex flex-1 items-center\">\n                <LemonSkeleton />\n            </div>\n        )\n    }\n\n    const Sessions = (\n        <div className=\"flex flex-col flex-1\">\n            <div className=\"flex text-muted text-xs space-x-px\">\n                <span>Sessions</span>\n                {!hasSessionCount && <IconInfo className=\"mt-0.5\" />}\n            </div>\n            <Count value={issue?.aggregations?.sessions} />\n        </div>\n    )\n\n    return (\n        <div className=\"space-y-1\">\n            {issue && issue.description ? <ClampedText text={issue.description} lines={2} /> : <LemonSkeleton />}\n            <div className=\"flex flex-1 justify-between\">\n                <div className=\"flex items-end space-x-6\">\n                    <div>\n                        <div className=\"text-muted text-xs\">First seen</div>\n                        {issue ? (\n                            <TZLabel time={issue.first_seen} className=\"border-dotted border-b\" />\n                        ) : (\n                            <LemonSkeleton />\n                        )}\n                    </div>\n                    <div>\n                        <div className=\"text-muted text-xs\">Last seen</div>\n                        {issue && issue.last_seen ? (\n                            <TZLabel time={issue.last_seen} className=\"border-dotted border-b\" />\n                        ) : (\n                            <LemonSkeleton />\n                        )}\n                    </div>\n                </div>\n                <div className=\"flex space-x-2 gap-8 items-end\">\n                    <div className=\"flex flex-col flex-1\">\n                        <div className=\"text-muted text-xs\">Occurrences</div>\n                        <Count value={issue?.aggregations?.occurrences} />\n                    </div>\n                    {hasSessionCount ? (\n                        Sessions\n                    ) : (\n                        <Tooltip title=\"No $session_id was set for any event in this issue\" delayMs={0}>\n                            {Sessions}\n                        </Tooltip>\n                    )}\n                    <div className=\"flex flex-col flex-1\">\n                        <div className=\"text-muted text-xs\">Users</div>\n                        <Count value={issue?.aggregations?.users} />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n", "export { ClampedText } from './ClampedText'\n", "import React, { useEffect, useState } from 'react'\n\nimport { Link } from '../Link'\n\nexport interface ClampedTextProps {\n    lines: number\n    text: string\n}\n\nconst isCssEllipsisApplied = (elem: HTMLDivElement): boolean => elem.scrollHeight > elem.clientHeight\n\nexport const ClampedText = React.forwardRef<HTMLDivElement, ClampedTextProps>(function ClampedText(\n    { lines, text },\n    ref\n) {\n    const [localLines, setLocalLines] = useState<number | undefined>(lines)\n    const [isExpanded, setIsExpanded] = useState<boolean>(false)\n    const [showMore, setShowMore] = useState<boolean>(false)\n\n    const handleToggleShowMore = (show: boolean): void => {\n        setShowMore(!showMore)\n        setIsExpanded(!isExpanded)\n        setLocalLines(show ? undefined : lines)\n    }\n\n    const handleConfigElement = (elem: HTMLDivElement): void => {\n        if (!elem) {\n            return\n        }\n\n        if (isCssEllipsisApplied(elem)) {\n            if (!showMore || !isExpanded) {\n                setShowMore(true)\n            }\n        } else {\n            setShowMore(false)\n        }\n    }\n\n    useEffect(() => setLocalLines(lines), [lines])\n\n    return (\n        <div ref={ref}>\n            <TruncatedElement lines={localLines} ref={handleConfigElement} text={text} />\n            <div>\n                {isExpanded || showMore ? (\n                    <Link onClick={() => handleToggleShowMore(!isExpanded)}>\n                        {isExpanded ? 'Show less' : 'Show more'}\n                    </Link>\n                ) : null}\n            </div>\n        </div>\n    )\n})\n\nconst TruncatedElement = React.forwardRef<HTMLDivElement, { lines?: number; text: string }>(function TruncatedElement(\n    { text, lines },\n    ref\n) {\n    return (\n        <span\n            // eslint-disable-next-line react/forbid-dom-props\n            style={\n                lines\n                    ? {\n                          overflow: 'hidden',\n                          display: '-webkit-box',\n                          WebkitBoxOrient: 'vertical',\n                          WebkitLineClamp: lines,\n                      }\n                    : {}\n            }\n            ref={ref}\n        >\n            {text}\n        </span>\n    )\n})\n", "import { useValues } from 'kea'\nimport { Sparkline } from 'lib/components/Sparkline'\n\nimport { errorTrackingIssueSceneLogic } from '../errorTrackingIssueSceneLogic'\nimport { errorTrackingLogic } from '../errorTrackingLogic'\nimport { sparklineLabels } from '../utils'\n\nexport const SparklinePanel = (): JSX.Element | null => {\n    const { customSparklineConfig } = useValues(errorTrackingLogic)\n    const { issue } = useValues(errorTrackingIssueSceneLogic)\n\n    if (!customSparklineConfig) {\n        return null\n    }\n\n    const labels = sparklineLabels(customSparklineConfig)\n    const data = issue?.aggregations?.customVolume || Array(labels.length).fill(0)\n\n    return (\n        <Sparkline loading={!issue?.aggregations?.customVolume} className=\"h-16 w-full\" data={data} labels={labels} />\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_jsx_runtime", "PanelLayout", "className", "props", "Container", "clsx", "children", "primary", "column", "Panel", "PanelSettings", "title", "border", "SettingsMenu", "label", "items", "icon", "isAvailable", "closeOnClickInside", "highlightWhenActive", "whenUnavailable", "active", "cf", "LemonMenu", "LemonButton", "SettingsToggle", "tooltip", "button", "Tooltip", "SettingsButton", "PanelLayout_default", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "Overview", "issueProperties", "issueLoading", "errorTrackingIssueSceneLogic", "synthetic", "level", "browser", "os", "library", "unhandled", "getExceptionAttributes", "TableRow", "label", "value", "LemonSkeleton", "row", "index", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "Content", "issueProperties", "errorTrackingIssueSceneLogic", "SessionRecordingPlayer", "RecordingPanel_default", "hasRecording", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "Content", "issueProperties", "errorTrackingIssueSceneLogic", "showAllFrames", "stackFrameLogic", "exceptionList", "getExceptionAttributes", "hasAnyInApp", "hasAnyInAppFrames", "ChainedStackTraces", "Header", "active", "setShowAllFrames", "LemonSegmentedButton", "value", "e", "StacktracePanel_default", "hasStack", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "EventsTab", "eventsQuery", "errorTrackingIssueSceneLogic", "Query", "import_jsx_runtime", "PANELS", "StacktracePanel_default", "RecordingPanel_default", "Events", "issueProperties", "eventsMode", "errorTrackingIssueSceneLogic", "setEventsMode", "activeKeys", "setActiveKeys", "exceptionList", "getExceptionAttributes", "hasStack", "hasStacktrace", "hasRecording", "panels", "hasContent", "key", "Header", "Content", "className", "PanelLayout_default", "SettingsButton", "EventsTab", "Overview", "LemonDivider", "LemonCollapse", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "init_dirname", "init_buffer", "init_process", "import_react", "import_jsx_runtime", "isCssEllipsisApplied", "elem", "ClampedText", "React", "lines", "text", "ref", "localLines", "setLocalLines", "isExpanded", "setIsExpanded", "showMore", "setShowMore", "handleToggleShowMore", "show", "handleConfigElement", "TruncatedElement", "Link", "import_jsx_runtime", "Metadata", "issue", "errorTrackingIssueSceneLogic", "hasSessionCount", "Count", "value", "humanFriendlyLargeNumber", "LemonSkeleton", "Sessions", "IconInfo", "ClampedText", "TZLabel", "Tooltip", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "SparklinePanel", "customSparklineConfig", "errorTrackingLogic", "issue", "errorTrackingIssueSceneLogic", "labels", "sparklineLabels", "data", "Sparkline", "import_jsx_runtime", "scene", "ErrorTrackingIssueScene", "errorTrackingIssueSceneLogic", "id", "fingerprint", "STATUS_LABEL", "issue", "updateIssue", "initIssue", "assignIssue", "ErrorTrackingSetupPrompt", "PageHeader", "AssigneeSelect", "LemonButton", "Metadata", "LemonDivider", "PanelLayout_default", "ErrorTrackingFilters", "SparklinePanel", "Events", "Spinner"]
}
