{
  "version": 3,
  "sources": ["../src/scenes/authentication/signup/verify-email/VerifyEmail.tsx"],
  "sourcesContent": ["import { LemonButton, LemonCheckbox, LemonModal } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { BridgePage } from 'lib/components/BridgePage/BridgePage'\nimport { HeartHog, MailHog, SurprisedHog } from 'lib/components/hedgehogs'\nimport { supportLogic } from 'lib/components/Support/supportLogic'\nimport { Spinner } from 'lib/lemon-ui/Spinner/Spinner'\nimport { useState } from 'react'\nimport { SceneExport } from 'scenes/sceneTypes'\n\nimport { verifyEmailLogic } from './verifyEmailLogic'\n\nexport const scene: SceneExport = {\n    component: VerifyEmail,\n    logic: verifyEmailLogic,\n}\n\ninterface SupportButtonsProps {\n    disabledReason?: string\n}\n\nconst SupportButtons = ({ disabledReason }: SupportButtonsProps): JSX.Element => {\n    const { openSupportForm } = useActions(supportLogic)\n    const { requestVerificationLink } = useActions(verifyEmailLogic)\n    const { uuid } = useValues(verifyEmailLogic)\n\n    return (\n        <div className=\"flex flex-row gap-x-4 justify-start\">\n            <LemonButton\n                type=\"primary\"\n                disabledReason={disabledReason}\n                onClick={() => {\n                    openSupportForm({ kind: 'bug', target_area: 'login' })\n                }}\n            >\n                Contact support\n            </LemonButton>\n            {uuid && (\n                <LemonButton\n                    type=\"primary\"\n                    disabledReason={disabledReason}\n                    onClick={() => {\n                        requestVerificationLink(uuid)\n                    }}\n                >\n                    Request a new link\n                </LemonButton>\n            )}\n        </div>\n    )\n}\n\nexport const VerifyEmailHelpLinks = (): JSX.Element => {\n    const [checkListValues, setCheckListValues] = useState<boolean[]>([])\n\n    const checklist = [\n        'Wait 5 minutes. Sometimes it takes a bit for email providers to deliver emails.',\n        'Check your spam folder and any firewalls you may have active',\n        'Ask your company IT department to allow any emails from @posthog.com',\n        'Channel your inner hedgehog and take another peek at your inbox',\n    ]\n\n    const handleChecklistChange = (index: number): void => {\n        const newCheckListValues = [...checkListValues]\n        newCheckListValues[index] = !newCheckListValues[index]\n        setCheckListValues(newCheckListValues)\n    }\n\n    const allChecked = checklist.every((_, index) => checkListValues[index])\n\n    return (\n        <div className=\"bg-primary p-4 rounded relative w-full max-w-160\">\n            <div className=\"flex flex-col justify-center\">\n                <div className=\"space-y-2 text-left\">\n                    {checklist.map((item, index) => (\n                        <LemonCheckbox\n                            key={index}\n                            onChange={() => handleChecklistChange(index)}\n                            checked={checkListValues[index]}\n                            label={item}\n                            bordered\n                            size=\"small\"\n                        />\n                    ))}\n                </div>\n            </div>\n            <div className=\"mt-4\">\n                <p className=\"text-left mb-2\">Choose one of the following options:</p>\n                <SupportButtons\n                    disabledReason={!allChecked ? \"Please confirm you've done all the steps above\" : undefined}\n                />\n            </div>\n        </div>\n    )\n}\n\nconst GetHelp = (): JSX.Element => {\n    const [isOpen, setIsOpen] = useState(false)\n    return (\n        <>\n            <LemonButton type=\"primary\" onClick={() => setIsOpen(true)}>\n                Get help\n            </LemonButton>\n            <LemonModal\n                isOpen={isOpen}\n                onClose={() => setIsOpen(false)}\n                title=\"Get help\"\n                description={\n                    <p className=\"max-w-160\">\n                        Sorry you're having troubles! We're here to help, but first we ask that you check a few things\n                        first on your end. Generally any issues with email happen after they leave our hands.\n                    </p>\n                }\n            >\n                <VerifyEmailHelpLinks />\n            </LemonModal>\n        </>\n    )\n}\n\nexport function VerifyEmail(): JSX.Element {\n    const { view } = useValues(verifyEmailLogic)\n\n    return (\n        <div className=\"flex h-full flex-col\">\n            <div className=\"flex h-full\">\n                <BridgePage view=\"verifyEmail\" fixedWidth={false}>\n                    <div className=\"px-12 py-8 text-center flex flex-col items-center max-w-160 w-full\">\n                        {view === 'pending' ? (\n                            <>\n                                <h2 className=\"text-lg\">Welcome to PostHog!</h2>\n                                <h1 className=\"text-3xl font-bold\">Let's verify your email address.</h1>\n                                <div className=\"max-w-60 my-10\">\n                                    <MailHog className=\"w-full h-full\" />\n                                </div>\n                                <p className=\"mb-6\">An email has been sent with a link to verify your email address.</p>\n                                <GetHelp />\n                            </>\n                        ) : view === 'verify' ? (\n                            <>\n                                <Spinner className=\"text-4xl mb-12\" />\n                                <p>Verifying your email address...</p>\n                            </>\n                        ) : view === 'success' ? (\n                            <>\n                                <h1 className=\"text-3xl font-bold\">Success!</h1>\n                                <div className=\"max-w-60 mb-12\">\n                                    <HeartHog className=\"w-full h-full\" />\n                                </div>\n                                <p>Thanks for verifying your email address. Now taking you to PostHog...</p>\n                            </>\n                        ) : view === 'invalid' ? (\n                            <>\n                                <h1 className=\"text-3xl font-bold\">Whoops!</h1>\n                                <div className=\"max-w-60 mb-12\">\n                                    <SurprisedHog className=\"w-full h-full\" />\n                                </div>\n                                <p className=\"mb-6\">Seems like that link isn't quite right. Try again?</p>\n                                <SupportButtons />\n                            </>\n                        ) : (\n                            <Spinner className=\"text-4xl\" />\n                        )}\n                    </div>\n                </BridgePage>\n            </div>\n        </div>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "import_jsx_runtime", "scene", "VerifyEmail", "verifyEmailLogic", "SupportButtons", "disabledReason", "openSupportForm", "supportLogic", "requestVerificationLink", "uuid", "LemonButton", "VerifyEmailHelpLinks", "checkListValues", "setCheckListValues", "checklist", "handleChecklistChange", "index", "newCheckListValues", "allChecked", "_", "item", "LemonCheckbox", "GetHelp", "isOpen", "setIsOpen", "LemonModal", "view", "BridgePage", "MailHog", "Spinner", "HeartHog", "SurprisedHog"]
}
