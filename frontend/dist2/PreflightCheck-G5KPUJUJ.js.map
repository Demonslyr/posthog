{
  "version": 3,
  "sources": ["../src/scenes/PreflightCheck/PreflightCheck.tsx"],
  "sourcesContent": ["import './PreflightCheck.scss'\n\nimport { IconCheckCircle, IconCollapse, IconExpand, IconWarning } from '@posthog/icons'\nimport { Link, Spinner } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { AnimatedCollapsible } from 'lib/components/AnimatedCollapsible'\nimport { BridgePage } from 'lib/components/BridgePage/BridgePage'\nimport { IconErrorOutline, IconRefresh } from 'lib/lemon-ui/icons'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonDivider } from 'lib/lemon-ui/LemonDivider'\nimport { LemonRow } from 'lib/lemon-ui/LemonRow'\nimport { capitalizeFirstLetter } from 'lib/utils'\nimport { SceneExport } from 'scenes/sceneTypes'\n\nimport { PreflightCheckStatus, PreflightItem, preflightLogic } from './preflightLogic'\n\nexport const scene: SceneExport = {\n    component: PreflightCheck,\n    logic: preflightLogic,\n}\n\nfunction PreflightCheckIcon({ status, loading }: { status: PreflightCheckStatus; loading?: boolean }): JSX.Element {\n    if (loading) {\n        return <Spinner textColored className=\"text-accent-primary\" />\n    }\n    if (status === 'validated') {\n        return <IconCheckCircle />\n    } else if (status === 'warning' || status === 'optional') {\n        return <IconWarning />\n    }\n    return <IconErrorOutline />\n}\n\nfunction PreflightItemRow({ name, status, caption }: PreflightItem): JSX.Element {\n    const { preflightLoading } = useValues(preflightLogic)\n    return (\n        <div className={clsx('PreflightItem', preflightLoading ? 'Preflight--loading' : `Preflight--${status}`)}>\n            <div className=\"PreflightItem__icon-container\">\n                <PreflightCheckIcon status={status} loading={preflightLoading} />\n            </div>\n            <div className=\"PreflightItem__text-container\">\n                <p className=\"PreflightItem__item-name\">{name}</p>\n                {caption && (\n                    <p data-attr=\"caption\" className=\"text-secondary\">\n                        {caption}\n                    </p>\n                )}\n            </div>\n\n            <div>\n                <p className=\"Preflight__status-text\" data-attr=\"status-text\">\n                    {capitalizeFirstLetter(preflightLoading ? 'checking' : status)}\n                </p>\n            </div>\n        </div>\n    )\n}\n\nexport function PreflightCheck(): JSX.Element {\n    const { preflight, preflightLoading, preflightMode, checks, areChecksExpanded, checksSummary } =\n        useValues(preflightLogic)\n    const { setPreflightMode, handlePreflightFinished, setChecksManuallyExpanded, revalidatePreflight } =\n        useActions(preflightLogic)\n\n    return (\n        <BridgePage\n            view=\"preflight-check\"\n            footer={\n                <p className=\"text-center mt-4 mb-0\">\n                    Need help? Take a look at our{' '}\n                    <Link\n                        to=\"https://posthog.com/docs/self-host/deploy/troubleshooting\"\n                        target=\"_blank\"\n                        targetBlankIcon={false}\n                    >\n                        documentation\n                    </Link>{' '}\n                    or{' '}\n                    <Link to=\"https://posthog.com/support\" target=\"_blank\" targetBlankIcon={false}>\n                        visit community support\n                    </Link>\n                    .\n                </p>\n            }\n            fixedWidth={false}\n        >\n            <div className=\"Preflight\">\n                {!preflightMode ? (\n                    <>\n                        <div className=\"Preflight__header\">\n                            <p className=\"Preflight__header--title-text\">Select a launch mode</p>\n                            <p className=\"Preflight__header--secondary-text\">\n                                What's your plan for this installation? We'll make infrastructure checks accordingly.\n                            </p>\n                        </div>\n                        <LemonButton\n                            fullWidth\n                            center\n                            type=\"primary\"\n                            className=\"mt-2\"\n                            size=\"large\"\n                            data-attr=\"preflight-live\"\n                            onClick={() => setPreflightMode('live')}\n                        >\n                            Live implementation\n                        </LemonButton>\n                        <LemonButton\n                            type=\"secondary\"\n                            fullWidth\n                            center\n                            className=\"mt-2\"\n                            size=\"large\"\n                            data-attr=\"preflight-experimentation\"\n                            onClick={() => setPreflightMode('experimentation')}\n                        >\n                            Just experimenting\n                        </LemonButton>\n                        <LemonDivider thick dashed className=\"my-6\" />\n                        <p className=\"text-secondary text-center mb-0\">\n                            We will not enforce some security requirements in experimentation mode.\n                        </p>\n                    </>\n                ) : (\n                    <>\n                        <div className=\"Preflight__header\">\n                            <p className=\"Preflight__header--title-text\">Validate implementation</p>\n                            <p className=\"Preflight__header--secondary-text\">\n                                Validation happens immediately. You can rerun validation checks by clicking \u201Cvalidate\n                                requirements\u201D. If you get stuck, try our{' '}\n                                <Link to=\"https://posthog.com/docs/self-host/deploy/troubleshooting\" target=\"_blank\">\n                                    troubleshooting guide\n                                </Link>{' '}\n                                or our{' '}\n                                <Link to=\"https://posthog.com/docs/runbook\" target=\"_blank\">\n                                    self-host runbook\n                                </Link>\n                                .\n                            </p>\n                        </div>\n\n                        <div className=\"Preflight__checks-container\">\n                            <div className=\"Preflight__check-summary\">\n                                <div\n                                    className={clsx(\n                                        'Preflight__summary-icon-container',\n                                        preflightLoading\n                                            ? 'Preflight--loading'\n                                            : `Preflight--${checksSummary.summaryStatus}`\n                                    )}\n                                >\n                                    <PreflightCheckIcon\n                                        status={checksSummary.summaryStatus}\n                                        loading={preflightLoading}\n                                    />\n                                </div>\n                                <div className=\"Preflight__summary-text-container\">\n                                    <p className=\"Preflight__summary-header\">Validation checks</p>\n                                    <p data-attr=\"caption\" className=\"text-secondary Preflight__summary-description\">\n                                        {checksSummary.summaryString}\n                                    </p>\n                                </div>\n                                <LemonButton\n                                    icon={\n                                        areChecksExpanded ? (\n                                            <IconCollapse style={{ color: 'var(--text-secondary)' }} />\n                                        ) : (\n                                            <IconExpand style={{ color: 'var(--text-secondary)' }} />\n                                        )\n                                    }\n                                    onClick={() => {\n                                        setChecksManuallyExpanded(!areChecksExpanded)\n                                    }}\n                                />\n                            </div>\n                            <AnimatedCollapsible collapsed={!areChecksExpanded}>\n                                <>\n                                    {checks.map((item) => (\n                                        <PreflightItemRow key={item.id} {...item} />\n                                    ))}\n                                </>\n                            </AnimatedCollapsible>\n                            <LemonButton\n                                center\n                                fullWidth\n                                size=\"large\"\n                                data-attr=\"preflight-refresh\"\n                                onClick={() => revalidatePreflight()}\n                                disabled={preflightLoading || !preflight}\n                                icon={<IconRefresh />}\n                            >\n                                Validate requirements\n                            </LemonButton>\n                        </div>\n                        <LemonDivider thick dashed className=\"my-6\" />\n                        {checksSummary.summaryStatus !== 'error' || preflightMode == 'experimentation' ? (\n                            <LemonButton\n                                fullWidth\n                                center\n                                type=\"primary\"\n                                className=\"mt-2\"\n                                size=\"large\"\n                                data-attr=\"preflight-complete\"\n                                onClick={handlePreflightFinished}\n                            >\n                                Continue\n                            </LemonButton>\n                        ) : (\n                            <LemonRow fullWidth center className=\"mt-2 Preflight__cannot-continue\" size=\"large\">\n                                <p className=\"text-center text-secondary\">\n                                    All required checks must pass before you can continue\n                                </p>\n                            </LemonRow>\n                        )}\n                    </>\n                )}\n            </div>\n        </BridgePage>\n    )\n}\n\nexport default PreflightCheck\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_jsx_runtime", "scene", "PreflightCheck", "preflightLogic", "PreflightCheckIcon", "status", "loading", "Spinner", "IconCheckCircle", "IconWarning", "IconErrorOutline", "PreflightItemRow", "name", "caption", "preflightLoading", "clsx", "capitalizeFirstLetter", "preflight", "preflightMode", "checks", "areChecksExpanded", "checksSummary", "setPreflightMode", "handlePreflightFinished", "setChecksManuallyExpanded", "revalidatePreflight", "BridgePage", "Link", "LemonButton", "IconCollapse", "IconExpand", "AnimatedCollapsible", "item", "IconRefresh", "LemonDivider", "LemonRow", "PreflightCheck_default"]
}
