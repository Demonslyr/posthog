{
  "version": 3,
  "sources": ["../src/scenes/insights/InsightScene.tsx", "../src/scenes/insights/Insight.tsx", "../src/scenes/insights/InsightPageHeader.tsx", "../src/lib/components/AddToDashboard/AddToDashboard.tsx", "../src/lib/components/AddToDashboard/AddToDashboardModal.tsx", "../src/lib/components/AddToDashboard/addToDashboardModalLogic.ts", "../src/lib/components/Alerts/AlertsButton.tsx", "../src/scenes/insights/insightCommandLogic.ts", "../src/scenes/insights/InsightSaveButton.tsx", "../src/scenes/insights/InsightNav/InsightsNav.tsx", "../src/lib/components/Alerts/AlertDeletionWarning.tsx", "../src/scenes/insights/views/Trends/FunnelsCue.tsx", "../src/scenes/insights/views/Trends/funnelsCueLogic.tsx", "../src/scenes/insights/InsightSkeleton.tsx"],
  "sourcesContent": ["import { useValues } from 'kea'\nimport { NotFound } from 'lib/components/NotFound'\nimport { Insight } from 'scenes/insights/Insight'\nimport { insightSceneLogic } from 'scenes/insights/insightSceneLogic'\nimport { InsightSkeleton } from 'scenes/insights/InsightSkeleton'\nimport { SceneExport } from 'scenes/sceneTypes'\n\nexport function InsightScene(): JSX.Element {\n    const { insightId, insight, insightLogicRef } = useValues(insightSceneLogic)\n\n    if (insightId === 'new' || (insightId && insight?.id && insight?.short_id)) {\n        return <Insight insightId={insightId} />\n    }\n\n    if (insightLogicRef?.logic?.values?.insightLoading) {\n        return <InsightSkeleton />\n    }\n\n    return <NotFound object=\"insight\" />\n}\n\nexport const scene: SceneExport = {\n    component: InsightScene,\n    logic: insightSceneLogic,\n}\n", "import { LemonBanner, LemonButton } from '@posthog/lemon-ui'\nimport { BindLogic, useActions, useMountedLogic, useValues } from 'kea'\nimport { AccessDenied } from 'lib/components/AccessDenied'\nimport { DebugCHQueries } from 'lib/components/CommandPalette/DebugCHQueries'\nimport { isObject } from 'lib/utils'\nimport { InsightPageHeader } from 'scenes/insights/InsightPageHeader'\nimport { insightSceneLogic } from 'scenes/insights/insightSceneLogic'\nimport { ReloadInsight } from 'scenes/saved-insights/ReloadInsight'\nimport { urls } from 'scenes/urls'\n\nimport { Query } from '~/queries/Query/Query'\nimport { Node } from '~/queries/schema/schema-general'\nimport { containsHogQLQuery, isInsightVizNode } from '~/queries/utils'\nimport { InsightShortId, ItemMode } from '~/types'\n\nimport { insightCommandLogic } from './insightCommandLogic'\nimport { insightDataLogic } from './insightDataLogic'\nimport { insightLogic } from './insightLogic'\nimport { InsightsNav } from './InsightNav/InsightsNav'\nexport interface InsightSceneProps {\n    insightId: InsightShortId | 'new'\n}\n\nexport function Insight({ insightId }: InsightSceneProps): JSX.Element {\n    // insightSceneLogic\n    const { insightMode, insight, filtersOverride, variablesOverride, freshQuery } = useValues(insightSceneLogic)\n\n    // insightLogic\n    const logic = insightLogic({\n        dashboardItemId: insightId || 'new',\n        // don't use cached insight if we have filtersOverride\n        cachedInsight:\n            (isObject(filtersOverride) || isObject(variablesOverride)) && insight?.short_id === insightId\n                ? insight\n                : null,\n        filtersOverride,\n        variablesOverride,\n    })\n    const { insightProps, accessDeniedToInsight } = useValues(logic)\n\n    // insightDataLogic\n    const { query, showQueryEditor, showDebugPanel } = useValues(insightDataLogic(insightProps))\n    const { setQuery: setInsightQuery } = useActions(insightDataLogic(insightProps))\n\n    // other logics\n    useMountedLogic(insightCommandLogic(insightProps))\n\n    const actuallyShowQueryEditor = insightMode === ItemMode.Edit && showQueryEditor\n\n    const setQuery = (query: Node, isSourceUpdate?: boolean): void => {\n        if (!isInsightVizNode(query) || isSourceUpdate) {\n            setInsightQuery(query)\n        }\n    }\n\n    if (accessDeniedToInsight) {\n        return <AccessDenied object=\"insight\" />\n    }\n\n    return (\n        <BindLogic logic={insightLogic} props={insightProps}>\n            <div className=\"Insight\">\n                <InsightPageHeader insightLogicProps={insightProps} />\n\n                {(isObject(filtersOverride) || isObject(variablesOverride)) && (\n                    <LemonBanner type=\"warning\" className=\"mb-4\">\n                        <div className=\"flex flex-row items-center justify-between gap-2\">\n                            <span>\n                                You are viewing this insight with{' '}\n                                {isObject(variablesOverride) ? 'variables' : 'filters'} from a dashboard\n                            </span>\n\n                            <LemonButton type=\"secondary\" to={urls.insightView(insightId as InsightShortId)}>\n                                Discard dashboard {isObject(variablesOverride) ? 'variables' : 'filters'}\n                            </LemonButton>\n                        </div>\n                    </LemonBanner>\n                )}\n\n                {insightMode === ItemMode.Edit && <InsightsNav />}\n\n                {showDebugPanel && (\n                    <div className=\"mb-4\">\n                        <DebugCHQueries insightId={insightProps.cachedInsight?.id} />\n                    </div>\n                )}\n\n                {freshQuery ? <ReloadInsight /> : null}\n\n                <Query\n                    query={isInsightVizNode(query) ? { ...query, full: true } : query}\n                    setQuery={setQuery}\n                    readOnly={insightMode !== ItemMode.Edit}\n                    context={{\n                        showOpenEditorButton: false,\n                        showQueryEditor: actuallyShowQueryEditor,\n                        showQueryHelp: insightMode === ItemMode.Edit && !containsHogQLQuery(query),\n                        insightProps,\n                    }}\n                    filtersOverride={filtersOverride}\n                    variablesOverride={variablesOverride}\n                />\n            </div>\n        </BindLogic>\n    )\n}\n", "import { useActions, useMountedLogic, useValues } from 'kea'\nimport { router } from 'kea-router'\nimport { AccessControlledLemonButton } from 'lib/components/AccessControlledLemonButton'\nimport { AddToDashboard } from 'lib/components/AddToDashboard/AddToDashboard'\nimport { AddToDashboardModal } from 'lib/components/AddToDashboard/AddToDashboardModal'\nimport { AlertsButton } from 'lib/components/Alerts/AlertsButton'\nimport { insightAlertsLogic } from 'lib/components/Alerts/insightAlertsLogic'\nimport { EditAlertModal } from 'lib/components/Alerts/views/EditAlertModal'\nimport { ManageAlertsModal } from 'lib/components/Alerts/views/ManageAlertsModal'\nimport { EditableField } from 'lib/components/EditableField/EditableField'\nimport { ExportButton } from 'lib/components/ExportButton/ExportButton'\nimport { exportsLogic } from 'lib/components/ExportButton/exportsLogic'\nimport { ObjectTags } from 'lib/components/ObjectTags/ObjectTags'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { SharingModal } from 'lib/components/Sharing/SharingModal'\nimport { SubscribeButton, SubscriptionsModal } from 'lib/components/Subscriptions/SubscriptionsModal'\nimport { UserActivityIndicator } from 'lib/components/UserActivityIndicator/UserActivityIndicator'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { More } from 'lib/lemon-ui/LemonButton/More'\nimport { LemonDialog } from 'lib/lemon-ui/LemonDialog'\nimport { LemonDivider } from 'lib/lemon-ui/LemonDivider'\nimport { LemonField } from 'lib/lemon-ui/LemonField'\nimport { LemonInput } from 'lib/lemon-ui/LemonInput'\nimport { LemonSwitch } from 'lib/lemon-ui/LemonSwitch'\nimport { deleteInsightWithUndo } from 'lib/utils/deleteWithUndo'\nimport { useState } from 'react'\nimport { NewDashboardModal } from 'scenes/dashboard/NewDashboardModal'\nimport { insightCommandLogic } from 'scenes/insights/insightCommandLogic'\nimport { insightDataLogic } from 'scenes/insights/insightDataLogic'\nimport { insightLogic } from 'scenes/insights/insightLogic'\nimport { InsightSaveButton } from 'scenes/insights/InsightSaveButton'\nimport { insightSceneLogic } from 'scenes/insights/insightSceneLogic'\nimport { NotebookSelectButton } from 'scenes/notebooks/NotebookSelectButton/NotebookSelectButton'\nimport { preflightLogic } from 'scenes/PreflightCheck/preflightLogic'\nimport { projectLogic } from 'scenes/projectLogic'\nimport { savedInsightsLogic } from 'scenes/saved-insights/savedInsightsLogic'\nimport { urls } from 'scenes/urls'\nimport { userLogic } from 'scenes/userLogic'\n\nimport { tagsModel } from '~/models/tagsModel'\nimport { DataTableNode, NodeKind } from '~/queries/schema/schema-general'\nimport { isDataTableNode, isDataVisualizationNode, isEventsQuery, isHogQLQuery } from '~/queries/utils'\nimport {\n    AccessControlResourceType,\n    ExporterFormat,\n    InsightLogicProps,\n    InsightShortId,\n    ItemMode,\n    NotebookNodeType,\n    QueryBasedInsightModel,\n} from '~/types'\n\nexport function InsightPageHeader({ insightLogicProps }: { insightLogicProps: InsightLogicProps }): JSX.Element {\n    // insightSceneLogic\n    const { insightMode, itemId, alertId } = useValues(insightSceneLogic)\n\n    const { setInsightMode } = useActions(insightSceneLogic)\n\n    // insightLogic\n    const { insightProps, canEditInsight, insight, insightChanged, insightSaving, hasDashboardItemId } = useValues(\n        insightLogic(insightLogicProps)\n    )\n    const { setInsightMetadata, saveAs, saveInsight } = useActions(insightLogic(insightLogicProps))\n\n    // insightAlertsLogic\n    const { loadAlerts } = useActions(\n        insightAlertsLogic({\n            insightLogicProps,\n            insightId: insight.id as number,\n        })\n    )\n\n    // savedInsightsLogic\n    const { duplicateInsight, loadInsights } = useActions(savedInsightsLogic)\n\n    // insightDataLogic\n    const { query, queryChanged, showQueryEditor, showDebugPanel, hogQL, exportContext } = useValues(\n        insightDataLogic(insightProps)\n    )\n    const { toggleQueryEditorPanel, toggleDebugPanel } = useActions(insightDataLogic(insightProps))\n    const { createStaticCohort } = useActions(exportsLogic)\n\n    // other logics\n    useMountedLogic(insightCommandLogic(insightProps))\n    const { tags: allExistingTags } = useValues(tagsModel)\n    const { user } = useValues(userLogic)\n    const { preflight } = useValues(preflightLogic)\n    const { currentProjectId } = useValues(projectLogic)\n    const { push } = useActions(router)\n    const [tags, setTags] = useState(insight.tags)\n\n    const [addToDashboardModalOpen, setAddToDashboardModalOpenModal] = useState<boolean>(false)\n\n    const showCohortButton =\n        isDataTableNode(query) || isDataVisualizationNode(query) || isHogQLQuery(query) || isEventsQuery(query)\n\n    return (\n        <>\n            {hasDashboardItemId && (\n                <>\n                    <SubscriptionsModal\n                        isOpen={insightMode === ItemMode.Subscriptions}\n                        closeModal={() => push(urls.insightView(insight.short_id as InsightShortId))}\n                        insightShortId={insight.short_id}\n                        subscriptionId={typeof itemId === 'number' || itemId === 'new' ? itemId : null}\n                    />\n                    <SharingModal\n                        title=\"Insight sharing\"\n                        isOpen={insightMode === ItemMode.Sharing}\n                        closeModal={() => push(urls.insightView(insight.short_id as InsightShortId))}\n                        insightShortId={insight.short_id}\n                        insight={insight}\n                        previewIframe\n                    />\n                    <AddToDashboardModal\n                        isOpen={addToDashboardModalOpen}\n                        closeModal={() => setAddToDashboardModalOpenModal(false)}\n                        insightProps={insightProps}\n                        canEditInsight={canEditInsight}\n                    />\n                    {insightMode === ItemMode.Alerts && (\n                        <ManageAlertsModal\n                            onClose={() => push(urls.insightView(insight.short_id as InsightShortId))}\n                            isOpen={insightMode === ItemMode.Alerts}\n                            insightLogicProps={insightLogicProps}\n                            insightId={insight.id as number}\n                            insightShortId={insight.short_id as InsightShortId}\n                        />\n                    )}\n\n                    {!!alertId && (\n                        <EditAlertModal\n                            onClose={() => push(urls.insightAlerts(insight.short_id as InsightShortId))}\n                            isOpen={!!alertId}\n                            alertId={alertId === null || alertId === 'new' ? undefined : alertId}\n                            insightShortId={insight.short_id as InsightShortId}\n                            insightId={insight.id!}\n                            onEditSuccess={() => {\n                                loadAlerts()\n                                push(urls.insightAlerts(insight.short_id as InsightShortId))\n                            }}\n                            insightLogicProps={insightLogicProps}\n                        />\n                    )}\n                    <NewDashboardModal />\n                </>\n            )}\n            <PageHeader\n                buttons={\n                    <div className=\"flex justify-between items-center gap-2\">\n                        <More\n                            overlay={\n                                <>\n                                    {hasDashboardItemId && (\n                                        <>\n                                            <LemonButton\n                                                onClick={() =>\n                                                    duplicateInsight(insight as QueryBasedInsightModel, true)\n                                                }\n                                                fullWidth\n                                                data-attr=\"duplicate-insight-from-insight-view\"\n                                            >\n                                                Duplicate\n                                            </LemonButton>\n\n                                            <LemonButton\n                                                onClick={() =>\n                                                    setInsightMetadata({\n                                                        favorited: !insight.favorited,\n                                                    })\n                                                }\n                                                fullWidth\n                                            >\n                                                {insight.favorited ? 'Remove from favorites' : 'Add to favorites'}\n                                            </LemonButton>\n\n                                            <LemonButton\n                                                onClick={() => setAddToDashboardModalOpenModal(true)}\n                                                fullWidth\n                                            >\n                                                Add to dashboard\n                                            </LemonButton>\n\n                                            <LemonDivider />\n\n                                            <LemonButton\n                                                onClick={() =>\n                                                    insight.short_id\n                                                        ? push(urls.insightSharing(insight.short_id))\n                                                        : null\n                                                }\n                                                fullWidth\n                                            >\n                                                Share or embed\n                                            </LemonButton>\n\n                                            <SubscribeButton insightShortId={insight.short_id} />\n\n                                            {exportContext ? (\n                                                <ExportButton\n                                                    fullWidth\n                                                    items={[\n                                                        {\n                                                            export_format: ExporterFormat.PNG,\n                                                            insight: insight.id,\n                                                        },\n                                                        {\n                                                            export_format: ExporterFormat.CSV,\n                                                            export_context: exportContext,\n                                                        },\n                                                        {\n                                                            export_format: ExporterFormat.XLSX,\n                                                            export_context: exportContext,\n                                                        },\n                                                    ]}\n                                                />\n                                            ) : null}\n\n                                            <LemonDivider />\n                                        </>\n                                    )}\n\n                                    <LemonSwitch\n                                        data-attr={`${showQueryEditor ? 'hide' : 'show'}-insight-source`}\n                                        className=\"px-2 py-1\"\n                                        checked={showQueryEditor}\n                                        onChange={() => {\n                                            // for an existing insight in view mode\n                                            if (hasDashboardItemId && insightMode !== ItemMode.Edit) {\n                                                // enter edit mode\n                                                setInsightMode(ItemMode.Edit, null)\n\n                                                // exit early if query editor doesn't need to be toggled\n                                                if (showQueryEditor) {\n                                                    return\n                                                }\n                                            }\n                                            toggleQueryEditorPanel()\n                                        }}\n                                        fullWidth\n                                        label=\"View source\"\n                                    />\n\n                                    {hasDashboardItemId &&\n                                    (user?.is_staff || user?.is_impersonated || !preflight?.cloud) ? (\n                                        <LemonSwitch\n                                            data-attr=\"toggle-debug-panel\"\n                                            className=\"px-2 py-1\"\n                                            checked={showDebugPanel}\n                                            onChange={() => {\n                                                toggleDebugPanel()\n                                            }}\n                                            fullWidth\n                                            label=\"Debug panel\"\n                                        />\n                                    ) : null}\n\n                                    {(hogQL || showCohortButton) && <LemonDivider />}\n                                    {hogQL &&\n                                        !isHogQLQuery(query) &&\n                                        !(isDataVisualizationNode(query) && isHogQLQuery(query.source)) && (\n                                            <LemonButton\n                                                data-attr=\"edit-insight-sql\"\n                                                onClick={() => {\n                                                    router.actions.push(\n                                                        urls.insightNew({\n                                                            query: {\n                                                                kind: NodeKind.DataTableNode,\n                                                                source: {\n                                                                    kind: NodeKind.HogQLQuery,\n                                                                    query: hogQL,\n                                                                },\n                                                                full: true,\n                                                            } as DataTableNode,\n                                                        })\n                                                    )\n                                                }}\n                                                fullWidth\n                                            >\n                                                Edit SQL directly\n                                            </LemonButton>\n                                        )}\n                                    {hogQL && showCohortButton && (\n                                        <LemonButton\n                                            data-attr=\"edit-insight-sql\"\n                                            onClick={() => {\n                                                LemonDialog.openForm({\n                                                    title: 'Save as static cohort',\n                                                    description: (\n                                                        <div className=\"mt-2\">\n                                                            Your query must export a <code>person_id</code>,{' '}\n                                                            <code>actor_id</code> or <code>id</code> column, which must\n                                                            match the <code>id</code> of the <code>persons</code> table\n                                                        </div>\n                                                    ),\n                                                    initialValues: {\n                                                        name: '',\n                                                    },\n                                                    content: (\n                                                        <LemonField name=\"name\">\n                                                            <LemonInput\n                                                                data-attr=\"insight-name\"\n                                                                placeholder=\"Name of the new cohort\"\n                                                                autoFocus\n                                                            />\n                                                        </LemonField>\n                                                    ),\n                                                    errors: {\n                                                        name: (name) => (!name ? 'You must enter a name' : undefined),\n                                                    },\n                                                    onSubmit: async ({ name }) => {\n                                                        createStaticCohort(name, {\n                                                            kind: NodeKind.HogQLQuery,\n                                                            query: hogQL,\n                                                        })\n                                                    },\n                                                })\n                                            }}\n                                            fullWidth\n                                        >\n                                            Save as static cohort\n                                        </LemonButton>\n                                    )}\n\n                                    {hasDashboardItemId && (\n                                        <>\n                                            <LemonDivider />\n                                            <AccessControlledLemonButton\n                                                userAccessLevel={insight.user_access_level}\n                                                minAccessLevel=\"editor\"\n                                                resourceType={AccessControlResourceType.Insight}\n                                                status=\"danger\"\n                                                onClick={() =>\n                                                    void deleteInsightWithUndo({\n                                                        object: insight as QueryBasedInsightModel,\n                                                        endpoint: `projects/${currentProjectId}/insights`,\n                                                        callback: () => {\n                                                            loadInsights()\n                                                            push(urls.savedInsights())\n                                                        },\n                                                    })\n                                                }\n                                                fullWidth\n                                            >\n                                                Delete insight\n                                            </AccessControlledLemonButton>\n                                        </>\n                                    )}\n                                </>\n                            }\n                        />\n\n                        <LemonDivider vertical />\n\n                        {insightMode === ItemMode.Edit && hasDashboardItemId && (\n                            <LemonButton\n                                type=\"secondary\"\n                                onClick={() => setInsightMode(ItemMode.View, null)}\n                                data-attr=\"insight-cancel-edit-button\"\n                            >\n                                Cancel\n                            </LemonButton>\n                        )}\n\n                        {insightMode !== ItemMode.Edit && hasDashboardItemId && (\n                            <>\n                                <AlertsButton\n                                    insight={insight}\n                                    insightLogicProps={insightLogicProps}\n                                    type=\"secondary\"\n                                    text=\"Alerts\"\n                                />\n                                <NotebookSelectButton\n                                    resource={{\n                                        type: NotebookNodeType.Query,\n                                        attrs: {\n                                            query: {\n                                                kind: NodeKind.SavedInsightNode,\n                                                shortId: insight.short_id,\n                                            },\n                                        },\n                                    }}\n                                    type=\"secondary\"\n                                />\n                                <AddToDashboard insight={insight} setOpenModal={setAddToDashboardModalOpenModal} />\n                            </>\n                        )}\n                        {insightMode !== ItemMode.Edit ? (\n                            canEditInsight && (\n                                <AccessControlledLemonButton\n                                    userAccessLevel={insight.user_access_level}\n                                    minAccessLevel=\"editor\"\n                                    resourceType={AccessControlResourceType.Insight}\n                                    type=\"primary\"\n                                    onClick={() => setInsightMode(ItemMode.Edit, null)}\n                                    data-attr=\"insight-edit-button\"\n                                >\n                                    Edit\n                                </AccessControlledLemonButton>\n                            )\n                        ) : (\n                            <InsightSaveButton\n                                saveAs={saveAs}\n                                saveInsight={saveInsight}\n                                isSaved={hasDashboardItemId}\n                                addingToDashboard={!!insight.dashboards?.length && !insight.id}\n                                insightSaving={insightSaving}\n                                insightChanged={insightChanged || queryChanged}\n                            />\n                        )}\n                    </div>\n                }\n                caption={\n                    <>\n                        {!!(canEditInsight || insight.description) && (\n                            <EditableField\n                                multiline\n                                markdown\n                                name=\"description\"\n                                value={insight.description || ''}\n                                placeholder=\"Description (optional)\"\n                                onSave={(value) => setInsightMetadata({ description: value })}\n                                saveOnBlur={true}\n                                maxLength={400} // Sync with Insight model\n                                mode={!canEditInsight ? 'view' : undefined}\n                                data-attr=\"insight-description\"\n                                compactButtons\n                            />\n                        )}\n                        {canEditInsight ? (\n                            <ObjectTags\n                                tags={tags ?? []}\n                                saving={insightSaving}\n                                onChange={(tags) => setTags(tags)}\n                                onBlur={() => {\n                                    if (tags !== insight.tags) {\n                                        setInsightMetadata({ tags: tags ?? [] })\n                                    }\n                                }}\n                                tagsAvailable={allExistingTags}\n                                className=\"mt-2\"\n                                data-attr=\"insight-tags\"\n                            />\n                        ) : tags?.length ? (\n                            <ObjectTags\n                                tags={tags}\n                                saving={insightSaving}\n                                className=\"mt-2\"\n                                data-attr=\"insight-tags\"\n                                staticOnly\n                            />\n                        ) : null}\n                        <UserActivityIndicator\n                            at={insight.last_modified_at}\n                            by={insight.last_modified_by}\n                            className=\"mt-2\"\n                        />\n                    </>\n                }\n                tabbedPage={insightMode === ItemMode.Edit} // Insight type tabs are only shown in edit mode\n            />\n        </>\n    )\n}\n", "import { IconDashboard } from '@posthog/icons'\nimport { useValues } from 'kea'\nimport { IconWithCount } from 'lib/lemon-ui/icons'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\n\nimport { dashboardsModel } from '~/models/dashboardsModel'\nimport { QueryBasedInsightModel } from '~/types'\n\ninterface SaveToDashboardProps {\n    insight: Partial<QueryBasedInsightModel>\n    setOpenModal: (open: boolean) => void\n}\n\nexport function AddToDashboard({ insight, setOpenModal }: SaveToDashboardProps): JSX.Element | null {\n    const { rawDashboards } = useValues(dashboardsModel)\n    const dashboards = insight.dashboard_tiles?.map((tile) => rawDashboards[tile.dashboard_id]).filter((d) => !!d) || []\n\n    return (\n        <span className=\"save-to-dashboard\" data-attr=\"save-to-dashboard-button\">\n            <LemonButton\n                onClick={() => setOpenModal(true)}\n                type=\"secondary\"\n                icon={\n                    <IconWithCount count={dashboards.length} showZero={false}>\n                        <IconDashboard />\n                    </IconWithCount>\n                }\n                tooltip={dashboards.length === 0 ? 'Add to dashboard' : 'Manage dashboards'}\n            >\n                Dashboards\n            </LemonButton>\n        </span>\n    )\n}\n", "import { IconHome } from '@posthog/icons'\nimport clsx from 'clsx'\nimport { useActions, useValues } from 'kea'\nimport { addToDashboardModalLogic } from 'lib/components/AddToDashboard/addToDashboardModalLogic'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonInput } from 'lib/lemon-ui/LemonInput/LemonInput'\nimport { LemonModal } from 'lib/lemon-ui/LemonModal'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { pluralize } from 'lib/utils'\nimport { CSSProperties } from 'react'\nimport { AutoSizer } from 'react-virtualized/dist/es/AutoSizer'\nimport { List, ListRowProps, ListRowRenderer } from 'react-virtualized/dist/es/List'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { urls } from 'scenes/urls'\n\nimport { DashboardBasicType, InsightLogicProps } from '~/types'\n\ninterface DashboardRelationRowProps {\n    dashboard: DashboardBasicType\n    insightProps: InsightLogicProps\n    canEditInsight: boolean\n    isHighlighted: boolean\n    isAlreadyOnDashboard: boolean\n    style: CSSProperties\n}\n\nconst DashboardRelationRow = ({\n    style,\n    isHighlighted,\n    isAlreadyOnDashboard,\n    dashboard,\n    insightProps,\n    canEditInsight,\n}: DashboardRelationRowProps): JSX.Element => {\n    const { addToDashboard, removeFromDashboard } = useActions(addToDashboardModalLogic(insightProps))\n    const { dashboardWithActiveAPICall } = useValues(addToDashboardModalLogic(insightProps))\n\n    const { currentTeam } = useValues(teamLogic)\n    const isPrimary = dashboard.id === currentTeam?.primary_dashboard\n    return (\n        <div\n            data-attr=\"dashboard-list-item\"\n            /* eslint-disable-next-line react/forbid-dom-props */\n            style={style}\n            className={clsx('flex items-center space-x-2', isHighlighted && 'highlighted')}\n        >\n            <Link\n                to={urls.dashboard(dashboard.id)}\n                className=\"overflow-hidden text-ellipsis whitespace-nowrap\"\n                title={dashboard.name}\n            >\n                {dashboard.name || 'Untitled'}\n            </Link>\n            {isPrimary && (\n                <Tooltip title=\"Primary dashboards are shown on the project home page\">\n                    <span className=\"flex items-center\">\n                        <IconHome className=\"text-warning text-base\" />\n                    </span>\n                </Tooltip>\n            )}\n            <span className=\"grow\" />\n            <LemonButton\n                type=\"secondary\"\n                status={isAlreadyOnDashboard ? 'danger' : 'default'}\n                loading={dashboardWithActiveAPICall === dashboard.id}\n                disabledReason={\n                    !canEditInsight\n                        ? \"You don't have permission to edit this dashboard\"\n                        : dashboardWithActiveAPICall\n                        ? 'Loading...'\n                        : ''\n                }\n                size=\"small\"\n                onClick={(e) => {\n                    e.preventDefault()\n                    isAlreadyOnDashboard ? removeFromDashboard(dashboard.id) : addToDashboard(dashboard.id)\n                }}\n            >\n                {isAlreadyOnDashboard ? 'Remove from dashboard' : 'Add to dashboard'}\n            </LemonButton>\n        </div>\n    )\n}\n\ninterface SaveToDashboardModalProps {\n    isOpen: boolean\n    closeModal: () => void\n    insightProps: InsightLogicProps\n    canEditInsight: boolean\n}\n\nexport function AddToDashboardModal({\n    isOpen,\n    closeModal,\n    insightProps,\n    canEditInsight,\n}: SaveToDashboardModalProps): JSX.Element {\n    const logic = addToDashboardModalLogic(insightProps)\n\n    const { searchQuery, currentDashboards, orderedDashboards, scrollIndex } = useValues(logic)\n    const { setSearchQuery, addNewDashboard } = useActions(logic)\n\n    const renderItem: ListRowRenderer = ({ index: rowIndex, style }: ListRowProps): JSX.Element | null => {\n        return (\n            <DashboardRelationRow\n                key={rowIndex}\n                dashboard={orderedDashboards[rowIndex]}\n                insightProps={insightProps}\n                canEditInsight={canEditInsight}\n                isHighlighted={rowIndex === scrollIndex}\n                isAlreadyOnDashboard={currentDashboards.some(\n                    (currentDashboard) => currentDashboard.id === orderedDashboards[rowIndex].id\n                )}\n                style={style}\n            />\n        )\n    }\n\n    return (\n        <LemonModal\n            onClose={() => {\n                closeModal()\n                setSearchQuery('')\n            }}\n            isOpen={isOpen}\n            title=\"Add to dashboard\"\n            footer={\n                <>\n                    <div className=\"flex-1\">\n                        <LemonButton\n                            type=\"secondary\"\n                            onClick={addNewDashboard}\n                            disabledReason={\n                                !canEditInsight\n                                    ? 'You do not have permission to add this insight to dashboards'\n                                    : undefined\n                            }\n                        >\n                            Add to a new dashboard\n                        </LemonButton>\n                    </div>\n                    <LemonButton type=\"secondary\" onClick={closeModal}>\n                        Close\n                    </LemonButton>\n                </>\n            }\n        >\n            <div className=\"space-y-2 w-192 max-w-full\">\n                <LemonInput\n                    data-attr=\"dashboard-searchfield\"\n                    type=\"search\"\n                    fullWidth\n                    placeholder=\"Search for dashboards...\"\n                    value={searchQuery}\n                    onChange={(newValue) => setSearchQuery(newValue)}\n                />\n                <div className=\"text-secondary\">\n                    This insight is referenced on <strong className=\"text-text-3000\">{currentDashboards.length}</strong>{' '}\n                    {pluralize(currentDashboards.length, 'dashboard', 'dashboards', false)}\n                </div>\n                <div className=\"min-h-[420px]\">\n                    <AutoSizer>\n                        {({ height, width }) => (\n                            <List\n                                width={width}\n                                height={height}\n                                rowCount={orderedDashboards.length}\n                                overscanRowCount={100}\n                                rowHeight={40}\n                                rowRenderer={renderItem}\n                                scrollToIndex={scrollIndex}\n                            />\n                        )}\n                    </AutoSizer>\n                </div>\n            </div>\n        </LemonModal>\n    )\n}\n", "import FuseClass from 'fuse.js'\nimport { actions, connect, kea, key, listeners, path, props, reducers, selectors } from 'kea'\nimport { router } from 'kea-router'\nimport { lemonToast } from 'lib/lemon-ui/LemonToast/LemonToast'\nimport { eventUsageLogic } from 'lib/utils/eventUsageLogic'\nimport { newDashboardLogic } from 'scenes/dashboard/newDashboardLogic'\nimport { insightLogic } from 'scenes/insights/insightLogic'\nimport { keyForInsightLogicProps } from 'scenes/insights/sharedUtils'\nimport { urls } from 'scenes/urls'\n\nimport { dashboardsModel } from '~/models/dashboardsModel'\nimport { DashboardBasicType, DashboardType, InsightLogicProps } from '~/types'\n\nimport type { addToDashboardModalLogicType } from './addToDashboardModalLogicType'\n\n// Helping kea-typegen navigate the exported default class for Fuse\nexport interface Fuse extends FuseClass<any> {}\n\nexport const addToDashboardModalLogic = kea<addToDashboardModalLogicType>([\n    props({} as InsightLogicProps),\n    key(keyForInsightLogicProps('new')),\n    path((key) => ['lib', 'components', 'AddToDashboard', 'saveToDashboardModalLogic', key]),\n    connect((props: InsightLogicProps) => ({\n        values: [insightLogic(props), ['insight']],\n        actions: [\n            insightLogic(props),\n            ['updateInsight', 'updateInsightSuccess', 'updateInsightFailure'],\n            eventUsageLogic,\n            ['reportSavedInsightToDashboard', 'reportRemovedInsightFromDashboard', 'reportCreatedDashboardFromModal'],\n            newDashboardLogic,\n            ['showNewDashboardModal'],\n        ],\n    })),\n    actions({\n        addNewDashboard: true,\n        setSearchQuery: (query: string) => ({ query }),\n        setScrollIndex: (index: number) => ({ index }),\n        addToDashboard: (dashboardId: number) => ({ dashboardId }),\n        removeFromDashboard: (dashboardId: number) => ({ dashboardId }),\n    }),\n    reducers({\n        searchQuery: ['', { setSearchQuery: (_, { query }) => query }],\n        scrollIndex: [-1 as number, { setScrollIndex: (_, { index }) => index }],\n        dashboardWithActiveAPICall: [\n            null as number | null,\n            {\n                addToDashboard: (_, { dashboardId }) => dashboardId,\n                removeFromDashboard: (_, { dashboardId }) => dashboardId,\n                updateInsightSuccess: () => null,\n                updateInsightFailure: () => null,\n            },\n        ],\n    }),\n    selectors({\n        dashboardsFuse: [\n            () => [dashboardsModel.selectors.nameSortedDashboards],\n            (nameSortedDashboards): Fuse => {\n                return new FuseClass(nameSortedDashboards || [], {\n                    keys: ['name', 'description', 'tags'],\n                    threshold: 0.3,\n                })\n            },\n        ],\n        filteredDashboards: [\n            (s) => [s.searchQuery, s.dashboardsFuse, dashboardsModel.selectors.nameSortedDashboards],\n            (searchQuery, dashboardsFuse, nameSortedDashboards): DashboardBasicType[] =>\n                searchQuery.length\n                    ? dashboardsFuse.search(searchQuery).map((r: FuseClass.FuseResult<DashboardType>) => r.item)\n                    : nameSortedDashboards,\n        ],\n        currentDashboards: [\n            (s) => [s.filteredDashboards, s.insight],\n            (filteredDashboards, insight): DashboardBasicType[] =>\n                filteredDashboards.filter((d) => insight.dashboard_tiles?.map((dt) => dt.dashboard_id)?.includes(d.id)),\n        ],\n        availableDashboards: [\n            (s) => [s.filteredDashboards, s.currentDashboards],\n            (filteredDashboards, currentDashboards): DashboardBasicType[] =>\n                filteredDashboards.filter((d) => !currentDashboards?.map((cd) => cd.id).includes(d.id)),\n        ],\n        orderedDashboards: [\n            (s) => [s.currentDashboards, s.availableDashboards],\n            (currentDashboards, availableDashboards): DashboardBasicType[] => [\n                ...currentDashboards,\n                ...availableDashboards,\n            ],\n        ],\n    }),\n    listeners(({ actions, values }) => ({\n        addNewDashboard: async () => {\n            actions.showNewDashboardModal()\n        },\n\n        [dashboardsModel.actionTypes.addDashboardSuccess]: async ({ dashboard }) => {\n            actions.reportCreatedDashboardFromModal()\n            actions.addToDashboard(dashboard.id)\n            actions.setScrollIndex(values.orderedDashboards.findIndex((d) => d.id === dashboard.id))\n        },\n\n        addToDashboard: async ({ dashboardId }) => {\n            // TODO be able to update not by patching `dashboards` against insight\n            // either patch dashboard_tiles on the insight or add a dashboard_tiles API\n            actions.updateInsight(\n                {\n                    dashboards: [...(values.insight.dashboards || []), dashboardId],\n                },\n                () => {\n                    actions.reportSavedInsightToDashboard()\n                    dashboardsModel.actions.tileAddedToDashboard(dashboardId)\n                    lemonToast.success('Insight added to dashboard', {\n                        button: {\n                            label: 'View dashboard',\n                            action: () => router.actions.push(urls.dashboard(dashboardId)),\n                        },\n                    })\n                }\n            )\n        },\n        removeFromDashboard: async ({ dashboardId }): Promise<void> => {\n            actions.updateInsight(\n                {\n                    dashboards: (values.insight.dashboards || []).filter((d) => d !== dashboardId),\n                    dashboard_tiles: (values.insight.dashboard_tiles || []).filter(\n                        (dt) => dt.dashboard_id !== dashboardId\n                    ),\n                },\n                () => {\n                    actions.reportRemovedInsightFromDashboard()\n                    lemonToast.success('Insight removed from dashboard')\n                }\n            )\n        },\n    })),\n])\n", "import { IconBell } from '@posthog/icons'\nimport { LemonButton, LemonButtonProps } from '@posthog/lemon-ui'\nimport { useActions, useValues } from 'kea'\nimport { router } from 'kea-router'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { IconWithCount } from 'lib/lemon-ui/icons'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport { urls } from 'scenes/urls'\n\nimport { InsightLogicProps, QueryBasedInsightModel } from '~/types'\n\nimport { areAlertsSupportedForInsight, insightAlertsLogic } from './insightAlertsLogic'\n\nexport type AlertsButtonProps = LemonButtonProps & {\n    insight: Partial<QueryBasedInsightModel>\n    insightLogicProps: InsightLogicProps\n    text: string\n}\n\nexport function AlertsButton({ insight, insightLogicProps, text, ...props }: AlertsButtonProps): JSX.Element {\n    const { push } = useActions(router)\n    const { featureFlags } = useValues(featureFlagLogic)\n    const showAlerts = featureFlags[FEATURE_FLAGS.ALERTS]\n\n    const logic = insightAlertsLogic({ insightId: insight.id!, insightLogicProps })\n    const { alerts } = useValues(logic)\n\n    if (!showAlerts) {\n        return <></>\n    }\n\n    return (\n        <LemonButton\n            data-attr=\"manage-alerts-button\"\n            onClick={() => push(urls.insightAlerts(insight.short_id!))}\n            disabledReason={\n                !areAlertsSupportedForInsight(insight.query)\n                    ? 'Alerts are only available for trends. Change the insight representation to add alerts.'\n                    : undefined\n            }\n            {...props}\n            icon={\n                <IconWithCount count={alerts?.length} showZero={false}>\n                    <IconBell />\n                </IconWithCount>\n            }\n        >\n            {text}\n        </LemonButton>\n    )\n}\n", "import { IconTrending } from '@posthog/icons'\nimport { connect, events, kea, key, path, props } from 'kea'\nimport { Command, commandPaletteLogic } from 'lib/components/CommandPalette/commandPaletteLogic'\nimport { dateMapping } from 'lib/utils'\nimport { keyForInsightLogicProps } from 'scenes/insights/sharedUtils'\n\nimport { InsightLogicProps } from '~/types'\n\nimport type { insightCommandLogicType } from './insightCommandLogicType'\nimport { insightVizDataLogic } from './insightVizDataLogic'\n\nconst INSIGHT_COMMAND_SCOPE = 'insights'\n\nexport const insightCommandLogic = kea<insightCommandLogicType>([\n    props({} as InsightLogicProps),\n    key(keyForInsightLogicProps('new')),\n    path((key) => ['scenes', 'insights', 'insightCommandLogic', key]),\n\n    connect((props: InsightLogicProps) => [commandPaletteLogic, insightVizDataLogic(props)]),\n    events(({ props }) => ({\n        afterMount: () => {\n            const funnelCommands: Command[] = [\n                {\n                    key: 'insight-graph',\n                    resolver: [\n                        {\n                            icon: IconTrending,\n                            display: 'Toggle \"Compare Previous\" on Graph',\n                            executor: () => {\n                                const compareFilter = insightVizDataLogic(props).values.compareFilter\n                                insightVizDataLogic(props).actions.updateCompareFilter({\n                                    compare: !compareFilter?.compare,\n                                    compare_to: compareFilter?.compare_to,\n                                })\n                            },\n                        },\n                        ...dateMapping.map(({ key, values }) => ({\n                            icon: IconTrending,\n                            display: `Set Time Range to ${key}`,\n                            executor: () => {\n                                insightVizDataLogic(props).actions.updateDateRange({\n                                    date_from: values[0],\n                                    date_to: values[1],\n                                })\n                            },\n                        })),\n                    ],\n                    scope: INSIGHT_COMMAND_SCOPE,\n                },\n            ]\n            for (const command of funnelCommands) {\n                commandPaletteLogic.actions.registerCommand(command)\n            }\n        },\n        beforeUnmount: () => {\n            commandPaletteLogic.actions.deregisterScope(INSIGHT_COMMAND_SCOPE)\n        },\n    })),\n])\n", "import { LemonButton } from 'lib/lemon-ui/LemonButton'\n\nexport function InsightSaveButton({\n    saveAs,\n    saveInsight,\n    isSaved,\n    insightSaving,\n    insightChanged,\n    addingToDashboard,\n}: {\n    saveAs: () => void\n    saveInsight: (redirectToViewMode?: boolean) => void\n    isSaved: boolean | undefined\n    insightSaving: boolean\n    insightChanged: boolean\n    addingToDashboard: boolean\n}): JSX.Element {\n    const disabled = isSaved && !insightChanged\n    const saveAsAvailable = isSaved && !addingToDashboard\n\n    return (\n        <LemonButton\n            type=\"primary\"\n            onClick={() => saveInsight(true)}\n            data-attr=\"insight-save-button\"\n            disabled={disabled}\n            loading={!disabled && insightSaving}\n            sideAction={{\n                dropdown: {\n                    placement: 'bottom-end',\n                    overlay: (\n                        <>\n                            {!disabled && (\n                                <LemonButton\n                                    onClick={() => saveInsight(false)}\n                                    data-attr=\"insight-save-and-continue\"\n                                    fullWidth\n                                >\n                                    {addingToDashboard ? 'Save, add to dashboard' : 'Save'} & continue editing\n                                </LemonButton>\n                            )}\n                            {saveAsAvailable && (\n                                <LemonButton onClick={() => saveAs()} data-attr=\"insight-save-as-new-insight\" fullWidth>\n                                    Save as\u2026\n                                </LemonButton>\n                            )}\n                        </>\n                    ),\n                },\n                disabled: disabled && !saveAsAvailable,\n                'data-attr': 'insight-save-dropdown',\n            }}\n        >\n            {disabled ? 'No changes to be saved' : addingToDashboard ? 'Save & add to dashboard' : 'Save'}\n        </LemonButton>\n    )\n}\n", "import { useActions, useValues } from 'kea'\nimport { AlertDeletionWarning } from 'lib/components/Alerts/AlertDeletionWarning'\nimport { LemonTabs } from 'lib/lemon-ui/LemonTabs'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { Tooltip } from 'lib/lemon-ui/Tooltip'\nimport { insightNavLogic } from 'scenes/insights/InsightNav/insightNavLogic'\nimport { INSIGHT_TYPE_URLS } from 'scenes/insights/utils'\nimport { INSIGHT_TYPES_METADATA } from 'scenes/saved-insights/SavedInsights'\n\nimport { insightLogic } from '../insightLogic'\nimport { FunnelsCue } from '../views/Trends/FunnelsCue'\n\nexport function InsightsNav(): JSX.Element {\n    const { insightProps, insight } = useValues(insightLogic)\n    const { activeView, tabs } = useValues(insightNavLogic(insightProps))\n    const { setActiveView } = useActions(insightNavLogic(insightProps))\n\n    return (\n        <>\n            <FunnelsCue />\n            {insight.short_id && <AlertDeletionWarning />}\n            <LemonTabs\n                activeKey={activeView}\n                onChange={(newKey) => setActiveView(newKey)}\n                tabs={tabs.map(({ label, type, dataAttr }) => ({\n                    key: type,\n                    label: (\n                        <Link to={INSIGHT_TYPE_URLS[type]} preventClick data-attr={dataAttr}>\n                            <Tooltip\n                                placement=\"top\"\n                                title={\n                                    INSIGHT_TYPES_METADATA[type].tooltipDescription ||\n                                    INSIGHT_TYPES_METADATA[type].description\n                                }\n                            >\n                                <span>{label}</span>\n                            </Tooltip>\n                        </Link>\n                    ),\n                }))}\n            />\n        </>\n    )\n}\n", "import { useValues } from 'kea'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { insightLogic } from 'scenes/insights/insightLogic'\n\nimport { insightAlertsLogic } from './insightAlertsLogic'\n\nexport function AlertDeletionWarning(): JSX.Element | null {\n    const { insightProps, insight } = useValues(insightLogic)\n\n    if (!insight?.short_id) {\n        return null\n    }\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const { shouldShowAlertDeletionWarning } = useValues(\n        insightAlertsLogic({\n            insightId: insight.id as number,\n            insightLogicProps: insightProps,\n        })\n    )\n\n    if (!shouldShowAlertDeletionWarning || !insight.short_id) {\n        return null\n    }\n\n    return (\n        <LemonBanner type=\"warning\" className=\"mb-4\">\n            There are alerts set up for the insight. The selected chart type of the insight doesn't support alerts, so\n            the existing alerts will be deleted when you save.\n        </LemonBanner>\n    )\n}\n", "import { useActions, useValues } from 'kea'\nimport { LemonBanner } from 'lib/lemon-ui/LemonBanner'\nimport { insightLogic } from 'scenes/insights/insightLogic'\nimport { funnelsCueLogic } from 'scenes/insights/views/Trends/funnelsCueLogic'\n\nexport function FunnelsCue(): JSX.Element | null {\n    const { insightProps } = useValues(insightLogic)\n    const { shown } = useValues(funnelsCueLogic(insightProps))\n    const { optOut, displayAsFunnel } = useActions(funnelsCueLogic(insightProps))\n\n    if (!shown) {\n        return null\n    }\n\n    return (\n        <LemonBanner\n            type=\"info\"\n            action={{\n                onClick: displayAsFunnel,\n                children: 'Try this insight as a funnel',\n            }}\n            onClose={() => optOut(true)}\n            className=\"mb-4\"\n        >\n            Looks like you have multiple events. A funnel can help better visualize your user\u2019s progression across each\n            event.\n        </LemonBanner>\n    )\n}\n", "import { actions, connect, events, kea, key, listeners, path, props, reducers, selectors } from 'kea'\nimport { FEATURE_FLAGS } from 'lib/constants'\nimport { featureFlagLogic } from 'lib/logic/featureFlagLogic'\nimport posthog from 'posthog-js'\nimport { insightUsageLogic } from 'scenes/insights/insightUsageLogic'\nimport { insightVizDataLogic } from 'scenes/insights/insightVizDataLogic'\nimport { keyForInsightLogicProps } from 'scenes/insights/sharedUtils'\n\nimport { InsightVizNode, NodeKind } from '~/queries/schema/schema-general'\nimport { isFunnelsQuery, isInsightVizNode, isTrendsQuery } from '~/queries/utils'\nimport { InsightLogicProps } from '~/types'\n\nimport type { funnelsCueLogicType } from './funnelsCueLogicType'\n\nexport const funnelsCueLogic = kea<funnelsCueLogicType>([\n    props({} as InsightLogicProps),\n    key(keyForInsightLogicProps('new')),\n    path((key) => ['scenes', 'insights', 'InsightTabs', 'TrendTab', 'FunnelsCue', key]),\n    connect((props: InsightLogicProps) => ({\n        values: [\n            insightUsageLogic(props),\n            ['isFirstLoad'],\n            insightVizDataLogic(props),\n            ['query'],\n            featureFlagLogic,\n            ['featureFlags'],\n        ],\n        actions: [insightVizDataLogic(props), ['setQuery'], featureFlagLogic, ['setFeatureFlags']],\n    })),\n    actions({\n        optOut: (userOptedOut: boolean) => ({ userOptedOut }),\n        setShouldShow: (show: boolean) => ({ show }),\n        setPermanentOptOut: true,\n        displayAsFunnel: true,\n    }),\n    reducers({\n        _shouldShow: [\n            false,\n            {\n                setShouldShow: (_, { show }) => show,\n            },\n        ],\n        permanentOptOut: [\n            false,\n            {\n                setPermanentOptOut: () => true,\n            },\n        ],\n    }),\n    listeners(({ actions, values }) => ({\n        optOut: async ({ userOptedOut }) => {\n            posthog.capture('funnel cue 7301 - terminated', { user_opted_out: userOptedOut })\n            posthog.people.set({ funnels_cue_3701_opt_out: true })\n            // funnels_cue_3701_opt_out -> will add the user to a FF that will permanently exclude the user\n            actions.setPermanentOptOut()\n        },\n        setQuery: ({ query }) => {\n            if (!isInsightVizNode(query)) {\n                return\n            }\n\n            if (!values.isFirstLoad && isTrendsQuery(query?.source) && (query.source.series || []).length >= 3) {\n                actions.setShouldShow(true)\n                !values.permanentOptOut &&\n                    posthog.capture('funnel cue 7301 - shown', { step_count: query.source.series.length })\n            } else if (values.shown && isFunnelsQuery(query?.source)) {\n                actions.optOut(false)\n            } else {\n                actions.setShouldShow(false)\n            }\n        },\n        setFeatureFlags: async ({ flags }) => {\n            if (flags[FEATURE_FLAGS.FUNNELS_CUE_OPT_OUT]) {\n                actions.setPermanentOptOut()\n            }\n        },\n        displayAsFunnel: () => {\n            if (!isInsightVizNode(values.query) || !isTrendsQuery(values.query?.source)) {\n                return\n            }\n\n            const query = JSON.parse(JSON.stringify(values.query)) as InsightVizNode\n            query.source.kind = NodeKind.FunnelsQuery\n            actions.setQuery(query)\n        },\n    })),\n    selectors({\n        shown: [\n            (s) => [s._shouldShow, s.permanentOptOut],\n            (shouldShow, permanentOptout): boolean => shouldShow && !permanentOptout,\n        ],\n    }),\n    events(({ actions, values }) => ({\n        afterMount: () => {\n            if (values.featureFlags[FEATURE_FLAGS.FUNNELS_CUE_OPT_OUT]) {\n                actions.setPermanentOptOut()\n            }\n        },\n    })),\n])\n", "import { LemonSkeleton } from 'lib/lemon-ui/LemonSkeleton'\n\nexport function InsightSkeleton(): JSX.Element {\n    return (\n        <>\n            <div className=\"my-6 space-y-4\">\n                <LemonSkeleton className=\"w-1/4 h-4\" />\n                <LemonSkeleton className=\"w-1/2 h-4\" repeat={3} />\n                <LemonSkeleton />\n                <div className=\"border rounded p-6 flex items-center gap-4\">\n                    <div className=\"flex-1 space-y-2\">\n                        <LemonSkeleton.Row repeat={3} />\n                    </div>\n\n                    <div className=\"flex-1 space-y-2\">\n                        <LemonSkeleton.Row repeat={3} />\n                    </div>\n                </div>\n                <div className=\"border rounded p-6 min-h-100\" />\n            </div>\n        </>\n    )\n}\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "AddToDashboard", "insight", "setOpenModal", "rawDashboards", "dashboardsModel", "dashboards", "tile", "d", "LemonButton", "IconWithCount", "IconDashboard", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "addToDashboardModalLogic", "keyForInsightLogicProps", "key", "props", "insightLogic", "eventUsageLogic", "newDashboardLogic", "query", "index", "dashboardId", "_", "dashboardsModel", "nameSortedDashboards", "Fuse", "s", "searchQuery", "dashboardsFuse", "filteredDashboards", "insight", "d", "dt", "currentDashboards", "cd", "availableDashboards", "actions", "values", "dashboard", "lemonToast", "urls", "import_jsx_runtime", "DashboardRelationRow", "style", "isHighlighted", "isAlreadyOnDashboard", "dashboard", "insightProps", "canEditInsight", "addToDashboard", "removeFromDashboard", "addToDashboardModalLogic", "dashboardWithActiveAPICall", "currentTeam", "teamLogic", "isPrimary", "clsx", "Link", "urls", "Tooltip", "IconHome", "LemonButton", "e", "AddToDashboardModal", "isOpen", "closeModal", "logic", "searchQuery", "currentDashboards", "orderedDashboards", "scrollIndex", "setSearchQuery", "addNewDashboard", "renderItem", "rowIndex", "currentDashboard", "LemonModal", "LemonInput", "newValue", "pluralize", "AutoSizer", "height", "width", "List", "init_dirname", "init_buffer", "init_process", "import_kea", "import_kea_router", "import_jsx_runtime", "AlertsButton", "insight", "insightLogicProps", "text", "props", "push", "featureFlags", "featureFlagLogic", "showAlerts", "FEATURE_FLAGS", "logic", "insightAlertsLogic", "alerts", "LemonButton", "urls", "areAlertsSupportedForInsight", "IconWithCount", "IconBell", "import_react", "init_dirname", "init_buffer", "init_process", "import_kea", "INSIGHT_COMMAND_SCOPE", "insightCommandLogic", "keyForInsightLogicProps", "key", "props", "commandPaletteLogic", "insightVizDataLogic", "funnelCommands", "IconTrending", "compareFilter", "dateMapping", "values", "command", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "InsightSaveButton", "saveAs", "saveInsight", "isSaved", "insightSaving", "insightChanged", "addingToDashboard", "disabled", "saveAsAvailable", "LemonButton", "import_jsx_runtime", "InsightPageHeader", "insightLogicProps", "insightMode", "itemId", "alertId", "insightSceneLogic", "setInsightMode", "insightProps", "canEditInsight", "insight", "insightChanged", "insightSaving", "hasDashboardItemId", "insightLogic", "setInsightMetadata", "saveAs", "saveInsight", "loadAlerts", "insightAlertsLogic", "duplicateInsight", "loadInsights", "savedInsightsLogic", "query", "queryChanged", "showQueryEditor", "showDebugPanel", "hogQL", "exportContext", "insightDataLogic", "toggleQueryEditorPanel", "toggleDebugPanel", "createStaticCohort", "exportsLogic", "insightCommandLogic", "allExistingTags", "tagsModel", "user", "userLogic", "preflight", "preflightLogic", "currentProjectId", "projectLogic", "push", "tags", "setTags", "addToDashboardModalOpen", "setAddToDashboardModalOpenModal", "showCohortButton", "isDataTableNode", "isDataVisualizationNode", "isHogQLQuery", "isEventsQuery", "SubscriptionsModal", "urls", "SharingModal", "AddToDashboardModal", "ManageAlertsModal", "EditAlertModal", "NewDashboardModal", "PageHeader", "More", "LemonButton", "LemonDivider", "SubscribeButton", "ExportButton", "LemonSwitch", "LemonDialog", "LemonField", "LemonInput", "name", "AccessControlledLemonButton", "deleteInsightWithUndo", "AlertsButton", "NotebookSelectButton", "AddToDashboard", "InsightSaveButton", "EditableField", "value", "ObjectTags", "UserActivityIndicator", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "AlertDeletionWarning", "insightProps", "insight", "insightLogic", "shouldShowAlertDeletionWarning", "insightAlertsLogic", "LemonBanner", "init_dirname", "init_buffer", "init_process", "import_kea", "init_dirname", "init_buffer", "init_process", "import_kea", "funnelsCueLogic", "keyForInsightLogicProps", "key", "props", "insightUsageLogic", "insightVizDataLogic", "featureFlagLogic", "userOptedOut", "show", "_", "actions", "values", "Co", "query", "isInsightVizNode", "isTrendsQuery", "isFunnelsQuery", "flags", "FEATURE_FLAGS", "s", "shouldShow", "permanentOptout", "import_jsx_runtime", "FunnelsCue", "insightProps", "insightLogic", "shown", "funnelsCueLogic", "optOut", "displayAsFunnel", "LemonBanner", "import_jsx_runtime", "InsightsNav", "insightProps", "insight", "insightLogic", "activeView", "tabs", "insightNavLogic", "setActiveView", "FunnelsCue", "AlertDeletionWarning", "LemonTabs", "newKey", "label", "type", "dataAttr", "Link", "INSIGHT_TYPE_URLS", "Tooltip", "INSIGHT_TYPES_METADATA", "import_jsx_runtime", "Insight", "insightId", "insightMode", "insight", "filtersOverride", "variablesOverride", "freshQuery", "insightSceneLogic", "logic", "insightLogic", "isObject", "insightProps", "accessDeniedToInsight", "query", "showQueryEditor", "showDebugPanel", "insightDataLogic", "setInsightQuery", "insightCommandLogic", "actuallyShowQueryEditor", "setQuery", "isSourceUpdate", "isInsightVizNode", "AccessDenied", "InsightPageHeader", "LemonBanner", "LemonButton", "urls", "InsightsNav", "DebugCHQueries", "ReloadInsight", "Query", "containsHogQLQuery", "init_dirname", "init_buffer", "init_process", "import_jsx_runtime", "InsightSkeleton", "LemonSkeleton", "import_jsx_runtime", "InsightScene", "insightId", "insight", "insightLogicRef", "insightSceneLogic", "Insight", "InsightSkeleton", "NotFound", "scene"]
}
