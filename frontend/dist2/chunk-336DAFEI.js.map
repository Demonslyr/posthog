{
  "version": 3,
  "sources": ["../src/lib/components/UniversalFilters/UniversalFilters.tsx", "../src/lib/components/UniversalFilters/UniversalFilterButton.tsx", "../src/scenes/insights/filters/TestAccountFilter/TestAccountFilter.tsx", "../src/scenes/insights/filters/TestAccountFilter/index.ts"],
  "sourcesContent": ["import { IconPlusSmall } from '@posthog/icons'\nimport { LemonButton, LemonButtonProps, LemonDropdown, Popover } from '@posthog/lemon-ui'\nimport { BindLogic, useActions, useValues } from 'kea'\nimport { useState } from 'react'\n\nimport { AnyDataNode } from '~/queries/schema/schema-general'\nimport { UniversalFiltersGroup, UniversalFilterValue } from '~/types'\n\nimport { TaxonomicPropertyFilter } from '../PropertyFilters/components/TaxonomicPropertyFilter'\nimport { PropertyFilters } from '../PropertyFilters/PropertyFilters'\nimport { isValidPropertyFilter } from '../PropertyFilters/utils'\nimport { TaxonomicFilter } from '../TaxonomicFilter/TaxonomicFilter'\nimport { TaxonomicFilterGroupType } from '../TaxonomicFilter/types'\nimport { UniversalFilterButton } from './UniversalFilterButton'\nimport { universalFiltersLogic } from './universalFiltersLogic'\nimport { isEditableFilter, isEventFilter } from './utils'\n\ntype UniversalFiltersProps = {\n    rootKey: string\n    group: UniversalFiltersGroup | null\n    onChange: (group: UniversalFiltersGroup) => void\n    taxonomicGroupTypes: TaxonomicFilterGroupType[]\n    children?: React.ReactNode\n}\n\nfunction UniversalFilters({\n    rootKey,\n    group = null,\n    onChange,\n    taxonomicGroupTypes,\n    children,\n}: UniversalFiltersProps): JSX.Element {\n    return (\n        <BindLogic\n            logic={universalFiltersLogic}\n            props={{\n                rootKey,\n                group,\n                onChange,\n                taxonomicGroupTypes,\n            }}\n        >\n            {children}\n        </BindLogic>\n    )\n}\n\nfunction Group({\n    group,\n    index,\n    children,\n}: {\n    group: UniversalFiltersGroup\n    index: number\n    children: React.ReactNode\n}): JSX.Element {\n    const { rootKey, taxonomicGroupTypes } = useValues(universalFiltersLogic)\n    const { replaceGroupValue } = useActions(universalFiltersLogic)\n\n    return (\n        <UniversalFilters\n            key={index}\n            rootKey={`${rootKey}.group_${index}`}\n            group={group}\n            onChange={(group) => replaceGroupValue(index, group)}\n            taxonomicGroupTypes={taxonomicGroupTypes}\n        >\n            {children}\n        </UniversalFilters>\n    )\n}\n\nconst Value = ({\n    index,\n    filter,\n    onChange,\n    onRemove,\n    initiallyOpen = false,\n    metadataSource,\n}: {\n    index: number\n    filter: UniversalFilterValue\n    onChange: (property: UniversalFilterValue) => void\n    onRemove: () => void\n    initiallyOpen?: boolean\n    metadataSource?: AnyDataNode\n}): JSX.Element => {\n    const { rootKey, taxonomicPropertyFilterGroupTypes } = useValues(universalFiltersLogic)\n\n    const isEvent = isEventFilter(filter)\n    const isEditable = isEditableFilter(filter)\n\n    const [open, setOpen] = useState<boolean>(isEditable && initiallyOpen)\n\n    const pageKey = `${rootKey}.filter_${index}`\n\n    return (\n        <Popover\n            visible={open}\n            onClickOutside={() => setOpen(false)}\n            overlay={\n                isEvent ? (\n                    <PropertyFilters\n                        pageKey={pageKey}\n                        propertyFilters={filter.properties}\n                        onChange={(properties) => onChange({ ...filter, properties })}\n                        disablePopover\n                        taxonomicGroupTypes={[TaxonomicFilterGroupType.EventProperties]}\n                        metadataSource={metadataSource}\n                    />\n                ) : isEditable ? (\n                    <TaxonomicPropertyFilter\n                        pageKey={pageKey}\n                        index={0}\n                        filters={[filter]}\n                        onComplete={() => {\n                            if (isValidPropertyFilter(filter) && !filter.key) {\n                                onRemove()\n                            }\n                        }}\n                        setFilter={(_, property) => onChange(property)}\n                        disablePopover={false}\n                        taxonomicGroupTypes={taxonomicPropertyFilterGroupTypes}\n                    />\n                ) : null\n            }\n        >\n            <UniversalFilterButton onClick={() => setOpen(!open)} onClose={onRemove} filter={filter} />\n        </Popover>\n    )\n}\n\nconst AddFilterButton = (props: Omit<LemonButtonProps, 'onClick' | 'sideAction' | 'icon'>): JSX.Element => {\n    const [dropdownOpen, setDropdownOpen] = useState<boolean>(false)\n\n    const { taxonomicGroupTypes } = useValues(universalFiltersLogic)\n    const { addGroupFilter } = useActions(universalFiltersLogic)\n\n    return (\n        <LemonDropdown\n            overlay={\n                <TaxonomicFilter\n                    onChange={(taxonomicGroup, value, item) => {\n                        addGroupFilter(taxonomicGroup, value, item)\n                        setDropdownOpen(false)\n                    }}\n                    taxonomicGroupTypes={taxonomicGroupTypes}\n                />\n            }\n            visible={dropdownOpen}\n            onClickOutside={() => setDropdownOpen(false)}\n        >\n            <LemonButton\n                icon={<IconPlusSmall />}\n                sideIcon={null}\n                onClick={() => setDropdownOpen(!dropdownOpen)}\n                {...props}\n            >\n                {props?.title || 'Add filter'}\n            </LemonButton>\n        </LemonDropdown>\n    )\n}\n\nUniversalFilters.Group = Group\nUniversalFilters.Value = Value\nUniversalFilters.AddFilterButton = AddFilterButton\n\nexport default UniversalFilters\n", "import './UniversalFilterButton.scss'\n\nimport { IconFilter, IconLogomark, IconX } from '@posthog/icons'\nimport { LemonButton, PopoverReferenceContext } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { useValues } from 'kea'\nimport { PropertyFilterIcon } from 'lib/components/PropertyFilters/components/PropertyFilterIcon'\nimport { IconWithCount } from 'lib/lemon-ui/icons'\nimport { midEllipsis } from 'lib/utils'\nimport React from 'react'\n\nimport { cohortsModel } from '~/models/cohortsModel'\nimport { propertyDefinitionsModel } from '~/models/propertyDefinitionsModel'\nimport { ActionFilter, AnyPropertyFilter, FeaturePropertyFilter, UniversalFilterValue } from '~/types'\n\nimport { EntityFilterInfo } from '../EntityFilterInfo'\nimport { formatPropertyLabel } from '../PropertyFilters/utils'\nimport { isActionFilter, isEditableFilter, isEventFilter, isFeatureFlagFilter } from './utils'\n\nexport interface UniversalFilterButtonProps {\n    onClick?: () => void\n    onClose?: () => void\n    children?: React.ReactNode\n    filter: UniversalFilterValue\n    disabledReason?: string\n}\n\nexport const UniversalFilterButton = React.forwardRef<HTMLElement, UniversalFilterButtonProps>(\n    function UniversalFilterButton({ onClick, onClose, filter }, ref): JSX.Element {\n        const closable = onClose !== undefined\n\n        const isEditable = isEditableFilter(filter)\n        const isAction = isActionFilter(filter)\n        const isEvent = isEventFilter(filter)\n        const isFeatureFlag = isFeatureFlagFilter(filter)\n        const button = (\n            <div\n                ref={ref as any}\n                onClick={isEditable ? onClick : undefined}\n                className={clsx('UniversalFilterButton inline-flex items-center', {\n                    'UniversalFilterButton--clickable': isEditable,\n                    'UniversalFilterButton--closeable': closable,\n                    'ph-no-capture': true,\n                })}\n            >\n                <div className=\"flex items-center flex-1 truncate gap-1\">\n                    {isEvent ? (\n                        <EventLabel filter={filter} onClick={onClick} />\n                    ) : isAction ? (\n                        <EntityFilterInfo filter={filter} />\n                    ) : isFeatureFlag ? (\n                        <FeatureFlagLabel filter={filter} />\n                    ) : (\n                        <PropertyLabel filter={filter} />\n                    )}\n                </div>\n\n                {closable && (\n                    // The context below prevents close button from going into active status when filter popover is open\n                    <PopoverReferenceContext.Provider value={null}>\n                        <LemonButton\n                            size=\"xsmall\"\n                            icon={<IconX />}\n                            onClick={(e) => {\n                                e.stopPropagation()\n                                onClose()\n                            }}\n                            className=\"p-0.5\"\n                        />\n                    </PopoverReferenceContext.Provider>\n                )}\n            </div>\n        )\n\n        return button\n    }\n)\n\nconst PropertyLabel = ({ filter }: { filter: AnyPropertyFilter }): JSX.Element => {\n    const { cohortsById } = useValues(cohortsModel)\n    const { formatPropertyValueForDisplay } = useValues(propertyDefinitionsModel)\n\n    let label = formatPropertyLabel(\n        filter,\n        cohortsById,\n        (s) => formatPropertyValueForDisplay(filter.key, s)?.toString() || '?'\n    )\n    const isEventFeature = label.startsWith('$feature/')\n    if (isEventFeature) {\n        label = label.replace('$feature/', 'Feature: ')\n    }\n\n    return (\n        <>\n            {isEventFeature ? <IconLogomark /> : <PropertyFilterIcon type={filter.type} />}\n            <span className=\"UniversalFilterButton-content flex flex-1 items-center truncate\" title={label}>\n                {typeof label === 'string' ? midEllipsis(label, 32) : label}\n            </span>\n        </>\n    )\n}\n\nconst EventLabel = ({\n    filter,\n    onClick,\n}: {\n    filter: ActionFilter\n    onClick: UniversalFilterButtonProps['onClick']\n}): JSX.Element => {\n    return (\n        <div className=\"flex truncate  items-center space-x-1\">\n            <EntityFilterInfo filter={filter} />\n            <LemonButton\n                size=\"xsmall\"\n                icon={\n                    <IconWithCount count={filter.properties?.length || 0} showZero={false}>\n                        <IconFilter />\n                    </IconWithCount>\n                }\n                className=\"p-0.5\"\n                onClick={onClick}\n            />\n        </div>\n    )\n}\n\nconst FeatureFlagLabel = ({ filter }: { filter: FeaturePropertyFilter }): JSX.Element => {\n    return <div className=\"flex items-center truncate\">{filter.key}</div>\n}\n", "import { IconGear } from '@posthog/icons'\nimport { useActions, useValues } from 'kea'\nimport { LemonButton } from 'lib/lemon-ui/LemonButton'\nimport { LemonSwitch, LemonSwitchProps } from 'lib/lemon-ui/LemonSwitch/LemonSwitch'\nimport { filterTestAccountsDefaultsLogic } from 'scenes/settings/environment/filterTestAccountDefaultsLogic'\nimport { teamLogic } from 'scenes/teamLogic'\nimport { urls } from 'scenes/urls'\n\nimport { FilterType } from '~/types'\n\nexport function TestAccountFilter({\n    filters,\n    size,\n    onChange,\n    disabledReason,\n}: {\n    filters: Partial<FilterType>\n    size?: LemonSwitchProps['size']\n    onChange: (filters: Partial<FilterType>) => void\n    disabledReason?: string | null | false\n}): JSX.Element | null {\n    const { currentTeam } = useValues(teamLogic)\n    const hasFilters = (currentTeam?.test_account_filters || []).length > 0\n    const { setLocalDefault } = useActions(filterTestAccountsDefaultsLogic)\n\n    return (\n        <LemonSwitch\n            checked={hasFilters ? !!filters.filter_test_accounts : false}\n            onChange={(checked: boolean) => {\n                onChange({ filter_test_accounts: checked })\n                setLocalDefault(checked)\n            }}\n            id=\"test-account-filter\"\n            bordered\n            label={\n                <div className=\"flex items-center whitespace-nowrap\">\n                    <span>Filter out internal and test users</span>\n                    <LemonButton\n                        icon={<IconGear />}\n                        to={urls.settings('project-product-analytics', 'internal-user-filtering')}\n                        size=\"small\"\n                        noPadding\n                        className=\"ml-1\"\n                    />\n                </div>\n            }\n            fullWidth\n            size={size}\n            disabledReason={!hasFilters ? \"You haven't set any internal and test filters\" : disabledReason}\n        />\n    )\n}\n", "export * from './TestAccountFilter'\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_kea", "import_react", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_react", "import_jsx_runtime", "UniversalFilterButton", "React", "onClick", "onClose", "filter", "ref", "closable", "isEditable", "isEditableFilter", "isAction", "isActionFilter", "isEvent", "isEventFilter", "isFeatureFlag", "isFeatureFlagFilter", "clsx", "EventLabel", "EntityFilterInfo", "FeatureFlagLabel", "PropertyLabel", "PopoverReferenceContext", "LemonButton", "IconX", "e", "cohortsById", "cohortsModel", "formatPropertyValueForDisplay", "propertyDefinitionsModel", "label", "formatPropertyLabel", "s", "isEventFeature", "IconLogomark", "PropertyFilterIcon", "midEllipsis", "IconWithCount", "IconFilter", "import_jsx_runtime", "UniversalFilters", "rootKey", "group", "onChange", "taxonomicGroupTypes", "children", "universalFiltersLogic", "Group", "index", "replaceGroupValue", "Value", "filter", "onRemove", "initiallyOpen", "metadataSource", "taxonomicPropertyFilterGroupTypes", "isEvent", "isEventFilter", "isEditable", "isEditableFilter", "open", "setOpen", "pageKey", "Popover", "PropertyFilters", "properties", "TaxonomicPropertyFilter", "isValidPropertyFilter", "_", "property", "UniversalFilterButton", "AddFilterButton", "props", "dropdownOpen", "setDropdownOpen", "addGroupFilter", "LemonDropdown", "TaxonomicFilter", "taxonomicGroup", "value", "item", "LemonButton", "IconPlusSmall", "UniversalFilters_default", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "TestAccountFilter", "filters", "size", "onChange", "disabledReason", "currentTeam", "teamLogic", "hasFilters", "setLocalDefault", "filterTestAccountsDefaultsLogic", "LemonSwitch", "checked", "LemonButton", "IconGear", "urls", "init_dirname", "init_buffer", "init_process"]
}
