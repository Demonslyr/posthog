{
  "version": 3,
  "sources": ["../../products/llm_observability/frontend/LLMObservabilityScene.tsx", "../src/lib/components/Cards/InsightCard/QueryCard.tsx", "../../products/llm_observability/frontend/LLMObservabilityTracesScene.tsx"],
  "sourcesContent": ["import { IconArchive } from '@posthog/icons'\nimport { LemonBanner, LemonButton, LemonTabs, Link } from '@posthog/lemon-ui'\nimport clsx from 'clsx'\nimport { BindLogic, useActions, useValues } from 'kea'\nimport { combineUrl, router } from 'kea-router'\nimport { QueryCard } from 'lib/components/Cards/InsightCard/QueryCard'\nimport { DateFilter } from 'lib/components/DateFilter/DateFilter'\nimport { FeedbackNotice } from 'lib/components/FeedbackNotice'\nimport { PageHeader } from 'lib/components/PageHeader'\nimport { PropertyFilters } from 'lib/components/PropertyFilters/PropertyFilters'\nimport { TaxonomicFilterGroupType } from 'lib/components/TaxonomicFilter/types'\nimport { TestAccountFilterSwitch } from 'lib/components/TestAccountFiltersSwitch'\nimport { SceneExport } from 'scenes/sceneTypes'\nimport { urls } from 'scenes/urls'\n\nimport { dataNodeCollectionLogic } from '~/queries/nodes/DataNode/dataNodeCollectionLogic'\nimport { DataTable } from '~/queries/nodes/DataTable/DataTable'\nimport { InsightVizNode, NodeKind } from '~/queries/schema/schema-general'\nimport { isEventsQuery } from '~/queries/utils'\n\nimport { LLM_OBSERVABILITY_DATA_COLLECTION_NODE_ID, llmObservabilityLogic } from './llmObservabilityLogic'\nimport { LLMObservabilityTraces } from './LLMObservabilityTracesScene'\nimport { LLMObservabilityUsers } from './LLMObservabilityUsers'\n\nexport const scene: SceneExport = {\n    component: LLMObservabilityScene,\n}\n\nconst Filters = (): JSX.Element => {\n    const { dashboardDateFilter, dateFilter, shouldFilterTestAccounts, generationsQuery, propertyFilters, activeTab } =\n        useValues(llmObservabilityLogic)\n    const { setDates, setShouldFilterTestAccounts, setPropertyFilters } = useActions(llmObservabilityLogic)\n\n    const dateFrom = activeTab === 'dashboard' ? dashboardDateFilter.dateFrom : dateFilter.dateFrom\n    const dateTo = activeTab === 'dashboard' ? dashboardDateFilter.dateTo : dateFilter.dateTo\n\n    return (\n        <div className=\"flex gap-x-4 gap-y-2 items-center flex-wrap py-4 -mt-4 mb-4 border-b\">\n            <DateFilter dateFrom={dateFrom} dateTo={dateTo} onChange={setDates} />\n            <PropertyFilters\n                propertyFilters={propertyFilters}\n                taxonomicGroupTypes={generationsQuery.showPropertyFilter as TaxonomicFilterGroupType[]}\n                onChange={setPropertyFilters}\n                pageKey=\"llm-observability\"\n            />\n            <div className=\"flex-1\" />\n            <TestAccountFilterSwitch checked={shouldFilterTestAccounts} onChange={setShouldFilterTestAccounts} />\n        </div>\n    )\n}\n\nconst Tiles = (): JSX.Element => {\n    const { tiles } = useValues(llmObservabilityLogic)\n\n    return (\n        <div className=\"mt-2 grid grid-cols-1 @xl/dashboard:grid-cols-2 @4xl/dashboard:grid-cols-6 gap-4\">\n            {tiles.map(({ title, description, query, context }, i) => (\n                <QueryCard\n                    key={i}\n                    title={title}\n                    description={description}\n                    query={{ kind: NodeKind.InsightVizNode, source: query } as InsightVizNode}\n                    context={context}\n                    className={clsx(\n                        'h-96',\n                        /* Second row is the only one to have 2 tiles in the xl layout */\n                        i < 3 || i >= 5 ? '@4xl/dashboard:col-span-2' : '@4xl/dashboard:col-span-3'\n                    )}\n                />\n            ))}\n        </div>\n    )\n}\n\nconst IngestionStatusCheck = (): JSX.Element | null => {\n    return (\n        <LemonBanner type=\"warning\" className=\"mt-2\">\n            <p>\n                <strong>No LLM generation events have been detected!</strong>\n            </p>\n            <p>\n                To use the LLM Observability product, please{' '}\n                <Link to=\"https://posthog.com/docs/ai-engineering/observability\">\n                    instrument your LLM calls with the PostHog SDK\n                </Link>{' '}\n                (otherwise it'll be a little empty!)\n            </p>\n        </LemonBanner>\n    )\n}\n\nfunction LLMObservabilityDashboard(): JSX.Element {\n    return (\n        <div className=\"@container/dashboard\">\n            <Filters />\n            <Tiles />\n        </div>\n    )\n}\n\nfunction LLMObservabilityGenerations(): JSX.Element {\n    const { setDates, setShouldFilterTestAccounts, setPropertyFilters, setGenerationsQuery } =\n        useActions(llmObservabilityLogic)\n    const { generationsQuery } = useValues(llmObservabilityLogic)\n\n    return (\n        <DataTable\n            query={generationsQuery}\n            setQuery={(query) => {\n                if (!isEventsQuery(query.source)) {\n                    throw new Error('Invalid query')\n                }\n                setDates(query.source.after || null, query.source.before || null)\n                setShouldFilterTestAccounts(query.source.filterTestAccounts || false)\n                setPropertyFilters(query.source.properties || [])\n                setGenerationsQuery(query)\n            }}\n            context={{\n                emptyStateHeading: 'There were no generations in this period',\n                emptyStateDetail: 'Try changing the date range or filters.',\n                columns: {\n                    uuid: {\n                        title: 'ID',\n                        render: ({ record, value }) => {\n                            const traceId = (record as any[])[2]\n                            if (!value) {\n                                return <></>\n                            }\n                            // show only first 4 and last 4 characters of the trace id\n                            const visualValue = (value as string).slice(0, 4) + '...' + (value as string).slice(-4)\n                            if (!traceId) {\n                                return <strong>{visualValue}</strong>\n                            }\n                            return (\n                                <strong>\n                                    <Link to={`/llm-observability/traces/${traceId}?event=${value as string}`}>\n                                        {visualValue}\n                                    </Link>\n                                </strong>\n                            )\n                        },\n                    },\n                    'properties.$ai_trace_id': {\n                        title: 'Trace ID',\n                        render: ({ value }) => {\n                            if (!value) {\n                                return <></>\n                            }\n                            const visualValue = (value as string).slice(0, 4) + '...' + (value as string).slice(-4)\n                            return <Link to={`/llm-observability/traces/${value as string}`}>{visualValue}</Link>\n                        },\n                    },\n                },\n            }}\n            uniqueKey=\"llm-observability-generations\"\n        />\n    )\n}\n\nfunction LLMObservabilityNoEvents(): JSX.Element {\n    return (\n        <div className=\"w-full flex flex-col items-center justify-center\">\n            <div className=\"flex flex-col items-center justify-center max-w-md w-full\">\n                <IconArchive className=\"text-5xl mb-2 text-muted-alt\" />\n                <h2 className=\"text-xl leading-tight\">We haven't detected any LLM generations yet</h2>\n                <p className=\"text-sm text-center text-balance\">\n                    To use the LLM Observability product, please{' '}\n                    <Link to=\"https://posthog.com/docs/ai-engineering/observability\">\n                        instrument your LLM calls with the PostHog SDK\n                    </Link>{' '}\n                </p>\n            </div>\n        </div>\n    )\n}\n\nexport function LLMObservabilityScene(): JSX.Element {\n    const { activeTab, hasSentAiGenerationEvent, hasSentAiGenerationEventLoading } = useValues(llmObservabilityLogic)\n    const { searchParams } = useValues(router)\n\n    return (\n        <BindLogic logic={dataNodeCollectionLogic} props={{ key: LLM_OBSERVABILITY_DATA_COLLECTION_NODE_ID }}>\n            <PageHeader\n                buttons={\n                    <LemonButton\n                        to=\"https://posthog.com/docs/ai-engineering/observability\"\n                        type=\"secondary\"\n                        targetBlank\n                    >\n                        Documentation\n                    </LemonButton>\n                }\n            />\n\n            {hasSentAiGenerationEventLoading ? null : hasSentAiGenerationEvent ? (\n                <FeedbackNotice text=\"LLM observability is currently in beta. Thanks for taking part! We'd love to hear what you think.\" />\n            ) : (\n                <IngestionStatusCheck />\n            )}\n            <LemonTabs\n                activeKey={activeTab}\n                tabs={[\n                    {\n                        key: 'dashboard',\n                        label: 'Dashboard',\n                        content: <LLMObservabilityDashboard />,\n                        link: combineUrl(urls.llmObservabilityDashboard(), searchParams).url,\n                    },\n                    {\n                        key: 'traces',\n                        label: 'Traces',\n                        content: hasSentAiGenerationEvent ? <LLMObservabilityTraces /> : <LLMObservabilityNoEvents />,\n                        link: combineUrl(urls.llmObservabilityTraces(), searchParams).url,\n                    },\n                    {\n                        key: 'generations',\n                        label: 'Generations',\n                        content: hasSentAiGenerationEvent ? (\n                            <LLMObservabilityGenerations />\n                        ) : (\n                            <LLMObservabilityNoEvents />\n                        ),\n                        link: combineUrl(urls.llmObservabilityGenerations(), searchParams).url,\n                    },\n                    {\n                        key: 'users',\n                        label: 'Users',\n                        content: hasSentAiGenerationEvent ? <LLMObservabilityUsers /> : <LLMObservabilityNoEvents />,\n                        link: combineUrl(urls.llmObservabilityUsers(), searchParams).url,\n                    },\n                ]}\n            />\n        </BindLogic>\n    )\n}\n", "import clsx from 'clsx'\nimport { useValues } from 'kea'\nimport { CardMeta } from 'lib/components/Cards/CardMeta'\nimport { LemonMenuItemList } from 'lib/lemon-ui/LemonMenu/LemonMenu'\nimport React, { useState } from 'react'\nimport { urls } from 'scenes/urls'\n\nimport { ErrorBoundary } from '~/layout/ErrorBoundary'\nimport { themeLogic } from '~/layout/navigation-3000/themeLogic'\nimport { Query } from '~/queries/Query/Query'\nimport { Node } from '~/queries/schema/schema-general'\nimport { QueryContext } from '~/queries/types'\n\nimport { InsightCardProps } from './InsightCard'\nimport { InsightDetails } from './InsightDetails'\nimport { InsightMetaContent } from './InsightMeta'\nimport { TopHeading } from './TopHeading'\n\nexport interface QueryCardProps extends Pick<InsightCardProps, 'highlighted' | 'ribbonColor' | 'className' | 'style'> {\n    query: Node\n    title: string\n    description?: string\n    context?: QueryContext\n}\n\n/** This is like InsightCard, except for presentation of queries that aren't saved insights. */\nexport const QueryCard = React.forwardRef<HTMLDivElement, QueryCardProps>(function QueryCard(\n    { query, title, description, context, highlighted, ribbonColor, className, ...divProps },\n    ref\n): JSX.Element {\n    const { theme } = useValues(themeLogic)\n\n    const [areDetailsShown, setAreDetailsShown] = useState(false)\n\n    return (\n        <div\n            className={clsx('InsightCard border', highlighted && 'InsightCard--highlighted', className)}\n            data-attr=\"insight-card\"\n            {...divProps}\n            // eslint-disable-next-line react/forbid-dom-props\n            style={{ ...(divProps?.style ?? {}), ...(theme?.boxStyle ?? {}) }}\n            ref={ref}\n        >\n            <ErrorBoundary tags={{ feature: 'insight' }}>\n                <CardMeta\n                    ribbonColor={ribbonColor}\n                    setAreDetailsShown={setAreDetailsShown}\n                    areDetailsShown={areDetailsShown}\n                    topHeading={<TopHeading query={query} />}\n                    content={<InsightMetaContent title={title} description={description} />}\n                    metaDetails={<InsightDetails query={query} />}\n                    samplingFactor={\n                        'samplingFactor' in query && typeof query.samplingFactor === 'number'\n                            ? query.samplingFactor\n                            : undefined\n                    }\n                    moreButtons={\n                        <LemonMenuItemList\n                            items={[\n                                {\n                                    label: 'Open as new insight',\n                                    to: urls.insightNew({ query }),\n                                },\n                            ]}\n                        />\n                    }\n                    showEditingControls\n                />\n                <div className=\"InsightCard__viz\">\n                    <Query query={query} readOnly embedded context={context} />\n                </div>\n            </ErrorBoundary>\n        </div>\n    )\n})\n", "import { useActions, useValues } from 'kea'\nimport { TZLabel } from 'lib/components/TZLabel'\nimport { Link } from 'lib/lemon-ui/Link'\nimport { urls } from 'scenes/urls'\n\nimport { DataTable } from '~/queries/nodes/DataTable/DataTable'\nimport { LLMTrace } from '~/queries/schema/schema-general'\nimport { QueryContextColumnComponent } from '~/queries/types'\nimport { isTracesQuery } from '~/queries/utils'\n\nimport { llmObservabilityLogic } from './llmObservabilityLogic'\nimport { formatLLMCost, formatLLMUsage, removeMilliseconds } from './utils'\n\nexport function LLMObservabilityTraces(): JSX.Element {\n    const { setDates, setShouldFilterTestAccounts, setPropertyFilters } = useActions(llmObservabilityLogic)\n    const { tracesQuery } = useValues(llmObservabilityLogic)\n    return (\n        <DataTable\n            query={tracesQuery}\n            setQuery={(query) => {\n                if (!isTracesQuery(query.source)) {\n                    throw new Error('Invalid query')\n                }\n                setDates(query.source.dateRange?.date_from || null, query.source.dateRange?.date_to || null)\n                setShouldFilterTestAccounts(query.source.filterTestAccounts || false)\n                setPropertyFilters(query.source.properties || [])\n            }}\n            context={{\n                emptyStateHeading: 'There were no traces in this period',\n                emptyStateDetail: 'Try changing the date range or filters.',\n                columns: {\n                    id: {\n                        title: 'ID',\n                        render: IDColumn,\n                    },\n                    timestamp: {\n                        title: 'Time',\n                        render: TimestampColumn,\n                    },\n                    person: {\n                        title: 'Person',\n                    },\n                    totalLatency: {\n                        title: 'Latency',\n                        render: LatencyColumn,\n                    },\n                    usage: {\n                        title: 'Token Usage',\n                        render: UsageColumn,\n                    },\n                    totalCost: {\n                        title: 'Total Cost',\n                        render: CostColumn,\n                    },\n                },\n            }}\n            uniqueKey=\"llm-observability-traces\"\n        />\n    )\n}\n\nconst IDColumn: QueryContextColumnComponent = ({ record }) => {\n    const row = record as LLMTrace\n    return (\n        <strong>\n            <Link\n                className=\"ph-no-capture\"\n                to={urls.llmObservabilityTrace(row.id, { timestamp: removeMilliseconds(row.createdAt) })}\n            >\n                {row.id.slice(0, 4)}...{row.id.slice(-4)}\n            </Link>\n        </strong>\n    )\n}\n\nconst TimestampColumn: QueryContextColumnComponent = ({ record }) => {\n    const row = record as LLMTrace\n    return <TZLabel time={row.createdAt} />\n}\nTimestampColumn.displayName = 'TimestampColumn'\n\nconst LatencyColumn: QueryContextColumnComponent = ({ record }) => {\n    const row = record as LLMTrace\n    if (typeof row.totalLatency === 'number') {\n        return <>{row.totalLatency}s</>\n    }\n    return <>\u2013</>\n}\nLatencyColumn.displayName = 'LatencyColumn'\n\nconst UsageColumn: QueryContextColumnComponent = ({ record }) => {\n    const row = record as LLMTrace\n    const usage = formatLLMUsage(row)\n    return <>{usage || '\u2013'}</>\n}\nUsageColumn.displayName = 'UsageColumn'\n\nconst CostColumn: QueryContextColumnComponent = ({ record }) => {\n    const row = record as LLMTrace\n    if (typeof row.totalCost === 'number') {\n        return <>{formatLLMCost(row.totalCost)}</>\n    }\n    return <>\u2013</>\n}\nCostColumn.displayName = 'CostColumn'\n"],
  "mappings": "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",
  "names": ["init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_kea_router", "init_dirname", "init_buffer", "init_process", "import_clsx", "import_kea", "import_react", "import_jsx_runtime", "QueryCard", "React", "query", "title", "description", "context", "highlighted", "ribbonColor", "className", "divProps", "ref", "theme", "themeLogic", "areDetailsShown", "setAreDetailsShown", "clsx", "ErrorBoundary", "CardMeta", "TopHeading", "InsightMetaContent", "InsightDetails", "LemonMenuItemList", "urls", "Query", "init_dirname", "init_buffer", "init_process", "import_kea", "import_jsx_runtime", "LLMObservabilityTraces", "setDates", "setShouldFilterTestAccounts", "setPropertyFilters", "llmObservabilityLogic", "tracesQuery", "DataTable", "query", "isTracesQuery", "IDColumn", "TimestampColumn", "LatencyColumn", "UsageColumn", "CostColumn", "record", "row", "Link", "urls", "removeMilliseconds", "TZLabel", "usage", "formatLLMUsage", "formatLLMCost", "import_jsx_runtime", "scene", "LLMObservabilityScene", "Filters", "dashboardDateFilter", "dateFilter", "shouldFilterTestAccounts", "generationsQuery", "propertyFilters", "activeTab", "llmObservabilityLogic", "setDates", "setShouldFilterTestAccounts", "setPropertyFilters", "dateFrom", "dateTo", "DateFilter", "PropertyFilters", "TestAccountFilterSwitch", "Tiles", "tiles", "title", "description", "query", "context", "i", "QueryCard", "clsx", "IngestionStatusCheck", "LemonBanner", "Link", "LLMObservabilityDashboard", "LLMObservabilityGenerations", "setGenerationsQuery", "DataTable", "isEventsQuery", "record", "value", "traceId", "visualValue", "LLMObservabilityNoEvents", "IconArchive", "hasSentAiGenerationEvent", "hasSentAiGenerationEventLoading", "searchParams", "dataNodeCollectionLogic", "LLM_OBSERVABILITY_DATA_COLLECTION_NODE_ID", "PageHeader", "LemonButton", "FeedbackNotice", "LemonTabs", "urls", "LLMObservabilityTraces", "LLMObservabilityUsers"]
}
