name: Rust CI

on:
    workflow_call:

env:
    CARGO_TERM_COLOR: always

jobs:
    build:
        name: Build Rust services
        runs-on: depot-ubuntu-22.04-4

        defaults:
            run:
                working-directory: rust

        steps:
            # Checkout project code
            # Use sparse checkout to only select files in rust directory
            # Turning off cone mode ensures that files in the project root are not included during checkout
            - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
              if: needs.changes.outputs.rust == 'true'
              with:
                  sparse-checkout: 'rust/'
                  sparse-checkout-cone-mode: false

            - name: Install rust
              if: needs.changes.outputs.rust == 'true'
              uses: dtolnay/rust-toolchain@2d6ac6e12ff6f69821a786a25ca0db906b4e4ba2 # 1.82

            - name: Install sccache
              if: needs.changes.outputs.rust == 'true'
              uses: mozilla-actions/sccache-action@7d986dd989559c6ecdb630a3fd2557667be217ad # v0.0.9

            - name: Configure sccache
              if: needs.changes.outputs.rust == 'true'
              run: |
                  echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
                  sccache --start-server

            - name: Run cargo build
              if: needs.changes.outputs.rust == 'true'
              run: cargo build --all --locked --release && find target/release/ -maxdepth 1 -executable -type f | xargs strip

    test:
        name: Test Rust services
        strategy:
            matrix:
                package:
                    - feature-flags
                    - others
        runs-on: depot-ubuntu-24.04-4
        timeout-minutes: 10

        defaults:
            run:
                working-directory: rust

        steps:
            - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
              if: needs.changes.outputs.rust == 'true'

            - name: Setup main repo dependencies for flags
              if: needs.changes.outputs.rust == 'true' && matrix.package == 'feature-flags'
              run: |
                  docker compose -f ../docker-compose.dev.yml down
                  docker compose -f ../docker-compose.dev.yml up -d
                  echo "127.0.0.1 kafka clickhouse" | sudo tee -a /etc/hosts

            - name: Setup dependencies
              if: needs.changes.outputs.rust == 'true' && matrix.package == 'others'
              run: |
                  docker compose up kafka redis db echo_server objectstorage -d --wait
                  docker compose up setup_test_db
                  echo "127.0.0.1 kafka clickhouse" | sudo tee -a /etc/hosts

            # please keep the tag version here in sync with rust-version in rust/*/Cargo.toml
            - name: Install rust
              if: needs.changes.outputs.rust == 'true'
              uses: dtolnay/rust-toolchain@2d6ac6e12ff6f69821a786a25ca0db906b4e4ba2 # 1.82

            - name: Install sccache
              if: needs.changes.outputs.rust == 'true'
              uses: mozilla-actions/sccache-action@7d986dd989559c6ecdb630a3fd2557667be217ad # v0.0.9

            - name: Configure sccache
              if: needs.changes.outputs.rust == 'true'
              run: |
                  echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
                  sccache --start-server

            - name: Set up Python
              if: needs.changes.outputs.rust == 'true' && matrix.package == 'feature-flags'
              uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5
              with:
                  python-version-file: 'pyproject.toml'
                  token: ${{ secrets.POSTHOG_BOT_GITHUB_TOKEN }}

            - name: Install uv
              if: needs.changes.outputs.rust == 'true' && matrix.package == 'feature-flags'
              uses: astral-sh/setup-uv@0c5e2b8115b80b4c7c5ddf6ffdd634974642d182 # v5.4.1
              with:
                  enable-cache: true
                  pyproject-file: 'pyproject.toml'

            - name: Install SAML (python3-saml) dependencies
              if: needs.changes.outputs.rust == 'true' && matrix.package == 'feature-flags'
              run: |
                  sudo apt-get update
                  sudo apt-get install libxml2-dev libxmlsec1-dev libxmlsec1-openssl

            - name: Install python dependencies
              if: needs.changes.outputs.rust == 'true' && matrix.package == 'feature-flags'
              run: |
                  UV_PROJECT_ENVIRONMENT=$pythonLocation uv sync --frozen --dev --directory ..

            - name: Set up databases
              if: needs.changes.outputs.rust == 'true' && matrix.package == 'feature-flags'
              env:
                  DEBUG: 'true'
                  TEST: 'true'
                  SECRET_KEY: 'abcdef' # unsafe - for testing only
                  DATABASE_URL: 'postgres://posthog:posthog@localhost:5432/posthog'
              run: cd ../ && python manage.py setup_test_environment --only-postgres

            - name: Download MaxMind Database
              if: needs.changes.outputs.rust == 'true'
              run: |
                  cd ../ && ./bin/download-mmdb

            - name: Run cargo test
              if: needs.changes.outputs.rust == 'true'
              run: |
                  echo "Starting cargo test"
                  RUST_BACKTRACE=1 cargo test --all-features ${{ matrix.package == 'feature-flags' && '--package feature-flags' || '--workspace --exclude feature-flags' }}
                  echo "Cargo test completed"

    linting:
        name: Lint Rust services
        runs-on: depot-ubuntu-22.04-4

        defaults:
            run:
                working-directory: rust

        steps:
            # Checkout project code
            # Use sparse checkout to only select files in rust directory
            # Turning off cone mode ensures that files in the project root are not included during checkout
            - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
              with:
                  sparse-checkout: 'rust/'
                  sparse-checkout-cone-mode: false

            - name: Install rust
              uses: dtolnay/rust-toolchain@2d6ac6e12ff6f69821a786a25ca0db906b4e4ba2 # 1.82
              with:
                  components: clippy,rustfmt

            - name: Install sccache
              uses: mozilla-actions/sccache-action@7d986dd989559c6ecdb630a3fd2557667be217ad # v0.0.9

            - name: Configure sccache
              run: |
                  echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
                  sccache --start-server

            - name: Check format
              run: cargo fmt -- --check

            - name: Run clippy
              run: cargo clippy --all-targets --all-features -- -D warnings

            - name: Run cargo check
              run: cargo check --all-features

    shear:
        name: Shear Rust services
        runs-on: depot-ubuntu-22.04-4

        defaults:
            run:
                working-directory: rust

        steps:
            # Checkout project code
            # Use sparse checkout to only select files in rust directory
            # Turning off cone mode ensures that files in the project root are not included during checkout
            - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
              with:
                  sparse-checkout: 'rust/'
                  sparse-checkout-cone-mode: false

            - name: Install cargo-binstall
              uses: cargo-bins/cargo-binstall@89e50159140fdba08fc64e36186a014c5c253d33 # main

            - name: Install cargo-shear
              run: cargo binstall --no-confirm cargo-shear@1.1.12

            - run: cargo shear
