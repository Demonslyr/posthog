name: Migration Conflicts - Auto Detect

on:
    push:
        branches:
            - '**'
            - '!master'
            - '!main'
        paths:
            - '**/migrations/**'
            - '**/max_migration.txt'
    repository_dispatch:
        types: [test-auto-detect]

jobs:
    auto-detect-migration-conflicts:
        runs-on: ubuntu-latest
        if: |
            (github.event_name == 'push' && github.ref != 'refs/heads/master' && github.ref != 'refs/heads/main' && github.ref == 'refs/heads/yasen/feat/migrations-conflict-resolution-in-ci') ||
            (github.event_name == 'repository_dispatch' && github.event.action == 'test-auto-detect' && github.event.client_payload.branch == 'yasen/feat/migrations-conflict-resolution-in-ci')

        steps:
            - name: Checkout code
              uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}
                  ref: ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.branch || github.ref }}

            - name: Set up Python
              uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5
              with:
                  python-version: '3.11'

            - name: Fetch master branch
              run: git fetch origin master:master

            - name: Check for max_migration.txt conflicts
              id: check_conflicts
              run: |
                  CONFLICTS_FOUND=false
                  APPS=("posthog" "ee" "products/early_access_features" "products/user_interviews")

                  for app in "${APPS[@]}"; do
                    MAX_FILE="$app/migrations/max_migration.txt"
                    
                    if [ -f "$MAX_FILE" ]; then
                      CURRENT_MAX=$(cat "$MAX_FILE" 2>/dev/null || echo "")
                      MASTER_MAX=$(git show origin/master:"$MAX_FILE" 2>/dev/null || echo "")
                      
                      if [ -n "$CURRENT_MAX" ] && [ -n "$MASTER_MAX" ] && [ "$CURRENT_MAX" != "$MASTER_MAX" ]; then
                        CURRENT_NUM=$(echo "$CURRENT_MAX" | grep -o '^[0-9]\+' || echo "0")
                        MASTER_NUM=$(echo "$MASTER_MAX" | grep -o '^[0-9]\+' || echo "0")
                        
                        if [ "$CURRENT_NUM" -le "$MASTER_NUM" ]; then
                          CONFLICTS_FOUND=true
                        fi
                      fi
                    fi
                  done

                  echo "conflicts_found=$CONFLICTS_FOUND" >> $GITHUB_OUTPUT

            - name: Run detailed conflict analysis
              if: steps.check_conflicts.outputs.conflicts_found == 'true'
              id: detailed_analysis
              run: |
                  OUTPUT=$(python bin/fix-migration-conflicts.py --preview 2>&1)
                  echo "$OUTPUT" > migration_analysis.txt

                  if echo "$OUTPUT" | grep -q "CONFLICT DETECTED"; then
                    echo "script_found_conflicts=true" >> $GITHUB_OUTPUT
                  else
                    echo "script_found_conflicts=false" >> $GITHUB_OUTPUT
                  fi

            - name: Find associated PR
              id: find_pr
              uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6
              with:
                  script: |
                      let branch;
                      if (context.eventName === 'repository_dispatch') {
                        branch = context.payload.client_payload.branch || 'yasen/feat/migrations-conflict-resolution-in-ci';
                      } else {
                        branch = context.ref.replace('refs/heads/', '');
                      }

                      const { data: pulls } = await github.rest.pulls.list({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        head: `${context.repo.owner}:${branch}`,
                        state: 'open'
                      });

                      if (pulls.length > 0) {
                        const pr = pulls[0];
                        core.setOutput('pr_number', pr.number);
                        core.setOutput('pr_found', 'true');
                      } else {
                        core.setOutput('pr_found', 'false');
                      }

            - name: Post auto-detection comment to PR
              if: steps.find_pr.outputs.pr_found == 'true' && steps.detailed_analysis.outputs.script_found_conflicts == 'true'
              uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6
              with:
                  script: |
                      const fs = require('fs');
                      const analysisOutput = fs.readFileSync('migration_analysis.txt', 'utf8');
                      const prNumber = ${{ steps.find_pr.outputs.pr_number }};

                      let branch;
                      if (context.eventName === 'repository_dispatch') {
                        branch = context.payload.client_payload.branch || 'yasen/feat/migrations-conflict-resolution-in-ci';
                      } else {
                        branch = context.ref.replace('refs/heads/', '');
                      }

                      const comment = `## ðŸ¤– Migration conflicts detected

                      Auto-detected migration conflicts in branch \`${branch}\`.

                      <details>
                      <summary>Analysis</summary>

                      \`\`\`
                      ${analysisOutput}
                      \`\`\`
                      </details>

                      **Quick fix:** Comment \`/fix-migrations\` to auto-apply fixes.  
                      **Preview:** Comment \`/preview-migrations\` to see changes first.`;

                      const { data: comments } = await github.rest.issues.listComments({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: prNumber,
                      });

                      const existingComment = comments.find(comment => 
                        comment.user.login === 'github-actions[bot]' && 
                        comment.body.includes('Migration conflicts detected')
                      );

                      if (existingComment) {
                        await github.rest.issues.updateComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          comment_id: existingComment.id,
                          body: comment
                        });
                      } else {
                        await github.rest.issues.createComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: prNumber,
                          body: comment
                        });
                      }

            - name: Post "no conflicts" update
              if: steps.find_pr.outputs.pr_found == 'true' && steps.check_conflicts.outputs.conflicts_found == 'false'
              uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6
              with:
                  script: |
                      const prNumber = ${{ steps.find_pr.outputs.pr_number }};

                      const { data: comments } = await github.rest.issues.listComments({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: prNumber,
                      });

                      const existingComment = comments.find(comment => 
                        comment.user.login === 'github-actions[bot]' && 
                        comment.body.includes('Migration conflicts detected')
                      );

                      if (existingComment) {
                        await github.rest.issues.deleteComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          comment_id: existingComment.id
                        });
                      }
