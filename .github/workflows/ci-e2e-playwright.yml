#
# This workflow runs CI E2E tests with Playwright.
#
# It relies on the container image built by 'container-images-ci.yml'.
#
name: E2E CI Playwright
on:
    pull_request:

env:
    SECRET_KEY: '6b01eee4f945ca25045b5aab440b953461faf08693a9abbf1166dc7c6b9772da' # unsafe - for testing only
    REDIS_URL: redis://localhost
    DATABASE_URL: postgres://posthog:posthog@localhost:5432/posthog
    KAFKA_HOSTS: kafka:9092
    DISABLE_SECURE_SSL_REDIRECT: 1
    SECURE_COOKIES: 0
    OPT_OUT_CAPTURE: 0
    E2E_TESTING: 1
    SKIP_SERVICE_VERSION_REQUIREMENTS: 1
    EMAIL_HOST: email.test.posthog.net
    SITE_URL: http://localhost:8000
    NO_RESTART_LOOP: 1
    CLICKHOUSE_SECURE: 0
    OBJECT_STORAGE_ENABLED: 1
    OBJECT_STORAGE_ENDPOINT: http://localhost:19000
    OBJECT_STORAGE_ACCESS_KEY_ID: object_storage_root_user
    OBJECT_STORAGE_SECRET_ACCESS_KEY: object_storage_root_password
    GITHUB_ACTION_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    CELERY_METRICS_PORT: 8999
    CLOUD_DEPLOYMENT: 1

concurrency:
    group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
    cancel-in-progress: true

jobs:
    changes:
        runs-on: ubuntu-latest
        timeout-minutes: 5
        if: github.repository == 'PostHog/posthog'
        name: Determine need to run E2E checks
        # Set job outputs to values freom filter step
        outputs:
            shouldRun: ${{ steps.changes.outputs.shouldRun }}
        steps:
            # For pull requests it's not necessary to check out the code
            - uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50 # v2
              id: changes
              with:
                  filters: |
                      shouldRun:
                        # Avoid running E2E tests for irrelevant changes
                        # NOTE: we are at risk of missing a dependency here. We could make
                        # the dependencies more clear if we separated the backend/frontend
                        # code completely
                        - 'ee/**'
                        - 'posthog/!(temporal/**)/**'
                        - 'bin/*'
                        - frontend/**/*
                        - requirements.txt
                        - requirements-dev.txt
                        - package.json
                        - pnpm-lock.yaml
                        # Make sure we run if someone is explicitly changes the workflow
                        - .github/workflows/ci-e2e-playwright.yml
                        - .github/actions/build-n-cache-image/action.yml
                        # We use docker compose for tests, make sure we rerun on
                        # changes to docker-compose.dev.yml e.g. dependency
                        # version changes
                        - docker-compose.dev.yml
                        - Dockerfile
                        - playwright/**

    playwright:
        name: Playwright E2E tests (local)
        needs: [changes]
        if: needs.changes.outputs.shouldRun == 'true'
        runs-on: depot-ubuntu-24.04-4
        timeout-minutes: 45
        permissions:
            id-token: write
        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

            - name: Start stack with Docker Compose
              run: |
                  docker compose -f docker-compose.dev.yml down
                  docker compose -f docker-compose.dev.yml up -d

            - name: Set up Python 3.11.9
              uses: actions/setup-python@v5
              with:
                  python-version: 3.11.9
                  cache: 'pip'

            - name: Install uv
              uses: astral-sh/setup-uv@v5.4.1
              with:
                  enable-cache: true
                  pyproject-file: 'pyproject.toml'

            - name: System deps for python3-saml
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libxml2-dev libxmlsec1-dev libxmlsec1-openssl

            - name: Install Python dependencies via uv
              run: |
                  UV_PROJECT_ENVIRONMENT=$pythonLocation uv sync --frozen --dev

            - name: Install pnpm
              uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4

            - name: Set up Node.js
              uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4
              with:
                  node-version: 18.12.1
                  cache: 'pnpm'

            - name: Get pnpm cache directory path
              id: pnpm-cache-dir
              run: echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

            - uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4
              id: pnpm-cache
              with:
                  path: ${{ steps.pnpm-cache-dir.outputs.PNPM_STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-cypress-${{ hashFiles('pnpm-lock.yaml') }}
                  restore-keys: ${{ runner.os }}-pnpm-cypress-

            - name: Install package.json dependencies with pnpm
              run: |
                  pnpm --filter=@posthog/playwright... install --frozen-lockfile
                  bin/turbo --filter=@posthog/frontend prepare

            - name: Install Playwright browsers
              run: pnpm --filter=@posthog/playwright exec playwright install --with-deps

            # Pre-build product bundles needed by UI
            - name: Build product static bundle
              run: pnpm --filter=@posthog/frontend build:products

            - name: Wait for ClickHouse & Kafka
              run: ./bin/check_kafka_clickhouse_up

            - name: Apply migrations & seed dev data
              run: |
                  python manage.py migrate --noinput
                  python manage.py migrate_clickhouse
                  python manage.py setup_dev

            # Launch PostHog web & worker in the background
            - name: Start PostHog web & Celery worker
              run: |
                  python manage.py run_autoreload_celery --type=worker &> /tmp/celery.log &
                  python manage.py runserver 8080 &> /tmp/server.log &

            - name: Wait for PostHog to be ready
              uses: iFaxity/wait-on-action@v1.2.1
              with:
                  resource: http://localhost:8080
                  timeout: 180000
                  interval: 10000
                  verbose: true

            - name: Run Playwright tests
              env:
                  START_PLAYWRIGHT: '1'
              run: pnpm --filter=@posthog/playwright test

            # ── Artifacts on failure / always ─────────────────────────────────────
            - name: Archive Playwright report on failure
              if: failure()
              uses: actions/upload-artifact@v4
              with:
                  name: playwright-report
                  path: playwright/playwright-report/
                  retention-days: 30

            - name: Archive screenshots
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: playwright-screenshots
                  path: playwright/test-results
                  retention-days: 30

    capture-run-time:
        name: Capture run time
        runs-on: ubuntu-latest
        needs: [playwright]
        if: needs.changes.outputs.shouldRun == 'true'
        steps:
            - name: Calculate run time and send to PostHog
              run: |
                  gh auth login --with-token < <(echo ${{ secrets.GITHUB_TOKEN }})
                  run_id=${GITHUB_RUN_ID}
                  repo=${GITHUB_REPOSITORY}
                  run_info=$(gh api repos/${repo}/actions/runs/${run_id})
                  echo run_info: ${run_info}
                  # name is the name of the workflow file
                  # run_started_at is the start time of the workflow
                  # we want to get the number of seconds between the start time and now
                  name=$(echo ${run_info} | jq -r '.name')
                  run_url=$(echo ${run_info} | jq -r '.url')
                  run_started_at=$(echo ${run_info} | jq -r '.run_started_at')
                  run_attempt=$(echo ${run_info} | jq -r '.run_attempt')
                  start_seconds=$(date -d "${run_started_at}" +%s)
                  now_seconds=$(date +%s)
                  duration=$((now_seconds-start_seconds))
                  echo running_time_duration_seconds=${duration} >> $GITHUB_ENV
                  echo running_time_run_url=${run_url} >> $GITHUB_ENV
                  echo running_time_run_attempt=${run_attempt} >> $GITHUB_ENV
                  echo running_time_run_id=${run_id} >> $GITHUB_ENV
                  echo running_time_run_started_at=${run_started_at} >> $GITHUB_ENV
            - name: Capture running time to PostHog
              if: github.repository == 'PostHog/posthog'
              uses: PostHog/posthog-github-action@v0.1
              with:
                  posthog-token: ${{secrets.POSTHOG_API_TOKEN}}
                  event: 'posthog-ci-running-time'
                  properties: '{"runner": "depot", "duration_seconds": ${{ env.running_time_duration_seconds }}, "run_url": "${{ env.running_time_run_url }}", "run_attempt": "${{ env.running_time_run_attempt }}", "run_id": "${{ env.running_time_run_id }}", "run_started_at": "${{ env.running_time_run_started_at }}"}'

    posthog-analytics:
        name: PostHog CI analytics
        if: always() && needs.changes.outputs.shouldRun == 'true'
        needs: [capture-run-time] # last job in this workflow
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
            - uses: ./.github/actions/ci-analytics
              with:
                  posthog-api-key: ${{ secrets.CI_ANALYTICS_TOKEN }}
