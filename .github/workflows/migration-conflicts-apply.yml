name: Migration Conflicts - Apply Fixes

on:
    workflow_dispatch:
        inputs:
            app_filter:
                description: 'Specific app to fix (optional, e.g., "posthog", "billing")'
                required: false
                type: string
            confirm:
                description: 'Type "YES" to confirm you want to apply the fixes'
                required: true
                type: string

jobs:
    apply-migration-fixes:
        runs-on: ubuntu-latest

        steps:
            - name: Validate confirmation
              if: inputs.confirm != 'YES'
              run: |
                  echo "‚ùå Confirmation required. Please type 'YES' in the confirm field to apply fixes."
                  exit 1

            - name: Checkout code
              uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Set up Python
              uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5
              with:
                  python-version: '3.11'

            - name: Configure git
              run: |
                  git config --global user.name "github-actions[bot]"
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"

            - name: Fetch master branch
              run: |
                  git fetch origin master:master

            - name: Apply migration conflict fixes
              id: apply_fixes
              run: |
                  echo "üîß Applying migration conflict fixes..."

                  # Run the fix (with automatic yes to confirmation)
                  OUTPUT=$(echo "y" | python bin/fix-migration-conflicts.py --fix ${{ inputs.app_filter && format('--app {0}', inputs.app_filter) || '' }} 2>&1)

                  echo "$OUTPUT"
                  echo "$OUTPUT" > ../apply_output.txt

                  # Check if any changes were made
                  if git diff --quiet; then
                    echo "changes_made=false" >> $GITHUB_OUTPUT
                  else
                    echo "changes_made=true" >> $GITHUB_OUTPUT
                  fi

            - name: Show changes made
              if: steps.apply_fixes.outputs.changes_made == 'true'
              run: |
                  echo "üìã Files changed:"
                  git diff --name-only
                  echo ""
                  echo "üìÑ Detailed changes:"
                  git diff
                  echo ""
                  echo "‚úÖ Changes are ready to commit!"

            - name: Commit and push changes
              if: steps.apply_fixes.outputs.changes_made == 'true'
              uses: stefanzweifel/git-auto-commit-action@e348103e9026cc0eee72ae06630dbe30c8bf7a79 # v5
              with:
                  commit_message: |
                      fix: resolve migration conflicts

                      Automatically resolved Django migration conflicts:

                      Changes made:
                      ‚Ä¢ Renumbered migration files to avoid conflicts with master  
                      ‚Ä¢ Updated migration dependencies to point to correct previous migrations
                      ‚Ä¢ Updated max_migration.txt files with latest migration names

                      Generated by migration-conflicts-apply.yml workflow
                  commit_user_name: github-actions[bot]
                  commit_user_email: github-actions[bot]@users.noreply.github.com
                  commit_author: GitHub Actions <github-actions[bot]@users.noreply.github.com>

            - name: Update PR with success comment
              if: steps.apply_fixes.outputs.changes_made == 'true'
              uses: actions/github-script@60a0d83b47d1a19c603a7b337faa4fc7c1573de0 # v7
              with:
                  script: |
                      const fs = require('fs');
                      let applyOutput = '';
                      try {
                        applyOutput = fs.readFileSync('../apply_output.txt', 'utf8');
                      } catch (e) {
                        applyOutput = 'Output not available';
                      }

                      // Get list of changed files
                      const { execSync } = require('child_process');
                      let changedFiles = '';
                      try {
                        changedFiles = execSync('git diff HEAD~1 --name-only', { encoding: 'utf8' });
                      } catch (e) {
                        changedFiles = 'Unable to get file list';
                      }

                      const appFilter = '${{ inputs.app_filter }}';
                      const appText = appFilter ? ` for app "${appFilter}"` : '';

                      const comment = `## ‚úÖ Migration Conflicts Fixed Successfully!

                      I've automatically resolved the migration conflicts${appText} and committed the changes to this branch.

                      ### üìã Files Updated:
                      \`\`\`
                      ${changedFiles.trim()}
                      \`\`\`

                      <details>
                      <summary><strong>üìÑ Click to see what was done</strong></summary>

                      \`\`\`
                      ${applyOutput}
                      \`\`\`
                      </details>

                      ### ‚úÖ Next Steps:
                      1. **Review the changes** in the latest commit
                      2. **Test your migrations** locally if needed
                      3. **Continue with your PR** - the conflicts are resolved!

                      The migration files have been properly renumbered and all dependencies updated. Your PR should now merge cleanly! üéâ

                      ---
                      <sub>ü§ñ Applied by migration-conflicts-apply.yml workflow</sub>`;

                      await github.rest.issues.createComment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: context.issue.number,
                        body: comment
                      });

            - name: Update PR when no changes needed
              if: steps.apply_fixes.outputs.changes_made == 'false'
              uses: actions/github-script@60a0d83b47d1a19c603a7b337faa4fc7c1573de0 # v7
              with:
                  script: |
                      const comment = `## ‚ÑπÔ∏è No Migration Conflicts to Fix

                      I ran the migration conflict resolver, but no conflicts were found that needed fixing.

                      This could mean:
                      - The conflicts were already resolved
                      - No migration conflicts exist
                      - The branch is already up to date with master

                      Your PR should be ready to merge! ‚úÖ

                      ---
                      <sub>ü§ñ Checked by migration-conflicts-apply.yml workflow</sub>`;

                      await github.rest.issues.createComment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: context.issue.number,
                        body: comment
                      });
