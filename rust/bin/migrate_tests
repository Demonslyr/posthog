#!/usr/bin/env bash

set -euxo pipefail

SCRIPT_DIR=$(dirname "$(readlink -f "$0")")

# this is the *test suite database* we're bootstrapping. local dev tables should either:
# 1. already be bootstrapped by posthog (Django app) `bin/migrate` (run this if you haven't)
# 2. can be bootstrapped manually into isolated DBs (non-Django owned tables)
#    using `rust/bin/migrate` for local dev outside of unit test scope

# pick up "default" test DB URL and namespace from posthog/rust/.env file.
# NOTE: cargo and sqlx honor the .env file by default when developing locally
source "$SCRIPT_DIR/../.env"

sqlx database create -D "$DATABASE_URL"

# these have matching tables in prod (and top-level dev Docker Compose)
# already, so we only want to replicate the tables we need in sqlx::test
# unit tests, under their own database namespaces. Add more package-level
# migrations here as we add new services and test suites that touch the DB
sqlx migrate run -D "$DATABASE_URL" --ignore-missing --source "$SCRIPT_DIR/../common/migrations"
sqlx migrate run -D "$DATABASE_URL" --ignore-missing --source "$SCRIPT_DIR/../hook-common/migrations"
sqlx migrate run -D "$DATABASE_URL" --ignore-missing --source "$SCRIPT_DIR/../batch-import-worker/migrations"
sqlx migrate run -D "$DATABASE_URL" --ignore-missing --source "$SCRIPT_DIR/../cyclotron-core/migrations"
sqlx migrate run -D "$DATABASE_URL" --ignore-missing --source "$SCRIPT_DIR/../cymbal/tests/test_migrations"
sqlx migrate run -D "$DATABASE_URL" --ignore-missing --source "$SCRIPT_DIR/../property-defs-rs/tests/test_migrations"

# trigger the SQLX query cache refresh while the schemas are migrated and tables are empty
$SCRIPT_DIR/update_sqlx_query_cache
