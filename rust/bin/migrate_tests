#!/usr/bin/env bash

set -euxo pipefail

SCRIPT_DIR=$(dirname "$(readlink -f "$0")")

SQLX_CLI_VERSION="0.8.3"

if docker ps | grep -q -v "posthog-db-1" ; then
  echo >&2 "FATAL: posthog repo root docker-compose must be UP prior to running $(realpath $0)"
  exit 1
fi

# this is the *test suite database* we're bootstrapping. local dev tables should either:
# 1. already be bootstrapped by posthog (Django app) `bin/migrate` (run this if you haven't)
# 2. can be bootstrapped manually into isolated DBs (non-Django owned tables)
#    using `rust/bin/migrate` for local dev outside of unit test scope

# pick up "default" test DB URL and namespace from posthog/rust/.env file.
# NOTE: cargo and sqlx honor the .env file by default when developing locally
source "$SCRIPT_DIR/../.env"
echo "Sourced rust/.env file - database URL is: $DATABASE_URL"

if ! which sqlx; then
  echo "Installing SQLX CLI tool..."
  cargo install sqlx-cli --version "$SQLX_CLI_VERSION"
fi

sqlx database create -D "$DATABASE_URL"

# hop up to posthog repo root and bootstrap the test_posthog DB.
# at the moment, rust/feature-flags subproject uses the top level
# testing DB not sqlx::test migrations to avoid duplicate schemas
# to maintain when the service only needs Django-owned tables.
#
# This is pretty nice - I may try to migrate other services that
# aren't using isolated Postgres instances in production to this
# but for now, let's just support it so we can run "cargo test"
# from the workspace level (posthog/rust) and have it work.
pushd "$SCRIPT_DIR/../.."
TEST=1 python manage.py setup_test_environment --only-postgres

# these have matching tables in prod (and top-level dev Docker Compose)
# already, so we only want to replicate the tables we need in sqlx::test
# unit tests, under their own database namespaces. Add more package-level
# migrations here as we add new services and test suites that touch the DB
sqlx migrate run -D "$DATABASE_URL" --ignore-missing --source "$SCRIPT_DIR/../common/migrations"
sqlx migrate run -D "$DATABASE_URL" --ignore-missing --source "$SCRIPT_DIR/../hook-common/migrations"
sqlx migrate run -D "$DATABASE_URL" --ignore-missing --source "$SCRIPT_DIR/../batch-import-worker/migrations"
sqlx migrate run -D "$DATABASE_URL" --ignore-missing --source "$SCRIPT_DIR/../cyclotron-core/migrations"
sqlx migrate run -D "$DATABASE_URL" --ignore-missing --source "$SCRIPT_DIR/../cymbal/tests/test_migrations"
sqlx migrate run -D "$DATABASE_URL" --ignore-missing --source "$SCRIPT_DIR/../property-defs-rs/tests/test_migrations"

# trigger the SQLX query cache refresh while the schemas are migrated and tables are empty
$SCRIPT_DIR/update_sqlx_query_cache
