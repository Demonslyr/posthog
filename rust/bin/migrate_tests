#!/usr/bin/env bash

set -euxo pipefail

SCRIPT_DIR=$(dirname "$(readlink -f "$0")")
source "$SCRIPT_DIR/util"

SQLX_CLI_VERSION="0.8.3"
POSTHOG_DOCKER_DB_CONTAINER_NAME="posthog-db-1"

if [[ -z "$(docker ps -q -f "name=${POSTHOG_DOCKER_DB_CONTAINER_NAME}")" ]] ; then
  log --err "posthog repo root docker-compose must be UP prior to running $(realpath $0)"
  exit 1
fi

# .env defines the DATABASE_URL of the *test suite database* we're bootstrapping.
# This should be all you need for local dev or running your unit tests. Under
# normal circumstances in a Rust subproject. See `posthog/rust/README.md` for more.
# NOTE: cargo and SQLX honor the .env file by default when developing locally
source "$SCRIPT_DIR/../.env"
log "Sourced rust/.env file - database URL is: $DATABASE_URL"

if ! which sqlx; then
  log "Installing SQLX CLI tool..."
  cargo install sqlx-cli --version "$SQLX_CLI_VERSION"
fi

sqlx database create -D "$DATABASE_URL"

# hop up to posthog repo root and bootstrap the test_posthog DB.
# at the moment, rust/feature-flags subproject uses the top level
# testing DB and existing Django-managed tables exclusively.
# This is an option when the service only touches Django tables
pushd "$SCRIPT_DIR/../.."
DEBUG=true TEST=true python manage.py setup_test_environment --only-postgres

# most of the Rust workspace projects depend on a mix of existing Django-owned
# DB tables and custom defined ones. In order for SQLX query cache and tests
# to pass, we need to define all of them together in one single, test-scoped
# DB namespace, as defined in `posthog/rust/.env`. This bit does that.
#
# New Rust workspace subprojects should add statements like this pointing to
# their own dev and test migrations. Details in the `posthog/rust/README.md`
log "Migrating workspace projects..."
sqlx migrate run -D "$DATABASE_URL" --ignore-missing --source "$SCRIPT_DIR/../common/migrations"
sqlx migrate run -D "$DATABASE_URL" --ignore-missing --source "$SCRIPT_DIR/../hook-common/migrations"
sqlx migrate run -D "$DATABASE_URL" --ignore-missing --source "$SCRIPT_DIR/../batch-import-worker/migrations"
sqlx migrate run -D "$DATABASE_URL" --ignore-missing --source "$SCRIPT_DIR/../cyclotron-core/migrations"
sqlx migrate run -D "$DATABASE_URL" --ignore-missing --source "$SCRIPT_DIR/../cymbal/tests/test_migrations"
sqlx migrate run -D "$DATABASE_URL" --ignore-missing --source "$SCRIPT_DIR/../property-defs-rs/tests/test_migrations"

# trigger the SQLX query cache refresh while the schemas are migrated and tables are empty
$SCRIPT_DIR/update_sqlx_query_cache
