#!/usr/bin/env bash

set -euxo pipefail

#
# this boostraps the databases and tables that are *not* explicitly owned
# by the Django monolith. Includes "cyclotron" and "propdefs" add more for
# new services that depend on their own isolated Postgres instance in
# production
#

SCRIPT_DIR=$(dirname "$(readlink -f "$0")")

# since `posthog/rust/.env` defines our default test-scoped DATABSE_URL, we
# apply overrides manually here to define separate DB namespaces in dev
# for services that have their own isolated Postgres instance in production.
# this on the fly for databases that are isolated in production
#
# for "live" local dev, remember to set your $DATABASE_URL to one of the below.
# In practice, you should almost never need to do this vs. using `bin/migrate_tests`.
# See the `posthog/rust/README.md` for details.
DB_HOST="${DB_HOST:-postgres://posthog:posthog@localhost:5432}"

# `posthog/plugin-server/package.json` overrides CYCLOTRON_DATABASE_NAME
# in a test target so we need to accomodate that too
CYCLOTRON_DB_NAME="${CYCLOTRON_DATABASE_NAME:-posthog}"
CYCLOTRON_DB="$DB_HOST/${CYCLOTRON_DB_NAME}"

# cyclotron points to it's own DB instance in production, and therefore has its own
# DB namespace in local dev too.
if [ "$CYCLOTRON_DB_NAME" != "posthog" ]; then
    sqlx database create -D "$CYCLOTRON_DB"
fi
sqlx migrate run -D "$CYCLOTRON_DB" --source "$SCRIPT_DIR/../cyclotron-core/migrations"

# `property-defs-rs` will soon point to it's own isolated DB instance in production.
# while we're in a transitional state, we also rely on test-scoped tables that mirror
# the old Django-owned schemas. Stay tuned for more updates here...
PROPDEFS_DB_NAME="${PROPDEFS_DATABASE_NAME:-posthog}"
PROPDEFS_DB="$DB_HOST/${PROPDEFS_DB_NAME}"
if [ "$PROPDEFS_DB_NAME" != "posthog" ]; then
    sqlx database create -D "$PROPDEFS_DB"
fi
