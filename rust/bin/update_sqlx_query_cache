#!/usr/bin/env bash

set -euxo pipefail

#
# Updates the SQLX query cache for the entire posthog/rust workspace.
#
# This operation has a number of moving parts. See `posthog/rust/README.md`
# for more details. *IMPORTANT* you should only need to run this manually if
# you've already run `posthog/rust/bin/migrate_tests`, and have since made changes
# to SQLX-managed queries in your dev loop, and don't want to bother running
# unit tests again.

SCRIPT_DIR=$(dirname "$(readlink -f "$0")")

# Picks up default Rust test database namespace via DATABASE_URL env var.
# This database is hosted by the dev PG instance in the Django monolith's
# Docker Compose rig, and (if `bin/migrate_tests` has been run!) will
# already have all the schemas required for SQLX macros expansion to use
# when refreshing the SQLX query cache at `posthog/rust/.sqlx`
source "$SCRIPT_DIR/../.env"

# Refresh (rebuild) the SQLX query cache for the workspace. Note: the --all-* arguments
# ensure that `sqlx::query*(...)` macros used in unit tests (etc.) are also cached
pushd "$SCRIPT_DIR/.."
cargo sqlx prepare -D "$DATABASE_URL" --workspace -- --all-targets --all-features
popd
