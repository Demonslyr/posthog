#!/usr/bin/env bash

set -euxo pipefail

#
# Only intended to be run/sourced by other scripts!
#
# WARNING: This expects Django's setup_test_environment has
# already been executed by the caller

SCRIPT_DIR=$(dirname "$(readlink -f "$0")")
source "$SCRIPT_DIR/util"

# Ensure schema export and migration tools are installed
check_install_pinned_sqlx_cli
check_pg_dump_installed

# Export test_posthog schemas into local Rust workspace for sqlx::test

# Step 1: add hardcoded migration to set up GIN index extension
RUST_MIGRATIONS="$SCRIPT_DIR/../migrations"
MIGRATION_COUNTER=20250402111111

if [ -d "$RUST_MIGRATIONS" ]; then
  rm -f "$RUST_MIGRATIONS/*"
fi
mkdir -p "$RUST_MIGRATIONS"

# Step 2: create static migrations to set up the DB for creation of the exported schemas
echo "CREATE EXTENSION IF NOT EXISTS pg_trgm;" > "${RUST_MIGRATIONS}/${MIGRATION_COUNTER}_posthog_gin_extension.sql"
MIGRATION_COUNTER=$((MIGRATION_COUNTER + 1))
echo "SET search_path = public;" > "${RUST_MIGRATIONS}/${MIGRATION_COUNTER}_posthog_set_search_path.sql"
MIGRATION_COUNTER=$((MIGRATION_COUNTER + 1))

# Step 3: add a migration file for each table we need to export
# from the 'public.posthog_*' set of tables. Please add more
# here as needed rather than harcoding duplicates in the workspace
POSTHOG_TABLES=( \
  "posthog_team" \
  "posthog_organization" \
  "posthog_grouptypemapping" \
  "posthog_propertydefinition" \
  "posthog_eventproperty" \
  "posthog_eventdefinition" \
  "ee_enterprisepropertydefinition" \
  "posthog_errortrackinggroup" \
  "posthog_errortrackingissue" \
  "posthog_errortrackingissueassignment" \
  "posthog_errortrackingissuefingerprint" \
  "posthog_errortrackingissuefingerprintv2" \
  "posthog_errortrackingstackframe" \
  "posthog_errortrackingsymbolset" \
  "posthog_project")

for table_name in "${POSTHOG_TABLES[@]}"; do
  TMP_FILE_1="$RUST_MIGRATIONS/${table_name}_1.sql.tmp"
  TMP_FILE_2="$RUST_MIGRATIONS/${table_name}_2.sql.tmp"
  TMP_FILE_3="$RUST_MIGRATIONS/${table_name}_3.sql.tmp"
  MIGRATION_FILE="$RUST_MIGRATIONS/${MIGRATION_COUNTER}_${table_name}_schema.sql"
  MIGRATION_COUNTER=$((MIGRATION_COUNTER + 1))

  log "Exporting test_posthog schema for table: ${table_name}..."
  PGPASSWORD=posthog pg_dump \
    --user posthog \
    --host localhost \
    --port 5432 \
    --dbname test_posthog \
    --file="$TMP_FILE_1" \
    --schema-only \
    --schema public \
    --table "$table_name"

  sed '/SELECT pg_catalog\.set_config/d' "$TMP_FILE_1" > "$TMP_FILE_2"
  sed '/SET /d' "$TMP_FILE_2" > "$TMP_FILE_3"
  awk '{gsub(/public\./, ""); print}' "$TMP_FILE_3" > "$MIGRATION_FILE"
done

# Step 4: clean up the tempfiles!
find "${RUST_MIGRATIONS}" -name '*.tmp' -delete
